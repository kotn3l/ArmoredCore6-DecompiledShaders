#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1307;
float _3692;
float _3693;
float _3694;
float _3695;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _397 = _395.x;
    float _409 = dot(vec4(_397, _395.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _426 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_397 - _409) * cbMtdParam._m0[24u].z) + _409) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3704 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _440 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_427 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321);
    float _443 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_427 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322);
    float _446 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_427 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323);
    vec4 _464 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _481 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _483 = _481.x;
    float _484 = _481.y;
    float _485 = _481.z;
    float _494 = ((_464.z - _485) * _427) + _485;
    float _497 = ((((_464.x - _483) * _427) + _483) * 2.0) + (-1.0);
    float _499 = ((((_464.y - _484) * _427) + _484) * 2.0) + (-1.0);
    float _500 = dot(vec2(_497, _499), vec2(_497, _499));
    float _3715 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _548 = _546.x;
    float _549 = 1.0 - _548;
    float _555 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _558 = ((isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : min(_555, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _567 = (_558 - ((((((_548 - _549) * cbMtdParam._m0[24u].w) + _549) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _558))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3736 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _575 = (_568 * (cbMtdParam._m0[17u].x - _440)) + _440;
    float _576 = (_568 * (cbMtdParam._m0[17u].y - _443)) + _443;
    float _577 = (_568 * (cbMtdParam._m0[17u].z - _446)) + _446;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _591 = _589.x;
    float _592 = 1.0 - _591;
    float _619 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_591 - _592) * cbMtdParam._m0[24u].y) + _592) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3747 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _628 = ((((cbMtdParam._m0[10u].x - _575) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _620) + _575;
    float _629 = ((((cbMtdParam._m0[10u].y - _576) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _620) + _576;
    float _630 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _577)) * _620) + _577;
    float _634 = (cbMtdParam._m0[19u].w * (_521.z - _494)) + _494;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _655 = (_648.x * 2.0) + (-1.0);
    float _656 = (_648.y * 2.0) + (-1.0);
    float _657 = dot(vec2(_655, _656), vec2(_655, _656));
    float _3758 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _665 = (_568 * (_648.z - _634)) + _634;
    float _668 = ((cbMtdParam._m0[23u].y - _665) * _620) + _665;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _693 = (_687.x * 2.0) + (-1.0);
    float _694 = (_687.y * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _3769 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _703 = (((_521.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _497;
    float _704 = (((_521.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _499;
    float _716 = (((_655 - _703) + (cbMtdParam._m0[21u].x * _703)) * _568) + _703;
    float _717 = (((_656 - _704) + (cbMtdParam._m0[21u].x * _704)) * _568) + _704;
    float _718 = (_568 * (sqrt(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) - _505)) + _505;
    float _729 = (((_693 - _716) + (_716 * cbMtdParam._m0[22u].z)) * _620) + _716;
    float _730 = (((_694 - _717) + (_717 * cbMtdParam._m0[22u].z)) * _620) + _717;
    float _731 = ((sqrt(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) - _718) * _620) + _718;
    float _733 = cbMtdParam._m0[22u].x + _521.w;
    float _736 = fma(_731, _240 * NORMAL.x, fma(_730, _247 * TANGENT.x, (_233 * _225) * _729));
    float _739 = fma(_731, _240 * NORMAL.y, fma(_730, _247 * TANGENT.y, (_233 * _226) * _729));
    float _742 = fma(_731, _240 * NORMAL.z, fma(_730, _247 * TANGENT.z, (_233 * _227) * _729));
    float _746 = inversesqrt(dot(vec3(_736, _739, _742), vec3(_736, _739, _742)));
    float _747 = _746 * _736;
    float _748 = _746 * _739;
    float _749 = _746 * _742;
    float _3780 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _750 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3802 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3813 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3824 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _768 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _818 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _808);
    float _819 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _808);
    float _820 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _808);
    float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
    float _825 = _818 * _824;
    float _826 = _819 * _824;
    float _827 = _820 * _824;
    vec4 _832 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _834 = _832.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _988 = sqrt(((_818 * _818) + (_819 * _819)) + (_820 * _820));
        float _994 = (cbMatDynParam._m0[5u].x * _988) + cbMatDynParam._m0[5u].y;
        float _3835 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _999 = (cbMatDynParam._m0[5u].z * _988) + cbMatDynParam._m0[5u].w;
        float _3846 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) - _995)) + _995) < ((_834 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _845 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _846 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _864 = fma(_749, cbSceneParam._m0[5u].z, fma(_748, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _747));
    float _867 = fma(_749, cbSceneParam._m0[6u].z, fma(_748, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _747));
    float _870 = fma(_749, cbSceneParam._m0[7u].z, fma(_748, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _747));
    uint _883 = _253 + 9u;
    uint _884 = _883 + uint(cbMatDynParam._m0[0u].w);
    float _890 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_884].x;
    float _891 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_884].y;
    float _892 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_884].z;
    float _3857 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    vec4 _904 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _845, cbSceneParam._m0[86u].y * _846));
    float _908 = ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * TEXCOORD_5.w) * _904.x;
    float _909 = dot(vec3(_747, _748, _749), vec3(_825, _826, _827));
    float _912 = _909 * 2.0;
    float _916 = (_912 * _747) - _825;
    float _917 = (_912 * _748) - _826;
    float _918 = (_912 * _749) - _827;
    float _922 = abs(dot(vec3(_825, _826, _827), vec3(_747, _748, _749)));
    float _3890 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _924 = sqrt(_750);
    float _937 = exp2((_924 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_924 * 3.0));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1306;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1031 = fma(_977, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _969));
        float _1035 = fma(_977, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _969));
        float _1039 = fma(_977, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _969));
        float _1064 = _969 + _747;
        float _1065 = _973 + _748;
        float _1066 = _977 + _749;
        float _1076 = fma(_1066, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064)) - _1031;
        float _1077 = fma(_1066, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064)) - _1035;
        float _1078 = fma(_1066, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064)) - _1039;
        float _1082 = inversesqrt(dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078)));
        float _1095 = ((_1082 * _1076) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1031 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1082 * _1077) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1035 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1082 * _1078) / cbModelParam._m0[34u].z) + ((((((_1039 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        float _1134 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1100.x + (-0.5));
        float _1136 = _1134 * (_1100.y + (-0.5));
        float _1137 = _1134 * (_1100.z + (-0.5));
        float _1144 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1107.x + (-0.5));
        float _1146 = _1144 * (_1107.y + (-0.5));
        float _1147 = _1144 * (_1107.z + (-0.5));
        float _1154 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1114.x + (-0.5));
        float _1156 = _1154 * (_1114.y + (-0.5));
        float _1157 = _1154 * (_1114.z + (-0.5));
        float _1164 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1121.x + (-0.5));
        float _1166 = _1164 * (_1121.y + (-0.5));
        float _1167 = _1164 * (_1121.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1188 = (dot(vec3(_747, _748, _749), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1198 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3938 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1200 + 1.0))) + _1205) * _1168;
        float _1215 = _1136 * 0.5;
        float _1216 = _1146 * 0.5;
        float _1217 = _1156 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_747, _748, _749), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3971 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1242 + 1.0))) + _1247) * _1169;
        float _1257 = _1137 * 0.5;
        float _1258 = _1147 * 0.5;
        float _1259 = _1157 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_747, _748, _749), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4004 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1284 + 1.0))) + _1289) * _1170;
        _1306 = _1137;
        _1308 = _1136;
        _1309 = _1135;
        _1310 = _1147;
        _1311 = _1146;
        _1312 = _1145;
        _1313 = _1157;
        _1314 = _1156;
        _1315 = _1155;
        _1316 = _1170;
        _1317 = _1169;
        _1318 = _1168;
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _1307;
        _1308 = _1307;
        _1309 = _1307;
        _1310 = _1307;
        _1311 = _1307;
        _1312 = _1307;
        _1313 = _1307;
        _1314 = _1307;
        _1315 = _1307;
        _1316 = _1307;
        _1317 = _1307;
        _1318 = _1307;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1349 = fma(_977, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969));
        float _1353 = fma(_977, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969));
        float _1357 = fma(_977, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969));
        float _1380 = _969 + _747;
        float _1381 = _973 + _748;
        float _1382 = _977 + _749;
        float _1392 = fma(_1382, cbModelParam._m0[30u].z, fma(_1381, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1380)) - _1349;
        float _1393 = fma(_1382, cbModelParam._m0[31u].z, fma(_1381, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1380)) - _1353;
        float _1394 = fma(_1382, cbModelParam._m0[32u].z, fma(_1381, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1380)) - _1357;
        float _1398 = inversesqrt(dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394)));
        float _1411 = ((_1398 * _1392) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1349 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1398 * _1393) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1353 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1398 * _1394) / cbModelParam._m0[35u].z) + ((((((_1357 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        float _1448 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1415.x + (-0.5));
        float _1450 = _1448 * (_1415.y + (-0.5));
        float _1451 = _1448 * (_1415.z + (-0.5));
        float _1458 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1422.x + (-0.5));
        float _1460 = _1458 * (_1422.y + (-0.5));
        float _1461 = _1458 * (_1422.z + (-0.5));
        float _1468 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1429.x + (-0.5));
        float _1470 = _1468 * (_1429.y + (-0.5));
        float _1471 = _1468 * (_1429.z + (-0.5));
        float _1478 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1436.x + (-0.5));
        float _1480 = _1478 * (_1436.y + (-0.5));
        float _1481 = _1478 * (_1436.z + (-0.5));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = _1449 * 0.5;
        float _1486 = _1459 * 0.5;
        float _1487 = _1469 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_747, _748, _749), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4067 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1512 + 1.0))) + _1517) * _1482;
        float _1527 = _1450 * 0.5;
        float _1528 = _1460 * 0.5;
        float _1529 = _1470 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_747, _748, _749), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4100 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1554 + 1.0))) + _1559) * _1483;
        float _1569 = _1451 * 0.5;
        float _1570 = _1461 * 0.5;
        float _1571 = _1471 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_747, _748, _749), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4133 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1596 + 1.0))) + _1601) * _1484;
        _1618 = _1451;
        _1619 = _1450;
        _1620 = _1449;
        _1621 = _1461;
        _1622 = _1460;
        _1623 = _1459;
        _1624 = _1471;
        _1625 = _1470;
        _1626 = _1469;
        _1627 = _1484;
        _1628 = _1483;
        _1629 = _1482;
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
    }
    else
    {
        _1618 = _1307;
        _1619 = _1307;
        _1620 = _1307;
        _1621 = _1307;
        _1622 = _1307;
        _1623 = _1307;
        _1624 = _1307;
        _1625 = _1307;
        _1626 = _1307;
        _1627 = _1307;
        _1628 = _1307;
        _1629 = _1307;
        _1630 = 0.0;
        _1631 = 0.0;
        _1632 = 0.0;
    }
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1319)) + _1319;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1320)) + _1320;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1321)) + _1321;
    float _1665 = fma(_1644, cbSceneParam._m0[89u].z, fma(_1643, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1644, cbSceneParam._m0[90u].z, fma(_1643, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1644, cbSceneParam._m0[91u].z, fma(_1643, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1642));
    float _1686 = _916 * 0.5;
    float _1687 = _917 * 0.5;
    float _1688 = _918 * 0.5;
    float _1689 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1692 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1695 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1729;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1702 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1306, _1310, _1313, _1316));
        float _1706 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1710 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1717 = dot(vec4(cbModelParam._m0[39u]), vec4(_1686, _1687, _1688, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1740;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1731 = dot(vec4(cbModelParam._m0[40u]), vec4(_1686, _1687, _1688, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1744 = (_1740 * cbModelParam._m0[1u].x) + (_1729 * (1.0 - cbModelParam._m0[1u].x));
    float _1754 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _750);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1754 : min(cbModelParam._m0[25u].z, _1754));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1803 = fma(_977, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969)) + cbModelParam._m0[13u].w;
        float _1807 = fma(_977, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969)) + cbModelParam._m0[14u].w;
        float _1811 = fma(_977, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969)) + cbModelParam._m0[15u].w;
        float _1814 = fma(_918, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916));
        float _1817 = fma(_918, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916));
        float _1820 = fma(_918, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916));
        float _1848;
        if (_1814 > 0.0)
        {
            _1848 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1848 = frontier_phi_17_15_ladder;
        }
        float _2070;
        if (_1817 > 0.0)
        {
            _2070 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2070 = frontier_phi_26_22_ladder;
        }
        float _2316;
        if (_1820 > 0.0)
        {
            _2316 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2316 = frontier_phi_38_33_ladder;
        }
        float _2318 = isnan(_2070) ? _1848 : (isnan(_1848) ? _2070 : min(_1848, _2070));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1814) + _1803;
        float _2324 = (_2319 * _1817) + _1807;
        float _2325 = (_2319 * _1820) + _1811;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2326;
        float _2330 = _2326 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 > _2330) || ((_2324 < _2328) || ((_2323 < _2328) || (_2323 > _2330))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2325, cbModelParam._m0[9u].z, fma(_2324, cbModelParam._m0[9u].y, _2323 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2325, cbModelParam._m0[10u].z, fma(_2324, cbModelParam._m0[10u].y, _2323 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2325, cbModelParam._m0[11u].z, fma(_2324, cbModelParam._m0[11u].y, _2323 * cbModelParam._m0[11u].x))), _1755);
            frontier_phi_16_38_ladder = _2449.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2449.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2449.x * cbModelParam._m0[1u].y;
        }
        _1836 = frontier_phi_16_38_ladder_2;
        _1838 = frontier_phi_16_38_ladder_1;
        _1840 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_916, _917, _918), _1755);
        _1836 = _1824.x * cbModelParam._m0[1u].y;
        _1838 = _1824.y * cbModelParam._m0[1u].y;
        _1840 = _1824.z * cbModelParam._m0[1u].y;
    }
    float _1844 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _750);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1844 : min(cbModelParam._m0[25u].w, _1844));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1899 = fma(_977, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969)) + cbModelParam._m0[21u].w;
        float _1903 = fma(_977, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969)) + cbModelParam._m0[22u].w;
        float _1907 = fma(_977, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969)) + cbModelParam._m0[23u].w;
        float _1910 = fma(_918, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916));
        float _1913 = fma(_918, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916));
        float _1916 = fma(_918, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916));
        float _2075;
        if (_1910 > 0.0)
        {
            _2075 = abs((1.0 - _1899) / _1910);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1899 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2075 = frontier_phi_28_24_ladder;
        }
        float _2343;
        if (_1913 > 0.0)
        {
            _2343 = abs((1.0 - _1903) / _1913);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1903 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2343 = frontier_phi_40_35_ladder;
        }
        float _2548;
        if (_1916 > 0.0)
        {
            _2548 = abs((1.0 - _1907) / _1916);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1907 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2548 = frontier_phi_49_46_ladder;
        }
        float _2550 = isnan(_2343) ? _2075 : (isnan(_2075) ? _2343 : min(_2075, _2343));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _1910) + _1899;
        float _2556 = (_2551 * _1913) + _1903;
        float _2557 = (_2551 * _1916) + _1907;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2558;
        float _2561 = _2558 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2557 > _2561) || ((_2557 < _2559) || ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 < _2559) || (_2555 > _2561))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2557, cbModelParam._m0[17u].z, fma(_2556, cbModelParam._m0[17u].y, _2555 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2557, cbModelParam._m0[18u].z, fma(_2556, cbModelParam._m0[18u].y, _2555 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2557, cbModelParam._m0[19u].z, fma(_2556, cbModelParam._m0[19u].y, _2555 * cbModelParam._m0[19u].x))), _1845);
            frontier_phi_25_49_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2756.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2756.x * cbModelParam._m0[1u].z;
        }
        _1935 = frontier_phi_25_49_ladder_2;
        _1937 = frontier_phi_25_49_ladder_1;
        _1939 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_916, _917, _918), _1845);
        _1935 = _1919.x * cbModelParam._m0[1u].z;
        _1937 = _1919.y * cbModelParam._m0[1u].z;
        _1939 = _1919.z * cbModelParam._m0[1u].z;
    }
    float _1951 = ((((1.0 - _937) * ((_924 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_937 * _924)) * _908;
    float _1952 = _1951 * ((cbModelParam._m0[1u].w * (_1935 - _1836)) + _1836);
    float _1953 = _1951 * ((cbModelParam._m0[1u].w * (_1937 - _1838)) + _1838);
    float _1954 = _1951 * ((cbModelParam._m0[1u].w * (_1939 - _1840)) + _1840);
    float _1957 = fma(_1954, cbSceneParam._m0[89u].z, fma(_1953, cbSceneParam._m0[89u].y, _1952 * cbSceneParam._m0[89u].x));
    float _1960 = fma(_1954, cbSceneParam._m0[90u].z, fma(_1953, cbSceneParam._m0[90u].y, _1952 * cbSceneParam._m0[90u].x));
    float _1963 = fma(_1954, cbSceneParam._m0[91u].z, fma(_1953, cbSceneParam._m0[91u].y, _1952 * cbSceneParam._m0[91u].x));
    vec4 _1971 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_845, _846));
    float _1973 = _1971.w;
    float _1985 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1973);
    float _1986 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1973);
    float _1987 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1973);
    uvec4 _1991 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _1993 = _1991.x * 14u;
    uint _1994 = _1993 + 13u;
    float _2001 = _908 + (-1.0);
    float _2006 = (cbLight._m0[_1994].x * _2001) + 1.0;
    float _2007 = (cbLight._m0[_1994].y * _2001) + 1.0;
    float _2008 = (cbLight._m0[_1994].z * _2001) + 1.0;
    float _2009 = (cbLight._m0[_1994].w * _2001) + 1.0;
    uint _2010 = _1993 + 5u;
    float _2016 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2020 = _1993 + 4u;
    float _2029 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2033 = _1993 | 1u;
    float _2044 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_747, _748, _749));
    float _2047 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_747, _748, _749));
    float _4269 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _4280 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2052 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2054 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2061 = ((cbLight._m0[_2010].x * _2016) * _2054) + (((cbLight._m0[_2020].x * _1985) * _2029) * _2052);
    float _2062 = ((_2016 * cbLight._m0[_2010].y) * _2054) + (((cbLight._m0[_2020].y * _1986) * _2029) * _2052);
    float _2063 = ((_2016 * cbLight._m0[_2010].z) * _2054) + (((cbLight._m0[_2020].z * _1987) * _2029) * _2052);
    uvec4 _2067 = floatBitsToUint(cbLight._m0[_1993 + 12u]);
    bool _2069 = _2067.x == 0u;
    float _2080;
    float _2082;
    float _2084;
    if (_2069)
    {
        _2080 = _2061;
        _2082 = _2062;
        _2084 = _2063;
    }
    else
    {
        uint _2088 = _1993 + 6u;
        float _2104 = (dot(vec3(cbLight._m0[_1993 + 2u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _4291 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2107 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2080 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _2061;
        _2082 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _2062;
        _2084 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _2063;
    }
    bool _2087 = _2067.y == 0u;
    float _2125;
    float _2127;
    float _2129;
    if (_2087)
    {
        _2125 = _2080;
        _2127 = _2082;
        _2129 = _2084;
    }
    else
    {
        uint _2287 = _1993 + 7u;
        float _2303 = (dot(vec3(cbLight._m0[_1993 + 3u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4307 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2306 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2125 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2080;
        _2127 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2082;
        _2129 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2084;
    }
    uint _2132 = _1993 + 8u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _750) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1993].x + _825;
    float _2148 = cbLight._m0[_1993].y + _826;
    float _2149 = cbLight._m0[_1993].z + _827;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_1993].xyz));
    float _4323 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _4334 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2161 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2162 = dot(vec3(_747, _748, _749), vec3(_2154, _2155, _2156));
    float _4345 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2166 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2154, _2155, _2156));
    float _4356 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2170 = _2146 * _2146;
    float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
    float _2185 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2186 = 1.0 - _2146;
    float _2197 = (0.5 / (((_2161 * ((_2160 * _2186) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2186) + _2146) * _2160))) * _2160;
    float _4367 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
    uint _2213 = _1993 + 9u;
    float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _750) * 0.949999988079071044921875);
    float _2225 = _2224 * _2224;
    float _2226 = cbLight._m0[_2033].x + _825;
    float _2227 = cbLight._m0[_2033].y + _826;
    float _2228 = cbLight._m0[_2033].z + _827;
    float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
    float _2233 = _2232 * _2226;
    float _2234 = _2232 * _2227;
    float _2235 = _2232 * _2228;
    float _2236 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2033].xyz));
    float _4378 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2240 = dot(vec3(_747, _748, _749), vec3(_2233, _2234, _2235));
    float _4389 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2233, _2234, _2235));
    float _4400 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2225 * _2225;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2261 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2262 = 1.0 - _2225;
    float _2272 = (0.5 / (((_2161 * ((_2239 * _2262) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2262) + _2225) * _2239))) * _2239;
    float _4411 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    float _2284 = (((_2261 * cbLight._m0[_2213].x) * _2274) * _2016) + ((((cbLight._m0[_2132].x * _1985) * _2185) * _2199) * _2029);
    float _2285 = (((_2261 * cbLight._m0[_2213].y) * _2274) * _2016) + ((((cbLight._m0[_2132].y * _1986) * _2185) * _2199) * _2029);
    float _2286 = (((_2261 * cbLight._m0[_2213].z) * _2274) * _2016) + ((((cbLight._m0[_2132].z * _1987) * _2185) * _2199) * _2029);
    float _2348;
    float _2350;
    float _2352;
    if (_2069)
    {
        _2348 = _2284;
        _2350 = _2285;
        _2352 = _2286;
    }
    else
    {
        uint _2354 = _1993 + 2u;
        uint _2358 = _1993 + 10u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _750) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _825;
        float _2375 = cbLight._m0[_2354].y + _826;
        float _2376 = cbLight._m0[_2354].z + _827;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2354].xyz));
        float _4422 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2388 = dot(vec3(_747, _748, _749), vec3(_2381, _2382, _2383));
        float _4433 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4444 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2409 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2410 = 1.0 - _2373;
        float _2420 = (0.5 / (((_2161 * ((_2387 * _2410) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2410) + _2373) * _2387))) * _2387;
        float _4455 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2348 = (((_2409 * cbLight._m0[_2358].x) * _2422) * _2423) + _2284;
        _2350 = (((_2409 * cbLight._m0[_2358].y) * _2422) * _2423) + _2285;
        _2352 = (((_2409 * cbLight._m0[_2358].z) * _2422) * _2423) + _2286;
    }
    float _2458;
    float _2460;
    float _2462;
    if (_2087)
    {
        _2458 = _2348;
        _2460 = _2350;
        _2462 = _2352;
    }
    else
    {
        uint _2469 = _1993 + 3u;
        uint _2473 = _1993 + 11u;
        float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _750) * 0.949999988079071044921875);
        float _2488 = _2487 * _2487;
        float _2489 = cbLight._m0[_2469].x + _825;
        float _2490 = cbLight._m0[_2469].y + _826;
        float _2491 = cbLight._m0[_2469].z + _827;
        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
        float _2496 = _2495 * _2489;
        float _2497 = _2495 * _2490;
        float _2498 = _2495 * _2491;
        float _2499 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2469].xyz));
        float _4471 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2503 = dot(vec3(_747, _748, _749), vec3(_2496, _2497, _2498));
        float _4482 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2507 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2496, _2497, _2498));
        float _4493 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2511 = _2488 * _2488;
        float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
        float _2524 = (exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2525 = 1.0 - _2488;
        float _2535 = (0.5 / (((_2161 * ((_2502 * _2525) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2525) + _2488) * _2502))) * _2502;
        float _4504 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2458 = (((_2524 * cbLight._m0[_2473].x) * _2537) * _2538) + _2348;
        _2460 = (((_2524 * cbLight._m0[_2473].y) * _2537) * _2538) + _2350;
        _2462 = (((_2524 * cbLight._m0[_2473].z) * _2537) * _2538) + _2352;
    }
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    if (_1991.y == 0u)
    {
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2613;
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2613;
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2613;
        uvec4 _2628 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2629 = _2628.x;
        uint _2640 = uint((float(_2628.y) * floor(float(uint(cbSceneParam._m0[85u].y * _846) / _2629))) + floor(float(uint(cbSceneParam._m0[85u].x * _845) / _2629)));
        float _2650 = (log2(_2616 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2651 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        uint _2654 = uint(isnan(14.0) ? _2651 : (isnan(_2651) ? 14.0 : min(_2651, 14.0)));
        uvec4 _2659 = texelFetch(g_lightClusterGridBuffer, int(((_2654 << 2u) + (_2640 << 6u)) >> 2u));
        uint _2660 = _2659.x;
        uint _2661 = _2628.z;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        if (((((1u << ((_2661 >> 4u) & 15u)) + 4294967295u) & _2660) == 0u) || ((_2661 & 240u) == 0u))
        {
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
        }
        else
        {
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            uint _2920 = 0u;
            uint _2929;
            bool _2930;
            for (;;)
            {
                _2929 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_2920 << 2u)) >> 2u)).x;
                _2930 = _2929 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2930)
                {
                    frontier_phi_66_pred = _2914;
                    frontier_phi_66_pred_1 = _2919;
                    frontier_phi_66_pred_2 = _2918;
                    frontier_phi_66_pred_3 = _2917;
                    frontier_phi_66_pred_4 = _2916;
                    frontier_phi_66_pred_5 = _2915;
                }
                else
                {
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    uint _3065;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2919;
                    _3065 = _2929;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    for (;;)
                    {
                        uint _3069 = uint(findLSB(_3065)) + (_2920 << 5u);
                        uint _3066 = (_3065 + 4294967295u) & _3065;
                        uint _3071 = _3069 * 48u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3091 = (_3069 * 48u) + 4u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3110 = (_3069 * 48u) + 8u;
                        vec3 _3121 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x));
                        float _3125 = _3085.x - _2614;
                        float _3126 = _3085.y - _2615;
                        float _3127 = _3085.z - _2616;
                        float _3128 = dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127));
                        float _3131 = inversesqrt(_3128);
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3135 = dot(vec3(_864, _867, _870), vec3(_3132, _3133, _3134));
                        float _3140 = 1.0 - (_3128 * _3085.w);
                        float _4530 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3142 = sqrt(_3128) * _3104.w;
                        float _3145 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3135) + _3146;
                        float _3152 = _3142 * _3142;
                        float _3156 = ((isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * _3141) / ((_3152 * 0.699999988079071044921875) + 1.0);
                        float _3160 = (-0.0) - _2614;
                        float _3161 = (-0.0) - _2615;
                        float _3162 = (-0.0) - _2616;
                        float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3177 = exp2(log2(1.0 / ((_3152 * 3.5) + 5.0)) * 0.25);
                        float _3178 = 1.0 - _924;
                        float _3185 = sqrt(1.0 - ((1.0 - (_3178 * _3178)) * (1.0 - (_3177 * _3177))));
                        float _3186 = _3185 * _3185;
                        float _3187 = _3186 * _3186;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3190 = _3169 + _3134;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3198 = dot(vec3(_864, _867, _870), vec3(_3167, _3168, _3169));
                        float _4546 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3202 = dot(vec3(_864, _867, _870), vec3(_3194 * _3188, _3194 * _3189, _3194 * _3190));
                        float _4557 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3209 = ((_3205 * _3205) * (_3187 + (-1.0))) + 1.0;
                        float _3210 = _3145 * _3186;
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3135) + _3211;
                        float _4568 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3215 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3216 = 1.0 - _3186;
                        float _3226 = (0.5 / (((_3215 * ((_3201 * _3216) + _3186)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3186) * _3201))) * _3215;
                        float _4579 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3237 = (((_3187 * 3.1415927410125732421875) * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) / ((_3209 * _3209) * ((_3152 * 2.1991131305694580078125) + 3.141590118408203125))) * _3141;
                        _2989 = (_3156 * _3104.x) + _3062;
                        _2990 = (_3156 * _3104.y) + _3063;
                        _2991 = (_3156 * _3104.z) + _3064;
                        _2986 = (_3237 * _3121.x) + _3059;
                        _2987 = (_3237 * _3121.y) + _3060;
                        _2988 = (_3237 * _3121.z) + _3061;
                        if (_3066 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _2991;
                            _3065 = _3066;
                        }
                    }
                    frontier_phi_66_pred = _2986;
                    frontier_phi_66_pred_1 = _2991;
                    frontier_phi_66_pred_2 = _2990;
                    frontier_phi_66_pred_3 = _2989;
                    frontier_phi_66_pred_4 = _2988;
                    frontier_phi_66_pred_5 = _2987;
                }
                _2762 = frontier_phi_66_pred;
                _2772 = frontier_phi_66_pred_1;
                _2770 = frontier_phi_66_pred_2;
                _2768 = frontier_phi_66_pred_3;
                _2766 = frontier_phi_66_pred_4;
                _2764 = frontier_phi_66_pred_5;
                uint _2921 = _2920 + 1u;
                if (_2921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2914 = _2762;
                    _2915 = _2764;
                    _2916 = _2766;
                    _2917 = _2768;
                    _2918 = _2770;
                    _2919 = _2772;
                    _2920 = _2921;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
        }
        uvec4 _2775 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2776 = _2775.z;
        uint _2778 = (_2776 >> 8u) & 15u;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        if (((4294967295u << _2778) & _2660) == 0u)
        {
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
            _2888 = _2767;
            _2890 = _2769;
            _2892 = _2771;
        }
        else
        {
            float _2907 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
            float _2908 = _2907 * _2614;
            float _2909 = _2907 * _2615;
            float _2910 = _2907 * _2616;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2778 < ((_2776 >> 12u) & 15u))
            {
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _3042 = _2761;
                float _3043 = _2763;
                float _3044 = _2765;
                float _3045 = _2767;
                float _3046 = _2769;
                float _3047 = _2771;
                uint _3048 = _2778;
                uint _3057;
                bool _3058;
                for (;;)
                {
                    _3057 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                    _3058 = _3057 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3058)
                    {
                        frontier_phi_77_pred = _3047;
                        frontier_phi_77_pred_1 = _3046;
                        frontier_phi_77_pred_2 = _3045;
                        frontier_phi_77_pred_3 = _3044;
                        frontier_phi_77_pred_4 = _3043;
                        frontier_phi_77_pred_5 = _3042;
                    }
                    else
                    {
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3264 = _3042;
                        float _3265 = _3043;
                        float _3266 = _3044;
                        float _3267 = _3045;
                        float _3268 = _3046;
                        float _3269 = _3047;
                        uint _3270 = _3057;
                        uint _3271;
                        vec4 _3296;
                        float _3297;
                        vec4 _3312;
                        vec3 _3324;
                        vec4 _3339;
                        vec4 _3355;
                        float _3401;
                        bool _3402;
                        for (;;)
                        {
                            uint _3281 = ((_3048 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3270));
                            _3271 = (_3270 + 4294967295u) & _3270;
                            uint _3283 = _3281 * 40u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3297 = _3296.w;
                            uint _3299 = (_3281 * 40u) + 4u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3281 * 40u) + 8u;
                            _3324 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x));
                            uint _3326 = (_3281 * 40u) + 16u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3342 = (_3281 * 40u) + 20u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3357 = (_3281 * 40u) + 24u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3376 = (_3281 * 40u) + 28u;
                            vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3401 = fma(_2616, _3389.z, fma(_2615, _3389.y, _3389.x * _2614)) + _3389.w;
                            _3402 = !((fma(_2616, _3370.z, fma(_2615, _3370.y, _3370.x * _2614)) + _3370.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3402)
                            {
                                float _3429 = _3296.x - _2614;
                                float _3430 = _3296.y - _2615;
                                float _3431 = _3296.z - _2616;
                                float _3432 = dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431));
                                float _3435 = inversesqrt(_3432);
                                float _3436 = _3435 * _3429;
                                float _3437 = _3435 * _3430;
                                float _3438 = _3435 * _3431;
                                float _3442 = 1.0 - (_3432 / (_3297 * _3297));
                                float _4590 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3447 = sqrt(_3432) * _3312.w;
                                float _3449 = 1.39999997615814208984375 / (_3447 + 1.39999997615814208984375);
                                float _3450 = _3449 * _3449;
                                float _3453 = ((1.0 - _3450) * dot(vec3(_3436, _3437, _3438), vec3(_864, _867, _870))) + _3450;
                                float _3456 = _3447 * _3447;
                                float _3460 = (fma(_2616, _3339.z, fma(_2615, _3339.y, _3339.x * _2614)) + _3339.w) / _3401;
                                float _3461 = (fma(_2616, _3355.z, fma(_2615, _3355.y, _3355.x * _2614)) + _3355.w) / _3401;
                                float _3465 = 1.0 - dot(vec2(_3460, _3461), vec2(_3460, _3461));
                                float _4606 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3467 = _3466 * (((isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0))) * _3443) / ((_3456 * 0.699999988079071044921875) + 1.0));
                                float _3479 = exp2(log2(1.0 / ((_3456 * 3.5) + 5.0)) * 0.25);
                                float _3480 = 1.0 - _924;
                                float _3487 = sqrt(1.0 - ((1.0 - (_3480 * _3480)) * (1.0 - (_3479 * _3479))));
                                float _3488 = _3487 * _3487;
                                float _3489 = _3488 * _3488;
                                float _3490 = _3436 - _2908;
                                float _3491 = _3437 - _2909;
                                float _3492 = _3438 - _2910;
                                float _3496 = inversesqrt(dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492)));
                                float _3500 = dot(vec3(_864, _867, _870), vec3((-0.0) - _2908, (-0.0) - _2909, (-0.0) - _2910));
                                float _4617 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3503 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3504 = dot(vec3(_864, _867, _870), vec3(_3496 * _3490, _3496 * _3491, _3496 * _3492));
                                float _4628 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3507 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3511 = ((_3507 * _3507) * (_3489 + (-1.0))) + 1.0;
                                float _3512 = _3449 * _3488;
                                float _3513 = _3512 * _3512;
                                float _3519 = ((1.0 - _3513) * dot(vec3(_864, _867, _870), vec3(_3436, _3437, _3438))) + _3513;
                                float _4639 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3521 = 1.0 - _3488;
                                float _3531 = (0.5 / (((_3520 * ((_3503 * _3521) + _3488)) + 9.9999999392252902907785028219223e-09) + (((_3520 * _3521) + _3488) * _3503))) * _3520;
                                float _4650 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3541 = (_3466 * _3443) * (((_3489 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3511 * _3511) * ((_3456 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3467 * _3312.y;
                                frontier_phi_83_pred_1 = _3467 * _3312.x;
                                frontier_phi_83_pred_2 = _3541 * _3324.z;
                                frontier_phi_83_pred_3 = _3541 * _3324.y;
                                frontier_phi_83_pred_4 = _3541 * _3324.x;
                                frontier_phi_83_pred_5 = _3467 * _3312.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3549 = frontier_phi_83_pred;
                            _3548 = frontier_phi_83_pred_1;
                            _3547 = frontier_phi_83_pred_2;
                            _3546 = frontier_phi_83_pred_3;
                            _3545 = frontier_phi_83_pred_4;
                            _3550 = frontier_phi_83_pred_5;
                            _3254 = _3548 + _3267;
                            _3255 = _3549 + _3268;
                            _3256 = _3550 + _3269;
                            _3251 = _3545 + _3264;
                            _3252 = _3546 + _3265;
                            _3253 = _3547 + _3266;
                            if (_3271 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3271;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3256;
                        frontier_phi_77_pred_1 = _3255;
                        frontier_phi_77_pred_2 = _3254;
                        frontier_phi_77_pred_3 = _3253;
                        frontier_phi_77_pred_4 = _3252;
                        frontier_phi_77_pred_5 = _3251;
                    }
                    _2893 = frontier_phi_77_pred;
                    _2891 = frontier_phi_77_pred_1;
                    _2889 = frontier_phi_77_pred_2;
                    _2887 = frontier_phi_77_pred_3;
                    _2885 = frontier_phi_77_pred_4;
                    _2883 = frontier_phi_77_pred_5;
                    uint _3049 = _3048 + 1u;
                    if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3042 = _2883;
                        _3043 = _2885;
                        _3044 = _2887;
                        _3045 = _2889;
                        _3046 = _2891;
                        _3047 = _2893;
                        _3048 = _3049;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2887;
                frontier_phi_58_59_ladder_1 = _2893;
                frontier_phi_58_59_ladder_2 = _2891;
                frontier_phi_58_59_ladder_3 = _2889;
                frontier_phi_58_59_ladder_4 = _2885;
                frontier_phi_58_59_ladder_5 = _2883;
            }
            else
            {
                frontier_phi_58_59_ladder = _2765;
                frontier_phi_58_59_ladder_1 = _2771;
                frontier_phi_58_59_ladder_2 = _2769;
                frontier_phi_58_59_ladder_3 = _2767;
                frontier_phi_58_59_ladder_4 = _2763;
                frontier_phi_58_59_ladder_5 = _2761;
            }
            _2882 = frontier_phi_58_59_ladder_5;
            _2884 = frontier_phi_58_59_ladder_4;
            _2886 = frontier_phi_58_59_ladder;
            _2888 = frontier_phi_58_59_ladder_3;
            _2890 = frontier_phi_58_59_ladder_2;
            _2892 = frontier_phi_58_59_ladder_1;
        }
        float _2897 = isnan(1.0) ? _908 : (isnan(_908) ? 1.0 : min(_908, 1.0));
        _2673 = (_2897 * _2888) + _2125;
        _2675 = (_2897 * _2890) + _2127;
        _2677 = (_2897 * _2892) + _2129;
        _2679 = ((_2882 * 0.039999999105930328369140625) * _2897) + _2458;
        _2681 = ((_2884 * 0.039999999105930328369140625) * _2897) + _2460;
        _2683 = ((_2886 * 0.039999999105930328369140625) * _2897) + _2462;
    }
    else
    {
        _2673 = _2125;
        _2675 = _2127;
        _2677 = _2129;
        _2679 = _2458;
        _2681 = _2460;
        _2683 = _2462;
    }
    float _4666 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4677 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4688 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2700 = ((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2673 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _908))) + ((_2679 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1744)) * cbPerFrame._m0[3u].x);
    float _2701 = ((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2675 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _908))) + ((_2681 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1744)) * cbPerFrame._m0[3u].x);
    float _2702 = ((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2677 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _908))) + ((_2683 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1744)) * cbPerFrame._m0[3u].x);
    uint _2703 = _253 + 6u;
    float _2711 = _845 / cbSceneParam._m0[86u].x;
    float _2712 = _846 / cbSceneParam._m0[86u].y;
    vec4 _2726 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, (log2((isnan(cbSceneParam._m0[77u].w) ? _768 : (isnan(_768) ? cbSceneParam._m0[77u].w : min(_768, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2728 = _2726.x;
    float _2729 = _2726.y;
    float _2730 = _2726.z;
    float _2731 = _2726.w;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    if (_768 > cbSceneParam._m0[78u].w)
    {
        float _2786 = isnan(_768) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _768 : min(cbSceneParam._m0[80u].w, _768));
        float _2787 = _2786 / _768;
        float _2798 = _2787 * _818;
        float _2799 = _819 * _2787;
        float _2800 = (-0.0) - _2799;
        float _2802 = _2787 * _820;
        float _2804 = (cbSceneParam._m0[77u].w * _2800) / _2786;
        float _2805 = _2804 + cbSceneParam._m0[79u].w;
        float _2806 = cbSceneParam._m0[79u].w - _2799;
        float _2812 = sqrt(((_2798 * _2798) + (_2799 * _2799)) + (_2802 * _2802));
        float _2815 = (1.0 - (cbSceneParam._m0[77u].w / _2786)) * _2812;
        float _2820 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2822 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2800 - _2804) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2805 > 0.0) ? exp2(_2820 * _2805) : (2.0 - exp2(_2822 * _2805))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2815;
        }
        else
        {
            float _2943 = 1.0 / cbSceneParam._m0[80u].x;
            float _2944 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : max(_2805, _2806));
            float _2945 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : min(_2805, _2806));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            float _2955 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : min(_2945, 0.0));
            _2999 = ((abs(_2812 / _2800) * cbSceneParam._m0[80u].y) * ((((_2954 - _2955) * 2.0) - ((exp2(_2820 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0)))) - exp2(_2820 * (isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))))) * _2943)) - ((exp2(_2822 * _2954) - exp2(_2822 * _2955)) * _2943))) + (_2815 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2731);
        _2824 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2728;
        _2826 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2729;
        _2828 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2730;
        _2830 = _3010 * _2731;
    }
    else
    {
        _2824 = _2728;
        _2826 = _2729;
        _2828 = _2730;
        _2830 = _2731;
    }
    bool _3037;
    vec4 _2840;
    vec4 _2862;
    float _2864;
    float _2868;
    float _2869;
    float _2870;
    float _2871;
    bool _2881;
    for (;;)
    {
        _2840 = cbMatDynParam._m0[0u];
        float _2842 = roundEven(_2840.y);
        bool _2843 = _2842 == 3.0;
        float _2844 = log2(_2830);
        float _2851 = exp2(_2844 * cbSceneParam._m0[78u].x) * _2700;
        float _2852 = exp2(_2844 * cbSceneParam._m0[78u].y) * _2701;
        float _2853 = exp2(_2844 * cbSceneParam._m0[78u].z) * _2702;
        float _2860 = _834 + (-0.5);
        _2862 = cbMtdParam._m0[1u];
        _2864 = _2862.y * _2860;
        float _2867 = (_2842 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2868 = _2867 * (_2843 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2824)));
        _2869 = _2867 * (_2843 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2826)));
        _2870 = _2867 * (_2843 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2828)));
        _2871 = _2860 * 0.999000012874603271484375;
        _2881 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2881)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _2871) < 0.5)
            {
                _3037 = true;
                break;
            }
        }
        uint _2978 = _883 + uint(_2840.w);
        if ((cbInstanceData._m0[_2978].w < 1.0) && ((cbInstanceData._m0[_2978].w + _2871) < 0.5))
        {
            _3037 = true;
            break;
        }
        if ((_2864 + 1.0) < _2862.x)
        {
            _3037 = true;
            break;
        }
        _3037 = false;
        break;
    }
    float _3242;
    if (_3037)
    {
        discard_state = true;
        _3242 = 0.0;
    }
    else
    {
        _3242 = cbInstanceData._m0[_2703].w;
    }
    SV_Target.x = _2868;
    SV_Target.y = _2869;
    SV_Target.z = _2870;
    SV_Target.w = _3242;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2703].w;
    discard_exit();
}


