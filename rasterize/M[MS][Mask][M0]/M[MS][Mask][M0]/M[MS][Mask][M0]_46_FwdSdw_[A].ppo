#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1324;
float _3965;
float _3966;
float _3967;
float _3968;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _375 = _373.x;
    float _387 = dot(vec4(_375, _373.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _404 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_375 - _387) * cbMtdParam._m0[24u].z) + _387) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3977 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _412 = (_405 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _413 = (_405 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _414 = (_405 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _433 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _453 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    float _483 = ((_453.z - _474) * _405) + _474;
    float _486 = ((((_453.x - _472) * _405) + _472) * 2.0) + (-1.0);
    float _488 = ((((_453.y - _473) * _405) + _473) * 2.0) + (-1.0);
    float _489 = dot(vec2(_486, _488), vec2(_486, _488));
    float _3988 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _494 = sqrt(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))));
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _522 = (((_510.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _486;
    float _523 = (((_510.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _488;
    float _526 = fma(_494, _241, fma(_523, _248, _522 * _234));
    float _529 = fma(_494, _242, fma(_523, _249, _522 * _235));
    float _532 = fma(_494, _243, fma(_523, _250, _522 * _236));
    float _536 = inversesqrt(dot(vec3(_526, _529, _532), vec3(_526, _529, _532)));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _565 = _563.x;
    float _566 = 1.0 - _565;
    float _572 = (cbMtdParam._m0[19u].x + dot(vec4(_536 * _526, _536 * _529, _536 * _532, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_565 - _566) * cbMtdParam._m0[24u].w) + _566) * cbMtdParam._m0[21u].z);
    float _3999 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _575 = (-0.0) - cbMtdParam._m0[24u].x;
    float _577 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _577 : (isnan(_577) ? 1.0 : min(_577, 1.0));
    float _585 = _573 - ((_573 * TEXCOORD_8.x) * _578);
    float _586 = _573 - ((_573 * TEXCOORD_8.y) * _578);
    float _587 = _573 - ((_573 * TEXCOORD_8.z) * _578);
    float _594 = (_585 * ((_433.x * cbMtdParam._m0[18u].x) - _412)) + _412;
    float _595 = (_586 * ((_433.y * cbMtdParam._m0[18u].y) - _413)) + _413;
    float _596 = (_587 * ((_433.z * cbMtdParam._m0[18u].z) - _414)) + _414;
    vec4 _608 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _639 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_610 - _611) * cbMtdParam._m0[24u].y) + _611) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4020 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _648 = ((((cbMtdParam._m0[10u].x - _594) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _640) + _594;
    float _649 = ((((cbMtdParam._m0[10u].y - _595) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _640) + _595;
    float _650 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _596)) * _640) + _596;
    float _654 = (cbMtdParam._m0[19u].w * (_510.z - _483)) + _483;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _675 = (_668.x * 2.0) + (-1.0);
    float _676 = (_668.y * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _4031 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _685 = ((_668.z - _654) * _585) + _654;
    float _688 = ((cbMtdParam._m0[23u].y - _685) * _640) + _685;
    vec4 _707 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _713 = (_707.x * 2.0) + (-1.0);
    float _714 = (_707.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _4042 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _730 = ((sqrt(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) - _494) * _587) + _494;
    float _733 = (((_675 - _522) * _585) + _522) + (cbMtdParam._m0[21u].x * _522);
    float _734 = (((_676 - _523) * _586) + _523) + (cbMtdParam._m0[21u].x * _523);
    float _745 = (((_713 - _733) + (_733 * cbMtdParam._m0[22u].z)) * _640) + _733;
    float _746 = (((_714 - _734) + (_734 * cbMtdParam._m0[22u].z)) * _640) + _734;
    float _747 = (_640 * (sqrt(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) - _730)) + _730;
    float _749 = cbMtdParam._m0[22u].x + _510.w;
    float _752 = fma(_747, _241, fma(_746, _248, _745 * _234));
    float _755 = fma(_747, _242, fma(_746, _249, _745 * _235));
    float _758 = fma(_747, _243, fma(_746, _250, _745 * _236));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    float _763 = _762 * _752;
    float _764 = _762 * _755;
    float _765 = _762 * _758;
    float _4053 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _766 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4075 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4086 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4097 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _784 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _835 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _825);
    float _836 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _825);
    float _837 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _825);
    float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
    float _842 = _835 * _841;
    float _843 = _836 * _841;
    float _844 = _837 * _841;
    vec4 _849 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _851 = _849.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1005 = sqrt(((_835 * _835) + (_836 * _836)) + (_837 * _837));
        float _1011 = (cbMatDynParam._m0[5u].x * _1005) + cbMatDynParam._m0[5u].y;
        float _4108 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1016 = (cbMatDynParam._m0[5u].z * _1005) + cbMatDynParam._m0[5u].w;
        float _4119 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) - _1012)) + _1012) < ((_851 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _862 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _863 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _881 = fma(_765, cbSceneParam._m0[5u].z, fma(_764, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _763));
    float _884 = fma(_765, cbSceneParam._m0[6u].z, fma(_764, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _763));
    float _887 = fma(_765, cbSceneParam._m0[7u].z, fma(_764, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _763));
    uint _900 = _253 + 9u;
    uint _901 = _900 + uint(cbMatDynParam._m0[0u].w);
    float _907 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * cbInstanceData._m0[_901].x;
    float _908 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * cbInstanceData._m0[_901].y;
    float _909 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_901].z;
    float _4130 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    vec4 _921 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _862, cbSceneParam._m0[86u].y * _863));
    float _925 = ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * TEXCOORD_5.w) * _921.x;
    float _926 = dot(vec3(_763, _764, _765), vec3(_842, _843, _844));
    float _929 = _926 * 2.0;
    float _933 = (_929 * _763) - _842;
    float _934 = (_929 * _764) - _843;
    float _935 = (_929 * _765) - _844;
    float _939 = abs(dot(vec3(_842, _843, _844), vec3(_763, _764, _765)));
    float _4163 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _941 = sqrt(_766);
    float _954 = exp2((_941 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_941 * 3.0));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1323;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1048 = fma(_994, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _986));
        float _1052 = fma(_994, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _986));
        float _1056 = fma(_994, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _986));
        float _1081 = _986 + _763;
        float _1082 = _990 + _764;
        float _1083 = _994 + _765;
        float _1093 = fma(_1083, cbModelParam._m0[26u].z, fma(_1082, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081)) - _1048;
        float _1094 = fma(_1083, cbModelParam._m0[27u].z, fma(_1082, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081)) - _1052;
        float _1095 = fma(_1083, cbModelParam._m0[28u].z, fma(_1082, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081)) - _1056;
        float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
        float _1112 = ((_1099 * _1093) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1048 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1099 * _1094) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1052 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1099 * _1095) / cbModelParam._m0[34u].z) + ((((((_1056 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        float _1151 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1117.x + (-0.5));
        float _1153 = _1151 * (_1117.y + (-0.5));
        float _1154 = _1151 * (_1117.z + (-0.5));
        float _1161 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1124.x + (-0.5));
        float _1163 = _1161 * (_1124.y + (-0.5));
        float _1164 = _1161 * (_1124.z + (-0.5));
        float _1171 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1131.x + (-0.5));
        float _1173 = _1171 * (_1131.y + (-0.5));
        float _1174 = _1171 * (_1131.z + (-0.5));
        float _1181 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1138.x + (-0.5));
        float _1183 = _1181 * (_1138.y + (-0.5));
        float _1184 = _1181 * (_1138.z + (-0.5));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = _1152 * 0.5;
        float _1189 = _1162 * 0.5;
        float _1190 = _1172 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1205 = (dot(vec3(_763, _764, _765), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1215 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4211 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1217 + 1.0))) + _1222) * _1185;
        float _1232 = _1153 * 0.5;
        float _1233 = _1163 * 0.5;
        float _1234 = _1173 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_763, _764, _765), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4244 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1259 + 1.0))) + _1264) * _1186;
        float _1274 = _1154 * 0.5;
        float _1275 = _1164 * 0.5;
        float _1276 = _1174 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_763, _764, _765), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4277 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1301 + 1.0))) + _1306) * _1187;
        _1323 = _1154;
        _1325 = _1153;
        _1326 = _1152;
        _1327 = _1164;
        _1328 = _1163;
        _1329 = _1162;
        _1330 = _1174;
        _1331 = _1173;
        _1332 = _1172;
        _1333 = _1187;
        _1334 = _1186;
        _1335 = _1185;
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
    }
    else
    {
        _1323 = _1324;
        _1325 = _1324;
        _1326 = _1324;
        _1327 = _1324;
        _1328 = _1324;
        _1329 = _1324;
        _1330 = _1324;
        _1331 = _1324;
        _1332 = _1324;
        _1333 = _1324;
        _1334 = _1324;
        _1335 = _1324;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1366 = fma(_994, cbModelParam._m0[30u].z, fma(_990, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986));
        float _1370 = fma(_994, cbModelParam._m0[31u].z, fma(_990, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986));
        float _1374 = fma(_994, cbModelParam._m0[32u].z, fma(_990, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986));
        float _1397 = _986 + _763;
        float _1398 = _990 + _764;
        float _1399 = _994 + _765;
        float _1409 = fma(_1399, cbModelParam._m0[30u].z, fma(_1398, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1397)) - _1366;
        float _1410 = fma(_1399, cbModelParam._m0[31u].z, fma(_1398, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1397)) - _1370;
        float _1411 = fma(_1399, cbModelParam._m0[32u].z, fma(_1398, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1397)) - _1374;
        float _1415 = inversesqrt(dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411)));
        float _1428 = ((_1415 * _1409) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1366 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1415 * _1410) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1370 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1415 * _1411) / cbModelParam._m0[35u].z) + ((((((_1374 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        float _1465 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1432.x + (-0.5));
        float _1467 = _1465 * (_1432.y + (-0.5));
        float _1468 = _1465 * (_1432.z + (-0.5));
        float _1475 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1439.x + (-0.5));
        float _1477 = _1475 * (_1439.y + (-0.5));
        float _1478 = _1475 * (_1439.z + (-0.5));
        float _1485 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1446.x + (-0.5));
        float _1487 = _1485 * (_1446.y + (-0.5));
        float _1488 = _1485 * (_1446.z + (-0.5));
        float _1495 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1453.x + (-0.5));
        float _1497 = _1495 * (_1453.y + (-0.5));
        float _1498 = _1495 * (_1453.z + (-0.5));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = _1466 * 0.5;
        float _1503 = _1476 * 0.5;
        float _1504 = _1486 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_763, _764, _765), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4340 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1529 + 1.0))) + _1534) * _1499;
        float _1544 = _1467 * 0.5;
        float _1545 = _1477 * 0.5;
        float _1546 = _1487 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_763, _764, _765), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4373 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1571 + 1.0))) + _1576) * _1500;
        float _1586 = _1468 * 0.5;
        float _1587 = _1478 * 0.5;
        float _1588 = _1488 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_763, _764, _765), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4406 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1613 + 1.0))) + _1618) * _1501;
        _1635 = _1468;
        _1636 = _1467;
        _1637 = _1466;
        _1638 = _1478;
        _1639 = _1477;
        _1640 = _1476;
        _1641 = _1488;
        _1642 = _1487;
        _1643 = _1486;
        _1644 = _1501;
        _1645 = _1500;
        _1646 = _1499;
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
    }
    else
    {
        _1635 = _1324;
        _1636 = _1324;
        _1637 = _1324;
        _1638 = _1324;
        _1639 = _1324;
        _1640 = _1324;
        _1641 = _1324;
        _1642 = _1324;
        _1643 = _1324;
        _1644 = _1324;
        _1645 = _1324;
        _1646 = _1324;
        _1647 = 0.0;
        _1648 = 0.0;
        _1649 = 0.0;
    }
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1336)) + _1336;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1337)) + _1337;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1338)) + _1338;
    float _1682 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1659));
    float _1703 = _933 * 0.5;
    float _1704 = _934 * 0.5;
    float _1705 = _935 * 0.5;
    float _1706 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1709 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1712 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1746;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1719 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1323, _1327, _1330, _1333));
        float _1723 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1727 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1734 = dot(vec4(cbModelParam._m0[39u]), vec4(_1703, _1704, _1705, 1.0));
        _1746 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1746 = 1.0;
    }
    float _1757;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1748 = dot(vec4(cbModelParam._m0[40u]), vec4(_1703, _1704, _1705, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1761 = (_1757 * cbModelParam._m0[1u].x) + (_1746 * (1.0 - cbModelParam._m0[1u].x));
    float _1771 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _766);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1771 : min(cbModelParam._m0[25u].z, _1771));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1819 = fma(_994, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _986)) + cbModelParam._m0[13u].w;
        float _1823 = fma(_994, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _986)) + cbModelParam._m0[14u].w;
        float _1827 = fma(_994, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _986)) + cbModelParam._m0[15u].w;
        float _1830 = fma(_935, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933));
        float _1833 = fma(_935, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933));
        float _1836 = fma(_935, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933));
        float _1864;
        if (_1830 > 0.0)
        {
            _1864 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1864 = frontier_phi_17_15_ladder;
        }
        float _2033;
        if (_1833 > 0.0)
        {
            _2033 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2033 = frontier_phi_26_22_ladder;
        }
        float _2328;
        if (_1836 > 0.0)
        {
            _2328 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2328 = frontier_phi_38_33_ladder;
        }
        float _2330 = isnan(_2033) ? _1864 : (isnan(_1864) ? _2033 : min(_1864, _2033));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1830) + _1819;
        float _2336 = (_2331 * _1833) + _1823;
        float _2337 = (_2331 * _1836) + _1827;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2338;
        float _2342 = _2338 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 > _2342) || ((_2336 < _2340) || ((_2335 < _2340) || (_2335 > _2342))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1772);
            frontier_phi_16_38_ladder = _2482.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2482.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2482.x * cbModelParam._m0[1u].y;
        }
        _1852 = frontier_phi_16_38_ladder_2;
        _1854 = frontier_phi_16_38_ladder_1;
        _1856 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1840 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_933, _934, _935), _1772);
        _1852 = _1840.x * cbModelParam._m0[1u].y;
        _1854 = _1840.y * cbModelParam._m0[1u].y;
        _1856 = _1840.z * cbModelParam._m0[1u].y;
    }
    float _1860 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _766);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1860 : min(cbModelParam._m0[25u].w, _1860));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1914 = fma(_994, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _986)) + cbModelParam._m0[21u].w;
        float _1918 = fma(_994, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _986)) + cbModelParam._m0[22u].w;
        float _1922 = fma(_994, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _986)) + cbModelParam._m0[23u].w;
        float _1925 = fma(_935, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933));
        float _1928 = fma(_935, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933));
        float _1931 = fma(_935, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933));
        float _2038;
        if (_1925 > 0.0)
        {
            _2038 = abs((1.0 - _1914) / _1925);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1914 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2038 = frontier_phi_28_24_ladder;
        }
        float _2355;
        if (_1928 > 0.0)
        {
            _2355 = abs((1.0 - _1918) / _1928);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1918 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2355 = frontier_phi_40_35_ladder;
        }
        float _2682;
        if (_1931 > 0.0)
        {
            _2682 = abs((1.0 - _1922) / _1931);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1922 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2682 = frontier_phi_50_47_ladder;
        }
        float _2684 = isnan(_2355) ? _2038 : (isnan(_2038) ? _2355 : min(_2038, _2355));
        float _2685 = isnan(_2682) ? _2684 : (isnan(_2684) ? _2682 : min(_2684, _2682));
        float _2689 = (_2685 * _1925) + _1914;
        float _2690 = (_2685 * _1928) + _1918;
        float _2691 = (_2685 * _1931) + _1922;
        float _2692 = _2685 * 9.9999997473787516355514526367188e-05;
        float _2693 = (-1.0) - _2692;
        float _2695 = _2692 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2691 > _2695) || ((_2691 < _2693) || ((_2690 > _2695) || ((_2690 < _2693) || ((_2689 < _2693) || (_2689 > _2695))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2691, cbModelParam._m0[17u].z, fma(_2690, cbModelParam._m0[17u].y, _2689 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2691, cbModelParam._m0[18u].z, fma(_2690, cbModelParam._m0[18u].y, _2689 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2691, cbModelParam._m0[19u].z, fma(_2690, cbModelParam._m0[19u].y, _2689 * cbModelParam._m0[19u].x))), _1861);
            frontier_phi_25_50_ladder = _2809.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2809.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2809.x * cbModelParam._m0[1u].z;
        }
        _1950 = frontier_phi_25_50_ladder_2;
        _1952 = frontier_phi_25_50_ladder_1;
        _1954 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1934 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_933, _934, _935), _1861);
        _1950 = _1934.x * cbModelParam._m0[1u].z;
        _1952 = _1934.y * cbModelParam._m0[1u].z;
        _1954 = _1934.z * cbModelParam._m0[1u].z;
    }
    float _1966 = ((((1.0 - _954) * ((_941 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_954 * _941)) * _925;
    float _1967 = _1966 * ((cbModelParam._m0[1u].w * (_1950 - _1852)) + _1852);
    float _1968 = _1966 * ((cbModelParam._m0[1u].w * (_1952 - _1854)) + _1854);
    float _1969 = _1966 * ((cbModelParam._m0[1u].w * (_1954 - _1856)) + _1856);
    float _1972 = fma(_1969, cbSceneParam._m0[89u].z, fma(_1968, cbSceneParam._m0[89u].y, _1967 * cbSceneParam._m0[89u].x));
    float _1975 = fma(_1969, cbSceneParam._m0[90u].z, fma(_1968, cbSceneParam._m0[90u].y, _1967 * cbSceneParam._m0[90u].x));
    float _1978 = fma(_1969, cbSceneParam._m0[91u].z, fma(_1968, cbSceneParam._m0[91u].y, _1967 * cbSceneParam._m0[91u].x));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2025 = _2012 / _2024;
    float _2026 = _2016 / _2024;
    float _2027 = _2020 / _2024;
    float _2174;
    float _2175;
    float _2176;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2054 = ((uint(_2027 > cbSceneParam._m0[59u].y) + uint(_2027 > cbSceneParam._m0[59u].x)) + uint(_2027 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2055 = _2054 + 43u;
        uint _2063 = _2054 + 44u;
        uint _2071 = _2054 + 45u;
        uint _2079 = _2054 + 46u;
        float _2090 = fma(_2024, cbSceneParam._m0[_2055].w, fma(_2020, cbSceneParam._m0[_2055].z, fma(_2016, cbSceneParam._m0[_2055].y, _2012 * cbSceneParam._m0[_2055].x)));
        float _2094 = fma(_2024, cbSceneParam._m0[_2063].w, fma(_2020, cbSceneParam._m0[_2063].z, fma(_2016, cbSceneParam._m0[_2063].y, _2012 * cbSceneParam._m0[_2063].x)));
        float _2102 = fma(_2024, cbSceneParam._m0[_2079].w, fma(_2020, cbSceneParam._m0[_2079].z, fma(_2016, cbSceneParam._m0[_2079].y, _2012 * cbSceneParam._m0[_2079].x)));
        float _2107 = cbSceneParam._m0[33u].z * _2102;
        float _2109 = cbSceneParam._m0[33u].w * _2102;
        float _2112 = fma(_2024, cbSceneParam._m0[_2071].w, fma(_2020, cbSceneParam._m0[_2071].z, fma(_2016, cbSceneParam._m0[_2071].y, _2012 * cbSceneParam._m0[_2071].x))) / _2102;
        float _2160 = (cbSceneParam._m0[33u].x - sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027))) * cbSceneParam._m0[33u].y;
        float _4532 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2167 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 + _2090) / _2102, (_2109 + _2094) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 + _2090) / _2102, (_2094 - _2107) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 - _2107) / _2102, (_2094 - _2109) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 - _2109) / _2102, (_2107 + _2094) / _2102), _2112), 0.0)).x), vec4(0.25)));
        _2174 = 1.0 - (_2167 * cbSceneParam._m0[34u].x);
        _2175 = 1.0 - (_2167 * cbSceneParam._m0[34u].y);
        _2176 = 1.0 - (_2167 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2174 = 1.0;
        _2175 = 1.0;
        _2176 = 1.0;
    }
    float _2240;
    float _2242;
    float _2244;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2228 = fma(_2024, cbSceneParam._m0[63u].w, fma(_2020, cbSceneParam._m0[63u].z, fma(_2016, cbSceneParam._m0[63u].y, _2012 * cbSceneParam._m0[63u].x)));
        float _2229 = fma(_2024, cbSceneParam._m0[60u].w, fma(_2020, cbSceneParam._m0[60u].z, fma(_2016, cbSceneParam._m0[60u].y, _2012 * cbSceneParam._m0[60u].x))) / _2228;
        float _2230 = fma(_2024, cbSceneParam._m0[61u].w, fma(_2020, cbSceneParam._m0[61u].z, fma(_2016, cbSceneParam._m0[61u].y, _2012 * cbSceneParam._m0[61u].x))) / _2228;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2229 >= cbSceneParam._m0[64u].x) && (_2230 >= cbSceneParam._m0[64u].y)) && (_2229 <= cbSceneParam._m0[64u].z)) && (_2230 <= cbSceneParam._m0[64u].w))
        {
            float _2368 = fma(_2024, cbSceneParam._m0[62u].w, fma(_2020, cbSceneParam._m0[62u].z, fma(_2016, cbSceneParam._m0[62u].y, _2012 * cbSceneParam._m0[62u].x))) / _2228;
            float _2372 = isnan(cbSceneParam._m0[41u].w) ? _2368 : (isnan(_2368) ? cbSceneParam._m0[41u].w : max(_2368, cbSceneParam._m0[41u].w));
            float _2415 = (cbSceneParam._m0[33u].x - sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027))) * cbSceneParam._m0[33u].y;
            float _4548 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
            float _2422 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2229, cbSceneParam._m0[33u].w + _2230), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2229, _2230 - cbSceneParam._m0[33u].z), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2229 - cbSceneParam._m0[33u].z, _2230 - cbSceneParam._m0[33u].w), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2229 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2230), _2372), 0.0)).x), vec4(0.25)));
            float _2426 = 1.0 - (_2422 * cbSceneParam._m0[34u].x);
            float _2427 = 1.0 - (_2422 * cbSceneParam._m0[34u].y);
            float _2428 = 1.0 - (_2422 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2428) ? _2176 : (isnan(_2176) ? _2428 : min(_2176, _2428));
            frontier_phi_37_36_ladder_1 = isnan(_2427) ? _2175 : (isnan(_2175) ? _2427 : min(_2175, _2427));
            frontier_phi_37_36_ladder_2 = isnan(_2426) ? _2174 : (isnan(_2174) ? _2426 : min(_2174, _2426));
        }
        else
        {
            frontier_phi_37_36_ladder = _2176;
            frontier_phi_37_36_ladder_1 = _2175;
            frontier_phi_37_36_ladder_2 = _2174;
        }
        _2240 = frontier_phi_37_36_ladder_2;
        _2242 = frontier_phi_37_36_ladder_1;
        _2244 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2240 = _2174;
        _2242 = _2175;
        _2244 = _2176;
    }
    uvec4 _2249 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2251 = _2249.x * 14u;
    uint _2252 = _2251 + 13u;
    float _2259 = _925 + (-1.0);
    float _2264 = (cbLight._m0[_2252].x * _2259) + 1.0;
    float _2265 = (cbLight._m0[_2252].y * _2259) + 1.0;
    float _2266 = (cbLight._m0[_2252].z * _2259) + 1.0;
    float _2267 = (cbLight._m0[_2252].w * _2259) + 1.0;
    uint _2268 = _2251 + 5u;
    float _2274 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
    uint _2278 = _2251 + 4u;
    float _2287 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
    uint _2291 = _2251 | 1u;
    float _2302 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_763, _764, _765));
    float _2305 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_763, _764, _765));
    float _4584 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _4595 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2310 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * 0.3183098733425140380859375;
    float _2312 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * 0.3183098733425140380859375;
    float _2319 = ((cbLight._m0[_2268].x * _2274) * _2312) + (((cbLight._m0[_2278].x * _2240) * _2287) * _2310);
    float _2320 = ((_2274 * cbLight._m0[_2268].y) * _2312) + (((cbLight._m0[_2278].y * _2242) * _2287) * _2310);
    float _2321 = ((_2274 * cbLight._m0[_2268].z) * _2312) + (((cbLight._m0[_2278].z * _2244) * _2287) * _2310);
    uvec4 _2325 = floatBitsToUint(cbLight._m0[_2251 + 12u]);
    bool _2327 = _2325.x == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2327)
    {
        _2429 = _2319;
        _2431 = _2320;
        _2433 = _2321;
    }
    else
    {
        uint _2437 = _2251 + 6u;
        float _2453 = (dot(vec3(cbLight._m0[_2251 + 2u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4606 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2456 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2429 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2319;
        _2431 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2320;
        _2433 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2321;
    }
    bool _2436 = _2325.y == 0u;
    float _2491;
    float _2493;
    float _2495;
    if (_2436)
    {
        _2491 = _2429;
        _2493 = _2431;
        _2495 = _2433;
    }
    else
    {
        uint _2653 = _2251 + 7u;
        float _2669 = (dot(vec3(cbLight._m0[_2251 + 3u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2670 = _2669 * _2669;
        float _4622 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2671 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2672 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2491 = (((cbLight._m0[_2653].x * 0.3183098733425140380859375) * _2671) * _2672) + _2429;
        _2493 = (((cbLight._m0[_2653].y * 0.3183098733425140380859375) * _2671) * _2672) + _2431;
        _2495 = (((cbLight._m0[_2653].z * 0.3183098733425140380859375) * _2671) * _2672) + _2433;
    }
    uint _2498 = _2251 + 8u;
    float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _766) * 0.949999988079071044921875);
    float _2512 = _2511 * _2511;
    float _2513 = cbLight._m0[_2251].x + _842;
    float _2514 = cbLight._m0[_2251].y + _843;
    float _2515 = cbLight._m0[_2251].z + _844;
    float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
    float _2520 = _2519 * _2513;
    float _2521 = _2519 * _2514;
    float _2522 = _2519 * _2515;
    float _2523 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2251].xyz));
    float _4638 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _4649 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _2527 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2528 = dot(vec3(_763, _764, _765), vec3(_2520, _2521, _2522));
    float _4660 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2520, _2521, _2522));
    float _4671 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2512 * _2512;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2551 = (exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2552 = 1.0 - _2512;
    float _2563 = (0.5 / (((_2527 * ((_2526 * _2552) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2552) + _2512) * _2526))) * _2526;
    float _4682 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2565 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    uint _2579 = _2251 + 9u;
    float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _766) * 0.949999988079071044921875);
    float _2591 = _2590 * _2590;
    float _2592 = cbLight._m0[_2291].x + _842;
    float _2593 = cbLight._m0[_2291].y + _843;
    float _2594 = cbLight._m0[_2291].z + _844;
    float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
    float _2599 = _2598 * _2592;
    float _2600 = _2598 * _2593;
    float _2601 = _2598 * _2594;
    float _2602 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2291].xyz));
    float _4693 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2605 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2606 = dot(vec3(_763, _764, _765), vec3(_2599, _2600, _2601));
    float _4704 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2610 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2599, _2600, _2601));
    float _4715 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2614 = _2591 * _2591;
    float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
    float _2627 = (exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2628 = 1.0 - _2591;
    float _2638 = (0.5 / (((_2527 * ((_2605 * _2628) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2628) + _2591) * _2605))) * _2605;
    float _4726 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2640 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
    float _2650 = (((_2627 * cbLight._m0[_2579].x) * _2640) * _2274) + ((((cbLight._m0[_2498].x * _2240) * _2551) * _2565) * _2287);
    float _2651 = (((_2627 * cbLight._m0[_2579].y) * _2640) * _2274) + ((((cbLight._m0[_2498].y * _2242) * _2551) * _2565) * _2287);
    float _2652 = (((_2627 * cbLight._m0[_2579].z) * _2640) * _2274) + ((((cbLight._m0[_2498].z * _2244) * _2551) * _2565) * _2287);
    float _2708;
    float _2710;
    float _2712;
    if (_2327)
    {
        _2708 = _2650;
        _2710 = _2651;
        _2712 = _2652;
    }
    else
    {
        uint _2714 = _2251 + 2u;
        uint _2718 = _2251 + 10u;
        float _2732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2714].w)) * _766) * 0.949999988079071044921875);
        float _2733 = _2732 * _2732;
        float _2734 = cbLight._m0[_2714].x + _842;
        float _2735 = cbLight._m0[_2714].y + _843;
        float _2736 = cbLight._m0[_2714].z + _844;
        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
        float _2741 = _2740 * _2734;
        float _2742 = _2740 * _2735;
        float _2743 = _2740 * _2736;
        float _2744 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2714].xyz));
        float _4737 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2748 = dot(vec3(_763, _764, _765), vec3(_2741, _2742, _2743));
        float _4748 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2752 = dot(vec3(cbLight._m0[_2714].xyz), vec3(_2741, _2742, _2743));
        float _4759 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2756 = _2733 * _2733;
        float _2760 = ((_2751 * _2751) * (_2756 + (-1.0))) + 1.0;
        float _2769 = (exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2770 = 1.0 - _2733;
        float _2780 = (0.5 / (((_2527 * ((_2747 * _2770) + _2733)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2770) + _2733) * _2747))) * _2747;
        float _4770 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2782 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2756 / ((_2760 * _2760) * 3.141590118408203125));
        float _2783 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2708 = (((_2769 * cbLight._m0[_2718].x) * _2782) * _2783) + _2650;
        _2710 = (((_2769 * cbLight._m0[_2718].y) * _2782) * _2783) + _2651;
        _2712 = (((_2769 * cbLight._m0[_2718].z) * _2782) * _2783) + _2652;
    }
    float _2814;
    float _2816;
    float _2818;
    if (_2436)
    {
        _2814 = _2708;
        _2816 = _2710;
        _2818 = _2712;
    }
    else
    {
        uint _2825 = _2251 + 3u;
        uint _2829 = _2251 + 11u;
        float _2843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2825].w)) * _766) * 0.949999988079071044921875);
        float _2844 = _2843 * _2843;
        float _2845 = cbLight._m0[_2825].x + _842;
        float _2846 = cbLight._m0[_2825].y + _843;
        float _2847 = cbLight._m0[_2825].z + _844;
        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
        float _2852 = _2851 * _2845;
        float _2853 = _2851 * _2846;
        float _2854 = _2851 * _2847;
        float _2855 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2825].xyz));
        float _4786 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2859 = dot(vec3(_763, _764, _765), vec3(_2852, _2853, _2854));
        float _4797 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2862 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2863 = dot(vec3(cbLight._m0[_2825].xyz), vec3(_2852, _2853, _2854));
        float _4808 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2867 = _2844 * _2844;
        float _2871 = ((_2862 * _2862) * (_2867 + (-1.0))) + 1.0;
        float _2880 = (exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2881 = 1.0 - _2844;
        float _2891 = (0.5 / (((_2527 * ((_2858 * _2881) + _2844)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2881) + _2844) * _2858))) * _2858;
        float _4819 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2893 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2867 / ((_2871 * _2871) * 3.141590118408203125));
        float _2894 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2814 = (((_2880 * cbLight._m0[_2829].x) * _2893) * _2894) + _2708;
        _2816 = (((_2880 * cbLight._m0[_2829].y) * _2893) * _2894) + _2710;
        _2818 = (((_2880 * cbLight._m0[_2829].z) * _2893) * _2894) + _2712;
    }
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    if (_2249.y == 0u)
    {
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.x;
        uint _2927 = uint((float(_2915.y) * floor(float(uint(cbSceneParam._m0[85u].y * _863) / _2916))) + floor(float(uint(cbSceneParam._m0[85u].x * _862) / _2916)));
        float _2937 = (log2(_2027 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2938 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        uint _2941 = uint(isnan(14.0) ? _2938 : (isnan(_2938) ? 14.0 : min(_2938, 14.0)));
        uvec4 _2946 = texelFetch(g_lightClusterGridBuffer, int(((_2941 << 2u) + (_2927 << 6u)) >> 2u));
        uint _2947 = _2946.x;
        uint _2948 = _2915.z;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((((1u << ((_2948 >> 4u) & 15u)) + 4294967295u) & _2947) == 0u) || ((_2948 & 240u) == 0u))
        {
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
        }
        else
        {
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            uint _3185 = 0u;
            uint _3194;
            bool _3195;
            for (;;)
            {
                _3194 = texelFetch(g_lightClassification, int((((_2941 << 5u) + (_2927 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                _3195 = _3194 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3195)
                {
                    frontier_phi_71_pred = _3184;
                    frontier_phi_71_pred_1 = _3183;
                    frontier_phi_71_pred_2 = _3182;
                    frontier_phi_71_pred_3 = _3181;
                    frontier_phi_71_pred_4 = _3180;
                    frontier_phi_71_pred_5 = _3179;
                }
                else
                {
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    uint _3330;
                    _3324 = _3179;
                    _3325 = _3180;
                    _3326 = _3181;
                    _3327 = _3182;
                    _3328 = _3183;
                    _3329 = _3184;
                    _3330 = _3194;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    for (;;)
                    {
                        uint _3334 = uint(findLSB(_3330)) + (_3185 << 5u);
                        uint _3331 = (_3330 + 4294967295u) & _3330;
                        uint _3336 = _3334 * 48u;
                        vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3356 = (_3334 * 48u) + 4u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 3u)).x));
                        uint _3375 = (_3334 * 48u) + 8u;
                        vec3 _3386 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x));
                        float _3390 = _3350.x - _2025;
                        float _3391 = _3350.y - _2026;
                        float _3392 = _3350.z - _2027;
                        float _3393 = dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392));
                        float _3396 = inversesqrt(_3393);
                        float _3397 = _3396 * _3390;
                        float _3398 = _3396 * _3391;
                        float _3399 = _3396 * _3392;
                        float _3400 = dot(vec3(_881, _884, _887), vec3(_3397, _3398, _3399));
                        float _3405 = 1.0 - (_3393 * _3350.w);
                        float _4845 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3407 = sqrt(_3393) * _3369.w;
                        float _3410 = 1.39999997615814208984375 / (_3407 + 1.39999997615814208984375);
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3400) + _3411;
                        float _3417 = _3407 * _3407;
                        float _3421 = ((isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * _3406) / ((_3417 * 0.699999988079071044921875) + 1.0);
                        float _3425 = (-0.0) - _2025;
                        float _3426 = (-0.0) - _2026;
                        float _3427 = (-0.0) - _2027;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3432 = _3431 * _3425;
                        float _3433 = _3431 * _3426;
                        float _3434 = _3431 * _3427;
                        float _3441 = exp2(log2(1.0 / ((_3417 * 3.5) + 5.0)) * 0.25);
                        float _3442 = 1.0 - _941;
                        float _3449 = sqrt(1.0 - ((1.0 - (_3442 * _3442)) * (1.0 - (_3441 * _3441))));
                        float _3450 = _3449 * _3449;
                        float _3451 = _3450 * _3450;
                        float _3452 = _3432 + _3397;
                        float _3453 = _3433 + _3398;
                        float _3454 = _3434 + _3399;
                        float _3458 = inversesqrt(dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454)));
                        float _3462 = dot(vec3(_881, _884, _887), vec3(_3432, _3433, _3434));
                        float _4861 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3465 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3466 = dot(vec3(_881, _884, _887), vec3(_3458 * _3452, _3458 * _3453, _3458 * _3454));
                        float _4872 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3469 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3473 = ((_3469 * _3469) * (_3451 + (-1.0))) + 1.0;
                        float _3474 = _3410 * _3450;
                        float _3475 = _3474 * _3474;
                        float _3478 = ((1.0 - _3475) * _3400) + _3475;
                        float _4883 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3479 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                        float _3480 = 1.0 - _3450;
                        float _3490 = (0.5 / (((_3479 * ((_3465 * _3480) + _3450)) + 9.9999999392252902907785028219223e-09) + (((_3479 * _3480) + _3450) * _3465))) * _3479;
                        float _4894 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3501 = (((_3451 * 3.1415927410125732421875) * (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) / ((_3473 * _3473) * ((_3417 * 2.1991131305694580078125) + 3.141590118408203125))) * _3406;
                        _3254 = (_3421 * _3369.x) + _3327;
                        _3255 = (_3421 * _3369.y) + _3328;
                        _3256 = (_3421 * _3369.z) + _3329;
                        _3251 = (_3501 * _3386.x) + _3324;
                        _3252 = (_3501 * _3386.y) + _3325;
                        _3253 = (_3501 * _3386.z) + _3326;
                        if (_3331 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3324 = _3251;
                            _3325 = _3252;
                            _3326 = _3253;
                            _3327 = _3254;
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3331;
                        }
                    }
                    frontier_phi_71_pred = _3256;
                    frontier_phi_71_pred_1 = _3255;
                    frontier_phi_71_pred_2 = _3254;
                    frontier_phi_71_pred_3 = _3253;
                    frontier_phi_71_pred_4 = _3252;
                    frontier_phi_71_pred_5 = _3251;
                }
                _3038 = frontier_phi_71_pred;
                _3036 = frontier_phi_71_pred_1;
                _3034 = frontier_phi_71_pred_2;
                _3032 = frontier_phi_71_pred_3;
                _3030 = frontier_phi_71_pred_4;
                _3028 = frontier_phi_71_pred_5;
                uint _3186 = _3185 + 1u;
                if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3179 = _3028;
                    _3180 = _3030;
                    _3181 = _3032;
                    _3182 = _3034;
                    _3183 = _3036;
                    _3184 = _3038;
                    _3185 = _3186;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
        }
        uvec4 _3041 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3042 = _3041.z;
        uint _3044 = (_3042 >> 8u) & 15u;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        if (((4294967295u << _3044) & _2947) == 0u)
        {
            _3147 = _3027;
            _3149 = _3029;
            _3151 = _3031;
            _3153 = _3033;
            _3155 = _3035;
            _3157 = _3037;
        }
        else
        {
            float _3172 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
            float _3173 = _3172 * _2025;
            float _3174 = _3172 * _2026;
            float _3175 = _3172 * _2027;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3044 < ((_3042 >> 12u) & 15u))
            {
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3307 = _3027;
                float _3308 = _3029;
                float _3309 = _3031;
                float _3310 = _3033;
                float _3311 = _3035;
                float _3312 = _3037;
                uint _3313 = _3044;
                uint _3322;
                bool _3323;
                for (;;)
                {
                    _3322 = texelFetch(g_lightClassification, int((((_2941 << 5u) + (_2927 << 9u)) + (_3313 << 2u)) >> 2u)).x;
                    _3323 = _3322 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3323)
                    {
                        frontier_phi_82_pred = _3312;
                        frontier_phi_82_pred_1 = _3311;
                        frontier_phi_82_pred_2 = _3310;
                        frontier_phi_82_pred_3 = _3309;
                        frontier_phi_82_pred_4 = _3308;
                        frontier_phi_82_pred_5 = _3307;
                    }
                    else
                    {
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3528 = _3307;
                        float _3529 = _3308;
                        float _3530 = _3309;
                        float _3531 = _3310;
                        float _3532 = _3311;
                        float _3533 = _3312;
                        uint _3534 = _3322;
                        uint _3535;
                        vec4 _3560;
                        float _3561;
                        vec4 _3576;
                        vec3 _3588;
                        vec4 _3603;
                        vec4 _3619;
                        float _3665;
                        bool _3666;
                        for (;;)
                        {
                            uint _3545 = ((_3313 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3534));
                            _3535 = (_3534 + 4294967295u) & _3534;
                            uint _3547 = _3545 * 40u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            _3561 = _3560.w;
                            uint _3563 = (_3545 * 40u) + 4u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3545 * 40u) + 8u;
                            _3588 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x));
                            uint _3590 = (_3545 * 40u) + 16u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3606 = (_3545 * 40u) + 20u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3545 * 40u) + 24u;
                            vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3640 = (_3545 * 40u) + 28u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            _3665 = fma(_2027, _3653.z, fma(_2026, _3653.y, _3653.x * _2025)) + _3653.w;
                            _3666 = !((fma(_2027, _3634.z, fma(_2026, _3634.y, _3634.x * _2025)) + _3634.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3666)
                            {
                                float _3693 = _3560.x - _2025;
                                float _3694 = _3560.y - _2026;
                                float _3695 = _3560.z - _2027;
                                float _3696 = dot(vec3(_3693, _3694, _3695), vec3(_3693, _3694, _3695));
                                float _3699 = inversesqrt(_3696);
                                float _3700 = _3699 * _3693;
                                float _3701 = _3699 * _3694;
                                float _3702 = _3699 * _3695;
                                float _3706 = 1.0 - (_3696 / (_3561 * _3561));
                                float _4905 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3711 = sqrt(_3696) * _3576.w;
                                float _3713 = 1.39999997615814208984375 / (_3711 + 1.39999997615814208984375);
                                float _3714 = _3713 * _3713;
                                float _3717 = ((1.0 - _3714) * dot(vec3(_3700, _3701, _3702), vec3(_881, _884, _887))) + _3714;
                                float _3720 = _3711 * _3711;
                                float _3724 = (fma(_2027, _3603.z, fma(_2026, _3603.y, _3603.x * _2025)) + _3603.w) / _3665;
                                float _3725 = (fma(_2027, _3619.z, fma(_2026, _3619.y, _3619.x * _2025)) + _3619.w) / _3665;
                                float _3729 = 1.0 - dot(vec2(_3724, _3725), vec2(_3724, _3725));
                                float _4921 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3731 = _3730 * (((isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0))) * _3707) / ((_3720 * 0.699999988079071044921875) + 1.0));
                                float _3743 = exp2(log2(1.0 / ((_3720 * 3.5) + 5.0)) * 0.25);
                                float _3744 = 1.0 - _941;
                                float _3751 = sqrt(1.0 - ((1.0 - (_3744 * _3744)) * (1.0 - (_3743 * _3743))));
                                float _3752 = _3751 * _3751;
                                float _3753 = _3752 * _3752;
                                float _3754 = _3700 - _3173;
                                float _3755 = _3701 - _3174;
                                float _3756 = _3702 - _3175;
                                float _3760 = inversesqrt(dot(vec3(_3754, _3755, _3756), vec3(_3754, _3755, _3756)));
                                float _3764 = dot(vec3(_881, _884, _887), vec3((-0.0) - _3173, (-0.0) - _3174, (-0.0) - _3175));
                                float _4932 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3767 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3768 = dot(vec3(_881, _884, _887), vec3(_3760 * _3754, _3760 * _3755, _3760 * _3756));
                                float _4943 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3771 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3775 = ((_3771 * _3771) * (_3753 + (-1.0))) + 1.0;
                                float _3776 = _3713 * _3752;
                                float _3777 = _3776 * _3776;
                                float _3783 = ((1.0 - _3777) * dot(vec3(_881, _884, _887), vec3(_3700, _3701, _3702))) + _3777;
                                float _4954 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3784 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3785 = 1.0 - _3752;
                                float _3795 = (0.5 / (((_3784 * ((_3767 * _3785) + _3752)) + 9.9999999392252902907785028219223e-09) + (((_3784 * _3785) + _3752) * _3767))) * _3784;
                                float _4965 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3805 = (_3730 * _3707) * (((_3753 * 3.1415927410125732421875) * (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) / ((_3775 * _3775) * ((_3720 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3731 * _3576.z;
                                frontier_phi_88_pred_1 = _3731 * _3576.y;
                                frontier_phi_88_pred_2 = _3731 * _3576.x;
                                frontier_phi_88_pred_3 = _3805 * _3588.z;
                                frontier_phi_88_pred_4 = _3805 * _3588.y;
                                frontier_phi_88_pred_5 = _3805 * _3588.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3814 = frontier_phi_88_pred;
                            _3813 = frontier_phi_88_pred_1;
                            _3812 = frontier_phi_88_pred_2;
                            _3811 = frontier_phi_88_pred_3;
                            _3810 = frontier_phi_88_pred_4;
                            _3809 = frontier_phi_88_pred_5;
                            _3518 = _3812 + _3531;
                            _3519 = _3813 + _3532;
                            _3520 = _3814 + _3533;
                            _3515 = _3809 + _3528;
                            _3516 = _3810 + _3529;
                            _3517 = _3811 + _3530;
                            if (_3535 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3535;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3520;
                        frontier_phi_82_pred_1 = _3519;
                        frontier_phi_82_pred_2 = _3518;
                        frontier_phi_82_pred_3 = _3517;
                        frontier_phi_82_pred_4 = _3516;
                        frontier_phi_82_pred_5 = _3515;
                    }
                    _3158 = frontier_phi_82_pred;
                    _3156 = frontier_phi_82_pred_1;
                    _3154 = frontier_phi_82_pred_2;
                    _3152 = frontier_phi_82_pred_3;
                    _3150 = frontier_phi_82_pred_4;
                    _3148 = frontier_phi_82_pred_5;
                    uint _3314 = _3313 + 1u;
                    if (_3314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3307 = _3148;
                        _3308 = _3150;
                        _3309 = _3152;
                        _3310 = _3154;
                        _3311 = _3156;
                        _3312 = _3158;
                        _3313 = _3314;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3154;
                frontier_phi_63_64_ladder_1 = _3158;
                frontier_phi_63_64_ladder_2 = _3156;
                frontier_phi_63_64_ladder_3 = _3152;
                frontier_phi_63_64_ladder_4 = _3150;
                frontier_phi_63_64_ladder_5 = _3148;
            }
            else
            {
                frontier_phi_63_64_ladder = _3033;
                frontier_phi_63_64_ladder_1 = _3037;
                frontier_phi_63_64_ladder_2 = _3035;
                frontier_phi_63_64_ladder_3 = _3031;
                frontier_phi_63_64_ladder_4 = _3029;
                frontier_phi_63_64_ladder_5 = _3027;
            }
            _3147 = frontier_phi_63_64_ladder_5;
            _3149 = frontier_phi_63_64_ladder_4;
            _3151 = frontier_phi_63_64_ladder_3;
            _3153 = frontier_phi_63_64_ladder;
            _3155 = frontier_phi_63_64_ladder_2;
            _3157 = frontier_phi_63_64_ladder_1;
        }
        float _3162 = isnan(1.0) ? _925 : (isnan(_925) ? 1.0 : min(_925, 1.0));
        _2960 = (_3162 * _3153) + _2491;
        _2962 = (_3162 * _3155) + _2493;
        _2964 = (_3162 * _3157) + _2495;
        _2966 = ((_3147 * 0.039999999105930328369140625) * _3162) + _2814;
        _2968 = ((_3149 * 0.039999999105930328369140625) * _3162) + _2816;
        _2970 = ((_3151 * 0.039999999105930328369140625) * _3162) + _2818;
    }
    else
    {
        _2960 = _2491;
        _2962 = _2493;
        _2964 = _2495;
        _2966 = _2814;
        _2968 = _2816;
        _2970 = _2818;
    }
    float _4981 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4992 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _5003 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _2987 = ((isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_2960 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _925))) + ((_2966 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1761)) * cbPerFrame._m0[3u].x);
    float _2988 = ((isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_2962 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _925))) + ((_2968 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1761)) * cbPerFrame._m0[3u].x);
    float _2989 = ((isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0))) * (_2964 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _925))) + ((_2970 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1761)) * cbPerFrame._m0[3u].x);
    uint _2990 = _253 + 6u;
    float _2998 = _862 / cbSceneParam._m0[86u].x;
    float _2999 = _863 / cbSceneParam._m0[86u].y;
    vec4 _3013 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, (log2((isnan(cbSceneParam._m0[77u].w) ? _784 : (isnan(_784) ? cbSceneParam._m0[77u].w : min(_784, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3015 = _3013.x;
    float _3016 = _3013.y;
    float _3017 = _3013.z;
    float _3018 = _3013.w;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    if (_784 > cbSceneParam._m0[78u].w)
    {
        float _3052 = isnan(_784) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _784 : min(cbSceneParam._m0[80u].w, _784));
        float _3053 = _3052 / _784;
        float _3064 = _3053 * _835;
        float _3065 = _836 * _3053;
        float _3066 = (-0.0) - _3065;
        float _3067 = _3053 * _837;
        float _3069 = (cbSceneParam._m0[77u].w * _3066) / _3052;
        float _3070 = _3069 + cbSceneParam._m0[79u].w;
        float _3071 = cbSceneParam._m0[79u].w - _3065;
        float _3077 = sqrt(((_3064 * _3064) + (_3065 * _3065)) + (_3067 * _3067));
        float _3080 = (1.0 - (cbSceneParam._m0[77u].w / _3052)) * _3077;
        float _3085 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3087 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3264;
        if (abs((_3066 - _3069) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3264 = ((((_3070 > 0.0) ? exp2(_3085 * _3070) : (2.0 - exp2(_3087 * _3070))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3080;
        }
        else
        {
            float _3208 = 1.0 / cbSceneParam._m0[80u].x;
            float _3209 = isnan(_3071) ? _3070 : (isnan(_3070) ? _3071 : max(_3070, _3071));
            float _3210 = isnan(_3071) ? _3070 : (isnan(_3070) ? _3071 : min(_3070, _3071));
            float _3219 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : min(_3209, 0.0));
            float _3220 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : min(_3210, 0.0));
            _3264 = ((abs(_3077 / _3066) * cbSceneParam._m0[80u].y) * ((((_3219 - _3220) * 2.0) - ((exp2(_3085 * (isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0)))) - exp2(_3085 * (isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))))) * _3208)) - ((exp2(_3087 * _3219) - exp2(_3087 * _3220)) * _3208))) + (_3080 * cbSceneParam._m0[80u].z);
        }
        vec4 _3266 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, 1.0), 0.0);
        float _3275 = exp2((_3264 * (-1.44269502162933349609375)) * (1.0 - _3266.w));
        float _3276 = log2(_3275);
        float _3292 = log2(_3018);
        _3089 = (exp2(_3292 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].x)) * _3266.x) / cbSceneParam._m0[78u].x)) + _3015;
        _3091 = (exp2(_3292 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].y)) * _3266.y) / cbSceneParam._m0[78u].y)) + _3016;
        _3093 = (exp2(_3292 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].z)) * _3266.z) / cbSceneParam._m0[78u].z)) + _3017;
        _3095 = _3275 * _3018;
    }
    else
    {
        _3089 = _3015;
        _3091 = _3016;
        _3093 = _3017;
        _3095 = _3018;
    }
    bool _3302;
    vec4 _3105;
    vec4 _3127;
    float _3129;
    float _3133;
    float _3134;
    float _3135;
    float _3136;
    bool _3146;
    for (;;)
    {
        _3105 = cbMatDynParam._m0[0u];
        float _3107 = roundEven(_3105.y);
        bool _3108 = _3107 == 3.0;
        float _3109 = log2(_3095);
        float _3116 = exp2(_3109 * cbSceneParam._m0[78u].x) * _2987;
        float _3117 = exp2(_3109 * cbSceneParam._m0[78u].y) * _2988;
        float _3118 = exp2(_3109 * cbSceneParam._m0[78u].z) * _2989;
        float _3125 = _851 + (-0.5);
        _3127 = cbMtdParam._m0[1u];
        _3129 = _3127.y * _3125;
        float _3132 = (_3107 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3133 = _3132 * (_3108 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3089)));
        _3134 = _3132 * (_3108 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3091)));
        _3135 = _3132 * (_3108 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3093)));
        _3136 = _3125 * 0.999000012874603271484375;
        _3146 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3146)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3136) < 0.5)
            {
                _3302 = true;
                break;
            }
        }
        uint _3243 = _900 + uint(_3105.w);
        if ((cbInstanceData._m0[_3243].w < 1.0) && ((cbInstanceData._m0[_3243].w + _3136) < 0.5))
        {
            _3302 = true;
            break;
        }
        if ((_3129 + 1.0) < _3127.x)
        {
            _3302 = true;
            break;
        }
        _3302 = false;
        break;
    }
    float _3506;
    if (_3302)
    {
        discard_state = true;
        _3506 = 0.0;
    }
    else
    {
        _3506 = cbInstanceData._m0[_2990].w;
    }
    SV_Target.x = _3133;
    SV_Target.y = _3134;
    SV_Target.z = _3135;
    SV_Target.w = _3506;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2990].w;
    discard_exit();
}


