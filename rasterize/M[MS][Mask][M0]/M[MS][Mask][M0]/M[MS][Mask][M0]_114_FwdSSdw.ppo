#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1448;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3775 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3786 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3797 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[24u].z) + _457) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3808 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _482 = (_475 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _483 = (_475 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _484 = (_475 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _523 = _521.x;
    float _533 = dot(vec4(_523, _521.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _547 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_523 - _533) * cbMtdParam._m0[24u].z) + _533) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3819 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _555 = (_548 * ((_501.x * cbMtdParam._m0[13u].x) - _482)) + _482;
    float _556 = (_548 * ((_501.y * cbMtdParam._m0[13u].y) - _483)) + _483;
    float _557 = (_548 * ((_501.z * cbMtdParam._m0[13u].z) - _484)) + _484;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _297) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _298) + cbTextureTilingScale._m0[24u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _594 = _592.x;
    float _604 = dot(vec4(_594, _592.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _616 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _405.z) * 2.0) - ((((_594 - _604) * cbMtdParam._m0[24u].z) + _604) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3830 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _627 = (_334.x * cbMtdParam._m0[9u].x) * ((_617 * ((_575.x * cbMtdParam._m0[14u].x) - _555)) + _555);
    float _628 = (_334.y * cbMtdParam._m0[9u].y) * ((_617 * ((_575.y * cbMtdParam._m0[14u].y) - _556)) + _556);
    float _629 = (_334.z * cbMtdParam._m0[9u].z) * ((_617 * ((_575.z * cbMtdParam._m0[14u].z) - _557)) + _557);
    float _633 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _627;
    float _636 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _628;
    float _639 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _629;
    float _647 = (((_627 - _633) * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) + _633) * 4.55000019073486328125;
    float _649 = (((_628 - _636) * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) + _636) * 4.55000019073486328125;
    float _651 = (((_629 - _639) * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) + _639) * 4.55000019073486328125;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _710 = _708.x;
    float _711 = _708.y;
    float _712 = _708.z;
    float _719 = ((_691.x - _710) * _475) + _710;
    float _720 = ((_691.y - _711) * _475) + _711;
    float _721 = ((_691.z - _712) * _475) + _712;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _744 = ((_733.x - _719) * _548) + _719;
    float _745 = ((_733.y - _720) * _548) + _720;
    float _746 = ((_733.z - _721) * _548) + _721;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _297) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _298) + cbTextureTilingScale._m0[23u].w));
    float _771 = ((_758.z - _746) * _617) + _746;
    float _774 = ((((_758.x - _744) * _617) + _744) * 2.0) + (-1.0);
    float _775 = ((((_758.y - _745) * _617) + _745) * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _3841 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _781 = sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))));
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _820 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _822 = _820.x;
    float _823 = 1.0 - _822;
    float _836 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_822 - _823) * cbMtdParam._m0[24u].w) + _823) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3852 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _837 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _844 = (_837 * (cbMtdParam._m0[17u].x - _647)) + _647;
    float _845 = (_837 * (cbMtdParam._m0[17u].y - _649)) + _649;
    float _846 = (_837 * (cbMtdParam._m0[17u].z - _651)) + _651;
    float _851 = (((_668.z - _771) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _771;
    float _855 = ((_795.z - _851) * cbMtdParam._m0[19u].w) + _851;
    vec4 _868 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _875 = (_868.x * 2.0) + (-1.0);
    float _876 = (_868.y * 2.0) + (-1.0);
    float _877 = dot(vec2(_875, _876), vec2(_875, _876));
    float _3863 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _885 = (_837 * (_868.z - _855)) + _855;
    float _894 = (_774 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_668.x * 2.0) + (-1.0)))) + (((_795.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _895 = (_775 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_668.y * 2.0) + (-1.0)))) + (((_795.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _907 = (((_875 - _894) + (cbMtdParam._m0[21u].x * _894)) * _837) + _894;
    float _908 = (((_876 - _895) + (cbMtdParam._m0[21u].x * _895)) * _837) + _895;
    float _909 = (_837 * (sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) - _781)) + _781;
    float _913 = cbMtdParam._m0[22u].x + _795.w;
    float _916 = fma(_909, _244 * NORMAL.x, fma(_908, _251 * TANGENT.x, (_237 * _229) * _907));
    float _919 = fma(_909, _244 * NORMAL.y, fma(_908, _251 * TANGENT.y, (_237 * _230) * _907));
    float _922 = fma(_909, _244 * NORMAL.z, fma(_908, _251 * TANGENT.z, (_237 * _231) * _907));
    float _926 = inversesqrt(dot(vec3(_916, _919, _922), vec3(_916, _919, _922)));
    float _927 = _926 * _916;
    float _928 = _926 * _919;
    float _929 = _926 * _922;
    float _3874 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _930 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _3896 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _3907 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _3918 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _948 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _999 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _989);
    float _1000 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _989);
    float _1001 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _989);
    float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
    float _1006 = _999 * _1005;
    float _1007 = _1000 * _1005;
    float _1008 = _1001 * _1005;
    float _1014 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1015 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1033 = fma(_929, cbSceneParam._m0[5u].z, fma(_928, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _927));
    float _1036 = fma(_929, cbSceneParam._m0[6u].z, fma(_928, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _927));
    float _1039 = fma(_929, cbSceneParam._m0[7u].z, fma(_928, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _927));
    uint _1053 = (_278 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1059 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_1053].x;
    float _1060 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_1053].y;
    float _1061 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_1053].z;
    float _3929 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    vec4 _1073 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1014, cbSceneParam._m0[86u].y * _1015));
    float _1077 = ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * TEXCOORD_5.w) * _1073.x;
    float _1078 = dot(vec3(_927, _928, _929), vec3(_1006, _1007, _1008));
    float _1081 = _1078 * 2.0;
    float _1085 = (_1081 * _927) - _1006;
    float _1086 = (_1081 * _928) - _1007;
    float _1087 = (_1081 * _929) - _1008;
    float _1091 = abs(dot(vec3(_1006, _1007, _1008), vec3(_927, _928, _929)));
    float _3962 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1093 = sqrt(_930);
    float _1106 = exp2((_1093 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1093 * 3.0));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1447;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1172 = fma(_1146, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138));
        float _1176 = fma(_1146, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138));
        float _1180 = fma(_1146, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138));
        float _1205 = _1138 + _927;
        float _1206 = _1142 + _928;
        float _1207 = _1146 + _929;
        float _1217 = fma(_1207, cbModelParam._m0[26u].z, fma(_1206, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1205)) - _1172;
        float _1218 = fma(_1207, cbModelParam._m0[27u].z, fma(_1206, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1205)) - _1176;
        float _1219 = fma(_1207, cbModelParam._m0[28u].z, fma(_1206, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1205)) - _1180;
        float _1223 = inversesqrt(dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219)));
        float _1236 = ((_1223 * _1217) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1172 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1223 * _1218) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1176 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1223 * _1219) / cbModelParam._m0[34u].z) + ((((((_1180 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        float _1275 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1241.x + (-0.5));
        float _1277 = _1275 * (_1241.y + (-0.5));
        float _1278 = _1275 * (_1241.z + (-0.5));
        float _1285 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1248.x + (-0.5));
        float _1287 = _1285 * (_1248.y + (-0.5));
        float _1288 = _1285 * (_1248.z + (-0.5));
        float _1295 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1255.x + (-0.5));
        float _1297 = _1295 * (_1255.y + (-0.5));
        float _1298 = _1295 * (_1255.z + (-0.5));
        float _1305 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1262.x + (-0.5));
        float _1307 = _1305 * (_1262.y + (-0.5));
        float _1308 = _1305 * (_1262.z + (-0.5));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = _1276 * 0.5;
        float _1313 = _1286 * 0.5;
        float _1314 = _1296 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1329 = (dot(vec3(_927, _928, _929), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1339 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4010 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1341 + 1.0))) + _1346) * _1309;
        float _1356 = _1277 * 0.5;
        float _1357 = _1287 * 0.5;
        float _1358 = _1297 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_927, _928, _929), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4043 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1383 + 1.0))) + _1388) * _1310;
        float _1398 = _1278 * 0.5;
        float _1399 = _1288 * 0.5;
        float _1400 = _1298 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_927, _928, _929), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4076 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1425 + 1.0))) + _1430) * _1311;
        _1447 = _1278;
        _1449 = _1277;
        _1450 = _1276;
        _1451 = _1288;
        _1452 = _1287;
        _1453 = _1286;
        _1454 = _1298;
        _1455 = _1297;
        _1456 = _1296;
        _1457 = _1311;
        _1458 = _1310;
        _1459 = _1309;
        _1460 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
    }
    else
    {
        _1447 = _1448;
        _1449 = _1448;
        _1450 = _1448;
        _1451 = _1448;
        _1452 = _1448;
        _1453 = _1448;
        _1454 = _1448;
        _1455 = _1448;
        _1456 = _1448;
        _1457 = _1448;
        _1458 = _1448;
        _1459 = _1448;
        _1460 = 0.0;
        _1461 = 0.0;
        _1462 = 0.0;
    }
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1485 = fma(_1146, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1138));
        float _1489 = fma(_1146, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1138));
        float _1493 = fma(_1146, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1138));
        float _1516 = _1138 + _927;
        float _1517 = _1142 + _928;
        float _1518 = _1146 + _929;
        float _1528 = fma(_1518, cbModelParam._m0[30u].z, fma(_1517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1516)) - _1485;
        float _1529 = fma(_1518, cbModelParam._m0[31u].z, fma(_1517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1516)) - _1489;
        float _1530 = fma(_1518, cbModelParam._m0[32u].z, fma(_1517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1516)) - _1493;
        float _1534 = inversesqrt(dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530)));
        float _1547 = ((_1534 * _1528) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1485 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1548 = ((_1534 * _1529) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1489 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1549 = ((_1534 * _1530) / cbModelParam._m0[35u].z) + ((((((_1493 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        float _1584 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1551.x + (-0.5));
        float _1586 = _1584 * (_1551.y + (-0.5));
        float _1587 = _1584 * (_1551.z + (-0.5));
        float _1594 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1558.x + (-0.5));
        float _1596 = _1594 * (_1558.y + (-0.5));
        float _1597 = _1594 * (_1558.z + (-0.5));
        float _1604 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1565.x + (-0.5));
        float _1606 = _1604 * (_1565.y + (-0.5));
        float _1607 = _1604 * (_1565.z + (-0.5));
        float _1614 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1572.x + (-0.5));
        float _1616 = _1614 * (_1572.y + (-0.5));
        float _1617 = _1614 * (_1572.z + (-0.5));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = _1585 * 0.5;
        float _1622 = _1595 * 0.5;
        float _1623 = _1605 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_927, _928, _929), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4139 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1648 + 1.0))) + _1653) * _1618;
        float _1663 = _1586 * 0.5;
        float _1664 = _1596 * 0.5;
        float _1665 = _1606 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_927, _928, _929), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4172 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1690 + 1.0))) + _1695) * _1619;
        float _1705 = _1587 * 0.5;
        float _1706 = _1597 * 0.5;
        float _1707 = _1607 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_927, _928, _929), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4205 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1732 + 1.0))) + _1737) * _1620;
        _1754 = _1587;
        _1755 = _1586;
        _1756 = _1585;
        _1757 = _1597;
        _1758 = _1596;
        _1759 = _1595;
        _1760 = _1607;
        _1761 = _1606;
        _1762 = _1605;
        _1763 = _1620;
        _1764 = _1619;
        _1765 = _1618;
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
    }
    else
    {
        _1754 = _1448;
        _1755 = _1448;
        _1756 = _1448;
        _1757 = _1448;
        _1758 = _1448;
        _1759 = _1448;
        _1760 = _1448;
        _1761 = _1448;
        _1762 = _1448;
        _1763 = _1448;
        _1764 = _1448;
        _1765 = _1448;
        _1766 = 0.0;
        _1767 = 0.0;
        _1768 = 0.0;
    }
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1460)) + _1460;
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1461)) + _1461;
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1462)) + _1462;
    float _1801 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1778));
    float _1822 = _1085 * 0.5;
    float _1823 = _1086 * 0.5;
    float _1824 = _1087 * 0.5;
    float _1825 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1828 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1831 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1865;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1838 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1447, _1451, _1454, _1457));
        float _1842 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1449, _1452, _1455, _1458));
        float _1846 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1450, _1453, _1456, _1459));
        float _1853 = dot(vec4(cbModelParam._m0[39u]), vec4(_1822, _1823, _1824, 1.0));
        _1865 = dot(vec3(isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1865 = 1.0;
    }
    float _1876;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1867 = dot(vec4(cbModelParam._m0[40u]), vec4(_1822, _1823, _1824, 1.0));
        _1876 = dot(vec3(isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1867) ? 0.0 : (isnan(0.0) ? _1867 : max(0.0, _1867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1876 = 1.0;
    }
    float _1880 = (_1876 * cbModelParam._m0[1u].x) + (_1865 * (1.0 - cbModelParam._m0[1u].x));
    float _1890 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _930);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1890 : min(cbModelParam._m0[25u].z, _1890));
    float _1971;
    float _1973;
    float _1975;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1938 = fma(_1146, cbModelParam._m0[13u].z, fma(_1142, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138)) + cbModelParam._m0[13u].w;
        float _1942 = fma(_1146, cbModelParam._m0[14u].z, fma(_1142, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138)) + cbModelParam._m0[14u].w;
        float _1946 = fma(_1146, cbModelParam._m0[15u].z, fma(_1142, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138)) + cbModelParam._m0[15u].w;
        float _1949 = fma(_1087, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085));
        float _1952 = fma(_1087, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085));
        float _1955 = fma(_1087, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085));
        float _1983;
        if (_1949 > 0.0)
        {
            _1983 = abs((1.0 - _1938) / _1949);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1938 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1983 = frontier_phi_14_12_ladder;
        }
        float _2205;
        if (_1952 > 0.0)
        {
            _2205 = abs((1.0 - _1942) / _1952);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1942 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2205 = frontier_phi_23_19_ladder;
        }
        float _2451;
        if (_1955 > 0.0)
        {
            _2451 = abs((1.0 - _1946) / _1955);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1946 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2451 = frontier_phi_35_30_ladder;
        }
        float _2453 = isnan(_2205) ? _1983 : (isnan(_1983) ? _2205 : min(_1983, _2205));
        float _2454 = isnan(_2451) ? _2453 : (isnan(_2453) ? _2451 : min(_2453, _2451));
        float _2458 = (_2454 * _1949) + _1938;
        float _2459 = (_2454 * _1952) + _1942;
        float _2460 = (_2454 * _1955) + _1946;
        float _2461 = _2454 * 9.9999997473787516355514526367188e-05;
        float _2463 = (-1.0) - _2461;
        float _2465 = _2461 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2460 > _2465) || ((_2460 < _2463) || ((_2459 > _2465) || ((_2459 < _2463) || ((_2458 < _2463) || (_2458 > _2465))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2460, cbModelParam._m0[9u].z, fma(_2459, cbModelParam._m0[9u].y, _2458 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2460, cbModelParam._m0[10u].z, fma(_2459, cbModelParam._m0[10u].y, _2458 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2460, cbModelParam._m0[11u].z, fma(_2459, cbModelParam._m0[11u].y, _2458 * cbModelParam._m0[11u].x))), _1891);
            frontier_phi_13_35_ladder = _2584.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2584.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2584.x * cbModelParam._m0[1u].y;
        }
        _1971 = frontier_phi_13_35_ladder_2;
        _1973 = frontier_phi_13_35_ladder_1;
        _1975 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1085, _1086, _1087), _1891);
        _1971 = _1959.x * cbModelParam._m0[1u].y;
        _1973 = _1959.y * cbModelParam._m0[1u].y;
        _1975 = _1959.z * cbModelParam._m0[1u].y;
    }
    float _1979 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _930);
    float _1980 = isnan(_1979) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1979 : min(cbModelParam._m0[25u].w, _1979));
    float _2070;
    float _2072;
    float _2074;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2034 = fma(_1146, cbModelParam._m0[21u].z, fma(_1142, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138)) + cbModelParam._m0[21u].w;
        float _2038 = fma(_1146, cbModelParam._m0[22u].z, fma(_1142, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138)) + cbModelParam._m0[22u].w;
        float _2042 = fma(_1146, cbModelParam._m0[23u].z, fma(_1142, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138)) + cbModelParam._m0[23u].w;
        float _2045 = fma(_1087, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085));
        float _2048 = fma(_1087, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085));
        float _2051 = fma(_1087, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085));
        float _2210;
        if (_2045 > 0.0)
        {
            _2210 = abs((1.0 - _2034) / _2045);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2034 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2210 = frontier_phi_25_21_ladder;
        }
        float _2478;
        if (_2048 > 0.0)
        {
            _2478 = abs((1.0 - _2038) / _2048);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2038 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2478 = frontier_phi_37_32_ladder;
        }
        float _2683;
        if (_2051 > 0.0)
        {
            _2683 = abs((1.0 - _2042) / _2051);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2042 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2683 = frontier_phi_46_43_ladder;
        }
        float _2685 = isnan(_2478) ? _2210 : (isnan(_2210) ? _2478 : min(_2210, _2478));
        float _2686 = isnan(_2683) ? _2685 : (isnan(_2685) ? _2683 : min(_2685, _2683));
        float _2690 = (_2686 * _2045) + _2034;
        float _2691 = (_2686 * _2048) + _2038;
        float _2692 = (_2686 * _2051) + _2042;
        float _2693 = _2686 * 9.9999997473787516355514526367188e-05;
        float _2694 = (-1.0) - _2693;
        float _2696 = _2693 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2692 > _2696) || ((_2692 < _2694) || ((_2691 > _2696) || ((_2691 < _2694) || ((_2690 < _2694) || (_2690 > _2696))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2692, cbModelParam._m0[17u].z, fma(_2691, cbModelParam._m0[17u].y, _2690 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2692, cbModelParam._m0[18u].z, fma(_2691, cbModelParam._m0[18u].y, _2690 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2692, cbModelParam._m0[19u].z, fma(_2691, cbModelParam._m0[19u].y, _2690 * cbModelParam._m0[19u].x))), _1980);
            frontier_phi_22_46_ladder = _2891.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2891.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2891.x * cbModelParam._m0[1u].z;
        }
        _2070 = frontier_phi_22_46_ladder_2;
        _2072 = frontier_phi_22_46_ladder_1;
        _2074 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2054 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1085, _1086, _1087), _1980);
        _2070 = _2054.x * cbModelParam._m0[1u].z;
        _2072 = _2054.y * cbModelParam._m0[1u].z;
        _2074 = _2054.z * cbModelParam._m0[1u].z;
    }
    float _2086 = ((((1.0 - _1106) * ((_1093 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1106 * _1093)) * _1077;
    float _2087 = _2086 * ((cbModelParam._m0[1u].w * (_2070 - _1971)) + _1971);
    float _2088 = _2086 * ((cbModelParam._m0[1u].w * (_2072 - _1973)) + _1973);
    float _2089 = _2086 * ((cbModelParam._m0[1u].w * (_2074 - _1975)) + _1975);
    float _2092 = fma(_2089, cbSceneParam._m0[89u].z, fma(_2088, cbSceneParam._m0[89u].y, _2087 * cbSceneParam._m0[89u].x));
    float _2095 = fma(_2089, cbSceneParam._m0[90u].z, fma(_2088, cbSceneParam._m0[90u].y, _2087 * cbSceneParam._m0[90u].x));
    float _2098 = fma(_2089, cbSceneParam._m0[91u].z, fma(_2088, cbSceneParam._m0[91u].y, _2087 * cbSceneParam._m0[91u].x));
    vec4 _2106 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1014, _1015));
    float _2108 = _2106.w;
    float _2120 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2108);
    float _2121 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2108);
    float _2122 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2108);
    uvec4 _2126 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2128 = _2126.x * 14u;
    uint _2129 = _2128 + 13u;
    float _2136 = _1077 + (-1.0);
    float _2141 = (cbLight._m0[_2129].x * _2136) + 1.0;
    float _2142 = (cbLight._m0[_2129].y * _2136) + 1.0;
    float _2143 = (cbLight._m0[_2129].z * _2136) + 1.0;
    float _2144 = (cbLight._m0[_2129].w * _2136) + 1.0;
    uint _2145 = _2128 + 5u;
    float _2151 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2155 = _2128 + 4u;
    float _2164 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2168 = _2128 | 1u;
    float _2179 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_927, _928, _929));
    float _2182 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_927, _928, _929));
    float _4341 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _4352 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2187 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2189 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2196 = ((cbLight._m0[_2145].x * _2151) * _2189) + (((cbLight._m0[_2155].x * _2120) * _2164) * _2187);
    float _2197 = ((_2151 * cbLight._m0[_2145].y) * _2189) + (((cbLight._m0[_2155].y * _2121) * _2164) * _2187);
    float _2198 = ((_2151 * cbLight._m0[_2145].z) * _2189) + (((cbLight._m0[_2155].z * _2122) * _2164) * _2187);
    uvec4 _2202 = floatBitsToUint(cbLight._m0[_2128 + 12u]);
    bool _2204 = _2202.x == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2204)
    {
        _2215 = _2196;
        _2217 = _2197;
        _2219 = _2198;
    }
    else
    {
        uint _2223 = _2128 + 6u;
        float _2239 = (dot(vec3(cbLight._m0[_2128 + 2u].xyz), vec3(_927, _928, _929)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4363 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2242 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2215 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2196;
        _2217 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2197;
        _2219 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2198;
    }
    bool _2222 = _2202.y == 0u;
    float _2260;
    float _2262;
    float _2264;
    if (_2222)
    {
        _2260 = _2215;
        _2262 = _2217;
        _2264 = _2219;
    }
    else
    {
        uint _2422 = _2128 + 7u;
        float _2438 = (dot(vec3(cbLight._m0[_2128 + 3u].xyz), vec3(_927, _928, _929)) * 0.5) + 0.5;
        float _2439 = _2438 * _2438;
        float _4379 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2440 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2441 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2260 = (((cbLight._m0[_2422].x * 0.3183098733425140380859375) * _2440) * _2441) + _2215;
        _2262 = (((cbLight._m0[_2422].y * 0.3183098733425140380859375) * _2440) * _2441) + _2217;
        _2264 = (((cbLight._m0[_2422].z * 0.3183098733425140380859375) * _2440) * _2441) + _2219;
    }
    uint _2267 = _2128 + 8u;
    float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _930) * 0.949999988079071044921875);
    float _2281 = _2280 * _2280;
    float _2282 = cbLight._m0[_2128].x + _1006;
    float _2283 = cbLight._m0[_2128].y + _1007;
    float _2284 = cbLight._m0[_2128].z + _1008;
    float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
    float _2289 = _2288 * _2282;
    float _2290 = _2288 * _2283;
    float _2291 = _2288 * _2284;
    float _2292 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2128].xyz));
    float _4395 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2296 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2297 = dot(vec3(_927, _928, _929), vec3(_2289, _2290, _2291));
    float _4417 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2301 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2289, _2290, _2291));
    float _4428 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2305 = _2281 * _2281;
    float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
    float _2320 = (exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2321 = 1.0 - _2281;
    float _2332 = (0.5 / (((_2296 * ((_2295 * _2321) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2321) + _2281) * _2295))) * _2295;
    float _4439 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2334 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
    uint _2348 = _2128 + 9u;
    float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _930) * 0.949999988079071044921875);
    float _2360 = _2359 * _2359;
    float _2361 = cbLight._m0[_2168].x + _1006;
    float _2362 = cbLight._m0[_2168].y + _1007;
    float _2363 = cbLight._m0[_2168].z + _1008;
    float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
    float _2368 = _2367 * _2361;
    float _2369 = _2367 * _2362;
    float _2370 = _2367 * _2363;
    float _2371 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2168].xyz));
    float _4450 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2375 = dot(vec3(_927, _928, _929), vec3(_2368, _2369, _2370));
    float _4461 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2379 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2368, _2369, _2370));
    float _4472 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2383 = _2360 * _2360;
    float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
    float _2396 = (exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2397 = 1.0 - _2360;
    float _2407 = (0.5 / (((_2296 * ((_2374 * _2397) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2397) + _2360) * _2374))) * _2374;
    float _4483 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2409 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
    float _2419 = (((_2396 * cbLight._m0[_2348].x) * _2409) * _2151) + ((((cbLight._m0[_2267].x * _2120) * _2320) * _2334) * _2164);
    float _2420 = (((_2396 * cbLight._m0[_2348].y) * _2409) * _2151) + ((((cbLight._m0[_2267].y * _2121) * _2320) * _2334) * _2164);
    float _2421 = (((_2396 * cbLight._m0[_2348].z) * _2409) * _2151) + ((((cbLight._m0[_2267].z * _2122) * _2320) * _2334) * _2164);
    float _2483;
    float _2485;
    float _2487;
    if (_2204)
    {
        _2483 = _2419;
        _2485 = _2420;
        _2487 = _2421;
    }
    else
    {
        uint _2489 = _2128 + 2u;
        uint _2493 = _2128 + 10u;
        float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _930) * 0.949999988079071044921875);
        float _2508 = _2507 * _2507;
        float _2509 = cbLight._m0[_2489].x + _1006;
        float _2510 = cbLight._m0[_2489].y + _1007;
        float _2511 = cbLight._m0[_2489].z + _1008;
        float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
        float _2516 = _2515 * _2509;
        float _2517 = _2515 * _2510;
        float _2518 = _2515 * _2511;
        float _2519 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2489].xyz));
        float _4494 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2523 = dot(vec3(_927, _928, _929), vec3(_2516, _2517, _2518));
        float _4505 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2527 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2516, _2517, _2518));
        float _4516 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2531 = _2508 * _2508;
        float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
        float _2544 = (exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2545 = 1.0 - _2508;
        float _2555 = (0.5 / (((_2296 * ((_2522 * _2545) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2545) + _2508) * _2522))) * _2522;
        float _4527 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2483 = (((_2544 * cbLight._m0[_2493].x) * _2557) * _2558) + _2419;
        _2485 = (((_2544 * cbLight._m0[_2493].y) * _2557) * _2558) + _2420;
        _2487 = (((_2544 * cbLight._m0[_2493].z) * _2557) * _2558) + _2421;
    }
    float _2593;
    float _2595;
    float _2597;
    if (_2222)
    {
        _2593 = _2483;
        _2595 = _2485;
        _2597 = _2487;
    }
    else
    {
        uint _2604 = _2128 + 3u;
        uint _2608 = _2128 + 11u;
        float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2604].w)) * _930) * 0.949999988079071044921875);
        float _2623 = _2622 * _2622;
        float _2624 = cbLight._m0[_2604].x + _1006;
        float _2625 = cbLight._m0[_2604].y + _1007;
        float _2626 = cbLight._m0[_2604].z + _1008;
        float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
        float _2631 = _2630 * _2624;
        float _2632 = _2630 * _2625;
        float _2633 = _2630 * _2626;
        float _2634 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2604].xyz));
        float _4543 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2638 = dot(vec3(_927, _928, _929), vec3(_2631, _2632, _2633));
        float _4554 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2642 = dot(vec3(cbLight._m0[_2604].xyz), vec3(_2631, _2632, _2633));
        float _4565 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2646 = _2623 * _2623;
        float _2650 = ((_2641 * _2641) * (_2646 + (-1.0))) + 1.0;
        float _2659 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2660 = 1.0 - _2623;
        float _2670 = (0.5 / (((_2296 * ((_2637 * _2660) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2660) + _2623) * _2637))) * _2637;
        float _4576 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2672 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2646 / ((_2650 * _2650) * 3.141590118408203125));
        float _2673 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2593 = (((_2659 * cbLight._m0[_2608].x) * _2672) * _2673) + _2483;
        _2595 = (((_2659 * cbLight._m0[_2608].y) * _2672) * _2673) + _2485;
        _2597 = (((_2659 * cbLight._m0[_2608].z) * _2672) * _2673) + _2487;
    }
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_2126.y == 0u)
    {
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2748;
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2748;
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2748;
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.x;
        uint _2775 = uint((float(_2763.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1015) / _2764))) + floor(float(uint(cbSceneParam._m0[85u].x * _1014) / _2764)));
        float _2785 = (log2(_2751 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2786 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        uint _2789 = uint(isnan(14.0) ? _2786 : (isnan(_2786) ? 14.0 : min(_2786, 14.0)));
        uvec4 _2794 = texelFetch(g_lightClusterGridBuffer, int(((_2789 << 2u) + (_2775 << 6u)) >> 2u));
        uint _2795 = _2794.x;
        uint _2796 = _2763.z;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((((1u << ((_2796 >> 4u) & 15u)) + 4294967295u) & _2795) == 0u) || ((_2796 & 240u) == 0u))
        {
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
        }
        else
        {
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            uint _3047 = 0u;
            uint _3056;
            bool _3057;
            for (;;)
            {
                _3056 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                _3057 = _3056 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3057)
                {
                    frontier_phi_61_pred = _3041;
                    frontier_phi_61_pred_1 = _3046;
                    frontier_phi_61_pred_2 = _3045;
                    frontier_phi_61_pred_3 = _3044;
                    frontier_phi_61_pred_4 = _3043;
                    frontier_phi_61_pred_5 = _3042;
                }
                else
                {
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    uint _3171;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3056;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    for (;;)
                    {
                        uint _3175 = uint(findLSB(_3171)) + (_3047 << 5u);
                        uint _3172 = (_3171 + 4294967295u) & _3171;
                        uint _3177 = _3175 * 48u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3197 = (_3175 * 48u) + 4u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 3u)).x));
                        uint _3216 = (_3175 * 48u) + 8u;
                        vec3 _3227 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x));
                        float _3231 = _3191.x - _2749;
                        float _3232 = _3191.y - _2750;
                        float _3233 = _3191.z - _2751;
                        float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                        float _3237 = inversesqrt(_3234);
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3241 = dot(vec3(_1033, _1036, _1039), vec3(_3238, _3239, _3240));
                        float _3246 = 1.0 - (_3234 * _3191.w);
                        float _4602 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3248 = sqrt(_3234) * _3210.w;
                        float _3251 = 1.39999997615814208984375 / (_3248 + 1.39999997615814208984375);
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3241) + _3252;
                        float _3258 = _3248 * _3248;
                        float _3262 = ((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3247) / ((_3258 * 0.699999988079071044921875) + 1.0);
                        float _3266 = (-0.0) - _2749;
                        float _3267 = (-0.0) - _2750;
                        float _3268 = (-0.0) - _2751;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3283 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                        float _3284 = 1.0 - _1093;
                        float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                        float _3292 = _3291 * _3291;
                        float _3293 = _3292 * _3292;
                        float _3294 = _3273 + _3238;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3304 = dot(vec3(_1033, _1036, _1039), vec3(_3273, _3274, _3275));
                        float _4618 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3308 = dot(vec3(_1033, _1036, _1039), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                        float _4629 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                        float _3316 = _3251 * _3292;
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3241) + _3317;
                        float _4640 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3322 = 1.0 - _3292;
                        float _3332 = (0.5 / (((_3321 * ((_3307 * _3322) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3292) * _3307))) * _3321;
                        float _4651 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3343 = (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3315 * _3315) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125))) * _3247;
                        _3100 = (_3262 * _3210.x) + _3168;
                        _3101 = (_3262 * _3210.y) + _3169;
                        _3102 = (_3262 * _3210.z) + _3170;
                        _3097 = (_3343 * _3227.x) + _3165;
                        _3098 = (_3343 * _3227.y) + _3166;
                        _3099 = (_3343 * _3227.z) + _3167;
                        if (_3172 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3172;
                        }
                    }
                    frontier_phi_61_pred = _3097;
                    frontier_phi_61_pred_1 = _3102;
                    frontier_phi_61_pred_2 = _3101;
                    frontier_phi_61_pred_3 = _3100;
                    frontier_phi_61_pred_4 = _3099;
                    frontier_phi_61_pred_5 = _3098;
                }
                _2897 = frontier_phi_61_pred;
                _2907 = frontier_phi_61_pred_1;
                _2905 = frontier_phi_61_pred_2;
                _2903 = frontier_phi_61_pred_3;
                _2901 = frontier_phi_61_pred_4;
                _2899 = frontier_phi_61_pred_5;
                uint _3048 = _3047 + 1u;
                if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3041 = _2897;
                    _3042 = _2899;
                    _3043 = _2901;
                    _3044 = _2903;
                    _3045 = _2905;
                    _3046 = _2907;
                    _3047 = _3048;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
        }
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.z;
        uint _2913 = (_2911 >> 8u) & 15u;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        if (((4294967295u << _2913) & _2795) == 0u)
        {
            _3009 = _2896;
            _3011 = _2898;
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
            _3019 = _2906;
        }
        else
        {
            float _3034 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
            float _3035 = _3034 * _2749;
            float _3036 = _3034 * _2750;
            float _3037 = _3034 * _2751;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2913 < ((_2911 >> 12u) & 15u))
            {
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3148 = _2896;
                float _3149 = _2898;
                float _3150 = _2900;
                float _3151 = _2902;
                float _3152 = _2904;
                float _3153 = _2906;
                uint _3154 = _2913;
                uint _3163;
                bool _3164;
                for (;;)
                {
                    _3163 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                    _3164 = _3163 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3164)
                    {
                        frontier_phi_67_pred = _3151;
                        frontier_phi_67_pred_1 = _3152;
                        frontier_phi_67_pred_2 = _3153;
                        frontier_phi_67_pred_3 = _3150;
                        frontier_phi_67_pred_4 = _3149;
                        frontier_phi_67_pred_5 = _3148;
                    }
                    else
                    {
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3361 = _3148;
                        float _3362 = _3149;
                        float _3363 = _3150;
                        float _3364 = _3151;
                        float _3365 = _3152;
                        float _3366 = _3153;
                        uint _3367 = _3163;
                        uint _3368;
                        vec4 _3393;
                        float _3394;
                        vec4 _3409;
                        vec3 _3421;
                        vec4 _3436;
                        vec4 _3451;
                        float _3497;
                        bool _3498;
                        for (;;)
                        {
                            uint _3378 = ((_3154 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3367));
                            _3368 = (_3367 + 4294967295u) & _3367;
                            uint _3380 = _3378 * 40u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3394 = _3393.w;
                            uint _3396 = (_3378 * 40u) + 4u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3378 * 40u) + 8u;
                            _3421 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x));
                            uint _3423 = (_3378 * 40u) + 16u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3378 * 40u) + 20u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3378 * 40u) + 24u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3472 = (_3378 * 40u) + 28u;
                            vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3497 = fma(_2751, _3485.z, fma(_2750, _3485.y, _3485.x * _2749)) + _3485.w;
                            _3498 = !((fma(_2751, _3466.z, fma(_2750, _3466.y, _3466.x * _2749)) + _3466.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3498)
                            {
                                float _3525 = _3393.x - _2749;
                                float _3526 = _3393.y - _2750;
                                float _3527 = _3393.z - _2751;
                                float _3528 = dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527));
                                float _3531 = inversesqrt(_3528);
                                float _3532 = _3531 * _3525;
                                float _3533 = _3531 * _3526;
                                float _3534 = _3531 * _3527;
                                float _3538 = 1.0 - (_3528 / (_3394 * _3394));
                                float _4662 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3543 = sqrt(_3528) * _3409.w;
                                float _3545 = 1.39999997615814208984375 / (_3543 + 1.39999997615814208984375);
                                float _3546 = _3545 * _3545;
                                float _3549 = ((1.0 - _3546) * dot(vec3(_3532, _3533, _3534), vec3(_1033, _1036, _1039))) + _3546;
                                float _3552 = _3543 * _3543;
                                float _3556 = (fma(_2751, _3436.z, fma(_2750, _3436.y, _3436.x * _2749)) + _3436.w) / _3497;
                                float _3557 = (fma(_2751, _3451.z, fma(_2750, _3451.y, _3451.x * _2749)) + _3451.w) / _3497;
                                float _3561 = 1.0 - dot(vec2(_3556, _3557), vec2(_3556, _3557));
                                float _4678 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3563 = _3562 * (((isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0))) * _3539) / ((_3552 * 0.699999988079071044921875) + 1.0));
                                float _3575 = exp2(log2(1.0 / ((_3552 * 3.5) + 5.0)) * 0.25);
                                float _3576 = 1.0 - _1093;
                                float _3583 = sqrt(1.0 - ((1.0 - (_3576 * _3576)) * (1.0 - (_3575 * _3575))));
                                float _3584 = _3583 * _3583;
                                float _3585 = _3584 * _3584;
                                float _3586 = _3532 - _3035;
                                float _3587 = _3533 - _3036;
                                float _3588 = _3534 - _3037;
                                float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                                float _3596 = dot(vec3(_1033, _1036, _1039), vec3((-0.0) - _3035, (-0.0) - _3036, (-0.0) - _3037));
                                float _4689 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3600 = dot(vec3(_1033, _1036, _1039), vec3(_3592 * _3586, _3592 * _3587, _3592 * _3588));
                                float _4700 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3607 = ((_3603 * _3603) * (_3585 + (-1.0))) + 1.0;
                                float _3608 = _3545 * _3584;
                                float _3609 = _3608 * _3608;
                                float _3615 = ((1.0 - _3609) * dot(vec3(_1033, _1036, _1039), vec3(_3532, _3533, _3534))) + _3609;
                                float _4711 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3617 = 1.0 - _3584;
                                float _3627 = (0.5 / (((_3616 * ((_3599 * _3617) + _3584)) + 9.9999999392252902907785028219223e-09) + (((_3616 * _3617) + _3584) * _3599))) * _3616;
                                float _4722 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3637 = (_3562 * _3539) * (((_3585 * 3.1415927410125732421875) * (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) / ((_3607 * _3607) * ((_3552 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3637 * _3421.x;
                                frontier_phi_73_pred_1 = _3637 * _3421.y;
                                frontier_phi_73_pred_2 = _3563 * _3409.z;
                                frontier_phi_73_pred_3 = _3563 * _3409.y;
                                frontier_phi_73_pred_4 = _3563 * _3409.x;
                                frontier_phi_73_pred_5 = _3637 * _3421.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3641 = frontier_phi_73_pred;
                            _3642 = frontier_phi_73_pred_1;
                            _3646 = frontier_phi_73_pred_2;
                            _3645 = frontier_phi_73_pred_3;
                            _3644 = frontier_phi_73_pred_4;
                            _3643 = frontier_phi_73_pred_5;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            if (_3368 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3368;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3351;
                        frontier_phi_67_pred_1 = _3352;
                        frontier_phi_67_pred_2 = _3353;
                        frontier_phi_67_pred_3 = _3350;
                        frontier_phi_67_pred_4 = _3349;
                        frontier_phi_67_pred_5 = _3348;
                    }
                    _3016 = frontier_phi_67_pred;
                    _3018 = frontier_phi_67_pred_1;
                    _3020 = frontier_phi_67_pred_2;
                    _3014 = frontier_phi_67_pred_3;
                    _3012 = frontier_phi_67_pred_4;
                    _3010 = frontier_phi_67_pred_5;
                    uint _3155 = _3154 + 1u;
                    if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3148 = _3010;
                        _3149 = _3012;
                        _3150 = _3014;
                        _3151 = _3016;
                        _3152 = _3018;
                        _3153 = _3020;
                        _3154 = _3155;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3018;
                frontier_phi_55_56_ladder_1 = _3020;
                frontier_phi_55_56_ladder_2 = _3016;
                frontier_phi_55_56_ladder_3 = _3014;
                frontier_phi_55_56_ladder_4 = _3012;
                frontier_phi_55_56_ladder_5 = _3010;
            }
            else
            {
                frontier_phi_55_56_ladder = _2904;
                frontier_phi_55_56_ladder_1 = _2906;
                frontier_phi_55_56_ladder_2 = _2902;
                frontier_phi_55_56_ladder_3 = _2900;
                frontier_phi_55_56_ladder_4 = _2898;
                frontier_phi_55_56_ladder_5 = _2896;
            }
            _3009 = frontier_phi_55_56_ladder_5;
            _3011 = frontier_phi_55_56_ladder_4;
            _3013 = frontier_phi_55_56_ladder_3;
            _3015 = frontier_phi_55_56_ladder_2;
            _3017 = frontier_phi_55_56_ladder;
            _3019 = frontier_phi_55_56_ladder_1;
        }
        float _3024 = isnan(1.0) ? _1077 : (isnan(_1077) ? 1.0 : min(_1077, 1.0));
        _2808 = (_3024 * _3015) + _2260;
        _2810 = (_3024 * _3017) + _2262;
        _2812 = (_3024 * _3019) + _2264;
        _2814 = ((_3009 * 0.039999999105930328369140625) * _3024) + _2593;
        _2816 = ((_3011 * 0.039999999105930328369140625) * _3024) + _2595;
        _2818 = ((_3013 * 0.039999999105930328369140625) * _3024) + _2597;
    }
    else
    {
        _2808 = _2260;
        _2810 = _2262;
        _2812 = _2264;
        _2814 = _2593;
        _2816 = _2595;
        _2818 = _2597;
    }
    float _4738 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _4749 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _4760 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    uint _2838 = _278 + 6u;
    float _2846 = _1014 / cbSceneParam._m0[86u].x;
    float _2847 = _1015 / cbSceneParam._m0[86u].y;
    vec4 _2861 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, (log2((isnan(cbSceneParam._m0[77u].w) ? _948 : (isnan(_948) ? cbSceneParam._m0[77u].w : min(_948, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2863 = _2861.x;
    float _2864 = _2861.y;
    float _2865 = _2861.z;
    float _2866 = _2861.w;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_948 > cbSceneParam._m0[78u].w)
    {
        float _2921 = isnan(_948) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _948 : min(cbSceneParam._m0[80u].w, _948));
        float _2922 = _2921 / _948;
        float _2933 = _2922 * _999;
        float _2934 = _1000 * _2922;
        float _2935 = (-0.0) - _2934;
        float _2937 = _2922 * _1001;
        float _2939 = (cbSceneParam._m0[77u].w * _2935) / _2921;
        float _2940 = _2939 + cbSceneParam._m0[79u].w;
        float _2941 = cbSceneParam._m0[79u].w - _2934;
        float _2947 = sqrt(((_2933 * _2933) + (_2934 * _2934)) + (_2937 * _2937));
        float _2950 = (1.0 - (cbSceneParam._m0[77u].w / _2921)) * _2947;
        float _2955 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2957 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3110;
        if (abs((_2935 - _2939) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3110 = ((((_2940 > 0.0) ? exp2(_2955 * _2940) : (2.0 - exp2(_2957 * _2940))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2950;
        }
        else
        {
            float _3070 = 1.0 / cbSceneParam._m0[80u].x;
            float _3071 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : max(_2940, _2941));
            float _3072 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : min(_2940, _2941));
            float _3081 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : min(_3071, 0.0));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            _3110 = ((abs(_2947 / _2935) * cbSceneParam._m0[80u].y) * ((((_3081 - _3082) * 2.0) - ((exp2(_2955 * (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0)))) - exp2(_2955 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))))) * _3070)) - ((exp2(_2957 * _3081) - exp2(_2957 * _3082)) * _3070))) + (_2950 * cbSceneParam._m0[80u].z);
        }
        vec4 _3112 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, 1.0), 0.0);
        float _3121 = exp2((_3110 * (-1.44269502162933349609375)) * (1.0 - _3112.w));
        float _3122 = log2(_3121);
        float _3138 = log2(_2866);
        _2959 = (exp2(_3138 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].x)) * _3112.x) / cbSceneParam._m0[78u].x)) + _2863;
        _2961 = (exp2(_3138 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].y)) * _3112.y) / cbSceneParam._m0[78u].y)) + _2864;
        _2963 = (exp2(_3138 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].z)) * _3112.z) / cbSceneParam._m0[78u].z)) + _2865;
        _2965 = _3121 * _2866;
    }
    else
    {
        _2959 = _2863;
        _2961 = _2864;
        _2963 = _2865;
        _2965 = _2866;
    }
    float _2977 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2978 = _2977 == 3.0;
    float _2979 = log2(_2965);
    float _2986 = exp2(_2979 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2808 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1077))) + ((_2814 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1880)) * cbPerFrame._m0[3u].x));
    float _2987 = exp2(_2979 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2810 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1077))) + ((_2816 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1880)) * cbPerFrame._m0[3u].x));
    float _2988 = exp2(_2979 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2812 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1077))) + ((_2818 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1880)) * cbPerFrame._m0[3u].x));
    float _2997 = (_2977 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2997 * (_2978 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2959)));
    SV_Target.y = _2997 * (_2978 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2961)));
    SV_Target.z = _2997 * (_2978 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.w = cbInstanceData._m0[_2838].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2838].w;
}


