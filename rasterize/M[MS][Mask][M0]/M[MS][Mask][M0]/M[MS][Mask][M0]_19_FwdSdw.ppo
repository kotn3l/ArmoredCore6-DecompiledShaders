#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1362;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3951 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3962 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3973 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _368 = _363.x * cbMtdParam._m0[11u].x;
    float _369 = _363.y * cbMtdParam._m0[11u].y;
    float _370 = _363.z * cbMtdParam._m0[11u].z;
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[24u].z) + _454) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3984 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _482 = (_337.x * cbMtdParam._m0[9u].x) * ((_472 * ((_389.x * cbMtdParam._m0[12u].x) - _368)) + _368);
    float _483 = (_337.y * cbMtdParam._m0[9u].y) * ((_472 * ((_389.y * cbMtdParam._m0[12u].y) - _369)) + _369);
    float _484 = (_337.z * cbMtdParam._m0[9u].z) * ((_472 * ((_389.z * cbMtdParam._m0[12u].z) - _370)) + _370);
    float _488 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _482;
    float _491 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _483;
    float _494 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _484;
    float _502 = (((_482 - _488) * (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) + _488) * 4.55000019073486328125;
    float _504 = (((_483 - _491) * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) + _491) * 4.55000019073486328125;
    float _506 = (((_484 - _494) * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) + _494) * 4.55000019073486328125;
    vec4 _524 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _568 = _566.x;
    float _569 = _566.y;
    float _570 = _566.z;
    float _579 = ((_549.z - _570) * _472) + _570;
    float _582 = ((((_549.x - _568) * _472) + _568) * 2.0) + (-1.0);
    float _583 = ((((_549.y - _569) * _472) + _569) * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3995 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _589 = sqrt(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _632 = _630.x;
    float _633 = 1.0 - _632;
    float _639 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _642 = ((isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : min(_639, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _651 = (_642 - ((((((_632 - _633) * cbMtdParam._m0[24u].w) + _633) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _642))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4016 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _659 = (_652 * (cbMtdParam._m0[17u].x - _502)) + _502;
    float _660 = (_652 * (cbMtdParam._m0[17u].y - _504)) + _504;
    float _661 = (_652 * (cbMtdParam._m0[17u].z - _506)) + _506;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _675 = _673.x;
    float _676 = 1.0 - _675;
    float _701 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_675 - _676) * cbMtdParam._m0[24u].y) + _676) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4027 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _710 = ((((cbMtdParam._m0[10u].x - _659) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _702) + _659;
    float _711 = ((((cbMtdParam._m0[10u].y - _660) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _702) + _660;
    float _712 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _661)) * _702) + _661;
    float _717 = (((_524.z - _579) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _579;
    float _721 = ((_605.z - _717) * cbMtdParam._m0[19u].w) + _717;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _742 = (_735.x * 2.0) + (-1.0);
    float _743 = (_735.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _4038 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _752 = (_652 * (_735.z - _721)) + _721;
    float _755 = ((cbMtdParam._m0[23u].y - _752) * _702) + _752;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _780 = (_774.x * 2.0) + (-1.0);
    float _781 = (_774.y * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _4049 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _796 = (_582 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_524.x * 2.0) + (-1.0)))) + (((_605.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _797 = (_583 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_524.y * 2.0) + (-1.0)))) + (((_605.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _809 = (((_742 - _796) + (cbMtdParam._m0[21u].x * _796)) * _652) + _796;
    float _810 = (((_743 - _797) + (cbMtdParam._m0[21u].x * _797)) * _652) + _797;
    float _811 = (_652 * (sqrt(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) - _589)) + _589;
    float _822 = (((_780 - _809) + (_809 * cbMtdParam._m0[22u].z)) * _702) + _809;
    float _823 = (((_781 - _810) + (_810 * cbMtdParam._m0[22u].z)) * _702) + _810;
    float _824 = ((sqrt(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) - _811) * _702) + _811;
    float _828 = cbMtdParam._m0[22u].x + _605.w;
    float _831 = fma(_824, _249 * NORMAL.x, fma(_823, _256 * TANGENT.x, (_242 * _234) * _822));
    float _834 = fma(_824, _249 * NORMAL.y, fma(_823, _256 * TANGENT.y, (_242 * _235) * _822));
    float _837 = fma(_824, _249 * NORMAL.z, fma(_823, _256 * TANGENT.z, (_242 * _236) * _822));
    float _841 = inversesqrt(dot(vec3(_831, _834, _837), vec3(_831, _834, _837)));
    float _842 = _841 * _831;
    float _843 = _841 * _834;
    float _844 = _841 * _837;
    float _4060 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _845 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4082 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4093 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4104 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _863 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _913 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _903);
    float _914 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _903);
    float _915 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _903);
    float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
    float _920 = _913 * _919;
    float _921 = _914 * _919;
    float _922 = _915 * _919;
    float _928 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _929 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _947 = fma(_844, cbSceneParam._m0[5u].z, fma(_843, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _842));
    float _950 = fma(_844, cbSceneParam._m0[6u].z, fma(_843, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _842));
    float _953 = fma(_844, cbSceneParam._m0[7u].z, fma(_843, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _842));
    uint _967 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _973 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * cbInstanceData._m0[_967].x;
    float _974 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * cbInstanceData._m0[_967].y;
    float _975 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * cbInstanceData._m0[_967].z;
    float _4115 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    vec4 _987 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _928, cbSceneParam._m0[86u].y * _929));
    float _991 = ((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * TEXCOORD_5.w) * _987.x;
    float _992 = dot(vec3(_842, _843, _844), vec3(_920, _921, _922));
    float _995 = _992 * 2.0;
    float _999 = (_995 * _842) - _920;
    float _1000 = (_995 * _843) - _921;
    float _1001 = (_995 * _844) - _922;
    float _1005 = abs(dot(vec3(_920, _921, _922), vec3(_842, _843, _844)));
    float _4148 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1007 = sqrt(_845);
    float _1020 = exp2((_1007 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1007 * 3.0));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1361;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1086 = fma(_1060, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052));
        float _1090 = fma(_1060, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052));
        float _1094 = fma(_1060, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052));
        float _1119 = _1052 + _842;
        float _1120 = _1056 + _843;
        float _1121 = _1060 + _844;
        float _1131 = fma(_1121, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119)) - _1086;
        float _1132 = fma(_1121, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119)) - _1090;
        float _1133 = fma(_1121, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119)) - _1094;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1086 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1090 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[34u].z) + ((((((_1094 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1189 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1155.x + (-0.5));
        float _1191 = _1189 * (_1155.y + (-0.5));
        float _1192 = _1189 * (_1155.z + (-0.5));
        float _1199 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1162.x + (-0.5));
        float _1201 = _1199 * (_1162.y + (-0.5));
        float _1202 = _1199 * (_1162.z + (-0.5));
        float _1209 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1169.x + (-0.5));
        float _1211 = _1209 * (_1169.y + (-0.5));
        float _1212 = _1209 * (_1169.z + (-0.5));
        float _1219 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1176.x + (-0.5));
        float _1221 = _1219 * (_1176.y + (-0.5));
        float _1222 = _1219 * (_1176.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1243 = (dot(vec3(_842, _843, _844), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1253 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4196 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1255 + 1.0))) + _1260) * _1223;
        float _1270 = _1191 * 0.5;
        float _1271 = _1201 * 0.5;
        float _1272 = _1211 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_842, _843, _844), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4229 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1297 + 1.0))) + _1302) * _1224;
        float _1312 = _1192 * 0.5;
        float _1313 = _1202 * 0.5;
        float _1314 = _1212 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_842, _843, _844), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4262 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1339 + 1.0))) + _1344) * _1225;
        _1361 = _1192;
        _1363 = _1191;
        _1364 = _1190;
        _1365 = _1202;
        _1366 = _1201;
        _1367 = _1200;
        _1368 = _1212;
        _1369 = _1211;
        _1370 = _1210;
        _1371 = _1225;
        _1372 = _1224;
        _1373 = _1223;
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1362;
        _1363 = _1362;
        _1364 = _1362;
        _1365 = _1362;
        _1366 = _1362;
        _1367 = _1362;
        _1368 = _1362;
        _1369 = _1362;
        _1370 = _1362;
        _1371 = _1362;
        _1372 = _1362;
        _1373 = _1362;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1401 = fma(_1060, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1052));
        float _1405 = fma(_1060, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1052));
        float _1409 = fma(_1060, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1052));
        float _1432 = _1052 + _842;
        float _1433 = _1056 + _843;
        float _1434 = _1060 + _844;
        float _1444 = fma(_1434, cbModelParam._m0[30u].z, fma(_1433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432)) - _1401;
        float _1445 = fma(_1434, cbModelParam._m0[31u].z, fma(_1433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432)) - _1405;
        float _1446 = fma(_1434, cbModelParam._m0[32u].z, fma(_1433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432)) - _1409;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1401 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1405 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[35u].z) + ((((((_1409 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1500 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1467.x + (-0.5));
        float _1502 = _1500 * (_1467.y + (-0.5));
        float _1503 = _1500 * (_1467.z + (-0.5));
        float _1510 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1474.x + (-0.5));
        float _1512 = _1510 * (_1474.y + (-0.5));
        float _1513 = _1510 * (_1474.z + (-0.5));
        float _1520 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1481.x + (-0.5));
        float _1522 = _1520 * (_1481.y + (-0.5));
        float _1523 = _1520 * (_1481.z + (-0.5));
        float _1530 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1488.x + (-0.5));
        float _1532 = _1530 * (_1488.y + (-0.5));
        float _1533 = _1530 * (_1488.z + (-0.5));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = _1501 * 0.5;
        float _1538 = _1511 * 0.5;
        float _1539 = _1521 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_842, _843, _844), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4325 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1564 + 1.0))) + _1569) * _1534;
        float _1579 = _1502 * 0.5;
        float _1580 = _1512 * 0.5;
        float _1581 = _1522 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_842, _843, _844), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4358 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1606 + 1.0))) + _1611) * _1535;
        float _1621 = _1503 * 0.5;
        float _1622 = _1513 * 0.5;
        float _1623 = _1523 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_842, _843, _844), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4391 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1648 + 1.0))) + _1653) * _1536;
        _1670 = _1503;
        _1671 = _1502;
        _1672 = _1501;
        _1673 = _1513;
        _1674 = _1512;
        _1675 = _1511;
        _1676 = _1523;
        _1677 = _1522;
        _1678 = _1521;
        _1679 = _1536;
        _1680 = _1535;
        _1681 = _1534;
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
    }
    else
    {
        _1670 = _1362;
        _1671 = _1362;
        _1672 = _1362;
        _1673 = _1362;
        _1674 = _1362;
        _1675 = _1362;
        _1676 = _1362;
        _1677 = _1362;
        _1678 = _1362;
        _1679 = _1362;
        _1680 = _1362;
        _1681 = _1362;
        _1682 = 0.0;
        _1683 = 0.0;
        _1684 = 0.0;
    }
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1374)) + _1374;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1375)) + _1375;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1376)) + _1376;
    float _1717 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1694));
    float _1738 = _999 * 0.5;
    float _1739 = _1000 * 0.5;
    float _1740 = _1001 * 0.5;
    float _1741 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1744 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1747 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1781;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1754 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1361, _1365, _1368, _1371));
        float _1758 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1762 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1769 = dot(vec4(cbModelParam._m0[39u]), vec4(_1738, _1739, _1740, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1792;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1783 = dot(vec4(cbModelParam._m0[40u]), vec4(_1738, _1739, _1740, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1796 = (_1792 * cbModelParam._m0[1u].x) + (_1781 * (1.0 - cbModelParam._m0[1u].x));
    float _1806 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _845);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1806 : min(cbModelParam._m0[25u].z, _1806));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1855 = fma(_1060, cbModelParam._m0[13u].z, fma(_1056, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1052)) + cbModelParam._m0[13u].w;
        float _1859 = fma(_1060, cbModelParam._m0[14u].z, fma(_1056, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1052)) + cbModelParam._m0[14u].w;
        float _1863 = fma(_1060, cbModelParam._m0[15u].z, fma(_1056, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1052)) + cbModelParam._m0[15u].w;
        float _1866 = fma(_1001, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _999));
        float _1869 = fma(_1001, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _999));
        float _1872 = fma(_1001, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _999));
        float _1900;
        if (_1866 > 0.0)
        {
            _1900 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1900 = frontier_phi_14_12_ladder;
        }
        float _2070;
        if (_1869 > 0.0)
        {
            _2070 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2070 = frontier_phi_23_19_ladder;
        }
        float _2365;
        if (_1872 > 0.0)
        {
            _2365 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2365 = frontier_phi_35_30_ladder;
        }
        float _2367 = isnan(_2070) ? _1900 : (isnan(_1900) ? _2070 : min(_1900, _2070));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1866) + _1855;
        float _2373 = (_2368 * _1869) + _1859;
        float _2374 = (_2368 * _1872) + _1863;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1807);
            frontier_phi_13_35_ladder = _2519.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2519.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2519.x * cbModelParam._m0[1u].y;
        }
        _1888 = frontier_phi_13_35_ladder_2;
        _1890 = frontier_phi_13_35_ladder_1;
        _1892 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_999, _1000, _1001), _1807);
        _1888 = _1876.x * cbModelParam._m0[1u].y;
        _1890 = _1876.y * cbModelParam._m0[1u].y;
        _1892 = _1876.z * cbModelParam._m0[1u].y;
    }
    float _1896 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _845);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1896 : min(cbModelParam._m0[25u].w, _1896));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1951 = fma(_1060, cbModelParam._m0[21u].z, fma(_1056, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1052)) + cbModelParam._m0[21u].w;
        float _1955 = fma(_1060, cbModelParam._m0[22u].z, fma(_1056, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1052)) + cbModelParam._m0[22u].w;
        float _1959 = fma(_1060, cbModelParam._m0[23u].z, fma(_1056, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1052)) + cbModelParam._m0[23u].w;
        float _1962 = fma(_1001, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _999));
        float _1965 = fma(_1001, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _999));
        float _1968 = fma(_1001, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _999));
        float _2075;
        if (_1962 > 0.0)
        {
            _2075 = abs((1.0 - _1951) / _1962);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1951 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2075 = frontier_phi_25_21_ladder;
        }
        float _2392;
        if (_1965 > 0.0)
        {
            _2392 = abs((1.0 - _1955) / _1965);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1955 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2392 = frontier_phi_37_32_ladder;
        }
        float _2719;
        if (_1968 > 0.0)
        {
            _2719 = abs((1.0 - _1959) / _1968);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1959 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2719 = frontier_phi_47_44_ladder;
        }
        float _2721 = isnan(_2392) ? _2075 : (isnan(_2075) ? _2392 : min(_2075, _2392));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _1962) + _1951;
        float _2727 = (_2722 * _1965) + _1955;
        float _2728 = (_2722 * _1968) + _1959;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2730 = (-1.0) - _2729;
        float _2732 = _2729 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2728 > _2732) || ((_2728 < _2730) || ((_2727 > _2732) || ((_2727 < _2730) || ((_2726 < _2730) || (_2726 > _2732))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2728, cbModelParam._m0[17u].z, fma(_2727, cbModelParam._m0[17u].y, _2726 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2728, cbModelParam._m0[18u].z, fma(_2727, cbModelParam._m0[18u].y, _2726 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2728, cbModelParam._m0[19u].z, fma(_2727, cbModelParam._m0[19u].y, _2726 * cbModelParam._m0[19u].x))), _1897);
            frontier_phi_22_47_ladder = _2846.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2846.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2846.x * cbModelParam._m0[1u].z;
        }
        _1987 = frontier_phi_22_47_ladder_2;
        _1989 = frontier_phi_22_47_ladder_1;
        _1991 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_999, _1000, _1001), _1897);
        _1987 = _1971.x * cbModelParam._m0[1u].z;
        _1989 = _1971.y * cbModelParam._m0[1u].z;
        _1991 = _1971.z * cbModelParam._m0[1u].z;
    }
    float _2003 = ((((1.0 - _1020) * ((_1007 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1020 * _1007)) * _991;
    float _2004 = _2003 * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2005 = _2003 * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2006 = _2003 * ((cbModelParam._m0[1u].w * (_1991 - _1892)) + _1892);
    float _2009 = fma(_2006, cbSceneParam._m0[89u].z, fma(_2005, cbSceneParam._m0[89u].y, _2004 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_2006, cbSceneParam._m0[90u].z, fma(_2005, cbSceneParam._m0[90u].y, _2004 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_2006, cbSceneParam._m0[91u].z, fma(_2005, cbSceneParam._m0[91u].y, _2004 * cbSceneParam._m0[91u].x));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2062 = _2049 / _2061;
    float _2063 = _2053 / _2061;
    float _2064 = _2057 / _2061;
    float _2211;
    float _2212;
    float _2213;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2091 = ((uint(_2064 > cbSceneParam._m0[59u].y) + uint(_2064 > cbSceneParam._m0[59u].x)) + uint(_2064 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2092 = _2091 + 43u;
        uint _2100 = _2091 + 44u;
        uint _2108 = _2091 + 45u;
        uint _2116 = _2091 + 46u;
        float _2127 = fma(_2061, cbSceneParam._m0[_2092].w, fma(_2057, cbSceneParam._m0[_2092].z, fma(_2053, cbSceneParam._m0[_2092].y, _2049 * cbSceneParam._m0[_2092].x)));
        float _2131 = fma(_2061, cbSceneParam._m0[_2100].w, fma(_2057, cbSceneParam._m0[_2100].z, fma(_2053, cbSceneParam._m0[_2100].y, _2049 * cbSceneParam._m0[_2100].x)));
        float _2139 = fma(_2061, cbSceneParam._m0[_2116].w, fma(_2057, cbSceneParam._m0[_2116].z, fma(_2053, cbSceneParam._m0[_2116].y, _2049 * cbSceneParam._m0[_2116].x)));
        float _2144 = cbSceneParam._m0[33u].z * _2139;
        float _2146 = cbSceneParam._m0[33u].w * _2139;
        float _2149 = fma(_2061, cbSceneParam._m0[_2108].w, fma(_2057, cbSceneParam._m0[_2108].z, fma(_2053, cbSceneParam._m0[_2108].y, _2049 * cbSceneParam._m0[_2108].x))) / _2139;
        float _2197 = (cbSceneParam._m0[33u].x - sqrt(((_2063 * _2063) + (_2062 * _2062)) + (_2064 * _2064))) * cbSceneParam._m0[33u].y;
        float _4517 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2204 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2144 + _2127) / _2139, (_2146 + _2131) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 + _2127) / _2139, (_2131 - _2144) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 - _2144) / _2139, (_2131 - _2146) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 - _2146) / _2139, (_2144 + _2131) / _2139), _2149), 0.0)).x), vec4(0.25)));
        _2211 = 1.0 - (_2204 * cbSceneParam._m0[34u].x);
        _2212 = 1.0 - (_2204 * cbSceneParam._m0[34u].y);
        _2213 = 1.0 - (_2204 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2211 = 1.0;
        _2212 = 1.0;
        _2213 = 1.0;
    }
    float _2277;
    float _2279;
    float _2281;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2265 = fma(_2061, cbSceneParam._m0[63u].w, fma(_2057, cbSceneParam._m0[63u].z, fma(_2053, cbSceneParam._m0[63u].y, _2049 * cbSceneParam._m0[63u].x)));
        float _2266 = fma(_2061, cbSceneParam._m0[60u].w, fma(_2057, cbSceneParam._m0[60u].z, fma(_2053, cbSceneParam._m0[60u].y, _2049 * cbSceneParam._m0[60u].x))) / _2265;
        float _2267 = fma(_2061, cbSceneParam._m0[61u].w, fma(_2057, cbSceneParam._m0[61u].z, fma(_2053, cbSceneParam._m0[61u].y, _2049 * cbSceneParam._m0[61u].x))) / _2265;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2266 >= cbSceneParam._m0[64u].x) && (_2267 >= cbSceneParam._m0[64u].y)) && (_2266 <= cbSceneParam._m0[64u].z)) && (_2267 <= cbSceneParam._m0[64u].w))
        {
            float _2405 = fma(_2061, cbSceneParam._m0[62u].w, fma(_2057, cbSceneParam._m0[62u].z, fma(_2053, cbSceneParam._m0[62u].y, _2049 * cbSceneParam._m0[62u].x))) / _2265;
            float _2409 = isnan(cbSceneParam._m0[41u].w) ? _2405 : (isnan(_2405) ? cbSceneParam._m0[41u].w : max(_2405, cbSceneParam._m0[41u].w));
            float _2452 = (cbSceneParam._m0[33u].x - sqrt(((_2063 * _2063) + (_2062 * _2062)) + (_2064 * _2064))) * cbSceneParam._m0[33u].y;
            float _4533 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
            float _2459 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2266, cbSceneParam._m0[33u].w + _2267), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2266, _2267 - cbSceneParam._m0[33u].z), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2266 - cbSceneParam._m0[33u].z, _2267 - cbSceneParam._m0[33u].w), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2266 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2267), _2409), 0.0)).x), vec4(0.25)));
            float _2463 = 1.0 - (_2459 * cbSceneParam._m0[34u].x);
            float _2464 = 1.0 - (_2459 * cbSceneParam._m0[34u].y);
            float _2465 = 1.0 - (_2459 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2465) ? _2213 : (isnan(_2213) ? _2465 : min(_2213, _2465));
            frontier_phi_34_33_ladder_1 = isnan(_2464) ? _2212 : (isnan(_2212) ? _2464 : min(_2212, _2464));
            frontier_phi_34_33_ladder_2 = isnan(_2463) ? _2211 : (isnan(_2211) ? _2463 : min(_2211, _2463));
        }
        else
        {
            frontier_phi_34_33_ladder = _2213;
            frontier_phi_34_33_ladder_1 = _2212;
            frontier_phi_34_33_ladder_2 = _2211;
        }
        _2277 = frontier_phi_34_33_ladder_2;
        _2279 = frontier_phi_34_33_ladder_1;
        _2281 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2277 = _2211;
        _2279 = _2212;
        _2281 = _2213;
    }
    uvec4 _2286 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2288 = _2286.x * 14u;
    uint _2289 = _2288 + 13u;
    float _2296 = _991 + (-1.0);
    float _2301 = (cbLight._m0[_2289].x * _2296) + 1.0;
    float _2302 = (cbLight._m0[_2289].y * _2296) + 1.0;
    float _2303 = (cbLight._m0[_2289].z * _2296) + 1.0;
    float _2304 = (cbLight._m0[_2289].w * _2296) + 1.0;
    uint _2305 = _2288 + 5u;
    float _2311 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2315 = _2288 + 4u;
    float _2324 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2328 = _2288 | 1u;
    float _2339 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_842, _843, _844));
    float _2342 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_842, _843, _844));
    float _4569 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _4580 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2347 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * 0.3183098733425140380859375;
    float _2349 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * 0.3183098733425140380859375;
    float _2356 = ((cbLight._m0[_2305].x * _2311) * _2349) + (((cbLight._m0[_2315].x * _2277) * _2324) * _2347);
    float _2357 = ((_2311 * cbLight._m0[_2305].y) * _2349) + (((cbLight._m0[_2315].y * _2279) * _2324) * _2347);
    float _2358 = ((_2311 * cbLight._m0[_2305].z) * _2349) + (((cbLight._m0[_2315].z * _2281) * _2324) * _2347);
    uvec4 _2362 = floatBitsToUint(cbLight._m0[_2288 + 12u]);
    bool _2364 = _2362.x == 0u;
    float _2466;
    float _2468;
    float _2470;
    if (_2364)
    {
        _2466 = _2356;
        _2468 = _2357;
        _2470 = _2358;
    }
    else
    {
        uint _2474 = _2288 + 6u;
        float _2490 = (dot(vec3(cbLight._m0[_2288 + 2u].xyz), vec3(_842, _843, _844)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4591 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2493 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2466 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2356;
        _2468 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2357;
        _2470 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2358;
    }
    bool _2473 = _2362.y == 0u;
    float _2528;
    float _2530;
    float _2532;
    if (_2473)
    {
        _2528 = _2466;
        _2530 = _2468;
        _2532 = _2470;
    }
    else
    {
        uint _2690 = _2288 + 7u;
        float _2706 = (dot(vec3(cbLight._m0[_2288 + 3u].xyz), vec3(_842, _843, _844)) * 0.5) + 0.5;
        float _2707 = _2706 * _2706;
        float _4607 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2708 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2709 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2528 = (((cbLight._m0[_2690].x * 0.3183098733425140380859375) * _2708) * _2709) + _2466;
        _2530 = (((cbLight._m0[_2690].y * 0.3183098733425140380859375) * _2708) * _2709) + _2468;
        _2532 = (((cbLight._m0[_2690].z * 0.3183098733425140380859375) * _2708) * _2709) + _2470;
    }
    uint _2535 = _2288 + 8u;
    float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _845) * 0.949999988079071044921875);
    float _2549 = _2548 * _2548;
    float _2550 = cbLight._m0[_2288].x + _920;
    float _2551 = cbLight._m0[_2288].y + _921;
    float _2552 = cbLight._m0[_2288].z + _922;
    float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
    float _2557 = _2556 * _2550;
    float _2558 = _2556 * _2551;
    float _2559 = _2556 * _2552;
    float _2560 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2288].xyz));
    float _4623 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _4634 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _2564 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2565 = dot(vec3(_842, _843, _844), vec3(_2557, _2558, _2559));
    float _4645 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2569 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2557, _2558, _2559));
    float _4656 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = _2549 * _2549;
    float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
    float _2588 = (exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2589 = 1.0 - _2549;
    float _2600 = (0.5 / (((_2564 * ((_2563 * _2589) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2589) + _2549) * _2563))) * _2563;
    float _4667 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2602 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
    uint _2616 = _2288 + 9u;
    float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _845) * 0.949999988079071044921875);
    float _2628 = _2627 * _2627;
    float _2629 = cbLight._m0[_2328].x + _920;
    float _2630 = cbLight._m0[_2328].y + _921;
    float _2631 = cbLight._m0[_2328].z + _922;
    float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
    float _2636 = _2635 * _2629;
    float _2637 = _2635 * _2630;
    float _2638 = _2635 * _2631;
    float _2639 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2328].xyz));
    float _4678 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2643 = dot(vec3(_842, _843, _844), vec3(_2636, _2637, _2638));
    float _4689 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2646 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2647 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2636, _2637, _2638));
    float _4700 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2651 = _2628 * _2628;
    float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
    float _2664 = (exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2665 = 1.0 - _2628;
    float _2675 = (0.5 / (((_2564 * ((_2642 * _2665) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2665) + _2628) * _2642))) * _2642;
    float _4711 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2677 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
    float _2687 = (((_2664 * cbLight._m0[_2616].x) * _2677) * _2311) + ((((cbLight._m0[_2535].x * _2277) * _2588) * _2602) * _2324);
    float _2688 = (((_2664 * cbLight._m0[_2616].y) * _2677) * _2311) + ((((cbLight._m0[_2535].y * _2279) * _2588) * _2602) * _2324);
    float _2689 = (((_2664 * cbLight._m0[_2616].z) * _2677) * _2311) + ((((cbLight._m0[_2535].z * _2281) * _2588) * _2602) * _2324);
    float _2745;
    float _2747;
    float _2749;
    if (_2364)
    {
        _2745 = _2687;
        _2747 = _2688;
        _2749 = _2689;
    }
    else
    {
        uint _2751 = _2288 + 2u;
        uint _2755 = _2288 + 10u;
        float _2769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2751].w)) * _845) * 0.949999988079071044921875);
        float _2770 = _2769 * _2769;
        float _2771 = cbLight._m0[_2751].x + _920;
        float _2772 = cbLight._m0[_2751].y + _921;
        float _2773 = cbLight._m0[_2751].z + _922;
        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
        float _2778 = _2777 * _2771;
        float _2779 = _2777 * _2772;
        float _2780 = _2777 * _2773;
        float _2781 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2751].xyz));
        float _4722 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2785 = dot(vec3(_842, _843, _844), vec3(_2778, _2779, _2780));
        float _4733 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2789 = dot(vec3(cbLight._m0[_2751].xyz), vec3(_2778, _2779, _2780));
        float _4744 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2793 = _2770 * _2770;
        float _2797 = ((_2788 * _2788) * (_2793 + (-1.0))) + 1.0;
        float _2806 = (exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2807 = 1.0 - _2770;
        float _2817 = (0.5 / (((_2564 * ((_2784 * _2807) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2807) + _2770) * _2784))) * _2784;
        float _4755 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2819 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2793 / ((_2797 * _2797) * 3.141590118408203125));
        float _2820 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2745 = (((_2806 * cbLight._m0[_2755].x) * _2819) * _2820) + _2687;
        _2747 = (((_2806 * cbLight._m0[_2755].y) * _2819) * _2820) + _2688;
        _2749 = (((_2806 * cbLight._m0[_2755].z) * _2819) * _2820) + _2689;
    }
    float _2851;
    float _2853;
    float _2855;
    if (_2473)
    {
        _2851 = _2745;
        _2853 = _2747;
        _2855 = _2749;
    }
    else
    {
        uint _2862 = _2288 + 3u;
        uint _2866 = _2288 + 11u;
        float _2880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2862].w)) * _845) * 0.949999988079071044921875);
        float _2881 = _2880 * _2880;
        float _2882 = cbLight._m0[_2862].x + _920;
        float _2883 = cbLight._m0[_2862].y + _921;
        float _2884 = cbLight._m0[_2862].z + _922;
        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
        float _2889 = _2888 * _2882;
        float _2890 = _2888 * _2883;
        float _2891 = _2888 * _2884;
        float _2892 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2862].xyz));
        float _4771 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2895 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2896 = dot(vec3(_842, _843, _844), vec3(_2889, _2890, _2891));
        float _4782 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2899 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2900 = dot(vec3(cbLight._m0[_2862].xyz), vec3(_2889, _2890, _2891));
        float _4793 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2904 = _2881 * _2881;
        float _2908 = ((_2899 * _2899) * (_2904 + (-1.0))) + 1.0;
        float _2917 = (exp2(log2(1.0 - (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2918 = 1.0 - _2881;
        float _2928 = (0.5 / (((_2564 * ((_2895 * _2918) + _2881)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2918) + _2881) * _2895))) * _2895;
        float _4804 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2930 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2904 / ((_2908 * _2908) * 3.141590118408203125));
        float _2931 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2851 = (((_2917 * cbLight._m0[_2866].x) * _2930) * _2931) + _2745;
        _2853 = (((_2917 * cbLight._m0[_2866].y) * _2930) * _2931) + _2747;
        _2855 = (((_2917 * cbLight._m0[_2866].z) * _2930) * _2931) + _2749;
    }
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    if (_2286.y == 0u)
    {
        uvec4 _2952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2953 = _2952.x;
        uint _2964 = uint((float(_2952.y) * floor(float(uint(cbSceneParam._m0[85u].y * _929) / _2953))) + floor(float(uint(cbSceneParam._m0[85u].x * _928) / _2953)));
        float _2974 = (log2(_2064 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2975 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        uint _2978 = uint(isnan(14.0) ? _2975 : (isnan(_2975) ? 14.0 : min(_2975, 14.0)));
        uvec4 _2983 = texelFetch(g_lightClusterGridBuffer, int(((_2978 << 2u) + (_2964 << 6u)) >> 2u));
        uint _2984 = _2983.x;
        uint _2985 = _2952.z;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        if (((((1u << ((_2985 >> 4u) & 15u)) + 4294967295u) & _2984) == 0u) || ((_2985 & 240u) == 0u))
        {
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
        }
        else
        {
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3075;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            uint _3215 = 0u;
            uint _3224;
            bool _3225;
            for (;;)
            {
                _3224 = texelFetch(g_lightClassification, int((((_2978 << 5u) + (_2964 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                _3225 = _3224 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3225)
                {
                    frontier_phi_66_pred = _3214;
                    frontier_phi_66_pred_1 = _3213;
                    frontier_phi_66_pred_2 = _3212;
                    frontier_phi_66_pred_3 = _3211;
                    frontier_phi_66_pred_4 = _3210;
                    frontier_phi_66_pred_5 = _3209;
                }
                else
                {
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    uint _3339;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3214;
                    _3339 = _3224;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    for (;;)
                    {
                        uint _3343 = uint(findLSB(_3339)) + (_3215 << 5u);
                        uint _3340 = (_3339 + 4294967295u) & _3339;
                        uint _3345 = _3343 * 48u;
                        vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3345)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 3u)).x));
                        uint _3365 = (_3343 * 48u) + 4u;
                        vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 3u)).x));
                        uint _3384 = (_3343 * 48u) + 8u;
                        vec3 _3395 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x));
                        float _3399 = _3359.x - _2062;
                        float _3400 = _3359.y - _2063;
                        float _3401 = _3359.z - _2064;
                        float _3402 = dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401));
                        float _3405 = inversesqrt(_3402);
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3409 = dot(vec3(_947, _950, _953), vec3(_3406, _3407, _3408));
                        float _3414 = 1.0 - (_3402 * _3359.w);
                        float _4830 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3415 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3416 = sqrt(_3402) * _3378.w;
                        float _3419 = 1.39999997615814208984375 / (_3416 + 1.39999997615814208984375);
                        float _3420 = _3419 * _3419;
                        float _3423 = ((1.0 - _3420) * _3409) + _3420;
                        float _3426 = _3416 * _3416;
                        float _3430 = ((isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0))) * _3415) / ((_3426 * 0.699999988079071044921875) + 1.0);
                        float _3434 = (-0.0) - _2062;
                        float _3435 = (-0.0) - _2063;
                        float _3436 = (-0.0) - _2064;
                        float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                        float _3441 = _3440 * _3434;
                        float _3442 = _3440 * _3435;
                        float _3443 = _3440 * _3436;
                        float _3450 = exp2(log2(1.0 / ((_3426 * 3.5) + 5.0)) * 0.25);
                        float _3451 = 1.0 - _1007;
                        float _3458 = sqrt(1.0 - ((1.0 - (_3451 * _3451)) * (1.0 - (_3450 * _3450))));
                        float _3459 = _3458 * _3458;
                        float _3460 = _3459 * _3459;
                        float _3461 = _3441 + _3406;
                        float _3462 = _3442 + _3407;
                        float _3463 = _3443 + _3408;
                        float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                        float _3471 = dot(vec3(_947, _950, _953), vec3(_3441, _3442, _3443));
                        float _4846 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3475 = dot(vec3(_947, _950, _953), vec3(_3467 * _3461, _3467 * _3462, _3467 * _3463));
                        float _4857 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3478 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                        float _3482 = ((_3478 * _3478) * (_3460 + (-1.0))) + 1.0;
                        float _3483 = _3419 * _3459;
                        float _3484 = _3483 * _3483;
                        float _3487 = ((1.0 - _3484) * _3409) + _3484;
                        float _4868 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3488 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3489 = 1.0 - _3459;
                        float _3499 = (0.5 / (((_3488 * ((_3474 * _3489) + _3459)) + 9.9999999392252902907785028219223e-09) + (((_3488 * _3489) + _3459) * _3474))) * _3488;
                        float _4879 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3510 = (((_3460 * 3.1415927410125732421875) * (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) / ((_3482 * _3482) * ((_3426 * 2.1991131305694580078125) + 3.141590118408203125))) * _3415;
                        _3268 = (_3430 * _3378.x) + _3336;
                        _3269 = (_3430 * _3378.y) + _3337;
                        _3270 = (_3430 * _3378.z) + _3338;
                        _3265 = (_3510 * _3395.x) + _3333;
                        _3266 = (_3510 * _3395.y) + _3334;
                        _3267 = (_3510 * _3395.z) + _3335;
                        if (_3340 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3270;
                            _3339 = _3340;
                        }
                    }
                    frontier_phi_66_pred = _3270;
                    frontier_phi_66_pred_1 = _3269;
                    frontier_phi_66_pred_2 = _3268;
                    frontier_phi_66_pred_3 = _3267;
                    frontier_phi_66_pred_4 = _3266;
                    frontier_phi_66_pred_5 = _3265;
                }
                _3075 = frontier_phi_66_pred;
                _3073 = frontier_phi_66_pred_1;
                _3071 = frontier_phi_66_pred_2;
                _3069 = frontier_phi_66_pred_3;
                _3067 = frontier_phi_66_pred_4;
                _3065 = frontier_phi_66_pred_5;
                uint _3216 = _3215 + 1u;
                if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3209 = _3065;
                    _3210 = _3067;
                    _3211 = _3069;
                    _3212 = _3071;
                    _3213 = _3073;
                    _3214 = _3075;
                    _3215 = _3216;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
        }
        uvec4 _3078 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3079 = _3078.z;
        uint _3081 = (_3079 >> 8u) & 15u;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        if (((4294967295u << _3081) & _2984) == 0u)
        {
            _3177 = _3064;
            _3179 = _3066;
            _3181 = _3068;
            _3183 = _3070;
            _3185 = _3072;
            _3187 = _3074;
        }
        else
        {
            float _3202 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
            float _3203 = _3202 * _2062;
            float _3204 = _3202 * _2063;
            float _3205 = _3202 * _2064;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3081 < ((_3079 >> 12u) & 15u))
            {
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3316 = _3064;
                float _3317 = _3066;
                float _3318 = _3068;
                float _3319 = _3070;
                float _3320 = _3072;
                float _3321 = _3074;
                uint _3322 = _3081;
                uint _3331;
                bool _3332;
                for (;;)
                {
                    _3331 = texelFetch(g_lightClassification, int((((_2978 << 5u) + (_2964 << 9u)) + (_3322 << 2u)) >> 2u)).x;
                    _3332 = _3331 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3332)
                    {
                        frontier_phi_72_pred = _3321;
                        frontier_phi_72_pred_1 = _3320;
                        frontier_phi_72_pred_2 = _3319;
                        frontier_phi_72_pred_3 = _3318;
                        frontier_phi_72_pred_4 = _3317;
                        frontier_phi_72_pred_5 = _3316;
                    }
                    else
                    {
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3528 = _3316;
                        float _3529 = _3317;
                        float _3530 = _3318;
                        float _3531 = _3319;
                        float _3532 = _3320;
                        float _3533 = _3321;
                        uint _3534 = _3331;
                        uint _3535;
                        vec4 _3560;
                        float _3561;
                        vec4 _3576;
                        vec3 _3588;
                        vec4 _3603;
                        vec4 _3618;
                        float _3664;
                        bool _3665;
                        for (;;)
                        {
                            uint _3545 = ((_3322 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3534));
                            _3535 = (_3534 + 4294967295u) & _3534;
                            uint _3547 = _3545 * 40u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            _3561 = _3560.w;
                            uint _3563 = (_3545 * 40u) + 4u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3545 * 40u) + 8u;
                            _3588 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x));
                            uint _3590 = (_3545 * 40u) + 16u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3545 * 40u) + 20u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3545 * 40u) + 24u;
                            vec4 _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3639 = (_3545 * 40u) + 28u;
                            vec4 _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            _3664 = fma(_2064, _3652.z, fma(_2063, _3652.y, _3652.x * _2062)) + _3652.w;
                            _3665 = !((fma(_2064, _3633.z, fma(_2063, _3633.y, _3633.x * _2062)) + _3633.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3665)
                            {
                                float _3692 = _3560.x - _2062;
                                float _3693 = _3560.y - _2063;
                                float _3694 = _3560.z - _2064;
                                float _3695 = dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694));
                                float _3698 = inversesqrt(_3695);
                                float _3699 = _3698 * _3692;
                                float _3700 = _3698 * _3693;
                                float _3701 = _3698 * _3694;
                                float _3705 = 1.0 - (_3695 / (_3561 * _3561));
                                float _4890 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3710 = sqrt(_3695) * _3576.w;
                                float _3712 = 1.39999997615814208984375 / (_3710 + 1.39999997615814208984375);
                                float _3713 = _3712 * _3712;
                                float _3716 = ((1.0 - _3713) * dot(vec3(_3699, _3700, _3701), vec3(_947, _950, _953))) + _3713;
                                float _3719 = _3710 * _3710;
                                float _3723 = (fma(_2064, _3603.z, fma(_2063, _3603.y, _3603.x * _2062)) + _3603.w) / _3664;
                                float _3724 = (fma(_2064, _3618.z, fma(_2063, _3618.y, _3618.x * _2062)) + _3618.w) / _3664;
                                float _3728 = 1.0 - dot(vec2(_3723, _3724), vec2(_3723, _3724));
                                float _4906 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3730 = _3729 * (((isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0))) * _3706) / ((_3719 * 0.699999988079071044921875) + 1.0));
                                float _3742 = exp2(log2(1.0 / ((_3719 * 3.5) + 5.0)) * 0.25);
                                float _3743 = 1.0 - _1007;
                                float _3750 = sqrt(1.0 - ((1.0 - (_3743 * _3743)) * (1.0 - (_3742 * _3742))));
                                float _3751 = _3750 * _3750;
                                float _3752 = _3751 * _3751;
                                float _3753 = _3699 - _3203;
                                float _3754 = _3700 - _3204;
                                float _3755 = _3701 - _3205;
                                float _3759 = inversesqrt(dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755)));
                                float _3763 = dot(vec3(_947, _950, _953), vec3((-0.0) - _3203, (-0.0) - _3204, (-0.0) - _3205));
                                float _4917 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3767 = dot(vec3(_947, _950, _953), vec3(_3759 * _3753, _3759 * _3754, _3759 * _3755));
                                float _4928 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3770 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3774 = ((_3770 * _3770) * (_3752 + (-1.0))) + 1.0;
                                float _3775 = _3712 * _3751;
                                float _3776 = _3775 * _3775;
                                float _3782 = ((1.0 - _3776) * dot(vec3(_947, _950, _953), vec3(_3699, _3700, _3701))) + _3776;
                                float _4939 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                                float _3784 = 1.0 - _3751;
                                float _3794 = (0.5 / (((_3783 * ((_3766 * _3784) + _3751)) + 9.9999999392252902907785028219223e-09) + (((_3783 * _3784) + _3751) * _3766))) * _3783;
                                float _4950 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3804 = (_3729 * _3706) * (((_3752 * 3.1415927410125732421875) * (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0)))) / ((_3774 * _3774) * ((_3719 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3730 * _3576.y;
                                frontier_phi_78_pred_1 = _3730 * _3576.x;
                                frontier_phi_78_pred_2 = _3804 * _3588.z;
                                frontier_phi_78_pred_3 = _3804 * _3588.y;
                                frontier_phi_78_pred_4 = _3804 * _3588.x;
                                frontier_phi_78_pred_5 = _3730 * _3576.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3812 = frontier_phi_78_pred;
                            _3811 = frontier_phi_78_pred_1;
                            _3810 = frontier_phi_78_pred_2;
                            _3809 = frontier_phi_78_pred_3;
                            _3808 = frontier_phi_78_pred_4;
                            _3813 = frontier_phi_78_pred_5;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            _3520 = _3813 + _3533;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            if (_3535 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3535;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3520;
                        frontier_phi_72_pred_1 = _3519;
                        frontier_phi_72_pred_2 = _3518;
                        frontier_phi_72_pred_3 = _3517;
                        frontier_phi_72_pred_4 = _3516;
                        frontier_phi_72_pred_5 = _3515;
                    }
                    _3188 = frontier_phi_72_pred;
                    _3186 = frontier_phi_72_pred_1;
                    _3184 = frontier_phi_72_pred_2;
                    _3182 = frontier_phi_72_pred_3;
                    _3180 = frontier_phi_72_pred_4;
                    _3178 = frontier_phi_72_pred_5;
                    uint _3323 = _3322 + 1u;
                    if (_3323 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3316 = _3178;
                        _3317 = _3180;
                        _3318 = _3182;
                        _3319 = _3184;
                        _3320 = _3186;
                        _3321 = _3188;
                        _3322 = _3323;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3188;
                frontier_phi_60_61_ladder_1 = _3186;
                frontier_phi_60_61_ladder_2 = _3182;
                frontier_phi_60_61_ladder_3 = _3180;
                frontier_phi_60_61_ladder_4 = _3178;
                frontier_phi_60_61_ladder_5 = _3184;
            }
            else
            {
                frontier_phi_60_61_ladder = _3074;
                frontier_phi_60_61_ladder_1 = _3072;
                frontier_phi_60_61_ladder_2 = _3068;
                frontier_phi_60_61_ladder_3 = _3066;
                frontier_phi_60_61_ladder_4 = _3064;
                frontier_phi_60_61_ladder_5 = _3070;
            }
            _3177 = frontier_phi_60_61_ladder_4;
            _3179 = frontier_phi_60_61_ladder_3;
            _3181 = frontier_phi_60_61_ladder_2;
            _3183 = frontier_phi_60_61_ladder_5;
            _3185 = frontier_phi_60_61_ladder_1;
            _3187 = frontier_phi_60_61_ladder;
        }
        float _3192 = isnan(1.0) ? _991 : (isnan(_991) ? 1.0 : min(_991, 1.0));
        _2997 = (_3192 * _3183) + _2528;
        _2999 = (_3192 * _3185) + _2530;
        _3001 = (_3192 * _3187) + _2532;
        _3003 = ((_3177 * 0.039999999105930328369140625) * _3192) + _2851;
        _3005 = ((_3179 * 0.039999999105930328369140625) * _3192) + _2853;
        _3007 = ((_3181 * 0.039999999105930328369140625) * _3192) + _2855;
    }
    else
    {
        _2997 = _2528;
        _2999 = _2530;
        _3001 = _2532;
        _3003 = _2851;
        _3005 = _2853;
        _3007 = _2855;
    }
    float _4966 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4977 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4988 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    uint _3027 = _281 + 6u;
    float _3035 = _928 / cbSceneParam._m0[86u].x;
    float _3036 = _929 / cbSceneParam._m0[86u].y;
    vec4 _3050 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3035, _3036, (log2((isnan(cbSceneParam._m0[77u].w) ? _863 : (isnan(_863) ? cbSceneParam._m0[77u].w : min(_863, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3052 = _3050.x;
    float _3053 = _3050.y;
    float _3054 = _3050.z;
    float _3055 = _3050.w;
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    if (_863 > cbSceneParam._m0[78u].w)
    {
        float _3089 = isnan(_863) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _863 : min(cbSceneParam._m0[80u].w, _863));
        float _3090 = _3089 / _863;
        float _3101 = _3090 * _913;
        float _3102 = _914 * _3090;
        float _3103 = (-0.0) - _3102;
        float _3105 = _3090 * _915;
        float _3107 = (cbSceneParam._m0[77u].w * _3103) / _3089;
        float _3108 = _3107 + cbSceneParam._m0[79u].w;
        float _3109 = cbSceneParam._m0[79u].w - _3102;
        float _3115 = sqrt(((_3101 * _3101) + (_3102 * _3102)) + (_3105 * _3105));
        float _3118 = (1.0 - (cbSceneParam._m0[77u].w / _3089)) * _3115;
        float _3123 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3125 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3278;
        if (abs((_3103 - _3107) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3278 = ((((_3108 > 0.0) ? exp2(_3123 * _3108) : (2.0 - exp2(_3125 * _3108))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3118;
        }
        else
        {
            float _3238 = 1.0 / cbSceneParam._m0[80u].x;
            float _3239 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : max(_3108, _3109));
            float _3240 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : min(_3108, _3109));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            float _3250 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : min(_3240, 0.0));
            _3278 = ((abs(_3115 / _3103) * cbSceneParam._m0[80u].y) * ((((_3249 - _3250) * 2.0) - ((exp2(_3123 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0)))) - exp2(_3123 * (isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))))) * _3238)) - ((exp2(_3125 * _3249) - exp2(_3125 * _3250)) * _3238))) + (_3118 * cbSceneParam._m0[80u].z);
        }
        vec4 _3280 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3035, _3036, 1.0), 0.0);
        float _3289 = exp2((_3278 * (-1.44269502162933349609375)) * (1.0 - _3280.w));
        float _3290 = log2(_3289);
        float _3306 = log2(_3055);
        _3127 = (exp2(_3306 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].x)) * _3280.x) / cbSceneParam._m0[78u].x)) + _3052;
        _3129 = (exp2(_3306 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].y)) * _3280.y) / cbSceneParam._m0[78u].y)) + _3053;
        _3131 = (exp2(_3306 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].z)) * _3280.z) / cbSceneParam._m0[78u].z)) + _3054;
        _3133 = _3289 * _3055;
    }
    else
    {
        _3127 = _3052;
        _3129 = _3053;
        _3131 = _3054;
        _3133 = _3055;
    }
    float _3145 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3146 = _3145 == 3.0;
    float _3147 = log2(_3133);
    float _3154 = exp2(_3147 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_2997 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _991))) + ((_3003 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _3155 = exp2(_3147 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2999 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _991))) + ((_3005 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _3156 = exp2(_3147 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * (_3001 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _991))) + ((_3007 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _3165 = (_3145 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3165 * (_3146 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3127)));
    SV_Target.y = _3165 * (_3146 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3129)));
    SV_Target.z = _3165 * (_3146 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3131)));
    SV_Target.w = cbInstanceData._m0[_3027].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3027].w;
}


