#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1476;
float _3859;
float _3860;
float _3861;
float _3862;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3871 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3882 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3893 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _389.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[24u].z) + _441) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3904 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _466 = (_459 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _467 = (_459 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _468 = (_459 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _389.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[24u].z) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3915 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _306) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _307) + cbTextureTilingScale._m0[24u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _578 = _576.x;
    float _588 = dot(vec4(_578, _576.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _600 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _389.z) * 2.0) - ((((_578 - _588) * cbMtdParam._m0[24u].z) + _588) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3926 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _608 = (_601 * ((_559.x * cbMtdParam._m0[14u].x) - _539)) + _539;
    float _609 = (_601 * ((_559.y * cbMtdParam._m0[14u].y) - _540)) + _540;
    float _610 = (_601 * ((_559.z * cbMtdParam._m0[14u].z) - _541)) + _541;
    float _614 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _608;
    float _617 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _609;
    float _620 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _610;
    float _627 = ((_608 - _614) * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) + _614;
    float _628 = ((_609 - _617) * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) + _617;
    float _629 = ((_610 - _620) * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) + _620;
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _683 = _681.x;
    float _684 = _681.y;
    float _685 = _681.z;
    float _692 = ((_664.x - _683) * _459) + _683;
    float _693 = ((_664.y - _684) * _459) + _684;
    float _694 = ((_664.z - _685) * _459) + _685;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _717 = ((_706.x - _692) * _532) + _692;
    float _718 = ((_706.y - _693) * _532) + _693;
    float _719 = ((_706.z - _694) * _532) + _694;
    vec4 _731 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _306) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _307) + cbTextureTilingScale._m0[23u].w));
    float _744 = ((_731.z - _719) * _601) + _719;
    float _747 = ((((_731.x - _717) * _601) + _717) * 2.0) + (-1.0);
    float _748 = ((((_731.y - _718) * _601) + _718) * 2.0) + (-1.0);
    float _749 = dot(vec2(_747, _748), vec2(_747, _748));
    float _3937 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _754 = sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))));
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _786 = (_747 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_641.x * 2.0) + (-1.0)))) + (((_774.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _787 = (_748 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_641.y * 2.0) + (-1.0)))) + (((_774.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _801 = _799.x;
    float _802 = 1.0 - _801;
    float _828 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_801 - _802) * cbMtdParam._m0[24u].y) + _802) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3948 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _829 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _837 = ((((cbMtdParam._m0[10u].x - _627) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _829) + _627;
    float _838 = ((((cbMtdParam._m0[10u].y - _628) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _829) + _628;
    float _839 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _629)) * _829) + _629;
    float _844 = (((_641.z - _744) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _744;
    float _848 = ((_774.z - _844) * cbMtdParam._m0[19u].w) + _844;
    float _852 = ((cbMtdParam._m0[23u].y - _848) * _829) + _848;
    vec4 _873 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _879 = (_873.x * 2.0) + (-1.0);
    float _880 = (_873.y * 2.0) + (-1.0);
    float _881 = dot(vec2(_879, _880), vec2(_879, _880));
    float _3959 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _897 = (_829 * (((cbMtdParam._m0[22u].z * _786) - _786) + _879)) + _786;
    float _898 = (_829 * (((cbMtdParam._m0[22u].z * _787) - _787) + _880)) + _787;
    float _899 = (_829 * (sqrt(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) - _754)) + _754;
    float _901 = cbMtdParam._m0[22u].x + _774.w;
    float _904 = fma(_899, _255 * NORMAL.x, fma(_898, _262 * TANGENT.x, (_248 * _240) * _897));
    float _907 = fma(_899, _255 * NORMAL.y, fma(_898, _262 * TANGENT.y, (_248 * _241) * _897));
    float _910 = fma(_899, _255 * NORMAL.z, fma(_898, _262 * TANGENT.z, (_248 * _242) * _897));
    float _914 = inversesqrt(dot(vec3(_904, _907, _910), vec3(_904, _907, _910)));
    float _915 = _914 * _904;
    float _916 = _914 * _907;
    float _917 = _914 * _910;
    float _3970 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _918 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _3992 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4003 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4014 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _936 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _987 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _977);
    float _988 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _977);
    float _989 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _977);
    float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
    float _994 = _987 * _993;
    float _995 = _988 * _993;
    float _996 = _989 * _993;
    vec4 _1001 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1003 = _1001.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1157 = sqrt(((_987 * _987) + (_988 * _988)) + (_989 * _989));
        float _1163 = (cbMatDynParam._m0[5u].x * _1157) + cbMatDynParam._m0[5u].y;
        float _4025 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1168 = (cbMatDynParam._m0[5u].z * _1157) + cbMatDynParam._m0[5u].w;
        float _4036 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) - _1164)) + _1164) < ((_1003 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1014 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1015 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1033 = fma(_917, cbSceneParam._m0[5u].z, fma(_916, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _915));
    float _1036 = fma(_917, cbSceneParam._m0[6u].z, fma(_916, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _915));
    float _1039 = fma(_917, cbSceneParam._m0[7u].z, fma(_916, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _915));
    uint _1052 = _287 + 9u;
    uint _1053 = _1052 + uint(cbMatDynParam._m0[0u].w);
    float _1059 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_1053].x;
    float _1060 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * cbInstanceData._m0[_1053].y;
    float _1061 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_1053].z;
    float _4047 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    vec4 _1073 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1014, cbSceneParam._m0[86u].y * _1015));
    float _1077 = ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * TEXCOORD_5.w) * _1073.x;
    float _1078 = dot(vec3(_915, _916, _917), vec3(_994, _995, _996));
    float _1081 = _1078 * 2.0;
    float _1085 = (_1081 * _915) - _994;
    float _1086 = (_1081 * _916) - _995;
    float _1087 = (_1081 * _917) - _996;
    float _1091 = abs(dot(vec3(_994, _995, _996), vec3(_915, _916, _917)));
    float _4080 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1093 = sqrt(_918);
    float _1106 = exp2((_1093 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1093 * 3.0));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1475;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1200 = fma(_1146, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138));
        float _1204 = fma(_1146, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138));
        float _1208 = fma(_1146, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138));
        float _1233 = _1138 + _915;
        float _1234 = _1142 + _916;
        float _1235 = _1146 + _917;
        float _1245 = fma(_1235, cbModelParam._m0[26u].z, fma(_1234, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233)) - _1200;
        float _1246 = fma(_1235, cbModelParam._m0[27u].z, fma(_1234, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233)) - _1204;
        float _1247 = fma(_1235, cbModelParam._m0[28u].z, fma(_1234, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233)) - _1208;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1200 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1204 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[34u].z) + ((((((_1208 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1303 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1269.x + (-0.5));
        float _1305 = _1303 * (_1269.y + (-0.5));
        float _1306 = _1303 * (_1269.z + (-0.5));
        float _1313 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1276.x + (-0.5));
        float _1315 = _1313 * (_1276.y + (-0.5));
        float _1316 = _1313 * (_1276.z + (-0.5));
        float _1323 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1283.x + (-0.5));
        float _1325 = _1323 * (_1283.y + (-0.5));
        float _1326 = _1323 * (_1283.z + (-0.5));
        float _1333 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1290.x + (-0.5));
        float _1335 = _1333 * (_1290.y + (-0.5));
        float _1336 = _1333 * (_1290.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1357 = (dot(vec3(_915, _916, _917), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1367 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4128 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1369 + 1.0))) + _1374) * _1337;
        float _1384 = _1305 * 0.5;
        float _1385 = _1315 * 0.5;
        float _1386 = _1325 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_915, _916, _917), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4161 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1411 + 1.0))) + _1416) * _1338;
        float _1426 = _1306 * 0.5;
        float _1427 = _1316 * 0.5;
        float _1428 = _1326 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_915, _916, _917), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4194 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1453 + 1.0))) + _1458) * _1339;
        _1475 = _1306;
        _1477 = _1305;
        _1478 = _1304;
        _1479 = _1316;
        _1480 = _1315;
        _1481 = _1314;
        _1482 = _1326;
        _1483 = _1325;
        _1484 = _1324;
        _1485 = _1339;
        _1486 = _1338;
        _1487 = _1337;
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1476;
        _1477 = _1476;
        _1478 = _1476;
        _1479 = _1476;
        _1480 = _1476;
        _1481 = _1476;
        _1482 = _1476;
        _1483 = _1476;
        _1484 = _1476;
        _1485 = _1476;
        _1486 = _1476;
        _1487 = _1476;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1516 = fma(_1146, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1138));
        float _1520 = fma(_1146, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1138));
        float _1524 = fma(_1146, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1138));
        float _1547 = _1138 + _915;
        float _1548 = _1142 + _916;
        float _1549 = _1146 + _917;
        float _1559 = fma(_1549, cbModelParam._m0[30u].z, fma(_1548, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1547)) - _1516;
        float _1560 = fma(_1549, cbModelParam._m0[31u].z, fma(_1548, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1547)) - _1520;
        float _1561 = fma(_1549, cbModelParam._m0[32u].z, fma(_1548, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1547)) - _1524;
        float _1565 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
        float _1578 = ((_1565 * _1559) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1516 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1579 = ((_1565 * _1560) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1520 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1580 = ((_1565 * _1561) / cbModelParam._m0[35u].z) + ((((((_1524 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        float _1615 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1582.x + (-0.5));
        float _1617 = _1615 * (_1582.y + (-0.5));
        float _1618 = _1615 * (_1582.z + (-0.5));
        float _1625 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1589.x + (-0.5));
        float _1627 = _1625 * (_1589.y + (-0.5));
        float _1628 = _1625 * (_1589.z + (-0.5));
        float _1635 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1596.x + (-0.5));
        float _1637 = _1635 * (_1596.y + (-0.5));
        float _1638 = _1635 * (_1596.z + (-0.5));
        float _1645 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1603.x + (-0.5));
        float _1647 = _1645 * (_1603.y + (-0.5));
        float _1648 = _1645 * (_1603.z + (-0.5));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = _1616 * 0.5;
        float _1653 = _1626 * 0.5;
        float _1654 = _1636 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_915, _916, _917), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4257 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1679 + 1.0))) + _1684) * _1649;
        float _1694 = _1617 * 0.5;
        float _1695 = _1627 * 0.5;
        float _1696 = _1637 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_915, _916, _917), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4290 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1721 + 1.0))) + _1726) * _1650;
        float _1736 = _1618 * 0.5;
        float _1737 = _1628 * 0.5;
        float _1738 = _1638 * 0.5;
        float _1739 = dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738));
        float _1744 = (_1739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1739);
        float _1752 = (dot(vec3(_915, _916, _917), vec3(_1744 * _1736, _1744 * _1737, _1744 * _1738)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1763 = _1762 * 2.0;
        float _1767 = (1.0 - _1762) / (_1762 + 1.0);
        float _4323 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1777 = ((((1.0 - _1768) * (_1763 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1763 + 1.0))) + _1768) * _1651;
        _1785 = _1618;
        _1786 = _1617;
        _1787 = _1616;
        _1788 = _1628;
        _1789 = _1627;
        _1790 = _1626;
        _1791 = _1638;
        _1792 = _1637;
        _1793 = _1636;
        _1794 = _1651;
        _1795 = _1650;
        _1796 = _1649;
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)));
    }
    else
    {
        _1785 = _1476;
        _1786 = _1476;
        _1787 = _1476;
        _1788 = _1476;
        _1789 = _1476;
        _1790 = _1476;
        _1791 = _1476;
        _1792 = _1476;
        _1793 = _1476;
        _1794 = _1476;
        _1795 = _1476;
        _1796 = _1476;
        _1797 = 0.0;
        _1798 = 0.0;
        _1799 = 0.0;
    }
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1488)) + _1488;
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1489)) + _1489;
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1490)) + _1490;
    float _1832 = fma(_1811, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1811, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1811, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1809));
    float _1853 = _1085 * 0.5;
    float _1854 = _1086 * 0.5;
    float _1855 = _1087 * 0.5;
    float _1856 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1859 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1862 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1896;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1869 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1475, _1479, _1482, _1485));
        float _1873 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1877 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1884 = dot(vec4(cbModelParam._m0[39u]), vec4(_1853, _1854, _1855, 1.0));
        _1896 = dot(vec3(isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1896 = 1.0;
    }
    float _1907;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1898 = dot(vec4(cbModelParam._m0[40u]), vec4(_1853, _1854, _1855, 1.0));
        _1907 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1907 = 1.0;
    }
    float _1911 = (_1907 * cbModelParam._m0[1u].x) + (_1896 * (1.0 - cbModelParam._m0[1u].x));
    float _1921 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1921 : min(cbModelParam._m0[25u].z, _1921));
    float _2003;
    float _2005;
    float _2007;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1970 = fma(_1146, cbModelParam._m0[13u].z, fma(_1142, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138)) + cbModelParam._m0[13u].w;
        float _1974 = fma(_1146, cbModelParam._m0[14u].z, fma(_1142, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138)) + cbModelParam._m0[14u].w;
        float _1978 = fma(_1146, cbModelParam._m0[15u].z, fma(_1142, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138)) + cbModelParam._m0[15u].w;
        float _1981 = fma(_1087, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085));
        float _1984 = fma(_1087, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085));
        float _1987 = fma(_1087, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085));
        float _2015;
        if (_1981 > 0.0)
        {
            _2015 = abs((1.0 - _1970) / _1981);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1970 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2015 = frontier_phi_17_15_ladder;
        }
        float _2238;
        if (_1984 > 0.0)
        {
            _2238 = abs((1.0 - _1974) / _1984);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1974 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2238 = frontier_phi_26_22_ladder;
        }
        float _2484;
        if (_1987 > 0.0)
        {
            _2484 = abs((1.0 - _1978) / _1987);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1978 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2484 = frontier_phi_38_33_ladder;
        }
        float _2486 = isnan(_2238) ? _2015 : (isnan(_2015) ? _2238 : min(_2015, _2238));
        float _2487 = isnan(_2484) ? _2486 : (isnan(_2486) ? _2484 : min(_2486, _2484));
        float _2491 = (_2487 * _1981) + _1970;
        float _2492 = (_2487 * _1984) + _1974;
        float _2493 = (_2487 * _1987) + _1978;
        float _2494 = _2487 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2494;
        float _2498 = _2494 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 > _2498) || ((_2492 < _2496) || ((_2491 < _2496) || (_2491 > _2498))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2493, cbModelParam._m0[9u].z, fma(_2492, cbModelParam._m0[9u].y, _2491 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2493, cbModelParam._m0[10u].z, fma(_2492, cbModelParam._m0[10u].y, _2491 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2493, cbModelParam._m0[11u].z, fma(_2492, cbModelParam._m0[11u].y, _2491 * cbModelParam._m0[11u].x))), _1922);
            frontier_phi_16_38_ladder = _2617.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2617.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2617.x * cbModelParam._m0[1u].y;
        }
        _2003 = frontier_phi_16_38_ladder_2;
        _2005 = frontier_phi_16_38_ladder_1;
        _2007 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1991 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1085, _1086, _1087), _1922);
        _2003 = _1991.x * cbModelParam._m0[1u].y;
        _2005 = _1991.y * cbModelParam._m0[1u].y;
        _2007 = _1991.z * cbModelParam._m0[1u].y;
    }
    float _2011 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _2012 = isnan(_2011) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2011 : min(cbModelParam._m0[25u].w, _2011));
    float _2103;
    float _2105;
    float _2107;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2067 = fma(_1146, cbModelParam._m0[21u].z, fma(_1142, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138)) + cbModelParam._m0[21u].w;
        float _2071 = fma(_1146, cbModelParam._m0[22u].z, fma(_1142, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138)) + cbModelParam._m0[22u].w;
        float _2075 = fma(_1146, cbModelParam._m0[23u].z, fma(_1142, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138)) + cbModelParam._m0[23u].w;
        float _2078 = fma(_1087, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085));
        float _2081 = fma(_1087, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085));
        float _2084 = fma(_1087, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085));
        float _2243;
        if (_2078 > 0.0)
        {
            _2243 = abs((1.0 - _2067) / _2078);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2067 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2243 = frontier_phi_28_24_ladder;
        }
        float _2511;
        if (_2081 > 0.0)
        {
            _2511 = abs((1.0 - _2071) / _2081);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2071 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2511 = frontier_phi_40_35_ladder;
        }
        float _2716;
        if (_2084 > 0.0)
        {
            _2716 = abs((1.0 - _2075) / _2084);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2075 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2716 = frontier_phi_49_46_ladder;
        }
        float _2718 = isnan(_2511) ? _2243 : (isnan(_2243) ? _2511 : min(_2243, _2511));
        float _2719 = isnan(_2716) ? _2718 : (isnan(_2718) ? _2716 : min(_2718, _2716));
        float _2723 = (_2719 * _2078) + _2067;
        float _2724 = (_2719 * _2081) + _2071;
        float _2725 = (_2719 * _2084) + _2075;
        float _2726 = _2719 * 9.9999997473787516355514526367188e-05;
        float _2727 = (-1.0) - _2726;
        float _2729 = _2726 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2725 > _2729) || ((_2725 < _2727) || ((_2724 > _2729) || ((_2724 < _2727) || ((_2723 < _2727) || (_2723 > _2729))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2725, cbModelParam._m0[17u].z, fma(_2724, cbModelParam._m0[17u].y, _2723 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2725, cbModelParam._m0[18u].z, fma(_2724, cbModelParam._m0[18u].y, _2723 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2725, cbModelParam._m0[19u].z, fma(_2724, cbModelParam._m0[19u].y, _2723 * cbModelParam._m0[19u].x))), _2012);
            frontier_phi_25_49_ladder = _2924.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2924.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2924.x * cbModelParam._m0[1u].z;
        }
        _2103 = frontier_phi_25_49_ladder_2;
        _2105 = frontier_phi_25_49_ladder_1;
        _2107 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2087 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1085, _1086, _1087), _2012);
        _2103 = _2087.x * cbModelParam._m0[1u].z;
        _2105 = _2087.y * cbModelParam._m0[1u].z;
        _2107 = _2087.z * cbModelParam._m0[1u].z;
    }
    float _2119 = ((((1.0 - _1106) * ((_1093 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1106 * _1093)) * _1077;
    float _2120 = _2119 * ((cbModelParam._m0[1u].w * (_2103 - _2003)) + _2003);
    float _2121 = _2119 * ((cbModelParam._m0[1u].w * (_2105 - _2005)) + _2005);
    float _2122 = _2119 * ((cbModelParam._m0[1u].w * (_2107 - _2007)) + _2007);
    float _2125 = fma(_2122, cbSceneParam._m0[89u].z, fma(_2121, cbSceneParam._m0[89u].y, _2120 * cbSceneParam._m0[89u].x));
    float _2128 = fma(_2122, cbSceneParam._m0[90u].z, fma(_2121, cbSceneParam._m0[90u].y, _2120 * cbSceneParam._m0[90u].x));
    float _2131 = fma(_2122, cbSceneParam._m0[91u].z, fma(_2121, cbSceneParam._m0[91u].y, _2120 * cbSceneParam._m0[91u].x));
    vec4 _2139 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1014, _1015));
    float _2141 = _2139.w;
    float _2153 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2141);
    float _2154 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2141);
    float _2155 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2141);
    uvec4 _2159 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2161 = _2159.x * 14u;
    uint _2162 = _2161 + 13u;
    float _2169 = _1077 + (-1.0);
    float _2174 = (cbLight._m0[_2162].x * _2169) + 1.0;
    float _2175 = (cbLight._m0[_2162].y * _2169) + 1.0;
    float _2176 = (cbLight._m0[_2162].z * _2169) + 1.0;
    float _2177 = (cbLight._m0[_2162].w * _2169) + 1.0;
    uint _2178 = _2161 + 5u;
    float _2184 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
    uint _2188 = _2161 + 4u;
    float _2197 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
    uint _2201 = _2161 | 1u;
    float _2212 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_915, _916, _917));
    float _2215 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_915, _916, _917));
    float _4459 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _4470 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2220 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * 0.3183098733425140380859375;
    float _2222 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * 0.3183098733425140380859375;
    float _2229 = ((cbLight._m0[_2178].x * _2184) * _2222) + (((cbLight._m0[_2188].x * _2153) * _2197) * _2220);
    float _2230 = ((_2184 * cbLight._m0[_2178].y) * _2222) + (((cbLight._m0[_2188].y * _2154) * _2197) * _2220);
    float _2231 = ((_2184 * cbLight._m0[_2178].z) * _2222) + (((cbLight._m0[_2188].z * _2155) * _2197) * _2220);
    uvec4 _2235 = floatBitsToUint(cbLight._m0[_2161 + 12u]);
    bool _2237 = _2235.x == 0u;
    float _2248;
    float _2250;
    float _2252;
    if (_2237)
    {
        _2248 = _2229;
        _2250 = _2230;
        _2252 = _2231;
    }
    else
    {
        uint _2256 = _2161 + 6u;
        float _2272 = (dot(vec3(cbLight._m0[_2161 + 2u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2273 = _2272 * _2272;
        float _4481 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2274 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2275 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2248 = (((cbLight._m0[_2256].x * 0.3183098733425140380859375) * _2274) * _2275) + _2229;
        _2250 = (((cbLight._m0[_2256].y * 0.3183098733425140380859375) * _2274) * _2275) + _2230;
        _2252 = (((cbLight._m0[_2256].z * 0.3183098733425140380859375) * _2274) * _2275) + _2231;
    }
    bool _2255 = _2235.y == 0u;
    float _2293;
    float _2295;
    float _2297;
    if (_2255)
    {
        _2293 = _2248;
        _2295 = _2250;
        _2297 = _2252;
    }
    else
    {
        uint _2455 = _2161 + 7u;
        float _2471 = (dot(vec3(cbLight._m0[_2161 + 3u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2472 = _2471 * _2471;
        float _4497 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2473 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2474 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2293 = (((cbLight._m0[_2455].x * 0.3183098733425140380859375) * _2473) * _2474) + _2248;
        _2295 = (((cbLight._m0[_2455].y * 0.3183098733425140380859375) * _2473) * _2474) + _2250;
        _2297 = (((cbLight._m0[_2455].z * 0.3183098733425140380859375) * _2473) * _2474) + _2252;
    }
    uint _2300 = _2161 + 8u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _918) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2161].x + _994;
    float _2316 = cbLight._m0[_2161].y + _995;
    float _2317 = cbLight._m0[_2161].z + _996;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2161].xyz));
    float _4513 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _4524 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2329 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2330 = dot(vec3(_915, _916, _917), vec3(_2322, _2323, _2324));
    float _4535 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2322, _2323, _2324));
    float _4546 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2314 * _2314;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2354 = 1.0 - _2314;
    float _2365 = (0.5 / (((_2329 * ((_2328 * _2354) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2354) + _2314) * _2328))) * _2328;
    float _4557 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    uint _2381 = _2161 + 9u;
    float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _918) * 0.949999988079071044921875);
    float _2393 = _2392 * _2392;
    float _2394 = cbLight._m0[_2201].x + _994;
    float _2395 = cbLight._m0[_2201].y + _995;
    float _2396 = cbLight._m0[_2201].z + _996;
    float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
    float _2401 = _2400 * _2394;
    float _2402 = _2400 * _2395;
    float _2403 = _2400 * _2396;
    float _2404 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2201].xyz));
    float _4568 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2408 = dot(vec3(_915, _916, _917), vec3(_2401, _2402, _2403));
    float _4579 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2401, _2402, _2403));
    float _4590 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2393 * _2393;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2429 = (exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2430 = 1.0 - _2393;
    float _2440 = (0.5 / (((_2329 * ((_2407 * _2430) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2430) + _2393) * _2407))) * _2407;
    float _4601 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2442 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    float _2452 = (((_2429 * cbLight._m0[_2381].x) * _2442) * _2184) + ((((cbLight._m0[_2300].x * _2153) * _2353) * _2367) * _2197);
    float _2453 = (((_2429 * cbLight._m0[_2381].y) * _2442) * _2184) + ((((cbLight._m0[_2300].y * _2154) * _2353) * _2367) * _2197);
    float _2454 = (((_2429 * cbLight._m0[_2381].z) * _2442) * _2184) + ((((cbLight._m0[_2300].z * _2155) * _2353) * _2367) * _2197);
    float _2516;
    float _2518;
    float _2520;
    if (_2237)
    {
        _2516 = _2452;
        _2518 = _2453;
        _2520 = _2454;
    }
    else
    {
        uint _2522 = _2161 + 2u;
        uint _2526 = _2161 + 10u;
        float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _918) * 0.949999988079071044921875);
        float _2541 = _2540 * _2540;
        float _2542 = cbLight._m0[_2522].x + _994;
        float _2543 = cbLight._m0[_2522].y + _995;
        float _2544 = cbLight._m0[_2522].z + _996;
        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
        float _2549 = _2548 * _2542;
        float _2550 = _2548 * _2543;
        float _2551 = _2548 * _2544;
        float _2552 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2522].xyz));
        float _4612 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2556 = dot(vec3(_915, _916, _917), vec3(_2549, _2550, _2551));
        float _4623 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2560 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2549, _2550, _2551));
        float _4634 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2564 = _2541 * _2541;
        float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
        float _2577 = (exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2578 = 1.0 - _2541;
        float _2588 = (0.5 / (((_2329 * ((_2555 * _2578) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2578) + _2541) * _2555))) * _2555;
        float _4645 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2590 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
        float _2591 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2516 = (((_2577 * cbLight._m0[_2526].x) * _2590) * _2591) + _2452;
        _2518 = (((_2577 * cbLight._m0[_2526].y) * _2590) * _2591) + _2453;
        _2520 = (((_2577 * cbLight._m0[_2526].z) * _2590) * _2591) + _2454;
    }
    float _2626;
    float _2628;
    float _2630;
    if (_2255)
    {
        _2626 = _2516;
        _2628 = _2518;
        _2630 = _2520;
    }
    else
    {
        uint _2637 = _2161 + 3u;
        uint _2641 = _2161 + 11u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _918) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _994;
        float _2658 = cbLight._m0[_2637].y + _995;
        float _2659 = cbLight._m0[_2637].z + _996;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2637].xyz));
        float _4661 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2671 = dot(vec3(_915, _916, _917), vec3(_2664, _2665, _2666));
        float _4672 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4683 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2692 = (exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2693 = 1.0 - _2656;
        float _2703 = (0.5 / (((_2329 * ((_2670 * _2693) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2693) + _2656) * _2670))) * _2670;
        float _4694 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2705 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2706 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2626 = (((_2692 * cbLight._m0[_2641].x) * _2705) * _2706) + _2516;
        _2628 = (((_2692 * cbLight._m0[_2641].y) * _2705) * _2706) + _2518;
        _2630 = (((_2692 * cbLight._m0[_2641].z) * _2705) * _2706) + _2520;
    }
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    if (_2159.y == 0u)
    {
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2781;
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2781;
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2781;
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.x;
        uint _2808 = uint((float(_2796.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1015) / _2797))) + floor(float(uint(cbSceneParam._m0[85u].x * _1014) / _2797)));
        float _2818 = (log2(_2784 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2819 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        uint _2822 = uint(isnan(14.0) ? _2819 : (isnan(_2819) ? 14.0 : min(_2819, 14.0)));
        uvec4 _2827 = texelFetch(g_lightClusterGridBuffer, int(((_2822 << 2u) + (_2808 << 6u)) >> 2u));
        uint _2828 = _2827.x;
        uint _2829 = _2796.z;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((((1u << ((_2829 >> 4u) & 15u)) + 4294967295u) & _2828) == 0u) || ((_2829 & 240u) == 0u))
        {
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
        }
        else
        {
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            uint _3088 = 0u;
            uint _3097;
            bool _3098;
            for (;;)
            {
                _3097 = texelFetch(g_lightClassification, int((((_2822 << 5u) + (_2808 << 9u)) + (_3088 << 2u)) >> 2u)).x;
                _3098 = _3097 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3098)
                {
                    frontier_phi_66_pred = _3082;
                    frontier_phi_66_pred_1 = _3087;
                    frontier_phi_66_pred_2 = _3086;
                    frontier_phi_66_pred_3 = _3085;
                    frontier_phi_66_pred_4 = _3084;
                    frontier_phi_66_pred_5 = _3083;
                }
                else
                {
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    uint _3233;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3097;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    for (;;)
                    {
                        uint _3237 = uint(findLSB(_3233)) + (_3088 << 5u);
                        uint _3234 = (_3233 + 4294967295u) & _3233;
                        uint _3239 = _3237 * 48u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3259 = (_3237 * 48u) + 4u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3278 = (_3237 * 48u) + 8u;
                        vec3 _3289 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x));
                        float _3293 = _3253.x - _2782;
                        float _3294 = _3253.y - _2783;
                        float _3295 = _3253.z - _2784;
                        float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                        float _3299 = inversesqrt(_3296);
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3303 = dot(vec3(_1033, _1036, _1039), vec3(_3300, _3301, _3302));
                        float _3308 = 1.0 - (_3296 * _3253.w);
                        float _4720 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3310 = sqrt(_3296) * _3272.w;
                        float _3313 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3303) + _3314;
                        float _3320 = _3310 * _3310;
                        float _3324 = ((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3309) / ((_3320 * 0.699999988079071044921875) + 1.0);
                        float _3328 = (-0.0) - _2782;
                        float _3329 = (-0.0) - _2783;
                        float _3330 = (-0.0) - _2784;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3345 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _1093;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3358 = _3337 + _3302;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_1033, _1036, _1039), vec3(_3335, _3336, _3337));
                        float _4736 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3370 = dot(vec3(_1033, _1036, _1039), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4747 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3313 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3303) + _3379;
                        float _4758 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4769 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) / ((_3377 * _3377) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125))) * _3309;
                        _3157 = (_3324 * _3272.x) + _3230;
                        _3158 = (_3324 * _3272.y) + _3231;
                        _3159 = (_3324 * _3272.z) + _3232;
                        _3154 = (_3405 * _3289.x) + _3227;
                        _3155 = (_3405 * _3289.y) + _3228;
                        _3156 = (_3405 * _3289.z) + _3229;
                        if (_3234 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3234;
                        }
                    }
                    frontier_phi_66_pred = _3154;
                    frontier_phi_66_pred_1 = _3159;
                    frontier_phi_66_pred_2 = _3158;
                    frontier_phi_66_pred_3 = _3157;
                    frontier_phi_66_pred_4 = _3156;
                    frontier_phi_66_pred_5 = _3155;
                }
                _2930 = frontier_phi_66_pred;
                _2940 = frontier_phi_66_pred_1;
                _2938 = frontier_phi_66_pred_2;
                _2936 = frontier_phi_66_pred_3;
                _2934 = frontier_phi_66_pred_4;
                _2932 = frontier_phi_66_pred_5;
                uint _3089 = _3088 + 1u;
                if (_3089 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3082 = _2930;
                    _3083 = _2932;
                    _3084 = _2934;
                    _3085 = _2936;
                    _3086 = _2938;
                    _3087 = _2940;
                    _3088 = _3089;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
        }
        uvec4 _2943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2944 = _2943.z;
        uint _2946 = (_2944 >> 8u) & 15u;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        if (((4294967295u << _2946) & _2828) == 0u)
        {
            _3050 = _2929;
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
            _3058 = _2937;
            _3060 = _2939;
        }
        else
        {
            float _3075 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
            float _3076 = _3075 * _2782;
            float _3077 = _3075 * _2783;
            float _3078 = _3075 * _2784;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2946 < ((_2944 >> 12u) & 15u))
            {
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3210 = _2929;
                float _3211 = _2931;
                float _3212 = _2933;
                float _3213 = _2935;
                float _3214 = _2937;
                float _3215 = _2939;
                uint _3216 = _2946;
                uint _3225;
                bool _3226;
                for (;;)
                {
                    _3225 = texelFetch(g_lightClassification, int((((_2822 << 5u) + (_2808 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                    _3226 = _3225 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3226)
                    {
                        frontier_phi_77_pred = _3215;
                        frontier_phi_77_pred_1 = _3214;
                        frontier_phi_77_pred_2 = _3213;
                        frontier_phi_77_pred_3 = _3212;
                        frontier_phi_77_pred_4 = _3211;
                        frontier_phi_77_pred_5 = _3210;
                    }
                    else
                    {
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        uint _3438 = _3225;
                        uint _3439;
                        vec4 _3464;
                        float _3465;
                        vec4 _3480;
                        vec3 _3492;
                        vec4 _3507;
                        vec4 _3522;
                        float _3568;
                        bool _3569;
                        for (;;)
                        {
                            uint _3449 = ((_3216 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3438));
                            _3439 = (_3438 + 4294967295u) & _3438;
                            uint _3451 = _3449 * 40u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3465 = _3464.w;
                            uint _3467 = (_3449 * 40u) + 4u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3449 * 40u) + 8u;
                            _3492 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x));
                            uint _3494 = (_3449 * 40u) + 16u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3449 * 40u) + 20u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3449 * 40u) + 24u;
                            vec4 _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3543 = (_3449 * 40u) + 28u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            _3568 = fma(_2784, _3556.z, fma(_2783, _3556.y, _3556.x * _2782)) + _3556.w;
                            _3569 = !((fma(_2784, _3537.z, fma(_2783, _3537.y, _3537.x * _2782)) + _3537.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3569)
                            {
                                float _3596 = _3464.x - _2782;
                                float _3597 = _3464.y - _2783;
                                float _3598 = _3464.z - _2784;
                                float _3599 = dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598));
                                float _3602 = inversesqrt(_3599);
                                float _3603 = _3602 * _3596;
                                float _3604 = _3602 * _3597;
                                float _3605 = _3602 * _3598;
                                float _3609 = 1.0 - (_3599 / (_3465 * _3465));
                                float _4780 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3614 = sqrt(_3599) * _3480.w;
                                float _3616 = 1.39999997615814208984375 / (_3614 + 1.39999997615814208984375);
                                float _3617 = _3616 * _3616;
                                float _3620 = ((1.0 - _3617) * dot(vec3(_3603, _3604, _3605), vec3(_1033, _1036, _1039))) + _3617;
                                float _3623 = _3614 * _3614;
                                float _3627 = (fma(_2784, _3507.z, fma(_2783, _3507.y, _3507.x * _2782)) + _3507.w) / _3568;
                                float _3628 = (fma(_2784, _3522.z, fma(_2783, _3522.y, _3522.x * _2782)) + _3522.w) / _3568;
                                float _3632 = 1.0 - dot(vec2(_3627, _3628), vec2(_3627, _3628));
                                float _4796 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3634 = _3633 * (((isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0))) * _3610) / ((_3623 * 0.699999988079071044921875) + 1.0));
                                float _3646 = exp2(log2(1.0 / ((_3623 * 3.5) + 5.0)) * 0.25);
                                float _3647 = 1.0 - _1093;
                                float _3654 = sqrt(1.0 - ((1.0 - (_3647 * _3647)) * (1.0 - (_3646 * _3646))));
                                float _3655 = _3654 * _3654;
                                float _3656 = _3655 * _3655;
                                float _3657 = _3603 - _3076;
                                float _3658 = _3604 - _3077;
                                float _3659 = _3605 - _3078;
                                float _3663 = inversesqrt(dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659)));
                                float _3667 = dot(vec3(_1033, _1036, _1039), vec3((-0.0) - _3076, (-0.0) - _3077, (-0.0) - _3078));
                                float _4807 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3671 = dot(vec3(_1033, _1036, _1039), vec3(_3663 * _3657, _3663 * _3658, _3663 * _3659));
                                float _4818 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3674 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3678 = ((_3674 * _3674) * (_3656 + (-1.0))) + 1.0;
                                float _3679 = _3616 * _3655;
                                float _3680 = _3679 * _3679;
                                float _3686 = ((1.0 - _3680) * dot(vec3(_1033, _1036, _1039), vec3(_3603, _3604, _3605))) + _3680;
                                float _4829 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3688 = 1.0 - _3655;
                                float _3698 = (0.5 / (((_3687 * ((_3670 * _3688) + _3655)) + 9.9999999392252902907785028219223e-09) + (((_3687 * _3688) + _3655) * _3670))) * _3687;
                                float _4840 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3708 = (_3633 * _3610) * (((_3656 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3678 * _3678) * ((_3623 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3634 * _3480.y;
                                frontier_phi_83_pred_1 = _3634 * _3480.x;
                                frontier_phi_83_pred_2 = _3708 * _3492.z;
                                frontier_phi_83_pred_3 = _3708 * _3492.y;
                                frontier_phi_83_pred_4 = _3708 * _3492.x;
                                frontier_phi_83_pred_5 = _3634 * _3480.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3716 = frontier_phi_83_pred;
                            _3715 = frontier_phi_83_pred_1;
                            _3714 = frontier_phi_83_pred_2;
                            _3713 = frontier_phi_83_pred_3;
                            _3712 = frontier_phi_83_pred_4;
                            _3717 = frontier_phi_83_pred_5;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            if (_3439 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3439;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3424;
                        frontier_phi_77_pred_1 = _3423;
                        frontier_phi_77_pred_2 = _3422;
                        frontier_phi_77_pred_3 = _3421;
                        frontier_phi_77_pred_4 = _3420;
                        frontier_phi_77_pred_5 = _3419;
                    }
                    _3061 = frontier_phi_77_pred;
                    _3059 = frontier_phi_77_pred_1;
                    _3057 = frontier_phi_77_pred_2;
                    _3055 = frontier_phi_77_pred_3;
                    _3053 = frontier_phi_77_pred_4;
                    _3051 = frontier_phi_77_pred_5;
                    uint _3217 = _3216 + 1u;
                    if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3210 = _3051;
                        _3211 = _3053;
                        _3212 = _3055;
                        _3213 = _3057;
                        _3214 = _3059;
                        _3215 = _3061;
                        _3216 = _3217;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3055;
                frontier_phi_58_59_ladder_1 = _3061;
                frontier_phi_58_59_ladder_2 = _3059;
                frontier_phi_58_59_ladder_3 = _3057;
                frontier_phi_58_59_ladder_4 = _3053;
                frontier_phi_58_59_ladder_5 = _3051;
            }
            else
            {
                frontier_phi_58_59_ladder = _2933;
                frontier_phi_58_59_ladder_1 = _2939;
                frontier_phi_58_59_ladder_2 = _2937;
                frontier_phi_58_59_ladder_3 = _2935;
                frontier_phi_58_59_ladder_4 = _2931;
                frontier_phi_58_59_ladder_5 = _2929;
            }
            _3050 = frontier_phi_58_59_ladder_5;
            _3052 = frontier_phi_58_59_ladder_4;
            _3054 = frontier_phi_58_59_ladder;
            _3056 = frontier_phi_58_59_ladder_3;
            _3058 = frontier_phi_58_59_ladder_2;
            _3060 = frontier_phi_58_59_ladder_1;
        }
        float _3065 = isnan(1.0) ? _1077 : (isnan(_1077) ? 1.0 : min(_1077, 1.0));
        _2841 = (_3065 * _3056) + _2293;
        _2843 = (_3065 * _3058) + _2295;
        _2845 = (_3065 * _3060) + _2297;
        _2847 = ((_3050 * 0.039999999105930328369140625) * _3065) + _2626;
        _2849 = ((_3052 * 0.039999999105930328369140625) * _3065) + _2628;
        _2851 = ((_3054 * 0.039999999105930328369140625) * _3065) + _2630;
    }
    else
    {
        _2841 = _2293;
        _2843 = _2295;
        _2845 = _2297;
        _2847 = _2626;
        _2849 = _2628;
        _2851 = _2630;
    }
    float _4856 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _4867 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _4878 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2868 = ((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2841 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1077))) + ((_2847 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1911)) * cbPerFrame._m0[3u].x);
    float _2869 = ((isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2843 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1077))) + ((_2849 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1911)) * cbPerFrame._m0[3u].x);
    float _2870 = ((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2845 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1077))) + ((_2851 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1911)) * cbPerFrame._m0[3u].x);
    uint _2871 = _287 + 6u;
    float _2879 = _1014 / cbSceneParam._m0[86u].x;
    float _2880 = _1015 / cbSceneParam._m0[86u].y;
    vec4 _2894 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2879, _2880, (log2((isnan(cbSceneParam._m0[77u].w) ? _936 : (isnan(_936) ? cbSceneParam._m0[77u].w : min(_936, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2896 = _2894.x;
    float _2897 = _2894.y;
    float _2898 = _2894.z;
    float _2899 = _2894.w;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_936 > cbSceneParam._m0[78u].w)
    {
        float _2954 = isnan(_936) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _936 : min(cbSceneParam._m0[80u].w, _936));
        float _2955 = _2954 / _936;
        float _2966 = _2955 * _987;
        float _2967 = _988 * _2955;
        float _2968 = (-0.0) - _2967;
        float _2970 = _2955 * _989;
        float _2972 = (cbSceneParam._m0[77u].w * _2968) / _2954;
        float _2973 = _2972 + cbSceneParam._m0[79u].w;
        float _2974 = cbSceneParam._m0[79u].w - _2967;
        float _2980 = sqrt(((_2966 * _2966) + (_2967 * _2967)) + (_2970 * _2970));
        float _2983 = (1.0 - (cbSceneParam._m0[77u].w / _2954)) * _2980;
        float _2988 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2990 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3167;
        if (abs((_2968 - _2972) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3167 = ((((_2973 > 0.0) ? exp2(_2988 * _2973) : (2.0 - exp2(_2990 * _2973))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2983;
        }
        else
        {
            float _3111 = 1.0 / cbSceneParam._m0[80u].x;
            float _3112 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : max(_2973, _2974));
            float _3113 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : min(_2973, _2974));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            _3167 = ((abs(_2980 / _2968) * cbSceneParam._m0[80u].y) * ((((_3122 - _3123) * 2.0) - ((exp2(_2988 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0)))) - exp2(_2988 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))))) * _3111)) - ((exp2(_2990 * _3122) - exp2(_2990 * _3123)) * _3111))) + (_2983 * cbSceneParam._m0[80u].z);
        }
        vec4 _3169 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2879, _2880, 1.0), 0.0);
        float _3178 = exp2((_3167 * (-1.44269502162933349609375)) * (1.0 - _3169.w));
        float _3179 = log2(_3178);
        float _3195 = log2(_2899);
        _2992 = (exp2(_3195 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].x)) * _3169.x) / cbSceneParam._m0[78u].x)) + _2896;
        _2994 = (exp2(_3195 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].y)) * _3169.y) / cbSceneParam._m0[78u].y)) + _2897;
        _2996 = (exp2(_3195 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].z)) * _3169.z) / cbSceneParam._m0[78u].z)) + _2898;
        _2998 = _3178 * _2899;
    }
    else
    {
        _2992 = _2896;
        _2994 = _2897;
        _2996 = _2898;
        _2998 = _2899;
    }
    bool _3205;
    vec4 _3008;
    vec4 _3030;
    float _3032;
    float _3036;
    float _3037;
    float _3038;
    float _3039;
    bool _3049;
    for (;;)
    {
        _3008 = cbMatDynParam._m0[0u];
        float _3010 = roundEven(_3008.y);
        bool _3011 = _3010 == 3.0;
        float _3012 = log2(_2998);
        float _3019 = exp2(_3012 * cbSceneParam._m0[78u].x) * _2868;
        float _3020 = exp2(_3012 * cbSceneParam._m0[78u].y) * _2869;
        float _3021 = exp2(_3012 * cbSceneParam._m0[78u].z) * _2870;
        float _3028 = _1003 + (-0.5);
        _3030 = cbMtdParam._m0[1u];
        _3032 = _3030.y * _3028;
        float _3035 = (_3010 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3036 = _3035 * (_3011 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2992)));
        _3037 = _3035 * (_3011 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2994)));
        _3038 = _3035 * (_3011 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2996)));
        _3039 = _3028 * 0.999000012874603271484375;
        _3049 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3049)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3039) < 0.5)
            {
                _3205 = true;
                break;
            }
        }
        uint _3146 = _1052 + uint(_3008.w);
        if ((cbInstanceData._m0[_3146].w < 1.0) && ((cbInstanceData._m0[_3146].w + _3039) < 0.5))
        {
            _3205 = true;
            break;
        }
        if ((_3032 + 1.0) < _3030.x)
        {
            _3205 = true;
            break;
        }
        _3205 = false;
        break;
    }
    float _3410;
    if (_3205)
    {
        discard_state = true;
        _3410 = 0.0;
    }
    else
    {
        _3410 = cbInstanceData._m0[_2871].w;
    }
    SV_Target.x = _3036;
    SV_Target.y = _3037;
    SV_Target.z = _3038;
    SV_Target.w = _3410;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2871].w;
    discard_exit();
}


