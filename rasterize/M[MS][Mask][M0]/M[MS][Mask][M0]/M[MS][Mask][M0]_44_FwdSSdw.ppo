#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1279;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3607 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3618 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3629 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[24u].z) + _439) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3640 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _467 = (_322.x * cbMtdParam._m0[9u].x) * ((_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353);
    float _468 = (_322.y * cbMtdParam._m0[9u].y) * ((_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354);
    float _469 = (_322.z * cbMtdParam._m0[9u].z) * ((_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355);
    float _473 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _467;
    float _476 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _468;
    float _479 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _469;
    float _487 = (((_467 - _473) * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) + _473) * 4.55000019073486328125;
    float _489 = (((_468 - _476) * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) + _476) * 4.55000019073486328125;
    float _491 = (((_469 - _479) * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) + _479) * 4.55000019073486328125;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _285) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _286) + cbTextureTilingScale._m0[14u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _576 = _574.x;
    float _577 = _574.y;
    float _578 = _574.z;
    float _587 = ((_557.z - _578) * _457) + _578;
    float _590 = ((((_557.x - _576) * _457) + _576) * 2.0) + (-1.0);
    float _591 = ((((_557.y - _577) * _457) + _577) * 2.0) + (-1.0);
    float _592 = dot(vec2(_590, _591), vec2(_590, _591));
    float _3651 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _597 = sqrt(1.0 - (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _629 = (_590 + ((((_530.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_617.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _630 = (_591 + ((((_530.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_617.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _633 = fma(_597, _233, fma(_630, _240, _629 * _226));
    float _636 = fma(_597, _234, fma(_630, _241, _629 * _227));
    float _639 = fma(_597, _235, fma(_630, _242, _629 * _228));
    float _643 = inversesqrt(dot(vec3(_633, _636, _639), vec3(_633, _636, _639)));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _672 = _670.x;
    float _673 = 1.0 - _672;
    float _679 = (cbMtdParam._m0[19u].x + dot(vec4(_643 * _633, _643 * _636, _643 * _639, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_672 - _673) * cbMtdParam._m0[24u].w) + _673) * cbMtdParam._m0[21u].z);
    float _3662 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _687 = (_680 * ((_510.x * cbMtdParam._m0[18u].x) - _487)) + _487;
    float _688 = (_680 * ((_510.y * cbMtdParam._m0[18u].y) - _489)) + _489;
    float _689 = (_680 * ((_510.z * cbMtdParam._m0[18u].z) - _491)) + _491;
    float _694 = (((_530.z - _587) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _587;
    float _698 = ((_617.z - _694) * cbMtdParam._m0[19u].w) + _694;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _718 = (_711.x * 2.0) + (-1.0);
    float _719 = (_711.y * 2.0) + (-1.0);
    float _720 = dot(vec2(_718, _719), vec2(_718, _719));
    float _3673 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _728 = ((_711.z - _698) * _680) + _698;
    float _738 = ((sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) - _597) * _680) + _597;
    float _741 = (((_718 - _629) * _680) + _629) + (cbMtdParam._m0[21u].x * _629);
    float _742 = (((_719 - _630) * _680) + _630) + (cbMtdParam._m0[21u].x * _630);
    float _744 = cbMtdParam._m0[22u].x + _617.w;
    float _747 = fma(_738, _233, fma(_742, _240, _741 * _226));
    float _750 = fma(_738, _234, fma(_742, _241, _741 * _227));
    float _753 = fma(_738, _235, fma(_742, _242, _741 * _228));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _3684 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _761 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _3706 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3717 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3728 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _779 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _830 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _820);
    float _831 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _820);
    float _832 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _820);
    float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
    float _837 = _830 * _836;
    float _838 = _831 * _836;
    float _839 = _832 * _836;
    float _845 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _846 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _864 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _867 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _870 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    uint _884 = (_266 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _890 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_884].x;
    float _891 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_884].y;
    float _892 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_884].z;
    float _3739 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    vec4 _904 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _845, cbSceneParam._m0[86u].y * _846));
    float _908 = ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * TEXCOORD_5.w) * _904.x;
    float _909 = dot(vec3(_758, _759, _760), vec3(_837, _838, _839));
    float _912 = _909 * 2.0;
    float _916 = (_912 * _758) - _837;
    float _917 = (_912 * _759) - _838;
    float _918 = (_912 * _760) - _839;
    float _922 = abs(dot(vec3(_837, _838, _839), vec3(_758, _759, _760)));
    float _3772 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _924 = sqrt(_761);
    float _937 = exp2((_924 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_924 * 3.0));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1278;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1003 = fma(_977, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _969));
        float _1007 = fma(_977, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _969));
        float _1011 = fma(_977, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _969));
        float _1036 = _969 + _758;
        float _1037 = _973 + _759;
        float _1038 = _977 + _760;
        float _1048 = fma(_1038, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036)) - _1003;
        float _1049 = fma(_1038, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036)) - _1007;
        float _1050 = fma(_1038, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036)) - _1011;
        float _1054 = inversesqrt(dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050)));
        float _1067 = ((_1054 * _1048) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1003 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1054 * _1049) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1007 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1054 * _1050) / cbModelParam._m0[34u].z) + ((((((_1011 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        float _1106 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1072.x + (-0.5));
        float _1108 = _1106 * (_1072.y + (-0.5));
        float _1109 = _1106 * (_1072.z + (-0.5));
        float _1116 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1079.x + (-0.5));
        float _1118 = _1116 * (_1079.y + (-0.5));
        float _1119 = _1116 * (_1079.z + (-0.5));
        float _1126 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1086.x + (-0.5));
        float _1128 = _1126 * (_1086.y + (-0.5));
        float _1129 = _1126 * (_1086.z + (-0.5));
        float _1136 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1093.x + (-0.5));
        float _1138 = _1136 * (_1093.y + (-0.5));
        float _1139 = _1136 * (_1093.z + (-0.5));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = _1107 * 0.5;
        float _1144 = _1117 * 0.5;
        float _1145 = _1127 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1160 = (dot(vec3(_758, _759, _760), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1170 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3820 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1172 + 1.0))) + _1177) * _1140;
        float _1187 = _1108 * 0.5;
        float _1188 = _1118 * 0.5;
        float _1189 = _1128 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_758, _759, _760), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3853 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1214 + 1.0))) + _1219) * _1141;
        float _1229 = _1109 * 0.5;
        float _1230 = _1119 * 0.5;
        float _1231 = _1129 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_758, _759, _760), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3886 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1256 + 1.0))) + _1261) * _1142;
        _1278 = _1109;
        _1280 = _1108;
        _1281 = _1107;
        _1282 = _1119;
        _1283 = _1118;
        _1284 = _1117;
        _1285 = _1129;
        _1286 = _1128;
        _1287 = _1127;
        _1288 = _1142;
        _1289 = _1141;
        _1290 = _1140;
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _1279;
        _1280 = _1279;
        _1281 = _1279;
        _1282 = _1279;
        _1283 = _1279;
        _1284 = _1279;
        _1285 = _1279;
        _1286 = _1279;
        _1287 = _1279;
        _1288 = _1279;
        _1289 = _1279;
        _1290 = _1279;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_977, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969));
        float _1322 = fma(_977, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969));
        float _1326 = fma(_977, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969));
        float _1349 = _969 + _758;
        float _1350 = _973 + _759;
        float _1351 = _977 + _760;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_758, _759, _760), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _3949 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_758, _759, _760), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _3982 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_758, _759, _760), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4015 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1279;
        _1588 = _1279;
        _1589 = _1279;
        _1590 = _1279;
        _1591 = _1279;
        _1592 = _1279;
        _1593 = _1279;
        _1594 = _1279;
        _1595 = _1279;
        _1596 = _1279;
        _1597 = _1279;
        _1598 = _1279;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1291)) + _1291;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1292)) + _1292;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1293)) + _1293;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _916 * 0.5;
    float _1656 = _917 * 0.5;
    float _1657 = _918 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1698;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1278, _1282, _1285, _1288));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1280, _1283, _1286, _1289));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1709;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1700 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1713 = (_1709 * cbModelParam._m0[1u].x) + (_1698 * (1.0 - cbModelParam._m0[1u].x));
    float _1723 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _761);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1723 : min(cbModelParam._m0[25u].z, _1723));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1771 = fma(_977, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969)) + cbModelParam._m0[13u].w;
        float _1775 = fma(_977, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969)) + cbModelParam._m0[14u].w;
        float _1779 = fma(_977, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969)) + cbModelParam._m0[15u].w;
        float _1782 = fma(_918, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916));
        float _1785 = fma(_918, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916));
        float _1788 = fma(_918, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916));
        float _1816;
        if (_1782 > 0.0)
        {
            _1816 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1816 = frontier_phi_14_12_ladder;
        }
        float _2037;
        if (_1785 > 0.0)
        {
            _2037 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2037 = frontier_phi_23_19_ladder;
        }
        float _2283;
        if (_1788 > 0.0)
        {
            _2283 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2283 = frontier_phi_35_30_ladder;
        }
        float _2285 = isnan(_2037) ? _1816 : (isnan(_1816) ? _2037 : min(_1816, _2037));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1782) + _1771;
        float _2291 = (_2286 * _1785) + _1775;
        float _2292 = (_2286 * _1788) + _1779;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2293;
        float _2297 = _2293 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 > _2297) || ((_2291 < _2295) || ((_2290 < _2295) || (_2290 > _2297))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2292, cbModelParam._m0[9u].z, fma(_2291, cbModelParam._m0[9u].y, _2290 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2292, cbModelParam._m0[10u].z, fma(_2291, cbModelParam._m0[10u].y, _2290 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2292, cbModelParam._m0[11u].z, fma(_2291, cbModelParam._m0[11u].y, _2290 * cbModelParam._m0[11u].x))), _1724);
            frontier_phi_13_35_ladder = _2416.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2416.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2416.x * cbModelParam._m0[1u].y;
        }
        _1804 = frontier_phi_13_35_ladder_2;
        _1806 = frontier_phi_13_35_ladder_1;
        _1808 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_916, _917, _918), _1724);
        _1804 = _1792.x * cbModelParam._m0[1u].y;
        _1806 = _1792.y * cbModelParam._m0[1u].y;
        _1808 = _1792.z * cbModelParam._m0[1u].y;
    }
    float _1812 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _761);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1812 : min(cbModelParam._m0[25u].w, _1812));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1866 = fma(_977, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969)) + cbModelParam._m0[21u].w;
        float _1870 = fma(_977, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969)) + cbModelParam._m0[22u].w;
        float _1874 = fma(_977, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969)) + cbModelParam._m0[23u].w;
        float _1877 = fma(_918, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916));
        float _1880 = fma(_918, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916));
        float _1883 = fma(_918, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916));
        float _2042;
        if (_1877 > 0.0)
        {
            _2042 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2042 = frontier_phi_25_21_ladder;
        }
        float _2310;
        if (_1880 > 0.0)
        {
            _2310 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2310 = frontier_phi_37_32_ladder;
        }
        float _2515;
        if (_1883 > 0.0)
        {
            _2515 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2515 = frontier_phi_46_43_ladder;
        }
        float _2517 = isnan(_2310) ? _2042 : (isnan(_2042) ? _2310 : min(_2042, _2310));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _1877) + _1866;
        float _2523 = (_2518 * _1880) + _1870;
        float _2524 = (_2518 * _1883) + _1874;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2525;
        float _2528 = _2525 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2524 > _2528) || ((_2524 < _2526) || ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 < _2526) || (_2522 > _2528))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2524, cbModelParam._m0[17u].z, fma(_2523, cbModelParam._m0[17u].y, _2522 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2524, cbModelParam._m0[18u].z, fma(_2523, cbModelParam._m0[18u].y, _2522 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2524, cbModelParam._m0[19u].z, fma(_2523, cbModelParam._m0[19u].y, _2522 * cbModelParam._m0[19u].x))), _1813);
            frontier_phi_22_46_ladder = _2723.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2723.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2723.x * cbModelParam._m0[1u].z;
        }
        _1902 = frontier_phi_22_46_ladder_2;
        _1904 = frontier_phi_22_46_ladder_1;
        _1906 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_916, _917, _918), _1813);
        _1902 = _1886.x * cbModelParam._m0[1u].z;
        _1904 = _1886.y * cbModelParam._m0[1u].z;
        _1906 = _1886.z * cbModelParam._m0[1u].z;
    }
    float _1918 = ((((1.0 - _937) * ((_924 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_937 * _924)) * _908;
    float _1919 = _1918 * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1920 = _1918 * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1921 = _1918 * ((cbModelParam._m0[1u].w * (_1906 - _1808)) + _1808);
    float _1924 = fma(_1921, cbSceneParam._m0[89u].z, fma(_1920, cbSceneParam._m0[89u].y, _1919 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1921, cbSceneParam._m0[90u].z, fma(_1920, cbSceneParam._m0[90u].y, _1919 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1921, cbSceneParam._m0[91u].z, fma(_1920, cbSceneParam._m0[91u].y, _1919 * cbSceneParam._m0[91u].x));
    vec4 _1938 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_845, _846));
    float _1940 = _1938.w;
    float _1952 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1940);
    float _1953 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1940);
    float _1954 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1940);
    uvec4 _1958 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _1960 = _1958.x * 14u;
    uint _1961 = _1960 + 13u;
    float _1968 = _908 + (-1.0);
    float _1973 = (cbLight._m0[_1961].x * _1968) + 1.0;
    float _1974 = (cbLight._m0[_1961].y * _1968) + 1.0;
    float _1975 = (cbLight._m0[_1961].z * _1968) + 1.0;
    float _1976 = (cbLight._m0[_1961].w * _1968) + 1.0;
    uint _1977 = _1960 + 5u;
    float _1983 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    uint _1987 = _1960 + 4u;
    float _1996 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
    uint _2000 = _1960 | 1u;
    float _2011 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_758, _759, _760));
    float _2014 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_758, _759, _760));
    float _4151 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _4162 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.3183098733425140380859375;
    float _2021 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * 0.3183098733425140380859375;
    float _2028 = ((cbLight._m0[_1977].x * _1983) * _2021) + (((cbLight._m0[_1987].x * _1952) * _1996) * _2019);
    float _2029 = ((_1983 * cbLight._m0[_1977].y) * _2021) + (((cbLight._m0[_1987].y * _1953) * _1996) * _2019);
    float _2030 = ((_1983 * cbLight._m0[_1977].z) * _2021) + (((cbLight._m0[_1987].z * _1954) * _1996) * _2019);
    uvec4 _2034 = floatBitsToUint(cbLight._m0[_1960 + 12u]);
    bool _2036 = _2034.x == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_2036)
    {
        _2047 = _2028;
        _2049 = _2029;
        _2051 = _2030;
    }
    else
    {
        uint _2055 = _1960 + 6u;
        float _2071 = (dot(vec3(cbLight._m0[_1960 + 2u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4173 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2074 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2047 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _2028;
        _2049 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _2029;
        _2051 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _2030;
    }
    bool _2054 = _2034.y == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2054)
    {
        _2092 = _2047;
        _2094 = _2049;
        _2096 = _2051;
    }
    else
    {
        uint _2254 = _1960 + 7u;
        float _2270 = (dot(vec3(cbLight._m0[_1960 + 3u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2271 = _2270 * _2270;
        float _4189 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2272 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2273 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2092 = (((cbLight._m0[_2254].x * 0.3183098733425140380859375) * _2272) * _2273) + _2047;
        _2094 = (((cbLight._m0[_2254].y * 0.3183098733425140380859375) * _2272) * _2273) + _2049;
        _2096 = (((cbLight._m0[_2254].z * 0.3183098733425140380859375) * _2272) * _2273) + _2051;
    }
    uint _2099 = _1960 + 8u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _761) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1960].x + _837;
    float _2115 = cbLight._m0[_1960].y + _838;
    float _2116 = cbLight._m0[_1960].z + _839;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_1960].xyz));
    float _4205 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2128 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2129 = dot(vec3(_758, _759, _760), vec3(_2121, _2122, _2123));
    float _4227 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2121, _2122, _2123));
    float _4238 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2113 * _2113;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2152 = (exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2153 = 1.0 - _2113;
    float _2164 = (0.5 / (((_2128 * ((_2127 * _2153) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2153) + _2113) * _2127))) * _2127;
    float _4249 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    uint _2180 = _1960 + 9u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _761) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_2000].x + _837;
    float _2194 = cbLight._m0[_2000].y + _838;
    float _2195 = cbLight._m0[_2000].z + _839;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2000].xyz));
    float _4260 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2207 = dot(vec3(_758, _759, _760), vec3(_2200, _2201, _2202));
    float _4271 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2200, _2201, _2202));
    float _4282 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2192 * _2192;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2228 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2229 = 1.0 - _2192;
    float _2239 = (0.5 / (((_2128 * ((_2206 * _2229) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2229) + _2192) * _2206))) * _2206;
    float _4293 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    float _2251 = (((_2228 * cbLight._m0[_2180].x) * _2241) * _1983) + ((((cbLight._m0[_2099].x * _1952) * _2152) * _2166) * _1996);
    float _2252 = (((_2228 * cbLight._m0[_2180].y) * _2241) * _1983) + ((((cbLight._m0[_2099].y * _1953) * _2152) * _2166) * _1996);
    float _2253 = (((_2228 * cbLight._m0[_2180].z) * _2241) * _1983) + ((((cbLight._m0[_2099].z * _1954) * _2152) * _2166) * _1996);
    float _2315;
    float _2317;
    float _2319;
    if (_2036)
    {
        _2315 = _2251;
        _2317 = _2252;
        _2319 = _2253;
    }
    else
    {
        uint _2321 = _1960 + 2u;
        uint _2325 = _1960 + 10u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _761) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _837;
        float _2342 = cbLight._m0[_2321].y + _838;
        float _2343 = cbLight._m0[_2321].z + _839;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2321].xyz));
        float _4304 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2355 = dot(vec3(_758, _759, _760), vec3(_2348, _2349, _2350));
        float _4315 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4326 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2376 = (exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2377 = 1.0 - _2340;
        float _2387 = (0.5 / (((_2128 * ((_2354 * _2377) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2377) + _2340) * _2354))) * _2354;
        float _4337 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2389 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2390 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2315 = (((_2376 * cbLight._m0[_2325].x) * _2389) * _2390) + _2251;
        _2317 = (((_2376 * cbLight._m0[_2325].y) * _2389) * _2390) + _2252;
        _2319 = (((_2376 * cbLight._m0[_2325].z) * _2389) * _2390) + _2253;
    }
    float _2425;
    float _2427;
    float _2429;
    if (_2054)
    {
        _2425 = _2315;
        _2427 = _2317;
        _2429 = _2319;
    }
    else
    {
        uint _2436 = _1960 + 3u;
        uint _2440 = _1960 + 11u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _761) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _837;
        float _2457 = cbLight._m0[_2436].y + _838;
        float _2458 = cbLight._m0[_2436].z + _839;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2436].xyz));
        float _4353 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2470 = dot(vec3(_758, _759, _760), vec3(_2463, _2464, _2465));
        float _4364 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4375 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2491 = (exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2492 = 1.0 - _2455;
        float _2502 = (0.5 / (((_2128 * ((_2469 * _2492) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2492) + _2455) * _2469))) * _2469;
        float _4386 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2425 = (((_2491 * cbLight._m0[_2440].x) * _2504) * _2505) + _2315;
        _2427 = (((_2491 * cbLight._m0[_2440].y) * _2504) * _2505) + _2317;
        _2429 = (((_2491 * cbLight._m0[_2440].z) * _2504) * _2505) + _2319;
    }
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    if (_1958.y == 0u)
    {
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2580;
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2580;
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2580;
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.x;
        uint _2607 = uint((float(_2595.y) * floor(float(uint(cbSceneParam._m0[85u].y * _846) / _2596))) + floor(float(uint(cbSceneParam._m0[85u].x * _845) / _2596)));
        float _2617 = (log2(_2583 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2618 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        uint _2621 = uint(isnan(14.0) ? _2618 : (isnan(_2618) ? 14.0 : min(_2618, 14.0)));
        uvec4 _2626 = texelFetch(g_lightClusterGridBuffer, int(((_2621 << 2u) + (_2607 << 6u)) >> 2u));
        uint _2627 = _2626.x;
        uint _2628 = _2595.z;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        if (((((1u << ((_2628 >> 4u) & 15u)) + 4294967295u) & _2627) == 0u) || ((_2628 & 240u) == 0u))
        {
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
        }
        else
        {
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            uint _2879 = 0u;
            uint _2888;
            bool _2889;
            for (;;)
            {
                _2888 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                _2889 = _2888 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2889)
                {
                    frontier_phi_61_pred = _2873;
                    frontier_phi_61_pred_1 = _2878;
                    frontier_phi_61_pred_2 = _2877;
                    frontier_phi_61_pred_3 = _2876;
                    frontier_phi_61_pred_4 = _2875;
                    frontier_phi_61_pred_5 = _2874;
                }
                else
                {
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    uint _3003;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2888;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    for (;;)
                    {
                        uint _3007 = uint(findLSB(_3003)) + (_2879 << 5u);
                        uint _3004 = (_3003 + 4294967295u) & _3003;
                        uint _3009 = _3007 * 48u;
                        vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 3u)).x));
                        uint _3029 = (_3007 * 48u) + 4u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3048 = (_3007 * 48u) + 8u;
                        vec3 _3059 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x));
                        float _3063 = _3023.x - _2581;
                        float _3064 = _3023.y - _2582;
                        float _3065 = _3023.z - _2583;
                        float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                        float _3069 = inversesqrt(_3066);
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3073 = dot(vec3(_864, _867, _870), vec3(_3070, _3071, _3072));
                        float _3078 = 1.0 - (_3066 * _3023.w);
                        float _4412 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3080 = sqrt(_3066) * _3042.w;
                        float _3083 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3073) + _3084;
                        float _3090 = _3080 * _3080;
                        float _3094 = ((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3079) / ((_3090 * 0.699999988079071044921875) + 1.0);
                        float _3098 = (-0.0) - _2581;
                        float _3099 = (-0.0) - _2582;
                        float _3100 = (-0.0) - _2583;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3115 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                        float _3116 = 1.0 - _924;
                        float _3123 = sqrt(1.0 - ((1.0 - (_3116 * _3116)) * (1.0 - (_3115 * _3115))));
                        float _3124 = _3123 * _3123;
                        float _3125 = _3124 * _3124;
                        float _3126 = _3105 + _3070;
                        float _3127 = _3106 + _3071;
                        float _3128 = _3107 + _3072;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3136 = dot(vec3(_864, _867, _870), vec3(_3105, _3106, _3107));
                        float _4428 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3140 = dot(vec3(_864, _867, _870), vec3(_3132 * _3126, _3132 * _3127, _3132 * _3128));
                        float _4439 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3147 = ((_3143 * _3143) * (_3125 + (-1.0))) + 1.0;
                        float _3148 = _3083 * _3124;
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3073) + _3149;
                        float _4450 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3154 = 1.0 - _3124;
                        float _3164 = (0.5 / (((_3153 * ((_3139 * _3154) + _3124)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3124) * _3139))) * _3153;
                        float _4461 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3175 = (((_3125 * 3.1415927410125732421875) * (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) / ((_3147 * _3147) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125))) * _3079;
                        _2932 = (_3094 * _3042.x) + _3000;
                        _2933 = (_3094 * _3042.y) + _3001;
                        _2934 = (_3094 * _3042.z) + _3002;
                        _2929 = (_3175 * _3059.x) + _2997;
                        _2930 = (_3175 * _3059.y) + _2998;
                        _2931 = (_3175 * _3059.z) + _2999;
                        if (_3004 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _3004;
                        }
                    }
                    frontier_phi_61_pred = _2929;
                    frontier_phi_61_pred_1 = _2934;
                    frontier_phi_61_pred_2 = _2933;
                    frontier_phi_61_pred_3 = _2932;
                    frontier_phi_61_pred_4 = _2931;
                    frontier_phi_61_pred_5 = _2930;
                }
                _2729 = frontier_phi_61_pred;
                _2739 = frontier_phi_61_pred_1;
                _2737 = frontier_phi_61_pred_2;
                _2735 = frontier_phi_61_pred_3;
                _2733 = frontier_phi_61_pred_4;
                _2731 = frontier_phi_61_pred_5;
                uint _2880 = _2879 + 1u;
                if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2873 = _2729;
                    _2874 = _2731;
                    _2875 = _2733;
                    _2876 = _2735;
                    _2877 = _2737;
                    _2878 = _2739;
                    _2879 = _2880;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
        }
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.z;
        uint _2745 = (_2743 >> 8u) & 15u;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        if (((4294967295u << _2745) & _2627) == 0u)
        {
            _2841 = _2728;
            _2843 = _2730;
            _2845 = _2732;
            _2847 = _2734;
            _2849 = _2736;
            _2851 = _2738;
        }
        else
        {
            float _2866 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
            float _2867 = _2866 * _2581;
            float _2868 = _2866 * _2582;
            float _2869 = _2866 * _2583;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2745 < ((_2743 >> 12u) & 15u))
            {
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2980 = _2728;
                float _2981 = _2730;
                float _2982 = _2732;
                float _2983 = _2734;
                float _2984 = _2736;
                float _2985 = _2738;
                uint _2986 = _2745;
                uint _2995;
                bool _2996;
                for (;;)
                {
                    _2995 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                    _2996 = _2995 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2996)
                    {
                        frontier_phi_67_pred = _2983;
                        frontier_phi_67_pred_1 = _2984;
                        frontier_phi_67_pred_2 = _2985;
                        frontier_phi_67_pred_3 = _2982;
                        frontier_phi_67_pred_4 = _2981;
                        frontier_phi_67_pred_5 = _2980;
                    }
                    else
                    {
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3193 = _2980;
                        float _3194 = _2981;
                        float _3195 = _2982;
                        float _3196 = _2983;
                        float _3197 = _2984;
                        float _3198 = _2985;
                        uint _3199 = _2995;
                        uint _3200;
                        vec4 _3225;
                        float _3226;
                        vec4 _3241;
                        vec3 _3253;
                        vec4 _3268;
                        vec4 _3283;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3210 = ((_2986 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3199));
                            _3200 = (_3199 + 4294967295u) & _3199;
                            uint _3212 = _3210 * 40u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            _3226 = _3225.w;
                            uint _3228 = (_3210 * 40u) + 4u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3243 = (_3210 * 40u) + 8u;
                            _3253 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x));
                            uint _3255 = (_3210 * 40u) + 16u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3210 * 40u) + 20u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3210 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3210 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_2583, _3317.z, fma(_2582, _3317.y, _3317.x * _2581)) + _3317.w;
                            _3330 = !((fma(_2583, _3298.z, fma(_2582, _3298.y, _3298.x * _2581)) + _3298.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3225.x - _2581;
                                float _3358 = _3225.y - _2582;
                                float _3359 = _3225.z - _2583;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3226 * _3226));
                                float _4472 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3375 = sqrt(_3360) * _3241.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_864, _867, _870))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_2583, _3268.z, fma(_2582, _3268.y, _3268.x * _2581)) + _3268.w) / _3329;
                                float _3389 = (fma(_2583, _3283.z, fma(_2582, _3283.y, _3283.x * _2581)) + _3283.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4488 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _924;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2867;
                                float _3419 = _3365 - _2868;
                                float _3420 = _3366 - _2869;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_864, _867, _870), vec3((-0.0) - _2867, (-0.0) - _2868, (-0.0) - _2869));
                                float _4499 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3432 = dot(vec3(_864, _867, _870), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4510 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_864, _867, _870), vec3(_3364, _3365, _3366))) + _3441;
                                float _4521 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4532 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3469 * _3253.x;
                                frontier_phi_73_pred_1 = _3469 * _3253.y;
                                frontier_phi_73_pred_2 = _3395 * _3241.z;
                                frontier_phi_73_pred_3 = _3395 * _3241.y;
                                frontier_phi_73_pred_4 = _3395 * _3241.x;
                                frontier_phi_73_pred_5 = _3469 * _3253.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3473 = frontier_phi_73_pred;
                            _3474 = frontier_phi_73_pred_1;
                            _3478 = frontier_phi_73_pred_2;
                            _3477 = frontier_phi_73_pred_3;
                            _3476 = frontier_phi_73_pred_4;
                            _3475 = frontier_phi_73_pred_5;
                            _3183 = _3476 + _3196;
                            _3184 = _3477 + _3197;
                            _3185 = _3478 + _3198;
                            _3180 = _3473 + _3193;
                            _3181 = _3474 + _3194;
                            _3182 = _3475 + _3195;
                            if (_3200 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3200;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3183;
                        frontier_phi_67_pred_1 = _3184;
                        frontier_phi_67_pred_2 = _3185;
                        frontier_phi_67_pred_3 = _3182;
                        frontier_phi_67_pred_4 = _3181;
                        frontier_phi_67_pred_5 = _3180;
                    }
                    _2848 = frontier_phi_67_pred;
                    _2850 = frontier_phi_67_pred_1;
                    _2852 = frontier_phi_67_pred_2;
                    _2846 = frontier_phi_67_pred_3;
                    _2844 = frontier_phi_67_pred_4;
                    _2842 = frontier_phi_67_pred_5;
                    uint _2987 = _2986 + 1u;
                    if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2980 = _2842;
                        _2981 = _2844;
                        _2982 = _2846;
                        _2983 = _2848;
                        _2984 = _2850;
                        _2985 = _2852;
                        _2986 = _2987;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2850;
                frontier_phi_55_56_ladder_1 = _2852;
                frontier_phi_55_56_ladder_2 = _2848;
                frontier_phi_55_56_ladder_3 = _2846;
                frontier_phi_55_56_ladder_4 = _2844;
                frontier_phi_55_56_ladder_5 = _2842;
            }
            else
            {
                frontier_phi_55_56_ladder = _2736;
                frontier_phi_55_56_ladder_1 = _2738;
                frontier_phi_55_56_ladder_2 = _2734;
                frontier_phi_55_56_ladder_3 = _2732;
                frontier_phi_55_56_ladder_4 = _2730;
                frontier_phi_55_56_ladder_5 = _2728;
            }
            _2841 = frontier_phi_55_56_ladder_5;
            _2843 = frontier_phi_55_56_ladder_4;
            _2845 = frontier_phi_55_56_ladder_3;
            _2847 = frontier_phi_55_56_ladder_2;
            _2849 = frontier_phi_55_56_ladder;
            _2851 = frontier_phi_55_56_ladder_1;
        }
        float _2856 = isnan(1.0) ? _908 : (isnan(_908) ? 1.0 : min(_908, 1.0));
        _2640 = (_2856 * _2847) + _2092;
        _2642 = (_2856 * _2849) + _2094;
        _2644 = (_2856 * _2851) + _2096;
        _2646 = ((_2841 * 0.039999999105930328369140625) * _2856) + _2425;
        _2648 = ((_2843 * 0.039999999105930328369140625) * _2856) + _2427;
        _2650 = ((_2845 * 0.039999999105930328369140625) * _2856) + _2429;
    }
    else
    {
        _2640 = _2092;
        _2642 = _2094;
        _2644 = _2096;
        _2646 = _2425;
        _2648 = _2427;
        _2650 = _2429;
    }
    float _4548 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4559 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4570 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    uint _2670 = _266 + 6u;
    float _2678 = _845 / cbSceneParam._m0[86u].x;
    float _2679 = _846 / cbSceneParam._m0[86u].y;
    vec4 _2693 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, (log2((isnan(cbSceneParam._m0[77u].w) ? _779 : (isnan(_779) ? cbSceneParam._m0[77u].w : min(_779, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2695 = _2693.x;
    float _2696 = _2693.y;
    float _2697 = _2693.z;
    float _2698 = _2693.w;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_779 > cbSceneParam._m0[78u].w)
    {
        float _2753 = isnan(_779) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _779 : min(cbSceneParam._m0[80u].w, _779));
        float _2754 = _2753 / _779;
        float _2765 = _2754 * _830;
        float _2766 = _831 * _2754;
        float _2767 = (-0.0) - _2766;
        float _2769 = _2754 * _832;
        float _2771 = (cbSceneParam._m0[77u].w * _2767) / _2753;
        float _2772 = _2771 + cbSceneParam._m0[79u].w;
        float _2773 = cbSceneParam._m0[79u].w - _2766;
        float _2779 = sqrt(((_2765 * _2765) + (_2766 * _2766)) + (_2769 * _2769));
        float _2782 = (1.0 - (cbSceneParam._m0[77u].w / _2753)) * _2779;
        float _2787 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2789 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2942;
        if (abs((_2767 - _2771) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2942 = ((((_2772 > 0.0) ? exp2(_2787 * _2772) : (2.0 - exp2(_2789 * _2772))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2782;
        }
        else
        {
            float _2902 = 1.0 / cbSceneParam._m0[80u].x;
            float _2903 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : max(_2772, _2773));
            float _2904 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : min(_2772, _2773));
            float _2913 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : min(_2903, 0.0));
            float _2914 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : min(_2904, 0.0));
            _2942 = ((abs(_2779 / _2767) * cbSceneParam._m0[80u].y) * ((((_2913 - _2914) * 2.0) - ((exp2(_2787 * (isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0)))) - exp2(_2787 * (isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0))))) * _2902)) - ((exp2(_2789 * _2913) - exp2(_2789 * _2914)) * _2902))) + (_2782 * cbSceneParam._m0[80u].z);
        }
        vec4 _2944 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, 1.0), 0.0);
        float _2953 = exp2((_2942 * (-1.44269502162933349609375)) * (1.0 - _2944.w));
        float _2954 = log2(_2953);
        float _2970 = log2(_2698);
        _2791 = (exp2(_2970 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].x)) * _2944.x) / cbSceneParam._m0[78u].x)) + _2695;
        _2793 = (exp2(_2970 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].y)) * _2944.y) / cbSceneParam._m0[78u].y)) + _2696;
        _2795 = (exp2(_2970 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].z)) * _2944.z) / cbSceneParam._m0[78u].z)) + _2697;
        _2797 = _2953 * _2698;
    }
    else
    {
        _2791 = _2695;
        _2793 = _2696;
        _2795 = _2697;
        _2797 = _2698;
    }
    float _2809 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2810 = _2809 == 3.0;
    float _2811 = log2(_2797);
    float _2818 = exp2(_2811 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2640 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _908))) + ((_2646 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1713)) * cbPerFrame._m0[3u].x));
    float _2819 = exp2(_2811 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2642 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _908))) + ((_2648 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1713)) * cbPerFrame._m0[3u].x));
    float _2820 = exp2(_2811 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2644 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _908))) + ((_2650 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1713)) * cbPerFrame._m0[3u].x));
    float _2829 = (_2809 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2829 * (_2810 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2791)));
    SV_Target.y = _2829 * (_2810 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2793)));
    SV_Target.z = _2829 * (_2810 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2795)));
    SV_Target.w = cbInstanceData._m0[_2670].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2670].w;
}


