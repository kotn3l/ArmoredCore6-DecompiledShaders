#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1422;
float _4061;
float _4062;
float _4063;
float _4064;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _404 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _364.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].z) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4073 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _443 = (_436 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _444 = (_436 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _445 = (_436 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _482 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _484 = _482.x;
    float _494 = dot(vec4(_484, _482.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _508 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _364.y) * 2.0) - ((((_484 - _494) * cbMtdParam._m0[24u].z) + _494) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4084 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _516 = (_509 * ((_462.x * cbMtdParam._m0[13u].x) - _443)) + _443;
    float _517 = (_509 * ((_462.y * cbMtdParam._m0[13u].y) - _444)) + _444;
    float _518 = (_509 * ((_462.z * cbMtdParam._m0[13u].z) - _445)) + _445;
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _274) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _275) + cbTextureTilingScale._m0[24u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _555 = _553.x;
    float _565 = dot(vec4(_555, _553.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _577 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _364.z) * 2.0) - ((((_555 - _565) * cbMtdParam._m0[24u].z) + _565) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4095 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _591 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_578 * ((_536.x * cbMtdParam._m0[14u].x) - _516)) + _516);
    float _594 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_578 * ((_536.y * cbMtdParam._m0[14u].y) - _517)) + _517);
    float _597 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_578 * ((_536.z * cbMtdParam._m0[14u].z) - _518)) + _518);
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _654 = _652.x;
    float _655 = _652.y;
    float _656 = _652.z;
    float _663 = ((_635.x - _654) * _436) + _654;
    float _664 = ((_635.y - _655) * _436) + _655;
    float _665 = ((_635.z - _656) * _436) + _656;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _688 = ((_677.x - _663) * _509) + _663;
    float _689 = ((_677.y - _664) * _509) + _664;
    float _690 = ((_677.z - _665) * _509) + _665;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _274) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _275) + cbTextureTilingScale._m0[23u].w));
    float _715 = ((_702.z - _690) * _578) + _690;
    float _718 = ((((_702.x - _688) * _578) + _688) * 2.0) + (-1.0);
    float _720 = ((((_702.y - _689) * _578) + _689) * 2.0) + (-1.0);
    float _721 = dot(vec2(_718, _720), vec2(_718, _720));
    float _4106 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _726 = sqrt(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _765 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _767 = _765.x;
    float _768 = 1.0 - _767;
    float _781 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_767 - _768) * cbMtdParam._m0[24u].w) + _768) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4117 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _782 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _789 = (_782 * ((_615.x * cbMtdParam._m0[18u].x) - _591)) + _591;
    float _790 = (_782 * ((_615.y * cbMtdParam._m0[18u].y) - _594)) + _594;
    float _791 = (_782 * ((_615.z * cbMtdParam._m0[18u].z) - _597)) + _597;
    float _795 = (cbMtdParam._m0[19u].w * (_740.z - _715)) + _715;
    vec4 _808 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _815 = (_808.x * 2.0) + (-1.0);
    float _816 = (_808.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _4128 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _825 = (_782 * (_808.z - _795)) + _795;
    float _828 = (((_740.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _718;
    float _829 = (((_740.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _720;
    float _841 = (((_815 - _828) + (cbMtdParam._m0[21u].x * _828)) * _782) + _828;
    float _842 = (((_816 - _829) + (cbMtdParam._m0[21u].x * _829)) * _782) + _829;
    float _843 = (_782 * (sqrt(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) - _726)) + _726;
    float _847 = cbMtdParam._m0[22u].x + _740.w;
    float _850 = fma(_843, _241 * NORMAL.x, fma(_842, _248 * TANGENT.x, (_234 * _226) * _841));
    float _853 = fma(_843, _241 * NORMAL.y, fma(_842, _248 * TANGENT.y, (_234 * _227) * _841));
    float _856 = fma(_843, _241 * NORMAL.z, fma(_842, _248 * TANGENT.z, (_234 * _228) * _841));
    float _860 = inversesqrt(dot(vec3(_850, _853, _856), vec3(_850, _853, _856)));
    float _861 = _860 * _850;
    float _862 = _860 * _853;
    float _863 = _860 * _856;
    float _4139 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _864 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4161 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4172 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4183 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _882 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _933 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _923);
    float _934 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _923);
    float _935 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _923);
    float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
    float _940 = _933 * _939;
    float _941 = _934 * _939;
    float _942 = _935 * _939;
    vec4 _947 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _949 = _947.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1103 = sqrt(((_933 * _933) + (_934 * _934)) + (_935 * _935));
        float _1109 = (cbMatDynParam._m0[5u].x * _1103) + cbMatDynParam._m0[5u].y;
        float _4194 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1114 = (cbMatDynParam._m0[5u].z * _1103) + cbMatDynParam._m0[5u].w;
        float _4205 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) - _1110)) + _1110) < ((_949 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _960 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _961 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _979 = fma(_863, cbSceneParam._m0[5u].z, fma(_862, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _861));
    float _982 = fma(_863, cbSceneParam._m0[6u].z, fma(_862, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _861));
    float _985 = fma(_863, cbSceneParam._m0[7u].z, fma(_862, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _861));
    uint _998 = _254 + 9u;
    uint _999 = _998 + uint(cbMatDynParam._m0[0u].w);
    float _1005 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_999].x;
    float _1006 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * cbInstanceData._m0[_999].y;
    float _1007 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * cbInstanceData._m0[_999].z;
    float _4216 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _4227 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    vec4 _1019 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _960, cbSceneParam._m0[86u].y * _961));
    float _1023 = ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * TEXCOORD_5.w) * _1019.x;
    float _1024 = dot(vec3(_861, _862, _863), vec3(_940, _941, _942));
    float _1027 = _1024 * 2.0;
    float _1031 = (_1027 * _861) - _940;
    float _1032 = (_1027 * _862) - _941;
    float _1033 = (_1027 * _863) - _942;
    float _1037 = abs(dot(vec3(_940, _941, _942), vec3(_861, _862, _863)));
    float _4249 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1039 = sqrt(_864);
    float _1052 = exp2((_1039 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1039 * 3.0));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1421;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1146 = fma(_1092, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084));
        float _1150 = fma(_1092, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084));
        float _1154 = fma(_1092, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084));
        float _1179 = _1084 + _861;
        float _1180 = _1088 + _862;
        float _1181 = _1092 + _863;
        float _1191 = fma(_1181, cbModelParam._m0[26u].z, fma(_1180, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1179)) - _1146;
        float _1192 = fma(_1181, cbModelParam._m0[27u].z, fma(_1180, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1179)) - _1150;
        float _1193 = fma(_1181, cbModelParam._m0[28u].z, fma(_1180, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1179)) - _1154;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1146 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1150 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[34u].z) + ((((((_1154 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1249 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1215.x + (-0.5));
        float _1251 = _1249 * (_1215.y + (-0.5));
        float _1252 = _1249 * (_1215.z + (-0.5));
        float _1259 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1222.x + (-0.5));
        float _1261 = _1259 * (_1222.y + (-0.5));
        float _1262 = _1259 * (_1222.z + (-0.5));
        float _1269 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1229.x + (-0.5));
        float _1271 = _1269 * (_1229.y + (-0.5));
        float _1272 = _1269 * (_1229.z + (-0.5));
        float _1279 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1236.x + (-0.5));
        float _1281 = _1279 * (_1236.y + (-0.5));
        float _1282 = _1279 * (_1236.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1303 = (dot(vec3(_861, _862, _863), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1313 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4297 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1315 + 1.0))) + _1320) * _1283;
        float _1330 = _1251 * 0.5;
        float _1331 = _1261 * 0.5;
        float _1332 = _1271 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_861, _862, _863), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4330 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1357 + 1.0))) + _1362) * _1284;
        float _1372 = _1252 * 0.5;
        float _1373 = _1262 * 0.5;
        float _1374 = _1272 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_861, _862, _863), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4363 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1399 + 1.0))) + _1404) * _1285;
        _1421 = _1252;
        _1423 = _1251;
        _1424 = _1250;
        _1425 = _1262;
        _1426 = _1261;
        _1427 = _1260;
        _1428 = _1272;
        _1429 = _1271;
        _1430 = _1270;
        _1431 = _1285;
        _1432 = _1284;
        _1433 = _1283;
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1422;
        _1423 = _1422;
        _1424 = _1422;
        _1425 = _1422;
        _1426 = _1422;
        _1427 = _1422;
        _1428 = _1422;
        _1429 = _1422;
        _1430 = _1422;
        _1431 = _1422;
        _1432 = _1422;
        _1433 = _1422;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1462 = fma(_1092, cbModelParam._m0[30u].z, fma(_1088, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084));
        float _1466 = fma(_1092, cbModelParam._m0[31u].z, fma(_1088, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084));
        float _1470 = fma(_1092, cbModelParam._m0[32u].z, fma(_1088, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084));
        float _1493 = _1084 + _861;
        float _1494 = _1088 + _862;
        float _1495 = _1092 + _863;
        float _1505 = fma(_1495, cbModelParam._m0[30u].z, fma(_1494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1493)) - _1462;
        float _1506 = fma(_1495, cbModelParam._m0[31u].z, fma(_1494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1493)) - _1466;
        float _1507 = fma(_1495, cbModelParam._m0[32u].z, fma(_1494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1493)) - _1470;
        float _1511 = inversesqrt(dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507)));
        float _1524 = ((_1511 * _1505) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1462 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1511 * _1506) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1466 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1511 * _1507) / cbModelParam._m0[35u].z) + ((((((_1470 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        float _1561 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1528.x + (-0.5));
        float _1563 = _1561 * (_1528.y + (-0.5));
        float _1564 = _1561 * (_1528.z + (-0.5));
        float _1571 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1535.x + (-0.5));
        float _1573 = _1571 * (_1535.y + (-0.5));
        float _1574 = _1571 * (_1535.z + (-0.5));
        float _1581 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1542.x + (-0.5));
        float _1583 = _1581 * (_1542.y + (-0.5));
        float _1584 = _1581 * (_1542.z + (-0.5));
        float _1591 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1549.x + (-0.5));
        float _1593 = _1591 * (_1549.y + (-0.5));
        float _1594 = _1591 * (_1549.z + (-0.5));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = _1562 * 0.5;
        float _1599 = _1572 * 0.5;
        float _1600 = _1582 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_861, _862, _863), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4426 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1625 + 1.0))) + _1630) * _1595;
        float _1640 = _1563 * 0.5;
        float _1641 = _1573 * 0.5;
        float _1642 = _1583 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_861, _862, _863), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4459 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1667 + 1.0))) + _1672) * _1596;
        float _1682 = _1564 * 0.5;
        float _1683 = _1574 * 0.5;
        float _1684 = _1584 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_861, _862, _863), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4492 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1709 + 1.0))) + _1714) * _1597;
        _1731 = _1564;
        _1732 = _1563;
        _1733 = _1562;
        _1734 = _1574;
        _1735 = _1573;
        _1736 = _1572;
        _1737 = _1584;
        _1738 = _1583;
        _1739 = _1582;
        _1740 = _1597;
        _1741 = _1596;
        _1742 = _1595;
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
    }
    else
    {
        _1731 = _1422;
        _1732 = _1422;
        _1733 = _1422;
        _1734 = _1422;
        _1735 = _1422;
        _1736 = _1422;
        _1737 = _1422;
        _1738 = _1422;
        _1739 = _1422;
        _1740 = _1422;
        _1741 = _1422;
        _1742 = _1422;
        _1743 = 0.0;
        _1744 = 0.0;
        _1745 = 0.0;
    }
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1434)) + _1434;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1435)) + _1435;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1436)) + _1436;
    float _1778 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1755));
    float _1799 = _1031 * 0.5;
    float _1800 = _1032 * 0.5;
    float _1801 = _1033 * 0.5;
    float _1802 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1805 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1808 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1842;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1815 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1421, _1425, _1428, _1431));
        float _1819 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1423, _1426, _1429, _1432));
        float _1823 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1424, _1427, _1430, _1433));
        float _1830 = dot(vec4(cbModelParam._m0[39u]), vec4(_1799, _1800, _1801, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1853;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1844 = dot(vec4(cbModelParam._m0[40u]), vec4(_1799, _1800, _1801, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1857 = (_1853 * cbModelParam._m0[1u].x) + (_1842 * (1.0 - cbModelParam._m0[1u].x));
    float _1867 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _864);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1867 : min(cbModelParam._m0[25u].z, _1867));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1915 = fma(_1092, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1084)) + cbModelParam._m0[13u].w;
        float _1919 = fma(_1092, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1084)) + cbModelParam._m0[14u].w;
        float _1923 = fma(_1092, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1084)) + cbModelParam._m0[15u].w;
        float _1926 = fma(_1033, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031));
        float _1929 = fma(_1033, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031));
        float _1932 = fma(_1033, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031));
        float _1960;
        if (_1926 > 0.0)
        {
            _1960 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1960 = frontier_phi_17_15_ladder;
        }
        float _2129;
        if (_1929 > 0.0)
        {
            _2129 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2129 = frontier_phi_26_22_ladder;
        }
        float _2424;
        if (_1932 > 0.0)
        {
            _2424 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2424 = frontier_phi_38_33_ladder;
        }
        float _2426 = isnan(_2129) ? _1960 : (isnan(_1960) ? _2129 : min(_1960, _2129));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1926) + _1915;
        float _2432 = (_2427 * _1929) + _1919;
        float _2433 = (_2427 * _1932) + _1923;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2434;
        float _2438 = _2434 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 > _2438) || ((_2432 < _2436) || ((_2431 < _2436) || (_2431 > _2438))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2433, cbModelParam._m0[9u].z, fma(_2432, cbModelParam._m0[9u].y, _2431 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2433, cbModelParam._m0[10u].z, fma(_2432, cbModelParam._m0[10u].y, _2431 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2433, cbModelParam._m0[11u].z, fma(_2432, cbModelParam._m0[11u].y, _2431 * cbModelParam._m0[11u].x))), _1868);
            frontier_phi_16_38_ladder = _2578.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2578.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2578.x * cbModelParam._m0[1u].y;
        }
        _1948 = frontier_phi_16_38_ladder_2;
        _1950 = frontier_phi_16_38_ladder_1;
        _1952 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1031, _1032, _1033), _1868);
        _1948 = _1936.x * cbModelParam._m0[1u].y;
        _1950 = _1936.y * cbModelParam._m0[1u].y;
        _1952 = _1936.z * cbModelParam._m0[1u].y;
    }
    float _1956 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _864);
    float _1957 = isnan(_1956) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1956 : min(cbModelParam._m0[25u].w, _1956));
    float _2046;
    float _2048;
    float _2050;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2010 = fma(_1092, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1084)) + cbModelParam._m0[21u].w;
        float _2014 = fma(_1092, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1084)) + cbModelParam._m0[22u].w;
        float _2018 = fma(_1092, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1084)) + cbModelParam._m0[23u].w;
        float _2021 = fma(_1033, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031));
        float _2024 = fma(_1033, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031));
        float _2027 = fma(_1033, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031));
        float _2134;
        if (_2021 > 0.0)
        {
            _2134 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2134 = frontier_phi_28_24_ladder;
        }
        float _2451;
        if (_2024 > 0.0)
        {
            _2451 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2451 = frontier_phi_40_35_ladder;
        }
        float _2778;
        if (_2027 > 0.0)
        {
            _2778 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2778 = frontier_phi_50_47_ladder;
        }
        float _2780 = isnan(_2451) ? _2134 : (isnan(_2134) ? _2451 : min(_2134, _2451));
        float _2781 = isnan(_2778) ? _2780 : (isnan(_2780) ? _2778 : min(_2780, _2778));
        float _2785 = (_2781 * _2021) + _2010;
        float _2786 = (_2781 * _2024) + _2014;
        float _2787 = (_2781 * _2027) + _2018;
        float _2788 = _2781 * 9.9999997473787516355514526367188e-05;
        float _2789 = (-1.0) - _2788;
        float _2791 = _2788 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2787 > _2791) || ((_2787 < _2789) || ((_2786 > _2791) || ((_2786 < _2789) || ((_2785 < _2789) || (_2785 > _2791))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2787, cbModelParam._m0[17u].z, fma(_2786, cbModelParam._m0[17u].y, _2785 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2787, cbModelParam._m0[18u].z, fma(_2786, cbModelParam._m0[18u].y, _2785 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2787, cbModelParam._m0[19u].z, fma(_2786, cbModelParam._m0[19u].y, _2785 * cbModelParam._m0[19u].x))), _1957);
            frontier_phi_25_50_ladder = _2905.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2905.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2905.x * cbModelParam._m0[1u].z;
        }
        _2046 = frontier_phi_25_50_ladder_2;
        _2048 = frontier_phi_25_50_ladder_1;
        _2050 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1031, _1032, _1033), _1957);
        _2046 = _2030.x * cbModelParam._m0[1u].z;
        _2048 = _2030.y * cbModelParam._m0[1u].z;
        _2050 = _2030.z * cbModelParam._m0[1u].z;
    }
    float _2062 = ((((1.0 - _1052) * ((_1039 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1052 * _1039)) * _1023;
    float _2063 = _2062 * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2064 = _2062 * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2065 = _2062 * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2068 = fma(_2065, cbSceneParam._m0[89u].z, fma(_2064, cbSceneParam._m0[89u].y, _2063 * cbSceneParam._m0[89u].x));
    float _2071 = fma(_2065, cbSceneParam._m0[90u].z, fma(_2064, cbSceneParam._m0[90u].y, _2063 * cbSceneParam._m0[90u].x));
    float _2074 = fma(_2065, cbSceneParam._m0[91u].z, fma(_2064, cbSceneParam._m0[91u].y, _2063 * cbSceneParam._m0[91u].x));
    float _2108 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2121 = _2108 / _2120;
    float _2122 = _2112 / _2120;
    float _2123 = _2116 / _2120;
    float _2270;
    float _2271;
    float _2272;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2150 = ((uint(_2123 > cbSceneParam._m0[59u].y) + uint(_2123 > cbSceneParam._m0[59u].x)) + uint(_2123 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2151 = _2150 + 43u;
        uint _2159 = _2150 + 44u;
        uint _2167 = _2150 + 45u;
        uint _2175 = _2150 + 46u;
        float _2186 = fma(_2120, cbSceneParam._m0[_2151].w, fma(_2116, cbSceneParam._m0[_2151].z, fma(_2112, cbSceneParam._m0[_2151].y, _2108 * cbSceneParam._m0[_2151].x)));
        float _2190 = fma(_2120, cbSceneParam._m0[_2159].w, fma(_2116, cbSceneParam._m0[_2159].z, fma(_2112, cbSceneParam._m0[_2159].y, _2108 * cbSceneParam._m0[_2159].x)));
        float _2198 = fma(_2120, cbSceneParam._m0[_2175].w, fma(_2116, cbSceneParam._m0[_2175].z, fma(_2112, cbSceneParam._m0[_2175].y, _2108 * cbSceneParam._m0[_2175].x)));
        float _2203 = cbSceneParam._m0[33u].z * _2198;
        float _2205 = cbSceneParam._m0[33u].w * _2198;
        float _2208 = fma(_2120, cbSceneParam._m0[_2167].w, fma(_2116, cbSceneParam._m0[_2167].z, fma(_2112, cbSceneParam._m0[_2167].y, _2108 * cbSceneParam._m0[_2167].x))) / _2198;
        float _2256 = (cbSceneParam._m0[33u].x - sqrt(((_2122 * _2122) + (_2121 * _2121)) + (_2123 * _2123))) * cbSceneParam._m0[33u].y;
        float _4618 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2263 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2203 + _2186) / _2198, (_2205 + _2190) / _2198), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2205 + _2186) / _2198, (_2190 - _2203) / _2198), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 - _2203) / _2198, (_2190 - _2205) / _2198), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 - _2205) / _2198, (_2203 + _2190) / _2198), _2208), 0.0)).x), vec4(0.25)));
        _2270 = 1.0 - (_2263 * cbSceneParam._m0[34u].x);
        _2271 = 1.0 - (_2263 * cbSceneParam._m0[34u].y);
        _2272 = 1.0 - (_2263 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2270 = 1.0;
        _2271 = 1.0;
        _2272 = 1.0;
    }
    float _2336;
    float _2338;
    float _2340;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2324 = fma(_2120, cbSceneParam._m0[63u].w, fma(_2116, cbSceneParam._m0[63u].z, fma(_2112, cbSceneParam._m0[63u].y, _2108 * cbSceneParam._m0[63u].x)));
        float _2325 = fma(_2120, cbSceneParam._m0[60u].w, fma(_2116, cbSceneParam._m0[60u].z, fma(_2112, cbSceneParam._m0[60u].y, _2108 * cbSceneParam._m0[60u].x))) / _2324;
        float _2326 = fma(_2120, cbSceneParam._m0[61u].w, fma(_2116, cbSceneParam._m0[61u].z, fma(_2112, cbSceneParam._m0[61u].y, _2108 * cbSceneParam._m0[61u].x))) / _2324;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2325 >= cbSceneParam._m0[64u].x) && (_2326 >= cbSceneParam._m0[64u].y)) && (_2325 <= cbSceneParam._m0[64u].z)) && (_2326 <= cbSceneParam._m0[64u].w))
        {
            float _2464 = fma(_2120, cbSceneParam._m0[62u].w, fma(_2116, cbSceneParam._m0[62u].z, fma(_2112, cbSceneParam._m0[62u].y, _2108 * cbSceneParam._m0[62u].x))) / _2324;
            float _2468 = isnan(cbSceneParam._m0[41u].w) ? _2464 : (isnan(_2464) ? cbSceneParam._m0[41u].w : max(_2464, cbSceneParam._m0[41u].w));
            float _2511 = (cbSceneParam._m0[33u].x - sqrt(((_2122 * _2122) + (_2121 * _2121)) + (_2123 * _2123))) * cbSceneParam._m0[33u].y;
            float _4634 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
            float _2518 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2325, cbSceneParam._m0[33u].w + _2326), _2468), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2325, _2326 - cbSceneParam._m0[33u].z), _2468), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2325 - cbSceneParam._m0[33u].z, _2326 - cbSceneParam._m0[33u].w), _2468), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2325 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2326), _2468), 0.0)).x), vec4(0.25)));
            float _2522 = 1.0 - (_2518 * cbSceneParam._m0[34u].x);
            float _2523 = 1.0 - (_2518 * cbSceneParam._m0[34u].y);
            float _2524 = 1.0 - (_2518 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2524) ? _2272 : (isnan(_2272) ? _2524 : min(_2272, _2524));
            frontier_phi_37_36_ladder_1 = isnan(_2523) ? _2271 : (isnan(_2271) ? _2523 : min(_2271, _2523));
            frontier_phi_37_36_ladder_2 = isnan(_2522) ? _2270 : (isnan(_2270) ? _2522 : min(_2270, _2522));
        }
        else
        {
            frontier_phi_37_36_ladder = _2272;
            frontier_phi_37_36_ladder_1 = _2271;
            frontier_phi_37_36_ladder_2 = _2270;
        }
        _2336 = frontier_phi_37_36_ladder_2;
        _2338 = frontier_phi_37_36_ladder_1;
        _2340 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2336 = _2270;
        _2338 = _2271;
        _2340 = _2272;
    }
    uvec4 _2345 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2347 = _2345.x * 14u;
    uint _2348 = _2347 + 13u;
    float _2355 = _1023 + (-1.0);
    float _2360 = (cbLight._m0[_2348].x * _2355) + 1.0;
    float _2361 = (cbLight._m0[_2348].y * _2355) + 1.0;
    float _2362 = (cbLight._m0[_2348].z * _2355) + 1.0;
    float _2363 = (cbLight._m0[_2348].w * _2355) + 1.0;
    uint _2364 = _2347 + 5u;
    float _2370 = isnan(1.0) ? _2361 : (isnan(_2361) ? 1.0 : min(_2361, 1.0));
    uint _2374 = _2347 + 4u;
    float _2383 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
    uint _2387 = _2347 | 1u;
    float _2398 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_861, _862, _863));
    float _2401 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_861, _862, _863));
    float _4670 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _4681 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2406 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * 0.3183098733425140380859375;
    float _2408 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * 0.3183098733425140380859375;
    float _2415 = ((cbLight._m0[_2364].x * _2370) * _2408) + (((cbLight._m0[_2374].x * _2336) * _2383) * _2406);
    float _2416 = ((_2370 * cbLight._m0[_2364].y) * _2408) + (((cbLight._m0[_2374].y * _2338) * _2383) * _2406);
    float _2417 = ((_2370 * cbLight._m0[_2364].z) * _2408) + (((cbLight._m0[_2374].z * _2340) * _2383) * _2406);
    uvec4 _2421 = floatBitsToUint(cbLight._m0[_2347 + 12u]);
    bool _2423 = _2421.x == 0u;
    float _2525;
    float _2527;
    float _2529;
    if (_2423)
    {
        _2525 = _2415;
        _2527 = _2416;
        _2529 = _2417;
    }
    else
    {
        uint _2533 = _2347 + 6u;
        float _2549 = (dot(vec3(cbLight._m0[_2347 + 2u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2550 = _2549 * _2549;
        float _4692 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2551 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2552 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
        _2525 = (((cbLight._m0[_2533].x * 0.3183098733425140380859375) * _2551) * _2552) + _2415;
        _2527 = (((cbLight._m0[_2533].y * 0.3183098733425140380859375) * _2551) * _2552) + _2416;
        _2529 = (((cbLight._m0[_2533].z * 0.3183098733425140380859375) * _2551) * _2552) + _2417;
    }
    bool _2532 = _2421.y == 0u;
    float _2587;
    float _2589;
    float _2591;
    if (_2532)
    {
        _2587 = _2525;
        _2589 = _2527;
        _2591 = _2529;
    }
    else
    {
        uint _2749 = _2347 + 7u;
        float _2765 = (dot(vec3(cbLight._m0[_2347 + 3u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2766 = _2765 * _2765;
        float _4708 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2767 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2768 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
        _2587 = (((cbLight._m0[_2749].x * 0.3183098733425140380859375) * _2767) * _2768) + _2525;
        _2589 = (((cbLight._m0[_2749].y * 0.3183098733425140380859375) * _2767) * _2768) + _2527;
        _2591 = (((cbLight._m0[_2749].z * 0.3183098733425140380859375) * _2767) * _2768) + _2529;
    }
    uint _2594 = _2347 + 8u;
    float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _864) * 0.949999988079071044921875);
    float _2608 = _2607 * _2607;
    float _2609 = cbLight._m0[_2347].x + _940;
    float _2610 = cbLight._m0[_2347].y + _941;
    float _2611 = cbLight._m0[_2347].z + _942;
    float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
    float _2616 = _2615 * _2609;
    float _2617 = _2615 * _2610;
    float _2618 = _2615 * _2611;
    float _2619 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2347].xyz));
    float _4724 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _4735 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _2623 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2624 = dot(vec3(_861, _862, _863), vec3(_2616, _2617, _2618));
    float _4746 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2628 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2616, _2617, _2618));
    float _4757 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2632 = _2608 * _2608;
    float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
    float _2647 = (exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2648 = 1.0 - _2608;
    float _2659 = (0.5 / (((_2623 * ((_2622 * _2648) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2648) + _2608) * _2622))) * _2622;
    float _4768 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2661 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
    uint _2675 = _2347 + 9u;
    float _2686 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _864) * 0.949999988079071044921875);
    float _2687 = _2686 * _2686;
    float _2688 = cbLight._m0[_2387].x + _940;
    float _2689 = cbLight._m0[_2387].y + _941;
    float _2690 = cbLight._m0[_2387].z + _942;
    float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
    float _2695 = _2694 * _2688;
    float _2696 = _2694 * _2689;
    float _2697 = _2694 * _2690;
    float _2698 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2387].xyz));
    float _4779 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2701 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2702 = dot(vec3(_861, _862, _863), vec3(_2695, _2696, _2697));
    float _4790 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2705 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _2706 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2695, _2696, _2697));
    float _4801 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2710 = _2687 * _2687;
    float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
    float _2723 = (exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2724 = 1.0 - _2687;
    float _2734 = (0.5 / (((_2623 * ((_2701 * _2724) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2724) + _2687) * _2701))) * _2701;
    float _4812 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2736 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
    float _2746 = (((_2723 * cbLight._m0[_2675].x) * _2736) * _2370) + ((((cbLight._m0[_2594].x * _2336) * _2647) * _2661) * _2383);
    float _2747 = (((_2723 * cbLight._m0[_2675].y) * _2736) * _2370) + ((((cbLight._m0[_2594].y * _2338) * _2647) * _2661) * _2383);
    float _2748 = (((_2723 * cbLight._m0[_2675].z) * _2736) * _2370) + ((((cbLight._m0[_2594].z * _2340) * _2647) * _2661) * _2383);
    float _2804;
    float _2806;
    float _2808;
    if (_2423)
    {
        _2804 = _2746;
        _2806 = _2747;
        _2808 = _2748;
    }
    else
    {
        uint _2810 = _2347 + 2u;
        uint _2814 = _2347 + 10u;
        float _2828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2810].w)) * _864) * 0.949999988079071044921875);
        float _2829 = _2828 * _2828;
        float _2830 = cbLight._m0[_2810].x + _940;
        float _2831 = cbLight._m0[_2810].y + _941;
        float _2832 = cbLight._m0[_2810].z + _942;
        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
        float _2837 = _2836 * _2830;
        float _2838 = _2836 * _2831;
        float _2839 = _2836 * _2832;
        float _2840 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2810].xyz));
        float _4823 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2844 = dot(vec3(_861, _862, _863), vec3(_2837, _2838, _2839));
        float _4834 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2848 = dot(vec3(cbLight._m0[_2810].xyz), vec3(_2837, _2838, _2839));
        float _4845 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2852 = _2829 * _2829;
        float _2856 = ((_2847 * _2847) * (_2852 + (-1.0))) + 1.0;
        float _2865 = (exp2(log2(1.0 - (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2866 = 1.0 - _2829;
        float _2876 = (0.5 / (((_2623 * ((_2843 * _2866) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2866) + _2829) * _2843))) * _2843;
        float _4856 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2852 / ((_2856 * _2856) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
        _2804 = (((_2865 * cbLight._m0[_2814].x) * _2878) * _2879) + _2746;
        _2806 = (((_2865 * cbLight._m0[_2814].y) * _2878) * _2879) + _2747;
        _2808 = (((_2865 * cbLight._m0[_2814].z) * _2878) * _2879) + _2748;
    }
    float _2910;
    float _2912;
    float _2914;
    if (_2532)
    {
        _2910 = _2804;
        _2912 = _2806;
        _2914 = _2808;
    }
    else
    {
        uint _2921 = _2347 + 3u;
        uint _2925 = _2347 + 11u;
        float _2939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2921].w)) * _864) * 0.949999988079071044921875);
        float _2940 = _2939 * _2939;
        float _2941 = cbLight._m0[_2921].x + _940;
        float _2942 = cbLight._m0[_2921].y + _941;
        float _2943 = cbLight._m0[_2921].z + _942;
        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
        float _2948 = _2947 * _2941;
        float _2949 = _2947 * _2942;
        float _2950 = _2947 * _2943;
        float _2951 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2921].xyz));
        float _4872 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2954 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2955 = dot(vec3(_861, _862, _863), vec3(_2948, _2949, _2950));
        float _4883 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2958 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
        float _2959 = dot(vec3(cbLight._m0[_2921].xyz), vec3(_2948, _2949, _2950));
        float _4894 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2963 = _2940 * _2940;
        float _2967 = ((_2958 * _2958) * (_2963 + (-1.0))) + 1.0;
        float _2976 = (exp2(log2(1.0 - (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2977 = 1.0 - _2940;
        float _2987 = (0.5 / (((_2623 * ((_2954 * _2977) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2977) + _2940) * _2954))) * _2954;
        float _4905 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2989 = (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2963 / ((_2967 * _2967) * 3.141590118408203125));
        float _2990 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
        _2910 = (((_2976 * cbLight._m0[_2925].x) * _2989) * _2990) + _2804;
        _2912 = (((_2976 * cbLight._m0[_2925].y) * _2989) * _2990) + _2806;
        _2914 = (((_2976 * cbLight._m0[_2925].z) * _2989) * _2990) + _2808;
    }
    float _3056;
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    if (_2345.y == 0u)
    {
        uvec4 _3011 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3012 = _3011.x;
        uint _3023 = uint((float(_3011.y) * floor(float(uint(cbSceneParam._m0[85u].y * _961) / _3012))) + floor(float(uint(cbSceneParam._m0[85u].x * _960) / _3012)));
        float _3033 = (log2(_2123 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3034 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        uint _3037 = uint(isnan(14.0) ? _3034 : (isnan(_3034) ? 14.0 : min(_3034, 14.0)));
        uvec4 _3042 = texelFetch(g_lightClusterGridBuffer, int(((_3037 << 2u) + (_3023 << 6u)) >> 2u));
        uint _3043 = _3042.x;
        uint _3044 = _3011.z;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        if (((((1u << ((_3044 >> 4u) & 15u)) + 4294967295u) & _3043) == 0u) || ((_3044 & 240u) == 0u))
        {
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
            _3133 = 0.0;
        }
        else
        {
            float _3124;
            float _3126;
            float _3128;
            float _3130;
            float _3132;
            float _3134;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            uint _3282 = 0u;
            uint _3291;
            bool _3292;
            for (;;)
            {
                _3291 = texelFetch(g_lightClassification, int((((_3037 << 5u) + (_3023 << 9u)) + (_3282 << 2u)) >> 2u)).x;
                _3292 = _3291 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3292)
                {
                    frontier_phi_71_pred = _3281;
                    frontier_phi_71_pred_1 = _3280;
                    frontier_phi_71_pred_2 = _3279;
                    frontier_phi_71_pred_3 = _3278;
                    frontier_phi_71_pred_4 = _3277;
                    frontier_phi_71_pred_5 = _3276;
                }
                else
                {
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    uint _3427;
                    _3421 = _3276;
                    _3422 = _3277;
                    _3423 = _3278;
                    _3424 = _3279;
                    _3425 = _3280;
                    _3426 = _3281;
                    _3427 = _3291;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    for (;;)
                    {
                        uint _3431 = uint(findLSB(_3427)) + (_3282 << 5u);
                        uint _3428 = (_3427 + 4294967295u) & _3427;
                        uint _3433 = _3431 * 48u;
                        vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 3u)).x));
                        uint _3453 = (_3431 * 48u) + 4u;
                        vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3453)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 3u)).x));
                        uint _3472 = (_3431 * 48u) + 8u;
                        vec3 _3483 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3472)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 2u)).x));
                        float _3487 = _3447.x - _2121;
                        float _3488 = _3447.y - _2122;
                        float _3489 = _3447.z - _2123;
                        float _3490 = dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489));
                        float _3493 = inversesqrt(_3490);
                        float _3494 = _3493 * _3487;
                        float _3495 = _3493 * _3488;
                        float _3496 = _3493 * _3489;
                        float _3497 = dot(vec3(_979, _982, _985), vec3(_3494, _3495, _3496));
                        float _3502 = 1.0 - (_3490 * _3447.w);
                        float _4931 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3503 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3504 = sqrt(_3490) * _3466.w;
                        float _3507 = 1.39999997615814208984375 / (_3504 + 1.39999997615814208984375);
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3497) + _3508;
                        float _3514 = _3504 * _3504;
                        float _3518 = ((isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0))) * _3503) / ((_3514 * 0.699999988079071044921875) + 1.0);
                        float _3522 = (-0.0) - _2121;
                        float _3523 = (-0.0) - _2122;
                        float _3524 = (-0.0) - _2123;
                        float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                        float _3529 = _3528 * _3522;
                        float _3530 = _3528 * _3523;
                        float _3531 = _3528 * _3524;
                        float _3538 = exp2(log2(1.0 / ((_3514 * 3.5) + 5.0)) * 0.25);
                        float _3539 = 1.0 - _1039;
                        float _3546 = sqrt(1.0 - ((1.0 - (_3539 * _3539)) * (1.0 - (_3538 * _3538))));
                        float _3547 = _3546 * _3546;
                        float _3548 = _3547 * _3547;
                        float _3549 = _3529 + _3494;
                        float _3550 = _3530 + _3495;
                        float _3551 = _3531 + _3496;
                        float _3555 = inversesqrt(dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551)));
                        float _3559 = dot(vec3(_979, _982, _985), vec3(_3529, _3530, _3531));
                        float _4947 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3562 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3563 = dot(vec3(_979, _982, _985), vec3(_3555 * _3549, _3555 * _3550, _3555 * _3551));
                        float _4958 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3566 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3570 = ((_3566 * _3566) * (_3548 + (-1.0))) + 1.0;
                        float _3571 = _3507 * _3547;
                        float _3572 = _3571 * _3571;
                        float _3575 = ((1.0 - _3572) * _3497) + _3572;
                        float _4969 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3576 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3577 = 1.0 - _3547;
                        float _3587 = (0.5 / (((_3576 * ((_3562 * _3577) + _3547)) + 9.9999999392252902907785028219223e-09) + (((_3576 * _3577) + _3547) * _3562))) * _3576;
                        float _4980 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3598 = (((_3548 * 3.1415927410125732421875) * (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) / ((_3570 * _3570) * ((_3514 * 2.1991131305694580078125) + 3.141590118408203125))) * _3503;
                        _3351 = (_3518 * _3466.x) + _3424;
                        _3352 = (_3518 * _3466.y) + _3425;
                        _3353 = (_3518 * _3466.z) + _3426;
                        _3348 = (_3598 * _3483.x) + _3421;
                        _3349 = (_3598 * _3483.y) + _3422;
                        _3350 = (_3598 * _3483.z) + _3423;
                        if (_3428 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3421 = _3348;
                            _3422 = _3349;
                            _3423 = _3350;
                            _3424 = _3351;
                            _3425 = _3352;
                            _3426 = _3353;
                            _3427 = _3428;
                        }
                    }
                    frontier_phi_71_pred = _3353;
                    frontier_phi_71_pred_1 = _3352;
                    frontier_phi_71_pred_2 = _3351;
                    frontier_phi_71_pred_3 = _3350;
                    frontier_phi_71_pred_4 = _3349;
                    frontier_phi_71_pred_5 = _3348;
                }
                _3134 = frontier_phi_71_pred;
                _3132 = frontier_phi_71_pred_1;
                _3130 = frontier_phi_71_pred_2;
                _3128 = frontier_phi_71_pred_3;
                _3126 = frontier_phi_71_pred_4;
                _3124 = frontier_phi_71_pred_5;
                uint _3283 = _3282 + 1u;
                if (_3283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3276 = _3124;
                    _3277 = _3126;
                    _3278 = _3128;
                    _3279 = _3130;
                    _3280 = _3132;
                    _3281 = _3134;
                    _3282 = _3283;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
            _3133 = _3134;
        }
        uvec4 _3137 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3138 = _3137.z;
        uint _3140 = (_3138 >> 8u) & 15u;
        float _3244;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        if (((4294967295u << _3140) & _3043) == 0u)
        {
            _3244 = _3123;
            _3246 = _3125;
            _3248 = _3127;
            _3250 = _3129;
            _3252 = _3131;
            _3254 = _3133;
        }
        else
        {
            float _3269 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
            float _3270 = _3269 * _2121;
            float _3271 = _3269 * _2122;
            float _3272 = _3269 * _2123;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3140 < ((_3138 >> 12u) & 15u))
            {
                float _3245;
                float _3247;
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3404 = _3123;
                float _3405 = _3125;
                float _3406 = _3127;
                float _3407 = _3129;
                float _3408 = _3131;
                float _3409 = _3133;
                uint _3410 = _3140;
                uint _3419;
                bool _3420;
                for (;;)
                {
                    _3419 = texelFetch(g_lightClassification, int((((_3037 << 5u) + (_3023 << 9u)) + (_3410 << 2u)) >> 2u)).x;
                    _3420 = _3419 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3420)
                    {
                        frontier_phi_82_pred = _3409;
                        frontier_phi_82_pred_1 = _3408;
                        frontier_phi_82_pred_2 = _3407;
                        frontier_phi_82_pred_3 = _3406;
                        frontier_phi_82_pred_4 = _3405;
                        frontier_phi_82_pred_5 = _3404;
                    }
                    else
                    {
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3625 = _3404;
                        float _3626 = _3405;
                        float _3627 = _3406;
                        float _3628 = _3407;
                        float _3629 = _3408;
                        float _3630 = _3409;
                        uint _3631 = _3419;
                        uint _3632;
                        vec4 _3657;
                        float _3658;
                        vec4 _3673;
                        vec3 _3685;
                        vec4 _3700;
                        vec4 _3715;
                        float _3761;
                        bool _3762;
                        for (;;)
                        {
                            uint _3642 = ((_3410 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3631));
                            _3632 = (_3631 + 4294967295u) & _3631;
                            uint _3644 = _3642 * 40u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            _3658 = _3657.w;
                            uint _3660 = (_3642 * 40u) + 4u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3675 = (_3642 * 40u) + 8u;
                            _3685 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x));
                            uint _3687 = (_3642 * 40u) + 16u;
                            _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3702 = (_3642 * 40u) + 20u;
                            _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3717 = (_3642 * 40u) + 24u;
                            vec4 _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            uint _3736 = (_3642 * 40u) + 28u;
                            vec4 _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            _3761 = fma(_2123, _3749.z, fma(_2122, _3749.y, _3749.x * _2121)) + _3749.w;
                            _3762 = !((fma(_2123, _3730.z, fma(_2122, _3730.y, _3730.x * _2121)) + _3730.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3762)
                            {
                                float _3789 = _3657.x - _2121;
                                float _3790 = _3657.y - _2122;
                                float _3791 = _3657.z - _2123;
                                float _3792 = dot(vec3(_3789, _3790, _3791), vec3(_3789, _3790, _3791));
                                float _3795 = inversesqrt(_3792);
                                float _3796 = _3795 * _3789;
                                float _3797 = _3795 * _3790;
                                float _3798 = _3795 * _3791;
                                float _3802 = 1.0 - (_3792 / (_3658 * _3658));
                                float _4991 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3807 = sqrt(_3792) * _3673.w;
                                float _3809 = 1.39999997615814208984375 / (_3807 + 1.39999997615814208984375);
                                float _3810 = _3809 * _3809;
                                float _3813 = ((1.0 - _3810) * dot(vec3(_3796, _3797, _3798), vec3(_979, _982, _985))) + _3810;
                                float _3816 = _3807 * _3807;
                                float _3820 = (fma(_2123, _3700.z, fma(_2122, _3700.y, _3700.x * _2121)) + _3700.w) / _3761;
                                float _3821 = (fma(_2123, _3715.z, fma(_2122, _3715.y, _3715.x * _2121)) + _3715.w) / _3761;
                                float _3825 = 1.0 - dot(vec2(_3820, _3821), vec2(_3820, _3821));
                                float _5007 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3827 = _3826 * (((isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0))) * _3803) / ((_3816 * 0.699999988079071044921875) + 1.0));
                                float _3839 = exp2(log2(1.0 / ((_3816 * 3.5) + 5.0)) * 0.25);
                                float _3840 = 1.0 - _1039;
                                float _3847 = sqrt(1.0 - ((1.0 - (_3840 * _3840)) * (1.0 - (_3839 * _3839))));
                                float _3848 = _3847 * _3847;
                                float _3849 = _3848 * _3848;
                                float _3850 = _3796 - _3270;
                                float _3851 = _3797 - _3271;
                                float _3852 = _3798 - _3272;
                                float _3856 = inversesqrt(dot(vec3(_3850, _3851, _3852), vec3(_3850, _3851, _3852)));
                                float _3860 = dot(vec3(_979, _982, _985), vec3((-0.0) - _3270, (-0.0) - _3271, (-0.0) - _3272));
                                float _5018 = isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0));
                                float _3863 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3864 = dot(vec3(_979, _982, _985), vec3(_3856 * _3850, _3856 * _3851, _3856 * _3852));
                                float _5029 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3867 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3871 = ((_3867 * _3867) * (_3849 + (-1.0))) + 1.0;
                                float _3872 = _3809 * _3848;
                                float _3873 = _3872 * _3872;
                                float _3879 = ((1.0 - _3873) * dot(vec3(_979, _982, _985), vec3(_3796, _3797, _3798))) + _3873;
                                float _5040 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3880 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3881 = 1.0 - _3848;
                                float _3891 = (0.5 / (((_3880 * ((_3863 * _3881) + _3848)) + 9.9999999392252902907785028219223e-09) + (((_3880 * _3881) + _3848) * _3863))) * _3880;
                                float _5051 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3901 = (_3826 * _3803) * (((_3849 * 3.1415927410125732421875) * (isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0)))) / ((_3871 * _3871) * ((_3816 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3827 * _3673.z;
                                frontier_phi_88_pred_1 = _3827 * _3673.y;
                                frontier_phi_88_pred_2 = _3827 * _3673.x;
                                frontier_phi_88_pred_3 = _3901 * _3685.z;
                                frontier_phi_88_pred_4 = _3901 * _3685.y;
                                frontier_phi_88_pred_5 = _3901 * _3685.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3910 = frontier_phi_88_pred;
                            _3909 = frontier_phi_88_pred_1;
                            _3908 = frontier_phi_88_pred_2;
                            _3907 = frontier_phi_88_pred_3;
                            _3906 = frontier_phi_88_pred_4;
                            _3905 = frontier_phi_88_pred_5;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            _3617 = _3910 + _3630;
                            _3612 = _3905 + _3625;
                            _3613 = _3906 + _3626;
                            _3614 = _3907 + _3627;
                            if (_3632 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3632;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3617;
                        frontier_phi_82_pred_1 = _3616;
                        frontier_phi_82_pred_2 = _3615;
                        frontier_phi_82_pred_3 = _3614;
                        frontier_phi_82_pred_4 = _3613;
                        frontier_phi_82_pred_5 = _3612;
                    }
                    _3255 = frontier_phi_82_pred;
                    _3253 = frontier_phi_82_pred_1;
                    _3251 = frontier_phi_82_pred_2;
                    _3249 = frontier_phi_82_pred_3;
                    _3247 = frontier_phi_82_pred_4;
                    _3245 = frontier_phi_82_pred_5;
                    uint _3411 = _3410 + 1u;
                    if (_3411 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3404 = _3245;
                        _3405 = _3247;
                        _3406 = _3249;
                        _3407 = _3251;
                        _3408 = _3253;
                        _3409 = _3255;
                        _3410 = _3411;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3251;
                frontier_phi_63_64_ladder_1 = _3255;
                frontier_phi_63_64_ladder_2 = _3253;
                frontier_phi_63_64_ladder_3 = _3249;
                frontier_phi_63_64_ladder_4 = _3247;
                frontier_phi_63_64_ladder_5 = _3245;
            }
            else
            {
                frontier_phi_63_64_ladder = _3129;
                frontier_phi_63_64_ladder_1 = _3133;
                frontier_phi_63_64_ladder_2 = _3131;
                frontier_phi_63_64_ladder_3 = _3127;
                frontier_phi_63_64_ladder_4 = _3125;
                frontier_phi_63_64_ladder_5 = _3123;
            }
            _3244 = frontier_phi_63_64_ladder_5;
            _3246 = frontier_phi_63_64_ladder_4;
            _3248 = frontier_phi_63_64_ladder_3;
            _3250 = frontier_phi_63_64_ladder;
            _3252 = frontier_phi_63_64_ladder_2;
            _3254 = frontier_phi_63_64_ladder_1;
        }
        float _3259 = isnan(1.0) ? _1023 : (isnan(_1023) ? 1.0 : min(_1023, 1.0));
        _3056 = (_3259 * _3250) + _2587;
        _3058 = (_3259 * _3252) + _2589;
        _3060 = (_3259 * _3254) + _2591;
        _3062 = ((_3244 * 0.039999999105930328369140625) * _3259) + _2910;
        _3064 = ((_3246 * 0.039999999105930328369140625) * _3259) + _2912;
        _3066 = ((_3248 * 0.039999999105930328369140625) * _3259) + _2914;
    }
    else
    {
        _3056 = _2587;
        _3058 = _2589;
        _3060 = _2591;
        _3062 = _2910;
        _3064 = _2912;
        _3066 = _2914;
    }
    float _5067 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _5078 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _5089 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _3083 = ((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3056 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1023))) + ((_3062 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    float _3084 = ((isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3058 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1023))) + ((_3064 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    float _3085 = ((isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3060 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1023))) + ((_3066 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    uint _3086 = _254 + 6u;
    float _3094 = _960 / cbSceneParam._m0[86u].x;
    float _3095 = _961 / cbSceneParam._m0[86u].y;
    vec4 _3109 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3094, _3095, (log2((isnan(cbSceneParam._m0[77u].w) ? _882 : (isnan(_882) ? cbSceneParam._m0[77u].w : min(_882, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3111 = _3109.x;
    float _3112 = _3109.y;
    float _3113 = _3109.z;
    float _3114 = _3109.w;
    float _3186;
    float _3188;
    float _3190;
    float _3192;
    if (_882 > cbSceneParam._m0[78u].w)
    {
        float _3148 = isnan(_882) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _882 : min(cbSceneParam._m0[80u].w, _882));
        float _3149 = _3148 / _882;
        float _3160 = _3149 * _933;
        float _3161 = _934 * _3149;
        float _3162 = (-0.0) - _3161;
        float _3164 = _3149 * _935;
        float _3166 = (cbSceneParam._m0[77u].w * _3162) / _3148;
        float _3167 = _3166 + cbSceneParam._m0[79u].w;
        float _3168 = cbSceneParam._m0[79u].w - _3161;
        float _3174 = sqrt(((_3160 * _3160) + (_3161 * _3161)) + (_3164 * _3164));
        float _3177 = (1.0 - (cbSceneParam._m0[77u].w / _3148)) * _3174;
        float _3182 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3184 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3361;
        if (abs((_3162 - _3166) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3361 = ((((_3167 > 0.0) ? exp2(_3182 * _3167) : (2.0 - exp2(_3184 * _3167))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3177;
        }
        else
        {
            float _3305 = 1.0 / cbSceneParam._m0[80u].x;
            float _3306 = isnan(_3168) ? _3167 : (isnan(_3167) ? _3168 : max(_3167, _3168));
            float _3307 = isnan(_3168) ? _3167 : (isnan(_3167) ? _3168 : min(_3167, _3168));
            float _3316 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : min(_3306, 0.0));
            float _3317 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : min(_3307, 0.0));
            _3361 = ((abs(_3174 / _3162) * cbSceneParam._m0[80u].y) * ((((_3316 - _3317) * 2.0) - ((exp2(_3182 * (isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0)))) - exp2(_3182 * (isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))))) * _3305)) - ((exp2(_3184 * _3316) - exp2(_3184 * _3317)) * _3305))) + (_3177 * cbSceneParam._m0[80u].z);
        }
        vec4 _3363 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3094, _3095, 1.0), 0.0);
        float _3372 = exp2((_3361 * (-1.44269502162933349609375)) * (1.0 - _3363.w));
        float _3373 = log2(_3372);
        float _3389 = log2(_3114);
        _3186 = (exp2(_3389 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3373 * cbSceneParam._m0[78u].x)) * _3363.x) / cbSceneParam._m0[78u].x)) + _3111;
        _3188 = (exp2(_3389 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3373 * cbSceneParam._m0[78u].y)) * _3363.y) / cbSceneParam._m0[78u].y)) + _3112;
        _3190 = (exp2(_3389 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3373 * cbSceneParam._m0[78u].z)) * _3363.z) / cbSceneParam._m0[78u].z)) + _3113;
        _3192 = _3372 * _3114;
    }
    else
    {
        _3186 = _3111;
        _3188 = _3112;
        _3190 = _3113;
        _3192 = _3114;
    }
    bool _3399;
    vec4 _3202;
    vec4 _3224;
    float _3226;
    float _3230;
    float _3231;
    float _3232;
    float _3233;
    bool _3243;
    for (;;)
    {
        _3202 = cbMatDynParam._m0[0u];
        float _3204 = roundEven(_3202.y);
        bool _3205 = _3204 == 3.0;
        float _3206 = log2(_3192);
        float _3213 = exp2(_3206 * cbSceneParam._m0[78u].x) * _3083;
        float _3214 = exp2(_3206 * cbSceneParam._m0[78u].y) * _3084;
        float _3215 = exp2(_3206 * cbSceneParam._m0[78u].z) * _3085;
        float _3222 = _949 + (-0.5);
        _3224 = cbMtdParam._m0[1u];
        _3226 = _3224.y * _3222;
        float _3229 = (_3204 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3230 = _3229 * (_3205 ? _3213 : (_3213 + (cbSceneParam._m0[72u].w * _3186)));
        _3231 = _3229 * (_3205 ? _3214 : (_3214 + (cbSceneParam._m0[72u].w * _3188)));
        _3232 = _3229 * (_3205 ? _3215 : (_3215 + (cbSceneParam._m0[72u].w * _3190)));
        _3233 = _3222 * 0.999000012874603271484375;
        _3243 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3243)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _3233) < 0.5)
            {
                _3399 = true;
                break;
            }
        }
        uint _3340 = _998 + uint(_3202.w);
        if ((cbInstanceData._m0[_3340].w < 1.0) && ((cbInstanceData._m0[_3340].w + _3233) < 0.5))
        {
            _3399 = true;
            break;
        }
        if ((_3226 + 1.0) < _3224.x)
        {
            _3399 = true;
            break;
        }
        _3399 = false;
        break;
    }
    float _3603;
    if (_3399)
    {
        discard_state = true;
        _3603 = 0.0;
    }
    else
    {
        _3603 = cbInstanceData._m0[_3086].w;
    }
    SV_Target.x = _3230;
    SV_Target.y = _3231;
    SV_Target.z = _3232;
    SV_Target.w = _3603;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3086].w;
    discard_exit();
}


