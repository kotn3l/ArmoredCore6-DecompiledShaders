#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1180;
float _3563;
float _3564;
float _3565;
float _3566;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].z) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3575 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _399 = (_392 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _400 = (_392 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _401 = (_392 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _457 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _461 = _457.z;
    float _470 = ((_440.z - _461) * _392) + _461;
    float _473 = ((((_440.x - _459) * _392) + _459) * 2.0) + (-1.0);
    float _475 = ((((_440.y - _460) * _392) + _460) * 2.0) + (-1.0);
    float _476 = dot(vec2(_473, _475), vec2(_473, _475));
    float _3586 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _481 = sqrt(1.0 - (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))));
    vec4 _497 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _522 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _524 = _522.x;
    float _525 = 1.0 - _524;
    float _538 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_524 - _525) * cbMtdParam._m0[24u].w) + _525) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3597 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _546 = (_539 * ((_420.x * cbMtdParam._m0[18u].x) - _399)) + _399;
    float _547 = (_539 * ((_420.y * cbMtdParam._m0[18u].y) - _400)) + _400;
    float _548 = (_539 * ((_420.z * cbMtdParam._m0[18u].z) - _401)) + _401;
    float _552 = (cbMtdParam._m0[19u].w * (_497.z - _470)) + _470;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _572 = (_565.x * 2.0) + (-1.0);
    float _573 = (_565.y * 2.0) + (-1.0);
    float _574 = dot(vec2(_572, _573), vec2(_572, _573));
    float _3608 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _582 = (_539 * (_565.z - _552)) + _552;
    float _585 = (((_497.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _473;
    float _586 = (((_497.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _475;
    float _598 = (((_572 - _585) + (cbMtdParam._m0[21u].x * _585)) * _539) + _585;
    float _599 = (((_573 - _586) + (cbMtdParam._m0[21u].x * _586)) * _539) + _586;
    float _600 = (_539 * (sqrt(1.0 - (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) - _481)) + _481;
    float _604 = cbMtdParam._m0[22u].x + _497.w;
    float _607 = fma(_600, _225 * NORMAL.x, fma(_599, _232 * TANGENT.x, (_218 * _210) * _598));
    float _610 = fma(_600, _225 * NORMAL.y, fma(_599, _232 * TANGENT.y, (_218 * _211) * _598));
    float _613 = fma(_600, _225 * NORMAL.z, fma(_599, _232 * TANGENT.z, (_218 * _212) * _598));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3619 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _621 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3641 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3652 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3663 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _639 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _691 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _681);
    float _692 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _681);
    float _693 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _681);
    float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
    float _698 = _691 * _697;
    float _699 = _692 * _697;
    float _700 = _693 * _697;
    vec4 _705 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _707 = _705.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _861 = sqrt(((_691 * _691) + (_692 * _692)) + (_693 * _693));
        float _867 = (cbMatDynParam._m0[5u].x * _861) + cbMatDynParam._m0[5u].y;
        float _3674 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _872 = (cbMatDynParam._m0[5u].z * _861) + cbMatDynParam._m0[5u].w;
        float _3685 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) - _868)) + _868) < ((_707 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _737 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _740 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _743 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _756 = _238 + 9u;
    uint _757 = _756 + uint(cbMatDynParam._m0[0u].w);
    float _763 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_757].x;
    float _764 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_757].y;
    float _765 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_757].z;
    float _3696 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    vec4 _777 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _781 = ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * TEXCOORD_5.w) * _777.x;
    float _782 = dot(vec3(_618, _619, _620), vec3(_698, _699, _700));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _618) - _698;
    float _790 = (_785 * _619) - _699;
    float _791 = (_785 * _620) - _700;
    float _795 = abs(dot(vec3(_698, _699, _700), vec3(_618, _619, _620)));
    float _3729 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_621);
    float _810 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1179;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _904 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _908 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _912 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _937 = _842 + _618;
        float _938 = _846 + _619;
        float _939 = _850 + _620;
        float _949 = fma(_939, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937)) - _904;
        float _950 = fma(_939, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937)) - _908;
        float _951 = fma(_939, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937)) - _912;
        float _955 = inversesqrt(dot(vec3(_949, _950, _951), vec3(_949, _950, _951)));
        float _968 = ((_955 * _949) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_904 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_955 * _950) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_908 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_955 * _951) / cbModelParam._m0[34u].z) + ((((((_912 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        float _1007 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_973.x + (-0.5));
        float _1009 = _1007 * (_973.y + (-0.5));
        float _1010 = _1007 * (_973.z + (-0.5));
        float _1017 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_980.x + (-0.5));
        float _1019 = _1017 * (_980.y + (-0.5));
        float _1020 = _1017 * (_980.z + (-0.5));
        float _1027 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_987.x + (-0.5));
        float _1029 = _1027 * (_987.y + (-0.5));
        float _1030 = _1027 * (_987.z + (-0.5));
        float _1037 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_994.x + (-0.5));
        float _1039 = _1037 * (_994.y + (-0.5));
        float _1040 = _1037 * (_994.z + (-0.5));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = _1008 * 0.5;
        float _1045 = _1018 * 0.5;
        float _1046 = _1028 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1061 = (dot(vec3(_618, _619, _620), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1071 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3777 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1073 + 1.0))) + _1078) * _1041;
        float _1088 = _1009 * 0.5;
        float _1089 = _1019 * 0.5;
        float _1090 = _1029 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_618, _619, _620), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3810 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1115 + 1.0))) + _1120) * _1042;
        float _1130 = _1010 * 0.5;
        float _1131 = _1020 * 0.5;
        float _1132 = _1030 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_618, _619, _620), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3843 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1157 + 1.0))) + _1162) * _1043;
        _1179 = _1010;
        _1181 = _1009;
        _1182 = _1008;
        _1183 = _1020;
        _1184 = _1019;
        _1185 = _1018;
        _1186 = _1030;
        _1187 = _1029;
        _1188 = _1028;
        _1189 = _1043;
        _1190 = _1042;
        _1191 = _1041;
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
    }
    else
    {
        _1179 = _1180;
        _1181 = _1180;
        _1182 = _1180;
        _1183 = _1180;
        _1184 = _1180;
        _1185 = _1180;
        _1186 = _1180;
        _1187 = _1180;
        _1188 = _1180;
        _1189 = _1180;
        _1190 = _1180;
        _1191 = _1180;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1222 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1226 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1230 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1253 = _842 + _618;
        float _1254 = _846 + _619;
        float _1255 = _850 + _620;
        float _1265 = fma(_1255, cbModelParam._m0[30u].z, fma(_1254, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1253)) - _1222;
        float _1266 = fma(_1255, cbModelParam._m0[31u].z, fma(_1254, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1253)) - _1226;
        float _1267 = fma(_1255, cbModelParam._m0[32u].z, fma(_1254, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1253)) - _1230;
        float _1271 = inversesqrt(dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267)));
        float _1284 = ((_1271 * _1265) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1222 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1271 * _1266) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1226 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1271 * _1267) / cbModelParam._m0[35u].z) + ((((((_1230 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        float _1321 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1288.x + (-0.5));
        float _1323 = _1321 * (_1288.y + (-0.5));
        float _1324 = _1321 * (_1288.z + (-0.5));
        float _1331 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1295.x + (-0.5));
        float _1333 = _1331 * (_1295.y + (-0.5));
        float _1334 = _1331 * (_1295.z + (-0.5));
        float _1341 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1302.x + (-0.5));
        float _1343 = _1341 * (_1302.y + (-0.5));
        float _1344 = _1341 * (_1302.z + (-0.5));
        float _1351 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1309.x + (-0.5));
        float _1353 = _1351 * (_1309.y + (-0.5));
        float _1354 = _1351 * (_1309.z + (-0.5));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = _1322 * 0.5;
        float _1359 = _1332 * 0.5;
        float _1360 = _1342 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_618, _619, _620), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3906 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1385 + 1.0))) + _1390) * _1355;
        float _1400 = _1323 * 0.5;
        float _1401 = _1333 * 0.5;
        float _1402 = _1343 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_618, _619, _620), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3939 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1427 + 1.0))) + _1432) * _1356;
        float _1442 = _1324 * 0.5;
        float _1443 = _1334 * 0.5;
        float _1444 = _1344 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_618, _619, _620), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3972 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1469 + 1.0))) + _1474) * _1357;
        _1491 = _1324;
        _1492 = _1323;
        _1493 = _1322;
        _1494 = _1334;
        _1495 = _1333;
        _1496 = _1332;
        _1497 = _1344;
        _1498 = _1343;
        _1499 = _1342;
        _1500 = _1357;
        _1501 = _1356;
        _1502 = _1355;
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
    }
    else
    {
        _1491 = _1180;
        _1492 = _1180;
        _1493 = _1180;
        _1494 = _1180;
        _1495 = _1180;
        _1496 = _1180;
        _1497 = _1180;
        _1498 = _1180;
        _1499 = _1180;
        _1500 = _1180;
        _1501 = _1180;
        _1502 = _1180;
        _1503 = 0.0;
        _1504 = 0.0;
        _1505 = 0.0;
    }
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1192)) + _1192;
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1193)) + _1193;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1194)) + _1194;
    float _1538 = fma(_1517, cbSceneParam._m0[89u].z, fma(_1516, cbSceneParam._m0[89u].y, _1515 * cbSceneParam._m0[89u].x));
    float _1541 = fma(_1517, cbSceneParam._m0[90u].z, fma(_1516, cbSceneParam._m0[90u].y, _1515 * cbSceneParam._m0[90u].x));
    float _1544 = fma(_1517, cbSceneParam._m0[91u].z, fma(_1516, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1515));
    float _1559 = _789 * 0.5;
    float _1560 = _790 * 0.5;
    float _1561 = _791 * 0.5;
    float _1562 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1565 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1568 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1602;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1575 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1179, _1183, _1186, _1189));
        float _1579 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1583 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1590 = dot(vec4(cbModelParam._m0[39u]), vec4(_1559, _1560, _1561, 1.0));
        _1602 = dot(vec3(isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1602 = 1.0;
    }
    float _1613;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1604 = dot(vec4(cbModelParam._m0[40u]), vec4(_1559, _1560, _1561, 1.0));
        _1613 = dot(vec3(isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1613 = 1.0;
    }
    float _1617 = (_1613 * cbModelParam._m0[1u].x) + (_1602 * (1.0 - cbModelParam._m0[1u].x));
    float _1627 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1627 : min(cbModelParam._m0[25u].z, _1627));
    float _1708;
    float _1710;
    float _1712;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1675 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1679 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1683 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1686 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1689 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1692 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1720;
        if (_1686 > 0.0)
        {
            _1720 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1720 = frontier_phi_17_15_ladder;
        }
        float _1941;
        if (_1689 > 0.0)
        {
            _1941 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1941 = frontier_phi_26_22_ladder;
        }
        float _2187;
        if (_1692 > 0.0)
        {
            _2187 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2187 = frontier_phi_38_33_ladder;
        }
        float _2189 = isnan(_1941) ? _1720 : (isnan(_1720) ? _1941 : min(_1720, _1941));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1686) + _1675;
        float _2195 = (_2190 * _1689) + _1679;
        float _2196 = (_2190 * _1692) + _1683;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2199 = (-1.0) - _2197;
        float _2201 = _2197 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2196 > _2201) || ((_2196 < _2199) || ((_2195 > _2201) || ((_2195 < _2199) || ((_2194 < _2199) || (_2194 > _2201))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2196, cbModelParam._m0[9u].z, fma(_2195, cbModelParam._m0[9u].y, _2194 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2196, cbModelParam._m0[10u].z, fma(_2195, cbModelParam._m0[10u].y, _2194 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2196, cbModelParam._m0[11u].z, fma(_2195, cbModelParam._m0[11u].y, _2194 * cbModelParam._m0[11u].x))), _1628);
            frontier_phi_16_38_ladder = _2320.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2320.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2320.x * cbModelParam._m0[1u].y;
        }
        _1708 = frontier_phi_16_38_ladder_2;
        _1710 = frontier_phi_16_38_ladder_1;
        _1712 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1628);
        _1708 = _1696.x * cbModelParam._m0[1u].y;
        _1710 = _1696.y * cbModelParam._m0[1u].y;
        _1712 = _1696.z * cbModelParam._m0[1u].y;
    }
    float _1716 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1716 : min(cbModelParam._m0[25u].w, _1716));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1770 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1774 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1778 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1781 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1784 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1787 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _1946;
        if (_1781 > 0.0)
        {
            _1946 = abs((1.0 - _1770) / _1781);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1770 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1946 = frontier_phi_28_24_ladder;
        }
        float _2214;
        if (_1784 > 0.0)
        {
            _2214 = abs((1.0 - _1774) / _1784);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1774 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2214 = frontier_phi_40_35_ladder;
        }
        float _2419;
        if (_1787 > 0.0)
        {
            _2419 = abs((1.0 - _1778) / _1787);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1778 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2419 = frontier_phi_49_46_ladder;
        }
        float _2421 = isnan(_2214) ? _1946 : (isnan(_1946) ? _2214 : min(_1946, _2214));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1781) + _1770;
        float _2427 = (_2422 * _1784) + _1774;
        float _2428 = (_2422 * _1787) + _1778;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2429;
        float _2432 = _2429 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2428 > _2432) || ((_2428 < _2430) || ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 < _2430) || (_2426 > _2432))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2428, cbModelParam._m0[17u].z, fma(_2427, cbModelParam._m0[17u].y, _2426 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2428, cbModelParam._m0[18u].z, fma(_2427, cbModelParam._m0[18u].y, _2426 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2428, cbModelParam._m0[19u].z, fma(_2427, cbModelParam._m0[19u].y, _2426 * cbModelParam._m0[19u].x))), _1717);
            frontier_phi_25_49_ladder = _2627.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2627.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2627.x * cbModelParam._m0[1u].z;
        }
        _1806 = frontier_phi_25_49_ladder_2;
        _1808 = frontier_phi_25_49_ladder_1;
        _1810 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1717);
        _1806 = _1790.x * cbModelParam._m0[1u].z;
        _1808 = _1790.y * cbModelParam._m0[1u].z;
        _1810 = _1790.z * cbModelParam._m0[1u].z;
    }
    float _1822 = ((((1.0 - _810) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_810 * _797)) * _781;
    float _1823 = _1822 * ((cbModelParam._m0[1u].w * (_1806 - _1708)) + _1708);
    float _1824 = _1822 * ((cbModelParam._m0[1u].w * (_1808 - _1710)) + _1710);
    float _1825 = _1822 * ((cbModelParam._m0[1u].w * (_1810 - _1712)) + _1712);
    float _1828 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1831 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1834 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, _1823 * cbSceneParam._m0[91u].x));
    vec4 _1842 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_718, _719));
    float _1844 = _1842.w;
    float _1856 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1844);
    float _1857 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1844);
    float _1858 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1844);
    uvec4 _1862 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1864 = _1862.x * 14u;
    uint _1865 = _1864 + 13u;
    float _1872 = _781 + (-1.0);
    float _1877 = (cbLight._m0[_1865].x * _1872) + 1.0;
    float _1878 = (cbLight._m0[_1865].y * _1872) + 1.0;
    float _1879 = (cbLight._m0[_1865].z * _1872) + 1.0;
    float _1880 = (cbLight._m0[_1865].w * _1872) + 1.0;
    uint _1881 = _1864 + 5u;
    float _1887 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1891 = _1864 + 4u;
    float _1900 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1904 = _1864 | 1u;
    float _1915 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_618, _619, _620));
    float _1918 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_618, _619, _620));
    float _4108 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _4119 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1923 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.3183098733425140380859375;
    float _1925 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.3183098733425140380859375;
    float _1932 = ((cbLight._m0[_1881].x * _1887) * _1925) + (((cbLight._m0[_1891].x * _1856) * _1900) * _1923);
    float _1933 = ((_1887 * cbLight._m0[_1881].y) * _1925) + (((cbLight._m0[_1891].y * _1857) * _1900) * _1923);
    float _1934 = ((_1887 * cbLight._m0[_1881].z) * _1925) + (((cbLight._m0[_1891].z * _1858) * _1900) * _1923);
    uvec4 _1938 = floatBitsToUint(cbLight._m0[_1864 + 12u]);
    bool _1940 = _1938.x == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1940)
    {
        _1951 = _1932;
        _1953 = _1933;
        _1955 = _1934;
    }
    else
    {
        uint _1959 = _1864 + 6u;
        float _1975 = (dot(vec3(cbLight._m0[_1864 + 2u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _1976 = _1975 * _1975;
        float _4130 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1978 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _1951 = (((cbLight._m0[_1959].x * 0.3183098733425140380859375) * _1977) * _1978) + _1932;
        _1953 = (((cbLight._m0[_1959].y * 0.3183098733425140380859375) * _1977) * _1978) + _1933;
        _1955 = (((cbLight._m0[_1959].z * 0.3183098733425140380859375) * _1977) * _1978) + _1934;
    }
    bool _1958 = _1938.y == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1958)
    {
        _1996 = _1951;
        _1998 = _1953;
        _2000 = _1955;
    }
    else
    {
        uint _2158 = _1864 + 7u;
        float _2174 = (dot(vec3(cbLight._m0[_1864 + 3u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2175 = _2174 * _2174;
        float _4146 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2176 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2177 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _1996 = (((cbLight._m0[_2158].x * 0.3183098733425140380859375) * _2176) * _2177) + _1951;
        _1998 = (((cbLight._m0[_2158].y * 0.3183098733425140380859375) * _2176) * _2177) + _1953;
        _2000 = (((cbLight._m0[_2158].z * 0.3183098733425140380859375) * _2176) * _2177) + _1955;
    }
    uint _2003 = _1864 + 8u;
    float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _621) * 0.949999988079071044921875);
    float _2017 = _2016 * _2016;
    float _2018 = cbLight._m0[_1864].x + _698;
    float _2019 = cbLight._m0[_1864].y + _699;
    float _2020 = cbLight._m0[_1864].z + _700;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2025 = _2024 * _2018;
    float _2026 = _2024 * _2019;
    float _2027 = _2024 * _2020;
    float _2028 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1864].xyz));
    float _4162 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2032 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2033 = dot(vec3(_618, _619, _620), vec3(_2025, _2026, _2027));
    float _4184 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2037 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2025, _2026, _2027));
    float _4195 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2041 = _2017 * _2017;
    float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
    float _2056 = (exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2057 = 1.0 - _2017;
    float _2068 = (0.5 / (((_2032 * ((_2031 * _2057) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2057) + _2017) * _2031))) * _2031;
    float _4206 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
    uint _2084 = _1864 + 9u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _621) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1904].x + _698;
    float _2098 = cbLight._m0[_1904].y + _699;
    float _2099 = cbLight._m0[_1904].z + _700;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1904].xyz));
    float _4217 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2111 = dot(vec3(_618, _619, _620), vec3(_2104, _2105, _2106));
    float _4228 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_2104, _2105, _2106));
    float _4239 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2096 * _2096;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2133 = 1.0 - _2096;
    float _2143 = (0.5 / (((_2032 * ((_2110 * _2133) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2133) + _2096) * _2110))) * _2110;
    float _4250 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    float _2155 = (((_2132 * cbLight._m0[_2084].x) * _2145) * _1887) + ((((cbLight._m0[_2003].x * _1856) * _2056) * _2070) * _1900);
    float _2156 = (((_2132 * cbLight._m0[_2084].y) * _2145) * _1887) + ((((cbLight._m0[_2003].y * _1857) * _2056) * _2070) * _1900);
    float _2157 = (((_2132 * cbLight._m0[_2084].z) * _2145) * _1887) + ((((cbLight._m0[_2003].z * _1858) * _2056) * _2070) * _1900);
    float _2219;
    float _2221;
    float _2223;
    if (_1940)
    {
        _2219 = _2155;
        _2221 = _2156;
        _2223 = _2157;
    }
    else
    {
        uint _2225 = _1864 + 2u;
        uint _2229 = _1864 + 10u;
        float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _621) * 0.949999988079071044921875);
        float _2244 = _2243 * _2243;
        float _2245 = cbLight._m0[_2225].x + _698;
        float _2246 = cbLight._m0[_2225].y + _699;
        float _2247 = cbLight._m0[_2225].z + _700;
        float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
        float _2252 = _2251 * _2245;
        float _2253 = _2251 * _2246;
        float _2254 = _2251 * _2247;
        float _2255 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2225].xyz));
        float _4261 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2259 = dot(vec3(_618, _619, _620), vec3(_2252, _2253, _2254));
        float _4272 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2263 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2252, _2253, _2254));
        float _4283 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2267 = _2244 * _2244;
        float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
        float _2280 = (exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2281 = 1.0 - _2244;
        float _2291 = (0.5 / (((_2032 * ((_2258 * _2281) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2281) + _2244) * _2258))) * _2258;
        float _4294 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2293 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
        float _2294 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2219 = (((_2280 * cbLight._m0[_2229].x) * _2293) * _2294) + _2155;
        _2221 = (((_2280 * cbLight._m0[_2229].y) * _2293) * _2294) + _2156;
        _2223 = (((_2280 * cbLight._m0[_2229].z) * _2293) * _2294) + _2157;
    }
    float _2329;
    float _2331;
    float _2333;
    if (_1958)
    {
        _2329 = _2219;
        _2331 = _2221;
        _2333 = _2223;
    }
    else
    {
        uint _2340 = _1864 + 3u;
        uint _2344 = _1864 + 11u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _621) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _698;
        float _2361 = cbLight._m0[_2340].y + _699;
        float _2362 = cbLight._m0[_2340].z + _700;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2340].xyz));
        float _4310 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2374 = dot(vec3(_618, _619, _620), vec3(_2367, _2368, _2369));
        float _4321 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4332 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2395 = (exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2396 = 1.0 - _2359;
        float _2406 = (0.5 / (((_2032 * ((_2373 * _2396) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2396) + _2359) * _2373))) * _2373;
        float _4343 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2408 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2409 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2329 = (((_2395 * cbLight._m0[_2344].x) * _2408) * _2409) + _2219;
        _2331 = (((_2395 * cbLight._m0[_2344].y) * _2408) * _2409) + _2221;
        _2333 = (((_2395 * cbLight._m0[_2344].z) * _2408) * _2409) + _2223;
    }
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    if (_1862.y == 0u)
    {
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2484;
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2484;
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2484;
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.x;
        uint _2511 = uint((float(_2499.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2500))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2500)));
        float _2521 = (log2(_2487 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2522 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        uint _2525 = uint(isnan(14.0) ? _2522 : (isnan(_2522) ? 14.0 : min(_2522, 14.0)));
        uvec4 _2530 = texelFetch(g_lightClusterGridBuffer, int(((_2525 << 2u) + (_2511 << 6u)) >> 2u));
        uint _2531 = _2530.x;
        uint _2532 = _2499.z;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((((1u << ((_2532 >> 4u) & 15u)) + 4294967295u) & _2531) == 0u) || ((_2532 & 240u) == 0u))
        {
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
        }
        else
        {
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            uint _2791 = 0u;
            uint _2800;
            bool _2801;
            for (;;)
            {
                _2800 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2791 << 2u)) >> 2u)).x;
                _2801 = _2800 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2801)
                {
                    frontier_phi_66_pred = _2785;
                    frontier_phi_66_pred_1 = _2790;
                    frontier_phi_66_pred_2 = _2789;
                    frontier_phi_66_pred_3 = _2788;
                    frontier_phi_66_pred_4 = _2787;
                    frontier_phi_66_pred_5 = _2786;
                }
                else
                {
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    uint _2936;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2800;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    for (;;)
                    {
                        uint _2940 = uint(findLSB(_2936)) + (_2791 << 5u);
                        uint _2937 = (_2936 + 4294967295u) & _2936;
                        uint _2942 = _2940 * 48u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2962 = (_2940 * 48u) + 4u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2981 = (_2940 * 48u) + 8u;
                        vec3 _2992 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x));
                        float _2996 = _2956.x - _2485;
                        float _2997 = _2956.y - _2486;
                        float _2998 = _2956.z - _2487;
                        float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                        float _3002 = inversesqrt(_2999);
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3006 = dot(vec3(_737, _740, _743), vec3(_3003, _3004, _3005));
                        float _3011 = 1.0 - (_2999 * _2956.w);
                        float _4369 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3013 = sqrt(_2999) * _2975.w;
                        float _3016 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _3006) + _3017;
                        float _3023 = _3013 * _3013;
                        float _3027 = ((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3012) / ((_3023 * 0.699999988079071044921875) + 1.0);
                        float _3031 = (-0.0) - _2485;
                        float _3032 = (-0.0) - _2486;
                        float _3033 = (-0.0) - _2487;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3048 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                        float _3049 = 1.0 - _797;
                        float _3056 = sqrt(1.0 - ((1.0 - (_3049 * _3049)) * (1.0 - (_3048 * _3048))));
                        float _3057 = _3056 * _3056;
                        float _3058 = _3057 * _3057;
                        float _3059 = _3038 + _3003;
                        float _3060 = _3039 + _3004;
                        float _3061 = _3040 + _3005;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3069 = dot(vec3(_737, _740, _743), vec3(_3038, _3039, _3040));
                        float _4385 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3073 = dot(vec3(_737, _740, _743), vec3(_3065 * _3059, _3065 * _3060, _3065 * _3061));
                        float _4396 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3080 = ((_3076 * _3076) * (_3058 + (-1.0))) + 1.0;
                        float _3081 = _3016 * _3057;
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3006) + _3082;
                        float _4407 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3087 = 1.0 - _3057;
                        float _3097 = (0.5 / (((_3086 * ((_3072 * _3087) + _3057)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3057) * _3072))) * _3086;
                        float _4418 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3108 = (((_3058 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3080 * _3080) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125))) * _3012;
                        _2860 = (_3027 * _2975.x) + _2933;
                        _2861 = (_3027 * _2975.y) + _2934;
                        _2862 = (_3027 * _2975.z) + _2935;
                        _2857 = (_3108 * _2992.x) + _2930;
                        _2858 = (_3108 * _2992.y) + _2931;
                        _2859 = (_3108 * _2992.z) + _2932;
                        if (_2937 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2937;
                        }
                    }
                    frontier_phi_66_pred = _2857;
                    frontier_phi_66_pred_1 = _2862;
                    frontier_phi_66_pred_2 = _2861;
                    frontier_phi_66_pred_3 = _2860;
                    frontier_phi_66_pred_4 = _2859;
                    frontier_phi_66_pred_5 = _2858;
                }
                _2633 = frontier_phi_66_pred;
                _2643 = frontier_phi_66_pred_1;
                _2641 = frontier_phi_66_pred_2;
                _2639 = frontier_phi_66_pred_3;
                _2637 = frontier_phi_66_pred_4;
                _2635 = frontier_phi_66_pred_5;
                uint _2792 = _2791 + 1u;
                if (_2792 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2785 = _2633;
                    _2786 = _2635;
                    _2787 = _2637;
                    _2788 = _2639;
                    _2789 = _2641;
                    _2790 = _2643;
                    _2791 = _2792;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
        }
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.z;
        uint _2649 = (_2647 >> 8u) & 15u;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((4294967295u << _2649) & _2531) == 0u)
        {
            _2753 = _2632;
            _2755 = _2634;
            _2757 = _2636;
            _2759 = _2638;
            _2761 = _2640;
            _2763 = _2642;
        }
        else
        {
            float _2778 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
            float _2779 = _2778 * _2485;
            float _2780 = _2778 * _2486;
            float _2781 = _2778 * _2487;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2649 < ((_2647 >> 12u) & 15u))
            {
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2913 = _2632;
                float _2914 = _2634;
                float _2915 = _2636;
                float _2916 = _2638;
                float _2917 = _2640;
                float _2918 = _2642;
                uint _2919 = _2649;
                uint _2928;
                bool _2929;
                for (;;)
                {
                    _2928 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                    _2929 = _2928 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2929)
                    {
                        frontier_phi_77_pred = _2918;
                        frontier_phi_77_pred_1 = _2917;
                        frontier_phi_77_pred_2 = _2916;
                        frontier_phi_77_pred_3 = _2915;
                        frontier_phi_77_pred_4 = _2914;
                        frontier_phi_77_pred_5 = _2913;
                    }
                    else
                    {
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3135 = _2913;
                        float _3136 = _2914;
                        float _3137 = _2915;
                        float _3138 = _2916;
                        float _3139 = _2917;
                        float _3140 = _2918;
                        uint _3141 = _2928;
                        uint _3142;
                        vec4 _3167;
                        float _3168;
                        vec4 _3183;
                        vec3 _3195;
                        vec4 _3210;
                        vec4 _3226;
                        float _3272;
                        bool _3273;
                        for (;;)
                        {
                            uint _3152 = ((_2919 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3141));
                            _3142 = (_3141 + 4294967295u) & _3141;
                            uint _3154 = _3152 * 40u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            _3168 = _3167.w;
                            uint _3170 = (_3152 * 40u) + 4u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3152 * 40u) + 8u;
                            _3195 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x));
                            uint _3197 = (_3152 * 40u) + 16u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3213 = (_3152 * 40u) + 20u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3152 * 40u) + 24u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3247 = (_3152 * 40u) + 28u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3272 = fma(_2487, _3260.z, fma(_2486, _3260.y, _3260.x * _2485)) + _3260.w;
                            _3273 = !((fma(_2487, _3241.z, fma(_2486, _3241.y, _3241.x * _2485)) + _3241.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3273)
                            {
                                float _3300 = _3167.x - _2485;
                                float _3301 = _3167.y - _2486;
                                float _3302 = _3167.z - _2487;
                                float _3303 = dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302));
                                float _3306 = inversesqrt(_3303);
                                float _3307 = _3306 * _3300;
                                float _3308 = _3306 * _3301;
                                float _3309 = _3306 * _3302;
                                float _3313 = 1.0 - (_3303 / (_3168 * _3168));
                                float _4429 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3318 = sqrt(_3303) * _3183.w;
                                float _3320 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                                float _3321 = _3320 * _3320;
                                float _3324 = ((1.0 - _3321) * dot(vec3(_3307, _3308, _3309), vec3(_737, _740, _743))) + _3321;
                                float _3327 = _3318 * _3318;
                                float _3331 = (fma(_2487, _3210.z, fma(_2486, _3210.y, _3210.x * _2485)) + _3210.w) / _3272;
                                float _3332 = (fma(_2487, _3226.z, fma(_2486, _3226.y, _3226.x * _2485)) + _3226.w) / _3272;
                                float _3336 = 1.0 - dot(vec2(_3331, _3332), vec2(_3331, _3332));
                                float _4445 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3338 = _3337 * (((isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0))) * _3314) / ((_3327 * 0.699999988079071044921875) + 1.0));
                                float _3350 = exp2(log2(1.0 / ((_3327 * 3.5) + 5.0)) * 0.25);
                                float _3351 = 1.0 - _797;
                                float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                                float _3359 = _3358 * _3358;
                                float _3360 = _3359 * _3359;
                                float _3361 = _3307 - _2779;
                                float _3362 = _3308 - _2780;
                                float _3363 = _3309 - _2781;
                                float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                                float _3371 = dot(vec3(_737, _740, _743), vec3((-0.0) - _2779, (-0.0) - _2780, (-0.0) - _2781));
                                float _4456 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3375 = dot(vec3(_737, _740, _743), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                                float _4467 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                                float _3383 = _3320 * _3359;
                                float _3384 = _3383 * _3383;
                                float _3390 = ((1.0 - _3384) * dot(vec3(_737, _740, _743), vec3(_3307, _3308, _3309))) + _3384;
                                float _4478 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3392 = 1.0 - _3359;
                                float _3402 = (0.5 / (((_3391 * ((_3374 * _3392) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3359) * _3374))) * _3391;
                                float _4489 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3412 = (_3337 * _3314) * (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) / ((_3382 * _3382) * ((_3327 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3338 * _3183.y;
                                frontier_phi_83_pred_1 = _3338 * _3183.x;
                                frontier_phi_83_pred_2 = _3412 * _3195.z;
                                frontier_phi_83_pred_3 = _3412 * _3195.y;
                                frontier_phi_83_pred_4 = _3412 * _3195.x;
                                frontier_phi_83_pred_5 = _3338 * _3183.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3420 = frontier_phi_83_pred;
                            _3419 = frontier_phi_83_pred_1;
                            _3418 = frontier_phi_83_pred_2;
                            _3417 = frontier_phi_83_pred_3;
                            _3416 = frontier_phi_83_pred_4;
                            _3421 = frontier_phi_83_pred_5;
                            _3125 = _3419 + _3138;
                            _3126 = _3420 + _3139;
                            _3127 = _3421 + _3140;
                            _3122 = _3416 + _3135;
                            _3123 = _3417 + _3136;
                            _3124 = _3418 + _3137;
                            if (_3142 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3142;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3127;
                        frontier_phi_77_pred_1 = _3126;
                        frontier_phi_77_pred_2 = _3125;
                        frontier_phi_77_pred_3 = _3124;
                        frontier_phi_77_pred_4 = _3123;
                        frontier_phi_77_pred_5 = _3122;
                    }
                    _2764 = frontier_phi_77_pred;
                    _2762 = frontier_phi_77_pred_1;
                    _2760 = frontier_phi_77_pred_2;
                    _2758 = frontier_phi_77_pred_3;
                    _2756 = frontier_phi_77_pred_4;
                    _2754 = frontier_phi_77_pred_5;
                    uint _2920 = _2919 + 1u;
                    if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2913 = _2754;
                        _2914 = _2756;
                        _2915 = _2758;
                        _2916 = _2760;
                        _2917 = _2762;
                        _2918 = _2764;
                        _2919 = _2920;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2758;
                frontier_phi_58_59_ladder_1 = _2764;
                frontier_phi_58_59_ladder_2 = _2762;
                frontier_phi_58_59_ladder_3 = _2760;
                frontier_phi_58_59_ladder_4 = _2756;
                frontier_phi_58_59_ladder_5 = _2754;
            }
            else
            {
                frontier_phi_58_59_ladder = _2636;
                frontier_phi_58_59_ladder_1 = _2642;
                frontier_phi_58_59_ladder_2 = _2640;
                frontier_phi_58_59_ladder_3 = _2638;
                frontier_phi_58_59_ladder_4 = _2634;
                frontier_phi_58_59_ladder_5 = _2632;
            }
            _2753 = frontier_phi_58_59_ladder_5;
            _2755 = frontier_phi_58_59_ladder_4;
            _2757 = frontier_phi_58_59_ladder;
            _2759 = frontier_phi_58_59_ladder_3;
            _2761 = frontier_phi_58_59_ladder_2;
            _2763 = frontier_phi_58_59_ladder_1;
        }
        float _2768 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2544 = (_2768 * _2759) + _1996;
        _2546 = (_2768 * _2761) + _1998;
        _2548 = (_2768 * _2763) + _2000;
        _2550 = ((_2753 * 0.039999999105930328369140625) * _2768) + _2329;
        _2552 = ((_2755 * 0.039999999105930328369140625) * _2768) + _2331;
        _2554 = ((_2757 * 0.039999999105930328369140625) * _2768) + _2333;
    }
    else
    {
        _2544 = _1996;
        _2546 = _1998;
        _2548 = _2000;
        _2550 = _2329;
        _2552 = _2331;
        _2554 = _2333;
    }
    float _4505 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4516 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4527 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _2571 = ((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2544 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _781))) + ((_2550 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1617)) * cbPerFrame._m0[3u].x);
    float _2572 = ((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2546 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _781))) + ((_2552 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1617)) * cbPerFrame._m0[3u].x);
    float _2573 = ((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2548 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _781))) + ((_2554 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1617)) * cbPerFrame._m0[3u].x);
    uint _2574 = _238 + 6u;
    float _2582 = _718 / cbSceneParam._m0[86u].x;
    float _2583 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2597 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, (log2((isnan(cbSceneParam._m0[77u].w) ? _639 : (isnan(_639) ? cbSceneParam._m0[77u].w : min(_639, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2599 = _2597.x;
    float _2600 = _2597.y;
    float _2601 = _2597.z;
    float _2602 = _2597.w;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_639 > cbSceneParam._m0[78u].w)
    {
        float _2657 = isnan(_639) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _639 : min(cbSceneParam._m0[80u].w, _639));
        float _2658 = _2657 / _639;
        float _2669 = _2658 * _691;
        float _2670 = _692 * _2658;
        float _2671 = (-0.0) - _2670;
        float _2673 = _2658 * _693;
        float _2675 = (cbSceneParam._m0[77u].w * _2671) / _2657;
        float _2676 = _2675 + cbSceneParam._m0[79u].w;
        float _2677 = cbSceneParam._m0[79u].w - _2670;
        float _2683 = sqrt(((_2669 * _2669) + (_2670 * _2670)) + (_2673 * _2673));
        float _2686 = (1.0 - (cbSceneParam._m0[77u].w / _2657)) * _2683;
        float _2691 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2693 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2870;
        if (abs((_2671 - _2675) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2870 = ((((_2676 > 0.0) ? exp2(_2691 * _2676) : (2.0 - exp2(_2693 * _2676))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2686;
        }
        else
        {
            float _2814 = 1.0 / cbSceneParam._m0[80u].x;
            float _2815 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : max(_2676, _2677));
            float _2816 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : min(_2676, _2677));
            float _2825 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : min(_2815, 0.0));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            _2870 = ((abs(_2683 / _2671) * cbSceneParam._m0[80u].y) * ((((_2825 - _2826) * 2.0) - ((exp2(_2691 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0)))) - exp2(_2691 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))))) * _2814)) - ((exp2(_2693 * _2825) - exp2(_2693 * _2826)) * _2814))) + (_2686 * cbSceneParam._m0[80u].z);
        }
        vec4 _2872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, 1.0), 0.0);
        float _2881 = exp2((_2870 * (-1.44269502162933349609375)) * (1.0 - _2872.w));
        float _2882 = log2(_2881);
        float _2898 = log2(_2602);
        _2695 = (exp2(_2898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].x)) * _2872.x) / cbSceneParam._m0[78u].x)) + _2599;
        _2697 = (exp2(_2898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].y)) * _2872.y) / cbSceneParam._m0[78u].y)) + _2600;
        _2699 = (exp2(_2898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].z)) * _2872.z) / cbSceneParam._m0[78u].z)) + _2601;
        _2701 = _2881 * _2602;
    }
    else
    {
        _2695 = _2599;
        _2697 = _2600;
        _2699 = _2601;
        _2701 = _2602;
    }
    bool _2908;
    vec4 _2711;
    vec4 _2733;
    float _2735;
    float _2739;
    float _2740;
    float _2741;
    float _2742;
    bool _2752;
    for (;;)
    {
        _2711 = cbMatDynParam._m0[0u];
        float _2713 = roundEven(_2711.y);
        bool _2714 = _2713 == 3.0;
        float _2715 = log2(_2701);
        float _2722 = exp2(_2715 * cbSceneParam._m0[78u].x) * _2571;
        float _2723 = exp2(_2715 * cbSceneParam._m0[78u].y) * _2572;
        float _2724 = exp2(_2715 * cbSceneParam._m0[78u].z) * _2573;
        float _2731 = _707 + (-0.5);
        _2733 = cbMtdParam._m0[1u];
        _2735 = _2733.y * _2731;
        float _2738 = (_2713 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2739 = _2738 * (_2714 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2695)));
        _2740 = _2738 * (_2714 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2697)));
        _2741 = _2738 * (_2714 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2699)));
        _2742 = _2731 * 0.999000012874603271484375;
        _2752 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2752)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2742) < 0.5)
            {
                _2908 = true;
                break;
            }
        }
        uint _2849 = _756 + uint(_2711.w);
        if ((cbInstanceData._m0[_2849].w < 1.0) && ((cbInstanceData._m0[_2849].w + _2742) < 0.5))
        {
            _2908 = true;
            break;
        }
        if ((_2735 + 1.0) < _2733.x)
        {
            _2908 = true;
            break;
        }
        _2908 = false;
        break;
    }
    float _3113;
    if (_2908)
    {
        discard_state = true;
        _3113 = 0.0;
    }
    else
    {
        _3113 = cbInstanceData._m0[_2574].w;
    }
    SV_Target.x = _2739;
    SV_Target.y = _2740;
    SV_Target.z = _2741;
    SV_Target.w = _3113;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2574].w;
    discard_exit();
}


