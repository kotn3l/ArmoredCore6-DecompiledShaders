#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1196;
float _3579;
float _3580;
float _3581;
float _3582;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].z) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3591 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _397 = (_390 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _398 = (_390 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _399 = (_390 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _390) + _459;
    float _471 = ((((_438.x - _457) * _390) + _457) * 2.0) + (-1.0);
    float _473 = ((((_438.y - _458) * _390) + _458) * 2.0) + (-1.0);
    float _474 = dot(vec2(_471, _473), vec2(_471, _473));
    float _3602 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))));
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _507 = (((_495.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _471;
    float _508 = (((_495.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _473;
    float _511 = fma(_479, _224, fma(_508, _231, _507 * _217));
    float _514 = fma(_479, _225, fma(_508, _232, _507 * _218));
    float _517 = fma(_479, _226, fma(_508, _233, _507 * _219));
    float _521 = inversesqrt(dot(vec3(_511, _514, _517), vec3(_511, _514, _517)));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _550 = _548.x;
    float _551 = 1.0 - _550;
    float _557 = (cbMtdParam._m0[19u].x + dot(vec4(_521 * _511, _521 * _514, _521 * _517, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_550 - _551) * cbMtdParam._m0[24u].w) + _551) * cbMtdParam._m0[21u].z);
    float _3613 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _565 = (_558 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) + _397;
    float _566 = (_558 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) + _398;
    float _567 = (_558 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) + _399;
    float _571 = (cbMtdParam._m0[19u].w * (_495.z - _468)) + _468;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _591 = (_584.x * 2.0) + (-1.0);
    float _592 = (_584.y * 2.0) + (-1.0);
    float _593 = dot(vec2(_591, _592), vec2(_591, _592));
    float _3624 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _601 = ((_584.z - _571) * _558) + _571;
    float _611 = ((sqrt(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) - _479) * _558) + _479;
    float _614 = (((_591 - _507) * _558) + _507) + (cbMtdParam._m0[21u].x * _507);
    float _615 = (((_592 - _508) * _558) + _508) + (cbMtdParam._m0[21u].x * _508);
    float _619 = cbMtdParam._m0[22u].x + _495.w;
    float _622 = fma(_611, _224, fma(_615, _231, _614 * _217));
    float _625 = fma(_611, _225, fma(_615, _232, _614 * _218));
    float _628 = fma(_611, _226, fma(_615, _233, _614 * _219));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3635 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _636 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3657 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3668 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3679 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _654 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _706 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _696);
    float _707 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _696);
    float _708 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _696);
    float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
    float _713 = _706 * _712;
    float _714 = _707 * _712;
    float _715 = _708 * _712;
    vec4 _720 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _722 = _720.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _876 = sqrt(((_706 * _706) + (_707 * _707)) + (_708 * _708));
        float _882 = (cbMatDynParam._m0[5u].x * _876) + cbMatDynParam._m0[5u].y;
        float _3690 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _887 = (cbMatDynParam._m0[5u].z * _876) + cbMatDynParam._m0[5u].w;
        float _3701 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) - _883)) + _883) < ((_722 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _752 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _755 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _758 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _771 = _236 + 9u;
    uint _772 = _771 + uint(cbMatDynParam._m0[0u].w);
    float _778 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_772].x;
    float _779 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_772].y;
    float _780 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * cbInstanceData._m0[_772].z;
    float _3712 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    vec4 _792 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _733, cbSceneParam._m0[86u].y * _734));
    float _796 = ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * TEXCOORD_5.w) * _792.x;
    float _797 = dot(vec3(_633, _634, _635), vec3(_713, _714, _715));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _633) - _713;
    float _805 = (_800 * _634) - _714;
    float _806 = (_800 * _635) - _715;
    float _810 = abs(dot(vec3(_713, _714, _715), vec3(_633, _634, _635)));
    float _3745 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_636);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1195;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _920 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _924 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _928 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _953 = _857 + _633;
        float _954 = _861 + _634;
        float _955 = _865 + _635;
        float _965 = fma(_955, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953)) - _920;
        float _966 = fma(_955, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953)) - _924;
        float _967 = fma(_955, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953)) - _928;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_920 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_924 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[34u].z) + ((((((_928 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1023 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_989.x + (-0.5));
        float _1025 = _1023 * (_989.y + (-0.5));
        float _1026 = _1023 * (_989.z + (-0.5));
        float _1033 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_996.x + (-0.5));
        float _1035 = _1033 * (_996.y + (-0.5));
        float _1036 = _1033 * (_996.z + (-0.5));
        float _1043 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1003.x + (-0.5));
        float _1045 = _1043 * (_1003.y + (-0.5));
        float _1046 = _1043 * (_1003.z + (-0.5));
        float _1053 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1010.x + (-0.5));
        float _1055 = _1053 * (_1010.y + (-0.5));
        float _1056 = _1053 * (_1010.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1077 = (dot(vec3(_633, _634, _635), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1087 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3793 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1089 + 1.0))) + _1094) * _1057;
        float _1104 = _1025 * 0.5;
        float _1105 = _1035 * 0.5;
        float _1106 = _1045 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_633, _634, _635), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3826 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1131 + 1.0))) + _1136) * _1058;
        float _1146 = _1026 * 0.5;
        float _1147 = _1036 * 0.5;
        float _1148 = _1046 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_633, _634, _635), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3859 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1173 + 1.0))) + _1178) * _1059;
        _1195 = _1026;
        _1197 = _1025;
        _1198 = _1024;
        _1199 = _1036;
        _1200 = _1035;
        _1201 = _1034;
        _1202 = _1046;
        _1203 = _1045;
        _1204 = _1044;
        _1205 = _1059;
        _1206 = _1058;
        _1207 = _1057;
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _1196;
        _1197 = _1196;
        _1198 = _1196;
        _1199 = _1196;
        _1200 = _1196;
        _1201 = _1196;
        _1202 = _1196;
        _1203 = _1196;
        _1204 = _1196;
        _1205 = _1196;
        _1206 = _1196;
        _1207 = _1196;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1238 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1242 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1246 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1269 = _857 + _633;
        float _1270 = _861 + _634;
        float _1271 = _865 + _635;
        float _1281 = fma(_1271, cbModelParam._m0[30u].z, fma(_1270, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1269)) - _1238;
        float _1282 = fma(_1271, cbModelParam._m0[31u].z, fma(_1270, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1269)) - _1242;
        float _1283 = fma(_1271, cbModelParam._m0[32u].z, fma(_1270, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1269)) - _1246;
        float _1287 = inversesqrt(dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283)));
        float _1300 = ((_1287 * _1281) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1238 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1287 * _1282) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1242 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1287 * _1283) / cbModelParam._m0[35u].z) + ((((((_1246 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        float _1337 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1304.x + (-0.5));
        float _1339 = _1337 * (_1304.y + (-0.5));
        float _1340 = _1337 * (_1304.z + (-0.5));
        float _1347 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1311.x + (-0.5));
        float _1349 = _1347 * (_1311.y + (-0.5));
        float _1350 = _1347 * (_1311.z + (-0.5));
        float _1357 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1318.x + (-0.5));
        float _1359 = _1357 * (_1318.y + (-0.5));
        float _1360 = _1357 * (_1318.z + (-0.5));
        float _1367 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1325.x + (-0.5));
        float _1369 = _1367 * (_1325.y + (-0.5));
        float _1370 = _1367 * (_1325.z + (-0.5));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = _1338 * 0.5;
        float _1375 = _1348 * 0.5;
        float _1376 = _1358 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_633, _634, _635), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3922 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1401 + 1.0))) + _1406) * _1371;
        float _1416 = _1339 * 0.5;
        float _1417 = _1349 * 0.5;
        float _1418 = _1359 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_633, _634, _635), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3955 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1443 + 1.0))) + _1448) * _1372;
        float _1458 = _1340 * 0.5;
        float _1459 = _1350 * 0.5;
        float _1460 = _1360 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_633, _634, _635), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _3988 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1485 + 1.0))) + _1490) * _1373;
        _1507 = _1340;
        _1508 = _1339;
        _1509 = _1338;
        _1510 = _1350;
        _1511 = _1349;
        _1512 = _1348;
        _1513 = _1360;
        _1514 = _1359;
        _1515 = _1358;
        _1516 = _1373;
        _1517 = _1372;
        _1518 = _1371;
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1196;
        _1508 = _1196;
        _1509 = _1196;
        _1510 = _1196;
        _1511 = _1196;
        _1512 = _1196;
        _1513 = _1196;
        _1514 = _1196;
        _1515 = _1196;
        _1516 = _1196;
        _1517 = _1196;
        _1518 = _1196;
        _1519 = 0.0;
        _1520 = 0.0;
        _1521 = 0.0;
    }
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1208)) + _1208;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1209)) + _1209;
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1210)) + _1210;
    float _1554 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1531));
    float _1575 = _804 * 0.5;
    float _1576 = _805 * 0.5;
    float _1577 = _806 * 0.5;
    float _1578 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1581 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1584 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1618;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1591 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1195, _1199, _1202, _1205));
        float _1595 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1599 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1606 = dot(vec4(cbModelParam._m0[39u]), vec4(_1575, _1576, _1577, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1606) ? 0.0 : (isnan(0.0) ? _1606 : max(0.0, _1606))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1629;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1620 = dot(vec4(cbModelParam._m0[40u]), vec4(_1575, _1576, _1577, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1620) ? 0.0 : (isnan(0.0) ? _1620 : max(0.0, _1620))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1633 = (_1629 * cbModelParam._m0[1u].x) + (_1618 * (1.0 - cbModelParam._m0[1u].x));
    float _1643 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1643 : min(cbModelParam._m0[25u].z, _1643));
    float _1724;
    float _1726;
    float _1728;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1691 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1695 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1699 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1702 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1705 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1708 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1736;
        if (_1702 > 0.0)
        {
            _1736 = abs((1.0 - _1691) / _1702);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1691 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1736 = frontier_phi_17_15_ladder;
        }
        float _1957;
        if (_1705 > 0.0)
        {
            _1957 = abs((1.0 - _1695) / _1705);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1695 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1957 = frontier_phi_26_22_ladder;
        }
        float _2203;
        if (_1708 > 0.0)
        {
            _2203 = abs((1.0 - _1699) / _1708);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1699 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2203 = frontier_phi_38_33_ladder;
        }
        float _2205 = isnan(_1957) ? _1736 : (isnan(_1736) ? _1957 : min(_1736, _1957));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1702) + _1691;
        float _2211 = (_2206 * _1705) + _1695;
        float _2212 = (_2206 * _1708) + _1699;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2336 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1644);
            frontier_phi_16_38_ladder = _2336.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2336.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2336.x * cbModelParam._m0[1u].y;
        }
        _1724 = frontier_phi_16_38_ladder_2;
        _1726 = frontier_phi_16_38_ladder_1;
        _1728 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1644);
        _1724 = _1712.x * cbModelParam._m0[1u].y;
        _1726 = _1712.y * cbModelParam._m0[1u].y;
        _1728 = _1712.z * cbModelParam._m0[1u].y;
    }
    float _1732 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1733 = isnan(_1732) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1732 : min(cbModelParam._m0[25u].w, _1732));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1786 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1790 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1794 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1797 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1800 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1803 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1962;
        if (_1797 > 0.0)
        {
            _1962 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1962 = frontier_phi_28_24_ladder;
        }
        float _2230;
        if (_1800 > 0.0)
        {
            _2230 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2230 = frontier_phi_40_35_ladder;
        }
        float _2435;
        if (_1803 > 0.0)
        {
            _2435 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2435 = frontier_phi_49_46_ladder;
        }
        float _2437 = isnan(_2230) ? _1962 : (isnan(_1962) ? _2230 : min(_1962, _2230));
        float _2438 = isnan(_2435) ? _2437 : (isnan(_2437) ? _2435 : min(_2437, _2435));
        float _2442 = (_2438 * _1797) + _1786;
        float _2443 = (_2438 * _1800) + _1790;
        float _2444 = (_2438 * _1803) + _1794;
        float _2445 = _2438 * 9.9999997473787516355514526367188e-05;
        float _2446 = (-1.0) - _2445;
        float _2448 = _2445 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2444 > _2448) || ((_2444 < _2446) || ((_2443 > _2448) || ((_2443 < _2446) || ((_2442 < _2446) || (_2442 > _2448))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2643 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2444, cbModelParam._m0[17u].z, fma(_2443, cbModelParam._m0[17u].y, _2442 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2444, cbModelParam._m0[18u].z, fma(_2443, cbModelParam._m0[18u].y, _2442 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2444, cbModelParam._m0[19u].z, fma(_2443, cbModelParam._m0[19u].y, _2442 * cbModelParam._m0[19u].x))), _1733);
            frontier_phi_25_49_ladder = _2643.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2643.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2643.x * cbModelParam._m0[1u].z;
        }
        _1822 = frontier_phi_25_49_ladder_2;
        _1824 = frontier_phi_25_49_ladder_1;
        _1826 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1733);
        _1822 = _1806.x * cbModelParam._m0[1u].z;
        _1824 = _1806.y * cbModelParam._m0[1u].z;
        _1826 = _1806.z * cbModelParam._m0[1u].z;
    }
    float _1838 = ((((1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_825 * _812)) * _796;
    float _1839 = _1838 * ((cbModelParam._m0[1u].w * (_1822 - _1724)) + _1724);
    float _1840 = _1838 * ((cbModelParam._m0[1u].w * (_1824 - _1726)) + _1726);
    float _1841 = _1838 * ((cbModelParam._m0[1u].w * (_1826 - _1728)) + _1728);
    float _1844 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1847 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1850 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, _1839 * cbSceneParam._m0[91u].x));
    vec4 _1858 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_733, _734));
    float _1860 = _1858.w;
    float _1872 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1860);
    float _1873 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1860);
    float _1874 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1860);
    uvec4 _1878 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1880 = _1878.x * 14u;
    uint _1881 = _1880 + 13u;
    float _1888 = _796 + (-1.0);
    float _1893 = (cbLight._m0[_1881].x * _1888) + 1.0;
    float _1894 = (cbLight._m0[_1881].y * _1888) + 1.0;
    float _1895 = (cbLight._m0[_1881].z * _1888) + 1.0;
    float _1896 = (cbLight._m0[_1881].w * _1888) + 1.0;
    uint _1897 = _1880 + 5u;
    float _1903 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    uint _1907 = _1880 + 4u;
    float _1916 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
    uint _1920 = _1880 | 1u;
    float _1931 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_633, _634, _635));
    float _1934 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_633, _634, _635));
    float _4124 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _4135 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1939 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _1941 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.3183098733425140380859375;
    float _1948 = ((cbLight._m0[_1897].x * _1903) * _1941) + (((cbLight._m0[_1907].x * _1872) * _1916) * _1939);
    float _1949 = ((_1903 * cbLight._m0[_1897].y) * _1941) + (((cbLight._m0[_1907].y * _1873) * _1916) * _1939);
    float _1950 = ((_1903 * cbLight._m0[_1897].z) * _1941) + (((cbLight._m0[_1907].z * _1874) * _1916) * _1939);
    uvec4 _1954 = floatBitsToUint(cbLight._m0[_1880 + 12u]);
    bool _1956 = _1954.x == 0u;
    float _1967;
    float _1969;
    float _1971;
    if (_1956)
    {
        _1967 = _1948;
        _1969 = _1949;
        _1971 = _1950;
    }
    else
    {
        uint _1975 = _1880 + 6u;
        float _1991 = (dot(vec3(cbLight._m0[_1880 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _1992 = _1991 * _1991;
        float _4146 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1994 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _1967 = (((cbLight._m0[_1975].x * 0.3183098733425140380859375) * _1993) * _1994) + _1948;
        _1969 = (((cbLight._m0[_1975].y * 0.3183098733425140380859375) * _1993) * _1994) + _1949;
        _1971 = (((cbLight._m0[_1975].z * 0.3183098733425140380859375) * _1993) * _1994) + _1950;
    }
    bool _1974 = _1954.y == 0u;
    float _2012;
    float _2014;
    float _2016;
    if (_1974)
    {
        _2012 = _1967;
        _2014 = _1969;
        _2016 = _1971;
    }
    else
    {
        uint _2174 = _1880 + 7u;
        float _2190 = (dot(vec3(cbLight._m0[_1880 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4162 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2193 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2012 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _1967;
        _2014 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _1969;
        _2016 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _1971;
    }
    uint _2019 = _1880 + 8u;
    float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1880].w)) * _636) * 0.949999988079071044921875);
    float _2033 = _2032 * _2032;
    float _2034 = cbLight._m0[_1880].x + _713;
    float _2035 = cbLight._m0[_1880].y + _714;
    float _2036 = cbLight._m0[_1880].z + _715;
    float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
    float _2041 = _2040 * _2034;
    float _2042 = _2040 * _2035;
    float _2043 = _2040 * _2036;
    float _2044 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1880].xyz));
    float _4178 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2048 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2049 = dot(vec3(_633, _634, _635), vec3(_2041, _2042, _2043));
    float _4200 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2053 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_2041, _2042, _2043));
    float _4211 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2057 = _2033 * _2033;
    float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
    float _2072 = (exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2073 = 1.0 - _2033;
    float _2084 = (0.5 / (((_2048 * ((_2047 * _2073) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2073) + _2033) * _2047))) * _2047;
    float _4222 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2086 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
    uint _2100 = _1880 + 9u;
    float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _636) * 0.949999988079071044921875);
    float _2112 = _2111 * _2111;
    float _2113 = cbLight._m0[_1920].x + _713;
    float _2114 = cbLight._m0[_1920].y + _714;
    float _2115 = cbLight._m0[_1920].z + _715;
    float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
    float _2120 = _2119 * _2113;
    float _2121 = _2119 * _2114;
    float _2122 = _2119 * _2115;
    float _2123 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1920].xyz));
    float _4233 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2127 = dot(vec3(_633, _634, _635), vec3(_2120, _2121, _2122));
    float _4244 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2131 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_2120, _2121, _2122));
    float _4255 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2135 = _2112 * _2112;
    float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
    float _2148 = (exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2149 = 1.0 - _2112;
    float _2159 = (0.5 / (((_2048 * ((_2126 * _2149) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2149) + _2112) * _2126))) * _2126;
    float _4266 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2161 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
    float _2171 = (((_2148 * cbLight._m0[_2100].x) * _2161) * _1903) + ((((cbLight._m0[_2019].x * _1872) * _2072) * _2086) * _1916);
    float _2172 = (((_2148 * cbLight._m0[_2100].y) * _2161) * _1903) + ((((cbLight._m0[_2019].y * _1873) * _2072) * _2086) * _1916);
    float _2173 = (((_2148 * cbLight._m0[_2100].z) * _2161) * _1903) + ((((cbLight._m0[_2019].z * _1874) * _2072) * _2086) * _1916);
    float _2235;
    float _2237;
    float _2239;
    if (_1956)
    {
        _2235 = _2171;
        _2237 = _2172;
        _2239 = _2173;
    }
    else
    {
        uint _2241 = _1880 + 2u;
        uint _2245 = _1880 + 10u;
        float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _636) * 0.949999988079071044921875);
        float _2260 = _2259 * _2259;
        float _2261 = cbLight._m0[_2241].x + _713;
        float _2262 = cbLight._m0[_2241].y + _714;
        float _2263 = cbLight._m0[_2241].z + _715;
        float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
        float _2268 = _2267 * _2261;
        float _2269 = _2267 * _2262;
        float _2270 = _2267 * _2263;
        float _2271 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2241].xyz));
        float _4277 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2275 = dot(vec3(_633, _634, _635), vec3(_2268, _2269, _2270));
        float _4288 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2279 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2268, _2269, _2270));
        float _4299 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2283 = _2260 * _2260;
        float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
        float _2296 = (exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2297 = 1.0 - _2260;
        float _2307 = (0.5 / (((_2048 * ((_2274 * _2297) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2297) + _2260) * _2274))) * _2274;
        float _4310 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2309 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
        float _2310 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2235 = (((_2296 * cbLight._m0[_2245].x) * _2309) * _2310) + _2171;
        _2237 = (((_2296 * cbLight._m0[_2245].y) * _2309) * _2310) + _2172;
        _2239 = (((_2296 * cbLight._m0[_2245].z) * _2309) * _2310) + _2173;
    }
    float _2345;
    float _2347;
    float _2349;
    if (_1974)
    {
        _2345 = _2235;
        _2347 = _2237;
        _2349 = _2239;
    }
    else
    {
        uint _2356 = _1880 + 3u;
        uint _2360 = _1880 + 11u;
        float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _636) * 0.949999988079071044921875);
        float _2375 = _2374 * _2374;
        float _2376 = cbLight._m0[_2356].x + _713;
        float _2377 = cbLight._m0[_2356].y + _714;
        float _2378 = cbLight._m0[_2356].z + _715;
        float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
        float _2383 = _2382 * _2376;
        float _2384 = _2382 * _2377;
        float _2385 = _2382 * _2378;
        float _2386 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2356].xyz));
        float _4326 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2390 = dot(vec3(_633, _634, _635), vec3(_2383, _2384, _2385));
        float _4337 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2394 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2383, _2384, _2385));
        float _4348 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2398 = _2375 * _2375;
        float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
        float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2412 = 1.0 - _2375;
        float _2422 = (0.5 / (((_2048 * ((_2389 * _2412) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2412) + _2375) * _2389))) * _2389;
        float _4359 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2424 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
        float _2425 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2345 = (((_2411 * cbLight._m0[_2360].x) * _2424) * _2425) + _2235;
        _2347 = (((_2411 * cbLight._m0[_2360].y) * _2424) * _2425) + _2237;
        _2349 = (((_2411 * cbLight._m0[_2360].z) * _2424) * _2425) + _2239;
    }
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_1878.y == 0u)
    {
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2500;
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2500;
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2500;
        uvec4 _2515 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2516 = _2515.x;
        uint _2527 = uint((float(_2515.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _2516))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _2516)));
        float _2537 = (log2(_2503 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2538 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        uint _2541 = uint(isnan(14.0) ? _2538 : (isnan(_2538) ? 14.0 : min(_2538, 14.0)));
        uvec4 _2546 = texelFetch(g_lightClusterGridBuffer, int(((_2541 << 2u) + (_2527 << 6u)) >> 2u));
        uint _2547 = _2546.x;
        uint _2548 = _2515.z;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        if (((((1u << ((_2548 >> 4u) & 15u)) + 4294967295u) & _2547) == 0u) || ((_2548 & 240u) == 0u))
        {
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
        }
        else
        {
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            uint _2807 = 0u;
            uint _2816;
            bool _2817;
            for (;;)
            {
                _2816 = texelFetch(g_lightClassification, int((((_2541 << 5u) + (_2527 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                _2817 = _2816 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2817)
                {
                    frontier_phi_66_pred = _2801;
                    frontier_phi_66_pred_1 = _2806;
                    frontier_phi_66_pred_2 = _2805;
                    frontier_phi_66_pred_3 = _2804;
                    frontier_phi_66_pred_4 = _2803;
                    frontier_phi_66_pred_5 = _2802;
                }
                else
                {
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    uint _2952;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2816;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    for (;;)
                    {
                        uint _2956 = uint(findLSB(_2952)) + (_2807 << 5u);
                        uint _2953 = (_2952 + 4294967295u) & _2952;
                        uint _2958 = _2956 * 48u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2978 = (_2956 * 48u) + 4u;
                        vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2997 = (_2956 * 48u) + 8u;
                        vec3 _3008 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x));
                        float _3012 = _2972.x - _2501;
                        float _3013 = _2972.y - _2502;
                        float _3014 = _2972.z - _2503;
                        float _3015 = dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014));
                        float _3018 = inversesqrt(_3015);
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3022 = dot(vec3(_752, _755, _758), vec3(_3019, _3020, _3021));
                        float _3027 = 1.0 - (_3015 * _2972.w);
                        float _4385 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3029 = sqrt(_3015) * _2991.w;
                        float _3032 = 1.39999997615814208984375 / (_3029 + 1.39999997615814208984375);
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _3022) + _3033;
                        float _3039 = _3029 * _3029;
                        float _3043 = ((isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))) * _3028) / ((_3039 * 0.699999988079071044921875) + 1.0);
                        float _3047 = (-0.0) - _2501;
                        float _3048 = (-0.0) - _2502;
                        float _3049 = (-0.0) - _2503;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3064 = exp2(log2(1.0 / ((_3039 * 3.5) + 5.0)) * 0.25);
                        float _3065 = 1.0 - _812;
                        float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                        float _3073 = _3072 * _3072;
                        float _3074 = _3073 * _3073;
                        float _3075 = _3054 + _3019;
                        float _3076 = _3055 + _3020;
                        float _3077 = _3056 + _3021;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3085 = dot(vec3(_752, _755, _758), vec3(_3054, _3055, _3056));
                        float _4401 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3088 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3089 = dot(vec3(_752, _755, _758), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                        float _4412 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                        float _3097 = _3032 * _3073;
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3022) + _3098;
                        float _4423 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3103 = 1.0 - _3073;
                        float _3113 = (0.5 / (((_3102 * ((_3088 * _3103) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3102 * _3103) + _3073) * _3088))) * _3102;
                        float _4434 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3124 = (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3096 * _3096) * ((_3039 * 2.1991131305694580078125) + 3.141590118408203125))) * _3028;
                        _2876 = (_3043 * _2991.x) + _2949;
                        _2877 = (_3043 * _2991.y) + _2950;
                        _2878 = (_3043 * _2991.z) + _2951;
                        _2873 = (_3124 * _3008.x) + _2946;
                        _2874 = (_3124 * _3008.y) + _2947;
                        _2875 = (_3124 * _3008.z) + _2948;
                        if (_2953 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2953;
                        }
                    }
                    frontier_phi_66_pred = _2873;
                    frontier_phi_66_pred_1 = _2878;
                    frontier_phi_66_pred_2 = _2877;
                    frontier_phi_66_pred_3 = _2876;
                    frontier_phi_66_pred_4 = _2875;
                    frontier_phi_66_pred_5 = _2874;
                }
                _2649 = frontier_phi_66_pred;
                _2659 = frontier_phi_66_pred_1;
                _2657 = frontier_phi_66_pred_2;
                _2655 = frontier_phi_66_pred_3;
                _2653 = frontier_phi_66_pred_4;
                _2651 = frontier_phi_66_pred_5;
                uint _2808 = _2807 + 1u;
                if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2801 = _2649;
                    _2802 = _2651;
                    _2803 = _2653;
                    _2804 = _2655;
                    _2805 = _2657;
                    _2806 = _2659;
                    _2807 = _2808;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
        }
        uvec4 _2662 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2663 = _2662.z;
        uint _2665 = (_2663 >> 8u) & 15u;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((4294967295u << _2665) & _2547) == 0u)
        {
            _2769 = _2648;
            _2771 = _2650;
            _2773 = _2652;
            _2775 = _2654;
            _2777 = _2656;
            _2779 = _2658;
        }
        else
        {
            float _2794 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
            float _2795 = _2794 * _2501;
            float _2796 = _2794 * _2502;
            float _2797 = _2794 * _2503;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2665 < ((_2663 >> 12u) & 15u))
            {
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2929 = _2648;
                float _2930 = _2650;
                float _2931 = _2652;
                float _2932 = _2654;
                float _2933 = _2656;
                float _2934 = _2658;
                uint _2935 = _2665;
                uint _2944;
                bool _2945;
                for (;;)
                {
                    _2944 = texelFetch(g_lightClassification, int((((_2541 << 5u) + (_2527 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                    _2945 = _2944 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2945)
                    {
                        frontier_phi_77_pred = _2934;
                        frontier_phi_77_pred_1 = _2933;
                        frontier_phi_77_pred_2 = _2932;
                        frontier_phi_77_pred_3 = _2931;
                        frontier_phi_77_pred_4 = _2930;
                        frontier_phi_77_pred_5 = _2929;
                    }
                    else
                    {
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3151 = _2929;
                        float _3152 = _2930;
                        float _3153 = _2931;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        uint _3157 = _2944;
                        uint _3158;
                        vec4 _3183;
                        float _3184;
                        vec4 _3199;
                        vec3 _3211;
                        vec4 _3226;
                        vec4 _3242;
                        float _3288;
                        bool _3289;
                        for (;;)
                        {
                            uint _3168 = ((_2935 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3157));
                            _3158 = (_3157 + 4294967295u) & _3157;
                            uint _3170 = _3168 * 40u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3184 = _3183.w;
                            uint _3186 = (_3168 * 40u) + 4u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3168 * 40u) + 8u;
                            _3211 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x));
                            uint _3213 = (_3168 * 40u) + 16u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3229 = (_3168 * 40u) + 20u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3168 * 40u) + 24u;
                            vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3263 = (_3168 * 40u) + 28u;
                            vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3288 = fma(_2503, _3276.z, fma(_2502, _3276.y, _3276.x * _2501)) + _3276.w;
                            _3289 = !((fma(_2503, _3257.z, fma(_2502, _3257.y, _3257.x * _2501)) + _3257.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3289)
                            {
                                float _3316 = _3183.x - _2501;
                                float _3317 = _3183.y - _2502;
                                float _3318 = _3183.z - _2503;
                                float _3319 = dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318));
                                float _3322 = inversesqrt(_3319);
                                float _3323 = _3322 * _3316;
                                float _3324 = _3322 * _3317;
                                float _3325 = _3322 * _3318;
                                float _3329 = 1.0 - (_3319 / (_3184 * _3184));
                                float _4445 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3334 = sqrt(_3319) * _3199.w;
                                float _3336 = 1.39999997615814208984375 / (_3334 + 1.39999997615814208984375);
                                float _3337 = _3336 * _3336;
                                float _3340 = ((1.0 - _3337) * dot(vec3(_3323, _3324, _3325), vec3(_752, _755, _758))) + _3337;
                                float _3343 = _3334 * _3334;
                                float _3347 = (fma(_2503, _3226.z, fma(_2502, _3226.y, _3226.x * _2501)) + _3226.w) / _3288;
                                float _3348 = (fma(_2503, _3242.z, fma(_2502, _3242.y, _3242.x * _2501)) + _3242.w) / _3288;
                                float _3352 = 1.0 - dot(vec2(_3347, _3348), vec2(_3347, _3348));
                                float _4461 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3354 = _3353 * (((isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))) * _3330) / ((_3343 * 0.699999988079071044921875) + 1.0));
                                float _3366 = exp2(log2(1.0 / ((_3343 * 3.5) + 5.0)) * 0.25);
                                float _3367 = 1.0 - _812;
                                float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                                float _3375 = _3374 * _3374;
                                float _3376 = _3375 * _3375;
                                float _3377 = _3323 - _2795;
                                float _3378 = _3324 - _2796;
                                float _3379 = _3325 - _2797;
                                float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                                float _3387 = dot(vec3(_752, _755, _758), vec3((-0.0) - _2795, (-0.0) - _2796, (-0.0) - _2797));
                                float _4472 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3390 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3391 = dot(vec3(_752, _755, _758), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                                float _4483 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3394 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                                float _3399 = _3336 * _3375;
                                float _3400 = _3399 * _3399;
                                float _3406 = ((1.0 - _3400) * dot(vec3(_752, _755, _758), vec3(_3323, _3324, _3325))) + _3400;
                                float _4494 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3408 = 1.0 - _3375;
                                float _3418 = (0.5 / (((_3407 * ((_3390 * _3408) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3407 * _3408) + _3375) * _3390))) * _3407;
                                float _4505 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3428 = (_3353 * _3330) * (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3398 * _3398) * ((_3343 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3354 * _3199.y;
                                frontier_phi_83_pred_1 = _3354 * _3199.x;
                                frontier_phi_83_pred_2 = _3428 * _3211.z;
                                frontier_phi_83_pred_3 = _3428 * _3211.y;
                                frontier_phi_83_pred_4 = _3428 * _3211.x;
                                frontier_phi_83_pred_5 = _3354 * _3199.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3436 = frontier_phi_83_pred;
                            _3435 = frontier_phi_83_pred_1;
                            _3434 = frontier_phi_83_pred_2;
                            _3433 = frontier_phi_83_pred_3;
                            _3432 = frontier_phi_83_pred_4;
                            _3437 = frontier_phi_83_pred_5;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            _3143 = _3437 + _3156;
                            _3138 = _3432 + _3151;
                            _3139 = _3433 + _3152;
                            _3140 = _3434 + _3153;
                            if (_3158 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3158;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3143;
                        frontier_phi_77_pred_1 = _3142;
                        frontier_phi_77_pred_2 = _3141;
                        frontier_phi_77_pred_3 = _3140;
                        frontier_phi_77_pred_4 = _3139;
                        frontier_phi_77_pred_5 = _3138;
                    }
                    _2780 = frontier_phi_77_pred;
                    _2778 = frontier_phi_77_pred_1;
                    _2776 = frontier_phi_77_pred_2;
                    _2774 = frontier_phi_77_pred_3;
                    _2772 = frontier_phi_77_pred_4;
                    _2770 = frontier_phi_77_pred_5;
                    uint _2936 = _2935 + 1u;
                    if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2929 = _2770;
                        _2930 = _2772;
                        _2931 = _2774;
                        _2932 = _2776;
                        _2933 = _2778;
                        _2934 = _2780;
                        _2935 = _2936;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2774;
                frontier_phi_58_59_ladder_1 = _2780;
                frontier_phi_58_59_ladder_2 = _2778;
                frontier_phi_58_59_ladder_3 = _2776;
                frontier_phi_58_59_ladder_4 = _2772;
                frontier_phi_58_59_ladder_5 = _2770;
            }
            else
            {
                frontier_phi_58_59_ladder = _2652;
                frontier_phi_58_59_ladder_1 = _2658;
                frontier_phi_58_59_ladder_2 = _2656;
                frontier_phi_58_59_ladder_3 = _2654;
                frontier_phi_58_59_ladder_4 = _2650;
                frontier_phi_58_59_ladder_5 = _2648;
            }
            _2769 = frontier_phi_58_59_ladder_5;
            _2771 = frontier_phi_58_59_ladder_4;
            _2773 = frontier_phi_58_59_ladder;
            _2775 = frontier_phi_58_59_ladder_3;
            _2777 = frontier_phi_58_59_ladder_2;
            _2779 = frontier_phi_58_59_ladder_1;
        }
        float _2784 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2560 = (_2784 * _2775) + _2012;
        _2562 = (_2784 * _2777) + _2014;
        _2564 = (_2784 * _2779) + _2016;
        _2566 = ((_2769 * 0.039999999105930328369140625) * _2784) + _2345;
        _2568 = ((_2771 * 0.039999999105930328369140625) * _2784) + _2347;
        _2570 = ((_2773 * 0.039999999105930328369140625) * _2784) + _2349;
    }
    else
    {
        _2560 = _2012;
        _2562 = _2014;
        _2564 = _2016;
        _2566 = _2345;
        _2568 = _2347;
        _2570 = _2349;
    }
    float _4521 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4532 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4543 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _2587 = ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2560 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _796))) + ((_2566 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    float _2588 = ((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2562 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _796))) + ((_2568 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    float _2589 = ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2564 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _796))) + ((_2570 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    uint _2590 = _236 + 6u;
    float _2598 = _733 / cbSceneParam._m0[86u].x;
    float _2599 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2613 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, (log2((isnan(cbSceneParam._m0[77u].w) ? _654 : (isnan(_654) ? cbSceneParam._m0[77u].w : min(_654, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2615 = _2613.x;
    float _2616 = _2613.y;
    float _2617 = _2613.z;
    float _2618 = _2613.w;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_654 > cbSceneParam._m0[78u].w)
    {
        float _2673 = isnan(_654) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _654 : min(cbSceneParam._m0[80u].w, _654));
        float _2674 = _2673 / _654;
        float _2685 = _2674 * _706;
        float _2686 = _707 * _2674;
        float _2687 = (-0.0) - _2686;
        float _2689 = _2674 * _708;
        float _2691 = (cbSceneParam._m0[77u].w * _2687) / _2673;
        float _2692 = _2691 + cbSceneParam._m0[79u].w;
        float _2693 = cbSceneParam._m0[79u].w - _2686;
        float _2699 = sqrt(((_2685 * _2685) + (_2686 * _2686)) + (_2689 * _2689));
        float _2702 = (1.0 - (cbSceneParam._m0[77u].w / _2673)) * _2699;
        float _2707 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2709 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2886;
        if (abs((_2687 - _2691) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2886 = ((((_2692 > 0.0) ? exp2(_2707 * _2692) : (2.0 - exp2(_2709 * _2692))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2702;
        }
        else
        {
            float _2830 = 1.0 / cbSceneParam._m0[80u].x;
            float _2831 = isnan(_2693) ? _2692 : (isnan(_2692) ? _2693 : max(_2692, _2693));
            float _2832 = isnan(_2693) ? _2692 : (isnan(_2692) ? _2693 : min(_2692, _2693));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            _2886 = ((abs(_2699 / _2687) * cbSceneParam._m0[80u].y) * ((((_2841 - _2842) * 2.0) - ((exp2(_2707 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0)))) - exp2(_2707 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))))) * _2830)) - ((exp2(_2709 * _2841) - exp2(_2709 * _2842)) * _2830))) + (_2702 * cbSceneParam._m0[80u].z);
        }
        vec4 _2888 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, 1.0), 0.0);
        float _2897 = exp2((_2886 * (-1.44269502162933349609375)) * (1.0 - _2888.w));
        float _2898 = log2(_2897);
        float _2914 = log2(_2618);
        _2711 = (exp2(_2914 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].x)) * _2888.x) / cbSceneParam._m0[78u].x)) + _2615;
        _2713 = (exp2(_2914 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].y)) * _2888.y) / cbSceneParam._m0[78u].y)) + _2616;
        _2715 = (exp2(_2914 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].z)) * _2888.z) / cbSceneParam._m0[78u].z)) + _2617;
        _2717 = _2897 * _2618;
    }
    else
    {
        _2711 = _2615;
        _2713 = _2616;
        _2715 = _2617;
        _2717 = _2618;
    }
    bool _2924;
    vec4 _2727;
    vec4 _2749;
    float _2751;
    float _2755;
    float _2756;
    float _2757;
    float _2758;
    bool _2768;
    for (;;)
    {
        _2727 = cbMatDynParam._m0[0u];
        float _2729 = roundEven(_2727.y);
        bool _2730 = _2729 == 3.0;
        float _2731 = log2(_2717);
        float _2738 = exp2(_2731 * cbSceneParam._m0[78u].x) * _2587;
        float _2739 = exp2(_2731 * cbSceneParam._m0[78u].y) * _2588;
        float _2740 = exp2(_2731 * cbSceneParam._m0[78u].z) * _2589;
        float _2747 = _722 + (-0.5);
        _2749 = cbMtdParam._m0[1u];
        _2751 = _2749.y * _2747;
        float _2754 = (_2729 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2755 = _2754 * (_2730 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2711)));
        _2756 = _2754 * (_2730 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2713)));
        _2757 = _2754 * (_2730 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2715)));
        _2758 = _2747 * 0.999000012874603271484375;
        _2768 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2768)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2758) < 0.5)
            {
                _2924 = true;
                break;
            }
        }
        uint _2865 = _771 + uint(_2727.w);
        if ((cbInstanceData._m0[_2865].w < 1.0) && ((cbInstanceData._m0[_2865].w + _2758) < 0.5))
        {
            _2924 = true;
            break;
        }
        if ((_2751 + 1.0) < _2749.x)
        {
            _2924 = true;
            break;
        }
        _2924 = false;
        break;
    }
    float _3129;
    if (_2924)
    {
        discard_state = true;
        _3129 = 0.0;
    }
    else
    {
        _3129 = cbInstanceData._m0[_2590].w;
    }
    SV_Target.x = _2755;
    SV_Target.y = _2756;
    SV_Target.z = _2757;
    SV_Target.w = _3129;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2590].w;
    discard_exit();
}


