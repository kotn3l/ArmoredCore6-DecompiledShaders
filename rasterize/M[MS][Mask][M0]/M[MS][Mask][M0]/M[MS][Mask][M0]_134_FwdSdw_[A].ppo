#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1516;
float _4155;
float _4156;
float _4157;
float _4158;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4167 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4178 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4189 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _373 = _368.x * cbMtdParam._m0[11u].x;
    float _374 = _368.y * cbMtdParam._m0[11u].y;
    float _375 = _368.z * cbMtdParam._m0[11u].z;
    vec4 _394 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _453 = _451.x;
    float _465 = dot(vec4(_453, _451.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _482 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _413.x) * 2.0) - ((((_453 - _465) * cbMtdParam._m0[24u].z) + _465) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4200 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _490 = (_483 * ((_394.x * cbMtdParam._m0[12u].x) - _373)) + _373;
    float _491 = (_483 * ((_394.y * cbMtdParam._m0[12u].y) - _374)) + _374;
    float _492 = (_483 * ((_394.z * cbMtdParam._m0[12u].z) - _375)) + _375;
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _531 = _529.x;
    float _541 = dot(vec4(_531, _529.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _555 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _413.y) * 2.0) - ((((_531 - _541) * cbMtdParam._m0[24u].z) + _541) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4211 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _563 = (_556 * ((_509.x * cbMtdParam._m0[13u].x) - _490)) + _490;
    float _564 = (_556 * ((_509.y * cbMtdParam._m0[13u].y) - _491)) + _491;
    float _565 = (_556 * ((_509.z * cbMtdParam._m0[13u].z) - _492)) + _492;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _305) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _306) + cbTextureTilingScale._m0[24u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _602 = _600.x;
    float _612 = dot(vec4(_602, _600.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _624 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _413.z) * 2.0) - ((((_602 - _612) * cbMtdParam._m0[24u].z) + _612) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4222 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _635 = (_342.x * cbMtdParam._m0[9u].x) * ((_625 * ((_583.x * cbMtdParam._m0[14u].x) - _563)) + _563);
    float _636 = (_342.y * cbMtdParam._m0[9u].y) * ((_625 * ((_583.y * cbMtdParam._m0[14u].y) - _564)) + _564);
    float _637 = (_342.z * cbMtdParam._m0[9u].z) * ((_625 * ((_583.z * cbMtdParam._m0[14u].z) - _565)) + _565);
    float _641 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _635;
    float _644 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _636;
    float _647 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _637;
    float _655 = (((_635 - _641) * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) + _641) * 4.55000019073486328125;
    float _657 = (((_636 - _644) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) + _644) * 4.55000019073486328125;
    float _659 = (((_637 - _647) * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) + _647) * 4.55000019073486328125;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _305) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _306) + cbTextureTilingScale._m0[14u].w));
    vec4 _696 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _719 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _738 = _736.x;
    float _739 = _736.y;
    float _740 = _736.z;
    float _747 = ((_719.x - _738) * _483) + _738;
    float _748 = ((_719.y - _739) * _483) + _739;
    float _749 = ((_719.z - _740) * _483) + _740;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _772 = ((_761.x - _747) * _556) + _747;
    float _773 = ((_761.y - _748) * _556) + _748;
    float _774 = ((_761.z - _749) * _556) + _749;
    vec4 _786 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _305) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _306) + cbTextureTilingScale._m0[23u].w));
    float _799 = ((_786.z - _774) * _625) + _774;
    float _802 = ((((_786.x - _772) * _625) + _772) * 2.0) + (-1.0);
    float _803 = ((((_786.y - _773) * _625) + _773) * 2.0) + (-1.0);
    float _804 = dot(vec2(_802, _803), vec2(_802, _803));
    float _4233 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _809 = sqrt(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))));
    vec4 _823 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _848 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _850 = _848.x;
    float _851 = 1.0 - _850;
    float _864 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_850 - _851) * cbMtdParam._m0[24u].w) + _851) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4244 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _865 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _872 = (_865 * ((_677.x * cbMtdParam._m0[18u].x) - _655)) + _655;
    float _873 = (_865 * ((_677.y * cbMtdParam._m0[18u].y) - _657)) + _657;
    float _874 = (_865 * ((_677.z * cbMtdParam._m0[18u].z) - _659)) + _659;
    float _879 = (((_696.z - _799) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _799;
    float _883 = ((_823.z - _879) * cbMtdParam._m0[19u].w) + _879;
    vec4 _896 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _903 = (_896.x * 2.0) + (-1.0);
    float _904 = (_896.y * 2.0) + (-1.0);
    float _905 = dot(vec2(_903, _904), vec2(_903, _904));
    float _4255 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _913 = (_865 * (_896.z - _883)) + _883;
    float _922 = (_802 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_696.x * 2.0) + (-1.0)))) + (((_823.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _923 = (_803 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_696.y * 2.0) + (-1.0)))) + (((_823.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _935 = (((_903 - _922) + (cbMtdParam._m0[21u].x * _922)) * _865) + _922;
    float _936 = (((_904 - _923) + (cbMtdParam._m0[21u].x * _923)) * _865) + _923;
    float _937 = (_865 * (sqrt(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) - _809)) + _809;
    float _941 = cbMtdParam._m0[22u].x + _823.w;
    float _944 = fma(_937, _252 * NORMAL.x, fma(_936, _259 * TANGENT.x, (_245 * _237) * _935));
    float _947 = fma(_937, _252 * NORMAL.y, fma(_936, _259 * TANGENT.y, (_245 * _238) * _935));
    float _950 = fma(_937, _252 * NORMAL.z, fma(_936, _259 * TANGENT.z, (_245 * _239) * _935));
    float _954 = inversesqrt(dot(vec3(_944, _947, _950), vec3(_944, _947, _950)));
    float _955 = _954 * _944;
    float _956 = _954 * _947;
    float _957 = _954 * _950;
    float _4266 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _958 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _4277 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4288 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4299 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4310 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _976 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1027 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1017);
    float _1028 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1017);
    float _1029 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1017);
    float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
    float _1034 = _1027 * _1033;
    float _1035 = _1028 * _1033;
    float _1036 = _1029 * _1033;
    vec4 _1041 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1043 = _1041.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1197 = sqrt(((_1027 * _1027) + (_1028 * _1028)) + (_1029 * _1029));
        float _1203 = (cbMatDynParam._m0[5u].x * _1197) + cbMatDynParam._m0[5u].y;
        float _4321 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1208 = (cbMatDynParam._m0[5u].z * _1197) + cbMatDynParam._m0[5u].w;
        float _4332 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) - _1204)) + _1204) < ((_1043 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1054 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1055 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1073 = fma(_957, cbSceneParam._m0[5u].z, fma(_956, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _955));
    float _1076 = fma(_957, cbSceneParam._m0[6u].z, fma(_956, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _955));
    float _1079 = fma(_957, cbSceneParam._m0[7u].z, fma(_956, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _955));
    uint _1092 = _286 + 9u;
    uint _1093 = _1092 + uint(cbMatDynParam._m0[0u].w);
    float _1099 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * cbInstanceData._m0[_1093].x;
    float _1100 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * cbInstanceData._m0[_1093].y;
    float _1101 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * cbInstanceData._m0[_1093].z;
    float _4343 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _4354 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _4365 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    vec4 _1113 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1054, cbSceneParam._m0[86u].y * _1055));
    float _1117 = ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * TEXCOORD_5.w) * _1113.x;
    float _1118 = dot(vec3(_955, _956, _957), vec3(_1034, _1035, _1036));
    float _1121 = _1118 * 2.0;
    float _1125 = (_1121 * _955) - _1034;
    float _1126 = (_1121 * _956) - _1035;
    float _1127 = (_1121 * _957) - _1036;
    float _1131 = abs(dot(vec3(_1034, _1035, _1036), vec3(_955, _956, _957)));
    float _4376 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1133 = sqrt(_958);
    float _1146 = exp2((_1133 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1133 * 3.0));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1515;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1240 = fma(_1186, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178));
        float _1244 = fma(_1186, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178));
        float _1248 = fma(_1186, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178));
        float _1273 = _1178 + _955;
        float _1274 = _1182 + _956;
        float _1275 = _1186 + _957;
        float _1285 = fma(_1275, cbModelParam._m0[26u].z, fma(_1274, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1273)) - _1240;
        float _1286 = fma(_1275, cbModelParam._m0[27u].z, fma(_1274, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1273)) - _1244;
        float _1287 = fma(_1275, cbModelParam._m0[28u].z, fma(_1274, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1273)) - _1248;
        float _1291 = inversesqrt(dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287)));
        float _1304 = ((_1291 * _1285) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1240 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1291 * _1286) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1244 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1291 * _1287) / cbModelParam._m0[34u].z) + ((((((_1248 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        float _1343 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1309.x + (-0.5));
        float _1345 = _1343 * (_1309.y + (-0.5));
        float _1346 = _1343 * (_1309.z + (-0.5));
        float _1353 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1316.x + (-0.5));
        float _1355 = _1353 * (_1316.y + (-0.5));
        float _1356 = _1353 * (_1316.z + (-0.5));
        float _1363 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1323.x + (-0.5));
        float _1365 = _1363 * (_1323.y + (-0.5));
        float _1366 = _1363 * (_1323.z + (-0.5));
        float _1373 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1330.x + (-0.5));
        float _1375 = _1373 * (_1330.y + (-0.5));
        float _1376 = _1373 * (_1330.z + (-0.5));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = _1344 * 0.5;
        float _1381 = _1354 * 0.5;
        float _1382 = _1364 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1397 = (dot(vec3(_955, _956, _957), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4402 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1407 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4413 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4424 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_1409 + 1.0))) + _1414) * _1377;
        float _1424 = _1345 * 0.5;
        float _1425 = _1355 * 0.5;
        float _1426 = _1365 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_955, _956, _957), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4457 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1451 + 1.0))) + _1456) * _1378;
        float _1466 = _1346 * 0.5;
        float _1467 = _1356 * 0.5;
        float _1468 = _1366 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_955, _956, _957), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4490 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1493 + 1.0))) + _1498) * _1379;
        _1515 = _1346;
        _1517 = _1345;
        _1518 = _1344;
        _1519 = _1356;
        _1520 = _1355;
        _1521 = _1354;
        _1522 = _1366;
        _1523 = _1365;
        _1524 = _1364;
        _1525 = _1379;
        _1526 = _1378;
        _1527 = _1377;
        _1528 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1529 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1530 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
    }
    else
    {
        _1515 = _1516;
        _1517 = _1516;
        _1518 = _1516;
        _1519 = _1516;
        _1520 = _1516;
        _1521 = _1516;
        _1522 = _1516;
        _1523 = _1516;
        _1524 = _1516;
        _1525 = _1516;
        _1526 = _1516;
        _1527 = _1516;
        _1528 = 0.0;
        _1529 = 0.0;
        _1530 = 0.0;
    }
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1556 = fma(_1186, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178));
        float _1560 = fma(_1186, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178));
        float _1564 = fma(_1186, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178));
        float _1587 = _1178 + _955;
        float _1588 = _1182 + _956;
        float _1589 = _1186 + _957;
        float _1599 = fma(_1589, cbModelParam._m0[30u].z, fma(_1588, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1587)) - _1556;
        float _1600 = fma(_1589, cbModelParam._m0[31u].z, fma(_1588, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1587)) - _1560;
        float _1601 = fma(_1589, cbModelParam._m0[32u].z, fma(_1588, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1587)) - _1564;
        float _1605 = inversesqrt(dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601)));
        float _1618 = ((_1605 * _1599) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1556 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1619 = ((_1605 * _1600) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1560 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1620 = ((_1605 * _1601) / cbModelParam._m0[35u].z) + ((((((_1564 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1618, _1619, _1620), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1618, _1619, _1620), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1618, _1619, _1620), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1618, _1619, _1620), 0.0);
        float _1655 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1622.x + (-0.5));
        float _1657 = _1655 * (_1622.y + (-0.5));
        float _1658 = _1655 * (_1622.z + (-0.5));
        float _1665 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1629.x + (-0.5));
        float _1667 = _1665 * (_1629.y + (-0.5));
        float _1668 = _1665 * (_1629.z + (-0.5));
        float _1675 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1636.x + (-0.5));
        float _1677 = _1675 * (_1636.y + (-0.5));
        float _1678 = _1675 * (_1636.z + (-0.5));
        float _1685 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1686 = _1685 * (_1643.x + (-0.5));
        float _1687 = _1685 * (_1643.y + (-0.5));
        float _1688 = _1685 * (_1643.z + (-0.5));
        float _1689 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1692 = _1656 * 0.5;
        float _1693 = _1666 * 0.5;
        float _1694 = _1676 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_955, _956, _957), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4531 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1689 + 9.9999997473787516355514526367188e-06);
        float _4542 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4553 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_1719 + 1.0))) + _1724) * _1689;
        float _1734 = _1657 * 0.5;
        float _1735 = _1667 * 0.5;
        float _1736 = _1677 * 0.5;
        float _1737 = dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736));
        float _1742 = (_1737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1737);
        float _1750 = (dot(vec3(_955, _956, _957), vec3(_1742 * _1734, _1742 * _1735, _1742 * _1736)) + 1.0) * 0.5;
        float _4564 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1759 = sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4575 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1761 = _1760 * 2.0;
        float _1765 = (1.0 - _1760) / (_1760 + 1.0);
        float _4586 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _1775 = ((((1.0 - _1766) * (_1761 + 2.0)) * exp2(log2(isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_1761 + 1.0))) + _1766) * _1690;
        float _1776 = _1658 * 0.5;
        float _1777 = _1668 * 0.5;
        float _1778 = _1678 * 0.5;
        float _1779 = dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778));
        float _1784 = (_1779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1779);
        float _1792 = (dot(vec3(_955, _956, _957), vec3(_1784 * _1776, _1784 * _1777, _1784 * _1778)) + 1.0) * 0.5;
        float _4597 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1801 = sqrt(((_1777 * _1777) + (_1776 * _1776)) + (_1778 * _1778)) / (_1691 + 9.9999997473787516355514526367188e-06);
        float _4608 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _1803 = _1802 * 2.0;
        float _1807 = (1.0 - _1802) / (_1802 + 1.0);
        float _4619 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _1817 = ((((1.0 - _1808) * (_1803 + 2.0)) * exp2(log2(isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_1803 + 1.0))) + _1808) * _1691;
        _1825 = _1658;
        _1826 = _1657;
        _1827 = _1656;
        _1828 = _1668;
        _1829 = _1667;
        _1830 = _1666;
        _1831 = _1678;
        _1832 = _1677;
        _1833 = _1676;
        _1834 = _1691;
        _1835 = _1690;
        _1836 = _1689;
        _1837 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)));
        _1839 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)));
    }
    else
    {
        _1825 = _1516;
        _1826 = _1516;
        _1827 = _1516;
        _1828 = _1516;
        _1829 = _1516;
        _1830 = _1516;
        _1831 = _1516;
        _1832 = _1516;
        _1833 = _1516;
        _1834 = _1516;
        _1835 = _1516;
        _1836 = _1516;
        _1837 = 0.0;
        _1838 = 0.0;
        _1839 = 0.0;
    }
    float _1849 = (cbModelParam._m0[1u].x * (_1837 - _1528)) + _1528;
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1529)) + _1529;
    float _1851 = (cbModelParam._m0[1u].x * (_1839 - _1530)) + _1530;
    float _1872 = fma(_1851, cbSceneParam._m0[89u].z, fma(_1850, cbSceneParam._m0[89u].y, _1849 * cbSceneParam._m0[89u].x));
    float _1875 = fma(_1851, cbSceneParam._m0[90u].z, fma(_1850, cbSceneParam._m0[90u].y, _1849 * cbSceneParam._m0[90u].x));
    float _1878 = fma(_1851, cbSceneParam._m0[91u].z, fma(_1850, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1849));
    float _1893 = _1125 * 0.5;
    float _1894 = _1126 * 0.5;
    float _1895 = _1127 * 0.5;
    float _1896 = dot(vec4(_1893, _1894, _1895, 1.0), vec4(_1827, _1830, _1833, _1836));
    float _1899 = dot(vec4(_1893, _1894, _1895, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1902 = dot(vec4(_1893, _1894, _1895, 1.0), vec4(_1825, _1828, _1831, _1834));
    float _1936;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1909 = dot(vec4(_1893, _1894, _1895, 1.0), vec4(_1515, _1519, _1522, _1525));
        float _1913 = dot(vec4(_1893, _1894, _1895, 1.0), vec4(_1517, _1520, _1523, _1526));
        float _1917 = dot(vec4(_1893, _1894, _1895, 1.0), vec4(_1518, _1521, _1524, _1527));
        float _1924 = dot(vec4(cbModelParam._m0[39u]), vec4(_1893, _1894, _1895, 1.0));
        _1936 = dot(vec3(isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1924) ? 0.0 : (isnan(0.0) ? _1924 : max(0.0, _1924))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1936 = 1.0;
    }
    float _1947;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1938 = dot(vec4(cbModelParam._m0[40u]), vec4(_1893, _1894, _1895, 1.0));
        _1947 = dot(vec3(isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1938) ? 0.0 : (isnan(0.0) ? _1938 : max(0.0, _1938))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1947 = 1.0;
    }
    float _1951 = (_1947 * cbModelParam._m0[1u].x) + (_1936 * (1.0 - cbModelParam._m0[1u].x));
    float _1961 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1962 = isnan(_1961) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1961 : min(cbModelParam._m0[25u].z, _1961));
    float _2042;
    float _2044;
    float _2046;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2009 = fma(_1186, cbModelParam._m0[13u].z, fma(_1182, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1178)) + cbModelParam._m0[13u].w;
        float _2013 = fma(_1186, cbModelParam._m0[14u].z, fma(_1182, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1178)) + cbModelParam._m0[14u].w;
        float _2017 = fma(_1186, cbModelParam._m0[15u].z, fma(_1182, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1178)) + cbModelParam._m0[15u].w;
        float _2020 = fma(_1127, cbModelParam._m0[13u].z, fma(_1126, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1125));
        float _2023 = fma(_1127, cbModelParam._m0[14u].z, fma(_1126, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1125));
        float _2026 = fma(_1127, cbModelParam._m0[15u].z, fma(_1126, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1125));
        float _2054;
        if (_2020 > 0.0)
        {
            _2054 = abs((1.0 - _2009) / _2020);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2009 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2054 = frontier_phi_17_15_ladder;
        }
        float _2223;
        if (_2023 > 0.0)
        {
            _2223 = abs((1.0 - _2013) / _2023);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2013 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2223 = frontier_phi_26_22_ladder;
        }
        float _2518;
        if (_2026 > 0.0)
        {
            _2518 = abs((1.0 - _2017) / _2026);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2017 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2518 = frontier_phi_38_33_ladder;
        }
        float _2520 = isnan(_2223) ? _2054 : (isnan(_2054) ? _2223 : min(_2054, _2223));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _2020) + _2009;
        float _2526 = (_2521 * _2023) + _2013;
        float _2527 = (_2521 * _2026) + _2017;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2528;
        float _2532 = _2528 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 > _2532) || ((_2526 < _2530) || ((_2525 < _2530) || (_2525 > _2532))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2527, cbModelParam._m0[9u].z, fma(_2526, cbModelParam._m0[9u].y, _2525 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2527, cbModelParam._m0[10u].z, fma(_2526, cbModelParam._m0[10u].y, _2525 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2527, cbModelParam._m0[11u].z, fma(_2526, cbModelParam._m0[11u].y, _2525 * cbModelParam._m0[11u].x))), _1962);
            frontier_phi_16_38_ladder = _2672.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2672.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2672.x * cbModelParam._m0[1u].y;
        }
        _2042 = frontier_phi_16_38_ladder_2;
        _2044 = frontier_phi_16_38_ladder_1;
        _2046 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2030 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1125, _1126, _1127), _1962);
        _2042 = _2030.x * cbModelParam._m0[1u].y;
        _2044 = _2030.y * cbModelParam._m0[1u].y;
        _2046 = _2030.z * cbModelParam._m0[1u].y;
    }
    float _2050 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2051 = isnan(_2050) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2050 : min(cbModelParam._m0[25u].w, _2050));
    float _2140;
    float _2142;
    float _2144;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2104 = fma(_1186, cbModelParam._m0[21u].z, fma(_1182, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1178)) + cbModelParam._m0[21u].w;
        float _2108 = fma(_1186, cbModelParam._m0[22u].z, fma(_1182, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1178)) + cbModelParam._m0[22u].w;
        float _2112 = fma(_1186, cbModelParam._m0[23u].z, fma(_1182, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1178)) + cbModelParam._m0[23u].w;
        float _2115 = fma(_1127, cbModelParam._m0[21u].z, fma(_1126, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1125));
        float _2118 = fma(_1127, cbModelParam._m0[22u].z, fma(_1126, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1125));
        float _2121 = fma(_1127, cbModelParam._m0[23u].z, fma(_1126, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1125));
        float _2228;
        if (_2115 > 0.0)
        {
            _2228 = abs((1.0 - _2104) / _2115);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2104 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2228 = frontier_phi_28_24_ladder;
        }
        float _2545;
        if (_2118 > 0.0)
        {
            _2545 = abs((1.0 - _2108) / _2118);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2108 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2545 = frontier_phi_40_35_ladder;
        }
        float _2872;
        if (_2121 > 0.0)
        {
            _2872 = abs((1.0 - _2112) / _2121);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2112 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2872 = frontier_phi_50_47_ladder;
        }
        float _2874 = isnan(_2545) ? _2228 : (isnan(_2228) ? _2545 : min(_2228, _2545));
        float _2875 = isnan(_2872) ? _2874 : (isnan(_2874) ? _2872 : min(_2874, _2872));
        float _2879 = (_2875 * _2115) + _2104;
        float _2880 = (_2875 * _2118) + _2108;
        float _2881 = (_2875 * _2121) + _2112;
        float _2882 = _2875 * 9.9999997473787516355514526367188e-05;
        float _2883 = (-1.0) - _2882;
        float _2885 = _2882 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2881 > _2885) || ((_2881 < _2883) || ((_2880 > _2885) || ((_2880 < _2883) || ((_2879 < _2883) || (_2879 > _2885))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2881, cbModelParam._m0[17u].z, fma(_2880, cbModelParam._m0[17u].y, _2879 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2881, cbModelParam._m0[18u].z, fma(_2880, cbModelParam._m0[18u].y, _2879 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2881, cbModelParam._m0[19u].z, fma(_2880, cbModelParam._m0[19u].y, _2879 * cbModelParam._m0[19u].x))), _2051);
            frontier_phi_25_50_ladder = _2999.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2999.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2999.x * cbModelParam._m0[1u].z;
        }
        _2140 = frontier_phi_25_50_ladder_2;
        _2142 = frontier_phi_25_50_ladder_1;
        _2144 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2124 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1125, _1126, _1127), _2051);
        _2140 = _2124.x * cbModelParam._m0[1u].z;
        _2142 = _2124.y * cbModelParam._m0[1u].z;
        _2144 = _2124.z * cbModelParam._m0[1u].z;
    }
    float _2156 = ((((1.0 - _1146) * ((_1133 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1146 * _1133)) * _1117;
    float _2157 = _2156 * ((cbModelParam._m0[1u].w * (_2140 - _2042)) + _2042);
    float _2158 = _2156 * ((cbModelParam._m0[1u].w * (_2142 - _2044)) + _2044);
    float _2159 = _2156 * ((cbModelParam._m0[1u].w * (_2144 - _2046)) + _2046);
    float _2162 = fma(_2159, cbSceneParam._m0[89u].z, fma(_2158, cbSceneParam._m0[89u].y, _2157 * cbSceneParam._m0[89u].x));
    float _2165 = fma(_2159, cbSceneParam._m0[90u].z, fma(_2158, cbSceneParam._m0[90u].y, _2157 * cbSceneParam._m0[90u].x));
    float _2168 = fma(_2159, cbSceneParam._m0[91u].z, fma(_2158, cbSceneParam._m0[91u].y, _2157 * cbSceneParam._m0[91u].x));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2206 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2210 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2214 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2215 = _2202 / _2214;
    float _2216 = _2206 / _2214;
    float _2217 = _2210 / _2214;
    float _2364;
    float _2365;
    float _2366;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2244 = ((uint(_2217 > cbSceneParam._m0[59u].y) + uint(_2217 > cbSceneParam._m0[59u].x)) + uint(_2217 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2245 = _2244 + 43u;
        uint _2253 = _2244 + 44u;
        uint _2261 = _2244 + 45u;
        uint _2269 = _2244 + 46u;
        float _2280 = fma(_2214, cbSceneParam._m0[_2245].w, fma(_2210, cbSceneParam._m0[_2245].z, fma(_2206, cbSceneParam._m0[_2245].y, _2202 * cbSceneParam._m0[_2245].x)));
        float _2284 = fma(_2214, cbSceneParam._m0[_2253].w, fma(_2210, cbSceneParam._m0[_2253].z, fma(_2206, cbSceneParam._m0[_2253].y, _2202 * cbSceneParam._m0[_2253].x)));
        float _2292 = fma(_2214, cbSceneParam._m0[_2269].w, fma(_2210, cbSceneParam._m0[_2269].z, fma(_2206, cbSceneParam._m0[_2269].y, _2202 * cbSceneParam._m0[_2269].x)));
        float _2297 = cbSceneParam._m0[33u].z * _2292;
        float _2299 = cbSceneParam._m0[33u].w * _2292;
        float _2302 = fma(_2214, cbSceneParam._m0[_2261].w, fma(_2210, cbSceneParam._m0[_2261].z, fma(_2206, cbSceneParam._m0[_2261].y, _2202 * cbSceneParam._m0[_2261].x))) / _2292;
        float _2350 = (cbSceneParam._m0[33u].x - sqrt(((_2216 * _2216) + (_2215 * _2215)) + (_2217 * _2217))) * cbSceneParam._m0[33u].y;
        float _4745 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2357 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2297 + _2280) / _2292, (_2299 + _2284) / _2292), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2299 + _2280) / _2292, (_2284 - _2297) / _2292), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2280 - _2297) / _2292, (_2284 - _2299) / _2292), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2280 - _2299) / _2292, (_2297 + _2284) / _2292), _2302), 0.0)).x), vec4(0.25)));
        _2364 = 1.0 - (_2357 * cbSceneParam._m0[34u].x);
        _2365 = 1.0 - (_2357 * cbSceneParam._m0[34u].y);
        _2366 = 1.0 - (_2357 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2364 = 1.0;
        _2365 = 1.0;
        _2366 = 1.0;
    }
    float _2430;
    float _2432;
    float _2434;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2418 = fma(_2214, cbSceneParam._m0[63u].w, fma(_2210, cbSceneParam._m0[63u].z, fma(_2206, cbSceneParam._m0[63u].y, _2202 * cbSceneParam._m0[63u].x)));
        float _2419 = fma(_2214, cbSceneParam._m0[60u].w, fma(_2210, cbSceneParam._m0[60u].z, fma(_2206, cbSceneParam._m0[60u].y, _2202 * cbSceneParam._m0[60u].x))) / _2418;
        float _2420 = fma(_2214, cbSceneParam._m0[61u].w, fma(_2210, cbSceneParam._m0[61u].z, fma(_2206, cbSceneParam._m0[61u].y, _2202 * cbSceneParam._m0[61u].x))) / _2418;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2419 >= cbSceneParam._m0[64u].x) && (_2420 >= cbSceneParam._m0[64u].y)) && (_2419 <= cbSceneParam._m0[64u].z)) && (_2420 <= cbSceneParam._m0[64u].w))
        {
            float _2558 = fma(_2214, cbSceneParam._m0[62u].w, fma(_2210, cbSceneParam._m0[62u].z, fma(_2206, cbSceneParam._m0[62u].y, _2202 * cbSceneParam._m0[62u].x))) / _2418;
            float _2562 = isnan(cbSceneParam._m0[41u].w) ? _2558 : (isnan(_2558) ? cbSceneParam._m0[41u].w : max(_2558, cbSceneParam._m0[41u].w));
            float _2605 = (cbSceneParam._m0[33u].x - sqrt(((_2216 * _2216) + (_2215 * _2215)) + (_2217 * _2217))) * cbSceneParam._m0[33u].y;
            float _4761 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
            float _2612 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2419, cbSceneParam._m0[33u].w + _2420), _2562), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2419, _2420 - cbSceneParam._m0[33u].z), _2562), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2419 - cbSceneParam._m0[33u].z, _2420 - cbSceneParam._m0[33u].w), _2562), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2419 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2420), _2562), 0.0)).x), vec4(0.25)));
            float _2616 = 1.0 - (_2612 * cbSceneParam._m0[34u].x);
            float _2617 = 1.0 - (_2612 * cbSceneParam._m0[34u].y);
            float _2618 = 1.0 - (_2612 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2618) ? _2366 : (isnan(_2366) ? _2618 : min(_2366, _2618));
            frontier_phi_37_36_ladder_1 = isnan(_2617) ? _2365 : (isnan(_2365) ? _2617 : min(_2365, _2617));
            frontier_phi_37_36_ladder_2 = isnan(_2616) ? _2364 : (isnan(_2364) ? _2616 : min(_2364, _2616));
        }
        else
        {
            frontier_phi_37_36_ladder = _2366;
            frontier_phi_37_36_ladder_1 = _2365;
            frontier_phi_37_36_ladder_2 = _2364;
        }
        _2430 = frontier_phi_37_36_ladder_2;
        _2432 = frontier_phi_37_36_ladder_1;
        _2434 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2430 = _2364;
        _2432 = _2365;
        _2434 = _2366;
    }
    uvec4 _2439 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2441 = _2439.x * 14u;
    uint _2442 = _2441 + 13u;
    float _2449 = _1117 + (-1.0);
    float _2454 = (cbLight._m0[_2442].x * _2449) + 1.0;
    float _2455 = (cbLight._m0[_2442].y * _2449) + 1.0;
    float _2456 = (cbLight._m0[_2442].z * _2449) + 1.0;
    float _2457 = (cbLight._m0[_2442].w * _2449) + 1.0;
    uint _2458 = _2441 + 5u;
    float _2464 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
    uint _2468 = _2441 + 4u;
    float _2477 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
    uint _2481 = _2441 | 1u;
    float _2492 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_955, _956, _957));
    float _2495 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_955, _956, _957));
    float _4797 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _4808 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2500 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * 0.3183098733425140380859375;
    float _2502 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * 0.3183098733425140380859375;
    float _2509 = ((cbLight._m0[_2458].x * _2464) * _2502) + (((cbLight._m0[_2468].x * _2430) * _2477) * _2500);
    float _2510 = ((_2464 * cbLight._m0[_2458].y) * _2502) + (((cbLight._m0[_2468].y * _2432) * _2477) * _2500);
    float _2511 = ((_2464 * cbLight._m0[_2458].z) * _2502) + (((cbLight._m0[_2468].z * _2434) * _2477) * _2500);
    uvec4 _2515 = floatBitsToUint(cbLight._m0[_2441 + 12u]);
    bool _2517 = _2515.x == 0u;
    float _2619;
    float _2621;
    float _2623;
    if (_2517)
    {
        _2619 = _2509;
        _2621 = _2510;
        _2623 = _2511;
    }
    else
    {
        uint _2627 = _2441 + 6u;
        float _2643 = (dot(vec3(cbLight._m0[_2441 + 2u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2644 = _2643 * _2643;
        float _4819 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2645 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2646 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
        _2619 = (((cbLight._m0[_2627].x * 0.3183098733425140380859375) * _2645) * _2646) + _2509;
        _2621 = (((cbLight._m0[_2627].y * 0.3183098733425140380859375) * _2645) * _2646) + _2510;
        _2623 = (((cbLight._m0[_2627].z * 0.3183098733425140380859375) * _2645) * _2646) + _2511;
    }
    bool _2626 = _2515.y == 0u;
    float _2681;
    float _2683;
    float _2685;
    if (_2626)
    {
        _2681 = _2619;
        _2683 = _2621;
        _2685 = _2623;
    }
    else
    {
        uint _2843 = _2441 + 7u;
        float _2859 = (dot(vec3(cbLight._m0[_2441 + 3u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2860 = _2859 * _2859;
        float _4835 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2861 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2862 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _2681 = (((cbLight._m0[_2843].x * 0.3183098733425140380859375) * _2861) * _2862) + _2619;
        _2683 = (((cbLight._m0[_2843].y * 0.3183098733425140380859375) * _2861) * _2862) + _2621;
        _2685 = (((cbLight._m0[_2843].z * 0.3183098733425140380859375) * _2861) * _2862) + _2623;
    }
    uint _2688 = _2441 + 8u;
    float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _958) * 0.949999988079071044921875);
    float _2702 = _2701 * _2701;
    float _2703 = cbLight._m0[_2441].x + _1034;
    float _2704 = cbLight._m0[_2441].y + _1035;
    float _2705 = cbLight._m0[_2441].z + _1036;
    float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
    float _2710 = _2709 * _2703;
    float _2711 = _2709 * _2704;
    float _2712 = _2709 * _2705;
    float _2713 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2441].xyz));
    float _4851 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2716 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
    float _4862 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _2717 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
    float _2718 = dot(vec3(_955, _956, _957), vec3(_2710, _2711, _2712));
    float _4873 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2721 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
    float _2722 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2710, _2711, _2712));
    float _4884 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2726 = _2702 * _2702;
    float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
    float _2741 = (exp2(log2(1.0 - (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2742 = 1.0 - _2702;
    float _2753 = (0.5 / (((_2717 * ((_2716 * _2742) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _2742) + _2702) * _2716))) * _2716;
    float _4895 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2755 = (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
    uint _2769 = _2441 + 9u;
    float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _958) * 0.949999988079071044921875);
    float _2781 = _2780 * _2780;
    float _2782 = cbLight._m0[_2481].x + _1034;
    float _2783 = cbLight._m0[_2481].y + _1035;
    float _2784 = cbLight._m0[_2481].z + _1036;
    float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
    float _2789 = _2788 * _2782;
    float _2790 = _2788 * _2783;
    float _2791 = _2788 * _2784;
    float _2792 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2481].xyz));
    float _4906 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
    float _2795 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
    float _2796 = dot(vec3(_955, _956, _957), vec3(_2789, _2790, _2791));
    float _4917 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2799 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
    float _2800 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2789, _2790, _2791));
    float _4928 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2804 = _2781 * _2781;
    float _2808 = ((_2799 * _2799) * (_2804 + (-1.0))) + 1.0;
    float _2817 = (exp2(log2(1.0 - (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2818 = 1.0 - _2781;
    float _2828 = (0.5 / (((_2717 * ((_2795 * _2818) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _2818) + _2781) * _2795))) * _2795;
    float _4939 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
    float _2830 = (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2804 / ((_2808 * _2808) * 3.141590118408203125));
    float _2840 = (((_2817 * cbLight._m0[_2769].x) * _2830) * _2464) + ((((cbLight._m0[_2688].x * _2430) * _2741) * _2755) * _2477);
    float _2841 = (((_2817 * cbLight._m0[_2769].y) * _2830) * _2464) + ((((cbLight._m0[_2688].y * _2432) * _2741) * _2755) * _2477);
    float _2842 = (((_2817 * cbLight._m0[_2769].z) * _2830) * _2464) + ((((cbLight._m0[_2688].z * _2434) * _2741) * _2755) * _2477);
    float _2898;
    float _2900;
    float _2902;
    if (_2517)
    {
        _2898 = _2840;
        _2900 = _2841;
        _2902 = _2842;
    }
    else
    {
        uint _2904 = _2441 + 2u;
        uint _2908 = _2441 + 10u;
        float _2922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2904].w)) * _958) * 0.949999988079071044921875);
        float _2923 = _2922 * _2922;
        float _2924 = cbLight._m0[_2904].x + _1034;
        float _2925 = cbLight._m0[_2904].y + _1035;
        float _2926 = cbLight._m0[_2904].z + _1036;
        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
        float _2931 = _2930 * _2924;
        float _2932 = _2930 * _2925;
        float _2933 = _2930 * _2926;
        float _2934 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2904].xyz));
        float _4950 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
        float _2938 = dot(vec3(_955, _956, _957), vec3(_2931, _2932, _2933));
        float _4961 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
        float _2942 = dot(vec3(cbLight._m0[_2904].xyz), vec3(_2931, _2932, _2933));
        float _4972 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2946 = _2923 * _2923;
        float _2950 = ((_2941 * _2941) * (_2946 + (-1.0))) + 1.0;
        float _2959 = (exp2(log2(1.0 - (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2960 = 1.0 - _2923;
        float _2970 = (0.5 / (((_2717 * ((_2937 * _2960) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _2960) + _2923) * _2937))) * _2937;
        float _4983 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2972 = (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * (_2946 / ((_2950 * _2950) * 3.141590118408203125));
        float _2973 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
        _2898 = (((_2959 * cbLight._m0[_2908].x) * _2972) * _2973) + _2840;
        _2900 = (((_2959 * cbLight._m0[_2908].y) * _2972) * _2973) + _2841;
        _2902 = (((_2959 * cbLight._m0[_2908].z) * _2972) * _2973) + _2842;
    }
    float _3004;
    float _3006;
    float _3008;
    if (_2626)
    {
        _3004 = _2898;
        _3006 = _2900;
        _3008 = _2902;
    }
    else
    {
        uint _3015 = _2441 + 3u;
        uint _3019 = _2441 + 11u;
        float _3033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3015].w)) * _958) * 0.949999988079071044921875);
        float _3034 = _3033 * _3033;
        float _3035 = cbLight._m0[_3015].x + _1034;
        float _3036 = cbLight._m0[_3015].y + _1035;
        float _3037 = cbLight._m0[_3015].z + _1036;
        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
        float _3042 = _3041 * _3035;
        float _3043 = _3041 * _3036;
        float _3044 = _3041 * _3037;
        float _3045 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_3015].xyz));
        float _4999 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
        float _3048 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
        float _3049 = dot(vec3(_955, _956, _957), vec3(_3042, _3043, _3044));
        float _5010 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        float _3052 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
        float _3053 = dot(vec3(cbLight._m0[_3015].xyz), vec3(_3042, _3043, _3044));
        float _5021 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3057 = _3034 * _3034;
        float _3061 = ((_3052 * _3052) * (_3057 + (-1.0))) + 1.0;
        float _3070 = (exp2(log2(1.0 - (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3071 = 1.0 - _3034;
        float _3081 = (0.5 / (((_2717 * ((_3048 * _3071) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _3071) + _3034) * _3048))) * _3048;
        float _5032 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
        float _3083 = (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_3057 / ((_3061 * _3061) * 3.141590118408203125));
        float _3084 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _3004 = (((_3070 * cbLight._m0[_3019].x) * _3083) * _3084) + _2898;
        _3006 = (((_3070 * cbLight._m0[_3019].y) * _3083) * _3084) + _2900;
        _3008 = (((_3070 * cbLight._m0[_3019].z) * _3083) * _3084) + _2902;
    }
    float _3150;
    float _3152;
    float _3154;
    float _3156;
    float _3158;
    float _3160;
    if (_2439.y == 0u)
    {
        uvec4 _3105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3106 = _3105.x;
        uint _3117 = uint((float(_3105.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1055) / _3106))) + floor(float(uint(cbSceneParam._m0[85u].x * _1054) / _3106)));
        float _3127 = (log2(_2217 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3128 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
        uint _3131 = uint(isnan(14.0) ? _3128 : (isnan(_3128) ? 14.0 : min(_3128, 14.0)));
        uvec4 _3136 = texelFetch(g_lightClusterGridBuffer, int(((_3131 << 2u) + (_3117 << 6u)) >> 2u));
        uint _3137 = _3136.x;
        uint _3138 = _3105.z;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        if (((((1u << ((_3138 >> 4u) & 15u)) + 4294967295u) & _3137) == 0u) || ((_3138 & 240u) == 0u))
        {
            _3217 = 0.0;
            _3219 = 0.0;
            _3221 = 0.0;
            _3223 = 0.0;
            _3225 = 0.0;
            _3227 = 0.0;
        }
        else
        {
            float _3218;
            float _3220;
            float _3222;
            float _3224;
            float _3226;
            float _3228;
            float _3370 = 0.0;
            float _3371 = 0.0;
            float _3372 = 0.0;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            uint _3376 = 0u;
            uint _3385;
            bool _3386;
            for (;;)
            {
                _3385 = texelFetch(g_lightClassification, int((((_3131 << 5u) + (_3117 << 9u)) + (_3376 << 2u)) >> 2u)).x;
                _3386 = _3385 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3386)
                {
                    frontier_phi_71_pred = _3375;
                    frontier_phi_71_pred_1 = _3374;
                    frontier_phi_71_pred_2 = _3373;
                    frontier_phi_71_pred_3 = _3372;
                    frontier_phi_71_pred_4 = _3371;
                    frontier_phi_71_pred_5 = _3370;
                }
                else
                {
                    float _3515;
                    float _3516;
                    float _3517;
                    float _3518;
                    float _3519;
                    float _3520;
                    uint _3521;
                    _3515 = _3370;
                    _3516 = _3371;
                    _3517 = _3372;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3375;
                    _3521 = _3385;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    for (;;)
                    {
                        uint _3525 = uint(findLSB(_3521)) + (_3376 << 5u);
                        uint _3522 = (_3521 + 4294967295u) & _3521;
                        uint _3527 = _3525 * 48u;
                        vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3527)).x, texelFetch(g_PointLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3527 + 3u)).x));
                        uint _3547 = (_3525 * 48u) + 4u;
                        vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3547)).x, texelFetch(g_PointLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3547 + 3u)).x));
                        uint _3566 = (_3525 * 48u) + 8u;
                        vec3 _3577 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3566)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 2u)).x));
                        float _3581 = _3541.x - _2215;
                        float _3582 = _3541.y - _2216;
                        float _3583 = _3541.z - _2217;
                        float _3584 = dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583));
                        float _3587 = inversesqrt(_3584);
                        float _3588 = _3587 * _3581;
                        float _3589 = _3587 * _3582;
                        float _3590 = _3587 * _3583;
                        float _3591 = dot(vec3(_1073, _1076, _1079), vec3(_3588, _3589, _3590));
                        float _3596 = 1.0 - (_3584 * _3541.w);
                        float _5058 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3597 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                        float _3598 = sqrt(_3584) * _3560.w;
                        float _3601 = 1.39999997615814208984375 / (_3598 + 1.39999997615814208984375);
                        float _3602 = _3601 * _3601;
                        float _3605 = ((1.0 - _3602) * _3591) + _3602;
                        float _3608 = _3598 * _3598;
                        float _3612 = ((isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0))) * _3597) / ((_3608 * 0.699999988079071044921875) + 1.0);
                        float _3616 = (-0.0) - _2215;
                        float _3617 = (-0.0) - _2216;
                        float _3618 = (-0.0) - _2217;
                        float _3622 = inversesqrt(dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618)));
                        float _3623 = _3622 * _3616;
                        float _3624 = _3622 * _3617;
                        float _3625 = _3622 * _3618;
                        float _3632 = exp2(log2(1.0 / ((_3608 * 3.5) + 5.0)) * 0.25);
                        float _3633 = 1.0 - _1133;
                        float _3640 = sqrt(1.0 - ((1.0 - (_3633 * _3633)) * (1.0 - (_3632 * _3632))));
                        float _3641 = _3640 * _3640;
                        float _3642 = _3641 * _3641;
                        float _3643 = _3623 + _3588;
                        float _3644 = _3624 + _3589;
                        float _3645 = _3625 + _3590;
                        float _3649 = inversesqrt(dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645)));
                        float _3653 = dot(vec3(_1073, _1076, _1079), vec3(_3623, _3624, _3625));
                        float _5074 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                        float _3656 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                        float _3657 = dot(vec3(_1073, _1076, _1079), vec3(_3649 * _3643, _3649 * _3644, _3649 * _3645));
                        float _5085 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                        float _3660 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                        float _3664 = ((_3660 * _3660) * (_3642 + (-1.0))) + 1.0;
                        float _3665 = _3601 * _3641;
                        float _3666 = _3665 * _3665;
                        float _3669 = ((1.0 - _3666) * _3591) + _3666;
                        float _5096 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                        float _3670 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                        float _3671 = 1.0 - _3641;
                        float _3681 = (0.5 / (((_3670 * ((_3656 * _3671) + _3641)) + 9.9999999392252902907785028219223e-09) + (((_3670 * _3671) + _3641) * _3656))) * _3670;
                        float _5107 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                        float _3692 = (((_3642 * 3.1415927410125732421875) * (isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0)))) / ((_3664 * _3664) * ((_3608 * 2.1991131305694580078125) + 3.141590118408203125))) * _3597;
                        _3445 = (_3612 * _3560.x) + _3518;
                        _3446 = (_3612 * _3560.y) + _3519;
                        _3447 = (_3612 * _3560.z) + _3520;
                        _3442 = (_3692 * _3577.x) + _3515;
                        _3443 = (_3692 * _3577.y) + _3516;
                        _3444 = (_3692 * _3577.z) + _3517;
                        if (_3522 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3515 = _3442;
                            _3516 = _3443;
                            _3517 = _3444;
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3447;
                            _3521 = _3522;
                        }
                    }
                    frontier_phi_71_pred = _3447;
                    frontier_phi_71_pred_1 = _3446;
                    frontier_phi_71_pred_2 = _3445;
                    frontier_phi_71_pred_3 = _3444;
                    frontier_phi_71_pred_4 = _3443;
                    frontier_phi_71_pred_5 = _3442;
                }
                _3228 = frontier_phi_71_pred;
                _3226 = frontier_phi_71_pred_1;
                _3224 = frontier_phi_71_pred_2;
                _3222 = frontier_phi_71_pred_3;
                _3220 = frontier_phi_71_pred_4;
                _3218 = frontier_phi_71_pred_5;
                uint _3377 = _3376 + 1u;
                if (_3377 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3370 = _3218;
                    _3371 = _3220;
                    _3372 = _3222;
                    _3373 = _3224;
                    _3374 = _3226;
                    _3375 = _3228;
                    _3376 = _3377;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3217 = _3218;
            _3219 = _3220;
            _3221 = _3222;
            _3223 = _3224;
            _3225 = _3226;
            _3227 = _3228;
        }
        uvec4 _3231 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3232 = _3231.z;
        uint _3234 = (_3232 >> 8u) & 15u;
        float _3338;
        float _3340;
        float _3342;
        float _3344;
        float _3346;
        float _3348;
        if (((4294967295u << _3234) & _3137) == 0u)
        {
            _3338 = _3217;
            _3340 = _3219;
            _3342 = _3221;
            _3344 = _3223;
            _3346 = _3225;
            _3348 = _3227;
        }
        else
        {
            float _3363 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
            float _3364 = _3363 * _2215;
            float _3365 = _3363 * _2216;
            float _3366 = _3363 * _2217;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3234 < ((_3232 >> 12u) & 15u))
            {
                float _3339;
                float _3341;
                float _3343;
                float _3345;
                float _3347;
                float _3349;
                float _3498 = _3217;
                float _3499 = _3219;
                float _3500 = _3221;
                float _3501 = _3223;
                float _3502 = _3225;
                float _3503 = _3227;
                uint _3504 = _3234;
                uint _3513;
                bool _3514;
                for (;;)
                {
                    _3513 = texelFetch(g_lightClassification, int((((_3131 << 5u) + (_3117 << 9u)) + (_3504 << 2u)) >> 2u)).x;
                    _3514 = _3513 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3514)
                    {
                        frontier_phi_82_pred = _3503;
                        frontier_phi_82_pred_1 = _3502;
                        frontier_phi_82_pred_2 = _3501;
                        frontier_phi_82_pred_3 = _3500;
                        frontier_phi_82_pred_4 = _3499;
                        frontier_phi_82_pred_5 = _3498;
                    }
                    else
                    {
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3999;
                        float _4000;
                        float _4001;
                        float _4002;
                        float _4003;
                        float _4004;
                        float _3719 = _3498;
                        float _3720 = _3499;
                        float _3721 = _3500;
                        float _3722 = _3501;
                        float _3723 = _3502;
                        float _3724 = _3503;
                        uint _3725 = _3513;
                        uint _3726;
                        vec4 _3751;
                        float _3752;
                        vec4 _3767;
                        vec3 _3779;
                        vec4 _3794;
                        vec4 _3809;
                        float _3855;
                        bool _3856;
                        for (;;)
                        {
                            uint _3736 = ((_3504 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3725));
                            _3726 = (_3725 + 4294967295u) & _3725;
                            uint _3738 = _3736 * 40u;
                            _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            _3752 = _3751.w;
                            uint _3754 = (_3736 * 40u) + 4u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            uint _3769 = (_3736 * 40u) + 8u;
                            _3779 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x));
                            uint _3781 = (_3736 * 40u) + 16u;
                            _3794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 3u)).x));
                            uint _3796 = (_3736 * 40u) + 20u;
                            _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            uint _3811 = (_3736 * 40u) + 24u;
                            vec4 _3824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 3u)).x));
                            uint _3830 = (_3736 * 40u) + 28u;
                            vec4 _3843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 3u)).x));
                            _3855 = fma(_2217, _3843.z, fma(_2216, _3843.y, _3843.x * _2215)) + _3843.w;
                            _3856 = !((fma(_2217, _3824.z, fma(_2216, _3824.y, _3824.x * _2215)) + _3824.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3856)
                            {
                                float _3883 = _3751.x - _2215;
                                float _3884 = _3751.y - _2216;
                                float _3885 = _3751.z - _2217;
                                float _3886 = dot(vec3(_3883, _3884, _3885), vec3(_3883, _3884, _3885));
                                float _3889 = inversesqrt(_3886);
                                float _3890 = _3889 * _3883;
                                float _3891 = _3889 * _3884;
                                float _3892 = _3889 * _3885;
                                float _3896 = 1.0 - (_3886 / (_3752 * _3752));
                                float _5118 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3897 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                                float _3901 = sqrt(_3886) * _3767.w;
                                float _3903 = 1.39999997615814208984375 / (_3901 + 1.39999997615814208984375);
                                float _3904 = _3903 * _3903;
                                float _3907 = ((1.0 - _3904) * dot(vec3(_3890, _3891, _3892), vec3(_1073, _1076, _1079))) + _3904;
                                float _3910 = _3901 * _3901;
                                float _3914 = (fma(_2217, _3794.z, fma(_2216, _3794.y, _3794.x * _2215)) + _3794.w) / _3855;
                                float _3915 = (fma(_2217, _3809.z, fma(_2216, _3809.y, _3809.x * _2215)) + _3809.w) / _3855;
                                float _3919 = 1.0 - dot(vec2(_3914, _3915), vec2(_3914, _3915));
                                float _5134 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3920 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                                float _3921 = _3920 * (((isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0))) * _3897) / ((_3910 * 0.699999988079071044921875) + 1.0));
                                float _3933 = exp2(log2(1.0 / ((_3910 * 3.5) + 5.0)) * 0.25);
                                float _3934 = 1.0 - _1133;
                                float _3941 = sqrt(1.0 - ((1.0 - (_3934 * _3934)) * (1.0 - (_3933 * _3933))));
                                float _3942 = _3941 * _3941;
                                float _3943 = _3942 * _3942;
                                float _3944 = _3890 - _3364;
                                float _3945 = _3891 - _3365;
                                float _3946 = _3892 - _3366;
                                float _3950 = inversesqrt(dot(vec3(_3944, _3945, _3946), vec3(_3944, _3945, _3946)));
                                float _3954 = dot(vec3(_1073, _1076, _1079), vec3((-0.0) - _3364, (-0.0) - _3365, (-0.0) - _3366));
                                float _5145 = isnan(0.0) ? _3954 : (isnan(_3954) ? 0.0 : max(_3954, 0.0));
                                float _3957 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
                                float _3958 = dot(vec3(_1073, _1076, _1079), vec3(_3950 * _3944, _3950 * _3945, _3950 * _3946));
                                float _5156 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3961 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
                                float _3965 = ((_3961 * _3961) * (_3943 + (-1.0))) + 1.0;
                                float _3966 = _3903 * _3942;
                                float _3967 = _3966 * _3966;
                                float _3973 = ((1.0 - _3967) * dot(vec3(_1073, _1076, _1079), vec3(_3890, _3891, _3892))) + _3967;
                                float _5167 = isnan(0.0) ? _3973 : (isnan(_3973) ? 0.0 : max(_3973, 0.0));
                                float _3974 = isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0));
                                float _3975 = 1.0 - _3942;
                                float _3985 = (0.5 / (((_3974 * ((_3957 * _3975) + _3942)) + 9.9999999392252902907785028219223e-09) + (((_3974 * _3975) + _3942) * _3957))) * _3974;
                                float _5178 = isnan(0.0) ? _3985 : (isnan(_3985) ? 0.0 : max(_3985, 0.0));
                                float _3995 = (_3920 * _3897) * (((_3943 * 3.1415927410125732421875) * (isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0)))) / ((_3965 * _3965) * ((_3910 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3921 * _3767.z;
                                frontier_phi_88_pred_1 = _3921 * _3767.y;
                                frontier_phi_88_pred_2 = _3921 * _3767.x;
                                frontier_phi_88_pred_3 = _3995 * _3779.z;
                                frontier_phi_88_pred_4 = _3995 * _3779.y;
                                frontier_phi_88_pred_5 = _3995 * _3779.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4004 = frontier_phi_88_pred;
                            _4003 = frontier_phi_88_pred_1;
                            _4002 = frontier_phi_88_pred_2;
                            _4001 = frontier_phi_88_pred_3;
                            _4000 = frontier_phi_88_pred_4;
                            _3999 = frontier_phi_88_pred_5;
                            _3709 = _4002 + _3722;
                            _3710 = _4003 + _3723;
                            _3711 = _4004 + _3724;
                            _3706 = _3999 + _3719;
                            _3707 = _4000 + _3720;
                            _3708 = _4001 + _3721;
                            if (_3726 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3719 = _3706;
                                _3720 = _3707;
                                _3721 = _3708;
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3711;
                                _3725 = _3726;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3711;
                        frontier_phi_82_pred_1 = _3710;
                        frontier_phi_82_pred_2 = _3709;
                        frontier_phi_82_pred_3 = _3708;
                        frontier_phi_82_pred_4 = _3707;
                        frontier_phi_82_pred_5 = _3706;
                    }
                    _3349 = frontier_phi_82_pred;
                    _3347 = frontier_phi_82_pred_1;
                    _3345 = frontier_phi_82_pred_2;
                    _3343 = frontier_phi_82_pred_3;
                    _3341 = frontier_phi_82_pred_4;
                    _3339 = frontier_phi_82_pred_5;
                    uint _3505 = _3504 + 1u;
                    if (_3505 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3498 = _3339;
                        _3499 = _3341;
                        _3500 = _3343;
                        _3501 = _3345;
                        _3502 = _3347;
                        _3503 = _3349;
                        _3504 = _3505;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3345;
                frontier_phi_63_64_ladder_1 = _3349;
                frontier_phi_63_64_ladder_2 = _3347;
                frontier_phi_63_64_ladder_3 = _3343;
                frontier_phi_63_64_ladder_4 = _3341;
                frontier_phi_63_64_ladder_5 = _3339;
            }
            else
            {
                frontier_phi_63_64_ladder = _3223;
                frontier_phi_63_64_ladder_1 = _3227;
                frontier_phi_63_64_ladder_2 = _3225;
                frontier_phi_63_64_ladder_3 = _3221;
                frontier_phi_63_64_ladder_4 = _3219;
                frontier_phi_63_64_ladder_5 = _3217;
            }
            _3338 = frontier_phi_63_64_ladder_5;
            _3340 = frontier_phi_63_64_ladder_4;
            _3342 = frontier_phi_63_64_ladder_3;
            _3344 = frontier_phi_63_64_ladder;
            _3346 = frontier_phi_63_64_ladder_2;
            _3348 = frontier_phi_63_64_ladder_1;
        }
        float _3353 = isnan(1.0) ? _1117 : (isnan(_1117) ? 1.0 : min(_1117, 1.0));
        _3150 = (_3353 * _3344) + _2681;
        _3152 = (_3353 * _3346) + _2683;
        _3154 = (_3353 * _3348) + _2685;
        _3156 = ((_3338 * 0.039999999105930328369140625) * _3353) + _3004;
        _3158 = ((_3340 * 0.039999999105930328369140625) * _3353) + _3006;
        _3160 = ((_3342 * 0.039999999105930328369140625) * _3353) + _3008;
    }
    else
    {
        _3150 = _2681;
        _3152 = _2683;
        _3154 = _2685;
        _3156 = _3004;
        _3158 = _3006;
        _3160 = _3008;
    }
    float _5194 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _5205 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _5216 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _3177 = ((isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0))) * (_3150 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1117))) + ((_3156 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1951)) * cbPerFrame._m0[3u].x);
    float _3178 = ((isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0))) * (_3152 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1117))) + ((_3158 + ((isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))) * _1951)) * cbPerFrame._m0[3u].x);
    float _3179 = ((isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0))) * (_3154 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1117))) + ((_3160 + ((isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0))) * _1951)) * cbPerFrame._m0[3u].x);
    uint _3180 = _286 + 6u;
    float _3188 = _1054 / cbSceneParam._m0[86u].x;
    float _3189 = _1055 / cbSceneParam._m0[86u].y;
    vec4 _3203 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3188, _3189, (log2((isnan(cbSceneParam._m0[77u].w) ? _976 : (isnan(_976) ? cbSceneParam._m0[77u].w : min(_976, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3205 = _3203.x;
    float _3206 = _3203.y;
    float _3207 = _3203.z;
    float _3208 = _3203.w;
    float _3280;
    float _3282;
    float _3284;
    float _3286;
    if (_976 > cbSceneParam._m0[78u].w)
    {
        float _3242 = isnan(_976) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _976 : min(cbSceneParam._m0[80u].w, _976));
        float _3243 = _3242 / _976;
        float _3254 = _3243 * _1027;
        float _3255 = _1028 * _3243;
        float _3256 = (-0.0) - _3255;
        float _3258 = _3243 * _1029;
        float _3260 = (cbSceneParam._m0[77u].w * _3256) / _3242;
        float _3261 = _3260 + cbSceneParam._m0[79u].w;
        float _3262 = cbSceneParam._m0[79u].w - _3255;
        float _3268 = sqrt(((_3254 * _3254) + (_3255 * _3255)) + (_3258 * _3258));
        float _3271 = (1.0 - (cbSceneParam._m0[77u].w / _3242)) * _3268;
        float _3276 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3278 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3455;
        if (abs((_3256 - _3260) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3455 = ((((_3261 > 0.0) ? exp2(_3276 * _3261) : (2.0 - exp2(_3278 * _3261))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3271;
        }
        else
        {
            float _3399 = 1.0 / cbSceneParam._m0[80u].x;
            float _3400 = isnan(_3262) ? _3261 : (isnan(_3261) ? _3262 : max(_3261, _3262));
            float _3401 = isnan(_3262) ? _3261 : (isnan(_3261) ? _3262 : min(_3261, _3262));
            float _3410 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : min(_3400, 0.0));
            float _3411 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : min(_3401, 0.0));
            _3455 = ((abs(_3268 / _3256) * cbSceneParam._m0[80u].y) * ((((_3410 - _3411) * 2.0) - ((exp2(_3276 * (isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0)))) - exp2(_3276 * (isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))))) * _3399)) - ((exp2(_3278 * _3410) - exp2(_3278 * _3411)) * _3399))) + (_3271 * cbSceneParam._m0[80u].z);
        }
        vec4 _3457 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3188, _3189, 1.0), 0.0);
        float _3466 = exp2((_3455 * (-1.44269502162933349609375)) * (1.0 - _3457.w));
        float _3467 = log2(_3466);
        float _3483 = log2(_3208);
        _3280 = (exp2(_3483 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3467 * cbSceneParam._m0[78u].x)) * _3457.x) / cbSceneParam._m0[78u].x)) + _3205;
        _3282 = (exp2(_3483 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3467 * cbSceneParam._m0[78u].y)) * _3457.y) / cbSceneParam._m0[78u].y)) + _3206;
        _3284 = (exp2(_3483 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3467 * cbSceneParam._m0[78u].z)) * _3457.z) / cbSceneParam._m0[78u].z)) + _3207;
        _3286 = _3466 * _3208;
    }
    else
    {
        _3280 = _3205;
        _3282 = _3206;
        _3284 = _3207;
        _3286 = _3208;
    }
    bool _3493;
    vec4 _3296;
    vec4 _3318;
    float _3320;
    float _3324;
    float _3325;
    float _3326;
    float _3327;
    bool _3337;
    for (;;)
    {
        _3296 = cbMatDynParam._m0[0u];
        float _3298 = roundEven(_3296.y);
        bool _3299 = _3298 == 3.0;
        float _3300 = log2(_3286);
        float _3307 = exp2(_3300 * cbSceneParam._m0[78u].x) * _3177;
        float _3308 = exp2(_3300 * cbSceneParam._m0[78u].y) * _3178;
        float _3309 = exp2(_3300 * cbSceneParam._m0[78u].z) * _3179;
        float _3316 = _1043 + (-0.5);
        _3318 = cbMtdParam._m0[1u];
        _3320 = _3318.y * _3316;
        float _3323 = (_3298 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3324 = _3323 * (_3299 ? _3307 : (_3307 + (cbSceneParam._m0[72u].w * _3280)));
        _3325 = _3323 * (_3299 ? _3308 : (_3308 + (cbSceneParam._m0[72u].w * _3282)));
        _3326 = _3323 * (_3299 ? _3309 : (_3309 + (cbSceneParam._m0[72u].w * _3284)));
        _3327 = _3316 * 0.999000012874603271484375;
        _3337 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3337)
        {
            if ((cbInstanceData._m0[_286 + 7u].x + _3327) < 0.5)
            {
                _3493 = true;
                break;
            }
        }
        uint _3434 = _1092 + uint(_3296.w);
        if ((cbInstanceData._m0[_3434].w < 1.0) && ((cbInstanceData._m0[_3434].w + _3327) < 0.5))
        {
            _3493 = true;
            break;
        }
        if ((_3320 + 1.0) < _3318.x)
        {
            _3493 = true;
            break;
        }
        _3493 = false;
        break;
    }
    float _3697;
    if (_3493)
    {
        discard_state = true;
        _3697 = 0.0;
    }
    else
    {
        _3697 = cbInstanceData._m0[_3180].w;
    }
    SV_Target.x = _3324;
    SV_Target.y = _3325;
    SV_Target.z = _3326;
    SV_Target.w = _3697;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3180].w;
    discard_exit();
}


