#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1577;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3903 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3914 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3925 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _389.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[24u].z) + _441) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3936 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _466 = (_459 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _467 = (_459 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _468 = (_459 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _389.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[24u].z) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3947 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _306) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _307) + cbTextureTilingScale._m0[24u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _578 = _576.x;
    float _588 = dot(vec4(_578, _576.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _600 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _389.z) * 2.0) - ((((_578 - _588) * cbMtdParam._m0[24u].z) + _588) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3958 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _608 = (_601 * ((_559.x * cbMtdParam._m0[14u].x) - _539)) + _539;
    float _609 = (_601 * ((_559.y * cbMtdParam._m0[14u].y) - _540)) + _540;
    float _610 = (_601 * ((_559.z * cbMtdParam._m0[14u].z) - _541)) + _541;
    float _614 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _608;
    float _617 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _609;
    float _620 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _610;
    float _627 = ((_608 - _614) * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) + _614;
    float _628 = ((_609 - _617) * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) + _617;
    float _629 = ((_610 - _620) * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) + _620;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _690 = _688.x;
    float _691 = _688.y;
    float _692 = _688.z;
    float _699 = ((_671.x - _690) * _459) + _690;
    float _700 = ((_671.y - _691) * _459) + _691;
    float _701 = ((_671.z - _692) * _459) + _692;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _724 = ((_713.x - _699) * _532) + _699;
    float _725 = ((_713.y - _700) * _532) + _700;
    float _726 = ((_713.z - _701) * _532) + _701;
    vec4 _738 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _306) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _307) + cbTextureTilingScale._m0[23u].w));
    float _751 = ((_738.z - _726) * _601) + _726;
    float _754 = ((((_738.x - _724) * _601) + _724) * 2.0) + (-1.0);
    float _755 = ((((_738.y - _725) * _601) + _725) * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _3969 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _761 = sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))));
    vec4 _779 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _791 = (_754 + ((((_646.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_779.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _792 = (_755 + ((((_646.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_779.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _795 = fma(_761, _256, fma(_792, _263, _791 * _249));
    float _798 = fma(_761, _257, fma(_792, _264, _791 * _250));
    float _801 = fma(_761, _258, fma(_792, _265, _791 * _251));
    float _805 = inversesqrt(dot(vec3(_795, _798, _801), vec3(_795, _798, _801)));
    vec4 _832 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _834 = _832.x;
    float _835 = 1.0 - _834;
    float _841 = (cbMtdParam._m0[19u].x + dot(vec4(_805 * _795, _805 * _798, _805 * _801, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_834 - _835) * cbMtdParam._m0[24u].w) + _835) * cbMtdParam._m0[21u].z);
    float _3980 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _842 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _844 = (-0.0) - cbMtdParam._m0[24u].x;
    float _846 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _846 : (isnan(_846) ? 1.0 : min(_846, 1.0));
    float _854 = _842 - ((_842 * TEXCOORD_8.x) * _847);
    float _855 = _842 - ((_842 * TEXCOORD_8.y) * _847);
    float _856 = _842 - ((_842 * TEXCOORD_8.z) * _847);
    float _863 = (_854 * (cbMtdParam._m0[17u].x - _627)) + _627;
    float _864 = (_855 * (cbMtdParam._m0[17u].y - _628)) + _628;
    float _865 = (_856 * (cbMtdParam._m0[17u].z - _629)) + _629;
    float _880 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _881 = _880 * TEXCOORD.z;
    float _882 = _880 * TEXCOORD.w;
    vec4 _894 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _881) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _882) + cbTextureTilingScale._m0[19u].w));
    float _896 = _894.x;
    float _897 = 1.0 - _896;
    float _925 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_896 - _897) * cbMtdParam._m0[24u].y) + _897) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4001 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _926 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _934 = ((((cbMtdParam._m0[10u].x - _863) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _926) + _863;
    float _935 = ((((cbMtdParam._m0[10u].y - _864) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _926) + _864;
    float _936 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _865)) * _926) + _865;
    float _941 = (((_646.z - _751) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _751;
    float _945 = ((_779.z - _941) * cbMtdParam._m0[19u].w) + _941;
    vec4 _959 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _966 = (_959.x * 2.0) + (-1.0);
    float _967 = (_959.y * 2.0) + (-1.0);
    float _968 = dot(vec2(_966, _967), vec2(_966, _967));
    float _4012 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _976 = ((_959.z - _945) * _854) + _945;
    float _979 = ((cbMtdParam._m0[23u].y - _976) * _926) + _976;
    vec4 _1000 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _881) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _882) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1006 = (_1000.x * 2.0) + (-1.0);
    float _1007 = (_1000.y * 2.0) + (-1.0);
    float _1008 = dot(vec2(_1006, _1007), vec2(_1006, _1007));
    float _4023 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1023 = ((sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) - _761) * _856) + _761;
    float _1026 = (((_966 - _791) * _854) + _791) + (cbMtdParam._m0[21u].x * _791);
    float _1027 = (((_967 - _792) * _855) + _792) + (cbMtdParam._m0[21u].x * _792);
    float _1038 = (((_1006 - _1026) + (_1026 * cbMtdParam._m0[22u].z)) * _926) + _1026;
    float _1039 = (((_1007 - _1027) + (_1027 * cbMtdParam._m0[22u].z)) * _926) + _1027;
    float _1040 = (_926 * (sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) - _1023)) + _1023;
    float _1042 = cbMtdParam._m0[22u].x + _779.w;
    float _1045 = fma(_1040, _256, fma(_1039, _263, _1038 * _249));
    float _1048 = fma(_1040, _257, fma(_1039, _264, _1038 * _250));
    float _1051 = fma(_1040, _258, fma(_1039, _265, _1038 * _251));
    float _1055 = inversesqrt(dot(vec3(_1045, _1048, _1051), vec3(_1045, _1048, _1051)));
    float _1056 = _1055 * _1045;
    float _1057 = _1055 * _1048;
    float _1058 = _1055 * _1051;
    float _4034 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _1059 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _4056 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4067 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4078 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _1077 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1128 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1118);
    float _1129 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1118);
    float _1130 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1118);
    float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
    float _1135 = _1128 * _1134;
    float _1136 = _1129 * _1134;
    float _1137 = _1130 * _1134;
    float _1143 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1144 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1162 = fma(_1058, cbSceneParam._m0[5u].z, fma(_1057, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1056));
    float _1165 = fma(_1058, cbSceneParam._m0[6u].z, fma(_1057, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1056));
    float _1168 = fma(_1058, cbSceneParam._m0[7u].z, fma(_1057, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1056));
    uint _1182 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1188 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_1182].x;
    float _1189 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_1182].y;
    float _1190 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * cbInstanceData._m0[_1182].z;
    float _4089 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _1192 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1193 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    vec4 _1202 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1143, cbSceneParam._m0[86u].y * _1144));
    float _1206 = ((isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * TEXCOORD_5.w) * _1202.x;
    float _1207 = dot(vec3(_1056, _1057, _1058), vec3(_1135, _1136, _1137));
    float _1210 = _1207 * 2.0;
    float _1214 = (_1210 * _1056) - _1135;
    float _1215 = (_1210 * _1057) - _1136;
    float _1216 = (_1210 * _1058) - _1137;
    float _1220 = abs(dot(vec3(_1135, _1136, _1137), vec3(_1056, _1057, _1058)));
    float _4122 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1222 = sqrt(_1059);
    float _1235 = exp2((_1222 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1222 * 3.0));
    float _1267 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1576;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1301 = fma(_1275, cbModelParam._m0[26u].z, fma(_1271, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1267));
        float _1305 = fma(_1275, cbModelParam._m0[27u].z, fma(_1271, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1267));
        float _1309 = fma(_1275, cbModelParam._m0[28u].z, fma(_1271, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1267));
        float _1334 = _1267 + _1056;
        float _1335 = _1271 + _1057;
        float _1336 = _1275 + _1058;
        float _1346 = fma(_1336, cbModelParam._m0[26u].z, fma(_1335, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1334)) - _1301;
        float _1347 = fma(_1336, cbModelParam._m0[27u].z, fma(_1335, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1334)) - _1305;
        float _1348 = fma(_1336, cbModelParam._m0[28u].z, fma(_1335, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1334)) - _1309;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1365 = ((_1352 * _1346) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1301 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1352 * _1347) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1305 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1352 * _1348) / cbModelParam._m0[34u].z) + ((((((_1309 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        float _1404 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1370.x + (-0.5));
        float _1406 = _1404 * (_1370.y + (-0.5));
        float _1407 = _1404 * (_1370.z + (-0.5));
        float _1414 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1377.x + (-0.5));
        float _1416 = _1414 * (_1377.y + (-0.5));
        float _1417 = _1414 * (_1377.z + (-0.5));
        float _1424 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1384.x + (-0.5));
        float _1426 = _1424 * (_1384.y + (-0.5));
        float _1427 = _1424 * (_1384.z + (-0.5));
        float _1434 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1391.x + (-0.5));
        float _1436 = _1434 * (_1391.y + (-0.5));
        float _1437 = _1434 * (_1391.z + (-0.5));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = _1405 * 0.5;
        float _1442 = _1415 * 0.5;
        float _1443 = _1425 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1458 = (dot(vec3(_1056, _1057, _1058), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1468 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4170 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1470 + 1.0))) + _1475) * _1438;
        float _1485 = _1406 * 0.5;
        float _1486 = _1416 * 0.5;
        float _1487 = _1426 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_1056, _1057, _1058), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4203 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1512 + 1.0))) + _1517) * _1439;
        float _1527 = _1407 * 0.5;
        float _1528 = _1417 * 0.5;
        float _1529 = _1427 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_1056, _1057, _1058), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4236 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1554 + 1.0))) + _1559) * _1440;
        _1576 = _1407;
        _1578 = _1406;
        _1579 = _1405;
        _1580 = _1417;
        _1581 = _1416;
        _1582 = _1415;
        _1583 = _1427;
        _1584 = _1426;
        _1585 = _1425;
        _1586 = _1440;
        _1587 = _1439;
        _1588 = _1438;
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1590 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1591 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
    }
    else
    {
        _1576 = _1577;
        _1578 = _1577;
        _1579 = _1577;
        _1580 = _1577;
        _1581 = _1577;
        _1582 = _1577;
        _1583 = _1577;
        _1584 = _1577;
        _1585 = _1577;
        _1586 = _1577;
        _1587 = _1577;
        _1588 = _1577;
        _1589 = 0.0;
        _1590 = 0.0;
        _1591 = 0.0;
    }
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1614 = fma(_1275, cbModelParam._m0[30u].z, fma(_1271, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267));
        float _1618 = fma(_1275, cbModelParam._m0[31u].z, fma(_1271, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267));
        float _1622 = fma(_1275, cbModelParam._m0[32u].z, fma(_1271, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267));
        float _1645 = _1267 + _1056;
        float _1646 = _1271 + _1057;
        float _1647 = _1275 + _1058;
        float _1657 = fma(_1647, cbModelParam._m0[30u].z, fma(_1646, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1645)) - _1614;
        float _1658 = fma(_1647, cbModelParam._m0[31u].z, fma(_1646, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1645)) - _1618;
        float _1659 = fma(_1647, cbModelParam._m0[32u].z, fma(_1646, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1645)) - _1622;
        float _1663 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
        float _1676 = ((_1663 * _1657) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1614 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1677 = ((_1663 * _1658) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1618 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1678 = ((_1663 * _1659) / cbModelParam._m0[35u].z) + ((((((_1622 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        float _1713 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1680.x + (-0.5));
        float _1715 = _1713 * (_1680.y + (-0.5));
        float _1716 = _1713 * (_1680.z + (-0.5));
        float _1723 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1687.x + (-0.5));
        float _1725 = _1723 * (_1687.y + (-0.5));
        float _1726 = _1723 * (_1687.z + (-0.5));
        float _1733 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1694.x + (-0.5));
        float _1735 = _1733 * (_1694.y + (-0.5));
        float _1736 = _1733 * (_1694.z + (-0.5));
        float _1743 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1701.x + (-0.5));
        float _1745 = _1743 * (_1701.y + (-0.5));
        float _1746 = _1743 * (_1701.z + (-0.5));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = _1714 * 0.5;
        float _1751 = _1724 * 0.5;
        float _1752 = _1734 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_1056, _1057, _1058), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4299 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1777 + 1.0))) + _1782) * _1747;
        float _1792 = _1715 * 0.5;
        float _1793 = _1725 * 0.5;
        float _1794 = _1735 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_1056, _1057, _1058), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1748 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4332 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1819 + 1.0))) + _1824) * _1748;
        float _1834 = _1716 * 0.5;
        float _1835 = _1726 * 0.5;
        float _1836 = _1736 * 0.5;
        float _1837 = dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836));
        float _1842 = (_1837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1837);
        float _1850 = (dot(vec3(_1056, _1057, _1058), vec3(_1842 * _1834, _1842 * _1835, _1842 * _1836)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1859 = sqrt(((_1835 * _1835) + (_1834 * _1834)) + (_1836 * _1836)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1861 = _1860 * 2.0;
        float _1865 = (1.0 - _1860) / (_1860 + 1.0);
        float _4365 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1875 = ((((1.0 - _1866) * (_1861 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1861 + 1.0))) + _1866) * _1749;
        _1883 = _1716;
        _1884 = _1715;
        _1885 = _1714;
        _1886 = _1726;
        _1887 = _1725;
        _1888 = _1724;
        _1889 = _1736;
        _1890 = _1735;
        _1891 = _1734;
        _1892 = _1749;
        _1893 = _1748;
        _1894 = _1747;
        _1895 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1896 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)));
    }
    else
    {
        _1883 = _1577;
        _1884 = _1577;
        _1885 = _1577;
        _1886 = _1577;
        _1887 = _1577;
        _1888 = _1577;
        _1889 = _1577;
        _1890 = _1577;
        _1891 = _1577;
        _1892 = _1577;
        _1893 = _1577;
        _1894 = _1577;
        _1895 = 0.0;
        _1896 = 0.0;
        _1897 = 0.0;
    }
    float _1907 = (cbModelParam._m0[1u].x * (_1895 - _1589)) + _1589;
    float _1908 = (cbModelParam._m0[1u].x * (_1896 - _1590)) + _1590;
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1591)) + _1591;
    float _1930 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1907));
    float _1951 = _1214 * 0.5;
    float _1952 = _1215 * 0.5;
    float _1953 = _1216 * 0.5;
    float _1954 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1957 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1884, _1887, _1890, _1893));
    float _1960 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1883, _1886, _1889, _1892));
    float _1994;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1967 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1576, _1580, _1583, _1586));
        float _1971 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1578, _1581, _1584, _1587));
        float _1975 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1579, _1582, _1585, _1588));
        float _1982 = dot(vec4(cbModelParam._m0[39u]), vec4(_1951, _1952, _1953, 1.0));
        _1994 = dot(vec3(isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)), isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1982) ? 0.0 : (isnan(0.0) ? _1982 : max(0.0, _1982))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1994 = 1.0;
    }
    float _2005;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1996 = dot(vec4(cbModelParam._m0[40u]), vec4(_1951, _1952, _1953, 1.0));
        _2005 = dot(vec3(isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1996) ? 0.0 : (isnan(0.0) ? _1996 : max(0.0, _1996))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2005 = 1.0;
    }
    float _2009 = (_2005 * cbModelParam._m0[1u].x) + (_1994 * (1.0 - cbModelParam._m0[1u].x));
    float _2019 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1059);
    float _2020 = isnan(_2019) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2019 : min(cbModelParam._m0[25u].z, _2019));
    float _2100;
    float _2102;
    float _2104;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2067 = fma(_1275, cbModelParam._m0[13u].z, fma(_1271, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1267)) + cbModelParam._m0[13u].w;
        float _2071 = fma(_1275, cbModelParam._m0[14u].z, fma(_1271, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1267)) + cbModelParam._m0[14u].w;
        float _2075 = fma(_1275, cbModelParam._m0[15u].z, fma(_1271, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1267)) + cbModelParam._m0[15u].w;
        float _2078 = fma(_1216, cbModelParam._m0[13u].z, fma(_1215, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1214));
        float _2081 = fma(_1216, cbModelParam._m0[14u].z, fma(_1215, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1214));
        float _2084 = fma(_1216, cbModelParam._m0[15u].z, fma(_1215, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1214));
        float _2112;
        if (_2078 > 0.0)
        {
            _2112 = abs((1.0 - _2067) / _2078);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2067 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2112 = frontier_phi_14_12_ladder;
        }
        float _2334;
        if (_2081 > 0.0)
        {
            _2334 = abs((1.0 - _2071) / _2081);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2071 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2334 = frontier_phi_23_19_ladder;
        }
        float _2580;
        if (_2084 > 0.0)
        {
            _2580 = abs((1.0 - _2075) / _2084);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2075 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2580 = frontier_phi_35_30_ladder;
        }
        float _2582 = isnan(_2334) ? _2112 : (isnan(_2112) ? _2334 : min(_2112, _2334));
        float _2583 = isnan(_2580) ? _2582 : (isnan(_2582) ? _2580 : min(_2582, _2580));
        float _2587 = (_2583 * _2078) + _2067;
        float _2588 = (_2583 * _2081) + _2071;
        float _2589 = (_2583 * _2084) + _2075;
        float _2590 = _2583 * 9.9999997473787516355514526367188e-05;
        float _2592 = (-1.0) - _2590;
        float _2594 = _2590 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2589 > _2594) || ((_2589 < _2592) || ((_2588 > _2594) || ((_2588 < _2592) || ((_2587 < _2592) || (_2587 > _2594))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2589, cbModelParam._m0[9u].z, fma(_2588, cbModelParam._m0[9u].y, _2587 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2589, cbModelParam._m0[10u].z, fma(_2588, cbModelParam._m0[10u].y, _2587 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2589, cbModelParam._m0[11u].z, fma(_2588, cbModelParam._m0[11u].y, _2587 * cbModelParam._m0[11u].x))), _2020);
            frontier_phi_13_35_ladder = _2713.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2713.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2713.x * cbModelParam._m0[1u].y;
        }
        _2100 = frontier_phi_13_35_ladder_2;
        _2102 = frontier_phi_13_35_ladder_1;
        _2104 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2088 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1214, _1215, _1216), _2020);
        _2100 = _2088.x * cbModelParam._m0[1u].y;
        _2102 = _2088.y * cbModelParam._m0[1u].y;
        _2104 = _2088.z * cbModelParam._m0[1u].y;
    }
    float _2108 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1059);
    float _2109 = isnan(_2108) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2108 : min(cbModelParam._m0[25u].w, _2108));
    float _2199;
    float _2201;
    float _2203;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2163 = fma(_1275, cbModelParam._m0[21u].z, fma(_1271, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1267)) + cbModelParam._m0[21u].w;
        float _2167 = fma(_1275, cbModelParam._m0[22u].z, fma(_1271, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1267)) + cbModelParam._m0[22u].w;
        float _2171 = fma(_1275, cbModelParam._m0[23u].z, fma(_1271, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1267)) + cbModelParam._m0[23u].w;
        float _2174 = fma(_1216, cbModelParam._m0[21u].z, fma(_1215, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1214));
        float _2177 = fma(_1216, cbModelParam._m0[22u].z, fma(_1215, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1214));
        float _2180 = fma(_1216, cbModelParam._m0[23u].z, fma(_1215, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1214));
        float _2339;
        if (_2174 > 0.0)
        {
            _2339 = abs((1.0 - _2163) / _2174);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2174 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2163 + 1.0) / _2174);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2339 = frontier_phi_25_21_ladder;
        }
        float _2607;
        if (_2177 > 0.0)
        {
            _2607 = abs((1.0 - _2167) / _2177);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2177 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2167 + 1.0) / _2177);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2607 = frontier_phi_37_32_ladder;
        }
        float _2812;
        if (_2180 > 0.0)
        {
            _2812 = abs((1.0 - _2171) / _2180);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2171 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2812 = frontier_phi_46_43_ladder;
        }
        float _2814 = isnan(_2607) ? _2339 : (isnan(_2339) ? _2607 : min(_2339, _2607));
        float _2815 = isnan(_2812) ? _2814 : (isnan(_2814) ? _2812 : min(_2814, _2812));
        float _2819 = (_2815 * _2174) + _2163;
        float _2820 = (_2815 * _2177) + _2167;
        float _2821 = (_2815 * _2180) + _2171;
        float _2822 = _2815 * 9.9999997473787516355514526367188e-05;
        float _2823 = (-1.0) - _2822;
        float _2825 = _2822 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2821 > _2825) || ((_2821 < _2823) || ((_2820 > _2825) || ((_2820 < _2823) || ((_2819 < _2823) || (_2819 > _2825))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3020 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2821, cbModelParam._m0[17u].z, fma(_2820, cbModelParam._m0[17u].y, _2819 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2821, cbModelParam._m0[18u].z, fma(_2820, cbModelParam._m0[18u].y, _2819 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2821, cbModelParam._m0[19u].z, fma(_2820, cbModelParam._m0[19u].y, _2819 * cbModelParam._m0[19u].x))), _2109);
            frontier_phi_22_46_ladder = _3020.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3020.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3020.x * cbModelParam._m0[1u].z;
        }
        _2199 = frontier_phi_22_46_ladder_2;
        _2201 = frontier_phi_22_46_ladder_1;
        _2203 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2183 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1214, _1215, _1216), _2109);
        _2199 = _2183.x * cbModelParam._m0[1u].z;
        _2201 = _2183.y * cbModelParam._m0[1u].z;
        _2203 = _2183.z * cbModelParam._m0[1u].z;
    }
    float _2215 = ((((1.0 - _1235) * ((_1222 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1235 * _1222)) * _1206;
    float _2216 = _2215 * ((cbModelParam._m0[1u].w * (_2199 - _2100)) + _2100);
    float _2217 = _2215 * ((cbModelParam._m0[1u].w * (_2201 - _2102)) + _2102);
    float _2218 = _2215 * ((cbModelParam._m0[1u].w * (_2203 - _2104)) + _2104);
    float _2221 = fma(_2218, cbSceneParam._m0[89u].z, fma(_2217, cbSceneParam._m0[89u].y, _2216 * cbSceneParam._m0[89u].x));
    float _2224 = fma(_2218, cbSceneParam._m0[90u].z, fma(_2217, cbSceneParam._m0[90u].y, _2216 * cbSceneParam._m0[90u].x));
    float _2227 = fma(_2218, cbSceneParam._m0[91u].z, fma(_2217, cbSceneParam._m0[91u].y, _2216 * cbSceneParam._m0[91u].x));
    vec4 _2235 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1143, _1144));
    float _2237 = _2235.w;
    float _2249 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2237);
    float _2250 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2237);
    float _2251 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2237);
    uvec4 _2255 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2257 = _2255.x * 14u;
    uint _2258 = _2257 + 13u;
    float _2265 = _1206 + (-1.0);
    float _2270 = (cbLight._m0[_2258].x * _2265) + 1.0;
    float _2271 = (cbLight._m0[_2258].y * _2265) + 1.0;
    float _2272 = (cbLight._m0[_2258].z * _2265) + 1.0;
    float _2273 = (cbLight._m0[_2258].w * _2265) + 1.0;
    uint _2274 = _2257 + 5u;
    float _2280 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2284 = _2257 + 4u;
    float _2293 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
    uint _2297 = _2257 | 1u;
    float _2308 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_1056, _1057, _1058));
    float _2311 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_1056, _1057, _1058));
    float _4501 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _4512 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2316 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * 0.3183098733425140380859375;
    float _2318 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * 0.3183098733425140380859375;
    float _2325 = ((cbLight._m0[_2274].x * _2280) * _2318) + (((cbLight._m0[_2284].x * _2249) * _2293) * _2316);
    float _2326 = ((_2280 * cbLight._m0[_2274].y) * _2318) + (((cbLight._m0[_2284].y * _2250) * _2293) * _2316);
    float _2327 = ((_2280 * cbLight._m0[_2274].z) * _2318) + (((cbLight._m0[_2284].z * _2251) * _2293) * _2316);
    uvec4 _2331 = floatBitsToUint(cbLight._m0[_2257 + 12u]);
    bool _2333 = _2331.x == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2333)
    {
        _2344 = _2325;
        _2346 = _2326;
        _2348 = _2327;
    }
    else
    {
        uint _2352 = _2257 + 6u;
        float _2368 = (dot(vec3(cbLight._m0[_2257 + 2u].xyz), vec3(_1056, _1057, _1058)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4523 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2371 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2344 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2325;
        _2346 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2326;
        _2348 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2327;
    }
    bool _2351 = _2331.y == 0u;
    float _2389;
    float _2391;
    float _2393;
    if (_2351)
    {
        _2389 = _2344;
        _2391 = _2346;
        _2393 = _2348;
    }
    else
    {
        uint _2551 = _2257 + 7u;
        float _2567 = (dot(vec3(cbLight._m0[_2257 + 3u].xyz), vec3(_1056, _1057, _1058)) * 0.5) + 0.5;
        float _2568 = _2567 * _2567;
        float _4539 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2569 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2570 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2389 = (((cbLight._m0[_2551].x * 0.3183098733425140380859375) * _2569) * _2570) + _2344;
        _2391 = (((cbLight._m0[_2551].y * 0.3183098733425140380859375) * _2569) * _2570) + _2346;
        _2393 = (((cbLight._m0[_2551].z * 0.3183098733425140380859375) * _2569) * _2570) + _2348;
    }
    uint _2396 = _2257 + 8u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _1059) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2257].x + _1135;
    float _2412 = cbLight._m0[_2257].y + _1136;
    float _2413 = cbLight._m0[_2257].z + _1137;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_1056, _1057, _1058), vec3(cbLight._m0[_2257].xyz));
    float _4555 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _4566 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _2425 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2426 = dot(vec3(_1056, _1057, _1058), vec3(_2418, _2419, _2420));
    float _4577 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2418, _2419, _2420));
    float _4588 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2410 * _2410;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2449 = (exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2450 = 1.0 - _2410;
    float _2461 = (0.5 / (((_2425 * ((_2424 * _2450) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2450) + _2410) * _2424))) * _2424;
    float _4599 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    uint _2477 = _2257 + 9u;
    float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _1059) * 0.949999988079071044921875);
    float _2489 = _2488 * _2488;
    float _2490 = cbLight._m0[_2297].x + _1135;
    float _2491 = cbLight._m0[_2297].y + _1136;
    float _2492 = cbLight._m0[_2297].z + _1137;
    float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
    float _2497 = _2496 * _2490;
    float _2498 = _2496 * _2491;
    float _2499 = _2496 * _2492;
    float _2500 = dot(vec3(_1056, _1057, _1058), vec3(cbLight._m0[_2297].xyz));
    float _4610 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2504 = dot(vec3(_1056, _1057, _1058), vec3(_2497, _2498, _2499));
    float _4621 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2508 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2497, _2498, _2499));
    float _4632 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2512 = _2489 * _2489;
    float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
    float _2525 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2526 = 1.0 - _2489;
    float _2536 = (0.5 / (((_2425 * ((_2503 * _2526) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2526) + _2489) * _2503))) * _2503;
    float _4643 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2538 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
    float _2548 = (((_2525 * cbLight._m0[_2477].x) * _2538) * _2280) + ((((cbLight._m0[_2396].x * _2249) * _2449) * _2463) * _2293);
    float _2549 = (((_2525 * cbLight._m0[_2477].y) * _2538) * _2280) + ((((cbLight._m0[_2396].y * _2250) * _2449) * _2463) * _2293);
    float _2550 = (((_2525 * cbLight._m0[_2477].z) * _2538) * _2280) + ((((cbLight._m0[_2396].z * _2251) * _2449) * _2463) * _2293);
    float _2612;
    float _2614;
    float _2616;
    if (_2333)
    {
        _2612 = _2548;
        _2614 = _2549;
        _2616 = _2550;
    }
    else
    {
        uint _2618 = _2257 + 2u;
        uint _2622 = _2257 + 10u;
        float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2618].w)) * _1059) * 0.949999988079071044921875);
        float _2637 = _2636 * _2636;
        float _2638 = cbLight._m0[_2618].x + _1135;
        float _2639 = cbLight._m0[_2618].y + _1136;
        float _2640 = cbLight._m0[_2618].z + _1137;
        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
        float _2645 = _2644 * _2638;
        float _2646 = _2644 * _2639;
        float _2647 = _2644 * _2640;
        float _2648 = dot(vec3(_1056, _1057, _1058), vec3(cbLight._m0[_2618].xyz));
        float _4654 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2652 = dot(vec3(_1056, _1057, _1058), vec3(_2645, _2646, _2647));
        float _4665 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2656 = dot(vec3(cbLight._m0[_2618].xyz), vec3(_2645, _2646, _2647));
        float _4676 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2660 = _2637 * _2637;
        float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
        float _2673 = (exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2674 = 1.0 - _2637;
        float _2684 = (0.5 / (((_2425 * ((_2651 * _2674) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2674) + _2637) * _2651))) * _2651;
        float _4687 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2686 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
        float _2687 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2612 = (((_2673 * cbLight._m0[_2622].x) * _2686) * _2687) + _2548;
        _2614 = (((_2673 * cbLight._m0[_2622].y) * _2686) * _2687) + _2549;
        _2616 = (((_2673 * cbLight._m0[_2622].z) * _2686) * _2687) + _2550;
    }
    float _2722;
    float _2724;
    float _2726;
    if (_2351)
    {
        _2722 = _2612;
        _2724 = _2614;
        _2726 = _2616;
    }
    else
    {
        uint _2733 = _2257 + 3u;
        uint _2737 = _2257 + 11u;
        float _2751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2733].w)) * _1059) * 0.949999988079071044921875);
        float _2752 = _2751 * _2751;
        float _2753 = cbLight._m0[_2733].x + _1135;
        float _2754 = cbLight._m0[_2733].y + _1136;
        float _2755 = cbLight._m0[_2733].z + _1137;
        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
        float _2760 = _2759 * _2753;
        float _2761 = _2759 * _2754;
        float _2762 = _2759 * _2755;
        float _2763 = dot(vec3(_1056, _1057, _1058), vec3(cbLight._m0[_2733].xyz));
        float _4703 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2767 = dot(vec3(_1056, _1057, _1058), vec3(_2760, _2761, _2762));
        float _4714 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2771 = dot(vec3(cbLight._m0[_2733].xyz), vec3(_2760, _2761, _2762));
        float _4725 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2775 = _2752 * _2752;
        float _2779 = ((_2770 * _2770) * (_2775 + (-1.0))) + 1.0;
        float _2788 = (exp2(log2(1.0 - (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2789 = 1.0 - _2752;
        float _2799 = (0.5 / (((_2425 * ((_2766 * _2789) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2789) + _2752) * _2766))) * _2766;
        float _4736 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2801 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2775 / ((_2779 * _2779) * 3.141590118408203125));
        float _2802 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2722 = (((_2788 * cbLight._m0[_2737].x) * _2801) * _2802) + _2612;
        _2724 = (((_2788 * cbLight._m0[_2737].y) * _2801) * _2802) + _2614;
        _2726 = (((_2788 * cbLight._m0[_2737].z) * _2801) * _2802) + _2616;
    }
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_2255.y == 0u)
    {
        float _2877 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2878 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2877;
        float _2879 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2877;
        float _2880 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2877;
        uvec4 _2892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2893 = _2892.x;
        uint _2904 = uint((float(_2892.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1144) / _2893))) + floor(float(uint(cbSceneParam._m0[85u].x * _1143) / _2893)));
        float _2914 = (log2(_2880 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2915 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        uint _2918 = uint(isnan(14.0) ? _2915 : (isnan(_2915) ? 14.0 : min(_2915, 14.0)));
        uvec4 _2923 = texelFetch(g_lightClusterGridBuffer, int(((_2918 << 2u) + (_2904 << 6u)) >> 2u));
        uint _2924 = _2923.x;
        uint _2925 = _2892.z;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        if (((((1u << ((_2925 >> 4u) & 15u)) + 4294967295u) & _2924) == 0u) || ((_2925 & 240u) == 0u))
        {
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
        }
        else
        {
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            uint _3175 = 0u;
            uint _3184;
            bool _3185;
            for (;;)
            {
                _3184 = texelFetch(g_lightClassification, int((((_2918 << 5u) + (_2904 << 9u)) + (_3175 << 2u)) >> 2u)).x;
                _3185 = _3184 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3185)
                {
                    frontier_phi_61_pred = _3169;
                    frontier_phi_61_pred_1 = _3174;
                    frontier_phi_61_pred_2 = _3173;
                    frontier_phi_61_pred_3 = _3172;
                    frontier_phi_61_pred_4 = _3171;
                    frontier_phi_61_pred_5 = _3170;
                }
                else
                {
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    uint _3299;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3184;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    for (;;)
                    {
                        uint _3303 = uint(findLSB(_3299)) + (_3175 << 5u);
                        uint _3300 = (_3299 + 4294967295u) & _3299;
                        uint _3305 = _3303 * 48u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 3u)).x));
                        uint _3325 = (_3303 * 48u) + 4u;
                        vec4 _3338 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 3u)).x));
                        uint _3344 = (_3303 * 48u) + 8u;
                        vec3 _3355 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x));
                        float _3359 = _3319.x - _2878;
                        float _3360 = _3319.y - _2879;
                        float _3361 = _3319.z - _2880;
                        float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                        float _3365 = inversesqrt(_3362);
                        float _3366 = _3365 * _3359;
                        float _3367 = _3365 * _3360;
                        float _3368 = _3365 * _3361;
                        float _3369 = dot(vec3(_1162, _1165, _1168), vec3(_3366, _3367, _3368));
                        float _3374 = 1.0 - (_3362 * _3319.w);
                        float _4762 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3376 = sqrt(_3362) * _3338.w;
                        float _3379 = 1.39999997615814208984375 / (_3376 + 1.39999997615814208984375);
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3369) + _3380;
                        float _3386 = _3376 * _3376;
                        float _3390 = ((isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))) * _3375) / ((_3386 * 0.699999988079071044921875) + 1.0);
                        float _3394 = (-0.0) - _2878;
                        float _3395 = (-0.0) - _2879;
                        float _3396 = (-0.0) - _2880;
                        float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                        float _3401 = _3400 * _3394;
                        float _3402 = _3400 * _3395;
                        float _3403 = _3400 * _3396;
                        float _3411 = exp2(log2(1.0 / ((_3386 * 3.5) + 5.0)) * 0.25);
                        float _3412 = 1.0 - _1222;
                        float _3419 = sqrt(1.0 - ((1.0 - (_3412 * _3412)) * (1.0 - (_3411 * _3411))));
                        float _3420 = _3419 * _3419;
                        float _3421 = _3420 * _3420;
                        float _3422 = _3401 + _3366;
                        float _3423 = _3402 + _3367;
                        float _3424 = _3403 + _3368;
                        float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                        float _3432 = dot(vec3(_1162, _1165, _1168), vec3(_3401, _3402, _3403));
                        float _4778 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3435 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3436 = dot(vec3(_1162, _1165, _1168), vec3(_3428 * _3422, _3428 * _3423, _3428 * _3424));
                        float _4789 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3439 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3443 = ((_3439 * _3439) * (_3421 + (-1.0))) + 1.0;
                        float _3444 = _3379 * _3420;
                        float _3445 = _3444 * _3444;
                        float _3448 = ((1.0 - _3445) * _3369) + _3445;
                        float _4800 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3450 = 1.0 - _3420;
                        float _3460 = (0.5 / (((_3449 * ((_3435 * _3450) + _3420)) + 9.9999999392252902907785028219223e-09) + (((_3449 * _3450) + _3420) * _3435))) * _3449;
                        float _4811 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3471 = (((_3421 * 3.1415927410125732421875) * (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) / ((_3443 * _3443) * ((_3386 * 2.1991131305694580078125) + 3.141590118408203125))) * _3375;
                        _3228 = (_3390 * _3338.x) + _3296;
                        _3229 = (_3390 * _3338.y) + _3297;
                        _3230 = (_3390 * _3338.z) + _3298;
                        _3225 = (_3471 * _3355.x) + _3293;
                        _3226 = (_3471 * _3355.y) + _3294;
                        _3227 = (_3471 * _3355.z) + _3295;
                        if (_3300 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3300;
                        }
                    }
                    frontier_phi_61_pred = _3225;
                    frontier_phi_61_pred_1 = _3230;
                    frontier_phi_61_pred_2 = _3229;
                    frontier_phi_61_pred_3 = _3228;
                    frontier_phi_61_pred_4 = _3227;
                    frontier_phi_61_pred_5 = _3226;
                }
                _3026 = frontier_phi_61_pred;
                _3036 = frontier_phi_61_pred_1;
                _3034 = frontier_phi_61_pred_2;
                _3032 = frontier_phi_61_pred_3;
                _3030 = frontier_phi_61_pred_4;
                _3028 = frontier_phi_61_pred_5;
                uint _3176 = _3175 + 1u;
                if (_3176 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3169 = _3026;
                    _3170 = _3028;
                    _3171 = _3030;
                    _3172 = _3032;
                    _3173 = _3034;
                    _3174 = _3036;
                    _3175 = _3176;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
        }
        uvec4 _3039 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3040 = _3039.z;
        uint _3042 = (_3040 >> 8u) & 15u;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        if (((4294967295u << _3042) & _2924) == 0u)
        {
            _3137 = _3025;
            _3139 = _3027;
            _3141 = _3029;
            _3143 = _3031;
            _3145 = _3033;
            _3147 = _3035;
        }
        else
        {
            float _3162 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
            float _3163 = _3162 * _2878;
            float _3164 = _3162 * _2879;
            float _3165 = _3162 * _2880;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3042 < ((_3040 >> 12u) & 15u))
            {
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3276 = _3025;
                float _3277 = _3027;
                float _3278 = _3029;
                float _3279 = _3031;
                float _3280 = _3033;
                float _3281 = _3035;
                uint _3282 = _3042;
                uint _3291;
                bool _3292;
                for (;;)
                {
                    _3291 = texelFetch(g_lightClassification, int((((_2918 << 5u) + (_2904 << 9u)) + (_3282 << 2u)) >> 2u)).x;
                    _3292 = _3291 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3292)
                    {
                        frontier_phi_67_pred = _3279;
                        frontier_phi_67_pred_1 = _3280;
                        frontier_phi_67_pred_2 = _3281;
                        frontier_phi_67_pred_3 = _3278;
                        frontier_phi_67_pred_4 = _3277;
                        frontier_phi_67_pred_5 = _3276;
                    }
                    else
                    {
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3489 = _3276;
                        float _3490 = _3277;
                        float _3491 = _3278;
                        float _3492 = _3279;
                        float _3493 = _3280;
                        float _3494 = _3281;
                        uint _3495 = _3291;
                        uint _3496;
                        vec4 _3521;
                        float _3522;
                        vec4 _3537;
                        vec3 _3549;
                        vec4 _3564;
                        vec4 _3579;
                        float _3625;
                        bool _3626;
                        for (;;)
                        {
                            uint _3506 = ((_3282 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3495));
                            _3496 = (_3495 + 4294967295u) & _3495;
                            uint _3508 = _3506 * 40u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            _3522 = _3521.w;
                            uint _3524 = (_3506 * 40u) + 4u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3539 = (_3506 * 40u) + 8u;
                            _3549 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x));
                            uint _3551 = (_3506 * 40u) + 16u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3506 * 40u) + 20u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3506 * 40u) + 24u;
                            vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3600 = (_3506 * 40u) + 28u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3625 = fma(_2880, _3613.z, fma(_2879, _3613.y, _3613.x * _2878)) + _3613.w;
                            _3626 = !((fma(_2880, _3594.z, fma(_2879, _3594.y, _3594.x * _2878)) + _3594.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3626)
                            {
                                float _3653 = _3521.x - _2878;
                                float _3654 = _3521.y - _2879;
                                float _3655 = _3521.z - _2880;
                                float _3656 = dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655));
                                float _3659 = inversesqrt(_3656);
                                float _3660 = _3659 * _3653;
                                float _3661 = _3659 * _3654;
                                float _3662 = _3659 * _3655;
                                float _3666 = 1.0 - (_3656 / (_3522 * _3522));
                                float _4822 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3671 = sqrt(_3656) * _3537.w;
                                float _3673 = 1.39999997615814208984375 / (_3671 + 1.39999997615814208984375);
                                float _3674 = _3673 * _3673;
                                float _3677 = ((1.0 - _3674) * dot(vec3(_3660, _3661, _3662), vec3(_1162, _1165, _1168))) + _3674;
                                float _3680 = _3671 * _3671;
                                float _3684 = (fma(_2880, _3564.z, fma(_2879, _3564.y, _3564.x * _2878)) + _3564.w) / _3625;
                                float _3685 = (fma(_2880, _3579.z, fma(_2879, _3579.y, _3579.x * _2878)) + _3579.w) / _3625;
                                float _3689 = 1.0 - dot(vec2(_3684, _3685), vec2(_3684, _3685));
                                float _4838 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3691 = _3690 * (((isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0))) * _3667) / ((_3680 * 0.699999988079071044921875) + 1.0));
                                float _3703 = exp2(log2(1.0 / ((_3680 * 3.5) + 5.0)) * 0.25);
                                float _3704 = 1.0 - _1222;
                                float _3711 = sqrt(1.0 - ((1.0 - (_3704 * _3704)) * (1.0 - (_3703 * _3703))));
                                float _3712 = _3711 * _3711;
                                float _3713 = _3712 * _3712;
                                float _3714 = _3660 - _3163;
                                float _3715 = _3661 - _3164;
                                float _3716 = _3662 - _3165;
                                float _3720 = inversesqrt(dot(vec3(_3714, _3715, _3716), vec3(_3714, _3715, _3716)));
                                float _3724 = dot(vec3(_1162, _1165, _1168), vec3((-0.0) - _3163, (-0.0) - _3164, (-0.0) - _3165));
                                float _4849 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3727 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3728 = dot(vec3(_1162, _1165, _1168), vec3(_3720 * _3714, _3720 * _3715, _3720 * _3716));
                                float _4860 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3735 = ((_3731 * _3731) * (_3713 + (-1.0))) + 1.0;
                                float _3736 = _3673 * _3712;
                                float _3737 = _3736 * _3736;
                                float _3743 = ((1.0 - _3737) * dot(vec3(_1162, _1165, _1168), vec3(_3660, _3661, _3662))) + _3737;
                                float _4871 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3745 = 1.0 - _3712;
                                float _3755 = (0.5 / (((_3744 * ((_3727 * _3745) + _3712)) + 9.9999999392252902907785028219223e-09) + (((_3744 * _3745) + _3712) * _3727))) * _3744;
                                float _4882 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3765 = (_3690 * _3667) * (((_3713 * 3.1415927410125732421875) * (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) / ((_3735 * _3735) * ((_3680 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3765 * _3549.x;
                                frontier_phi_73_pred_1 = _3765 * _3549.y;
                                frontier_phi_73_pred_2 = _3691 * _3537.z;
                                frontier_phi_73_pred_3 = _3691 * _3537.y;
                                frontier_phi_73_pred_4 = _3691 * _3537.x;
                                frontier_phi_73_pred_5 = _3765 * _3549.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3769 = frontier_phi_73_pred;
                            _3770 = frontier_phi_73_pred_1;
                            _3774 = frontier_phi_73_pred_2;
                            _3773 = frontier_phi_73_pred_3;
                            _3772 = frontier_phi_73_pred_4;
                            _3771 = frontier_phi_73_pred_5;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            if (_3496 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3496;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3479;
                        frontier_phi_67_pred_1 = _3480;
                        frontier_phi_67_pred_2 = _3481;
                        frontier_phi_67_pred_3 = _3478;
                        frontier_phi_67_pred_4 = _3477;
                        frontier_phi_67_pred_5 = _3476;
                    }
                    _3144 = frontier_phi_67_pred;
                    _3146 = frontier_phi_67_pred_1;
                    _3148 = frontier_phi_67_pred_2;
                    _3142 = frontier_phi_67_pred_3;
                    _3140 = frontier_phi_67_pred_4;
                    _3138 = frontier_phi_67_pred_5;
                    uint _3283 = _3282 + 1u;
                    if (_3283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3276 = _3138;
                        _3277 = _3140;
                        _3278 = _3142;
                        _3279 = _3144;
                        _3280 = _3146;
                        _3281 = _3148;
                        _3282 = _3283;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3146;
                frontier_phi_55_56_ladder_1 = _3148;
                frontier_phi_55_56_ladder_2 = _3144;
                frontier_phi_55_56_ladder_3 = _3142;
                frontier_phi_55_56_ladder_4 = _3140;
                frontier_phi_55_56_ladder_5 = _3138;
            }
            else
            {
                frontier_phi_55_56_ladder = _3033;
                frontier_phi_55_56_ladder_1 = _3035;
                frontier_phi_55_56_ladder_2 = _3031;
                frontier_phi_55_56_ladder_3 = _3029;
                frontier_phi_55_56_ladder_4 = _3027;
                frontier_phi_55_56_ladder_5 = _3025;
            }
            _3137 = frontier_phi_55_56_ladder_5;
            _3139 = frontier_phi_55_56_ladder_4;
            _3141 = frontier_phi_55_56_ladder_3;
            _3143 = frontier_phi_55_56_ladder_2;
            _3145 = frontier_phi_55_56_ladder;
            _3147 = frontier_phi_55_56_ladder_1;
        }
        float _3152 = isnan(1.0) ? _1206 : (isnan(_1206) ? 1.0 : min(_1206, 1.0));
        _2937 = (_3152 * _3143) + _2389;
        _2939 = (_3152 * _3145) + _2391;
        _2941 = (_3152 * _3147) + _2393;
        _2943 = ((_3137 * 0.039999999105930328369140625) * _3152) + _2722;
        _2945 = ((_3139 * 0.039999999105930328369140625) * _3152) + _2724;
        _2947 = ((_3141 * 0.039999999105930328369140625) * _3152) + _2726;
    }
    else
    {
        _2937 = _2389;
        _2939 = _2391;
        _2941 = _2393;
        _2943 = _2722;
        _2945 = _2724;
        _2947 = _2726;
    }
    float _4898 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _4909 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _4920 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    uint _2967 = _287 + 6u;
    float _2975 = _1143 / cbSceneParam._m0[86u].x;
    float _2976 = _1144 / cbSceneParam._m0[86u].y;
    vec4 _2990 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2975, _2976, (log2((isnan(cbSceneParam._m0[77u].w) ? _1077 : (isnan(_1077) ? cbSceneParam._m0[77u].w : min(_1077, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2992 = _2990.x;
    float _2993 = _2990.y;
    float _2994 = _2990.z;
    float _2995 = _2990.w;
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    if (_1077 > cbSceneParam._m0[78u].w)
    {
        float _3050 = isnan(_1077) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1077 : min(cbSceneParam._m0[80u].w, _1077));
        float _3051 = _3050 / _1077;
        float _3062 = _3051 * _1128;
        float _3063 = _1129 * _3051;
        float _3064 = (-0.0) - _3063;
        float _3065 = _3051 * _1130;
        float _3067 = (cbSceneParam._m0[77u].w * _3064) / _3050;
        float _3068 = _3067 + cbSceneParam._m0[79u].w;
        float _3069 = cbSceneParam._m0[79u].w - _3063;
        float _3075 = sqrt(((_3062 * _3062) + (_3063 * _3063)) + (_3065 * _3065));
        float _3078 = (1.0 - (cbSceneParam._m0[77u].w / _3050)) * _3075;
        float _3083 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3085 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3238;
        if (abs((_3064 - _3067) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3238 = ((((_3068 > 0.0) ? exp2(_3083 * _3068) : (2.0 - exp2(_3085 * _3068))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3078;
        }
        else
        {
            float _3198 = 1.0 / cbSceneParam._m0[80u].x;
            float _3199 = isnan(_3069) ? _3068 : (isnan(_3068) ? _3069 : max(_3068, _3069));
            float _3200 = isnan(_3069) ? _3068 : (isnan(_3068) ? _3069 : min(_3068, _3069));
            float _3209 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : min(_3199, 0.0));
            float _3210 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : min(_3200, 0.0));
            _3238 = ((abs(_3075 / _3064) * cbSceneParam._m0[80u].y) * ((((_3209 - _3210) * 2.0) - ((exp2(_3083 * (isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0)))) - exp2(_3083 * (isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))))) * _3198)) - ((exp2(_3085 * _3209) - exp2(_3085 * _3210)) * _3198))) + (_3078 * cbSceneParam._m0[80u].z);
        }
        vec4 _3240 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2975, _2976, 1.0), 0.0);
        float _3249 = exp2((_3238 * (-1.44269502162933349609375)) * (1.0 - _3240.w));
        float _3250 = log2(_3249);
        float _3266 = log2(_2995);
        _3087 = (exp2(_3266 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].x)) * _3240.x) / cbSceneParam._m0[78u].x)) + _2992;
        _3089 = (exp2(_3266 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].y)) * _3240.y) / cbSceneParam._m0[78u].y)) + _2993;
        _3091 = (exp2(_3266 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].z)) * _3240.z) / cbSceneParam._m0[78u].z)) + _2994;
        _3093 = _3249 * _2995;
    }
    else
    {
        _3087 = _2992;
        _3089 = _2993;
        _3091 = _2994;
        _3093 = _2995;
    }
    float _3105 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3106 = _3105 == 3.0;
    float _3107 = log2(_3093);
    float _3114 = exp2(_3107 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2937 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1206))) + ((_2943 + ((isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0))) * _2009)) * cbPerFrame._m0[3u].x));
    float _3115 = exp2(_3107 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2939 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1206))) + ((_2945 + ((isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0))) * _2009)) * cbPerFrame._m0[3u].x));
    float _3116 = exp2(_3107 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2941 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1206))) + ((_2947 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2009)) * cbPerFrame._m0[3u].x));
    float _3125 = (_3105 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3125 * (_3106 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3087)));
    SV_Target.y = _3125 * (_3106 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3089)));
    SV_Target.z = _3125 * (_3106 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3091)));
    SV_Target.w = cbInstanceData._m0[_2967].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2967].w;
}


