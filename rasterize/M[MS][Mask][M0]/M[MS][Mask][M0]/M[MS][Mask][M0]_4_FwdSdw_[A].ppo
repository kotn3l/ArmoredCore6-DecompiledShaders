#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1191;
float _3836;
float _3837;
float _3838;
float _3839;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3848 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3859 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3870 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[24u].z) + _439) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3881 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _467 = (_322.x * cbMtdParam._m0[9u].x) * ((_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353);
    float _468 = (_322.y * cbMtdParam._m0[9u].y) * ((_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354);
    float _469 = (_322.z * cbMtdParam._m0[9u].z) * ((_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355);
    float _473 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _467;
    float _476 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _468;
    float _479 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _469;
    float _487 = (((_467 - _473) * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) + _473) * 4.55000019073486328125;
    float _489 = (((_468 - _476) * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) + _476) * 4.55000019073486328125;
    float _491 = (((_469 - _479) * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) + _479) * 4.55000019073486328125;
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _550 = _546.z;
    float _559 = ((_529.z - _550) * _457) + _550;
    float _562 = ((((_529.x - _548) * _457) + _548) * 2.0) + (-1.0);
    float _563 = ((((_529.y - _549) * _457) + _549) * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3892 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _603 = (_562 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_504.x * 2.0) + (-1.0)))) + (((_591.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _604 = (_563 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_504.y * 2.0) + (-1.0)))) + (((_591.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _609 = (((_504.z - _559) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _559;
    float _613 = ((_591.z - _609) * cbMtdParam._m0[19u].w) + _609;
    float _615 = cbMtdParam._m0[22u].x + _591.w;
    float _618 = fma(_569, _232 * NORMAL.x, fma(_604, _239 * TANGENT.x, (_225 * _217) * _603));
    float _621 = fma(_569, _232 * NORMAL.y, fma(_604, _239 * TANGENT.y, (_225 * _218) * _603));
    float _624 = fma(_569, _232 * NORMAL.z, fma(_604, _239 * TANGENT.z, (_225 * _219) * _603));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3903 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _632 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3925 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3936 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3947 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _650 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _701 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _691);
    float _702 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _691);
    float _703 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _691);
    float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
    float _708 = _701 * _707;
    float _709 = _702 * _707;
    float _710 = _703 * _707;
    vec4 _715 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _717 = _715.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _871 = sqrt(((_701 * _701) + (_702 * _702)) + (_703 * _703));
        float _877 = (cbMatDynParam._m0[5u].x * _871) + cbMatDynParam._m0[5u].y;
        float _3958 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _882 = (cbMatDynParam._m0[5u].z * _871) + cbMatDynParam._m0[5u].w;
        float _3969 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) - _878)) + _878) < ((_717 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _728 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _729 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _747 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _750 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _753 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    uint _766 = _266 + 9u;
    uint _767 = _766 + uint(cbMatDynParam._m0[0u].w);
    float _773 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_767].x;
    float _774 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_767].y;
    float _775 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * cbInstanceData._m0[_767].z;
    float _3980 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    vec4 _787 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _728, cbSceneParam._m0[86u].y * _729));
    float _791 = ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * TEXCOORD_5.w) * _787.x;
    float _792 = dot(vec3(_629, _630, _631), vec3(_708, _709, _710));
    float _795 = _792 * 2.0;
    float _799 = (_795 * _629) - _708;
    float _800 = (_795 * _630) - _709;
    float _801 = (_795 * _631) - _710;
    float _805 = abs(dot(vec3(_708, _709, _710), vec3(_629, _630, _631)));
    float _4013 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _807 = sqrt(_632);
    float _820 = exp2((_807 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_807 * 3.0));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1190;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _915 = fma(_860, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _852));
        float _919 = fma(_860, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _852));
        float _923 = fma(_860, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _852));
        float _948 = _852 + _629;
        float _949 = _856 + _630;
        float _950 = _860 + _631;
        float _960 = fma(_950, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948)) - _915;
        float _961 = fma(_950, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948)) - _919;
        float _962 = fma(_950, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948)) - _923;
        float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
        float _979 = ((_966 * _960) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_915 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_966 * _961) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_919 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_966 * _962) / cbModelParam._m0[34u].z) + ((((((_923 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        float _1018 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_984.x + (-0.5));
        float _1020 = _1018 * (_984.y + (-0.5));
        float _1021 = _1018 * (_984.z + (-0.5));
        float _1028 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_991.x + (-0.5));
        float _1030 = _1028 * (_991.y + (-0.5));
        float _1031 = _1028 * (_991.z + (-0.5));
        float _1038 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_998.x + (-0.5));
        float _1040 = _1038 * (_998.y + (-0.5));
        float _1041 = _1038 * (_998.z + (-0.5));
        float _1048 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1005.x + (-0.5));
        float _1050 = _1048 * (_1005.y + (-0.5));
        float _1051 = _1048 * (_1005.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1072 = (dot(vec3(_629, _630, _631), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1082 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _4061 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1084 + 1.0))) + _1089) * _1052;
        float _1099 = _1020 * 0.5;
        float _1100 = _1030 * 0.5;
        float _1101 = _1040 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_629, _630, _631), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _4094 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1126 + 1.0))) + _1131) * _1053;
        float _1141 = _1021 * 0.5;
        float _1142 = _1031 * 0.5;
        float _1143 = _1041 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_629, _630, _631), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _4127 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1168 + 1.0))) + _1173) * _1054;
        _1190 = _1021;
        _1192 = _1020;
        _1193 = _1019;
        _1194 = _1031;
        _1195 = _1030;
        _1196 = _1029;
        _1197 = _1041;
        _1198 = _1040;
        _1199 = _1039;
        _1200 = _1054;
        _1201 = _1053;
        _1202 = _1052;
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _1191;
        _1192 = _1191;
        _1193 = _1191;
        _1194 = _1191;
        _1195 = _1191;
        _1196 = _1191;
        _1197 = _1191;
        _1198 = _1191;
        _1199 = _1191;
        _1200 = _1191;
        _1201 = _1191;
        _1202 = _1191;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1233 = fma(_860, cbModelParam._m0[30u].z, fma(_856, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _852));
        float _1237 = fma(_860, cbModelParam._m0[31u].z, fma(_856, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _852));
        float _1241 = fma(_860, cbModelParam._m0[32u].z, fma(_856, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _852));
        float _1264 = _852 + _629;
        float _1265 = _856 + _630;
        float _1266 = _860 + _631;
        float _1276 = fma(_1266, cbModelParam._m0[30u].z, fma(_1265, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1264)) - _1233;
        float _1277 = fma(_1266, cbModelParam._m0[31u].z, fma(_1265, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1264)) - _1237;
        float _1278 = fma(_1266, cbModelParam._m0[32u].z, fma(_1265, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1264)) - _1241;
        float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
        float _1295 = ((_1282 * _1276) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1233 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1282 * _1277) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1237 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1282 * _1278) / cbModelParam._m0[35u].z) + ((((((_1241 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        float _1332 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1299.x + (-0.5));
        float _1334 = _1332 * (_1299.y + (-0.5));
        float _1335 = _1332 * (_1299.z + (-0.5));
        float _1342 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1306.x + (-0.5));
        float _1344 = _1342 * (_1306.y + (-0.5));
        float _1345 = _1342 * (_1306.z + (-0.5));
        float _1352 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1313.x + (-0.5));
        float _1354 = _1352 * (_1313.y + (-0.5));
        float _1355 = _1352 * (_1313.z + (-0.5));
        float _1362 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1320.x + (-0.5));
        float _1364 = _1362 * (_1320.y + (-0.5));
        float _1365 = _1362 * (_1320.z + (-0.5));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = _1333 * 0.5;
        float _1370 = _1343 * 0.5;
        float _1371 = _1353 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_629, _630, _631), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4190 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1396 + 1.0))) + _1401) * _1366;
        float _1411 = _1334 * 0.5;
        float _1412 = _1344 * 0.5;
        float _1413 = _1354 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_629, _630, _631), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4223 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1438 + 1.0))) + _1443) * _1367;
        float _1453 = _1335 * 0.5;
        float _1454 = _1345 * 0.5;
        float _1455 = _1355 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_629, _630, _631), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4256 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1480 + 1.0))) + _1485) * _1368;
        _1502 = _1335;
        _1503 = _1334;
        _1504 = _1333;
        _1505 = _1345;
        _1506 = _1344;
        _1507 = _1343;
        _1508 = _1355;
        _1509 = _1354;
        _1510 = _1353;
        _1511 = _1368;
        _1512 = _1367;
        _1513 = _1366;
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
    }
    else
    {
        _1502 = _1191;
        _1503 = _1191;
        _1504 = _1191;
        _1505 = _1191;
        _1506 = _1191;
        _1507 = _1191;
        _1508 = _1191;
        _1509 = _1191;
        _1510 = _1191;
        _1511 = _1191;
        _1512 = _1191;
        _1513 = _1191;
        _1514 = 0.0;
        _1515 = 0.0;
        _1516 = 0.0;
    }
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1203)) + _1203;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1204)) + _1204;
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1205)) + _1205;
    float _1549 = fma(_1528, cbSceneParam._m0[89u].z, fma(_1527, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1552 = fma(_1528, cbSceneParam._m0[90u].z, fma(_1527, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1555 = fma(_1528, cbSceneParam._m0[91u].z, fma(_1527, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1526));
    float _1570 = _799 * 0.5;
    float _1571 = _800 * 0.5;
    float _1572 = _801 * 0.5;
    float _1573 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1576 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1579 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1613;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1586 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1190, _1194, _1197, _1200));
        float _1590 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1192, _1195, _1198, _1201));
        float _1594 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1601 = dot(vec4(cbModelParam._m0[39u]), vec4(_1570, _1571, _1572, 1.0));
        _1613 = dot(vec3(isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1601) ? 0.0 : (isnan(0.0) ? _1601 : max(0.0, _1601))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1613 = 1.0;
    }
    float _1624;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1615 = dot(vec4(cbModelParam._m0[40u]), vec4(_1570, _1571, _1572, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1615) ? 0.0 : (isnan(0.0) ? _1615 : max(0.0, _1615))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1628 = (_1624 * cbModelParam._m0[1u].x) + (_1613 * (1.0 - cbModelParam._m0[1u].x));
    float _1638 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _632);
    float _1639 = isnan(_1638) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1638 : min(cbModelParam._m0[25u].z, _1638));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1688 = fma(_860, cbModelParam._m0[13u].z, fma(_856, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852)) + cbModelParam._m0[13u].w;
        float _1692 = fma(_860, cbModelParam._m0[14u].z, fma(_856, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852)) + cbModelParam._m0[14u].w;
        float _1696 = fma(_860, cbModelParam._m0[15u].z, fma(_856, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852)) + cbModelParam._m0[15u].w;
        float _1699 = fma(_801, cbModelParam._m0[13u].z, fma(_800, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799));
        float _1702 = fma(_801, cbModelParam._m0[14u].z, fma(_800, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799));
        float _1705 = fma(_801, cbModelParam._m0[15u].z, fma(_800, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799));
        float _1733;
        if (_1699 > 0.0)
        {
            _1733 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1733 = frontier_phi_17_15_ladder;
        }
        float _1904;
        if (_1702 > 0.0)
        {
            _1904 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1904 = frontier_phi_26_22_ladder;
        }
        float _2199;
        if (_1705 > 0.0)
        {
            _2199 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2199 = frontier_phi_38_33_ladder;
        }
        float _2201 = isnan(_1904) ? _1733 : (isnan(_1733) ? _1904 : min(_1733, _1904));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1699) + _1688;
        float _2207 = (_2202 * _1702) + _1692;
        float _2208 = (_2202 * _1705) + _1696;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2209;
        float _2213 = _2209 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 > _2213) || ((_2207 < _2211) || ((_2206 < _2211) || (_2206 > _2213))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2353 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2208, cbModelParam._m0[9u].z, fma(_2207, cbModelParam._m0[9u].y, _2206 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2208, cbModelParam._m0[10u].z, fma(_2207, cbModelParam._m0[10u].y, _2206 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2208, cbModelParam._m0[11u].z, fma(_2207, cbModelParam._m0[11u].y, _2206 * cbModelParam._m0[11u].x))), _1639);
            frontier_phi_16_38_ladder = _2353.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2353.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2353.x * cbModelParam._m0[1u].y;
        }
        _1721 = frontier_phi_16_38_ladder_2;
        _1723 = frontier_phi_16_38_ladder_1;
        _1725 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_799, _800, _801), _1639);
        _1721 = _1709.x * cbModelParam._m0[1u].y;
        _1723 = _1709.y * cbModelParam._m0[1u].y;
        _1725 = _1709.z * cbModelParam._m0[1u].y;
    }
    float _1729 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _632);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1729 : min(cbModelParam._m0[25u].w, _1729));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1785 = fma(_860, cbModelParam._m0[21u].z, fma(_856, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852)) + cbModelParam._m0[21u].w;
        float _1789 = fma(_860, cbModelParam._m0[22u].z, fma(_856, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852)) + cbModelParam._m0[22u].w;
        float _1793 = fma(_860, cbModelParam._m0[23u].z, fma(_856, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852)) + cbModelParam._m0[23u].w;
        float _1796 = fma(_801, cbModelParam._m0[21u].z, fma(_800, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799));
        float _1799 = fma(_801, cbModelParam._m0[22u].z, fma(_800, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799));
        float _1802 = fma(_801, cbModelParam._m0[23u].z, fma(_800, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799));
        float _1909;
        if (_1796 > 0.0)
        {
            _1909 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1909 = frontier_phi_28_24_ladder;
        }
        float _2226;
        if (_1799 > 0.0)
        {
            _2226 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2226 = frontier_phi_40_35_ladder;
        }
        float _2553;
        if (_1802 > 0.0)
        {
            _2553 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2553 = frontier_phi_50_47_ladder;
        }
        float _2555 = isnan(_2226) ? _1909 : (isnan(_1909) ? _2226 : min(_1909, _2226));
        float _2556 = isnan(_2553) ? _2555 : (isnan(_2555) ? _2553 : min(_2555, _2553));
        float _2560 = (_2556 * _1796) + _1785;
        float _2561 = (_2556 * _1799) + _1789;
        float _2562 = (_2556 * _1802) + _1793;
        float _2563 = _2556 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2563;
        float _2566 = _2563 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2562 > _2566) || ((_2562 < _2564) || ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 < _2564) || (_2560 > _2566))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2562, cbModelParam._m0[17u].z, fma(_2561, cbModelParam._m0[17u].y, _2560 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2562, cbModelParam._m0[18u].z, fma(_2561, cbModelParam._m0[18u].y, _2560 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2562, cbModelParam._m0[19u].z, fma(_2561, cbModelParam._m0[19u].y, _2560 * cbModelParam._m0[19u].x))), _1730);
            frontier_phi_25_50_ladder = _2680.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2680.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2680.x * cbModelParam._m0[1u].z;
        }
        _1821 = frontier_phi_25_50_ladder_2;
        _1823 = frontier_phi_25_50_ladder_1;
        _1825 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1805 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_799, _800, _801), _1730);
        _1821 = _1805.x * cbModelParam._m0[1u].z;
        _1823 = _1805.y * cbModelParam._m0[1u].z;
        _1825 = _1805.z * cbModelParam._m0[1u].z;
    }
    float _1837 = ((((1.0 - _820) * ((_807 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_820 * _807)) * _791;
    float _1838 = _1837 * ((cbModelParam._m0[1u].w * (_1821 - _1721)) + _1721);
    float _1839 = _1837 * ((cbModelParam._m0[1u].w * (_1823 - _1723)) + _1723);
    float _1840 = _1837 * ((cbModelParam._m0[1u].w * (_1825 - _1725)) + _1725);
    float _1843 = fma(_1840, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1846 = fma(_1840, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1849 = fma(_1840, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, _1838 * cbSceneParam._m0[91u].x));
    float _1883 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1887 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1891 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1895 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1896 = _1883 / _1895;
    float _1897 = _1887 / _1895;
    float _1898 = _1891 / _1895;
    float _2045;
    float _2046;
    float _2047;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1925 = ((uint(_1898 > cbSceneParam._m0[59u].y) + uint(_1898 > cbSceneParam._m0[59u].x)) + uint(_1898 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1926 = _1925 + 43u;
        uint _1934 = _1925 + 44u;
        uint _1942 = _1925 + 45u;
        uint _1950 = _1925 + 46u;
        float _1961 = fma(_1895, cbSceneParam._m0[_1926].w, fma(_1891, cbSceneParam._m0[_1926].z, fma(_1887, cbSceneParam._m0[_1926].y, _1883 * cbSceneParam._m0[_1926].x)));
        float _1965 = fma(_1895, cbSceneParam._m0[_1934].w, fma(_1891, cbSceneParam._m0[_1934].z, fma(_1887, cbSceneParam._m0[_1934].y, _1883 * cbSceneParam._m0[_1934].x)));
        float _1973 = fma(_1895, cbSceneParam._m0[_1950].w, fma(_1891, cbSceneParam._m0[_1950].z, fma(_1887, cbSceneParam._m0[_1950].y, _1883 * cbSceneParam._m0[_1950].x)));
        float _1978 = cbSceneParam._m0[33u].z * _1973;
        float _1980 = cbSceneParam._m0[33u].w * _1973;
        float _1983 = fma(_1895, cbSceneParam._m0[_1942].w, fma(_1891, cbSceneParam._m0[_1942].z, fma(_1887, cbSceneParam._m0[_1942].y, _1883 * cbSceneParam._m0[_1942].x))) / _1973;
        float _2031 = (cbSceneParam._m0[33u].x - sqrt(((_1897 * _1897) + (_1896 * _1896)) + (_1898 * _1898))) * cbSceneParam._m0[33u].y;
        float _4382 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2038 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 + _1961) / _1973, (_1980 + _1965) / _1973), _1983), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1980 + _1961) / _1973, (_1965 - _1978) / _1973), _1983), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1961 - _1978) / _1973, (_1965 - _1980) / _1973), _1983), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1961 - _1980) / _1973, (_1978 + _1965) / _1973), _1983), 0.0)).x), vec4(0.25)));
        _2045 = 1.0 - (_2038 * cbSceneParam._m0[34u].x);
        _2046 = 1.0 - (_2038 * cbSceneParam._m0[34u].y);
        _2047 = 1.0 - (_2038 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2045 = 1.0;
        _2046 = 1.0;
        _2047 = 1.0;
    }
    float _2111;
    float _2113;
    float _2115;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2099 = fma(_1895, cbSceneParam._m0[63u].w, fma(_1891, cbSceneParam._m0[63u].z, fma(_1887, cbSceneParam._m0[63u].y, _1883 * cbSceneParam._m0[63u].x)));
        float _2100 = fma(_1895, cbSceneParam._m0[60u].w, fma(_1891, cbSceneParam._m0[60u].z, fma(_1887, cbSceneParam._m0[60u].y, _1883 * cbSceneParam._m0[60u].x))) / _2099;
        float _2101 = fma(_1895, cbSceneParam._m0[61u].w, fma(_1891, cbSceneParam._m0[61u].z, fma(_1887, cbSceneParam._m0[61u].y, _1883 * cbSceneParam._m0[61u].x))) / _2099;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2100 >= cbSceneParam._m0[64u].x) && (_2101 >= cbSceneParam._m0[64u].y)) && (_2100 <= cbSceneParam._m0[64u].z)) && (_2101 <= cbSceneParam._m0[64u].w))
        {
            float _2239 = fma(_1895, cbSceneParam._m0[62u].w, fma(_1891, cbSceneParam._m0[62u].z, fma(_1887, cbSceneParam._m0[62u].y, _1883 * cbSceneParam._m0[62u].x))) / _2099;
            float _2243 = isnan(cbSceneParam._m0[41u].w) ? _2239 : (isnan(_2239) ? cbSceneParam._m0[41u].w : max(_2239, cbSceneParam._m0[41u].w));
            float _2286 = (cbSceneParam._m0[33u].x - sqrt(((_1897 * _1897) + (_1896 * _1896)) + (_1898 * _1898))) * cbSceneParam._m0[33u].y;
            float _4398 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
            float _2293 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2100, cbSceneParam._m0[33u].w + _2101), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2100, _2101 - cbSceneParam._m0[33u].z), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2100 - cbSceneParam._m0[33u].z, _2101 - cbSceneParam._m0[33u].w), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2100 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2101), _2243), 0.0)).x), vec4(0.25)));
            float _2297 = 1.0 - (_2293 * cbSceneParam._m0[34u].x);
            float _2298 = 1.0 - (_2293 * cbSceneParam._m0[34u].y);
            float _2299 = 1.0 - (_2293 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2299) ? _2047 : (isnan(_2047) ? _2299 : min(_2047, _2299));
            frontier_phi_37_36_ladder_1 = isnan(_2298) ? _2046 : (isnan(_2046) ? _2298 : min(_2046, _2298));
            frontier_phi_37_36_ladder_2 = isnan(_2297) ? _2045 : (isnan(_2045) ? _2297 : min(_2045, _2297));
        }
        else
        {
            frontier_phi_37_36_ladder = _2047;
            frontier_phi_37_36_ladder_1 = _2046;
            frontier_phi_37_36_ladder_2 = _2045;
        }
        _2111 = frontier_phi_37_36_ladder_2;
        _2113 = frontier_phi_37_36_ladder_1;
        _2115 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2111 = _2045;
        _2113 = _2046;
        _2115 = _2047;
    }
    uvec4 _2120 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _2122 = _2120.x * 14u;
    uint _2123 = _2122 + 13u;
    float _2130 = _791 + (-1.0);
    float _2135 = (cbLight._m0[_2123].x * _2130) + 1.0;
    float _2136 = (cbLight._m0[_2123].y * _2130) + 1.0;
    float _2137 = (cbLight._m0[_2123].z * _2130) + 1.0;
    float _2138 = (cbLight._m0[_2123].w * _2130) + 1.0;
    uint _2139 = _2122 + 5u;
    float _2145 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2149 = _2122 + 4u;
    float _2158 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2162 = _2122 | 1u;
    float _2173 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_629, _630, _631));
    float _2176 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_629, _630, _631));
    float _4434 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _4445 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2181 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * 0.3183098733425140380859375;
    float _2183 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * 0.3183098733425140380859375;
    float _2190 = ((cbLight._m0[_2139].x * _2145) * _2183) + (((cbLight._m0[_2149].x * _2111) * _2158) * _2181);
    float _2191 = ((_2145 * cbLight._m0[_2139].y) * _2183) + (((cbLight._m0[_2149].y * _2113) * _2158) * _2181);
    float _2192 = ((_2145 * cbLight._m0[_2139].z) * _2183) + (((cbLight._m0[_2149].z * _2115) * _2158) * _2181);
    uvec4 _2196 = floatBitsToUint(cbLight._m0[_2122 + 12u]);
    bool _2198 = _2196.x == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2198)
    {
        _2300 = _2190;
        _2302 = _2191;
        _2304 = _2192;
    }
    else
    {
        uint _2308 = _2122 + 6u;
        float _2324 = (dot(vec3(cbLight._m0[_2122 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4456 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2327 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2300 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2190;
        _2302 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2191;
        _2304 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2192;
    }
    bool _2307 = _2196.y == 0u;
    float _2362;
    float _2364;
    float _2366;
    if (_2307)
    {
        _2362 = _2300;
        _2364 = _2302;
        _2366 = _2304;
    }
    else
    {
        uint _2524 = _2122 + 7u;
        float _2540 = (dot(vec3(cbLight._m0[_2122 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2541 = _2540 * _2540;
        float _4472 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2542 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2543 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2362 = (((cbLight._m0[_2524].x * 0.3183098733425140380859375) * _2542) * _2543) + _2300;
        _2364 = (((cbLight._m0[_2524].y * 0.3183098733425140380859375) * _2542) * _2543) + _2302;
        _2366 = (((cbLight._m0[_2524].z * 0.3183098733425140380859375) * _2542) * _2543) + _2304;
    }
    uint _2369 = _2122 + 8u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _632) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2122].x + _708;
    float _2385 = cbLight._m0[_2122].y + _709;
    float _2386 = cbLight._m0[_2122].z + _710;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2122].xyz));
    float _4488 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _4499 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2398 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2399 = dot(vec3(_629, _630, _631), vec3(_2391, _2392, _2393));
    float _4510 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2391, _2392, _2393));
    float _4521 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2383 * _2383;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2422 = (exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2423 = 1.0 - _2383;
    float _2434 = (0.5 / (((_2398 * ((_2397 * _2423) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2423) + _2383) * _2397))) * _2397;
    float _4532 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2436 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    uint _2450 = _2122 + 9u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _632) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2162].x + _708;
    float _2464 = cbLight._m0[_2162].y + _709;
    float _2465 = cbLight._m0[_2162].z + _710;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2162].xyz));
    float _4543 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2477 = dot(vec3(_629, _630, _631), vec3(_2470, _2471, _2472));
    float _4554 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2481 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2470, _2471, _2472));
    float _4565 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2485 = _2462 * _2462;
    float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
    float _2498 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2499 = 1.0 - _2462;
    float _2509 = (0.5 / (((_2398 * ((_2476 * _2499) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2499) + _2462) * _2476))) * _2476;
    float _4576 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2511 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
    float _2521 = (((_2498 * cbLight._m0[_2450].x) * _2511) * _2145) + ((((cbLight._m0[_2369].x * _2111) * _2422) * _2436) * _2158);
    float _2522 = (((_2498 * cbLight._m0[_2450].y) * _2511) * _2145) + ((((cbLight._m0[_2369].y * _2113) * _2422) * _2436) * _2158);
    float _2523 = (((_2498 * cbLight._m0[_2450].z) * _2511) * _2145) + ((((cbLight._m0[_2369].z * _2115) * _2422) * _2436) * _2158);
    float _2579;
    float _2581;
    float _2583;
    if (_2198)
    {
        _2579 = _2521;
        _2581 = _2522;
        _2583 = _2523;
    }
    else
    {
        uint _2585 = _2122 + 2u;
        uint _2589 = _2122 + 10u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _632) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _708;
        float _2606 = cbLight._m0[_2585].y + _709;
        float _2607 = cbLight._m0[_2585].z + _710;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2585].xyz));
        float _4587 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2619 = dot(vec3(_629, _630, _631), vec3(_2612, _2613, _2614));
        float _4598 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4609 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2640 = (exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2641 = 1.0 - _2604;
        float _2651 = (0.5 / (((_2398 * ((_2618 * _2641) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2641) + _2604) * _2618))) * _2618;
        float _4620 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2653 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2654 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2579 = (((_2640 * cbLight._m0[_2589].x) * _2653) * _2654) + _2521;
        _2581 = (((_2640 * cbLight._m0[_2589].y) * _2653) * _2654) + _2522;
        _2583 = (((_2640 * cbLight._m0[_2589].z) * _2653) * _2654) + _2523;
    }
    float _2685;
    float _2687;
    float _2689;
    if (_2307)
    {
        _2685 = _2579;
        _2687 = _2581;
        _2689 = _2583;
    }
    else
    {
        uint _2696 = _2122 + 3u;
        uint _2700 = _2122 + 11u;
        float _2714 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2696].w)) * _632) * 0.949999988079071044921875);
        float _2715 = _2714 * _2714;
        float _2716 = cbLight._m0[_2696].x + _708;
        float _2717 = cbLight._m0[_2696].y + _709;
        float _2718 = cbLight._m0[_2696].z + _710;
        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
        float _2723 = _2722 * _2716;
        float _2724 = _2722 * _2717;
        float _2725 = _2722 * _2718;
        float _2726 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2696].xyz));
        float _4636 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2730 = dot(vec3(_629, _630, _631), vec3(_2723, _2724, _2725));
        float _4647 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2734 = dot(vec3(cbLight._m0[_2696].xyz), vec3(_2723, _2724, _2725));
        float _4658 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2738 = _2715 * _2715;
        float _2742 = ((_2733 * _2733) * (_2738 + (-1.0))) + 1.0;
        float _2751 = (exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2752 = 1.0 - _2715;
        float _2762 = (0.5 / (((_2398 * ((_2729 * _2752) + _2715)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2752) + _2715) * _2729))) * _2729;
        float _4669 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2764 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2738 / ((_2742 * _2742) * 3.141590118408203125));
        float _2765 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2685 = (((_2751 * cbLight._m0[_2700].x) * _2764) * _2765) + _2579;
        _2687 = (((_2751 * cbLight._m0[_2700].y) * _2764) * _2765) + _2581;
        _2689 = (((_2751 * cbLight._m0[_2700].z) * _2764) * _2765) + _2583;
    }
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    if (_2120.y == 0u)
    {
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.x;
        uint _2798 = uint((float(_2786.y) * floor(float(uint(cbSceneParam._m0[85u].y * _729) / _2787))) + floor(float(uint(cbSceneParam._m0[85u].x * _728) / _2787)));
        float _2808 = (log2(_1898 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2809 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        uint _2812 = uint(isnan(14.0) ? _2809 : (isnan(_2809) ? 14.0 : min(_2809, 14.0)));
        uvec4 _2817 = texelFetch(g_lightClusterGridBuffer, int(((_2812 << 2u) + (_2798 << 6u)) >> 2u));
        uint _2818 = _2817.x;
        uint _2819 = _2786.z;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((((1u << ((_2819 >> 4u) & 15u)) + 4294967295u) & _2818) == 0u) || ((_2819 & 240u) == 0u))
        {
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
        }
        else
        {
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            uint _3057 = 0u;
            uint _3066;
            bool _3067;
            for (;;)
            {
                _3066 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3057 << 2u)) >> 2u)).x;
                _3067 = _3066 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3067)
                {
                    frontier_phi_71_pred = _3056;
                    frontier_phi_71_pred_1 = _3055;
                    frontier_phi_71_pred_2 = _3054;
                    frontier_phi_71_pred_3 = _3053;
                    frontier_phi_71_pred_4 = _3052;
                    frontier_phi_71_pred_5 = _3051;
                }
                else
                {
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    uint _3202;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3066;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    for (;;)
                    {
                        uint _3206 = uint(findLSB(_3202)) + (_3057 << 5u);
                        uint _3203 = (_3202 + 4294967295u) & _3202;
                        uint _3208 = _3206 * 48u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3228 = (_3206 * 48u) + 4u;
                        vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3247 = (_3206 * 48u) + 8u;
                        vec3 _3258 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x));
                        float _3262 = _3222.x - _1896;
                        float _3263 = _3222.y - _1897;
                        float _3264 = _3222.z - _1898;
                        float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                        float _3268 = inversesqrt(_3265);
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3272 = dot(vec3(_747, _750, _753), vec3(_3269, _3270, _3271));
                        float _3277 = 1.0 - (_3265 * _3222.w);
                        float _4695 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                        float _3279 = sqrt(_3265) * _3241.w;
                        float _3282 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3272) + _3283;
                        float _3289 = _3279 * _3279;
                        float _3293 = ((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3278) / ((_3289 * 0.699999988079071044921875) + 1.0);
                        float _3297 = (-0.0) - _1896;
                        float _3298 = (-0.0) - _1897;
                        float _3299 = (-0.0) - _1898;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3313 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                        float _3314 = 1.0 - _807;
                        float _3321 = sqrt(1.0 - ((1.0 - (_3314 * _3314)) * (1.0 - (_3313 * _3313))));
                        float _3322 = _3321 * _3321;
                        float _3323 = _3322 * _3322;
                        float _3324 = _3304 + _3269;
                        float _3325 = _3305 + _3270;
                        float _3326 = _3306 + _3271;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3334 = dot(vec3(_747, _750, _753), vec3(_3304, _3305, _3306));
                        float _4711 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3338 = dot(vec3(_747, _750, _753), vec3(_3330 * _3324, _3330 * _3325, _3330 * _3326));
                        float _4722 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3345 = ((_3341 * _3341) * (_3323 + (-1.0))) + 1.0;
                        float _3346 = _3282 * _3322;
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3272) + _3347;
                        float _4733 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3351 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3352 = 1.0 - _3322;
                        float _3362 = (0.5 / (((_3351 * ((_3337 * _3352) + _3322)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3322) * _3337))) * _3351;
                        float _4744 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3373 = (((_3323 * 3.1415927410125732421875) * (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) / ((_3345 * _3345) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125))) * _3278;
                        _3126 = (_3293 * _3241.x) + _3199;
                        _3127 = (_3293 * _3241.y) + _3200;
                        _3128 = (_3293 * _3241.z) + _3201;
                        _3123 = (_3373 * _3258.x) + _3196;
                        _3124 = (_3373 * _3258.y) + _3197;
                        _3125 = (_3373 * _3258.z) + _3198;
                        if (_3203 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3203;
                        }
                    }
                    frontier_phi_71_pred = _3128;
                    frontier_phi_71_pred_1 = _3127;
                    frontier_phi_71_pred_2 = _3126;
                    frontier_phi_71_pred_3 = _3125;
                    frontier_phi_71_pred_4 = _3124;
                    frontier_phi_71_pred_5 = _3123;
                }
                _2909 = frontier_phi_71_pred;
                _2907 = frontier_phi_71_pred_1;
                _2905 = frontier_phi_71_pred_2;
                _2903 = frontier_phi_71_pred_3;
                _2901 = frontier_phi_71_pred_4;
                _2899 = frontier_phi_71_pred_5;
                uint _3058 = _3057 + 1u;
                if (_3058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3051 = _2899;
                    _3052 = _2901;
                    _3053 = _2903;
                    _3054 = _2905;
                    _3055 = _2907;
                    _3056 = _2909;
                    _3057 = _3058;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
        }
        uvec4 _2912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2913 = _2912.z;
        uint _2915 = (_2913 >> 8u) & 15u;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        if (((4294967295u << _2915) & _2818) == 0u)
        {
            _3019 = _2898;
            _3021 = _2900;
            _3023 = _2902;
            _3025 = _2904;
            _3027 = _2906;
            _3029 = _2908;
        }
        else
        {
            float _3044 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
            float _3045 = _3044 * _1896;
            float _3046 = _3044 * _1897;
            float _3047 = _3044 * _1898;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2915 < ((_2913 >> 12u) & 15u))
            {
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3179 = _2898;
                float _3180 = _2900;
                float _3181 = _2902;
                float _3182 = _2904;
                float _3183 = _2906;
                float _3184 = _2908;
                uint _3185 = _2915;
                uint _3194;
                bool _3195;
                for (;;)
                {
                    _3194 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                    _3195 = _3194 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3195)
                    {
                        frontier_phi_82_pred = _3184;
                        frontier_phi_82_pred_1 = _3183;
                        frontier_phi_82_pred_2 = _3182;
                        frontier_phi_82_pred_3 = _3181;
                        frontier_phi_82_pred_4 = _3180;
                        frontier_phi_82_pred_5 = _3179;
                    }
                    else
                    {
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3400 = _3179;
                        float _3401 = _3180;
                        float _3402 = _3181;
                        float _3403 = _3182;
                        float _3404 = _3183;
                        float _3405 = _3184;
                        uint _3406 = _3194;
                        uint _3407;
                        vec4 _3432;
                        float _3433;
                        vec4 _3448;
                        vec3 _3460;
                        vec4 _3475;
                        vec4 _3490;
                        float _3536;
                        bool _3537;
                        for (;;)
                        {
                            uint _3417 = ((_3185 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3406));
                            _3407 = (_3406 + 4294967295u) & _3406;
                            uint _3419 = _3417 * 40u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            _3433 = _3432.w;
                            uint _3435 = (_3417 * 40u) + 4u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3417 * 40u) + 8u;
                            _3460 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x));
                            uint _3462 = (_3417 * 40u) + 16u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3417 * 40u) + 20u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3417 * 40u) + 24u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3511 = (_3417 * 40u) + 28u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3536 = fma(_1898, _3524.z, fma(_1897, _3524.y, _3524.x * _1896)) + _3524.w;
                            _3537 = !((fma(_1898, _3505.z, fma(_1897, _3505.y, _3505.x * _1896)) + _3505.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3537)
                            {
                                float _3564 = _3432.x - _1896;
                                float _3565 = _3432.y - _1897;
                                float _3566 = _3432.z - _1898;
                                float _3567 = dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566));
                                float _3570 = inversesqrt(_3567);
                                float _3571 = _3570 * _3564;
                                float _3572 = _3570 * _3565;
                                float _3573 = _3570 * _3566;
                                float _3577 = 1.0 - (_3567 / (_3433 * _3433));
                                float _4755 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3582 = sqrt(_3567) * _3448.w;
                                float _3584 = 1.39999997615814208984375 / (_3582 + 1.39999997615814208984375);
                                float _3585 = _3584 * _3584;
                                float _3588 = ((1.0 - _3585) * dot(vec3(_3571, _3572, _3573), vec3(_747, _750, _753))) + _3585;
                                float _3591 = _3582 * _3582;
                                float _3595 = (fma(_1898, _3475.z, fma(_1897, _3475.y, _3475.x * _1896)) + _3475.w) / _3536;
                                float _3596 = (fma(_1898, _3490.z, fma(_1897, _3490.y, _3490.x * _1896)) + _3490.w) / _3536;
                                float _3600 = 1.0 - dot(vec2(_3595, _3596), vec2(_3595, _3596));
                                float _4771 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3602 = _3601 * (((isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0))) * _3578) / ((_3591 * 0.699999988079071044921875) + 1.0));
                                float _3614 = exp2(log2(1.0 / ((_3591 * 3.5) + 5.0)) * 0.25);
                                float _3615 = 1.0 - _807;
                                float _3622 = sqrt(1.0 - ((1.0 - (_3615 * _3615)) * (1.0 - (_3614 * _3614))));
                                float _3623 = _3622 * _3622;
                                float _3624 = _3623 * _3623;
                                float _3625 = _3571 - _3045;
                                float _3626 = _3572 - _3046;
                                float _3627 = _3573 - _3047;
                                float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                                float _3635 = dot(vec3(_747, _750, _753), vec3((-0.0) - _3045, (-0.0) - _3046, (-0.0) - _3047));
                                float _4782 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3639 = dot(vec3(_747, _750, _753), vec3(_3631 * _3625, _3631 * _3626, _3631 * _3627));
                                float _4793 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3646 = ((_3642 * _3642) * (_3624 + (-1.0))) + 1.0;
                                float _3647 = _3584 * _3623;
                                float _3648 = _3647 * _3647;
                                float _3654 = ((1.0 - _3648) * dot(vec3(_747, _750, _753), vec3(_3571, _3572, _3573))) + _3648;
                                float _4804 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3656 = 1.0 - _3623;
                                float _3666 = (0.5 / (((_3655 * ((_3638 * _3656) + _3623)) + 9.9999999392252902907785028219223e-09) + (((_3655 * _3656) + _3623) * _3638))) * _3655;
                                float _4815 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3676 = (_3601 * _3578) * (((_3624 * 3.1415927410125732421875) * (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) / ((_3646 * _3646) * ((_3591 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3602 * _3448.z;
                                frontier_phi_88_pred_1 = _3602 * _3448.y;
                                frontier_phi_88_pred_2 = _3602 * _3448.x;
                                frontier_phi_88_pred_3 = _3676 * _3460.z;
                                frontier_phi_88_pred_4 = _3676 * _3460.y;
                                frontier_phi_88_pred_5 = _3676 * _3460.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3685 = frontier_phi_88_pred;
                            _3684 = frontier_phi_88_pred_1;
                            _3683 = frontier_phi_88_pred_2;
                            _3682 = frontier_phi_88_pred_3;
                            _3681 = frontier_phi_88_pred_4;
                            _3680 = frontier_phi_88_pred_5;
                            _3390 = _3683 + _3403;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            _3387 = _3680 + _3400;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            if (_3407 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3407;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3392;
                        frontier_phi_82_pred_1 = _3391;
                        frontier_phi_82_pred_2 = _3390;
                        frontier_phi_82_pred_3 = _3389;
                        frontier_phi_82_pred_4 = _3388;
                        frontier_phi_82_pred_5 = _3387;
                    }
                    _3030 = frontier_phi_82_pred;
                    _3028 = frontier_phi_82_pred_1;
                    _3026 = frontier_phi_82_pred_2;
                    _3024 = frontier_phi_82_pred_3;
                    _3022 = frontier_phi_82_pred_4;
                    _3020 = frontier_phi_82_pred_5;
                    uint _3186 = _3185 + 1u;
                    if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3179 = _3020;
                        _3180 = _3022;
                        _3181 = _3024;
                        _3182 = _3026;
                        _3183 = _3028;
                        _3184 = _3030;
                        _3185 = _3186;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3026;
                frontier_phi_63_64_ladder_1 = _3030;
                frontier_phi_63_64_ladder_2 = _3028;
                frontier_phi_63_64_ladder_3 = _3024;
                frontier_phi_63_64_ladder_4 = _3022;
                frontier_phi_63_64_ladder_5 = _3020;
            }
            else
            {
                frontier_phi_63_64_ladder = _2904;
                frontier_phi_63_64_ladder_1 = _2908;
                frontier_phi_63_64_ladder_2 = _2906;
                frontier_phi_63_64_ladder_3 = _2902;
                frontier_phi_63_64_ladder_4 = _2900;
                frontier_phi_63_64_ladder_5 = _2898;
            }
            _3019 = frontier_phi_63_64_ladder_5;
            _3021 = frontier_phi_63_64_ladder_4;
            _3023 = frontier_phi_63_64_ladder_3;
            _3025 = frontier_phi_63_64_ladder;
            _3027 = frontier_phi_63_64_ladder_2;
            _3029 = frontier_phi_63_64_ladder_1;
        }
        float _3034 = isnan(1.0) ? _791 : (isnan(_791) ? 1.0 : min(_791, 1.0));
        _2831 = (_3034 * _3025) + _2362;
        _2833 = (_3034 * _3027) + _2364;
        _2835 = (_3034 * _3029) + _2366;
        _2837 = ((_3019 * 0.039999999105930328369140625) * _3034) + _2685;
        _2839 = ((_3021 * 0.039999999105930328369140625) * _3034) + _2687;
        _2841 = ((_3023 * 0.039999999105930328369140625) * _3034) + _2689;
    }
    else
    {
        _2831 = _2362;
        _2833 = _2364;
        _2835 = _2366;
        _2837 = _2685;
        _2839 = _2687;
        _2841 = _2689;
    }
    float _4831 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4842 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4853 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _2858 = ((isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2831 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _791))) + ((_2837 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1628)) * cbPerFrame._m0[3u].x);
    float _2859 = ((isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2833 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _791))) + ((_2839 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1628)) * cbPerFrame._m0[3u].x);
    float _2860 = ((isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2835 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _791))) + ((_2841 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1628)) * cbPerFrame._m0[3u].x);
    uint _2861 = _266 + 6u;
    float _2869 = _728 / cbSceneParam._m0[86u].x;
    float _2870 = _729 / cbSceneParam._m0[86u].y;
    vec4 _2884 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, (log2((isnan(cbSceneParam._m0[77u].w) ? _650 : (isnan(_650) ? cbSceneParam._m0[77u].w : min(_650, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2886 = _2884.x;
    float _2887 = _2884.y;
    float _2888 = _2884.z;
    float _2889 = _2884.w;
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    if (_650 > cbSceneParam._m0[78u].w)
    {
        float _2923 = isnan(_650) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _650 : min(cbSceneParam._m0[80u].w, _650));
        float _2924 = _2923 / _650;
        float _2935 = _2924 * _701;
        float _2936 = _702 * _2924;
        float _2937 = (-0.0) - _2936;
        float _2939 = _2924 * _703;
        float _2941 = (cbSceneParam._m0[77u].w * _2937) / _2923;
        float _2942 = _2941 + cbSceneParam._m0[79u].w;
        float _2943 = cbSceneParam._m0[79u].w - _2936;
        float _2949 = sqrt(((_2935 * _2935) + (_2936 * _2936)) + (_2939 * _2939));
        float _2952 = (1.0 - (cbSceneParam._m0[77u].w / _2923)) * _2949;
        float _2957 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2959 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3136;
        if (abs((_2937 - _2941) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3136 = ((((_2942 > 0.0) ? exp2(_2957 * _2942) : (2.0 - exp2(_2959 * _2942))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2952;
        }
        else
        {
            float _3080 = 1.0 / cbSceneParam._m0[80u].x;
            float _3081 = isnan(_2943) ? _2942 : (isnan(_2942) ? _2943 : max(_2942, _2943));
            float _3082 = isnan(_2943) ? _2942 : (isnan(_2942) ? _2943 : min(_2942, _2943));
            float _3091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : min(_3081, 0.0));
            float _3092 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : min(_3082, 0.0));
            _3136 = ((abs(_2949 / _2937) * cbSceneParam._m0[80u].y) * ((((_3091 - _3092) * 2.0) - ((exp2(_2957 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0)))) - exp2(_2957 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))))) * _3080)) - ((exp2(_2959 * _3091) - exp2(_2959 * _3092)) * _3080))) + (_2952 * cbSceneParam._m0[80u].z);
        }
        vec4 _3138 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, 1.0), 0.0);
        float _3147 = exp2((_3136 * (-1.44269502162933349609375)) * (1.0 - _3138.w));
        float _3148 = log2(_3147);
        float _3164 = log2(_2889);
        _2961 = (exp2(_3164 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].x)) * _3138.x) / cbSceneParam._m0[78u].x)) + _2886;
        _2963 = (exp2(_3164 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].y)) * _3138.y) / cbSceneParam._m0[78u].y)) + _2887;
        _2965 = (exp2(_3164 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].z)) * _3138.z) / cbSceneParam._m0[78u].z)) + _2888;
        _2967 = _3147 * _2889;
    }
    else
    {
        _2961 = _2886;
        _2963 = _2887;
        _2965 = _2888;
        _2967 = _2889;
    }
    bool _3174;
    vec4 _2977;
    vec4 _2999;
    float _3001;
    float _3005;
    float _3006;
    float _3007;
    float _3008;
    bool _3018;
    for (;;)
    {
        _2977 = cbMatDynParam._m0[0u];
        float _2979 = roundEven(_2977.y);
        bool _2980 = _2979 == 3.0;
        float _2981 = log2(_2967);
        float _2988 = exp2(_2981 * cbSceneParam._m0[78u].x) * _2858;
        float _2989 = exp2(_2981 * cbSceneParam._m0[78u].y) * _2859;
        float _2990 = exp2(_2981 * cbSceneParam._m0[78u].z) * _2860;
        float _2997 = _717 + (-0.5);
        _2999 = cbMtdParam._m0[1u];
        _3001 = _2999.y * _2997;
        float _3004 = (_2979 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3005 = _3004 * (_2980 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2961)));
        _3006 = _3004 * (_2980 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2963)));
        _3007 = _3004 * (_2980 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2965)));
        _3008 = _2997 * 0.999000012874603271484375;
        _3018 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3018)
        {
            if ((cbInstanceData._m0[_266 + 7u].x + _3008) < 0.5)
            {
                _3174 = true;
                break;
            }
        }
        uint _3115 = _766 + uint(_2977.w);
        if ((cbInstanceData._m0[_3115].w < 1.0) && ((cbInstanceData._m0[_3115].w + _3008) < 0.5))
        {
            _3174 = true;
            break;
        }
        if ((_3001 + 1.0) < _2999.x)
        {
            _3174 = true;
            break;
        }
        _3174 = false;
        break;
    }
    float _3378;
    if (_3174)
    {
        discard_state = true;
        _3378 = 0.0;
    }
    else
    {
        _3378 = cbInstanceData._m0[_2861].w;
    }
    SV_Target.x = _3005;
    SV_Target.y = _3006;
    SV_Target.z = _3007;
    SV_Target.w = _3378;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2861].w;
    discard_exit();
}


