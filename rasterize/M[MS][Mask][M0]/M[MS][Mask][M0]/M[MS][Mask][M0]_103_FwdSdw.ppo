#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1319;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3907 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3918 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3929 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _374.x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[24u].z) + _426) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3940 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _451 = (_444 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _452 = (_444 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _453 = (_444 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _492 = _490.x;
    float _502 = dot(vec4(_492, _490.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _516 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _374.y) * 2.0) - ((((_492 - _502) * cbMtdParam._m0[24u].z) + _502) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3951 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _524 = (_517 * ((_470.x * cbMtdParam._m0[13u].x) - _451)) + _451;
    float _525 = (_517 * ((_470.y * cbMtdParam._m0[13u].y) - _452)) + _452;
    float _526 = (_517 * ((_470.z * cbMtdParam._m0[13u].z) - _453)) + _453;
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _291) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _292) + cbTextureTilingScale._m0[24u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _563 = _561.x;
    float _573 = dot(vec4(_563, _561.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _585 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _374.z) * 2.0) - ((((_563 - _573) * cbMtdParam._m0[24u].z) + _573) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3962 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _593 = (_586 * ((_544.x * cbMtdParam._m0[14u].x) - _524)) + _524;
    float _594 = (_586 * ((_544.y * cbMtdParam._m0[14u].y) - _525)) + _525;
    float _595 = (_586 * ((_544.z * cbMtdParam._m0[14u].z) - _526)) + _526;
    float _599 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _593;
    float _602 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _594;
    float _605 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _595;
    float _612 = ((_593 - _599) * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) + _599;
    float _613 = ((_594 - _602) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) + _602;
    float _614 = ((_595 - _605) * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) + _605;
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _668 = _666.x;
    float _669 = _666.y;
    float _670 = _666.z;
    float _677 = ((_649.x - _668) * _444) + _668;
    float _678 = ((_649.y - _669) * _444) + _669;
    float _679 = ((_649.z - _670) * _444) + _670;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _702 = ((_691.x - _677) * _517) + _677;
    float _703 = ((_691.y - _678) * _517) + _678;
    float _704 = ((_691.z - _679) * _517) + _679;
    vec4 _716 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _291) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _292) + cbTextureTilingScale._m0[23u].w));
    float _729 = ((_716.z - _704) * _586) + _704;
    float _732 = ((((_716.x - _702) * _586) + _702) * 2.0) + (-1.0);
    float _733 = ((((_716.y - _703) * _586) + _703) * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _3973 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _739 = sqrt(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))));
    vec4 _759 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _771 = (_732 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_626.x * 2.0) + (-1.0)))) + (((_759.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _772 = (_733 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_626.y * 2.0) + (-1.0)))) + (((_759.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _777 = (((_626.z - _729) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _729;
    float _781 = ((_759.z - _777) * cbMtdParam._m0[19u].w) + _777;
    float _783 = cbMtdParam._m0[22u].x + _759.w;
    float _786 = fma(_739, _238 * NORMAL.x, fma(_772, _245 * TANGENT.x, (_231 * _223) * _771));
    float _789 = fma(_739, _238 * NORMAL.y, fma(_772, _245 * TANGENT.y, (_231 * _224) * _771));
    float _792 = fma(_739, _238 * NORMAL.z, fma(_772, _245 * TANGENT.z, (_231 * _225) * _771));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    float _797 = _796 * _786;
    float _798 = _796 * _789;
    float _799 = _796 * _792;
    float _3984 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _800 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4006 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4017 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4028 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _870 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _860);
    float _871 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _860);
    float _872 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _860);
    float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
    float _877 = _870 * _876;
    float _878 = _871 * _876;
    float _879 = _872 * _876;
    float _885 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _886 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _904 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _797));
    float _907 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _797));
    float _910 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _797));
    uint _924 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _930 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_924].x;
    float _931 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_924].y;
    float _932 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_924].z;
    float _4039 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    vec4 _944 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _885, cbSceneParam._m0[86u].y * _886));
    float _948 = ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * TEXCOORD_5.w) * _944.x;
    float _949 = dot(vec3(_797, _798, _799), vec3(_877, _878, _879));
    float _952 = _949 * 2.0;
    float _956 = (_952 * _797) - _877;
    float _957 = (_952 * _798) - _878;
    float _958 = (_952 * _799) - _879;
    float _962 = abs(dot(vec3(_877, _878, _879), vec3(_797, _798, _799)));
    float _4072 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _964 = sqrt(_800);
    float _977 = exp2((_964 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_964 * 3.0));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1047 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1051 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1076 = _1009 + _797;
        float _1077 = _1013 + _798;
        float _1078 = _1017 + _799;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_797, _798, _799), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4120 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_797, _798, _799), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4153 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_797, _798, _799), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4186 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1356 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1360 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1364 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1387 = _1009 + _797;
        float _1388 = _1013 + _798;
        float _1389 = _1017 + _799;
        float _1399 = fma(_1389, cbModelParam._m0[30u].z, fma(_1388, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1387)) - _1356;
        float _1400 = fma(_1389, cbModelParam._m0[31u].z, fma(_1388, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1387)) - _1360;
        float _1401 = fma(_1389, cbModelParam._m0[32u].z, fma(_1388, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1387)) - _1364;
        float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
        float _1418 = ((_1405 * _1399) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1356 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1405 * _1400) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1360 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1405 * _1401) / cbModelParam._m0[35u].z) + ((((((_1364 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        float _1455 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1422.x + (-0.5));
        float _1457 = _1455 * (_1422.y + (-0.5));
        float _1458 = _1455 * (_1422.z + (-0.5));
        float _1465 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1429.x + (-0.5));
        float _1467 = _1465 * (_1429.y + (-0.5));
        float _1468 = _1465 * (_1429.z + (-0.5));
        float _1475 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1436.x + (-0.5));
        float _1477 = _1475 * (_1436.y + (-0.5));
        float _1478 = _1475 * (_1436.z + (-0.5));
        float _1485 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1443.x + (-0.5));
        float _1487 = _1485 * (_1443.y + (-0.5));
        float _1488 = _1485 * (_1443.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_797, _798, _799), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4249 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1519 + 1.0))) + _1524) * _1489;
        float _1534 = _1457 * 0.5;
        float _1535 = _1467 * 0.5;
        float _1536 = _1477 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_797, _798, _799), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4282 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1561 + 1.0))) + _1566) * _1490;
        float _1576 = _1458 * 0.5;
        float _1577 = _1468 * 0.5;
        float _1578 = _1478 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_797, _798, _799), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4315 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1603 + 1.0))) + _1608) * _1491;
        _1625 = _1458;
        _1626 = _1457;
        _1627 = _1456;
        _1628 = _1468;
        _1629 = _1467;
        _1630 = _1466;
        _1631 = _1478;
        _1632 = _1477;
        _1633 = _1476;
        _1634 = _1491;
        _1635 = _1490;
        _1636 = _1489;
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1319;
        _1626 = _1319;
        _1627 = _1319;
        _1628 = _1319;
        _1629 = _1319;
        _1630 = _1319;
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = 0.0;
        _1638 = 0.0;
        _1639 = 0.0;
    }
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1331)) + _1331;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1332)) + _1332;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1333)) + _1333;
    float _1672 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1649));
    float _1693 = _956 * 0.5;
    float _1694 = _957 * 0.5;
    float _1695 = _958 * 0.5;
    float _1696 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1699 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1702 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1736;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1709 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1713 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1717 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1724 = dot(vec4(cbModelParam._m0[39u]), vec4(_1693, _1694, _1695, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1747;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1738 = dot(vec4(cbModelParam._m0[40u]), vec4(_1693, _1694, _1695, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1751 = (_1747 * cbModelParam._m0[1u].x) + (_1736 * (1.0 - cbModelParam._m0[1u].x));
    float _1761 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1761 : min(cbModelParam._m0[25u].z, _1761));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1810 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1814 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1818 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1821 = fma(_958, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956));
        float _1824 = fma(_958, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956));
        float _1827 = fma(_958, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956));
        float _1855;
        if (_1821 > 0.0)
        {
            _1855 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1855 = frontier_phi_14_12_ladder;
        }
        float _2026;
        if (_1824 > 0.0)
        {
            _2026 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2026 = frontier_phi_23_19_ladder;
        }
        float _2321;
        if (_1827 > 0.0)
        {
            _2321 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2321 = frontier_phi_35_30_ladder;
        }
        float _2323 = isnan(_2026) ? _1855 : (isnan(_1855) ? _2026 : min(_1855, _2026));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1821) + _1810;
        float _2329 = (_2324 * _1824) + _1814;
        float _2330 = (_2324 * _1827) + _1818;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2331;
        float _2335 = _2331 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 > _2335) || ((_2329 < _2333) || ((_2328 < _2333) || (_2328 > _2335))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2330, cbModelParam._m0[9u].z, fma(_2329, cbModelParam._m0[9u].y, _2328 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2330, cbModelParam._m0[10u].z, fma(_2329, cbModelParam._m0[10u].y, _2328 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2330, cbModelParam._m0[11u].z, fma(_2329, cbModelParam._m0[11u].y, _2328 * cbModelParam._m0[11u].x))), _1762);
            frontier_phi_13_35_ladder = _2475.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2475.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2475.x * cbModelParam._m0[1u].y;
        }
        _1843 = frontier_phi_13_35_ladder_2;
        _1845 = frontier_phi_13_35_ladder_1;
        _1847 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_956, _957, _958), _1762);
        _1843 = _1831.x * cbModelParam._m0[1u].y;
        _1845 = _1831.y * cbModelParam._m0[1u].y;
        _1847 = _1831.z * cbModelParam._m0[1u].y;
    }
    float _1851 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1852 = isnan(_1851) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1851 : min(cbModelParam._m0[25u].w, _1851));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1907 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1911 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1915 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1918 = fma(_958, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956));
        float _1921 = fma(_958, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956));
        float _1924 = fma(_958, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956));
        float _2031;
        if (_1918 > 0.0)
        {
            _2031 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2031 = frontier_phi_25_21_ladder;
        }
        float _2348;
        if (_1921 > 0.0)
        {
            _2348 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2348 = frontier_phi_37_32_ladder;
        }
        float _2675;
        if (_1924 > 0.0)
        {
            _2675 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2675 = frontier_phi_47_44_ladder;
        }
        float _2677 = isnan(_2348) ? _2031 : (isnan(_2031) ? _2348 : min(_2031, _2348));
        float _2678 = isnan(_2675) ? _2677 : (isnan(_2677) ? _2675 : min(_2677, _2675));
        float _2682 = (_2678 * _1918) + _1907;
        float _2683 = (_2678 * _1921) + _1911;
        float _2684 = (_2678 * _1924) + _1915;
        float _2685 = _2678 * 9.9999997473787516355514526367188e-05;
        float _2686 = (-1.0) - _2685;
        float _2688 = _2685 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2684 > _2688) || ((_2684 < _2686) || ((_2683 > _2688) || ((_2683 < _2686) || ((_2682 < _2686) || (_2682 > _2688))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2684, cbModelParam._m0[17u].z, fma(_2683, cbModelParam._m0[17u].y, _2682 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2684, cbModelParam._m0[18u].z, fma(_2683, cbModelParam._m0[18u].y, _2682 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2684, cbModelParam._m0[19u].z, fma(_2683, cbModelParam._m0[19u].y, _2682 * cbModelParam._m0[19u].x))), _1852);
            frontier_phi_22_47_ladder = _2802.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2802.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2802.x * cbModelParam._m0[1u].z;
        }
        _1943 = frontier_phi_22_47_ladder_2;
        _1945 = frontier_phi_22_47_ladder_1;
        _1947 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_956, _957, _958), _1852);
        _1943 = _1927.x * cbModelParam._m0[1u].z;
        _1945 = _1927.y * cbModelParam._m0[1u].z;
        _1947 = _1927.z * cbModelParam._m0[1u].z;
    }
    float _1959 = ((((1.0 - _977) * ((_964 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_977 * _964)) * _948;
    float _1960 = _1959 * ((cbModelParam._m0[1u].w * (_1943 - _1843)) + _1843);
    float _1961 = _1959 * ((cbModelParam._m0[1u].w * (_1945 - _1845)) + _1845);
    float _1962 = _1959 * ((cbModelParam._m0[1u].w * (_1947 - _1847)) + _1847);
    float _1965 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1960 * cbSceneParam._m0[91u].x));
    float _2005 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2013 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2018 = _2005 / _2017;
    float _2019 = _2009 / _2017;
    float _2020 = _2013 / _2017;
    float _2167;
    float _2168;
    float _2169;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2047 = ((uint(_2020 > cbSceneParam._m0[59u].y) + uint(_2020 > cbSceneParam._m0[59u].x)) + uint(_2020 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2048 = _2047 + 43u;
        uint _2056 = _2047 + 44u;
        uint _2064 = _2047 + 45u;
        uint _2072 = _2047 + 46u;
        float _2083 = fma(_2017, cbSceneParam._m0[_2048].w, fma(_2013, cbSceneParam._m0[_2048].z, fma(_2009, cbSceneParam._m0[_2048].y, _2005 * cbSceneParam._m0[_2048].x)));
        float _2087 = fma(_2017, cbSceneParam._m0[_2056].w, fma(_2013, cbSceneParam._m0[_2056].z, fma(_2009, cbSceneParam._m0[_2056].y, _2005 * cbSceneParam._m0[_2056].x)));
        float _2095 = fma(_2017, cbSceneParam._m0[_2072].w, fma(_2013, cbSceneParam._m0[_2072].z, fma(_2009, cbSceneParam._m0[_2072].y, _2005 * cbSceneParam._m0[_2072].x)));
        float _2100 = cbSceneParam._m0[33u].z * _2095;
        float _2102 = cbSceneParam._m0[33u].w * _2095;
        float _2105 = fma(_2017, cbSceneParam._m0[_2064].w, fma(_2013, cbSceneParam._m0[_2064].z, fma(_2009, cbSceneParam._m0[_2064].y, _2005 * cbSceneParam._m0[_2064].x))) / _2095;
        float _2153 = (cbSceneParam._m0[33u].x - sqrt(((_2019 * _2019) + (_2018 * _2018)) + (_2020 * _2020))) * cbSceneParam._m0[33u].y;
        float _4441 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2160 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 + _2083) / _2095, (_2102 + _2087) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 + _2083) / _2095, (_2087 - _2100) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 - _2100) / _2095, (_2087 - _2102) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 - _2102) / _2095, (_2100 + _2087) / _2095), _2105), 0.0)).x), vec4(0.25)));
        _2167 = 1.0 - (_2160 * cbSceneParam._m0[34u].x);
        _2168 = 1.0 - (_2160 * cbSceneParam._m0[34u].y);
        _2169 = 1.0 - (_2160 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2167 = 1.0;
        _2168 = 1.0;
        _2169 = 1.0;
    }
    float _2233;
    float _2235;
    float _2237;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2221 = fma(_2017, cbSceneParam._m0[63u].w, fma(_2013, cbSceneParam._m0[63u].z, fma(_2009, cbSceneParam._m0[63u].y, _2005 * cbSceneParam._m0[63u].x)));
        float _2222 = fma(_2017, cbSceneParam._m0[60u].w, fma(_2013, cbSceneParam._m0[60u].z, fma(_2009, cbSceneParam._m0[60u].y, _2005 * cbSceneParam._m0[60u].x))) / _2221;
        float _2223 = fma(_2017, cbSceneParam._m0[61u].w, fma(_2013, cbSceneParam._m0[61u].z, fma(_2009, cbSceneParam._m0[61u].y, _2005 * cbSceneParam._m0[61u].x))) / _2221;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2222 >= cbSceneParam._m0[64u].x) && (_2223 >= cbSceneParam._m0[64u].y)) && (_2222 <= cbSceneParam._m0[64u].z)) && (_2223 <= cbSceneParam._m0[64u].w))
        {
            float _2361 = fma(_2017, cbSceneParam._m0[62u].w, fma(_2013, cbSceneParam._m0[62u].z, fma(_2009, cbSceneParam._m0[62u].y, _2005 * cbSceneParam._m0[62u].x))) / _2221;
            float _2365 = isnan(cbSceneParam._m0[41u].w) ? _2361 : (isnan(_2361) ? cbSceneParam._m0[41u].w : max(_2361, cbSceneParam._m0[41u].w));
            float _2408 = (cbSceneParam._m0[33u].x - sqrt(((_2019 * _2019) + (_2018 * _2018)) + (_2020 * _2020))) * cbSceneParam._m0[33u].y;
            float _4457 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
            float _2415 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2222, cbSceneParam._m0[33u].w + _2223), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2222, _2223 - cbSceneParam._m0[33u].z), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2222 - cbSceneParam._m0[33u].z, _2223 - cbSceneParam._m0[33u].w), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2222 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2223), _2365), 0.0)).x), vec4(0.25)));
            float _2419 = 1.0 - (_2415 * cbSceneParam._m0[34u].x);
            float _2420 = 1.0 - (_2415 * cbSceneParam._m0[34u].y);
            float _2421 = 1.0 - (_2415 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
            frontier_phi_34_33_ladder_1 = isnan(_2420) ? _2168 : (isnan(_2168) ? _2420 : min(_2168, _2420));
            frontier_phi_34_33_ladder_2 = isnan(_2419) ? _2167 : (isnan(_2167) ? _2419 : min(_2167, _2419));
        }
        else
        {
            frontier_phi_34_33_ladder = _2169;
            frontier_phi_34_33_ladder_1 = _2168;
            frontier_phi_34_33_ladder_2 = _2167;
        }
        _2233 = frontier_phi_34_33_ladder_2;
        _2235 = frontier_phi_34_33_ladder_1;
        _2237 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2233 = _2167;
        _2235 = _2168;
        _2237 = _2169;
    }
    uvec4 _2242 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2244 = _2242.x * 14u;
    uint _2245 = _2244 + 13u;
    float _2252 = _948 + (-1.0);
    float _2257 = (cbLight._m0[_2245].x * _2252) + 1.0;
    float _2258 = (cbLight._m0[_2245].y * _2252) + 1.0;
    float _2259 = (cbLight._m0[_2245].z * _2252) + 1.0;
    float _2260 = (cbLight._m0[_2245].w * _2252) + 1.0;
    uint _2261 = _2244 + 5u;
    float _2267 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2271 = _2244 + 4u;
    float _2280 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2284 = _2244 | 1u;
    float _2295 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_797, _798, _799));
    float _2298 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_797, _798, _799));
    float _4493 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _4504 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2303 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2305 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2312 = ((cbLight._m0[_2261].x * _2267) * _2305) + (((cbLight._m0[_2271].x * _2233) * _2280) * _2303);
    float _2313 = ((_2267 * cbLight._m0[_2261].y) * _2305) + (((cbLight._m0[_2271].y * _2235) * _2280) * _2303);
    float _2314 = ((_2267 * cbLight._m0[_2261].z) * _2305) + (((cbLight._m0[_2271].z * _2237) * _2280) * _2303);
    uvec4 _2318 = floatBitsToUint(cbLight._m0[_2244 + 12u]);
    bool _2320 = _2318.x == 0u;
    float _2422;
    float _2424;
    float _2426;
    if (_2320)
    {
        _2422 = _2312;
        _2424 = _2313;
        _2426 = _2314;
    }
    else
    {
        uint _2430 = _2244 + 6u;
        float _2446 = (dot(vec3(cbLight._m0[_2244 + 2u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4515 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2449 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2422 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2312;
        _2424 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2313;
        _2426 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2314;
    }
    bool _2429 = _2318.y == 0u;
    float _2484;
    float _2486;
    float _2488;
    if (_2429)
    {
        _2484 = _2422;
        _2486 = _2424;
        _2488 = _2426;
    }
    else
    {
        uint _2646 = _2244 + 7u;
        float _2662 = (dot(vec3(cbLight._m0[_2244 + 3u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2663 = _2662 * _2662;
        float _4531 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2664 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2665 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2484 = (((cbLight._m0[_2646].x * 0.3183098733425140380859375) * _2664) * _2665) + _2422;
        _2486 = (((cbLight._m0[_2646].y * 0.3183098733425140380859375) * _2664) * _2665) + _2424;
        _2488 = (((cbLight._m0[_2646].z * 0.3183098733425140380859375) * _2664) * _2665) + _2426;
    }
    uint _2491 = _2244 + 8u;
    float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _800) * 0.949999988079071044921875);
    float _2505 = _2504 * _2504;
    float _2506 = cbLight._m0[_2244].x + _877;
    float _2507 = cbLight._m0[_2244].y + _878;
    float _2508 = cbLight._m0[_2244].z + _879;
    float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
    float _2513 = _2512 * _2506;
    float _2514 = _2512 * _2507;
    float _2515 = _2512 * _2508;
    float _2516 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2244].xyz));
    float _4547 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _4558 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2520 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2521 = dot(vec3(_797, _798, _799), vec3(_2513, _2514, _2515));
    float _4569 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2525 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2513, _2514, _2515));
    float _4580 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2529 = _2505 * _2505;
    float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
    float _2544 = (exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2545 = 1.0 - _2505;
    float _2556 = (0.5 / (((_2520 * ((_2519 * _2545) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2545) + _2505) * _2519))) * _2519;
    float _4591 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2558 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
    uint _2572 = _2244 + 9u;
    float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _800) * 0.949999988079071044921875);
    float _2584 = _2583 * _2583;
    float _2585 = cbLight._m0[_2284].x + _877;
    float _2586 = cbLight._m0[_2284].y + _878;
    float _2587 = cbLight._m0[_2284].z + _879;
    float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
    float _2592 = _2591 * _2585;
    float _2593 = _2591 * _2586;
    float _2594 = _2591 * _2587;
    float _2595 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2284].xyz));
    float _4602 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2599 = dot(vec3(_797, _798, _799), vec3(_2592, _2593, _2594));
    float _4613 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2602 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2603 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2592, _2593, _2594));
    float _4624 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2607 = _2584 * _2584;
    float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
    float _2620 = (exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2621 = 1.0 - _2584;
    float _2631 = (0.5 / (((_2520 * ((_2598 * _2621) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2621) + _2584) * _2598))) * _2598;
    float _4635 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2633 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
    float _2643 = (((_2620 * cbLight._m0[_2572].x) * _2633) * _2267) + ((((cbLight._m0[_2491].x * _2233) * _2544) * _2558) * _2280);
    float _2644 = (((_2620 * cbLight._m0[_2572].y) * _2633) * _2267) + ((((cbLight._m0[_2491].y * _2235) * _2544) * _2558) * _2280);
    float _2645 = (((_2620 * cbLight._m0[_2572].z) * _2633) * _2267) + ((((cbLight._m0[_2491].z * _2237) * _2544) * _2558) * _2280);
    float _2701;
    float _2703;
    float _2705;
    if (_2320)
    {
        _2701 = _2643;
        _2703 = _2644;
        _2705 = _2645;
    }
    else
    {
        uint _2707 = _2244 + 2u;
        uint _2711 = _2244 + 10u;
        float _2725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2707].w)) * _800) * 0.949999988079071044921875);
        float _2726 = _2725 * _2725;
        float _2727 = cbLight._m0[_2707].x + _877;
        float _2728 = cbLight._m0[_2707].y + _878;
        float _2729 = cbLight._m0[_2707].z + _879;
        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
        float _2734 = _2733 * _2727;
        float _2735 = _2733 * _2728;
        float _2736 = _2733 * _2729;
        float _2737 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2707].xyz));
        float _4646 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2741 = dot(vec3(_797, _798, _799), vec3(_2734, _2735, _2736));
        float _4657 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2745 = dot(vec3(cbLight._m0[_2707].xyz), vec3(_2734, _2735, _2736));
        float _4668 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2749 = _2726 * _2726;
        float _2753 = ((_2744 * _2744) * (_2749 + (-1.0))) + 1.0;
        float _2762 = (exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2763 = 1.0 - _2726;
        float _2773 = (0.5 / (((_2520 * ((_2740 * _2763) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2763) + _2726) * _2740))) * _2740;
        float _4679 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2775 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2749 / ((_2753 * _2753) * 3.141590118408203125));
        float _2776 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2701 = (((_2762 * cbLight._m0[_2711].x) * _2775) * _2776) + _2643;
        _2703 = (((_2762 * cbLight._m0[_2711].y) * _2775) * _2776) + _2644;
        _2705 = (((_2762 * cbLight._m0[_2711].z) * _2775) * _2776) + _2645;
    }
    float _2807;
    float _2809;
    float _2811;
    if (_2429)
    {
        _2807 = _2701;
        _2809 = _2703;
        _2811 = _2705;
    }
    else
    {
        uint _2818 = _2244 + 3u;
        uint _2822 = _2244 + 11u;
        float _2836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2818].w)) * _800) * 0.949999988079071044921875);
        float _2837 = _2836 * _2836;
        float _2838 = cbLight._m0[_2818].x + _877;
        float _2839 = cbLight._m0[_2818].y + _878;
        float _2840 = cbLight._m0[_2818].z + _879;
        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
        float _2845 = _2844 * _2838;
        float _2846 = _2844 * _2839;
        float _2847 = _2844 * _2840;
        float _2848 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2818].xyz));
        float _4695 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2852 = dot(vec3(_797, _798, _799), vec3(_2845, _2846, _2847));
        float _4706 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2855 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2856 = dot(vec3(cbLight._m0[_2818].xyz), vec3(_2845, _2846, _2847));
        float _4717 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2860 = _2837 * _2837;
        float _2864 = ((_2855 * _2855) * (_2860 + (-1.0))) + 1.0;
        float _2873 = (exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2874 = 1.0 - _2837;
        float _2884 = (0.5 / (((_2520 * ((_2851 * _2874) + _2837)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2874) + _2837) * _2851))) * _2851;
        float _4728 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2886 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2860 / ((_2864 * _2864) * 3.141590118408203125));
        float _2887 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2807 = (((_2873 * cbLight._m0[_2822].x) * _2886) * _2887) + _2701;
        _2809 = (((_2873 * cbLight._m0[_2822].y) * _2886) * _2887) + _2703;
        _2811 = (((_2873 * cbLight._m0[_2822].z) * _2886) * _2887) + _2705;
    }
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_2242.y == 0u)
    {
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.x;
        uint _2920 = uint((float(_2908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _886) / _2909))) + floor(float(uint(cbSceneParam._m0[85u].x * _885) / _2909)));
        float _2930 = (log2(_2020 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2931 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        uint _2934 = uint(isnan(14.0) ? _2931 : (isnan(_2931) ? 14.0 : min(_2931, 14.0)));
        uvec4 _2939 = texelFetch(g_lightClusterGridBuffer, int(((_2934 << 2u) + (_2920 << 6u)) >> 2u));
        uint _2940 = _2939.x;
        uint _2941 = _2908.z;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((((1u << ((_2941 >> 4u) & 15u)) + 4294967295u) & _2940) == 0u) || ((_2941 & 240u) == 0u))
        {
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
        }
        else
        {
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            uint _3171 = 0u;
            uint _3180;
            bool _3181;
            for (;;)
            {
                _3180 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3171 << 2u)) >> 2u)).x;
                _3181 = _3180 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3181)
                {
                    frontier_phi_66_pred = _3170;
                    frontier_phi_66_pred_1 = _3169;
                    frontier_phi_66_pred_2 = _3168;
                    frontier_phi_66_pred_3 = _3167;
                    frontier_phi_66_pred_4 = _3166;
                    frontier_phi_66_pred_5 = _3165;
                }
                else
                {
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    uint _3295;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3180;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    for (;;)
                    {
                        uint _3299 = uint(findLSB(_3295)) + (_3171 << 5u);
                        uint _3296 = (_3295 + 4294967295u) & _3295;
                        uint _3301 = _3299 * 48u;
                        vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 3u)).x));
                        uint _3321 = (_3299 * 48u) + 4u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 3u)).x));
                        uint _3340 = (_3299 * 48u) + 8u;
                        vec3 _3351 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x));
                        float _3355 = _3315.x - _2018;
                        float _3356 = _3315.y - _2019;
                        float _3357 = _3315.z - _2020;
                        float _3358 = dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357));
                        float _3361 = inversesqrt(_3358);
                        float _3362 = _3361 * _3355;
                        float _3363 = _3361 * _3356;
                        float _3364 = _3361 * _3357;
                        float _3365 = dot(vec3(_904, _907, _910), vec3(_3362, _3363, _3364));
                        float _3370 = 1.0 - (_3358 * _3315.w);
                        float _4754 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3371 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3372 = sqrt(_3358) * _3334.w;
                        float _3375 = 1.39999997615814208984375 / (_3372 + 1.39999997615814208984375);
                        float _3376 = _3375 * _3375;
                        float _3379 = ((1.0 - _3376) * _3365) + _3376;
                        float _3382 = _3372 * _3372;
                        float _3386 = ((isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0))) * _3371) / ((_3382 * 0.699999988079071044921875) + 1.0);
                        float _3390 = (-0.0) - _2018;
                        float _3391 = (-0.0) - _2019;
                        float _3392 = (-0.0) - _2020;
                        float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                        float _3397 = _3396 * _3390;
                        float _3398 = _3396 * _3391;
                        float _3399 = _3396 * _3392;
                        float _3406 = exp2(log2(1.0 / ((_3382 * 3.5) + 5.0)) * 0.25);
                        float _3407 = 1.0 - _964;
                        float _3414 = sqrt(1.0 - ((1.0 - (_3407 * _3407)) * (1.0 - (_3406 * _3406))));
                        float _3415 = _3414 * _3414;
                        float _3416 = _3415 * _3415;
                        float _3417 = _3397 + _3362;
                        float _3418 = _3398 + _3363;
                        float _3419 = _3399 + _3364;
                        float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                        float _3427 = dot(vec3(_904, _907, _910), vec3(_3397, _3398, _3399));
                        float _4770 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3430 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3431 = dot(vec3(_904, _907, _910), vec3(_3423 * _3417, _3423 * _3418, _3423 * _3419));
                        float _4781 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3434 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3438 = ((_3434 * _3434) * (_3416 + (-1.0))) + 1.0;
                        float _3439 = _3375 * _3415;
                        float _3440 = _3439 * _3439;
                        float _3443 = ((1.0 - _3440) * _3365) + _3440;
                        float _4792 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3444 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3445 = 1.0 - _3415;
                        float _3455 = (0.5 / (((_3444 * ((_3430 * _3445) + _3415)) + 9.9999999392252902907785028219223e-09) + (((_3444 * _3445) + _3415) * _3430))) * _3444;
                        float _4803 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3466 = (((_3416 * 3.1415927410125732421875) * (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) / ((_3438 * _3438) * ((_3382 * 2.1991131305694580078125) + 3.141590118408203125))) * _3371;
                        _3224 = (_3386 * _3334.x) + _3292;
                        _3225 = (_3386 * _3334.y) + _3293;
                        _3226 = (_3386 * _3334.z) + _3294;
                        _3221 = (_3466 * _3351.x) + _3289;
                        _3222 = (_3466 * _3351.y) + _3290;
                        _3223 = (_3466 * _3351.z) + _3291;
                        if (_3296 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3296;
                        }
                    }
                    frontier_phi_66_pred = _3226;
                    frontier_phi_66_pred_1 = _3225;
                    frontier_phi_66_pred_2 = _3224;
                    frontier_phi_66_pred_3 = _3223;
                    frontier_phi_66_pred_4 = _3222;
                    frontier_phi_66_pred_5 = _3221;
                }
                _3031 = frontier_phi_66_pred;
                _3029 = frontier_phi_66_pred_1;
                _3027 = frontier_phi_66_pred_2;
                _3025 = frontier_phi_66_pred_3;
                _3023 = frontier_phi_66_pred_4;
                _3021 = frontier_phi_66_pred_5;
                uint _3172 = _3171 + 1u;
                if (_3172 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3165 = _3021;
                    _3166 = _3023;
                    _3167 = _3025;
                    _3168 = _3027;
                    _3169 = _3029;
                    _3170 = _3031;
                    _3171 = _3172;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
        }
        uvec4 _3034 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3035 = _3034.z;
        uint _3037 = (_3035 >> 8u) & 15u;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        if (((4294967295u << _3037) & _2940) == 0u)
        {
            _3133 = _3020;
            _3135 = _3022;
            _3137 = _3024;
            _3139 = _3026;
            _3141 = _3028;
            _3143 = _3030;
        }
        else
        {
            float _3158 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
            float _3159 = _3158 * _2018;
            float _3160 = _3158 * _2019;
            float _3161 = _3158 * _2020;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3037 < ((_3035 >> 12u) & 15u))
            {
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3272 = _3020;
                float _3273 = _3022;
                float _3274 = _3024;
                float _3275 = _3026;
                float _3276 = _3028;
                float _3277 = _3030;
                uint _3278 = _3037;
                uint _3287;
                bool _3288;
                for (;;)
                {
                    _3287 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3278 << 2u)) >> 2u)).x;
                    _3288 = _3287 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3288)
                    {
                        frontier_phi_72_pred = _3277;
                        frontier_phi_72_pred_1 = _3276;
                        frontier_phi_72_pred_2 = _3275;
                        frontier_phi_72_pred_3 = _3274;
                        frontier_phi_72_pred_4 = _3273;
                        frontier_phi_72_pred_5 = _3272;
                    }
                    else
                    {
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3484 = _3272;
                        float _3485 = _3273;
                        float _3486 = _3274;
                        float _3487 = _3275;
                        float _3488 = _3276;
                        float _3489 = _3277;
                        uint _3490 = _3287;
                        uint _3491;
                        vec4 _3516;
                        float _3517;
                        vec4 _3532;
                        vec3 _3544;
                        vec4 _3559;
                        vec4 _3574;
                        float _3620;
                        bool _3621;
                        for (;;)
                        {
                            uint _3501 = ((_3278 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3490));
                            _3491 = (_3490 + 4294967295u) & _3490;
                            uint _3503 = _3501 * 40u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3517 = _3516.w;
                            uint _3519 = (_3501 * 40u) + 4u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3501 * 40u) + 8u;
                            _3544 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x));
                            uint _3546 = (_3501 * 40u) + 16u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3501 * 40u) + 20u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3501 * 40u) + 24u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3595 = (_3501 * 40u) + 28u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3620 = fma(_2020, _3608.z, fma(_2019, _3608.y, _3608.x * _2018)) + _3608.w;
                            _3621 = !((fma(_2020, _3589.z, fma(_2019, _3589.y, _3589.x * _2018)) + _3589.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3621)
                            {
                                float _3648 = _3516.x - _2018;
                                float _3649 = _3516.y - _2019;
                                float _3650 = _3516.z - _2020;
                                float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                                float _3654 = inversesqrt(_3651);
                                float _3655 = _3654 * _3648;
                                float _3656 = _3654 * _3649;
                                float _3657 = _3654 * _3650;
                                float _3661 = 1.0 - (_3651 / (_3517 * _3517));
                                float _4814 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3666 = sqrt(_3651) * _3532.w;
                                float _3668 = 1.39999997615814208984375 / (_3666 + 1.39999997615814208984375);
                                float _3669 = _3668 * _3668;
                                float _3672 = ((1.0 - _3669) * dot(vec3(_3655, _3656, _3657), vec3(_904, _907, _910))) + _3669;
                                float _3675 = _3666 * _3666;
                                float _3679 = (fma(_2020, _3559.z, fma(_2019, _3559.y, _3559.x * _2018)) + _3559.w) / _3620;
                                float _3680 = (fma(_2020, _3574.z, fma(_2019, _3574.y, _3574.x * _2018)) + _3574.w) / _3620;
                                float _3684 = 1.0 - dot(vec2(_3679, _3680), vec2(_3679, _3680));
                                float _4830 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3686 = _3685 * (((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3662) / ((_3675 * 0.699999988079071044921875) + 1.0));
                                float _3698 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                                float _3699 = 1.0 - _964;
                                float _3706 = sqrt(1.0 - ((1.0 - (_3699 * _3699)) * (1.0 - (_3698 * _3698))));
                                float _3707 = _3706 * _3706;
                                float _3708 = _3707 * _3707;
                                float _3709 = _3655 - _3159;
                                float _3710 = _3656 - _3160;
                                float _3711 = _3657 - _3161;
                                float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                                float _3719 = dot(vec3(_904, _907, _910), vec3((-0.0) - _3159, (-0.0) - _3160, (-0.0) - _3161));
                                float _4841 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3723 = dot(vec3(_904, _907, _910), vec3(_3715 * _3709, _3715 * _3710, _3715 * _3711));
                                float _4852 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3730 = ((_3726 * _3726) * (_3708 + (-1.0))) + 1.0;
                                float _3731 = _3668 * _3707;
                                float _3732 = _3731 * _3731;
                                float _3738 = ((1.0 - _3732) * dot(vec3(_904, _907, _910), vec3(_3655, _3656, _3657))) + _3732;
                                float _4863 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3740 = 1.0 - _3707;
                                float _3750 = (0.5 / (((_3739 * ((_3722 * _3740) + _3707)) + 9.9999999392252902907785028219223e-09) + (((_3739 * _3740) + _3707) * _3722))) * _3739;
                                float _4874 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3760 = (_3685 * _3662) * (((_3708 * 3.1415927410125732421875) * (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) / ((_3730 * _3730) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3686 * _3532.y;
                                frontier_phi_78_pred_1 = _3686 * _3532.x;
                                frontier_phi_78_pred_2 = _3760 * _3544.z;
                                frontier_phi_78_pred_3 = _3760 * _3544.y;
                                frontier_phi_78_pred_4 = _3760 * _3544.x;
                                frontier_phi_78_pred_5 = _3686 * _3532.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3768 = frontier_phi_78_pred;
                            _3767 = frontier_phi_78_pred_1;
                            _3766 = frontier_phi_78_pred_2;
                            _3765 = frontier_phi_78_pred_3;
                            _3764 = frontier_phi_78_pred_4;
                            _3769 = frontier_phi_78_pred_5;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            if (_3491 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3491;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3476;
                        frontier_phi_72_pred_1 = _3475;
                        frontier_phi_72_pred_2 = _3474;
                        frontier_phi_72_pred_3 = _3473;
                        frontier_phi_72_pred_4 = _3472;
                        frontier_phi_72_pred_5 = _3471;
                    }
                    _3144 = frontier_phi_72_pred;
                    _3142 = frontier_phi_72_pred_1;
                    _3140 = frontier_phi_72_pred_2;
                    _3138 = frontier_phi_72_pred_3;
                    _3136 = frontier_phi_72_pred_4;
                    _3134 = frontier_phi_72_pred_5;
                    uint _3279 = _3278 + 1u;
                    if (_3279 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3272 = _3134;
                        _3273 = _3136;
                        _3274 = _3138;
                        _3275 = _3140;
                        _3276 = _3142;
                        _3277 = _3144;
                        _3278 = _3279;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3144;
                frontier_phi_60_61_ladder_1 = _3142;
                frontier_phi_60_61_ladder_2 = _3138;
                frontier_phi_60_61_ladder_3 = _3136;
                frontier_phi_60_61_ladder_4 = _3134;
                frontier_phi_60_61_ladder_5 = _3140;
            }
            else
            {
                frontier_phi_60_61_ladder = _3030;
                frontier_phi_60_61_ladder_1 = _3028;
                frontier_phi_60_61_ladder_2 = _3024;
                frontier_phi_60_61_ladder_3 = _3022;
                frontier_phi_60_61_ladder_4 = _3020;
                frontier_phi_60_61_ladder_5 = _3026;
            }
            _3133 = frontier_phi_60_61_ladder_4;
            _3135 = frontier_phi_60_61_ladder_3;
            _3137 = frontier_phi_60_61_ladder_2;
            _3139 = frontier_phi_60_61_ladder_5;
            _3141 = frontier_phi_60_61_ladder_1;
            _3143 = frontier_phi_60_61_ladder;
        }
        float _3148 = isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0));
        _2953 = (_3148 * _3139) + _2484;
        _2955 = (_3148 * _3141) + _2486;
        _2957 = (_3148 * _3143) + _2488;
        _2959 = ((_3133 * 0.039999999105930328369140625) * _3148) + _2807;
        _2961 = ((_3135 * 0.039999999105930328369140625) * _3148) + _2809;
        _2963 = ((_3137 * 0.039999999105930328369140625) * _3148) + _2811;
    }
    else
    {
        _2953 = _2484;
        _2955 = _2486;
        _2957 = _2488;
        _2959 = _2807;
        _2961 = _2809;
        _2963 = _2811;
    }
    float _4890 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4901 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4912 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    uint _2983 = _272 + 6u;
    float _2991 = _885 / cbSceneParam._m0[86u].x;
    float _2992 = _886 / cbSceneParam._m0[86u].y;
    vec4 _3006 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3008 = _3006.x;
    float _3009 = _3006.y;
    float _3010 = _3006.z;
    float _3011 = _3006.w;
    float _3083;
    float _3085;
    float _3087;
    float _3089;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _3045 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _3046 = _3045 / _818;
        float _3057 = _3046 * _870;
        float _3058 = _871 * _3046;
        float _3059 = (-0.0) - _3058;
        float _3061 = _3046 * _872;
        float _3063 = (cbSceneParam._m0[77u].w * _3059) / _3045;
        float _3064 = _3063 + cbSceneParam._m0[79u].w;
        float _3065 = cbSceneParam._m0[79u].w - _3058;
        float _3071 = sqrt(((_3057 * _3057) + (_3058 * _3058)) + (_3061 * _3061));
        float _3074 = (1.0 - (cbSceneParam._m0[77u].w / _3045)) * _3071;
        float _3079 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3081 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3234;
        if (abs((_3059 - _3063) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3234 = ((((_3064 > 0.0) ? exp2(_3079 * _3064) : (2.0 - exp2(_3081 * _3064))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3074;
        }
        else
        {
            float _3194 = 1.0 / cbSceneParam._m0[80u].x;
            float _3195 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : max(_3064, _3065));
            float _3196 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : min(_3064, _3065));
            float _3205 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : min(_3195, 0.0));
            float _3206 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : min(_3196, 0.0));
            _3234 = ((abs(_3071 / _3059) * cbSceneParam._m0[80u].y) * ((((_3205 - _3206) * 2.0) - ((exp2(_3079 * (isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0)))) - exp2(_3079 * (isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))))) * _3194)) - ((exp2(_3081 * _3205) - exp2(_3081 * _3206)) * _3194))) + (_3074 * cbSceneParam._m0[80u].z);
        }
        vec4 _3236 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, 1.0), 0.0);
        float _3245 = exp2((_3234 * (-1.44269502162933349609375)) * (1.0 - _3236.w));
        float _3246 = log2(_3245);
        float _3262 = log2(_3011);
        _3083 = (exp2(_3262 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].x)) * _3236.x) / cbSceneParam._m0[78u].x)) + _3008;
        _3085 = (exp2(_3262 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].y)) * _3236.y) / cbSceneParam._m0[78u].y)) + _3009;
        _3087 = (exp2(_3262 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].z)) * _3236.z) / cbSceneParam._m0[78u].z)) + _3010;
        _3089 = _3245 * _3011;
    }
    else
    {
        _3083 = _3008;
        _3085 = _3009;
        _3087 = _3010;
        _3089 = _3011;
    }
    float _3101 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3102 = _3101 == 3.0;
    float _3103 = log2(_3089);
    float _3110 = exp2(_3103 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2953 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _948))) + ((_2959 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _3111 = exp2(_3103 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2955 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _948))) + ((_2961 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _3112 = exp2(_3103 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2957 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _948))) + ((_2963 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _3121 = (_3101 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3121 * (_3102 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3083)));
    SV_Target.y = _3121 * (_3102 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3085)));
    SV_Target.z = _3121 * (_3102 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3087)));
    SV_Target.w = cbInstanceData._m0[_2983].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2983].w;
}


