#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1599;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3900 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3911 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3922 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _389.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[24u].z) + _441) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3933 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _466 = (_459 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _467 = (_459 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _468 = (_459 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _389.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[24u].z) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3944 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _306) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _307) + cbTextureTilingScale._m0[24u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _578 = _576.x;
    float _588 = dot(vec4(_578, _576.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _600 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _389.z) * 2.0) - ((((_578 - _588) * cbMtdParam._m0[24u].z) + _588) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3955 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _608 = (_601 * ((_559.x * cbMtdParam._m0[14u].x) - _539)) + _539;
    float _609 = (_601 * ((_559.y * cbMtdParam._m0[14u].y) - _540)) + _540;
    float _610 = (_601 * ((_559.z * cbMtdParam._m0[14u].z) - _541)) + _541;
    float _614 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _608;
    float _617 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _609;
    float _620 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _610;
    float _627 = ((_608 - _614) * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) + _614;
    float _628 = ((_609 - _617) * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) + _617;
    float _629 = ((_610 - _620) * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) + _620;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _710 = _708.x;
    float _711 = _708.y;
    float _712 = _708.z;
    float _719 = ((_691.x - _710) * _459) + _710;
    float _720 = ((_691.y - _711) * _459) + _711;
    float _721 = ((_691.z - _712) * _459) + _712;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _744 = ((_733.x - _719) * _532) + _719;
    float _745 = ((_733.y - _720) * _532) + _720;
    float _746 = ((_733.z - _721) * _532) + _721;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _306) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _307) + cbTextureTilingScale._m0[23u].w));
    float _771 = ((_758.z - _746) * _601) + _746;
    float _774 = ((((_758.x - _744) * _601) + _744) * 2.0) + (-1.0);
    float _775 = ((((_758.y - _745) * _601) + _745) * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _3966 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _781 = sqrt(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))));
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _811 = (_774 + ((((_666.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_799.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _812 = (_775 + ((((_666.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_799.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _815 = fma(_781, _256, fma(_812, _263, _811 * _249));
    float _818 = fma(_781, _257, fma(_812, _264, _811 * _250));
    float _821 = fma(_781, _258, fma(_812, _265, _811 * _251));
    float _825 = inversesqrt(dot(vec3(_815, _818, _821), vec3(_815, _818, _821)));
    vec4 _852 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _854 = _852.x;
    float _855 = 1.0 - _854;
    float _861 = (cbMtdParam._m0[19u].x + dot(vec4(_825 * _815, _825 * _818, _825 * _821, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_854 - _855) * cbMtdParam._m0[24u].w) + _855) * cbMtdParam._m0[21u].z);
    float _3977 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _862 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _864 = (-0.0) - cbMtdParam._m0[24u].x;
    float _866 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _866 : (isnan(_866) ? 1.0 : min(_866, 1.0));
    float _874 = _862 - ((_862 * TEXCOORD_8.x) * _867);
    float _875 = _862 - ((_862 * TEXCOORD_8.y) * _867);
    float _876 = _862 - ((_862 * TEXCOORD_8.z) * _867);
    float _883 = (_874 * ((_647.x * cbMtdParam._m0[18u].x) - _627)) + _627;
    float _884 = (_875 * ((_647.y * cbMtdParam._m0[18u].y) - _628)) + _628;
    float _885 = (_876 * ((_647.z * cbMtdParam._m0[18u].z) - _629)) + _629;
    float _900 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _901 = _900 * TEXCOORD.z;
    float _902 = _900 * TEXCOORD.w;
    vec4 _914 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _901) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _902) + cbTextureTilingScale._m0[19u].w));
    float _916 = _914.x;
    float _917 = 1.0 - _916;
    float _945 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_916 - _917) * cbMtdParam._m0[24u].y) + _917) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3998 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _946 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _954 = ((((cbMtdParam._m0[10u].x - _883) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _946) + _883;
    float _955 = ((((cbMtdParam._m0[10u].y - _884) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _946) + _884;
    float _956 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _885)) * _946) + _885;
    float _961 = (((_666.z - _771) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _771;
    float _965 = ((_799.z - _961) * cbMtdParam._m0[19u].w) + _961;
    vec4 _981 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _988 = (_981.x * 2.0) + (-1.0);
    float _989 = (_981.y * 2.0) + (-1.0);
    float _990 = dot(vec2(_988, _989), vec2(_988, _989));
    float _4009 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _998 = ((_981.z - _965) * _874) + _965;
    float _1001 = ((cbMtdParam._m0[23u].y - _998) * _946) + _998;
    vec4 _1022 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _901) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _902) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1028 = (_1022.x * 2.0) + (-1.0);
    float _1029 = (_1022.y * 2.0) + (-1.0);
    float _1030 = dot(vec2(_1028, _1029), vec2(_1028, _1029));
    float _4020 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1045 = ((sqrt(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) - _781) * _876) + _781;
    float _1048 = (((_988 - _811) * _874) + _811) + (cbMtdParam._m0[21u].x * _811);
    float _1049 = (((_989 - _812) * _875) + _812) + (cbMtdParam._m0[21u].x * _812);
    float _1060 = (((_1028 - _1048) + (_1048 * cbMtdParam._m0[22u].z)) * _946) + _1048;
    float _1061 = (((_1029 - _1049) + (_1049 * cbMtdParam._m0[22u].z)) * _946) + _1049;
    float _1062 = (_946 * (sqrt(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) - _1045)) + _1045;
    float _1064 = cbMtdParam._m0[22u].x + _799.w;
    float _1067 = fma(_1062, _256, fma(_1061, _263, _1060 * _249));
    float _1070 = fma(_1062, _257, fma(_1061, _264, _1060 * _250));
    float _1073 = fma(_1062, _258, fma(_1061, _265, _1060 * _251));
    float _1077 = inversesqrt(dot(vec3(_1067, _1070, _1073), vec3(_1067, _1070, _1073)));
    float _1078 = _1077 * _1067;
    float _1079 = _1077 * _1070;
    float _1080 = _1077 * _1073;
    float _4031 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1081 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _4053 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4064 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4075 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _1099 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1150 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1140);
    float _1151 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1140);
    float _1152 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1140);
    float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
    float _1157 = _1150 * _1156;
    float _1158 = _1151 * _1156;
    float _1159 = _1152 * _1156;
    float _1165 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1166 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1184 = fma(_1080, cbSceneParam._m0[5u].z, fma(_1079, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1078));
    float _1187 = fma(_1080, cbSceneParam._m0[6u].z, fma(_1079, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1078));
    float _1190 = fma(_1080, cbSceneParam._m0[7u].z, fma(_1079, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1078));
    uint _1204 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1210 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * cbInstanceData._m0[_1204].x;
    float _1211 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * cbInstanceData._m0[_1204].y;
    float _1212 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * cbInstanceData._m0[_1204].z;
    float _4086 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1215 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    vec4 _1224 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1165, cbSceneParam._m0[86u].y * _1166));
    float _1228 = ((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * TEXCOORD_5.w) * _1224.x;
    float _1229 = dot(vec3(_1078, _1079, _1080), vec3(_1157, _1158, _1159));
    float _1232 = _1229 * 2.0;
    float _1236 = (_1232 * _1078) - _1157;
    float _1237 = (_1232 * _1079) - _1158;
    float _1238 = (_1232 * _1080) - _1159;
    float _1242 = abs(dot(vec3(_1157, _1158, _1159), vec3(_1078, _1079, _1080)));
    float _4119 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _1244 = sqrt(_1081);
    float _1257 = exp2((_1244 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1244 * 3.0));
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1293 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1297 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1598;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1323 = fma(_1297, cbModelParam._m0[26u].z, fma(_1293, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1289));
        float _1327 = fma(_1297, cbModelParam._m0[27u].z, fma(_1293, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1289));
        float _1331 = fma(_1297, cbModelParam._m0[28u].z, fma(_1293, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1289));
        float _1356 = _1289 + _1078;
        float _1357 = _1293 + _1079;
        float _1358 = _1297 + _1080;
        float _1368 = fma(_1358, cbModelParam._m0[26u].z, fma(_1357, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1356)) - _1323;
        float _1369 = fma(_1358, cbModelParam._m0[27u].z, fma(_1357, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1356)) - _1327;
        float _1370 = fma(_1358, cbModelParam._m0[28u].z, fma(_1357, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1356)) - _1331;
        float _1374 = inversesqrt(dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370)));
        float _1387 = ((_1374 * _1368) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1323 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1374 * _1369) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1327 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1374 * _1370) / cbModelParam._m0[34u].z) + ((((((_1331 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        float _1426 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1392.x + (-0.5));
        float _1428 = _1426 * (_1392.y + (-0.5));
        float _1429 = _1426 * (_1392.z + (-0.5));
        float _1436 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1399.x + (-0.5));
        float _1438 = _1436 * (_1399.y + (-0.5));
        float _1439 = _1436 * (_1399.z + (-0.5));
        float _1446 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1406.x + (-0.5));
        float _1448 = _1446 * (_1406.y + (-0.5));
        float _1449 = _1446 * (_1406.z + (-0.5));
        float _1456 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1413.x + (-0.5));
        float _1458 = _1456 * (_1413.y + (-0.5));
        float _1459 = _1456 * (_1413.z + (-0.5));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = _1427 * 0.5;
        float _1464 = _1437 * 0.5;
        float _1465 = _1447 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1480 = (dot(vec3(_1078, _1079, _1080), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1490 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4167 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1492 + 1.0))) + _1497) * _1460;
        float _1507 = _1428 * 0.5;
        float _1508 = _1438 * 0.5;
        float _1509 = _1448 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_1078, _1079, _1080), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4200 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1534 + 1.0))) + _1539) * _1461;
        float _1549 = _1429 * 0.5;
        float _1550 = _1439 * 0.5;
        float _1551 = _1449 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_1078, _1079, _1080), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4233 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1576 + 1.0))) + _1581) * _1462;
        _1598 = _1429;
        _1600 = _1428;
        _1601 = _1427;
        _1602 = _1439;
        _1603 = _1438;
        _1604 = _1437;
        _1605 = _1449;
        _1606 = _1448;
        _1607 = _1447;
        _1608 = _1462;
        _1609 = _1461;
        _1610 = _1460;
        _1611 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1612 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1613 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1599;
        _1600 = _1599;
        _1601 = _1599;
        _1602 = _1599;
        _1603 = _1599;
        _1604 = _1599;
        _1605 = _1599;
        _1606 = _1599;
        _1607 = _1599;
        _1608 = _1599;
        _1609 = _1599;
        _1610 = _1599;
        _1611 = 0.0;
        _1612 = 0.0;
        _1613 = 0.0;
    }
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1636 = fma(_1297, cbModelParam._m0[30u].z, fma(_1293, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1289));
        float _1640 = fma(_1297, cbModelParam._m0[31u].z, fma(_1293, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1289));
        float _1644 = fma(_1297, cbModelParam._m0[32u].z, fma(_1293, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1289));
        float _1667 = _1289 + _1078;
        float _1668 = _1293 + _1079;
        float _1669 = _1297 + _1080;
        float _1679 = fma(_1669, cbModelParam._m0[30u].z, fma(_1668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1667)) - _1636;
        float _1680 = fma(_1669, cbModelParam._m0[31u].z, fma(_1668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1667)) - _1640;
        float _1681 = fma(_1669, cbModelParam._m0[32u].z, fma(_1668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1667)) - _1644;
        float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
        float _1698 = ((_1685 * _1679) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1636 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1699 = ((_1685 * _1680) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1640 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1700 = ((_1685 * _1681) / cbModelParam._m0[35u].z) + ((((((_1644 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1702 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        vec4 _1709 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        vec4 _1716 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        vec4 _1723 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        float _1735 = exp2((_1702.w + (-0.5)) * 20.0) * 2.0;
        float _1736 = _1735 * (_1702.x + (-0.5));
        float _1737 = _1735 * (_1702.y + (-0.5));
        float _1738 = _1735 * (_1702.z + (-0.5));
        float _1745 = exp2((_1709.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = _1745 * (_1709.x + (-0.5));
        float _1747 = _1745 * (_1709.y + (-0.5));
        float _1748 = _1745 * (_1709.z + (-0.5));
        float _1755 = exp2((_1716.w + (-0.5)) * 20.0) * 2.0;
        float _1756 = _1755 * (_1716.x + (-0.5));
        float _1757 = _1755 * (_1716.y + (-0.5));
        float _1758 = _1755 * (_1716.z + (-0.5));
        float _1765 = exp2((_1723.w + (-0.5)) * 20.0) * 2.0;
        float _1766 = _1765 * (_1723.x + (-0.5));
        float _1767 = _1765 * (_1723.y + (-0.5));
        float _1768 = _1765 * (_1723.z + (-0.5));
        float _1769 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1770 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1771 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1772 = _1736 * 0.5;
        float _1773 = _1746 * 0.5;
        float _1774 = _1756 * 0.5;
        float _1775 = dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_1078, _1079, _1080), vec3(_1780 * _1772, _1780 * _1773, _1780 * _1774)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774)) / (_1769 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4296 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1799 + 1.0))) + _1804) * _1769;
        float _1814 = _1737 * 0.5;
        float _1815 = _1747 * 0.5;
        float _1816 = _1757 * 0.5;
        float _1817 = dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816));
        float _1822 = (_1817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1817);
        float _1830 = (dot(vec3(_1078, _1079, _1080), vec3(_1822 * _1814, _1822 * _1815, _1822 * _1816)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1839 = sqrt(((_1815 * _1815) + (_1814 * _1814)) + (_1816 * _1816)) / (_1770 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1841 = _1840 * 2.0;
        float _1845 = (1.0 - _1840) / (_1840 + 1.0);
        float _4329 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1855 = ((((1.0 - _1846) * (_1841 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1841 + 1.0))) + _1846) * _1770;
        float _1856 = _1738 * 0.5;
        float _1857 = _1748 * 0.5;
        float _1858 = _1758 * 0.5;
        float _1859 = dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858));
        float _1864 = (_1859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1859);
        float _1872 = (dot(vec3(_1078, _1079, _1080), vec3(_1864 * _1856, _1864 * _1857, _1864 * _1858)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1881 = sqrt(((_1857 * _1857) + (_1856 * _1856)) + (_1858 * _1858)) / (_1771 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1883 = _1882 * 2.0;
        float _1887 = (1.0 - _1882) / (_1882 + 1.0);
        float _4362 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1897 = ((((1.0 - _1888) * (_1883 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1883 + 1.0))) + _1888) * _1771;
        _1905 = _1738;
        _1906 = _1737;
        _1907 = _1736;
        _1908 = _1748;
        _1909 = _1747;
        _1910 = _1746;
        _1911 = _1758;
        _1912 = _1757;
        _1913 = _1756;
        _1914 = _1771;
        _1915 = _1770;
        _1916 = _1769;
        _1917 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
        _1918 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)));
        _1919 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)));
    }
    else
    {
        _1905 = _1599;
        _1906 = _1599;
        _1907 = _1599;
        _1908 = _1599;
        _1909 = _1599;
        _1910 = _1599;
        _1911 = _1599;
        _1912 = _1599;
        _1913 = _1599;
        _1914 = _1599;
        _1915 = _1599;
        _1916 = _1599;
        _1917 = 0.0;
        _1918 = 0.0;
        _1919 = 0.0;
    }
    float _1929 = (cbModelParam._m0[1u].x * (_1917 - _1611)) + _1611;
    float _1930 = (cbModelParam._m0[1u].x * (_1918 - _1612)) + _1612;
    float _1931 = (cbModelParam._m0[1u].x * (_1919 - _1613)) + _1613;
    float _1952 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1930, cbSceneParam._m0[89u].y, _1929 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1930, cbSceneParam._m0[90u].y, _1929 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1930, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1929));
    float _1973 = _1236 * 0.5;
    float _1974 = _1237 * 0.5;
    float _1975 = _1238 * 0.5;
    float _1976 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1907, _1910, _1913, _1916));
    float _1979 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1906, _1909, _1912, _1915));
    float _1982 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1905, _1908, _1911, _1914));
    float _2016;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1989 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1598, _1602, _1605, _1608));
        float _1993 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1600, _1603, _1606, _1609));
        float _1997 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1601, _1604, _1607, _1610));
        float _2004 = dot(vec4(cbModelParam._m0[39u]), vec4(_1973, _1974, _1975, 1.0));
        _2016 = dot(vec3(isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0)), isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0)), isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2004) ? 0.0 : (isnan(0.0) ? _2004 : max(0.0, _2004))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2016 = 1.0;
    }
    float _2027;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2018 = dot(vec4(cbModelParam._m0[40u]), vec4(_1973, _1974, _1975, 1.0));
        _2027 = dot(vec3(isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)), isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2018) ? 0.0 : (isnan(0.0) ? _2018 : max(0.0, _2018))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2027 = 1.0;
    }
    float _2031 = (_2027 * cbModelParam._m0[1u].x) + (_2016 * (1.0 - cbModelParam._m0[1u].x));
    float _2041 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1081);
    float _2042 = isnan(_2041) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2041 : min(cbModelParam._m0[25u].z, _2041));
    float _2122;
    float _2124;
    float _2126;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2089 = fma(_1297, cbModelParam._m0[13u].z, fma(_1293, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1289)) + cbModelParam._m0[13u].w;
        float _2093 = fma(_1297, cbModelParam._m0[14u].z, fma(_1293, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1289)) + cbModelParam._m0[14u].w;
        float _2097 = fma(_1297, cbModelParam._m0[15u].z, fma(_1293, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1289)) + cbModelParam._m0[15u].w;
        float _2100 = fma(_1238, cbModelParam._m0[13u].z, fma(_1237, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1236));
        float _2103 = fma(_1238, cbModelParam._m0[14u].z, fma(_1237, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1236));
        float _2106 = fma(_1238, cbModelParam._m0[15u].z, fma(_1237, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1236));
        float _2134;
        if (_2100 > 0.0)
        {
            _2134 = abs((1.0 - _2089) / _2100);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2089 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2134 = frontier_phi_14_12_ladder;
        }
        float _2334;
        if (_2103 > 0.0)
        {
            _2334 = abs((1.0 - _2093) / _2103);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2093 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2334 = frontier_phi_23_19_ladder;
        }
        float _2577;
        if (_2106 > 0.0)
        {
            _2577 = abs((1.0 - _2097) / _2106);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2097 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2577 = frontier_phi_35_30_ladder;
        }
        float _2579 = isnan(_2334) ? _2134 : (isnan(_2134) ? _2334 : min(_2134, _2334));
        float _2580 = isnan(_2577) ? _2579 : (isnan(_2579) ? _2577 : min(_2579, _2577));
        float _2584 = (_2580 * _2100) + _2089;
        float _2585 = (_2580 * _2103) + _2093;
        float _2586 = (_2580 * _2106) + _2097;
        float _2587 = _2580 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2587;
        float _2591 = _2587 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 > _2591) || ((_2585 < _2589) || ((_2584 < _2589) || (_2584 > _2591))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2586, cbModelParam._m0[9u].z, fma(_2585, cbModelParam._m0[9u].y, _2584 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2586, cbModelParam._m0[10u].z, fma(_2585, cbModelParam._m0[10u].y, _2584 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2586, cbModelParam._m0[11u].z, fma(_2585, cbModelParam._m0[11u].y, _2584 * cbModelParam._m0[11u].x))), _2042);
            frontier_phi_13_35_ladder = _2710.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2710.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2710.x * cbModelParam._m0[1u].y;
        }
        _2122 = frontier_phi_13_35_ladder_2;
        _2124 = frontier_phi_13_35_ladder_1;
        _2126 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2110 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1236, _1237, _1238), _2042);
        _2122 = _2110.x * cbModelParam._m0[1u].y;
        _2124 = _2110.y * cbModelParam._m0[1u].y;
        _2126 = _2110.z * cbModelParam._m0[1u].y;
    }
    float _2130 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1081);
    float _2131 = isnan(_2130) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2130 : min(cbModelParam._m0[25u].w, _2130));
    float _2220;
    float _2222;
    float _2224;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2184 = fma(_1297, cbModelParam._m0[21u].z, fma(_1293, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1289)) + cbModelParam._m0[21u].w;
        float _2188 = fma(_1297, cbModelParam._m0[22u].z, fma(_1293, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1289)) + cbModelParam._m0[22u].w;
        float _2192 = fma(_1297, cbModelParam._m0[23u].z, fma(_1293, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1289)) + cbModelParam._m0[23u].w;
        float _2195 = fma(_1238, cbModelParam._m0[21u].z, fma(_1237, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1236));
        float _2198 = fma(_1238, cbModelParam._m0[22u].z, fma(_1237, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1236));
        float _2201 = fma(_1238, cbModelParam._m0[23u].z, fma(_1237, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1236));
        float _2339;
        if (_2195 > 0.0)
        {
            _2339 = abs((1.0 - _2184) / _2195);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2195 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2184 + 1.0) / _2195);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2339 = frontier_phi_25_21_ladder;
        }
        float _2604;
        if (_2198 > 0.0)
        {
            _2604 = abs((1.0 - _2188) / _2198);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2198 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2188 + 1.0) / _2198);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2604 = frontier_phi_37_32_ladder;
        }
        float _2809;
        if (_2201 > 0.0)
        {
            _2809 = abs((1.0 - _2192) / _2201);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2201 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2192 + 1.0) / _2201);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2809 = frontier_phi_46_43_ladder;
        }
        float _2811 = isnan(_2604) ? _2339 : (isnan(_2339) ? _2604 : min(_2339, _2604));
        float _2812 = isnan(_2809) ? _2811 : (isnan(_2811) ? _2809 : min(_2811, _2809));
        float _2816 = (_2812 * _2195) + _2184;
        float _2817 = (_2812 * _2198) + _2188;
        float _2818 = (_2812 * _2201) + _2192;
        float _2819 = _2812 * 9.9999997473787516355514526367188e-05;
        float _2820 = (-1.0) - _2819;
        float _2822 = _2819 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2818 > _2822) || ((_2818 < _2820) || ((_2817 > _2822) || ((_2817 < _2820) || ((_2816 < _2820) || (_2816 > _2822))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2818, cbModelParam._m0[17u].z, fma(_2817, cbModelParam._m0[17u].y, _2816 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2818, cbModelParam._m0[18u].z, fma(_2817, cbModelParam._m0[18u].y, _2816 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2818, cbModelParam._m0[19u].z, fma(_2817, cbModelParam._m0[19u].y, _2816 * cbModelParam._m0[19u].x))), _2131);
            frontier_phi_22_46_ladder = _3017.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3017.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3017.x * cbModelParam._m0[1u].z;
        }
        _2220 = frontier_phi_22_46_ladder_2;
        _2222 = frontier_phi_22_46_ladder_1;
        _2224 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2204 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1236, _1237, _1238), _2131);
        _2220 = _2204.x * cbModelParam._m0[1u].z;
        _2222 = _2204.y * cbModelParam._m0[1u].z;
        _2224 = _2204.z * cbModelParam._m0[1u].z;
    }
    float _2236 = ((((1.0 - _1257) * ((_1244 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1257 * _1244)) * _1228;
    float _2237 = _2236 * ((cbModelParam._m0[1u].w * (_2220 - _2122)) + _2122);
    float _2238 = _2236 * ((cbModelParam._m0[1u].w * (_2222 - _2124)) + _2124);
    float _2239 = _2236 * ((cbModelParam._m0[1u].w * (_2224 - _2126)) + _2126);
    float _2242 = fma(_2239, cbSceneParam._m0[89u].z, fma(_2238, cbSceneParam._m0[89u].y, _2237 * cbSceneParam._m0[89u].x));
    float _2245 = fma(_2239, cbSceneParam._m0[90u].z, fma(_2238, cbSceneParam._m0[90u].y, _2237 * cbSceneParam._m0[90u].x));
    float _2248 = fma(_2239, cbSceneParam._m0[91u].z, fma(_2238, cbSceneParam._m0[91u].y, _2237 * cbSceneParam._m0[91u].x));
    uvec4 _2258 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2260 = _2258.x * 14u;
    uint _2261 = _2260 + 13u;
    float _2268 = _1228 + (-1.0);
    float _2273 = (cbLight._m0[_2261].x * _2268) + 1.0;
    float _2274 = (cbLight._m0[_2261].y * _2268) + 1.0;
    float _2275 = (cbLight._m0[_2261].z * _2268) + 1.0;
    float _2276 = (cbLight._m0[_2261].w * _2268) + 1.0;
    uint _2277 = _2260 + 5u;
    float _2283 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
    uint _2287 = _2260 + 4u;
    float _2293 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2297 = _2260 | 1u;
    float _2308 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_1078, _1079, _1080));
    float _2311 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_1078, _1079, _1080));
    float _4498 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _4509 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2316 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * 0.3183098733425140380859375;
    float _2318 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * 0.3183098733425140380859375;
    float _2325 = ((cbLight._m0[_2277].x * _2283) * _2318) + ((cbLight._m0[_2287].x * _2293) * _2316);
    float _2326 = ((_2283 * cbLight._m0[_2277].y) * _2318) + ((_2293 * cbLight._m0[_2287].y) * _2316);
    float _2327 = ((_2283 * cbLight._m0[_2277].z) * _2318) + ((_2293 * cbLight._m0[_2287].z) * _2316);
    uvec4 _2331 = floatBitsToUint(cbLight._m0[_2260 + 12u]);
    bool _2333 = _2331.x == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2333)
    {
        _2344 = _2325;
        _2346 = _2326;
        _2348 = _2327;
    }
    else
    {
        uint _2352 = _2260 + 6u;
        float _2368 = (dot(vec3(cbLight._m0[_2260 + 2u].xyz), vec3(_1078, _1079, _1080)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4520 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2371 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2344 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2325;
        _2346 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2326;
        _2348 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2327;
    }
    bool _2351 = _2331.y == 0u;
    float _2389;
    float _2391;
    float _2393;
    if (_2351)
    {
        _2389 = _2344;
        _2391 = _2346;
        _2393 = _2348;
    }
    else
    {
        uint _2548 = _2260 + 7u;
        float _2564 = (dot(vec3(cbLight._m0[_2260 + 3u].xyz), vec3(_1078, _1079, _1080)) * 0.5) + 0.5;
        float _2565 = _2564 * _2564;
        float _4536 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2566 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2567 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2389 = (((cbLight._m0[_2548].x * 0.3183098733425140380859375) * _2566) * _2567) + _2344;
        _2391 = (((cbLight._m0[_2548].y * 0.3183098733425140380859375) * _2566) * _2567) + _2346;
        _2393 = (((cbLight._m0[_2548].z * 0.3183098733425140380859375) * _2566) * _2567) + _2348;
    }
    uint _2396 = _2260 + 8u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _1081) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2260].x + _1157;
    float _2412 = cbLight._m0[_2260].y + _1158;
    float _2413 = cbLight._m0[_2260].z + _1159;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_2260].xyz));
    float _4552 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _4563 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _2425 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2426 = dot(vec3(_1078, _1079, _1080), vec3(_2418, _2419, _2420));
    float _4574 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2418, _2419, _2420));
    float _4585 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2410 * _2410;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2449 = (exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2450 = 1.0 - _2410;
    float _2461 = (0.5 / (((_2425 * ((_2424 * _2450) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2450) + _2410) * _2424))) * _2424;
    float _4596 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    uint _2474 = _2260 + 9u;
    float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _1081) * 0.949999988079071044921875);
    float _2486 = _2485 * _2485;
    float _2487 = cbLight._m0[_2297].x + _1157;
    float _2488 = cbLight._m0[_2297].y + _1158;
    float _2489 = cbLight._m0[_2297].z + _1159;
    float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
    float _2494 = _2493 * _2487;
    float _2495 = _2493 * _2488;
    float _2496 = _2493 * _2489;
    float _2497 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_2297].xyz));
    float _4607 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2501 = dot(vec3(_1078, _1079, _1080), vec3(_2494, _2495, _2496));
    float _4618 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2505 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2494, _2495, _2496));
    float _4629 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2509 = _2486 * _2486;
    float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
    float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2523 = 1.0 - _2486;
    float _2533 = (0.5 / (((_2425 * ((_2500 * _2523) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2523) + _2486) * _2500))) * _2500;
    float _4640 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2535 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
    float _2545 = (((_2522 * cbLight._m0[_2474].x) * _2535) * _2283) + (((_2449 * cbLight._m0[_2396].x) * _2463) * _2293);
    float _2546 = (((_2522 * cbLight._m0[_2474].y) * _2535) * _2283) + (((_2449 * cbLight._m0[_2396].y) * _2463) * _2293);
    float _2547 = (((_2522 * cbLight._m0[_2474].z) * _2535) * _2283) + (((_2449 * cbLight._m0[_2396].z) * _2463) * _2293);
    float _2609;
    float _2611;
    float _2613;
    if (_2333)
    {
        _2609 = _2545;
        _2611 = _2546;
        _2613 = _2547;
    }
    else
    {
        uint _2615 = _2260 + 2u;
        uint _2619 = _2260 + 10u;
        float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _1081) * 0.949999988079071044921875);
        float _2634 = _2633 * _2633;
        float _2635 = cbLight._m0[_2615].x + _1157;
        float _2636 = cbLight._m0[_2615].y + _1158;
        float _2637 = cbLight._m0[_2615].z + _1159;
        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
        float _2642 = _2641 * _2635;
        float _2643 = _2641 * _2636;
        float _2644 = _2641 * _2637;
        float _2645 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_2615].xyz));
        float _4651 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2649 = dot(vec3(_1078, _1079, _1080), vec3(_2642, _2643, _2644));
        float _4662 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2653 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2642, _2643, _2644));
        float _4673 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2657 = _2634 * _2634;
        float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
        float _2670 = (exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2671 = 1.0 - _2634;
        float _2681 = (0.5 / (((_2425 * ((_2648 * _2671) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2671) + _2634) * _2648))) * _2648;
        float _4684 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2609 = (((_2670 * cbLight._m0[_2619].x) * _2683) * _2684) + _2545;
        _2611 = (((_2670 * cbLight._m0[_2619].y) * _2683) * _2684) + _2546;
        _2613 = (((_2670 * cbLight._m0[_2619].z) * _2683) * _2684) + _2547;
    }
    float _2719;
    float _2721;
    float _2723;
    if (_2351)
    {
        _2719 = _2609;
        _2721 = _2611;
        _2723 = _2613;
    }
    else
    {
        uint _2730 = _2260 + 3u;
        uint _2734 = _2260 + 11u;
        float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2730].w)) * _1081) * 0.949999988079071044921875);
        float _2749 = _2748 * _2748;
        float _2750 = cbLight._m0[_2730].x + _1157;
        float _2751 = cbLight._m0[_2730].y + _1158;
        float _2752 = cbLight._m0[_2730].z + _1159;
        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
        float _2757 = _2756 * _2750;
        float _2758 = _2756 * _2751;
        float _2759 = _2756 * _2752;
        float _2760 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_2730].xyz));
        float _4700 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2764 = dot(vec3(_1078, _1079, _1080), vec3(_2757, _2758, _2759));
        float _4711 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2768 = dot(vec3(cbLight._m0[_2730].xyz), vec3(_2757, _2758, _2759));
        float _4722 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2772 = _2749 * _2749;
        float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
        float _2785 = (exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2786 = 1.0 - _2749;
        float _2796 = (0.5 / (((_2425 * ((_2763 * _2786) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2786) + _2749) * _2763))) * _2763;
        float _4733 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2798 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
        float _2799 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2719 = (((_2785 * cbLight._m0[_2734].x) * _2798) * _2799) + _2609;
        _2721 = (((_2785 * cbLight._m0[_2734].y) * _2798) * _2799) + _2611;
        _2723 = (((_2785 * cbLight._m0[_2734].z) * _2798) * _2799) + _2613;
    }
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_2258.y == 0u)
    {
        float _2874 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2875 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2874;
        float _2876 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2874;
        float _2877 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2874;
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.x;
        uint _2901 = uint((float(_2889.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1166) / _2890))) + floor(float(uint(cbSceneParam._m0[85u].x * _1165) / _2890)));
        float _2911 = (log2(_2877 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2912 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        uint _2915 = uint(isnan(14.0) ? _2912 : (isnan(_2912) ? 14.0 : min(_2912, 14.0)));
        uvec4 _2920 = texelFetch(g_lightClusterGridBuffer, int(((_2915 << 2u) + (_2901 << 6u)) >> 2u));
        uint _2921 = _2920.x;
        uint _2922 = _2889.z;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((((1u << ((_2922 >> 4u) & 15u)) + 4294967295u) & _2921) == 0u) || ((_2922 & 240u) == 0u))
        {
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
        }
        else
        {
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            uint _3172 = 0u;
            uint _3181;
            bool _3182;
            for (;;)
            {
                _3181 = texelFetch(g_lightClassification, int((((_2915 << 5u) + (_2901 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                _3182 = _3181 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3182)
                {
                    frontier_phi_61_pred = _3166;
                    frontier_phi_61_pred_1 = _3171;
                    frontier_phi_61_pred_2 = _3170;
                    frontier_phi_61_pred_3 = _3169;
                    frontier_phi_61_pred_4 = _3168;
                    frontier_phi_61_pred_5 = _3167;
                }
                else
                {
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    uint _3296;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3181;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    for (;;)
                    {
                        uint _3300 = uint(findLSB(_3296)) + (_3172 << 5u);
                        uint _3297 = (_3296 + 4294967295u) & _3296;
                        uint _3302 = _3300 * 48u;
                        vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 3u)).x));
                        uint _3322 = (_3300 * 48u) + 4u;
                        vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3322)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 3u)).x));
                        uint _3341 = (_3300 * 48u) + 8u;
                        vec3 _3352 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x));
                        float _3356 = _3316.x - _2875;
                        float _3357 = _3316.y - _2876;
                        float _3358 = _3316.z - _2877;
                        float _3359 = dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358));
                        float _3362 = inversesqrt(_3359);
                        float _3363 = _3362 * _3356;
                        float _3364 = _3362 * _3357;
                        float _3365 = _3362 * _3358;
                        float _3366 = dot(vec3(_1184, _1187, _1190), vec3(_3363, _3364, _3365));
                        float _3371 = 1.0 - (_3359 * _3316.w);
                        float _4759 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3372 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3373 = sqrt(_3359) * _3335.w;
                        float _3376 = 1.39999997615814208984375 / (_3373 + 1.39999997615814208984375);
                        float _3377 = _3376 * _3376;
                        float _3380 = ((1.0 - _3377) * _3366) + _3377;
                        float _3383 = _3373 * _3373;
                        float _3387 = ((isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0))) * _3372) / ((_3383 * 0.699999988079071044921875) + 1.0);
                        float _3391 = (-0.0) - _2875;
                        float _3392 = (-0.0) - _2876;
                        float _3393 = (-0.0) - _2877;
                        float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                        float _3398 = _3397 * _3391;
                        float _3399 = _3397 * _3392;
                        float _3400 = _3397 * _3393;
                        float _3408 = exp2(log2(1.0 / ((_3383 * 3.5) + 5.0)) * 0.25);
                        float _3409 = 1.0 - _1244;
                        float _3416 = sqrt(1.0 - ((1.0 - (_3409 * _3409)) * (1.0 - (_3408 * _3408))));
                        float _3417 = _3416 * _3416;
                        float _3418 = _3417 * _3417;
                        float _3419 = _3398 + _3363;
                        float _3420 = _3399 + _3364;
                        float _3421 = _3400 + _3365;
                        float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                        float _3429 = dot(vec3(_1184, _1187, _1190), vec3(_3398, _3399, _3400));
                        float _4775 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3433 = dot(vec3(_1184, _1187, _1190), vec3(_3425 * _3419, _3425 * _3420, _3425 * _3421));
                        float _4786 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3436 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3440 = ((_3436 * _3436) * (_3418 + (-1.0))) + 1.0;
                        float _3441 = _3376 * _3417;
                        float _3442 = _3441 * _3441;
                        float _3445 = ((1.0 - _3442) * _3366) + _3442;
                        float _4797 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3446 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3447 = 1.0 - _3417;
                        float _3457 = (0.5 / (((_3446 * ((_3432 * _3447) + _3417)) + 9.9999999392252902907785028219223e-09) + (((_3446 * _3447) + _3417) * _3432))) * _3446;
                        float _4808 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3468 = (((_3418 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3440 * _3440) * ((_3383 * 2.1991131305694580078125) + 3.141590118408203125))) * _3372;
                        _3225 = (_3387 * _3335.x) + _3293;
                        _3226 = (_3387 * _3335.y) + _3294;
                        _3227 = (_3387 * _3335.z) + _3295;
                        _3222 = (_3468 * _3352.x) + _3290;
                        _3223 = (_3468 * _3352.y) + _3291;
                        _3224 = (_3468 * _3352.z) + _3292;
                        if (_3297 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3297;
                        }
                    }
                    frontier_phi_61_pred = _3222;
                    frontier_phi_61_pred_1 = _3227;
                    frontier_phi_61_pred_2 = _3226;
                    frontier_phi_61_pred_3 = _3225;
                    frontier_phi_61_pred_4 = _3224;
                    frontier_phi_61_pred_5 = _3223;
                }
                _3023 = frontier_phi_61_pred;
                _3033 = frontier_phi_61_pred_1;
                _3031 = frontier_phi_61_pred_2;
                _3029 = frontier_phi_61_pred_3;
                _3027 = frontier_phi_61_pred_4;
                _3025 = frontier_phi_61_pred_5;
                uint _3173 = _3172 + 1u;
                if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3166 = _3023;
                    _3167 = _3025;
                    _3168 = _3027;
                    _3169 = _3029;
                    _3170 = _3031;
                    _3171 = _3033;
                    _3172 = _3173;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
        }
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.z;
        uint _3039 = (_3037 >> 8u) & 15u;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        if (((4294967295u << _3039) & _2921) == 0u)
        {
            _3134 = _3022;
            _3136 = _3024;
            _3138 = _3026;
            _3140 = _3028;
            _3142 = _3030;
            _3144 = _3032;
        }
        else
        {
            float _3159 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
            float _3160 = _3159 * _2875;
            float _3161 = _3159 * _2876;
            float _3162 = _3159 * _2877;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3039 < ((_3037 >> 12u) & 15u))
            {
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3273 = _3022;
                float _3274 = _3024;
                float _3275 = _3026;
                float _3276 = _3028;
                float _3277 = _3030;
                float _3278 = _3032;
                uint _3279 = _3039;
                uint _3288;
                bool _3289;
                for (;;)
                {
                    _3288 = texelFetch(g_lightClassification, int((((_2915 << 5u) + (_2901 << 9u)) + (_3279 << 2u)) >> 2u)).x;
                    _3289 = _3288 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3289)
                    {
                        frontier_phi_67_pred = _3276;
                        frontier_phi_67_pred_1 = _3277;
                        frontier_phi_67_pred_2 = _3278;
                        frontier_phi_67_pred_3 = _3275;
                        frontier_phi_67_pred_4 = _3274;
                        frontier_phi_67_pred_5 = _3273;
                    }
                    else
                    {
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3486 = _3273;
                        float _3487 = _3274;
                        float _3488 = _3275;
                        float _3489 = _3276;
                        float _3490 = _3277;
                        float _3491 = _3278;
                        uint _3492 = _3288;
                        uint _3493;
                        vec4 _3518;
                        float _3519;
                        vec4 _3534;
                        vec3 _3546;
                        vec4 _3561;
                        vec4 _3576;
                        float _3622;
                        bool _3623;
                        for (;;)
                        {
                            uint _3503 = ((_3279 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3492));
                            _3493 = (_3492 + 4294967295u) & _3492;
                            uint _3505 = _3503 * 40u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            _3519 = _3518.w;
                            uint _3521 = (_3503 * 40u) + 4u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3503 * 40u) + 8u;
                            _3546 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x));
                            uint _3548 = (_3503 * 40u) + 16u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3503 * 40u) + 20u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3503 * 40u) + 24u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3597 = (_3503 * 40u) + 28u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            _3622 = fma(_2877, _3610.z, fma(_2876, _3610.y, _3610.x * _2875)) + _3610.w;
                            _3623 = !((fma(_2877, _3591.z, fma(_2876, _3591.y, _3591.x * _2875)) + _3591.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3623)
                            {
                                float _3650 = _3518.x - _2875;
                                float _3651 = _3518.y - _2876;
                                float _3652 = _3518.z - _2877;
                                float _3653 = dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652));
                                float _3656 = inversesqrt(_3653);
                                float _3657 = _3656 * _3650;
                                float _3658 = _3656 * _3651;
                                float _3659 = _3656 * _3652;
                                float _3663 = 1.0 - (_3653 / (_3519 * _3519));
                                float _4819 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3668 = sqrt(_3653) * _3534.w;
                                float _3670 = 1.39999997615814208984375 / (_3668 + 1.39999997615814208984375);
                                float _3671 = _3670 * _3670;
                                float _3674 = ((1.0 - _3671) * dot(vec3(_3657, _3658, _3659), vec3(_1184, _1187, _1190))) + _3671;
                                float _3677 = _3668 * _3668;
                                float _3681 = (fma(_2877, _3561.z, fma(_2876, _3561.y, _3561.x * _2875)) + _3561.w) / _3622;
                                float _3682 = (fma(_2877, _3576.z, fma(_2876, _3576.y, _3576.x * _2875)) + _3576.w) / _3622;
                                float _3686 = 1.0 - dot(vec2(_3681, _3682), vec2(_3681, _3682));
                                float _4835 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3688 = _3687 * (((isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0))) * _3664) / ((_3677 * 0.699999988079071044921875) + 1.0));
                                float _3700 = exp2(log2(1.0 / ((_3677 * 3.5) + 5.0)) * 0.25);
                                float _3701 = 1.0 - _1244;
                                float _3708 = sqrt(1.0 - ((1.0 - (_3701 * _3701)) * (1.0 - (_3700 * _3700))));
                                float _3709 = _3708 * _3708;
                                float _3710 = _3709 * _3709;
                                float _3711 = _3657 - _3160;
                                float _3712 = _3658 - _3161;
                                float _3713 = _3659 - _3162;
                                float _3717 = inversesqrt(dot(vec3(_3711, _3712, _3713), vec3(_3711, _3712, _3713)));
                                float _3721 = dot(vec3(_1184, _1187, _1190), vec3((-0.0) - _3160, (-0.0) - _3161, (-0.0) - _3162));
                                float _4846 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3725 = dot(vec3(_1184, _1187, _1190), vec3(_3717 * _3711, _3717 * _3712, _3717 * _3713));
                                float _4857 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3728 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3732 = ((_3728 * _3728) * (_3710 + (-1.0))) + 1.0;
                                float _3733 = _3670 * _3709;
                                float _3734 = _3733 * _3733;
                                float _3740 = ((1.0 - _3734) * dot(vec3(_1184, _1187, _1190), vec3(_3657, _3658, _3659))) + _3734;
                                float _4868 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3742 = 1.0 - _3709;
                                float _3752 = (0.5 / (((_3741 * ((_3724 * _3742) + _3709)) + 9.9999999392252902907785028219223e-09) + (((_3741 * _3742) + _3709) * _3724))) * _3741;
                                float _4879 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3762 = (_3687 * _3664) * (((_3710 * 3.1415927410125732421875) * (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) / ((_3732 * _3732) * ((_3677 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3762 * _3546.x;
                                frontier_phi_73_pred_1 = _3762 * _3546.y;
                                frontier_phi_73_pred_2 = _3688 * _3534.z;
                                frontier_phi_73_pred_3 = _3688 * _3534.y;
                                frontier_phi_73_pred_4 = _3688 * _3534.x;
                                frontier_phi_73_pred_5 = _3762 * _3546.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3766 = frontier_phi_73_pred;
                            _3767 = frontier_phi_73_pred_1;
                            _3771 = frontier_phi_73_pred_2;
                            _3770 = frontier_phi_73_pred_3;
                            _3769 = frontier_phi_73_pred_4;
                            _3768 = frontier_phi_73_pred_5;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            if (_3493 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3493;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3476;
                        frontier_phi_67_pred_1 = _3477;
                        frontier_phi_67_pred_2 = _3478;
                        frontier_phi_67_pred_3 = _3475;
                        frontier_phi_67_pred_4 = _3474;
                        frontier_phi_67_pred_5 = _3473;
                    }
                    _3141 = frontier_phi_67_pred;
                    _3143 = frontier_phi_67_pred_1;
                    _3145 = frontier_phi_67_pred_2;
                    _3139 = frontier_phi_67_pred_3;
                    _3137 = frontier_phi_67_pred_4;
                    _3135 = frontier_phi_67_pred_5;
                    uint _3280 = _3279 + 1u;
                    if (_3280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3273 = _3135;
                        _3274 = _3137;
                        _3275 = _3139;
                        _3276 = _3141;
                        _3277 = _3143;
                        _3278 = _3145;
                        _3279 = _3280;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3143;
                frontier_phi_55_56_ladder_1 = _3145;
                frontier_phi_55_56_ladder_2 = _3141;
                frontier_phi_55_56_ladder_3 = _3139;
                frontier_phi_55_56_ladder_4 = _3137;
                frontier_phi_55_56_ladder_5 = _3135;
            }
            else
            {
                frontier_phi_55_56_ladder = _3030;
                frontier_phi_55_56_ladder_1 = _3032;
                frontier_phi_55_56_ladder_2 = _3028;
                frontier_phi_55_56_ladder_3 = _3026;
                frontier_phi_55_56_ladder_4 = _3024;
                frontier_phi_55_56_ladder_5 = _3022;
            }
            _3134 = frontier_phi_55_56_ladder_5;
            _3136 = frontier_phi_55_56_ladder_4;
            _3138 = frontier_phi_55_56_ladder_3;
            _3140 = frontier_phi_55_56_ladder_2;
            _3142 = frontier_phi_55_56_ladder;
            _3144 = frontier_phi_55_56_ladder_1;
        }
        float _3149 = isnan(1.0) ? _1228 : (isnan(_1228) ? 1.0 : min(_1228, 1.0));
        _2934 = (_3149 * _3140) + _2389;
        _2936 = (_3149 * _3142) + _2391;
        _2938 = (_3149 * _3144) + _2393;
        _2940 = ((_3134 * 0.039999999105930328369140625) * _3149) + _2719;
        _2942 = ((_3136 * 0.039999999105930328369140625) * _3149) + _2721;
        _2944 = ((_3138 * 0.039999999105930328369140625) * _3149) + _2723;
    }
    else
    {
        _2934 = _2389;
        _2936 = _2391;
        _2938 = _2393;
        _2940 = _2719;
        _2942 = _2721;
        _2944 = _2723;
    }
    float _4895 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _4906 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _4917 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    uint _2964 = _287 + 6u;
    float _2972 = _1165 / cbSceneParam._m0[86u].x;
    float _2973 = _1166 / cbSceneParam._m0[86u].y;
    vec4 _2987 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, (log2((isnan(cbSceneParam._m0[77u].w) ? _1099 : (isnan(_1099) ? cbSceneParam._m0[77u].w : min(_1099, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2989 = _2987.x;
    float _2990 = _2987.y;
    float _2991 = _2987.z;
    float _2992 = _2987.w;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    if (_1099 > cbSceneParam._m0[78u].w)
    {
        float _3047 = isnan(_1099) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1099 : min(cbSceneParam._m0[80u].w, _1099));
        float _3048 = _3047 / _1099;
        float _3059 = _3048 * _1150;
        float _3060 = _1151 * _3048;
        float _3061 = (-0.0) - _3060;
        float _3062 = _3048 * _1152;
        float _3064 = (cbSceneParam._m0[77u].w * _3061) / _3047;
        float _3065 = _3064 + cbSceneParam._m0[79u].w;
        float _3066 = cbSceneParam._m0[79u].w - _3060;
        float _3072 = sqrt(((_3059 * _3059) + (_3060 * _3060)) + (_3062 * _3062));
        float _3075 = (1.0 - (cbSceneParam._m0[77u].w / _3047)) * _3072;
        float _3080 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3082 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3235;
        if (abs((_3061 - _3064) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3235 = ((((_3065 > 0.0) ? exp2(_3080 * _3065) : (2.0 - exp2(_3082 * _3065))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3075;
        }
        else
        {
            float _3195 = 1.0 / cbSceneParam._m0[80u].x;
            float _3196 = isnan(_3066) ? _3065 : (isnan(_3065) ? _3066 : max(_3065, _3066));
            float _3197 = isnan(_3066) ? _3065 : (isnan(_3065) ? _3066 : min(_3065, _3066));
            float _3206 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : min(_3196, 0.0));
            float _3207 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : min(_3197, 0.0));
            _3235 = ((abs(_3072 / _3061) * cbSceneParam._m0[80u].y) * ((((_3206 - _3207) * 2.0) - ((exp2(_3080 * (isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0)))) - exp2(_3080 * (isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))))) * _3195)) - ((exp2(_3082 * _3206) - exp2(_3082 * _3207)) * _3195))) + (_3075 * cbSceneParam._m0[80u].z);
        }
        vec4 _3237 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, 1.0), 0.0);
        float _3246 = exp2((_3235 * (-1.44269502162933349609375)) * (1.0 - _3237.w));
        float _3247 = log2(_3246);
        float _3263 = log2(_2992);
        _3084 = (exp2(_3263 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].x)) * _3237.x) / cbSceneParam._m0[78u].x)) + _2989;
        _3086 = (exp2(_3263 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].y)) * _3237.y) / cbSceneParam._m0[78u].y)) + _2990;
        _3088 = (exp2(_3263 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].z)) * _3237.z) / cbSceneParam._m0[78u].z)) + _2991;
        _3090 = _3246 * _2992;
    }
    else
    {
        _3084 = _2989;
        _3086 = _2990;
        _3088 = _2991;
        _3090 = _2992;
    }
    float _3102 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3103 = _3102 == 3.0;
    float _3104 = log2(_3090);
    float _3111 = exp2(_3104 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2934 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1228))) + ((_2940 + ((isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0))) * _2031)) * cbPerFrame._m0[3u].x));
    float _3112 = exp2(_3104 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2936 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1228))) + ((_2942 + ((isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0))) * _2031)) * cbPerFrame._m0[3u].x));
    float _3113 = exp2(_3104 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2938 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1228))) + ((_2944 + ((isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0))) * _2031)) * cbPerFrame._m0[3u].x));
    float _3122 = (_3102 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3122 * (_3103 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3084)));
    SV_Target.y = _3122 * (_3103 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3086)));
    SV_Target.z = _3122 * (_3103 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3088)));
    SV_Target.w = cbInstanceData._m0[_2964].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2964].w;
}


