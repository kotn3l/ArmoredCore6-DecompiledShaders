#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1446;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3749 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3760 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3771 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _455 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _472 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_443 - _455) * cbMtdParam._m0[24u].z) + _455) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3782 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _480 = (_473 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _481 = (_473 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _482 = (_473 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _521 = _519.x;
    float _531 = dot(vec4(_521, _519.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _545 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_521 - _531) * cbMtdParam._m0[24u].z) + _531) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3793 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _553 = (_546 * ((_499.x * cbMtdParam._m0[13u].x) - _480)) + _480;
    float _554 = (_546 * ((_499.y * cbMtdParam._m0[13u].y) - _481)) + _481;
    float _555 = (_546 * ((_499.z * cbMtdParam._m0[13u].z) - _482)) + _482;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _295) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _296) + cbTextureTilingScale._m0[24u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _592 = _590.x;
    float _602 = dot(vec4(_592, _590.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _614 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _403.z) * 2.0) - ((((_592 - _602) * cbMtdParam._m0[24u].z) + _602) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3804 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _625 = (_332.x * cbMtdParam._m0[9u].x) * ((_615 * ((_573.x * cbMtdParam._m0[14u].x) - _553)) + _553);
    float _626 = (_332.y * cbMtdParam._m0[9u].y) * ((_615 * ((_573.y * cbMtdParam._m0[14u].y) - _554)) + _554);
    float _627 = (_332.z * cbMtdParam._m0[9u].z) * ((_615 * ((_573.z * cbMtdParam._m0[14u].z) - _555)) + _555);
    float _631 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _625;
    float _634 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _626;
    float _637 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _627;
    float _645 = (((_625 - _631) * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) + _631) * 4.55000019073486328125;
    float _647 = (((_626 - _634) * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) + _634) * 4.55000019073486328125;
    float _649 = (((_627 - _637) * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) + _637) * 4.55000019073486328125;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _708 = _706.x;
    float _709 = _706.y;
    float _710 = _706.z;
    float _717 = ((_689.x - _708) * _473) + _708;
    float _718 = ((_689.y - _709) * _473) + _709;
    float _719 = ((_689.z - _710) * _473) + _710;
    vec4 _731 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _742 = ((_731.x - _717) * _546) + _717;
    float _743 = ((_731.y - _718) * _546) + _718;
    float _744 = ((_731.z - _719) * _546) + _719;
    vec4 _756 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _295) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _296) + cbTextureTilingScale._m0[23u].w));
    float _769 = ((_756.z - _744) * _615) + _744;
    float _772 = ((((_756.x - _742) * _615) + _742) * 2.0) + (-1.0);
    float _773 = ((((_756.y - _743) * _615) + _743) * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _3815 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _779 = sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))));
    vec4 _793 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _818 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _820 = _818.x;
    float _821 = 1.0 - _820;
    float _834 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_820 - _821) * cbMtdParam._m0[24u].w) + _821) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3826 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _835 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _842 = (_835 * (cbMtdParam._m0[17u].x - _645)) + _645;
    float _843 = (_835 * (cbMtdParam._m0[17u].y - _647)) + _647;
    float _844 = (_835 * (cbMtdParam._m0[17u].z - _649)) + _649;
    float _849 = (((_666.z - _769) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _769;
    float _853 = ((_793.z - _849) * cbMtdParam._m0[19u].w) + _849;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _873 = (_866.x * 2.0) + (-1.0);
    float _874 = (_866.y * 2.0) + (-1.0);
    float _875 = dot(vec2(_873, _874), vec2(_873, _874));
    float _3837 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _883 = (_835 * (_866.z - _853)) + _853;
    float _892 = (_772 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_666.x * 2.0) + (-1.0)))) + (((_793.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _893 = (_773 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_666.y * 2.0) + (-1.0)))) + (((_793.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _905 = (((_873 - _892) + (cbMtdParam._m0[21u].x * _892)) * _835) + _892;
    float _906 = (((_874 - _893) + (cbMtdParam._m0[21u].x * _893)) * _835) + _893;
    float _907 = (_835 * (sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) - _779)) + _779;
    float _911 = cbMtdParam._m0[22u].x + _793.w;
    float _914 = fma(_907, _242 * NORMAL.x, fma(_906, _249 * TANGENT.x, (_235 * _227) * _905));
    float _917 = fma(_907, _242 * NORMAL.y, fma(_906, _249 * TANGENT.y, (_235 * _228) * _905));
    float _920 = fma(_907, _242 * NORMAL.z, fma(_906, _249 * TANGENT.z, (_235 * _229) * _905));
    float _924 = inversesqrt(dot(vec3(_914, _917, _920), vec3(_914, _917, _920)));
    float _925 = _924 * _914;
    float _926 = _924 * _917;
    float _927 = _924 * _920;
    float _3848 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _928 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _3870 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _3881 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _3892 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _946 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _997 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _987);
    float _998 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _987);
    float _999 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _987);
    float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
    float _1004 = _997 * _1003;
    float _1005 = _998 * _1003;
    float _1006 = _999 * _1003;
    float _1012 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1013 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1031 = fma(_927, cbSceneParam._m0[5u].z, fma(_926, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _925));
    float _1034 = fma(_927, cbSceneParam._m0[6u].z, fma(_926, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _925));
    float _1037 = fma(_927, cbSceneParam._m0[7u].z, fma(_926, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _925));
    uint _1051 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1057 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_1051].x;
    float _1058 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_1051].y;
    float _1059 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_1051].z;
    float _3903 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    vec4 _1071 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1012, cbSceneParam._m0[86u].y * _1013));
    float _1075 = ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * TEXCOORD_5.w) * _1071.x;
    float _1076 = dot(vec3(_925, _926, _927), vec3(_1004, _1005, _1006));
    float _1079 = _1076 * 2.0;
    float _1083 = (_1079 * _925) - _1004;
    float _1084 = (_1079 * _926) - _1005;
    float _1085 = (_1079 * _927) - _1006;
    float _1089 = abs(dot(vec3(_1004, _1005, _1006), vec3(_925, _926, _927)));
    float _3936 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1091 = sqrt(_928);
    float _1104 = exp2((_1091 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1091 * 3.0));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1445;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1170 = fma(_1144, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136));
        float _1174 = fma(_1144, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136));
        float _1178 = fma(_1144, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136));
        float _1203 = _1136 + _925;
        float _1204 = _1140 + _926;
        float _1205 = _1144 + _927;
        float _1215 = fma(_1205, cbModelParam._m0[26u].z, fma(_1204, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1203)) - _1170;
        float _1216 = fma(_1205, cbModelParam._m0[27u].z, fma(_1204, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1203)) - _1174;
        float _1217 = fma(_1205, cbModelParam._m0[28u].z, fma(_1204, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1203)) - _1178;
        float _1221 = inversesqrt(dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217)));
        float _1234 = ((_1221 * _1215) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1170 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1221 * _1216) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1174 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1221 * _1217) / cbModelParam._m0[34u].z) + ((((((_1178 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        float _1273 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1239.x + (-0.5));
        float _1275 = _1273 * (_1239.y + (-0.5));
        float _1276 = _1273 * (_1239.z + (-0.5));
        float _1283 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1246.x + (-0.5));
        float _1285 = _1283 * (_1246.y + (-0.5));
        float _1286 = _1283 * (_1246.z + (-0.5));
        float _1293 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1253.x + (-0.5));
        float _1295 = _1293 * (_1253.y + (-0.5));
        float _1296 = _1293 * (_1253.z + (-0.5));
        float _1303 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1260.x + (-0.5));
        float _1305 = _1303 * (_1260.y + (-0.5));
        float _1306 = _1303 * (_1260.z + (-0.5));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = _1274 * 0.5;
        float _1311 = _1284 * 0.5;
        float _1312 = _1294 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1327 = (dot(vec3(_925, _926, _927), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1337 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3984 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1339 + 1.0))) + _1344) * _1307;
        float _1354 = _1275 * 0.5;
        float _1355 = _1285 * 0.5;
        float _1356 = _1295 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_925, _926, _927), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4017 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1381 + 1.0))) + _1386) * _1308;
        float _1396 = _1276 * 0.5;
        float _1397 = _1286 * 0.5;
        float _1398 = _1296 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_925, _926, _927), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4050 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1423 + 1.0))) + _1428) * _1309;
        _1445 = _1276;
        _1447 = _1275;
        _1448 = _1274;
        _1449 = _1286;
        _1450 = _1285;
        _1451 = _1284;
        _1452 = _1296;
        _1453 = _1295;
        _1454 = _1294;
        _1455 = _1309;
        _1456 = _1308;
        _1457 = _1307;
        _1458 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1459 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1460 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
    }
    else
    {
        _1445 = _1446;
        _1447 = _1446;
        _1448 = _1446;
        _1449 = _1446;
        _1450 = _1446;
        _1451 = _1446;
        _1452 = _1446;
        _1453 = _1446;
        _1454 = _1446;
        _1455 = _1446;
        _1456 = _1446;
        _1457 = _1446;
        _1458 = 0.0;
        _1459 = 0.0;
        _1460 = 0.0;
    }
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1483 = fma(_1144, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136));
        float _1487 = fma(_1144, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136));
        float _1491 = fma(_1144, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136));
        float _1514 = _1136 + _925;
        float _1515 = _1140 + _926;
        float _1516 = _1144 + _927;
        float _1526 = fma(_1516, cbModelParam._m0[30u].z, fma(_1515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1514)) - _1483;
        float _1527 = fma(_1516, cbModelParam._m0[31u].z, fma(_1515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1514)) - _1487;
        float _1528 = fma(_1516, cbModelParam._m0[32u].z, fma(_1515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1514)) - _1491;
        float _1532 = inversesqrt(dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528)));
        float _1545 = ((_1532 * _1526) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1483 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1546 = ((_1532 * _1527) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1487 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1547 = ((_1532 * _1528) / cbModelParam._m0[35u].z) + ((((((_1491 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        float _1582 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1549.x + (-0.5));
        float _1584 = _1582 * (_1549.y + (-0.5));
        float _1585 = _1582 * (_1549.z + (-0.5));
        float _1592 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1556.x + (-0.5));
        float _1594 = _1592 * (_1556.y + (-0.5));
        float _1595 = _1592 * (_1556.z + (-0.5));
        float _1602 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1563.x + (-0.5));
        float _1604 = _1602 * (_1563.y + (-0.5));
        float _1605 = _1602 * (_1563.z + (-0.5));
        float _1612 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1570.x + (-0.5));
        float _1614 = _1612 * (_1570.y + (-0.5));
        float _1615 = _1612 * (_1570.z + (-0.5));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = _1583 * 0.5;
        float _1620 = _1593 * 0.5;
        float _1621 = _1603 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_925, _926, _927), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4113 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1646 + 1.0))) + _1651) * _1616;
        float _1661 = _1584 * 0.5;
        float _1662 = _1594 * 0.5;
        float _1663 = _1604 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_925, _926, _927), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4146 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1688 + 1.0))) + _1693) * _1617;
        float _1703 = _1585 * 0.5;
        float _1704 = _1595 * 0.5;
        float _1705 = _1605 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_925, _926, _927), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4179 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1730 + 1.0))) + _1735) * _1618;
        _1752 = _1585;
        _1753 = _1584;
        _1754 = _1583;
        _1755 = _1595;
        _1756 = _1594;
        _1757 = _1593;
        _1758 = _1605;
        _1759 = _1604;
        _1760 = _1603;
        _1761 = _1618;
        _1762 = _1617;
        _1763 = _1616;
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
    }
    else
    {
        _1752 = _1446;
        _1753 = _1446;
        _1754 = _1446;
        _1755 = _1446;
        _1756 = _1446;
        _1757 = _1446;
        _1758 = _1446;
        _1759 = _1446;
        _1760 = _1446;
        _1761 = _1446;
        _1762 = _1446;
        _1763 = _1446;
        _1764 = 0.0;
        _1765 = 0.0;
        _1766 = 0.0;
    }
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1458)) + _1458;
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1459)) + _1459;
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1460)) + _1460;
    float _1799 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1802 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1805 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1776));
    float _1820 = _1083 * 0.5;
    float _1821 = _1084 * 0.5;
    float _1822 = _1085 * 0.5;
    float _1823 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1826 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1829 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1863;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1836 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1445, _1449, _1452, _1455));
        float _1840 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1447, _1450, _1453, _1456));
        float _1844 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1448, _1451, _1454, _1457));
        float _1851 = dot(vec4(cbModelParam._m0[39u]), vec4(_1820, _1821, _1822, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1874;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1865 = dot(vec4(cbModelParam._m0[40u]), vec4(_1820, _1821, _1822, 1.0));
        _1874 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1874 = 1.0;
    }
    float _1878 = (_1874 * cbModelParam._m0[1u].x) + (_1863 * (1.0 - cbModelParam._m0[1u].x));
    float _1888 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _928);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1888 : min(cbModelParam._m0[25u].z, _1888));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1936 = fma(_1144, cbModelParam._m0[13u].z, fma(_1140, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136)) + cbModelParam._m0[13u].w;
        float _1940 = fma(_1144, cbModelParam._m0[14u].z, fma(_1140, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136)) + cbModelParam._m0[14u].w;
        float _1944 = fma(_1144, cbModelParam._m0[15u].z, fma(_1140, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136)) + cbModelParam._m0[15u].w;
        float _1947 = fma(_1085, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083));
        float _1950 = fma(_1085, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083));
        float _1953 = fma(_1085, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083));
        float _1981;
        if (_1947 > 0.0)
        {
            _1981 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1981 = frontier_phi_14_12_ladder;
        }
        float _2182;
        if (_1950 > 0.0)
        {
            _2182 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2182 = frontier_phi_23_19_ladder;
        }
        float _2425;
        if (_1953 > 0.0)
        {
            _2425 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2425 = frontier_phi_35_30_ladder;
        }
        float _2427 = isnan(_2182) ? _1981 : (isnan(_1981) ? _2182 : min(_1981, _2182));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1947) + _1936;
        float _2433 = (_2428 * _1950) + _1940;
        float _2434 = (_2428 * _1953) + _1944;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2435;
        float _2439 = _2435 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 > _2439) || ((_2433 < _2437) || ((_2432 < _2437) || (_2432 > _2439))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2434, cbModelParam._m0[9u].z, fma(_2433, cbModelParam._m0[9u].y, _2432 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2434, cbModelParam._m0[10u].z, fma(_2433, cbModelParam._m0[10u].y, _2432 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2434, cbModelParam._m0[11u].z, fma(_2433, cbModelParam._m0[11u].y, _2432 * cbModelParam._m0[11u].x))), _1889);
            frontier_phi_13_35_ladder = _2558.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2558.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2558.x * cbModelParam._m0[1u].y;
        }
        _1969 = frontier_phi_13_35_ladder_2;
        _1971 = frontier_phi_13_35_ladder_1;
        _1973 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1083, _1084, _1085), _1889);
        _1969 = _1957.x * cbModelParam._m0[1u].y;
        _1971 = _1957.y * cbModelParam._m0[1u].y;
        _1973 = _1957.z * cbModelParam._m0[1u].y;
    }
    float _1977 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _928);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1977 : min(cbModelParam._m0[25u].w, _1977));
    float _2068;
    float _2070;
    float _2072;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2032 = fma(_1144, cbModelParam._m0[21u].z, fma(_1140, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136)) + cbModelParam._m0[21u].w;
        float _2036 = fma(_1144, cbModelParam._m0[22u].z, fma(_1140, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136)) + cbModelParam._m0[22u].w;
        float _2040 = fma(_1144, cbModelParam._m0[23u].z, fma(_1140, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136)) + cbModelParam._m0[23u].w;
        float _2043 = fma(_1085, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083));
        float _2046 = fma(_1085, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083));
        float _2049 = fma(_1085, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083));
        float _2187;
        if (_2043 > 0.0)
        {
            _2187 = abs((1.0 - _2032) / _2043);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2032 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2187 = frontier_phi_25_21_ladder;
        }
        float _2452;
        if (_2046 > 0.0)
        {
            _2452 = abs((1.0 - _2036) / _2046);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2036 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2452 = frontier_phi_37_32_ladder;
        }
        float _2657;
        if (_2049 > 0.0)
        {
            _2657 = abs((1.0 - _2040) / _2049);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2040 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2657 = frontier_phi_46_43_ladder;
        }
        float _2659 = isnan(_2452) ? _2187 : (isnan(_2187) ? _2452 : min(_2187, _2452));
        float _2660 = isnan(_2657) ? _2659 : (isnan(_2659) ? _2657 : min(_2659, _2657));
        float _2664 = (_2660 * _2043) + _2032;
        float _2665 = (_2660 * _2046) + _2036;
        float _2666 = (_2660 * _2049) + _2040;
        float _2667 = _2660 * 9.9999997473787516355514526367188e-05;
        float _2668 = (-1.0) - _2667;
        float _2670 = _2667 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2666 > _2670) || ((_2666 < _2668) || ((_2665 > _2670) || ((_2665 < _2668) || ((_2664 < _2668) || (_2664 > _2670))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2666, cbModelParam._m0[17u].z, fma(_2665, cbModelParam._m0[17u].y, _2664 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2666, cbModelParam._m0[18u].z, fma(_2665, cbModelParam._m0[18u].y, _2664 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2666, cbModelParam._m0[19u].z, fma(_2665, cbModelParam._m0[19u].y, _2664 * cbModelParam._m0[19u].x))), _1978);
            frontier_phi_22_46_ladder = _2865.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2865.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2865.x * cbModelParam._m0[1u].z;
        }
        _2068 = frontier_phi_22_46_ladder_2;
        _2070 = frontier_phi_22_46_ladder_1;
        _2072 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2052 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1083, _1084, _1085), _1978);
        _2068 = _2052.x * cbModelParam._m0[1u].z;
        _2070 = _2052.y * cbModelParam._m0[1u].z;
        _2072 = _2052.z * cbModelParam._m0[1u].z;
    }
    float _2084 = ((((1.0 - _1104) * ((_1091 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1104 * _1091)) * _1075;
    float _2085 = _2084 * ((cbModelParam._m0[1u].w * (_2068 - _1969)) + _1969);
    float _2086 = _2084 * ((cbModelParam._m0[1u].w * (_2070 - _1971)) + _1971);
    float _2087 = _2084 * ((cbModelParam._m0[1u].w * (_2072 - _1973)) + _1973);
    float _2090 = fma(_2087, cbSceneParam._m0[89u].z, fma(_2086, cbSceneParam._m0[89u].y, _2085 * cbSceneParam._m0[89u].x));
    float _2093 = fma(_2087, cbSceneParam._m0[90u].z, fma(_2086, cbSceneParam._m0[90u].y, _2085 * cbSceneParam._m0[90u].x));
    float _2096 = fma(_2087, cbSceneParam._m0[91u].z, fma(_2086, cbSceneParam._m0[91u].y, _2085 * cbSceneParam._m0[91u].x));
    uvec4 _2106 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2108 = _2106.x * 14u;
    uint _2109 = _2108 + 13u;
    float _2116 = _1075 + (-1.0);
    float _2121 = (cbLight._m0[_2109].x * _2116) + 1.0;
    float _2122 = (cbLight._m0[_2109].y * _2116) + 1.0;
    float _2123 = (cbLight._m0[_2109].z * _2116) + 1.0;
    float _2124 = (cbLight._m0[_2109].w * _2116) + 1.0;
    uint _2125 = _2108 + 5u;
    float _2131 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2135 = _2108 + 4u;
    float _2141 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2145 = _2108 | 1u;
    float _2156 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_925, _926, _927));
    float _2159 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_925, _926, _927));
    float _4315 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _4326 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2164 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _2166 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.3183098733425140380859375;
    float _2173 = ((cbLight._m0[_2125].x * _2131) * _2166) + ((cbLight._m0[_2135].x * _2141) * _2164);
    float _2174 = ((_2131 * cbLight._m0[_2125].y) * _2166) + ((_2141 * cbLight._m0[_2135].y) * _2164);
    float _2175 = ((_2131 * cbLight._m0[_2125].z) * _2166) + ((_2141 * cbLight._m0[_2135].z) * _2164);
    uvec4 _2179 = floatBitsToUint(cbLight._m0[_2108 + 12u]);
    bool _2181 = _2179.x == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2181)
    {
        _2192 = _2173;
        _2194 = _2174;
        _2196 = _2175;
    }
    else
    {
        uint _2200 = _2108 + 6u;
        float _2216 = (dot(vec3(cbLight._m0[_2108 + 2u].xyz), vec3(_925, _926, _927)) * 0.5) + 0.5;
        float _2217 = _2216 * _2216;
        float _4337 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2219 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2192 = (((cbLight._m0[_2200].x * 0.3183098733425140380859375) * _2218) * _2219) + _2173;
        _2194 = (((cbLight._m0[_2200].y * 0.3183098733425140380859375) * _2218) * _2219) + _2174;
        _2196 = (((cbLight._m0[_2200].z * 0.3183098733425140380859375) * _2218) * _2219) + _2175;
    }
    bool _2199 = _2179.y == 0u;
    float _2237;
    float _2239;
    float _2241;
    if (_2199)
    {
        _2237 = _2192;
        _2239 = _2194;
        _2241 = _2196;
    }
    else
    {
        uint _2396 = _2108 + 7u;
        float _2412 = (dot(vec3(cbLight._m0[_2108 + 3u].xyz), vec3(_925, _926, _927)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4353 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2415 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2237 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2192;
        _2239 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2194;
        _2241 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2196;
    }
    uint _2244 = _2108 + 8u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _928) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_2108].x + _1004;
    float _2260 = cbLight._m0[_2108].y + _1005;
    float _2261 = cbLight._m0[_2108].z + _1006;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2108].xyz));
    float _4369 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _4380 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2273 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2274 = dot(vec3(_925, _926, _927), vec3(_2266, _2267, _2268));
    float _4391 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2266, _2267, _2268));
    float _4402 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2258 * _2258;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2297 = (exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2298 = 1.0 - _2258;
    float _2309 = (0.5 / (((_2273 * ((_2272 * _2298) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2298) + _2258) * _2272))) * _2272;
    float _4413 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    uint _2322 = _2108 + 9u;
    float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _928) * 0.949999988079071044921875);
    float _2334 = _2333 * _2333;
    float _2335 = cbLight._m0[_2145].x + _1004;
    float _2336 = cbLight._m0[_2145].y + _1005;
    float _2337 = cbLight._m0[_2145].z + _1006;
    float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
    float _2342 = _2341 * _2335;
    float _2343 = _2341 * _2336;
    float _2344 = _2341 * _2337;
    float _2345 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2145].xyz));
    float _4424 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2349 = dot(vec3(_925, _926, _927), vec3(_2342, _2343, _2344));
    float _4435 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2342, _2343, _2344));
    float _4446 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2334 * _2334;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2370 = (exp2(log2(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2371 = 1.0 - _2334;
    float _2381 = (0.5 / (((_2273 * ((_2348 * _2371) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2371) + _2334) * _2348))) * _2348;
    float _4457 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    float _2393 = (((_2370 * cbLight._m0[_2322].x) * _2383) * _2131) + (((_2297 * cbLight._m0[_2244].x) * _2311) * _2141);
    float _2394 = (((_2370 * cbLight._m0[_2322].y) * _2383) * _2131) + (((_2297 * cbLight._m0[_2244].y) * _2311) * _2141);
    float _2395 = (((_2370 * cbLight._m0[_2322].z) * _2383) * _2131) + (((_2297 * cbLight._m0[_2244].z) * _2311) * _2141);
    float _2457;
    float _2459;
    float _2461;
    if (_2181)
    {
        _2457 = _2393;
        _2459 = _2394;
        _2461 = _2395;
    }
    else
    {
        uint _2463 = _2108 + 2u;
        uint _2467 = _2108 + 10u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _928) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _1004;
        float _2484 = cbLight._m0[_2463].y + _1005;
        float _2485 = cbLight._m0[_2463].z + _1006;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2463].xyz));
        float _4468 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2497 = dot(vec3(_925, _926, _927), vec3(_2490, _2491, _2492));
        float _4479 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4490 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2518 = (exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2519 = 1.0 - _2482;
        float _2529 = (0.5 / (((_2273 * ((_2496 * _2519) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2519) + _2482) * _2496))) * _2496;
        float _4501 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2457 = (((_2518 * cbLight._m0[_2467].x) * _2531) * _2532) + _2393;
        _2459 = (((_2518 * cbLight._m0[_2467].y) * _2531) * _2532) + _2394;
        _2461 = (((_2518 * cbLight._m0[_2467].z) * _2531) * _2532) + _2395;
    }
    float _2567;
    float _2569;
    float _2571;
    if (_2199)
    {
        _2567 = _2457;
        _2569 = _2459;
        _2571 = _2461;
    }
    else
    {
        uint _2578 = _2108 + 3u;
        uint _2582 = _2108 + 11u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _928) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _1004;
        float _2599 = cbLight._m0[_2578].y + _1005;
        float _2600 = cbLight._m0[_2578].z + _1006;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2578].xyz));
        float _4517 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2612 = dot(vec3(_925, _926, _927), vec3(_2605, _2606, _2607));
        float _4528 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4539 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2633 = (exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2634 = 1.0 - _2597;
        float _2644 = (0.5 / (((_2273 * ((_2611 * _2634) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2634) + _2597) * _2611))) * _2611;
        float _4550 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2646 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2647 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2567 = (((_2633 * cbLight._m0[_2582].x) * _2646) * _2647) + _2457;
        _2569 = (((_2633 * cbLight._m0[_2582].y) * _2646) * _2647) + _2459;
        _2571 = (((_2633 * cbLight._m0[_2582].z) * _2646) * _2647) + _2461;
    }
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    if (_2106.y == 0u)
    {
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2722;
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2722;
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2722;
        uvec4 _2737 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2738 = _2737.x;
        uint _2749 = uint((float(_2737.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1013) / _2738))) + floor(float(uint(cbSceneParam._m0[85u].x * _1012) / _2738)));
        float _2759 = (log2(_2725 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2760 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        uint _2763 = uint(isnan(14.0) ? _2760 : (isnan(_2760) ? 14.0 : min(_2760, 14.0)));
        uvec4 _2768 = texelFetch(g_lightClusterGridBuffer, int(((_2763 << 2u) + (_2749 << 6u)) >> 2u));
        uint _2769 = _2768.x;
        uint _2770 = _2737.z;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        if (((((1u << ((_2770 >> 4u) & 15u)) + 4294967295u) & _2769) == 0u) || ((_2770 & 240u) == 0u))
        {
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
        }
        else
        {
            float _2871;
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            uint _3021 = 0u;
            uint _3030;
            bool _3031;
            for (;;)
            {
                _3030 = texelFetch(g_lightClassification, int((((_2763 << 5u) + (_2749 << 9u)) + (_3021 << 2u)) >> 2u)).x;
                _3031 = _3030 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3031)
                {
                    frontier_phi_61_pred = _3015;
                    frontier_phi_61_pred_1 = _3020;
                    frontier_phi_61_pred_2 = _3019;
                    frontier_phi_61_pred_3 = _3018;
                    frontier_phi_61_pred_4 = _3017;
                    frontier_phi_61_pred_5 = _3016;
                }
                else
                {
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    uint _3145;
                    _3139 = _3015;
                    _3140 = _3016;
                    _3141 = _3017;
                    _3142 = _3018;
                    _3143 = _3019;
                    _3144 = _3020;
                    _3145 = _3030;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    for (;;)
                    {
                        uint _3149 = uint(findLSB(_3145)) + (_3021 << 5u);
                        uint _3146 = (_3145 + 4294967295u) & _3145;
                        uint _3151 = _3149 * 48u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 3u)).x));
                        uint _3171 = (_3149 * 48u) + 4u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 3u)).x));
                        uint _3190 = (_3149 * 48u) + 8u;
                        vec3 _3201 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x));
                        float _3205 = _3165.x - _2723;
                        float _3206 = _3165.y - _2724;
                        float _3207 = _3165.z - _2725;
                        float _3208 = dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207));
                        float _3211 = inversesqrt(_3208);
                        float _3212 = _3211 * _3205;
                        float _3213 = _3211 * _3206;
                        float _3214 = _3211 * _3207;
                        float _3215 = dot(vec3(_1031, _1034, _1037), vec3(_3212, _3213, _3214));
                        float _3220 = 1.0 - (_3208 * _3165.w);
                        float _4576 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3222 = sqrt(_3208) * _3184.w;
                        float _3225 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3215) + _3226;
                        float _3232 = _3222 * _3222;
                        float _3236 = ((isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))) * _3221) / ((_3232 * 0.699999988079071044921875) + 1.0);
                        float _3240 = (-0.0) - _2723;
                        float _3241 = (-0.0) - _2724;
                        float _3242 = (-0.0) - _2725;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3257 = exp2(log2(1.0 / ((_3232 * 3.5) + 5.0)) * 0.25);
                        float _3258 = 1.0 - _1091;
                        float _3265 = sqrt(1.0 - ((1.0 - (_3258 * _3258)) * (1.0 - (_3257 * _3257))));
                        float _3266 = _3265 * _3265;
                        float _3267 = _3266 * _3266;
                        float _3268 = _3247 + _3212;
                        float _3269 = _3248 + _3213;
                        float _3270 = _3249 + _3214;
                        float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                        float _3278 = dot(vec3(_1031, _1034, _1037), vec3(_3247, _3248, _3249));
                        float _4592 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3282 = dot(vec3(_1031, _1034, _1037), vec3(_3274 * _3268, _3274 * _3269, _3274 * _3270));
                        float _4603 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3289 = ((_3285 * _3285) * (_3267 + (-1.0))) + 1.0;
                        float _3290 = _3225 * _3266;
                        float _3291 = _3290 * _3290;
                        float _3294 = ((1.0 - _3291) * _3215) + _3291;
                        float _4614 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3296 = 1.0 - _3266;
                        float _3306 = (0.5 / (((_3295 * ((_3281 * _3296) + _3266)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3266) * _3281))) * _3295;
                        float _4625 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3317 = (((_3267 * 3.1415927410125732421875) * (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) / ((_3289 * _3289) * ((_3232 * 2.1991131305694580078125) + 3.141590118408203125))) * _3221;
                        _3074 = (_3236 * _3184.x) + _3142;
                        _3075 = (_3236 * _3184.y) + _3143;
                        _3076 = (_3236 * _3184.z) + _3144;
                        _3071 = (_3317 * _3201.x) + _3139;
                        _3072 = (_3317 * _3201.y) + _3140;
                        _3073 = (_3317 * _3201.z) + _3141;
                        if (_3146 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3139 = _3071;
                            _3140 = _3072;
                            _3141 = _3073;
                            _3142 = _3074;
                            _3143 = _3075;
                            _3144 = _3076;
                            _3145 = _3146;
                        }
                    }
                    frontier_phi_61_pred = _3071;
                    frontier_phi_61_pred_1 = _3076;
                    frontier_phi_61_pred_2 = _3075;
                    frontier_phi_61_pred_3 = _3074;
                    frontier_phi_61_pred_4 = _3073;
                    frontier_phi_61_pred_5 = _3072;
                }
                _2871 = frontier_phi_61_pred;
                _2881 = frontier_phi_61_pred_1;
                _2879 = frontier_phi_61_pred_2;
                _2877 = frontier_phi_61_pred_3;
                _2875 = frontier_phi_61_pred_4;
                _2873 = frontier_phi_61_pred_5;
                uint _3022 = _3021 + 1u;
                if (_3022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3015 = _2871;
                    _3016 = _2873;
                    _3017 = _2875;
                    _3018 = _2877;
                    _3019 = _2879;
                    _3020 = _2881;
                    _3021 = _3022;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
        }
        uvec4 _2884 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2885 = _2884.z;
        uint _2887 = (_2885 >> 8u) & 15u;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        if (((4294967295u << _2887) & _2769) == 0u)
        {
            _2983 = _2870;
            _2985 = _2872;
            _2987 = _2874;
            _2989 = _2876;
            _2991 = _2878;
            _2993 = _2880;
        }
        else
        {
            float _3008 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
            float _3009 = _3008 * _2723;
            float _3010 = _3008 * _2724;
            float _3011 = _3008 * _2725;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2887 < ((_2885 >> 12u) & 15u))
            {
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _3122 = _2870;
                float _3123 = _2872;
                float _3124 = _2874;
                float _3125 = _2876;
                float _3126 = _2878;
                float _3127 = _2880;
                uint _3128 = _2887;
                uint _3137;
                bool _3138;
                for (;;)
                {
                    _3137 = texelFetch(g_lightClassification, int((((_2763 << 5u) + (_2749 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                    _3138 = _3137 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3138)
                    {
                        frontier_phi_67_pred = _3125;
                        frontier_phi_67_pred_1 = _3126;
                        frontier_phi_67_pred_2 = _3127;
                        frontier_phi_67_pred_3 = _3124;
                        frontier_phi_67_pred_4 = _3123;
                        frontier_phi_67_pred_5 = _3122;
                    }
                    else
                    {
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3335 = _3122;
                        float _3336 = _3123;
                        float _3337 = _3124;
                        float _3338 = _3125;
                        float _3339 = _3126;
                        float _3340 = _3127;
                        uint _3341 = _3137;
                        uint _3342;
                        vec4 _3367;
                        float _3368;
                        vec4 _3383;
                        vec3 _3395;
                        vec4 _3410;
                        vec4 _3425;
                        float _3471;
                        bool _3472;
                        for (;;)
                        {
                            uint _3352 = ((_3128 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3341));
                            _3342 = (_3341 + 4294967295u) & _3341;
                            uint _3354 = _3352 * 40u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3368 = _3367.w;
                            uint _3370 = (_3352 * 40u) + 4u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3352 * 40u) + 8u;
                            _3395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x));
                            uint _3397 = (_3352 * 40u) + 16u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3352 * 40u) + 20u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3352 * 40u) + 24u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3446 = (_3352 * 40u) + 28u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3471 = fma(_2725, _3459.z, fma(_2724, _3459.y, _3459.x * _2723)) + _3459.w;
                            _3472 = !((fma(_2725, _3440.z, fma(_2724, _3440.y, _3440.x * _2723)) + _3440.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3472)
                            {
                                float _3499 = _3367.x - _2723;
                                float _3500 = _3367.y - _2724;
                                float _3501 = _3367.z - _2725;
                                float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                                float _3505 = inversesqrt(_3502);
                                float _3506 = _3505 * _3499;
                                float _3507 = _3505 * _3500;
                                float _3508 = _3505 * _3501;
                                float _3512 = 1.0 - (_3502 / (_3368 * _3368));
                                float _4636 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3517 = sqrt(_3502) * _3383.w;
                                float _3519 = 1.39999997615814208984375 / (_3517 + 1.39999997615814208984375);
                                float _3520 = _3519 * _3519;
                                float _3523 = ((1.0 - _3520) * dot(vec3(_3506, _3507, _3508), vec3(_1031, _1034, _1037))) + _3520;
                                float _3526 = _3517 * _3517;
                                float _3530 = (fma(_2725, _3410.z, fma(_2724, _3410.y, _3410.x * _2723)) + _3410.w) / _3471;
                                float _3531 = (fma(_2725, _3425.z, fma(_2724, _3425.y, _3425.x * _2723)) + _3425.w) / _3471;
                                float _3535 = 1.0 - dot(vec2(_3530, _3531), vec2(_3530, _3531));
                                float _4652 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3537 = _3536 * (((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3513) / ((_3526 * 0.699999988079071044921875) + 1.0));
                                float _3549 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                                float _3550 = 1.0 - _1091;
                                float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                                float _3558 = _3557 * _3557;
                                float _3559 = _3558 * _3558;
                                float _3560 = _3506 - _3009;
                                float _3561 = _3507 - _3010;
                                float _3562 = _3508 - _3011;
                                float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                                float _3570 = dot(vec3(_1031, _1034, _1037), vec3((-0.0) - _3009, (-0.0) - _3010, (-0.0) - _3011));
                                float _4663 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3574 = dot(vec3(_1031, _1034, _1037), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                                float _4674 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                                float _3582 = _3519 * _3558;
                                float _3583 = _3582 * _3582;
                                float _3589 = ((1.0 - _3583) * dot(vec3(_1031, _1034, _1037), vec3(_3506, _3507, _3508))) + _3583;
                                float _4685 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3591 = 1.0 - _3558;
                                float _3601 = (0.5 / (((_3590 * ((_3573 * _3591) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3590 * _3591) + _3558) * _3573))) * _3590;
                                float _4696 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3611 = (_3536 * _3513) * (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) / ((_3581 * _3581) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3611 * _3395.x;
                                frontier_phi_73_pred_1 = _3611 * _3395.y;
                                frontier_phi_73_pred_2 = _3537 * _3383.z;
                                frontier_phi_73_pred_3 = _3537 * _3383.y;
                                frontier_phi_73_pred_4 = _3537 * _3383.x;
                                frontier_phi_73_pred_5 = _3611 * _3395.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3615 = frontier_phi_73_pred;
                            _3616 = frontier_phi_73_pred_1;
                            _3620 = frontier_phi_73_pred_2;
                            _3619 = frontier_phi_73_pred_3;
                            _3618 = frontier_phi_73_pred_4;
                            _3617 = frontier_phi_73_pred_5;
                            _3325 = _3618 + _3338;
                            _3326 = _3619 + _3339;
                            _3327 = _3620 + _3340;
                            _3322 = _3615 + _3335;
                            _3323 = _3616 + _3336;
                            _3324 = _3617 + _3337;
                            if (_3342 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3342;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3325;
                        frontier_phi_67_pred_1 = _3326;
                        frontier_phi_67_pred_2 = _3327;
                        frontier_phi_67_pred_3 = _3324;
                        frontier_phi_67_pred_4 = _3323;
                        frontier_phi_67_pred_5 = _3322;
                    }
                    _2990 = frontier_phi_67_pred;
                    _2992 = frontier_phi_67_pred_1;
                    _2994 = frontier_phi_67_pred_2;
                    _2988 = frontier_phi_67_pred_3;
                    _2986 = frontier_phi_67_pred_4;
                    _2984 = frontier_phi_67_pred_5;
                    uint _3129 = _3128 + 1u;
                    if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3122 = _2984;
                        _3123 = _2986;
                        _3124 = _2988;
                        _3125 = _2990;
                        _3126 = _2992;
                        _3127 = _2994;
                        _3128 = _3129;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2992;
                frontier_phi_55_56_ladder_1 = _2994;
                frontier_phi_55_56_ladder_2 = _2990;
                frontier_phi_55_56_ladder_3 = _2988;
                frontier_phi_55_56_ladder_4 = _2986;
                frontier_phi_55_56_ladder_5 = _2984;
            }
            else
            {
                frontier_phi_55_56_ladder = _2878;
                frontier_phi_55_56_ladder_1 = _2880;
                frontier_phi_55_56_ladder_2 = _2876;
                frontier_phi_55_56_ladder_3 = _2874;
                frontier_phi_55_56_ladder_4 = _2872;
                frontier_phi_55_56_ladder_5 = _2870;
            }
            _2983 = frontier_phi_55_56_ladder_5;
            _2985 = frontier_phi_55_56_ladder_4;
            _2987 = frontier_phi_55_56_ladder_3;
            _2989 = frontier_phi_55_56_ladder_2;
            _2991 = frontier_phi_55_56_ladder;
            _2993 = frontier_phi_55_56_ladder_1;
        }
        float _2998 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _2782 = (_2998 * _2989) + _2237;
        _2784 = (_2998 * _2991) + _2239;
        _2786 = (_2998 * _2993) + _2241;
        _2788 = ((_2983 * 0.039999999105930328369140625) * _2998) + _2567;
        _2790 = ((_2985 * 0.039999999105930328369140625) * _2998) + _2569;
        _2792 = ((_2987 * 0.039999999105930328369140625) * _2998) + _2571;
    }
    else
    {
        _2782 = _2237;
        _2784 = _2239;
        _2786 = _2241;
        _2788 = _2567;
        _2790 = _2569;
        _2792 = _2571;
    }
    float _4712 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _4723 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _4734 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    uint _2812 = _276 + 6u;
    float _2820 = _1012 / cbSceneParam._m0[86u].x;
    float _2821 = _1013 / cbSceneParam._m0[86u].y;
    vec4 _2835 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2820, _2821, (log2((isnan(cbSceneParam._m0[77u].w) ? _946 : (isnan(_946) ? cbSceneParam._m0[77u].w : min(_946, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2837 = _2835.x;
    float _2838 = _2835.y;
    float _2839 = _2835.z;
    float _2840 = _2835.w;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    if (_946 > cbSceneParam._m0[78u].w)
    {
        float _2895 = isnan(_946) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _946 : min(cbSceneParam._m0[80u].w, _946));
        float _2896 = _2895 / _946;
        float _2907 = _2896 * _997;
        float _2908 = _998 * _2896;
        float _2909 = (-0.0) - _2908;
        float _2911 = _2896 * _999;
        float _2913 = (cbSceneParam._m0[77u].w * _2909) / _2895;
        float _2914 = _2913 + cbSceneParam._m0[79u].w;
        float _2915 = cbSceneParam._m0[79u].w - _2908;
        float _2921 = sqrt(((_2907 * _2907) + (_2908 * _2908)) + (_2911 * _2911));
        float _2924 = (1.0 - (cbSceneParam._m0[77u].w / _2895)) * _2921;
        float _2929 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2931 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3084;
        if (abs((_2909 - _2913) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3084 = ((((_2914 > 0.0) ? exp2(_2929 * _2914) : (2.0 - exp2(_2931 * _2914))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2924;
        }
        else
        {
            float _3044 = 1.0 / cbSceneParam._m0[80u].x;
            float _3045 = isnan(_2915) ? _2914 : (isnan(_2914) ? _2915 : max(_2914, _2915));
            float _3046 = isnan(_2915) ? _2914 : (isnan(_2914) ? _2915 : min(_2914, _2915));
            float _3055 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : min(_3045, 0.0));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            _3084 = ((abs(_2921 / _2909) * cbSceneParam._m0[80u].y) * ((((_3055 - _3056) * 2.0) - ((exp2(_2929 * (isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0)))) - exp2(_2929 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))))) * _3044)) - ((exp2(_2931 * _3055) - exp2(_2931 * _3056)) * _3044))) + (_2924 * cbSceneParam._m0[80u].z);
        }
        vec4 _3086 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2820, _2821, 1.0), 0.0);
        float _3095 = exp2((_3084 * (-1.44269502162933349609375)) * (1.0 - _3086.w));
        float _3096 = log2(_3095);
        float _3112 = log2(_2840);
        _2933 = (exp2(_3112 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].x)) * _3086.x) / cbSceneParam._m0[78u].x)) + _2837;
        _2935 = (exp2(_3112 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].y)) * _3086.y) / cbSceneParam._m0[78u].y)) + _2838;
        _2937 = (exp2(_3112 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].z)) * _3086.z) / cbSceneParam._m0[78u].z)) + _2839;
        _2939 = _3095 * _2840;
    }
    else
    {
        _2933 = _2837;
        _2935 = _2838;
        _2937 = _2839;
        _2939 = _2840;
    }
    float _2951 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2952 = _2951 == 3.0;
    float _2953 = log2(_2939);
    float _2960 = exp2(_2953 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2782 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1075))) + ((_2788 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1878)) * cbPerFrame._m0[3u].x));
    float _2961 = exp2(_2953 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2784 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1075))) + ((_2790 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1878)) * cbPerFrame._m0[3u].x));
    float _2962 = exp2(_2953 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2786 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1075))) + ((_2792 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1878)) * cbPerFrame._m0[3u].x));
    float _2971 = (_2951 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2971 * (_2952 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2933)));
    SV_Target.y = _2971 * (_2952 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2935)));
    SV_Target.z = _2971 * (_2952 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2937)));
    SV_Target.w = cbInstanceData._m0[_2812].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2812].w;
}


