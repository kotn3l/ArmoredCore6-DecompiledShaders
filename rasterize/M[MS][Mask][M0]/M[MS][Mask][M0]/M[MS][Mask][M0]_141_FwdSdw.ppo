#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1360;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _334.x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[24u].z) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3945 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _413 = (_406 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _414 = (_406 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _415 = (_406 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _464 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _478 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _334.y) * 2.0) - ((((_454 - _464) * cbMtdParam._m0[24u].z) + _464) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3956 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _486 = (_479 * ((_432.x * cbMtdParam._m0[13u].x) - _413)) + _413;
    float _487 = (_479 * ((_432.y * cbMtdParam._m0[13u].y) - _414)) + _414;
    float _488 = (_479 * ((_432.z * cbMtdParam._m0[13u].z) - _415)) + _415;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _266) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _267) + cbTextureTilingScale._m0[24u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _547 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _334.z) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3967 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _555 = (_548 * ((_506.x * cbMtdParam._m0[14u].x) - _486)) + _486;
    float _556 = (_548 * ((_506.y * cbMtdParam._m0[14u].y) - _487)) + _487;
    float _557 = (_548 * ((_506.z * cbMtdParam._m0[14u].z) - _488)) + _488;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _614 = _612.x;
    float _615 = _612.y;
    float _616 = _612.z;
    float _623 = ((_595.x - _614) * _406) + _614;
    float _624 = ((_595.y - _615) * _406) + _615;
    float _625 = ((_595.z - _616) * _406) + _616;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _648 = ((_637.x - _623) * _479) + _623;
    float _649 = ((_637.y - _624) * _479) + _624;
    float _650 = ((_637.z - _625) * _479) + _625;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _266) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _267) + cbTextureTilingScale._m0[23u].w));
    float _675 = ((_662.z - _650) * _548) + _650;
    float _678 = ((((_662.x - _648) * _548) + _648) * 2.0) + (-1.0);
    float _680 = ((((_662.y - _649) * _548) + _649) * 2.0) + (-1.0);
    float _681 = dot(vec2(_678, _680), vec2(_678, _680));
    float _3978 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _686 = sqrt(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))));
    vec4 _700 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _712 = (((_700.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _678;
    float _713 = (((_700.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _680;
    float _716 = fma(_686, _234, fma(_713, _241, _712 * _227));
    float _719 = fma(_686, _235, fma(_713, _242, _712 * _228));
    float _722 = fma(_686, _236, fma(_713, _243, _712 * _229));
    float _726 = inversesqrt(dot(vec3(_716, _719, _722), vec3(_716, _719, _722)));
    vec4 _753 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _755 = _753.x;
    float _756 = 1.0 - _755;
    float _762 = (cbMtdParam._m0[19u].x + dot(vec4(_726 * _716, _726 * _719, _726 * _722, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_755 - _756) * cbMtdParam._m0[24u].w) + _756) * cbMtdParam._m0[21u].z);
    float _3989 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _763 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _770 = (_763 * ((_575.x * cbMtdParam._m0[18u].x) - _555)) + _555;
    float _771 = (_763 * ((_575.y * cbMtdParam._m0[18u].y) - _556)) + _556;
    float _772 = (_763 * ((_575.z * cbMtdParam._m0[18u].z) - _557)) + _557;
    float _776 = (cbMtdParam._m0[19u].w * (_700.z - _675)) + _675;
    vec4 _789 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _796 = (_789.x * 2.0) + (-1.0);
    float _797 = (_789.y * 2.0) + (-1.0);
    float _798 = dot(vec2(_796, _797), vec2(_796, _797));
    float _4000 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _806 = ((_789.z - _776) * _763) + _776;
    float _816 = ((sqrt(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) - _686) * _763) + _686;
    float _819 = (((_796 - _712) * _763) + _712) + (cbMtdParam._m0[21u].x * _712);
    float _820 = (((_797 - _713) * _763) + _713) + (cbMtdParam._m0[21u].x * _713);
    float _824 = cbMtdParam._m0[22u].x + _700.w;
    float _827 = fma(_816, _234, fma(_820, _241, _819 * _227));
    float _830 = fma(_816, _235, fma(_820, _242, _819 * _228));
    float _833 = fma(_816, _236, fma(_820, _243, _819 * _229));
    float _837 = inversesqrt(dot(vec3(_827, _830, _833), vec3(_827, _830, _833)));
    float _838 = _837 * _827;
    float _839 = _837 * _830;
    float _840 = _837 * _833;
    float _4011 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _841 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4033 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4044 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4055 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _859 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _911 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _901);
    float _912 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _901);
    float _913 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _901);
    float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
    float _918 = _911 * _917;
    float _919 = _912 * _917;
    float _920 = _913 * _917;
    float _926 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _927 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _945 = fma(_840, cbSceneParam._m0[5u].z, fma(_839, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _838));
    float _948 = fma(_840, cbSceneParam._m0[6u].z, fma(_839, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _838));
    float _951 = fma(_840, cbSceneParam._m0[7u].z, fma(_839, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _838));
    uint _965 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _971 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_965].x;
    float _972 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_965].y;
    float _973 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * cbInstanceData._m0[_965].z;
    float _4066 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    vec4 _985 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _926, cbSceneParam._m0[86u].y * _927));
    float _989 = ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * TEXCOORD_5.w) * _985.x;
    float _990 = dot(vec3(_838, _839, _840), vec3(_918, _919, _920));
    float _993 = _990 * 2.0;
    float _997 = (_993 * _838) - _918;
    float _998 = (_993 * _839) - _919;
    float _999 = (_993 * _840) - _920;
    float _1003 = abs(dot(vec3(_918, _919, _920), vec3(_838, _839, _840)));
    float _4099 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1005 = sqrt(_841);
    float _1018 = exp2((_1005 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1005 * 3.0));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1359;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1084 = fma(_1058, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050));
        float _1088 = fma(_1058, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050));
        float _1092 = fma(_1058, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050));
        float _1117 = _1050 + _838;
        float _1118 = _1054 + _839;
        float _1119 = _1058 + _840;
        float _1129 = fma(_1119, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117)) - _1084;
        float _1130 = fma(_1119, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117)) - _1088;
        float _1131 = fma(_1119, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117)) - _1092;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1084 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1088 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[34u].z) + ((((((_1092 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1187 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1153.x + (-0.5));
        float _1189 = _1187 * (_1153.y + (-0.5));
        float _1190 = _1187 * (_1153.z + (-0.5));
        float _1197 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1160.x + (-0.5));
        float _1199 = _1197 * (_1160.y + (-0.5));
        float _1200 = _1197 * (_1160.z + (-0.5));
        float _1207 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1167.x + (-0.5));
        float _1209 = _1207 * (_1167.y + (-0.5));
        float _1210 = _1207 * (_1167.z + (-0.5));
        float _1217 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1174.x + (-0.5));
        float _1219 = _1217 * (_1174.y + (-0.5));
        float _1220 = _1217 * (_1174.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1241 = (dot(vec3(_838, _839, _840), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1251 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4147 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1253 + 1.0))) + _1258) * _1221;
        float _1268 = _1189 * 0.5;
        float _1269 = _1199 * 0.5;
        float _1270 = _1209 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_838, _839, _840), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4180 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1295 + 1.0))) + _1300) * _1222;
        float _1310 = _1190 * 0.5;
        float _1311 = _1200 * 0.5;
        float _1312 = _1210 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_838, _839, _840), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4213 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1337 + 1.0))) + _1342) * _1223;
        _1359 = _1190;
        _1361 = _1189;
        _1362 = _1188;
        _1363 = _1200;
        _1364 = _1199;
        _1365 = _1198;
        _1366 = _1210;
        _1367 = _1209;
        _1368 = _1208;
        _1369 = _1223;
        _1370 = _1222;
        _1371 = _1221;
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1360;
        _1361 = _1360;
        _1362 = _1360;
        _1363 = _1360;
        _1364 = _1360;
        _1365 = _1360;
        _1366 = _1360;
        _1367 = _1360;
        _1368 = _1360;
        _1369 = _1360;
        _1370 = _1360;
        _1371 = _1360;
        _1372 = 0.0;
        _1373 = 0.0;
        _1374 = 0.0;
    }
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1397 = fma(_1058, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050));
        float _1401 = fma(_1058, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050));
        float _1405 = fma(_1058, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050));
        float _1428 = _1050 + _838;
        float _1429 = _1054 + _839;
        float _1430 = _1058 + _840;
        float _1440 = fma(_1430, cbModelParam._m0[30u].z, fma(_1429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1428)) - _1397;
        float _1441 = fma(_1430, cbModelParam._m0[31u].z, fma(_1429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1428)) - _1401;
        float _1442 = fma(_1430, cbModelParam._m0[32u].z, fma(_1429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1428)) - _1405;
        float _1446 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
        float _1459 = ((_1446 * _1440) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1397 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1446 * _1441) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1401 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1446 * _1442) / cbModelParam._m0[35u].z) + ((((((_1405 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        float _1496 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1463.x + (-0.5));
        float _1498 = _1496 * (_1463.y + (-0.5));
        float _1499 = _1496 * (_1463.z + (-0.5));
        float _1506 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1470.x + (-0.5));
        float _1508 = _1506 * (_1470.y + (-0.5));
        float _1509 = _1506 * (_1470.z + (-0.5));
        float _1516 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1477.x + (-0.5));
        float _1518 = _1516 * (_1477.y + (-0.5));
        float _1519 = _1516 * (_1477.z + (-0.5));
        float _1526 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1484.x + (-0.5));
        float _1528 = _1526 * (_1484.y + (-0.5));
        float _1529 = _1526 * (_1484.z + (-0.5));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = _1497 * 0.5;
        float _1534 = _1507 * 0.5;
        float _1535 = _1517 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_838, _839, _840), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4276 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1560 + 1.0))) + _1565) * _1530;
        float _1575 = _1498 * 0.5;
        float _1576 = _1508 * 0.5;
        float _1577 = _1518 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_838, _839, _840), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4309 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1602 + 1.0))) + _1607) * _1531;
        float _1617 = _1499 * 0.5;
        float _1618 = _1509 * 0.5;
        float _1619 = _1519 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_838, _839, _840), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4342 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1644 + 1.0))) + _1649) * _1532;
        _1666 = _1499;
        _1667 = _1498;
        _1668 = _1497;
        _1669 = _1509;
        _1670 = _1508;
        _1671 = _1507;
        _1672 = _1519;
        _1673 = _1518;
        _1674 = _1517;
        _1675 = _1532;
        _1676 = _1531;
        _1677 = _1530;
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
    }
    else
    {
        _1666 = _1360;
        _1667 = _1360;
        _1668 = _1360;
        _1669 = _1360;
        _1670 = _1360;
        _1671 = _1360;
        _1672 = _1360;
        _1673 = _1360;
        _1674 = _1360;
        _1675 = _1360;
        _1676 = _1360;
        _1677 = _1360;
        _1678 = 0.0;
        _1679 = 0.0;
        _1680 = 0.0;
    }
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1372)) + _1372;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1373)) + _1373;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1374)) + _1374;
    float _1713 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1690));
    float _1734 = _997 * 0.5;
    float _1735 = _998 * 0.5;
    float _1736 = _999 * 0.5;
    float _1737 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1740 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1743 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1777;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1750 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1359, _1363, _1366, _1369));
        float _1754 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1758 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1765 = dot(vec4(cbModelParam._m0[39u]), vec4(_1734, _1735, _1736, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1788;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1779 = dot(vec4(cbModelParam._m0[40u]), vec4(_1734, _1735, _1736, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1792 = (_1788 * cbModelParam._m0[1u].x) + (_1777 * (1.0 - cbModelParam._m0[1u].x));
    float _1802 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _841);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1802 : min(cbModelParam._m0[25u].z, _1802));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1850 = fma(_1058, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050)) + cbModelParam._m0[13u].w;
        float _1854 = fma(_1058, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050)) + cbModelParam._m0[14u].w;
        float _1858 = fma(_1058, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050)) + cbModelParam._m0[15u].w;
        float _1861 = fma(_999, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997));
        float _1864 = fma(_999, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997));
        float _1867 = fma(_999, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997));
        float _1895;
        if (_1861 > 0.0)
        {
            _1895 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1895 = frontier_phi_14_12_ladder;
        }
        float _2064;
        if (_1864 > 0.0)
        {
            _2064 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2064 = frontier_phi_23_19_ladder;
        }
        float _2359;
        if (_1867 > 0.0)
        {
            _2359 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2359 = frontier_phi_35_30_ladder;
        }
        float _2361 = isnan(_2064) ? _1895 : (isnan(_1895) ? _2064 : min(_1895, _2064));
        float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
        float _2366 = (_2362 * _1861) + _1850;
        float _2367 = (_2362 * _1864) + _1854;
        float _2368 = (_2362 * _1867) + _1858;
        float _2369 = _2362 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2369;
        float _2373 = _2369 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 > _2373) || ((_2367 < _2371) || ((_2366 < _2371) || (_2366 > _2373))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2368, cbModelParam._m0[9u].z, fma(_2367, cbModelParam._m0[9u].y, _2366 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2368, cbModelParam._m0[10u].z, fma(_2367, cbModelParam._m0[10u].y, _2366 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2368, cbModelParam._m0[11u].z, fma(_2367, cbModelParam._m0[11u].y, _2366 * cbModelParam._m0[11u].x))), _1803);
            frontier_phi_13_35_ladder = _2513.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2513.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2513.x * cbModelParam._m0[1u].y;
        }
        _1883 = frontier_phi_13_35_ladder_2;
        _1885 = frontier_phi_13_35_ladder_1;
        _1887 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_997, _998, _999), _1803);
        _1883 = _1871.x * cbModelParam._m0[1u].y;
        _1885 = _1871.y * cbModelParam._m0[1u].y;
        _1887 = _1871.z * cbModelParam._m0[1u].y;
    }
    float _1891 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _841);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1891 : min(cbModelParam._m0[25u].w, _1891));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1058, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1058, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1058, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_999, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997));
        float _1959 = fma(_999, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997));
        float _1962 = fma(_999, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997));
        float _2069;
        if (_1956 > 0.0)
        {
            _2069 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2069 = frontier_phi_25_21_ladder;
        }
        float _2386;
        if (_1959 > 0.0)
        {
            _2386 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2386 = frontier_phi_37_32_ladder;
        }
        float _2713;
        if (_1962 > 0.0)
        {
            _2713 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2713 = frontier_phi_47_44_ladder;
        }
        float _2715 = isnan(_2386) ? _2069 : (isnan(_2069) ? _2386 : min(_2069, _2386));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _1956) + _1945;
        float _2721 = (_2716 * _1959) + _1949;
        float _2722 = (_2716 * _1962) + _1953;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _1892);
            frontier_phi_22_47_ladder = _2840.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2840.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2840.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_22_47_ladder_2;
        _1983 = frontier_phi_22_47_ladder_1;
        _1985 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_997, _998, _999), _1892);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1997 = ((((1.0 - _1018) * ((_1005 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1018 * _1005)) * _989;
    float _1998 = _1997 * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _1999 = _1997 * ((cbModelParam._m0[1u].w * (_1983 - _1885)) + _1885);
    float _2000 = _1997 * ((cbModelParam._m0[1u].w * (_1985 - _1887)) + _1887);
    float _2003 = fma(_2000, cbSceneParam._m0[89u].z, fma(_1999, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2006 = fma(_2000, cbSceneParam._m0[90u].z, fma(_1999, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2009 = fma(_2000, cbSceneParam._m0[91u].z, fma(_1999, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    float _2043 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2056 = _2043 / _2055;
    float _2057 = _2047 / _2055;
    float _2058 = _2051 / _2055;
    float _2205;
    float _2206;
    float _2207;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2085 = ((uint(_2058 > cbSceneParam._m0[59u].y) + uint(_2058 > cbSceneParam._m0[59u].x)) + uint(_2058 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2086 = _2085 + 43u;
        uint _2094 = _2085 + 44u;
        uint _2102 = _2085 + 45u;
        uint _2110 = _2085 + 46u;
        float _2121 = fma(_2055, cbSceneParam._m0[_2086].w, fma(_2051, cbSceneParam._m0[_2086].z, fma(_2047, cbSceneParam._m0[_2086].y, _2043 * cbSceneParam._m0[_2086].x)));
        float _2125 = fma(_2055, cbSceneParam._m0[_2094].w, fma(_2051, cbSceneParam._m0[_2094].z, fma(_2047, cbSceneParam._m0[_2094].y, _2043 * cbSceneParam._m0[_2094].x)));
        float _2133 = fma(_2055, cbSceneParam._m0[_2110].w, fma(_2051, cbSceneParam._m0[_2110].z, fma(_2047, cbSceneParam._m0[_2110].y, _2043 * cbSceneParam._m0[_2110].x)));
        float _2138 = cbSceneParam._m0[33u].z * _2133;
        float _2140 = cbSceneParam._m0[33u].w * _2133;
        float _2143 = fma(_2055, cbSceneParam._m0[_2102].w, fma(_2051, cbSceneParam._m0[_2102].z, fma(_2047, cbSceneParam._m0[_2102].y, _2043 * cbSceneParam._m0[_2102].x))) / _2133;
        float _2191 = (cbSceneParam._m0[33u].x - sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058))) * cbSceneParam._m0[33u].y;
        float _4468 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2198 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 + _2121) / _2133, (_2140 + _2125) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 + _2121) / _2133, (_2125 - _2138) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 - _2138) / _2133, (_2125 - _2140) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 - _2140) / _2133, (_2138 + _2125) / _2133), _2143), 0.0)).x), vec4(0.25)));
        _2205 = 1.0 - (_2198 * cbSceneParam._m0[34u].x);
        _2206 = 1.0 - (_2198 * cbSceneParam._m0[34u].y);
        _2207 = 1.0 - (_2198 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2205 = 1.0;
        _2206 = 1.0;
        _2207 = 1.0;
    }
    float _2271;
    float _2273;
    float _2275;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2259 = fma(_2055, cbSceneParam._m0[63u].w, fma(_2051, cbSceneParam._m0[63u].z, fma(_2047, cbSceneParam._m0[63u].y, _2043 * cbSceneParam._m0[63u].x)));
        float _2260 = fma(_2055, cbSceneParam._m0[60u].w, fma(_2051, cbSceneParam._m0[60u].z, fma(_2047, cbSceneParam._m0[60u].y, _2043 * cbSceneParam._m0[60u].x))) / _2259;
        float _2261 = fma(_2055, cbSceneParam._m0[61u].w, fma(_2051, cbSceneParam._m0[61u].z, fma(_2047, cbSceneParam._m0[61u].y, _2043 * cbSceneParam._m0[61u].x))) / _2259;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2260 >= cbSceneParam._m0[64u].x) && (_2261 >= cbSceneParam._m0[64u].y)) && (_2260 <= cbSceneParam._m0[64u].z)) && (_2261 <= cbSceneParam._m0[64u].w))
        {
            float _2399 = fma(_2055, cbSceneParam._m0[62u].w, fma(_2051, cbSceneParam._m0[62u].z, fma(_2047, cbSceneParam._m0[62u].y, _2043 * cbSceneParam._m0[62u].x))) / _2259;
            float _2403 = isnan(cbSceneParam._m0[41u].w) ? _2399 : (isnan(_2399) ? cbSceneParam._m0[41u].w : max(_2399, cbSceneParam._m0[41u].w));
            float _2446 = (cbSceneParam._m0[33u].x - sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058))) * cbSceneParam._m0[33u].y;
            float _4484 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
            float _2453 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2260, cbSceneParam._m0[33u].w + _2261), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2260, _2261 - cbSceneParam._m0[33u].z), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2260 - cbSceneParam._m0[33u].z, _2261 - cbSceneParam._m0[33u].w), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2260 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2261), _2403), 0.0)).x), vec4(0.25)));
            float _2457 = 1.0 - (_2453 * cbSceneParam._m0[34u].x);
            float _2458 = 1.0 - (_2453 * cbSceneParam._m0[34u].y);
            float _2459 = 1.0 - (_2453 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
            frontier_phi_34_33_ladder_1 = isnan(_2458) ? _2206 : (isnan(_2206) ? _2458 : min(_2206, _2458));
            frontier_phi_34_33_ladder_2 = isnan(_2457) ? _2205 : (isnan(_2205) ? _2457 : min(_2205, _2457));
        }
        else
        {
            frontier_phi_34_33_ladder = _2207;
            frontier_phi_34_33_ladder_1 = _2206;
            frontier_phi_34_33_ladder_2 = _2205;
        }
        _2271 = frontier_phi_34_33_ladder_2;
        _2273 = frontier_phi_34_33_ladder_1;
        _2275 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2271 = _2205;
        _2273 = _2206;
        _2275 = _2207;
    }
    uvec4 _2280 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2282 = _2280.x * 14u;
    uint _2283 = _2282 + 13u;
    float _2290 = _989 + (-1.0);
    float _2295 = (cbLight._m0[_2283].x * _2290) + 1.0;
    float _2296 = (cbLight._m0[_2283].y * _2290) + 1.0;
    float _2297 = (cbLight._m0[_2283].z * _2290) + 1.0;
    float _2298 = (cbLight._m0[_2283].w * _2290) + 1.0;
    uint _2299 = _2282 + 5u;
    float _2305 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
    uint _2309 = _2282 + 4u;
    float _2318 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
    uint _2322 = _2282 | 1u;
    float _2333 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_838, _839, _840));
    float _2336 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_838, _839, _840));
    float _4520 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _4531 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2341 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * 0.3183098733425140380859375;
    float _2343 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * 0.3183098733425140380859375;
    float _2350 = ((cbLight._m0[_2299].x * _2305) * _2343) + (((cbLight._m0[_2309].x * _2271) * _2318) * _2341);
    float _2351 = ((_2305 * cbLight._m0[_2299].y) * _2343) + (((cbLight._m0[_2309].y * _2273) * _2318) * _2341);
    float _2352 = ((_2305 * cbLight._m0[_2299].z) * _2343) + (((cbLight._m0[_2309].z * _2275) * _2318) * _2341);
    uvec4 _2356 = floatBitsToUint(cbLight._m0[_2282 + 12u]);
    bool _2358 = _2356.x == 0u;
    float _2460;
    float _2462;
    float _2464;
    if (_2358)
    {
        _2460 = _2350;
        _2462 = _2351;
        _2464 = _2352;
    }
    else
    {
        uint _2468 = _2282 + 6u;
        float _2484 = (dot(vec3(cbLight._m0[_2282 + 2u].xyz), vec3(_838, _839, _840)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4542 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2487 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2460 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2350;
        _2462 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2351;
        _2464 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2352;
    }
    bool _2467 = _2356.y == 0u;
    float _2522;
    float _2524;
    float _2526;
    if (_2467)
    {
        _2522 = _2460;
        _2524 = _2462;
        _2526 = _2464;
    }
    else
    {
        uint _2684 = _2282 + 7u;
        float _2700 = (dot(vec3(cbLight._m0[_2282 + 3u].xyz), vec3(_838, _839, _840)) * 0.5) + 0.5;
        float _2701 = _2700 * _2700;
        float _4558 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2702 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2703 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2522 = (((cbLight._m0[_2684].x * 0.3183098733425140380859375) * _2702) * _2703) + _2460;
        _2524 = (((cbLight._m0[_2684].y * 0.3183098733425140380859375) * _2702) * _2703) + _2462;
        _2526 = (((cbLight._m0[_2684].z * 0.3183098733425140380859375) * _2702) * _2703) + _2464;
    }
    uint _2529 = _2282 + 8u;
    float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _841) * 0.949999988079071044921875);
    float _2543 = _2542 * _2542;
    float _2544 = cbLight._m0[_2282].x + _918;
    float _2545 = cbLight._m0[_2282].y + _919;
    float _2546 = cbLight._m0[_2282].z + _920;
    float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
    float _2551 = _2550 * _2544;
    float _2552 = _2550 * _2545;
    float _2553 = _2550 * _2546;
    float _2554 = dot(vec3(_838, _839, _840), vec3(cbLight._m0[_2282].xyz));
    float _4574 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _4585 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _2558 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2559 = dot(vec3(_838, _839, _840), vec3(_2551, _2552, _2553));
    float _4596 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2563 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2551, _2552, _2553));
    float _4607 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2567 = _2543 * _2543;
    float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
    float _2582 = (exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2583 = 1.0 - _2543;
    float _2594 = (0.5 / (((_2558 * ((_2557 * _2583) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2583) + _2543) * _2557))) * _2557;
    float _4618 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
    uint _2610 = _2282 + 9u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _841) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2322].x + _918;
    float _2624 = cbLight._m0[_2322].y + _919;
    float _2625 = cbLight._m0[_2322].z + _920;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_838, _839, _840), vec3(cbLight._m0[_2322].xyz));
    float _4629 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2637 = dot(vec3(_838, _839, _840), vec3(_2630, _2631, _2632));
    float _4640 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2630, _2631, _2632));
    float _4651 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2622 * _2622;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2658 = (exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2659 = 1.0 - _2622;
    float _2669 = (0.5 / (((_2558 * ((_2636 * _2659) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2659) + _2622) * _2636))) * _2636;
    float _4662 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2671 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    float _2681 = (((_2658 * cbLight._m0[_2610].x) * _2671) * _2305) + ((((cbLight._m0[_2529].x * _2271) * _2582) * _2596) * _2318);
    float _2682 = (((_2658 * cbLight._m0[_2610].y) * _2671) * _2305) + ((((cbLight._m0[_2529].y * _2273) * _2582) * _2596) * _2318);
    float _2683 = (((_2658 * cbLight._m0[_2610].z) * _2671) * _2305) + ((((cbLight._m0[_2529].z * _2275) * _2582) * _2596) * _2318);
    float _2739;
    float _2741;
    float _2743;
    if (_2358)
    {
        _2739 = _2681;
        _2741 = _2682;
        _2743 = _2683;
    }
    else
    {
        uint _2745 = _2282 + 2u;
        uint _2749 = _2282 + 10u;
        float _2763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2745].w)) * _841) * 0.949999988079071044921875);
        float _2764 = _2763 * _2763;
        float _2765 = cbLight._m0[_2745].x + _918;
        float _2766 = cbLight._m0[_2745].y + _919;
        float _2767 = cbLight._m0[_2745].z + _920;
        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
        float _2772 = _2771 * _2765;
        float _2773 = _2771 * _2766;
        float _2774 = _2771 * _2767;
        float _2775 = dot(vec3(_838, _839, _840), vec3(cbLight._m0[_2745].xyz));
        float _4673 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2779 = dot(vec3(_838, _839, _840), vec3(_2772, _2773, _2774));
        float _4684 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2783 = dot(vec3(cbLight._m0[_2745].xyz), vec3(_2772, _2773, _2774));
        float _4695 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2787 = _2764 * _2764;
        float _2791 = ((_2782 * _2782) * (_2787 + (-1.0))) + 1.0;
        float _2800 = (exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2801 = 1.0 - _2764;
        float _2811 = (0.5 / (((_2558 * ((_2778 * _2801) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2801) + _2764) * _2778))) * _2778;
        float _4706 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2813 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2787 / ((_2791 * _2791) * 3.141590118408203125));
        float _2814 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2739 = (((_2800 * cbLight._m0[_2749].x) * _2813) * _2814) + _2681;
        _2741 = (((_2800 * cbLight._m0[_2749].y) * _2813) * _2814) + _2682;
        _2743 = (((_2800 * cbLight._m0[_2749].z) * _2813) * _2814) + _2683;
    }
    float _2845;
    float _2847;
    float _2849;
    if (_2467)
    {
        _2845 = _2739;
        _2847 = _2741;
        _2849 = _2743;
    }
    else
    {
        uint _2856 = _2282 + 3u;
        uint _2860 = _2282 + 11u;
        float _2874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2856].w)) * _841) * 0.949999988079071044921875);
        float _2875 = _2874 * _2874;
        float _2876 = cbLight._m0[_2856].x + _918;
        float _2877 = cbLight._m0[_2856].y + _919;
        float _2878 = cbLight._m0[_2856].z + _920;
        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
        float _2883 = _2882 * _2876;
        float _2884 = _2882 * _2877;
        float _2885 = _2882 * _2878;
        float _2886 = dot(vec3(_838, _839, _840), vec3(cbLight._m0[_2856].xyz));
        float _4722 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2889 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2890 = dot(vec3(_838, _839, _840), vec3(_2883, _2884, _2885));
        float _4733 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2894 = dot(vec3(cbLight._m0[_2856].xyz), vec3(_2883, _2884, _2885));
        float _4744 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2898 = _2875 * _2875;
        float _2902 = ((_2893 * _2893) * (_2898 + (-1.0))) + 1.0;
        float _2911 = (exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2912 = 1.0 - _2875;
        float _2922 = (0.5 / (((_2558 * ((_2889 * _2912) + _2875)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2912) + _2875) * _2889))) * _2889;
        float _4755 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2924 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2898 / ((_2902 * _2902) * 3.141590118408203125));
        float _2925 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2845 = (((_2911 * cbLight._m0[_2860].x) * _2924) * _2925) + _2739;
        _2847 = (((_2911 * cbLight._m0[_2860].y) * _2924) * _2925) + _2741;
        _2849 = (((_2911 * cbLight._m0[_2860].z) * _2924) * _2925) + _2743;
    }
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_2280.y == 0u)
    {
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.x;
        uint _2958 = uint((float(_2946.y) * floor(float(uint(cbSceneParam._m0[85u].y * _927) / _2947))) + floor(float(uint(cbSceneParam._m0[85u].x * _926) / _2947)));
        float _2968 = (log2(_2058 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2969 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        uint _2972 = uint(isnan(14.0) ? _2969 : (isnan(_2969) ? 14.0 : min(_2969, 14.0)));
        uvec4 _2977 = texelFetch(g_lightClusterGridBuffer, int(((_2972 << 2u) + (_2958 << 6u)) >> 2u));
        uint _2978 = _2977.x;
        uint _2979 = _2946.z;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((((1u << ((_2979 >> 4u) & 15u)) + 4294967295u) & _2978) == 0u) || ((_2979 & 240u) == 0u))
        {
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
        }
        else
        {
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            uint _3209 = 0u;
            uint _3218;
            bool _3219;
            for (;;)
            {
                _3218 = texelFetch(g_lightClassification, int((((_2972 << 5u) + (_2958 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                _3219 = _3218 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3219)
                {
                    frontier_phi_66_pred = _3208;
                    frontier_phi_66_pred_1 = _3207;
                    frontier_phi_66_pred_2 = _3206;
                    frontier_phi_66_pred_3 = _3205;
                    frontier_phi_66_pred_4 = _3204;
                    frontier_phi_66_pred_5 = _3203;
                }
                else
                {
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    uint _3333;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3205;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3208;
                    _3333 = _3218;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    for (;;)
                    {
                        uint _3337 = uint(findLSB(_3333)) + (_3209 << 5u);
                        uint _3334 = (_3333 + 4294967295u) & _3333;
                        uint _3339 = _3337 * 48u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 3u)).x));
                        uint _3359 = (_3337 * 48u) + 4u;
                        vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 3u)).x));
                        uint _3378 = (_3337 * 48u) + 8u;
                        vec3 _3389 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x));
                        float _3393 = _3353.x - _2056;
                        float _3394 = _3353.y - _2057;
                        float _3395 = _3353.z - _2058;
                        float _3396 = dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395));
                        float _3399 = inversesqrt(_3396);
                        float _3400 = _3399 * _3393;
                        float _3401 = _3399 * _3394;
                        float _3402 = _3399 * _3395;
                        float _3403 = dot(vec3(_945, _948, _951), vec3(_3400, _3401, _3402));
                        float _3408 = 1.0 - (_3396 * _3353.w);
                        float _4781 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3409 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3410 = sqrt(_3396) * _3372.w;
                        float _3413 = 1.39999997615814208984375 / (_3410 + 1.39999997615814208984375);
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3403) + _3414;
                        float _3420 = _3410 * _3410;
                        float _3424 = ((isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0))) * _3409) / ((_3420 * 0.699999988079071044921875) + 1.0);
                        float _3428 = (-0.0) - _2056;
                        float _3429 = (-0.0) - _2057;
                        float _3430 = (-0.0) - _2058;
                        float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                        float _3435 = _3434 * _3428;
                        float _3436 = _3434 * _3429;
                        float _3437 = _3434 * _3430;
                        float _3444 = exp2(log2(1.0 / ((_3420 * 3.5) + 5.0)) * 0.25);
                        float _3445 = 1.0 - _1005;
                        float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                        float _3453 = _3452 * _3452;
                        float _3454 = _3453 * _3453;
                        float _3455 = _3435 + _3400;
                        float _3456 = _3436 + _3401;
                        float _3457 = _3437 + _3402;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3465 = dot(vec3(_945, _948, _951), vec3(_3435, _3436, _3437));
                        float _4797 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3469 = dot(vec3(_945, _948, _951), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                        float _4808 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                        float _3477 = _3413 * _3453;
                        float _3478 = _3477 * _3477;
                        float _3481 = ((1.0 - _3478) * _3403) + _3478;
                        float _4819 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3483 = 1.0 - _3453;
                        float _3493 = (0.5 / (((_3482 * ((_3468 * _3483) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3482 * _3483) + _3453) * _3468))) * _3482;
                        float _4830 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3504 = (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) / ((_3476 * _3476) * ((_3420 * 2.1991131305694580078125) + 3.141590118408203125))) * _3409;
                        _3262 = (_3424 * _3372.x) + _3330;
                        _3263 = (_3424 * _3372.y) + _3331;
                        _3264 = (_3424 * _3372.z) + _3332;
                        _3259 = (_3504 * _3389.x) + _3327;
                        _3260 = (_3504 * _3389.y) + _3328;
                        _3261 = (_3504 * _3389.z) + _3329;
                        if (_3334 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3261;
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3264;
                            _3333 = _3334;
                        }
                    }
                    frontier_phi_66_pred = _3264;
                    frontier_phi_66_pred_1 = _3263;
                    frontier_phi_66_pred_2 = _3262;
                    frontier_phi_66_pred_3 = _3261;
                    frontier_phi_66_pred_4 = _3260;
                    frontier_phi_66_pred_5 = _3259;
                }
                _3069 = frontier_phi_66_pred;
                _3067 = frontier_phi_66_pred_1;
                _3065 = frontier_phi_66_pred_2;
                _3063 = frontier_phi_66_pred_3;
                _3061 = frontier_phi_66_pred_4;
                _3059 = frontier_phi_66_pred_5;
                uint _3210 = _3209 + 1u;
                if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3203 = _3059;
                    _3204 = _3061;
                    _3205 = _3063;
                    _3206 = _3065;
                    _3207 = _3067;
                    _3208 = _3069;
                    _3209 = _3210;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
        }
        uvec4 _3072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3073 = _3072.z;
        uint _3075 = (_3073 >> 8u) & 15u;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        if (((4294967295u << _3075) & _2978) == 0u)
        {
            _3171 = _3058;
            _3173 = _3060;
            _3175 = _3062;
            _3177 = _3064;
            _3179 = _3066;
            _3181 = _3068;
        }
        else
        {
            float _3196 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
            float _3197 = _3196 * _2056;
            float _3198 = _3196 * _2057;
            float _3199 = _3196 * _2058;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3075 < ((_3073 >> 12u) & 15u))
            {
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3310 = _3058;
                float _3311 = _3060;
                float _3312 = _3062;
                float _3313 = _3064;
                float _3314 = _3066;
                float _3315 = _3068;
                uint _3316 = _3075;
                uint _3325;
                bool _3326;
                for (;;)
                {
                    _3325 = texelFetch(g_lightClassification, int((((_2972 << 5u) + (_2958 << 9u)) + (_3316 << 2u)) >> 2u)).x;
                    _3326 = _3325 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3326)
                    {
                        frontier_phi_72_pred = _3315;
                        frontier_phi_72_pred_1 = _3314;
                        frontier_phi_72_pred_2 = _3313;
                        frontier_phi_72_pred_3 = _3312;
                        frontier_phi_72_pred_4 = _3311;
                        frontier_phi_72_pred_5 = _3310;
                    }
                    else
                    {
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3522 = _3310;
                        float _3523 = _3311;
                        float _3524 = _3312;
                        float _3525 = _3313;
                        float _3526 = _3314;
                        float _3527 = _3315;
                        uint _3528 = _3325;
                        uint _3529;
                        vec4 _3554;
                        float _3555;
                        vec4 _3570;
                        vec3 _3582;
                        vec4 _3597;
                        vec4 _3612;
                        float _3658;
                        bool _3659;
                        for (;;)
                        {
                            uint _3539 = ((_3316 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3528));
                            _3529 = (_3528 + 4294967295u) & _3528;
                            uint _3541 = _3539 * 40u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3555 = _3554.w;
                            uint _3557 = (_3539 * 40u) + 4u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3539 * 40u) + 8u;
                            _3582 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x));
                            uint _3584 = (_3539 * 40u) + 16u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3539 * 40u) + 20u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3614 = (_3539 * 40u) + 24u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3633 = (_3539 * 40u) + 28u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            _3658 = fma(_2058, _3646.z, fma(_2057, _3646.y, _3646.x * _2056)) + _3646.w;
                            _3659 = !((fma(_2058, _3627.z, fma(_2057, _3627.y, _3627.x * _2056)) + _3627.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3659)
                            {
                                float _3686 = _3554.x - _2056;
                                float _3687 = _3554.y - _2057;
                                float _3688 = _3554.z - _2058;
                                float _3689 = dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688));
                                float _3692 = inversesqrt(_3689);
                                float _3693 = _3692 * _3686;
                                float _3694 = _3692 * _3687;
                                float _3695 = _3692 * _3688;
                                float _3699 = 1.0 - (_3689 / (_3555 * _3555));
                                float _4841 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3704 = sqrt(_3689) * _3570.w;
                                float _3706 = 1.39999997615814208984375 / (_3704 + 1.39999997615814208984375);
                                float _3707 = _3706 * _3706;
                                float _3710 = ((1.0 - _3707) * dot(vec3(_3693, _3694, _3695), vec3(_945, _948, _951))) + _3707;
                                float _3713 = _3704 * _3704;
                                float _3717 = (fma(_2058, _3597.z, fma(_2057, _3597.y, _3597.x * _2056)) + _3597.w) / _3658;
                                float _3718 = (fma(_2058, _3612.z, fma(_2057, _3612.y, _3612.x * _2056)) + _3612.w) / _3658;
                                float _3722 = 1.0 - dot(vec2(_3717, _3718), vec2(_3717, _3718));
                                float _4857 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3724 = _3723 * (((isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0))) * _3700) / ((_3713 * 0.699999988079071044921875) + 1.0));
                                float _3736 = exp2(log2(1.0 / ((_3713 * 3.5) + 5.0)) * 0.25);
                                float _3737 = 1.0 - _1005;
                                float _3744 = sqrt(1.0 - ((1.0 - (_3737 * _3737)) * (1.0 - (_3736 * _3736))));
                                float _3745 = _3744 * _3744;
                                float _3746 = _3745 * _3745;
                                float _3747 = _3693 - _3197;
                                float _3748 = _3694 - _3198;
                                float _3749 = _3695 - _3199;
                                float _3753 = inversesqrt(dot(vec3(_3747, _3748, _3749), vec3(_3747, _3748, _3749)));
                                float _3757 = dot(vec3(_945, _948, _951), vec3((-0.0) - _3197, (-0.0) - _3198, (-0.0) - _3199));
                                float _4868 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3760 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3761 = dot(vec3(_945, _948, _951), vec3(_3753 * _3747, _3753 * _3748, _3753 * _3749));
                                float _4879 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3764 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3768 = ((_3764 * _3764) * (_3746 + (-1.0))) + 1.0;
                                float _3769 = _3706 * _3745;
                                float _3770 = _3769 * _3769;
                                float _3776 = ((1.0 - _3770) * dot(vec3(_945, _948, _951), vec3(_3693, _3694, _3695))) + _3770;
                                float _4890 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3778 = 1.0 - _3745;
                                float _3788 = (0.5 / (((_3777 * ((_3760 * _3778) + _3745)) + 9.9999999392252902907785028219223e-09) + (((_3777 * _3778) + _3745) * _3760))) * _3777;
                                float _4901 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3798 = (_3723 * _3700) * (((_3746 * 3.1415927410125732421875) * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) / ((_3768 * _3768) * ((_3713 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3724 * _3570.y;
                                frontier_phi_78_pred_1 = _3724 * _3570.x;
                                frontier_phi_78_pred_2 = _3798 * _3582.z;
                                frontier_phi_78_pred_3 = _3798 * _3582.y;
                                frontier_phi_78_pred_4 = _3798 * _3582.x;
                                frontier_phi_78_pred_5 = _3724 * _3570.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3806 = frontier_phi_78_pred;
                            _3805 = frontier_phi_78_pred_1;
                            _3804 = frontier_phi_78_pred_2;
                            _3803 = frontier_phi_78_pred_3;
                            _3802 = frontier_phi_78_pred_4;
                            _3807 = frontier_phi_78_pred_5;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            if (_3529 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3529;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3514;
                        frontier_phi_72_pred_1 = _3513;
                        frontier_phi_72_pred_2 = _3512;
                        frontier_phi_72_pred_3 = _3511;
                        frontier_phi_72_pred_4 = _3510;
                        frontier_phi_72_pred_5 = _3509;
                    }
                    _3182 = frontier_phi_72_pred;
                    _3180 = frontier_phi_72_pred_1;
                    _3178 = frontier_phi_72_pred_2;
                    _3176 = frontier_phi_72_pred_3;
                    _3174 = frontier_phi_72_pred_4;
                    _3172 = frontier_phi_72_pred_5;
                    uint _3317 = _3316 + 1u;
                    if (_3317 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3310 = _3172;
                        _3311 = _3174;
                        _3312 = _3176;
                        _3313 = _3178;
                        _3314 = _3180;
                        _3315 = _3182;
                        _3316 = _3317;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3182;
                frontier_phi_60_61_ladder_1 = _3180;
                frontier_phi_60_61_ladder_2 = _3176;
                frontier_phi_60_61_ladder_3 = _3174;
                frontier_phi_60_61_ladder_4 = _3172;
                frontier_phi_60_61_ladder_5 = _3178;
            }
            else
            {
                frontier_phi_60_61_ladder = _3068;
                frontier_phi_60_61_ladder_1 = _3066;
                frontier_phi_60_61_ladder_2 = _3062;
                frontier_phi_60_61_ladder_3 = _3060;
                frontier_phi_60_61_ladder_4 = _3058;
                frontier_phi_60_61_ladder_5 = _3064;
            }
            _3171 = frontier_phi_60_61_ladder_4;
            _3173 = frontier_phi_60_61_ladder_3;
            _3175 = frontier_phi_60_61_ladder_2;
            _3177 = frontier_phi_60_61_ladder_5;
            _3179 = frontier_phi_60_61_ladder_1;
            _3181 = frontier_phi_60_61_ladder;
        }
        float _3186 = isnan(1.0) ? _989 : (isnan(_989) ? 1.0 : min(_989, 1.0));
        _2991 = (_3186 * _3177) + _2522;
        _2993 = (_3186 * _3179) + _2524;
        _2995 = (_3186 * _3181) + _2526;
        _2997 = ((_3171 * 0.039999999105930328369140625) * _3186) + _2845;
        _2999 = ((_3173 * 0.039999999105930328369140625) * _3186) + _2847;
        _3001 = ((_3175 * 0.039999999105930328369140625) * _3186) + _2849;
    }
    else
    {
        _2991 = _2522;
        _2993 = _2524;
        _2995 = _2526;
        _2997 = _2845;
        _2999 = _2847;
        _3001 = _2849;
    }
    float _4917 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4928 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4939 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    uint _3021 = _246 + 6u;
    float _3029 = _926 / cbSceneParam._m0[86u].x;
    float _3030 = _927 / cbSceneParam._m0[86u].y;
    vec4 _3044 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, (log2((isnan(cbSceneParam._m0[77u].w) ? _859 : (isnan(_859) ? cbSceneParam._m0[77u].w : min(_859, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3046 = _3044.x;
    float _3047 = _3044.y;
    float _3048 = _3044.z;
    float _3049 = _3044.w;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    if (_859 > cbSceneParam._m0[78u].w)
    {
        float _3083 = isnan(_859) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _859 : min(cbSceneParam._m0[80u].w, _859));
        float _3084 = _3083 / _859;
        float _3095 = _3084 * _911;
        float _3096 = _912 * _3084;
        float _3097 = (-0.0) - _3096;
        float _3099 = _3084 * _913;
        float _3101 = (cbSceneParam._m0[77u].w * _3097) / _3083;
        float _3102 = _3101 + cbSceneParam._m0[79u].w;
        float _3103 = cbSceneParam._m0[79u].w - _3096;
        float _3109 = sqrt(((_3095 * _3095) + (_3096 * _3096)) + (_3099 * _3099));
        float _3112 = (1.0 - (cbSceneParam._m0[77u].w / _3083)) * _3109;
        float _3117 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3119 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3272;
        if (abs((_3097 - _3101) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3272 = ((((_3102 > 0.0) ? exp2(_3117 * _3102) : (2.0 - exp2(_3119 * _3102))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3112;
        }
        else
        {
            float _3232 = 1.0 / cbSceneParam._m0[80u].x;
            float _3233 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : max(_3102, _3103));
            float _3234 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : min(_3102, _3103));
            float _3243 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : min(_3233, 0.0));
            float _3244 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : min(_3234, 0.0));
            _3272 = ((abs(_3109 / _3097) * cbSceneParam._m0[80u].y) * ((((_3243 - _3244) * 2.0) - ((exp2(_3117 * (isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0)))) - exp2(_3117 * (isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))))) * _3232)) - ((exp2(_3119 * _3243) - exp2(_3119 * _3244)) * _3232))) + (_3112 * cbSceneParam._m0[80u].z);
        }
        vec4 _3274 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, 1.0), 0.0);
        float _3283 = exp2((_3272 * (-1.44269502162933349609375)) * (1.0 - _3274.w));
        float _3284 = log2(_3283);
        float _3300 = log2(_3049);
        _3121 = (exp2(_3300 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3284 * cbSceneParam._m0[78u].x)) * _3274.x) / cbSceneParam._m0[78u].x)) + _3046;
        _3123 = (exp2(_3300 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3284 * cbSceneParam._m0[78u].y)) * _3274.y) / cbSceneParam._m0[78u].y)) + _3047;
        _3125 = (exp2(_3300 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3284 * cbSceneParam._m0[78u].z)) * _3274.z) / cbSceneParam._m0[78u].z)) + _3048;
        _3127 = _3283 * _3049;
    }
    else
    {
        _3121 = _3046;
        _3123 = _3047;
        _3125 = _3048;
        _3127 = _3049;
    }
    float _3139 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3140 = _3139 == 3.0;
    float _3141 = log2(_3127);
    float _3148 = exp2(_3141 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2991 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _989))) + ((_2997 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _3149 = exp2(_3141 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2993 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _989))) + ((_2999 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _3150 = exp2(_3141 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2995 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _989))) + ((_3001 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _3159 = (_3139 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3159 * (_3140 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3121)));
    SV_Target.y = _3159 * (_3140 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3123)));
    SV_Target.z = _3159 * (_3140 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3125)));
    SV_Target.w = cbInstanceData._m0[_3021].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3021].w;
}


