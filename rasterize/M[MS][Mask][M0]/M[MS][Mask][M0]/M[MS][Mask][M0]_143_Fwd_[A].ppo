#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1496;
float _3852;
float _3853;
float _3854;
float _3855;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3864 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3875 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3886 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[24u].z) + _432) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3897 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _457 = (_450 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _458 = (_450 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _459 = (_450 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3908 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _297) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _298) + cbTextureTilingScale._m0[24u].w));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _569 = _567.x;
    float _579 = dot(vec4(_569, _567.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _591 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _380.z) * 2.0) - ((((_569 - _579) * cbMtdParam._m0[24u].z) + _579) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3919 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _599 = (_592 * ((_550.x * cbMtdParam._m0[14u].x) - _530)) + _530;
    float _600 = (_592 * ((_550.y * cbMtdParam._m0[14u].y) - _531)) + _531;
    float _601 = (_592 * ((_550.z * cbMtdParam._m0[14u].z) - _532)) + _532;
    float _605 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _599;
    float _608 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _600;
    float _611 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _601;
    float _618 = ((_599 - _605) * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) + _605;
    float _619 = ((_600 - _608) * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) + _608;
    float _620 = ((_601 - _611) * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) + _611;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _297) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _298) + cbTextureTilingScale._m0[14u].w));
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _701 = _699.x;
    float _702 = _699.y;
    float _703 = _699.z;
    float _710 = ((_682.x - _701) * _450) + _701;
    float _711 = ((_682.y - _702) * _450) + _702;
    float _712 = ((_682.z - _703) * _450) + _703;
    vec4 _724 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _735 = ((_724.x - _710) * _523) + _710;
    float _736 = ((_724.y - _711) * _523) + _711;
    float _737 = ((_724.z - _712) * _523) + _712;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _297) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _298) + cbTextureTilingScale._m0[23u].w));
    float _762 = ((_749.z - _737) * _592) + _737;
    float _765 = ((((_749.x - _735) * _592) + _735) * 2.0) + (-1.0);
    float _766 = ((((_749.y - _736) * _592) + _736) * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _3930 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _772 = sqrt(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))));
    vec4 _790 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _802 = (_765 + ((((_657.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_790.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _803 = (_766 + ((((_657.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_790.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _806 = fma(_772, _245, fma(_803, _252, _802 * _238));
    float _809 = fma(_772, _246, fma(_803, _253, _802 * _239));
    float _812 = fma(_772, _247, fma(_803, _254, _802 * _240));
    float _816 = inversesqrt(dot(vec3(_806, _809, _812), vec3(_806, _809, _812)));
    vec4 _843 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _845 = _843.x;
    float _846 = 1.0 - _845;
    float _852 = (cbMtdParam._m0[19u].x + dot(vec4(_816 * _806, _816 * _809, _816 * _812, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_845 - _846) * cbMtdParam._m0[24u].w) + _846) * cbMtdParam._m0[21u].z);
    float _3941 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _853 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _860 = (_853 * ((_638.x * cbMtdParam._m0[18u].x) - _618)) + _618;
    float _861 = (_853 * ((_638.y * cbMtdParam._m0[18u].y) - _619)) + _619;
    float _862 = (_853 * ((_638.z * cbMtdParam._m0[18u].z) - _620)) + _620;
    float _867 = (((_657.z - _762) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _762;
    float _871 = ((_790.z - _867) * cbMtdParam._m0[19u].w) + _867;
    vec4 _884 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _891 = (_884.x * 2.0) + (-1.0);
    float _892 = (_884.y * 2.0) + (-1.0);
    float _893 = dot(vec2(_891, _892), vec2(_891, _892));
    float _3952 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _901 = ((_884.z - _871) * _853) + _871;
    float _911 = ((sqrt(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) - _772) * _853) + _772;
    float _914 = (((_891 - _802) * _853) + _802) + (cbMtdParam._m0[21u].x * _802);
    float _915 = (((_892 - _803) * _853) + _803) + (cbMtdParam._m0[21u].x * _803);
    float _919 = cbMtdParam._m0[22u].x + _790.w;
    float _922 = fma(_911, _245, fma(_915, _252, _914 * _238));
    float _925 = fma(_911, _246, fma(_915, _253, _914 * _239));
    float _928 = fma(_911, _247, fma(_915, _254, _914 * _240));
    float _932 = inversesqrt(dot(vec3(_922, _925, _928), vec3(_922, _925, _928)));
    float _933 = _932 * _922;
    float _934 = _932 * _925;
    float _935 = _932 * _928;
    float _3963 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _936 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _3985 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _3996 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4007 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _954 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1006 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _996);
    float _1007 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _996);
    float _1008 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _996);
    float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
    float _1013 = _1006 * _1012;
    float _1014 = _1007 * _1012;
    float _1015 = _1008 * _1012;
    vec4 _1020 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1022 = _1020.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1176 = sqrt(((_1006 * _1006) + (_1007 * _1007)) + (_1008 * _1008));
        float _1182 = (cbMatDynParam._m0[5u].x * _1176) + cbMatDynParam._m0[5u].y;
        float _4018 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1187 = (cbMatDynParam._m0[5u].z * _1176) + cbMatDynParam._m0[5u].w;
        float _4029 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) - _1183)) + _1183) < ((_1022 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1033 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1034 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1052 = fma(_935, cbSceneParam._m0[5u].z, fma(_934, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _933));
    float _1055 = fma(_935, cbSceneParam._m0[6u].z, fma(_934, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _933));
    float _1058 = fma(_935, cbSceneParam._m0[7u].z, fma(_934, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _933));
    uint _1071 = _278 + 9u;
    uint _1072 = _1071 + uint(cbMatDynParam._m0[0u].w);
    float _1078 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_1072].x;
    float _1079 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_1072].y;
    float _1080 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * cbInstanceData._m0[_1072].z;
    float _4040 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    vec4 _1092 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1033, cbSceneParam._m0[86u].y * _1034));
    float _1096 = ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * TEXCOORD_5.w) * _1092.x;
    float _1097 = dot(vec3(_933, _934, _935), vec3(_1013, _1014, _1015));
    float _1100 = _1097 * 2.0;
    float _1104 = (_1100 * _933) - _1013;
    float _1105 = (_1100 * _934) - _1014;
    float _1106 = (_1100 * _935) - _1015;
    float _1110 = abs(dot(vec3(_1013, _1014, _1015), vec3(_933, _934, _935)));
    float _4073 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1112 = sqrt(_936);
    float _1125 = exp2((_1112 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1112 * 3.0));
    float _1157 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1495;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1220 = fma(_1165, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157));
        float _1224 = fma(_1165, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157));
        float _1228 = fma(_1165, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157));
        float _1253 = _1157 + _933;
        float _1254 = _1161 + _934;
        float _1255 = _1165 + _935;
        float _1265 = fma(_1255, cbModelParam._m0[26u].z, fma(_1254, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1253)) - _1220;
        float _1266 = fma(_1255, cbModelParam._m0[27u].z, fma(_1254, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1253)) - _1224;
        float _1267 = fma(_1255, cbModelParam._m0[28u].z, fma(_1254, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1253)) - _1228;
        float _1271 = inversesqrt(dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267)));
        float _1284 = ((_1271 * _1265) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1220 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1271 * _1266) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1224 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1271 * _1267) / cbModelParam._m0[34u].z) + ((((((_1228 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        float _1323 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1289.x + (-0.5));
        float _1325 = _1323 * (_1289.y + (-0.5));
        float _1326 = _1323 * (_1289.z + (-0.5));
        float _1333 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1296.x + (-0.5));
        float _1335 = _1333 * (_1296.y + (-0.5));
        float _1336 = _1333 * (_1296.z + (-0.5));
        float _1343 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1303.x + (-0.5));
        float _1345 = _1343 * (_1303.y + (-0.5));
        float _1346 = _1343 * (_1303.z + (-0.5));
        float _1353 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1310.x + (-0.5));
        float _1355 = _1353 * (_1310.y + (-0.5));
        float _1356 = _1353 * (_1310.z + (-0.5));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = _1324 * 0.5;
        float _1361 = _1334 * 0.5;
        float _1362 = _1344 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1377 = (dot(vec3(_933, _934, _935), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1387 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4121 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1389 + 1.0))) + _1394) * _1357;
        float _1404 = _1325 * 0.5;
        float _1405 = _1335 * 0.5;
        float _1406 = _1345 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_933, _934, _935), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4154 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1431 + 1.0))) + _1436) * _1358;
        float _1446 = _1326 * 0.5;
        float _1447 = _1336 * 0.5;
        float _1448 = _1346 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_933, _934, _935), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4187 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1473 + 1.0))) + _1478) * _1359;
        _1495 = _1326;
        _1497 = _1325;
        _1498 = _1324;
        _1499 = _1336;
        _1500 = _1335;
        _1501 = _1334;
        _1502 = _1346;
        _1503 = _1345;
        _1504 = _1344;
        _1505 = _1359;
        _1506 = _1358;
        _1507 = _1357;
        _1508 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
    }
    else
    {
        _1495 = _1496;
        _1497 = _1496;
        _1498 = _1496;
        _1499 = _1496;
        _1500 = _1496;
        _1501 = _1496;
        _1502 = _1496;
        _1503 = _1496;
        _1504 = _1496;
        _1505 = _1496;
        _1506 = _1496;
        _1507 = _1496;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1536 = fma(_1165, cbModelParam._m0[30u].z, fma(_1161, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1157));
        float _1540 = fma(_1165, cbModelParam._m0[31u].z, fma(_1161, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1157));
        float _1544 = fma(_1165, cbModelParam._m0[32u].z, fma(_1161, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1157));
        float _1567 = _1157 + _933;
        float _1568 = _1161 + _934;
        float _1569 = _1165 + _935;
        float _1579 = fma(_1569, cbModelParam._m0[30u].z, fma(_1568, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1567)) - _1536;
        float _1580 = fma(_1569, cbModelParam._m0[31u].z, fma(_1568, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1567)) - _1540;
        float _1581 = fma(_1569, cbModelParam._m0[32u].z, fma(_1568, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1567)) - _1544;
        float _1585 = inversesqrt(dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581)));
        float _1598 = ((_1585 * _1579) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1536 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1599 = ((_1585 * _1580) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1540 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1600 = ((_1585 * _1581) / cbModelParam._m0[35u].z) + ((((((_1544 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        float _1635 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1602.x + (-0.5));
        float _1637 = _1635 * (_1602.y + (-0.5));
        float _1638 = _1635 * (_1602.z + (-0.5));
        float _1645 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1609.x + (-0.5));
        float _1647 = _1645 * (_1609.y + (-0.5));
        float _1648 = _1645 * (_1609.z + (-0.5));
        float _1655 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1616.x + (-0.5));
        float _1657 = _1655 * (_1616.y + (-0.5));
        float _1658 = _1655 * (_1616.z + (-0.5));
        float _1665 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1623.x + (-0.5));
        float _1667 = _1665 * (_1623.y + (-0.5));
        float _1668 = _1665 * (_1623.z + (-0.5));
        float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1670 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = _1636 * 0.5;
        float _1673 = _1646 * 0.5;
        float _1674 = _1656 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_933, _934, _935), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1669 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4250 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1699 + 1.0))) + _1704) * _1669;
        float _1714 = _1637 * 0.5;
        float _1715 = _1647 * 0.5;
        float _1716 = _1657 * 0.5;
        float _1717 = dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716));
        float _1722 = (_1717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1717);
        float _1730 = (dot(vec3(_933, _934, _935), vec3(_1722 * _1714, _1722 * _1715, _1722 * _1716)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1739 = sqrt(((_1715 * _1715) + (_1714 * _1714)) + (_1716 * _1716)) / (_1670 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1741 = _1740 * 2.0;
        float _1745 = (1.0 - _1740) / (_1740 + 1.0);
        float _4283 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1755 = ((((1.0 - _1746) * (_1741 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1741 + 1.0))) + _1746) * _1670;
        float _1756 = _1638 * 0.5;
        float _1757 = _1648 * 0.5;
        float _1758 = _1658 * 0.5;
        float _1759 = dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758));
        float _1764 = (_1759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1759);
        float _1772 = (dot(vec3(_933, _934, _935), vec3(_1764 * _1756, _1764 * _1757, _1764 * _1758)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1781 = sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1783 = _1782 * 2.0;
        float _1787 = (1.0 - _1782) / (_1782 + 1.0);
        float _4316 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1797 = ((((1.0 - _1788) * (_1783 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1783 + 1.0))) + _1788) * _1671;
        _1805 = _1638;
        _1806 = _1637;
        _1807 = _1636;
        _1808 = _1648;
        _1809 = _1647;
        _1810 = _1646;
        _1811 = _1658;
        _1812 = _1657;
        _1813 = _1656;
        _1814 = _1671;
        _1815 = _1670;
        _1816 = _1669;
        _1817 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
        _1818 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)));
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)));
    }
    else
    {
        _1805 = _1496;
        _1806 = _1496;
        _1807 = _1496;
        _1808 = _1496;
        _1809 = _1496;
        _1810 = _1496;
        _1811 = _1496;
        _1812 = _1496;
        _1813 = _1496;
        _1814 = _1496;
        _1815 = _1496;
        _1816 = _1496;
        _1817 = 0.0;
        _1818 = 0.0;
        _1819 = 0.0;
    }
    float _1829 = (cbModelParam._m0[1u].x * (_1817 - _1508)) + _1508;
    float _1830 = (cbModelParam._m0[1u].x * (_1818 - _1509)) + _1509;
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1510)) + _1510;
    float _1852 = fma(_1831, cbSceneParam._m0[89u].z, fma(_1830, cbSceneParam._m0[89u].y, _1829 * cbSceneParam._m0[89u].x));
    float _1855 = fma(_1831, cbSceneParam._m0[90u].z, fma(_1830, cbSceneParam._m0[90u].y, _1829 * cbSceneParam._m0[90u].x));
    float _1858 = fma(_1831, cbSceneParam._m0[91u].z, fma(_1830, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1829));
    float _1873 = _1104 * 0.5;
    float _1874 = _1105 * 0.5;
    float _1875 = _1106 * 0.5;
    float _1876 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1879 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1806, _1809, _1812, _1815));
    float _1882 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1805, _1808, _1811, _1814));
    float _1916;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1889 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1495, _1499, _1502, _1505));
        float _1893 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1497, _1500, _1503, _1506));
        float _1897 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1904 = dot(vec4(cbModelParam._m0[39u]), vec4(_1873, _1874, _1875, 1.0));
        _1916 = dot(vec3(isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1916 = 1.0;
    }
    float _1927;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1918 = dot(vec4(cbModelParam._m0[40u]), vec4(_1873, _1874, _1875, 1.0));
        _1927 = dot(vec3(isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1918) ? 0.0 : (isnan(0.0) ? _1918 : max(0.0, _1918))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1927 = 1.0;
    }
    float _1931 = (_1927 * cbModelParam._m0[1u].x) + (_1916 * (1.0 - cbModelParam._m0[1u].x));
    float _1941 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _936);
    float _1942 = isnan(_1941) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1941 : min(cbModelParam._m0[25u].z, _1941));
    float _2022;
    float _2024;
    float _2026;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1989 = fma(_1165, cbModelParam._m0[13u].z, fma(_1161, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1157)) + cbModelParam._m0[13u].w;
        float _1993 = fma(_1165, cbModelParam._m0[14u].z, fma(_1161, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1157)) + cbModelParam._m0[14u].w;
        float _1997 = fma(_1165, cbModelParam._m0[15u].z, fma(_1161, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1157)) + cbModelParam._m0[15u].w;
        float _2000 = fma(_1106, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1104));
        float _2003 = fma(_1106, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1104));
        float _2006 = fma(_1106, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1104));
        float _2034;
        if (_2000 > 0.0)
        {
            _2034 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2034 = frontier_phi_17_15_ladder;
        }
        float _2234;
        if (_2003 > 0.0)
        {
            _2234 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2234 = frontier_phi_26_22_ladder;
        }
        float _2477;
        if (_2006 > 0.0)
        {
            _2477 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2477 = frontier_phi_38_33_ladder;
        }
        float _2479 = isnan(_2234) ? _2034 : (isnan(_2034) ? _2234 : min(_2034, _2234));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _2000) + _1989;
        float _2485 = (_2480 * _2003) + _1993;
        float _2486 = (_2480 * _2006) + _1997;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2487;
        float _2491 = _2487 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 > _2491) || ((_2485 < _2489) || ((_2484 < _2489) || (_2484 > _2491))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2486, cbModelParam._m0[9u].z, fma(_2485, cbModelParam._m0[9u].y, _2484 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2486, cbModelParam._m0[10u].z, fma(_2485, cbModelParam._m0[10u].y, _2484 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2486, cbModelParam._m0[11u].z, fma(_2485, cbModelParam._m0[11u].y, _2484 * cbModelParam._m0[11u].x))), _1942);
            frontier_phi_16_38_ladder = _2610.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2610.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2610.x * cbModelParam._m0[1u].y;
        }
        _2022 = frontier_phi_16_38_ladder_2;
        _2024 = frontier_phi_16_38_ladder_1;
        _2026 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2010 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1104, _1105, _1106), _1942);
        _2022 = _2010.x * cbModelParam._m0[1u].y;
        _2024 = _2010.y * cbModelParam._m0[1u].y;
        _2026 = _2010.z * cbModelParam._m0[1u].y;
    }
    float _2030 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _936);
    float _2031 = isnan(_2030) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2030 : min(cbModelParam._m0[25u].w, _2030));
    float _2120;
    float _2122;
    float _2124;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2084 = fma(_1165, cbModelParam._m0[21u].z, fma(_1161, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1157)) + cbModelParam._m0[21u].w;
        float _2088 = fma(_1165, cbModelParam._m0[22u].z, fma(_1161, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1157)) + cbModelParam._m0[22u].w;
        float _2092 = fma(_1165, cbModelParam._m0[23u].z, fma(_1161, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1157)) + cbModelParam._m0[23u].w;
        float _2095 = fma(_1106, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1104));
        float _2098 = fma(_1106, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1104));
        float _2101 = fma(_1106, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1104));
        float _2239;
        if (_2095 > 0.0)
        {
            _2239 = abs((1.0 - _2084) / _2095);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2084 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2239 = frontier_phi_28_24_ladder;
        }
        float _2504;
        if (_2098 > 0.0)
        {
            _2504 = abs((1.0 - _2088) / _2098);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2088 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2504 = frontier_phi_40_35_ladder;
        }
        float _2709;
        if (_2101 > 0.0)
        {
            _2709 = abs((1.0 - _2092) / _2101);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2092 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2709 = frontier_phi_49_46_ladder;
        }
        float _2711 = isnan(_2504) ? _2239 : (isnan(_2239) ? _2504 : min(_2239, _2504));
        float _2712 = isnan(_2709) ? _2711 : (isnan(_2711) ? _2709 : min(_2711, _2709));
        float _2716 = (_2712 * _2095) + _2084;
        float _2717 = (_2712 * _2098) + _2088;
        float _2718 = (_2712 * _2101) + _2092;
        float _2719 = _2712 * 9.9999997473787516355514526367188e-05;
        float _2720 = (-1.0) - _2719;
        float _2722 = _2719 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2718 > _2722) || ((_2718 < _2720) || ((_2717 > _2722) || ((_2717 < _2720) || ((_2716 < _2720) || (_2716 > _2722))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2718, cbModelParam._m0[17u].z, fma(_2717, cbModelParam._m0[17u].y, _2716 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2718, cbModelParam._m0[18u].z, fma(_2717, cbModelParam._m0[18u].y, _2716 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2718, cbModelParam._m0[19u].z, fma(_2717, cbModelParam._m0[19u].y, _2716 * cbModelParam._m0[19u].x))), _2031);
            frontier_phi_25_49_ladder = _2917.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2917.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2917.x * cbModelParam._m0[1u].z;
        }
        _2120 = frontier_phi_25_49_ladder_2;
        _2122 = frontier_phi_25_49_ladder_1;
        _2124 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2104 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1104, _1105, _1106), _2031);
        _2120 = _2104.x * cbModelParam._m0[1u].z;
        _2122 = _2104.y * cbModelParam._m0[1u].z;
        _2124 = _2104.z * cbModelParam._m0[1u].z;
    }
    float _2136 = ((((1.0 - _1125) * ((_1112 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1125 * _1112)) * _1096;
    float _2137 = _2136 * ((cbModelParam._m0[1u].w * (_2120 - _2022)) + _2022);
    float _2138 = _2136 * ((cbModelParam._m0[1u].w * (_2122 - _2024)) + _2024);
    float _2139 = _2136 * ((cbModelParam._m0[1u].w * (_2124 - _2026)) + _2026);
    float _2142 = fma(_2139, cbSceneParam._m0[89u].z, fma(_2138, cbSceneParam._m0[89u].y, _2137 * cbSceneParam._m0[89u].x));
    float _2145 = fma(_2139, cbSceneParam._m0[90u].z, fma(_2138, cbSceneParam._m0[90u].y, _2137 * cbSceneParam._m0[90u].x));
    float _2148 = fma(_2139, cbSceneParam._m0[91u].z, fma(_2138, cbSceneParam._m0[91u].y, _2137 * cbSceneParam._m0[91u].x));
    uvec4 _2158 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2160 = _2158.x * 14u;
    uint _2161 = _2160 + 13u;
    float _2168 = _1096 + (-1.0);
    float _2173 = (cbLight._m0[_2161].x * _2168) + 1.0;
    float _2174 = (cbLight._m0[_2161].y * _2168) + 1.0;
    float _2175 = (cbLight._m0[_2161].z * _2168) + 1.0;
    float _2176 = (cbLight._m0[_2161].w * _2168) + 1.0;
    uint _2177 = _2160 + 5u;
    float _2183 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
    uint _2187 = _2160 + 4u;
    float _2193 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2197 = _2160 | 1u;
    float _2208 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_933, _934, _935));
    float _2211 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_933, _934, _935));
    float _4452 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _4463 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2216 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * 0.3183098733425140380859375;
    float _2218 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * 0.3183098733425140380859375;
    float _2225 = ((cbLight._m0[_2177].x * _2183) * _2218) + ((cbLight._m0[_2187].x * _2193) * _2216);
    float _2226 = ((_2183 * cbLight._m0[_2177].y) * _2218) + ((_2193 * cbLight._m0[_2187].y) * _2216);
    float _2227 = ((_2183 * cbLight._m0[_2177].z) * _2218) + ((_2193 * cbLight._m0[_2187].z) * _2216);
    uvec4 _2231 = floatBitsToUint(cbLight._m0[_2160 + 12u]);
    bool _2233 = _2231.x == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2233)
    {
        _2244 = _2225;
        _2246 = _2226;
        _2248 = _2227;
    }
    else
    {
        uint _2252 = _2160 + 6u;
        float _2268 = (dot(vec3(cbLight._m0[_2160 + 2u].xyz), vec3(_933, _934, _935)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4474 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2271 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2244 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2225;
        _2246 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2226;
        _2248 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2227;
    }
    bool _2251 = _2231.y == 0u;
    float _2289;
    float _2291;
    float _2293;
    if (_2251)
    {
        _2289 = _2244;
        _2291 = _2246;
        _2293 = _2248;
    }
    else
    {
        uint _2448 = _2160 + 7u;
        float _2464 = (dot(vec3(cbLight._m0[_2160 + 3u].xyz), vec3(_933, _934, _935)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4490 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2467 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2289 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2244;
        _2291 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2246;
        _2293 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2248;
    }
    uint _2296 = _2160 + 8u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _936) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2160].x + _1013;
    float _2312 = cbLight._m0[_2160].y + _1014;
    float _2313 = cbLight._m0[_2160].z + _1015;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2160].xyz));
    float _4506 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _4517 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _2325 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2326 = dot(vec3(_933, _934, _935), vec3(_2318, _2319, _2320));
    float _4528 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2318, _2319, _2320));
    float _4539 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2310 * _2310;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2349 = (exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2350 = 1.0 - _2310;
    float _2361 = (0.5 / (((_2325 * ((_2324 * _2350) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2350) + _2310) * _2324))) * _2324;
    float _4550 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2363 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    uint _2374 = _2160 + 9u;
    float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _936) * 0.949999988079071044921875);
    float _2386 = _2385 * _2385;
    float _2387 = cbLight._m0[_2197].x + _1013;
    float _2388 = cbLight._m0[_2197].y + _1014;
    float _2389 = cbLight._m0[_2197].z + _1015;
    float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
    float _2394 = _2393 * _2387;
    float _2395 = _2393 * _2388;
    float _2396 = _2393 * _2389;
    float _2397 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2197].xyz));
    float _4561 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2401 = dot(vec3(_933, _934, _935), vec3(_2394, _2395, _2396));
    float _4572 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2405 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2394, _2395, _2396));
    float _4583 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2409 = _2386 * _2386;
    float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
    float _2422 = (exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2423 = 1.0 - _2386;
    float _2433 = (0.5 / (((_2325 * ((_2400 * _2423) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2423) + _2386) * _2400))) * _2400;
    float _4594 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2435 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
    float _2445 = (((_2422 * cbLight._m0[_2374].x) * _2435) * _2183) + (((_2349 * cbLight._m0[_2296].x) * _2363) * _2193);
    float _2446 = (((_2422 * cbLight._m0[_2374].y) * _2435) * _2183) + (((_2349 * cbLight._m0[_2296].y) * _2363) * _2193);
    float _2447 = (((_2422 * cbLight._m0[_2374].z) * _2435) * _2183) + (((_2349 * cbLight._m0[_2296].z) * _2363) * _2193);
    float _2509;
    float _2511;
    float _2513;
    if (_2233)
    {
        _2509 = _2445;
        _2511 = _2446;
        _2513 = _2447;
    }
    else
    {
        uint _2515 = _2160 + 2u;
        uint _2519 = _2160 + 10u;
        float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2515].w)) * _936) * 0.949999988079071044921875);
        float _2534 = _2533 * _2533;
        float _2535 = cbLight._m0[_2515].x + _1013;
        float _2536 = cbLight._m0[_2515].y + _1014;
        float _2537 = cbLight._m0[_2515].z + _1015;
        float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
        float _2542 = _2541 * _2535;
        float _2543 = _2541 * _2536;
        float _2544 = _2541 * _2537;
        float _2545 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2515].xyz));
        float _4605 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2549 = dot(vec3(_933, _934, _935), vec3(_2542, _2543, _2544));
        float _4616 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2553 = dot(vec3(cbLight._m0[_2515].xyz), vec3(_2542, _2543, _2544));
        float _4627 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2557 = _2534 * _2534;
        float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
        float _2570 = (exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2571 = 1.0 - _2534;
        float _2581 = (0.5 / (((_2325 * ((_2548 * _2571) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2571) + _2534) * _2548))) * _2548;
        float _4638 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2509 = (((_2570 * cbLight._m0[_2519].x) * _2583) * _2584) + _2445;
        _2511 = (((_2570 * cbLight._m0[_2519].y) * _2583) * _2584) + _2446;
        _2513 = (((_2570 * cbLight._m0[_2519].z) * _2583) * _2584) + _2447;
    }
    float _2619;
    float _2621;
    float _2623;
    if (_2251)
    {
        _2619 = _2509;
        _2621 = _2511;
        _2623 = _2513;
    }
    else
    {
        uint _2630 = _2160 + 3u;
        uint _2634 = _2160 + 11u;
        float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2630].w)) * _936) * 0.949999988079071044921875);
        float _2649 = _2648 * _2648;
        float _2650 = cbLight._m0[_2630].x + _1013;
        float _2651 = cbLight._m0[_2630].y + _1014;
        float _2652 = cbLight._m0[_2630].z + _1015;
        float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
        float _2657 = _2656 * _2650;
        float _2658 = _2656 * _2651;
        float _2659 = _2656 * _2652;
        float _2660 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2630].xyz));
        float _4654 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2664 = dot(vec3(_933, _934, _935), vec3(_2657, _2658, _2659));
        float _4665 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2668 = dot(vec3(cbLight._m0[_2630].xyz), vec3(_2657, _2658, _2659));
        float _4676 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2672 = _2649 * _2649;
        float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
        float _2685 = (exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2686 = 1.0 - _2649;
        float _2696 = (0.5 / (((_2325 * ((_2663 * _2686) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2686) + _2649) * _2663))) * _2663;
        float _4687 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2619 = (((_2685 * cbLight._m0[_2634].x) * _2698) * _2699) + _2509;
        _2621 = (((_2685 * cbLight._m0[_2634].y) * _2698) * _2699) + _2511;
        _2623 = (((_2685 * cbLight._m0[_2634].z) * _2698) * _2699) + _2513;
    }
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_2158.y == 0u)
    {
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2774;
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2774;
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2774;
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.x;
        uint _2801 = uint((float(_2789.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1034) / _2790))) + floor(float(uint(cbSceneParam._m0[85u].x * _1033) / _2790)));
        float _2811 = (log2(_2777 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2812 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        uint _2815 = uint(isnan(14.0) ? _2812 : (isnan(_2812) ? 14.0 : min(_2812, 14.0)));
        uvec4 _2820 = texelFetch(g_lightClusterGridBuffer, int(((_2815 << 2u) + (_2801 << 6u)) >> 2u));
        uint _2821 = _2820.x;
        uint _2822 = _2789.z;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((((1u << ((_2822 >> 4u) & 15u)) + 4294967295u) & _2821) == 0u) || ((_2822 & 240u) == 0u))
        {
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
        }
        else
        {
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            uint _3081 = 0u;
            uint _3090;
            bool _3091;
            for (;;)
            {
                _3090 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                _3091 = _3090 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3091)
                {
                    frontier_phi_66_pred = _3075;
                    frontier_phi_66_pred_1 = _3080;
                    frontier_phi_66_pred_2 = _3079;
                    frontier_phi_66_pred_3 = _3078;
                    frontier_phi_66_pred_4 = _3077;
                    frontier_phi_66_pred_5 = _3076;
                }
                else
                {
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    uint _3226;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3090;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    for (;;)
                    {
                        uint _3230 = uint(findLSB(_3226)) + (_3081 << 5u);
                        uint _3227 = (_3226 + 4294967295u) & _3226;
                        uint _3232 = _3230 * 48u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3252 = (_3230 * 48u) + 4u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 3u)).x));
                        uint _3271 = (_3230 * 48u) + 8u;
                        vec3 _3282 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x));
                        float _3286 = _3246.x - _2775;
                        float _3287 = _3246.y - _2776;
                        float _3288 = _3246.z - _2777;
                        float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                        float _3292 = inversesqrt(_3289);
                        float _3293 = _3292 * _3286;
                        float _3294 = _3292 * _3287;
                        float _3295 = _3292 * _3288;
                        float _3296 = dot(vec3(_1052, _1055, _1058), vec3(_3293, _3294, _3295));
                        float _3301 = 1.0 - (_3289 * _3246.w);
                        float _4713 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3303 = sqrt(_3289) * _3265.w;
                        float _3306 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3296) + _3307;
                        float _3313 = _3303 * _3303;
                        float _3317 = ((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3302) / ((_3313 * 0.699999988079071044921875) + 1.0);
                        float _3321 = (-0.0) - _2775;
                        float _3322 = (-0.0) - _2776;
                        float _3323 = (-0.0) - _2777;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3338 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                        float _3339 = 1.0 - _1112;
                        float _3346 = sqrt(1.0 - ((1.0 - (_3339 * _3339)) * (1.0 - (_3338 * _3338))));
                        float _3347 = _3346 * _3346;
                        float _3348 = _3347 * _3347;
                        float _3349 = _3328 + _3293;
                        float _3350 = _3329 + _3294;
                        float _3351 = _3330 + _3295;
                        float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                        float _3359 = dot(vec3(_1052, _1055, _1058), vec3(_3328, _3329, _3330));
                        float _4729 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3362 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3363 = dot(vec3(_1052, _1055, _1058), vec3(_3355 * _3349, _3355 * _3350, _3355 * _3351));
                        float _4740 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3366 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3370 = ((_3366 * _3366) * (_3348 + (-1.0))) + 1.0;
                        float _3371 = _3306 * _3347;
                        float _3372 = _3371 * _3371;
                        float _3375 = ((1.0 - _3372) * _3296) + _3372;
                        float _4751 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3376 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3377 = 1.0 - _3347;
                        float _3387 = (0.5 / (((_3376 * ((_3362 * _3377) + _3347)) + 9.9999999392252902907785028219223e-09) + (((_3376 * _3377) + _3347) * _3362))) * _3376;
                        float _4762 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3398 = (((_3348 * 3.1415927410125732421875) * (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) / ((_3370 * _3370) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125))) * _3302;
                        _3150 = (_3317 * _3265.x) + _3223;
                        _3151 = (_3317 * _3265.y) + _3224;
                        _3152 = (_3317 * _3265.z) + _3225;
                        _3147 = (_3398 * _3282.x) + _3220;
                        _3148 = (_3398 * _3282.y) + _3221;
                        _3149 = (_3398 * _3282.z) + _3222;
                        if (_3227 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3227;
                        }
                    }
                    frontier_phi_66_pred = _3147;
                    frontier_phi_66_pred_1 = _3152;
                    frontier_phi_66_pred_2 = _3151;
                    frontier_phi_66_pred_3 = _3150;
                    frontier_phi_66_pred_4 = _3149;
                    frontier_phi_66_pred_5 = _3148;
                }
                _2923 = frontier_phi_66_pred;
                _2933 = frontier_phi_66_pred_1;
                _2931 = frontier_phi_66_pred_2;
                _2929 = frontier_phi_66_pred_3;
                _2927 = frontier_phi_66_pred_4;
                _2925 = frontier_phi_66_pred_5;
                uint _3082 = _3081 + 1u;
                if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3075 = _2923;
                    _3076 = _2925;
                    _3077 = _2927;
                    _3078 = _2929;
                    _3079 = _2931;
                    _3080 = _2933;
                    _3081 = _3082;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
        }
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.z;
        uint _2939 = (_2937 >> 8u) & 15u;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((4294967295u << _2939) & _2821) == 0u)
        {
            _3043 = _2922;
            _3045 = _2924;
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
        }
        else
        {
            float _3068 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
            float _3069 = _3068 * _2775;
            float _3070 = _3068 * _2776;
            float _3071 = _3068 * _2777;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2939 < ((_2937 >> 12u) & 15u))
            {
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3203 = _2922;
                float _3204 = _2924;
                float _3205 = _2926;
                float _3206 = _2928;
                float _3207 = _2930;
                float _3208 = _2932;
                uint _3209 = _2939;
                uint _3218;
                bool _3219;
                for (;;)
                {
                    _3218 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                    _3219 = _3218 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3219)
                    {
                        frontier_phi_77_pred = _3208;
                        frontier_phi_77_pred_1 = _3207;
                        frontier_phi_77_pred_2 = _3206;
                        frontier_phi_77_pred_3 = _3205;
                        frontier_phi_77_pred_4 = _3204;
                        frontier_phi_77_pred_5 = _3203;
                    }
                    else
                    {
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3425 = _3203;
                        float _3426 = _3204;
                        float _3427 = _3205;
                        float _3428 = _3206;
                        float _3429 = _3207;
                        float _3430 = _3208;
                        uint _3431 = _3218;
                        uint _3432;
                        vec4 _3457;
                        float _3458;
                        vec4 _3473;
                        vec3 _3485;
                        vec4 _3500;
                        vec4 _3515;
                        float _3561;
                        bool _3562;
                        for (;;)
                        {
                            uint _3442 = ((_3209 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3431));
                            _3432 = (_3431 + 4294967295u) & _3431;
                            uint _3444 = _3442 * 40u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            _3458 = _3457.w;
                            uint _3460 = (_3442 * 40u) + 4u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3442 * 40u) + 8u;
                            _3485 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x));
                            uint _3487 = (_3442 * 40u) + 16u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3502 = (_3442 * 40u) + 20u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3442 * 40u) + 24u;
                            vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3536 = (_3442 * 40u) + 28u;
                            vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            _3561 = fma(_2777, _3549.z, fma(_2776, _3549.y, _3549.x * _2775)) + _3549.w;
                            _3562 = !((fma(_2777, _3530.z, fma(_2776, _3530.y, _3530.x * _2775)) + _3530.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3562)
                            {
                                float _3589 = _3457.x - _2775;
                                float _3590 = _3457.y - _2776;
                                float _3591 = _3457.z - _2777;
                                float _3592 = dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591));
                                float _3595 = inversesqrt(_3592);
                                float _3596 = _3595 * _3589;
                                float _3597 = _3595 * _3590;
                                float _3598 = _3595 * _3591;
                                float _3602 = 1.0 - (_3592 / (_3458 * _3458));
                                float _4773 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3607 = sqrt(_3592) * _3473.w;
                                float _3609 = 1.39999997615814208984375 / (_3607 + 1.39999997615814208984375);
                                float _3610 = _3609 * _3609;
                                float _3613 = ((1.0 - _3610) * dot(vec3(_3596, _3597, _3598), vec3(_1052, _1055, _1058))) + _3610;
                                float _3616 = _3607 * _3607;
                                float _3620 = (fma(_2777, _3500.z, fma(_2776, _3500.y, _3500.x * _2775)) + _3500.w) / _3561;
                                float _3621 = (fma(_2777, _3515.z, fma(_2776, _3515.y, _3515.x * _2775)) + _3515.w) / _3561;
                                float _3625 = 1.0 - dot(vec2(_3620, _3621), vec2(_3620, _3621));
                                float _4789 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3627 = _3626 * (((isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0))) * _3603) / ((_3616 * 0.699999988079071044921875) + 1.0));
                                float _3639 = exp2(log2(1.0 / ((_3616 * 3.5) + 5.0)) * 0.25);
                                float _3640 = 1.0 - _1112;
                                float _3647 = sqrt(1.0 - ((1.0 - (_3640 * _3640)) * (1.0 - (_3639 * _3639))));
                                float _3648 = _3647 * _3647;
                                float _3649 = _3648 * _3648;
                                float _3650 = _3596 - _3069;
                                float _3651 = _3597 - _3070;
                                float _3652 = _3598 - _3071;
                                float _3656 = inversesqrt(dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652)));
                                float _3660 = dot(vec3(_1052, _1055, _1058), vec3((-0.0) - _3069, (-0.0) - _3070, (-0.0) - _3071));
                                float _4800 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3663 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3664 = dot(vec3(_1052, _1055, _1058), vec3(_3656 * _3650, _3656 * _3651, _3656 * _3652));
                                float _4811 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3667 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3671 = ((_3667 * _3667) * (_3649 + (-1.0))) + 1.0;
                                float _3672 = _3609 * _3648;
                                float _3673 = _3672 * _3672;
                                float _3679 = ((1.0 - _3673) * dot(vec3(_1052, _1055, _1058), vec3(_3596, _3597, _3598))) + _3673;
                                float _4822 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3681 = 1.0 - _3648;
                                float _3691 = (0.5 / (((_3680 * ((_3663 * _3681) + _3648)) + 9.9999999392252902907785028219223e-09) + (((_3680 * _3681) + _3648) * _3663))) * _3680;
                                float _4833 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3701 = (_3626 * _3603) * (((_3649 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3671 * _3671) * ((_3616 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3627 * _3473.y;
                                frontier_phi_83_pred_1 = _3627 * _3473.x;
                                frontier_phi_83_pred_2 = _3701 * _3485.z;
                                frontier_phi_83_pred_3 = _3701 * _3485.y;
                                frontier_phi_83_pred_4 = _3701 * _3485.x;
                                frontier_phi_83_pred_5 = _3627 * _3473.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3709 = frontier_phi_83_pred;
                            _3708 = frontier_phi_83_pred_1;
                            _3707 = frontier_phi_83_pred_2;
                            _3706 = frontier_phi_83_pred_3;
                            _3705 = frontier_phi_83_pred_4;
                            _3710 = frontier_phi_83_pred_5;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            if (_3432 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3432;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3417;
                        frontier_phi_77_pred_1 = _3416;
                        frontier_phi_77_pred_2 = _3415;
                        frontier_phi_77_pred_3 = _3414;
                        frontier_phi_77_pred_4 = _3413;
                        frontier_phi_77_pred_5 = _3412;
                    }
                    _3054 = frontier_phi_77_pred;
                    _3052 = frontier_phi_77_pred_1;
                    _3050 = frontier_phi_77_pred_2;
                    _3048 = frontier_phi_77_pred_3;
                    _3046 = frontier_phi_77_pred_4;
                    _3044 = frontier_phi_77_pred_5;
                    uint _3210 = _3209 + 1u;
                    if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3203 = _3044;
                        _3204 = _3046;
                        _3205 = _3048;
                        _3206 = _3050;
                        _3207 = _3052;
                        _3208 = _3054;
                        _3209 = _3210;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3048;
                frontier_phi_58_59_ladder_1 = _3054;
                frontier_phi_58_59_ladder_2 = _3052;
                frontier_phi_58_59_ladder_3 = _3050;
                frontier_phi_58_59_ladder_4 = _3046;
                frontier_phi_58_59_ladder_5 = _3044;
            }
            else
            {
                frontier_phi_58_59_ladder = _2926;
                frontier_phi_58_59_ladder_1 = _2932;
                frontier_phi_58_59_ladder_2 = _2930;
                frontier_phi_58_59_ladder_3 = _2928;
                frontier_phi_58_59_ladder_4 = _2924;
                frontier_phi_58_59_ladder_5 = _2922;
            }
            _3043 = frontier_phi_58_59_ladder_5;
            _3045 = frontier_phi_58_59_ladder_4;
            _3047 = frontier_phi_58_59_ladder;
            _3049 = frontier_phi_58_59_ladder_3;
            _3051 = frontier_phi_58_59_ladder_2;
            _3053 = frontier_phi_58_59_ladder_1;
        }
        float _3058 = isnan(1.0) ? _1096 : (isnan(_1096) ? 1.0 : min(_1096, 1.0));
        _2834 = (_3058 * _3049) + _2289;
        _2836 = (_3058 * _3051) + _2291;
        _2838 = (_3058 * _3053) + _2293;
        _2840 = ((_3043 * 0.039999999105930328369140625) * _3058) + _2619;
        _2842 = ((_3045 * 0.039999999105930328369140625) * _3058) + _2621;
        _2844 = ((_3047 * 0.039999999105930328369140625) * _3058) + _2623;
    }
    else
    {
        _2834 = _2289;
        _2836 = _2291;
        _2838 = _2293;
        _2840 = _2619;
        _2842 = _2621;
        _2844 = _2623;
    }
    float _4849 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _4860 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _4871 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _2861 = ((isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2834 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1096))) + ((_2840 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1931)) * cbPerFrame._m0[3u].x);
    float _2862 = ((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2836 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1096))) + ((_2842 + ((isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))) * _1931)) * cbPerFrame._m0[3u].x);
    float _2863 = ((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2838 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1096))) + ((_2844 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1931)) * cbPerFrame._m0[3u].x);
    uint _2864 = _278 + 6u;
    float _2872 = _1033 / cbSceneParam._m0[86u].x;
    float _2873 = _1034 / cbSceneParam._m0[86u].y;
    vec4 _2887 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, (log2((isnan(cbSceneParam._m0[77u].w) ? _954 : (isnan(_954) ? cbSceneParam._m0[77u].w : min(_954, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2889 = _2887.x;
    float _2890 = _2887.y;
    float _2891 = _2887.z;
    float _2892 = _2887.w;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_954 > cbSceneParam._m0[78u].w)
    {
        float _2947 = isnan(_954) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _954 : min(cbSceneParam._m0[80u].w, _954));
        float _2948 = _2947 / _954;
        float _2959 = _2948 * _1006;
        float _2960 = _1007 * _2948;
        float _2961 = (-0.0) - _2960;
        float _2963 = _2948 * _1008;
        float _2965 = (cbSceneParam._m0[77u].w * _2961) / _2947;
        float _2966 = _2965 + cbSceneParam._m0[79u].w;
        float _2967 = cbSceneParam._m0[79u].w - _2960;
        float _2973 = sqrt(((_2959 * _2959) + (_2960 * _2960)) + (_2963 * _2963));
        float _2976 = (1.0 - (cbSceneParam._m0[77u].w / _2947)) * _2973;
        float _2981 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2983 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3160;
        if (abs((_2961 - _2965) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3160 = ((((_2966 > 0.0) ? exp2(_2981 * _2966) : (2.0 - exp2(_2983 * _2966))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2976;
        }
        else
        {
            float _3104 = 1.0 / cbSceneParam._m0[80u].x;
            float _3105 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : max(_2966, _2967));
            float _3106 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : min(_2966, _2967));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            _3160 = ((abs(_2973 / _2961) * cbSceneParam._m0[80u].y) * ((((_3115 - _3116) * 2.0) - ((exp2(_2981 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0)))) - exp2(_2981 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))))) * _3104)) - ((exp2(_2983 * _3115) - exp2(_2983 * _3116)) * _3104))) + (_2976 * cbSceneParam._m0[80u].z);
        }
        vec4 _3162 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, 1.0), 0.0);
        float _3171 = exp2((_3160 * (-1.44269502162933349609375)) * (1.0 - _3162.w));
        float _3172 = log2(_3171);
        float _3188 = log2(_2892);
        _2985 = (exp2(_3188 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].x)) * _3162.x) / cbSceneParam._m0[78u].x)) + _2889;
        _2987 = (exp2(_3188 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].y)) * _3162.y) / cbSceneParam._m0[78u].y)) + _2890;
        _2989 = (exp2(_3188 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].z)) * _3162.z) / cbSceneParam._m0[78u].z)) + _2891;
        _2991 = _3171 * _2892;
    }
    else
    {
        _2985 = _2889;
        _2987 = _2890;
        _2989 = _2891;
        _2991 = _2892;
    }
    bool _3198;
    vec4 _3001;
    vec4 _3023;
    float _3025;
    float _3029;
    float _3030;
    float _3031;
    float _3032;
    bool _3042;
    for (;;)
    {
        _3001 = cbMatDynParam._m0[0u];
        float _3003 = roundEven(_3001.y);
        bool _3004 = _3003 == 3.0;
        float _3005 = log2(_2991);
        float _3012 = exp2(_3005 * cbSceneParam._m0[78u].x) * _2861;
        float _3013 = exp2(_3005 * cbSceneParam._m0[78u].y) * _2862;
        float _3014 = exp2(_3005 * cbSceneParam._m0[78u].z) * _2863;
        float _3021 = _1022 + (-0.5);
        _3023 = cbMtdParam._m0[1u];
        _3025 = _3023.y * _3021;
        float _3028 = (_3003 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3029 = _3028 * (_3004 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2985)));
        _3030 = _3028 * (_3004 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2987)));
        _3031 = _3028 * (_3004 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2989)));
        _3032 = _3021 * 0.999000012874603271484375;
        _3042 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3042)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _3032) < 0.5)
            {
                _3198 = true;
                break;
            }
        }
        uint _3139 = _1071 + uint(_3001.w);
        if ((cbInstanceData._m0[_3139].w < 1.0) && ((cbInstanceData._m0[_3139].w + _3032) < 0.5))
        {
            _3198 = true;
            break;
        }
        if ((_3025 + 1.0) < _3023.x)
        {
            _3198 = true;
            break;
        }
        _3198 = false;
        break;
    }
    float _3403;
    if (_3198)
    {
        discard_state = true;
        _3403 = 0.0;
    }
    else
    {
        _3403 = cbInstanceData._m0[_2864].w;
    }
    SV_Target.x = _3029;
    SV_Target.y = _3030;
    SV_Target.z = _3031;
    SV_Target.w = _3403;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2864].w;
    discard_exit();
}


