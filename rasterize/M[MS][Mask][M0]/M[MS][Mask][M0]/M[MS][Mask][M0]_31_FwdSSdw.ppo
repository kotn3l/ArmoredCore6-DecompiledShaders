#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1136;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].z) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3465 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _395 = (_388 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _396 = (_388 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _397 = (_388 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _388) + _457;
    float _469 = ((((_436.x - _455) * _388) + _455) * 2.0) + (-1.0);
    float _471 = ((((_436.y - _456) * _388) + _456) * 2.0) + (-1.0);
    float _472 = dot(vec2(_469, _471), vec2(_469, _471));
    float _3476 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))));
    vec4 _493 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _520 = _518.x;
    float _521 = 1.0 - _520;
    float _534 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_520 - _521) * cbMtdParam._m0[24u].w) + _521) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3487 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _542 = (_535 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) + _395;
    float _543 = (_535 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) + _396;
    float _544 = (_535 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) + _397;
    float _548 = (cbMtdParam._m0[19u].w * (_493.z - _466)) + _466;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _568 = (_561.x * 2.0) + (-1.0);
    float _569 = (_561.y * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _3498 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _578 = (_535 * (_561.z - _548)) + _548;
    float _581 = (((_493.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _582 = (((_493.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _471;
    float _594 = (((_568 - _581) + (cbMtdParam._m0[21u].x * _581)) * _535) + _581;
    float _595 = (((_569 - _582) + (cbMtdParam._m0[21u].x * _582)) * _535) + _582;
    float _596 = (_535 * (sqrt(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) - _477)) + _477;
    float _600 = cbMtdParam._m0[22u].x + _493.w;
    float _603 = fma(_596, _221 * NORMAL.x, fma(_595, _228 * TANGENT.x, (_214 * _206) * _594));
    float _606 = fma(_596, _221 * NORMAL.y, fma(_595, _228 * TANGENT.y, (_214 * _207) * _594));
    float _609 = fma(_596, _221 * NORMAL.z, fma(_595, _228 * TANGENT.z, (_214 * _208) * _594));
    float _613 = inversesqrt(dot(vec3(_603, _606, _609), vec3(_603, _606, _609)));
    float _614 = _613 * _603;
    float _615 = _613 * _606;
    float _616 = _613 * _609;
    float _3509 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _617 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3531 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3542 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3553 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _687 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _677);
    float _688 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _677);
    float _689 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _677);
    float _693 = inversesqrt(dot(vec3(_687, _688, _689), vec3(_687, _688, _689)));
    float _694 = _687 * _693;
    float _695 = _688 * _693;
    float _696 = _689 * _693;
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_616, cbSceneParam._m0[5u].z, fma(_615, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _614));
    float _724 = fma(_616, cbSceneParam._m0[6u].z, fma(_615, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _614));
    float _727 = fma(_616, cbSceneParam._m0[7u].z, fma(_615, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _614));
    uint _741 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3564 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    vec4 _761 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _765 = ((isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * TEXCOORD_5.w) * _761.x;
    float _766 = dot(vec3(_614, _615, _616), vec3(_694, _695, _696));
    float _769 = _766 * 2.0;
    float _773 = (_769 * _614) - _694;
    float _774 = (_769 * _615) - _695;
    float _775 = (_769 * _616) - _696;
    float _779 = abs(dot(vec3(_694, _695, _696), vec3(_614, _615, _616)));
    float _3597 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _781 = sqrt(_617);
    float _794 = exp2((_781 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_781 * 3.0));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1135;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _860 = fma(_834, cbModelParam._m0[26u].z, fma(_830, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826));
        float _864 = fma(_834, cbModelParam._m0[27u].z, fma(_830, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826));
        float _868 = fma(_834, cbModelParam._m0[28u].z, fma(_830, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826));
        float _893 = _826 + _614;
        float _894 = _830 + _615;
        float _895 = _834 + _616;
        float _905 = fma(_895, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893)) - _860;
        float _906 = fma(_895, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893)) - _864;
        float _907 = fma(_895, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893)) - _868;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_860 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_864 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[34u].z) + ((((((_868 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _963 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_929.x + (-0.5));
        float _965 = _963 * (_929.y + (-0.5));
        float _966 = _963 * (_929.z + (-0.5));
        float _973 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_936.x + (-0.5));
        float _975 = _973 * (_936.y + (-0.5));
        float _976 = _973 * (_936.z + (-0.5));
        float _983 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_943.x + (-0.5));
        float _985 = _983 * (_943.y + (-0.5));
        float _986 = _983 * (_943.z + (-0.5));
        float _993 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_950.x + (-0.5));
        float _995 = _993 * (_950.y + (-0.5));
        float _996 = _993 * (_950.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1017 = (dot(vec3(_614, _615, _616), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1027 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3645 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1029 + 1.0))) + _1034) * _997;
        float _1044 = _965 * 0.5;
        float _1045 = _975 * 0.5;
        float _1046 = _985 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_614, _615, _616), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3678 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1071 + 1.0))) + _1076) * _998;
        float _1086 = _966 * 0.5;
        float _1087 = _976 * 0.5;
        float _1088 = _986 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_614, _615, _616), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3711 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1113 + 1.0))) + _1118) * _999;
        _1135 = _966;
        _1137 = _965;
        _1138 = _964;
        _1139 = _976;
        _1140 = _975;
        _1141 = _974;
        _1142 = _986;
        _1143 = _985;
        _1144 = _984;
        _1145 = _999;
        _1146 = _998;
        _1147 = _997;
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _1136;
        _1137 = _1136;
        _1138 = _1136;
        _1139 = _1136;
        _1140 = _1136;
        _1141 = _1136;
        _1142 = _1136;
        _1143 = _1136;
        _1144 = _1136;
        _1145 = _1136;
        _1146 = _1136;
        _1147 = _1136;
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1175 = fma(_834, cbModelParam._m0[30u].z, fma(_830, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _826));
        float _1179 = fma(_834, cbModelParam._m0[31u].z, fma(_830, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _826));
        float _1183 = fma(_834, cbModelParam._m0[32u].z, fma(_830, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _826));
        float _1206 = _826 + _614;
        float _1207 = _830 + _615;
        float _1208 = _834 + _616;
        float _1218 = fma(_1208, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1206)) - _1175;
        float _1219 = fma(_1208, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1206)) - _1179;
        float _1220 = fma(_1208, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1206)) - _1183;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1175 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1179 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[35u].z) + ((((((_1183 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1274 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1241.x + (-0.5));
        float _1276 = _1274 * (_1241.y + (-0.5));
        float _1277 = _1274 * (_1241.z + (-0.5));
        float _1284 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1248.x + (-0.5));
        float _1286 = _1284 * (_1248.y + (-0.5));
        float _1287 = _1284 * (_1248.z + (-0.5));
        float _1294 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1255.x + (-0.5));
        float _1296 = _1294 * (_1255.y + (-0.5));
        float _1297 = _1294 * (_1255.z + (-0.5));
        float _1304 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1262.x + (-0.5));
        float _1306 = _1304 * (_1262.y + (-0.5));
        float _1307 = _1304 * (_1262.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_614, _615, _616), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3774 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1338 + 1.0))) + _1343) * _1308;
        float _1353 = _1276 * 0.5;
        float _1354 = _1286 * 0.5;
        float _1355 = _1296 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_614, _615, _616), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3807 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1380 + 1.0))) + _1385) * _1309;
        float _1395 = _1277 * 0.5;
        float _1396 = _1287 * 0.5;
        float _1397 = _1297 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_614, _615, _616), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3840 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1422 + 1.0))) + _1427) * _1310;
        _1444 = _1277;
        _1445 = _1276;
        _1446 = _1275;
        _1447 = _1287;
        _1448 = _1286;
        _1449 = _1285;
        _1450 = _1297;
        _1451 = _1296;
        _1452 = _1295;
        _1453 = _1310;
        _1454 = _1309;
        _1455 = _1308;
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
    }
    else
    {
        _1444 = _1136;
        _1445 = _1136;
        _1446 = _1136;
        _1447 = _1136;
        _1448 = _1136;
        _1449 = _1136;
        _1450 = _1136;
        _1451 = _1136;
        _1452 = _1136;
        _1453 = _1136;
        _1454 = _1136;
        _1455 = _1136;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1148)) + _1148;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1149)) + _1149;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1150)) + _1150;
    float _1491 = fma(_1470, cbSceneParam._m0[89u].z, fma(_1469, cbSceneParam._m0[89u].y, _1468 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1470, cbSceneParam._m0[90u].z, fma(_1469, cbSceneParam._m0[90u].y, _1468 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1470, cbSceneParam._m0[91u].z, fma(_1469, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1468));
    float _1512 = _773 * 0.5;
    float _1513 = _774 * 0.5;
    float _1514 = _775 * 0.5;
    float _1515 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1518 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1521 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1555;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1528 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1135, _1139, _1142, _1145));
        float _1532 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1536 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1543 = dot(vec4(cbModelParam._m0[39u]), vec4(_1512, _1513, _1514, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1566;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1557 = dot(vec4(cbModelParam._m0[40u]), vec4(_1512, _1513, _1514, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1570 = (_1566 * cbModelParam._m0[1u].x) + (_1555 * (1.0 - cbModelParam._m0[1u].x));
    float _1580 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _617);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1580 : min(cbModelParam._m0[25u].z, _1580));
    float _1661;
    float _1663;
    float _1665;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1628 = fma(_834, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826)) + cbModelParam._m0[13u].w;
        float _1632 = fma(_834, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826)) + cbModelParam._m0[14u].w;
        float _1636 = fma(_834, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826)) + cbModelParam._m0[15u].w;
        float _1639 = fma(_775, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _773));
        float _1642 = fma(_775, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _773));
        float _1645 = fma(_775, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _773));
        float _1673;
        if (_1639 > 0.0)
        {
            _1673 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1673 = frontier_phi_14_12_ladder;
        }
        float _1894;
        if (_1642 > 0.0)
        {
            _1894 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1894 = frontier_phi_23_19_ladder;
        }
        float _2140;
        if (_1645 > 0.0)
        {
            _2140 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2140 = frontier_phi_35_30_ladder;
        }
        float _2142 = isnan(_1894) ? _1673 : (isnan(_1673) ? _1894 : min(_1673, _1894));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1639) + _1628;
        float _2148 = (_2143 * _1642) + _1632;
        float _2149 = (_2143 * _1645) + _1636;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2150;
        float _2154 = _2150 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 > _2154) || ((_2148 < _2152) || ((_2147 < _2152) || (_2147 > _2154))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2273 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2149, cbModelParam._m0[9u].z, fma(_2148, cbModelParam._m0[9u].y, _2147 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2149, cbModelParam._m0[10u].z, fma(_2148, cbModelParam._m0[10u].y, _2147 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2149, cbModelParam._m0[11u].z, fma(_2148, cbModelParam._m0[11u].y, _2147 * cbModelParam._m0[11u].x))), _1581);
            frontier_phi_13_35_ladder = _2273.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2273.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2273.x * cbModelParam._m0[1u].y;
        }
        _1661 = frontier_phi_13_35_ladder_2;
        _1663 = frontier_phi_13_35_ladder_1;
        _1665 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1649 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_773, _774, _775), _1581);
        _1661 = _1649.x * cbModelParam._m0[1u].y;
        _1663 = _1649.y * cbModelParam._m0[1u].y;
        _1665 = _1649.z * cbModelParam._m0[1u].y;
    }
    float _1669 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _617);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1669 : min(cbModelParam._m0[25u].w, _1669));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1723 = fma(_834, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826)) + cbModelParam._m0[21u].w;
        float _1727 = fma(_834, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826)) + cbModelParam._m0[22u].w;
        float _1731 = fma(_834, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826)) + cbModelParam._m0[23u].w;
        float _1734 = fma(_775, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _773));
        float _1737 = fma(_775, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _773));
        float _1740 = fma(_775, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _773));
        float _1899;
        if (_1734 > 0.0)
        {
            _1899 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1899 = frontier_phi_25_21_ladder;
        }
        float _2167;
        if (_1737 > 0.0)
        {
            _2167 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2167 = frontier_phi_37_32_ladder;
        }
        float _2372;
        if (_1740 > 0.0)
        {
            _2372 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2372 = frontier_phi_46_43_ladder;
        }
        float _2374 = isnan(_2167) ? _1899 : (isnan(_1899) ? _2167 : min(_1899, _2167));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1734) + _1723;
        float _2380 = (_2375 * _1737) + _1727;
        float _2381 = (_2375 * _1740) + _1731;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2382;
        float _2385 = _2382 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2381 > _2385) || ((_2381 < _2383) || ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 < _2383) || (_2379 > _2385))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2381, cbModelParam._m0[17u].z, fma(_2380, cbModelParam._m0[17u].y, _2379 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2381, cbModelParam._m0[18u].z, fma(_2380, cbModelParam._m0[18u].y, _2379 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2381, cbModelParam._m0[19u].z, fma(_2380, cbModelParam._m0[19u].y, _2379 * cbModelParam._m0[19u].x))), _1670);
            frontier_phi_22_46_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1759 = frontier_phi_22_46_ladder_2;
        _1761 = frontier_phi_22_46_ladder_1;
        _1763 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_773, _774, _775), _1670);
        _1759 = _1743.x * cbModelParam._m0[1u].z;
        _1761 = _1743.y * cbModelParam._m0[1u].z;
        _1763 = _1743.z * cbModelParam._m0[1u].z;
    }
    float _1775 = ((((1.0 - _794) * ((_781 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_794 * _781)) * _765;
    float _1776 = _1775 * ((cbModelParam._m0[1u].w * (_1759 - _1661)) + _1661);
    float _1777 = _1775 * ((cbModelParam._m0[1u].w * (_1761 - _1663)) + _1663);
    float _1778 = _1775 * ((cbModelParam._m0[1u].w * (_1763 - _1665)) + _1665);
    float _1781 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1776 * cbSceneParam._m0[91u].x));
    vec4 _1795 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_702, _703));
    float _1797 = _1795.w;
    float _1809 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1797);
    float _1810 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1797);
    float _1811 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1797);
    uvec4 _1815 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1817 = _1815.x * 14u;
    uint _1818 = _1817 + 13u;
    float _1825 = _765 + (-1.0);
    float _1830 = (cbLight._m0[_1818].x * _1825) + 1.0;
    float _1831 = (cbLight._m0[_1818].y * _1825) + 1.0;
    float _1832 = (cbLight._m0[_1818].z * _1825) + 1.0;
    float _1833 = (cbLight._m0[_1818].w * _1825) + 1.0;
    uint _1834 = _1817 + 5u;
    float _1840 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1844 = _1817 + 4u;
    float _1853 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1857 = _1817 | 1u;
    float _1868 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_614, _615, _616));
    float _1871 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_614, _615, _616));
    float _3976 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _3987 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1876 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 0.3183098733425140380859375;
    float _1878 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.3183098733425140380859375;
    float _1885 = ((cbLight._m0[_1834].x * _1840) * _1878) + (((cbLight._m0[_1844].x * _1809) * _1853) * _1876);
    float _1886 = ((_1840 * cbLight._m0[_1834].y) * _1878) + (((cbLight._m0[_1844].y * _1810) * _1853) * _1876);
    float _1887 = ((_1840 * cbLight._m0[_1834].z) * _1878) + (((cbLight._m0[_1844].z * _1811) * _1853) * _1876);
    uvec4 _1891 = floatBitsToUint(cbLight._m0[_1817 + 12u]);
    bool _1893 = _1891.x == 0u;
    float _1904;
    float _1906;
    float _1908;
    if (_1893)
    {
        _1904 = _1885;
        _1906 = _1886;
        _1908 = _1887;
    }
    else
    {
        uint _1912 = _1817 + 6u;
        float _1928 = (dot(vec3(cbLight._m0[_1817 + 2u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _1929 = _1928 * _1928;
        float _3998 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1931 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1904 = (((cbLight._m0[_1912].x * 0.3183098733425140380859375) * _1930) * _1931) + _1885;
        _1906 = (((cbLight._m0[_1912].y * 0.3183098733425140380859375) * _1930) * _1931) + _1886;
        _1908 = (((cbLight._m0[_1912].z * 0.3183098733425140380859375) * _1930) * _1931) + _1887;
    }
    bool _1911 = _1891.y == 0u;
    float _1949;
    float _1951;
    float _1953;
    if (_1911)
    {
        _1949 = _1904;
        _1951 = _1906;
        _1953 = _1908;
    }
    else
    {
        uint _2111 = _1817 + 7u;
        float _2127 = (dot(vec3(cbLight._m0[_1817 + 3u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _2128 = _2127 * _2127;
        float _4014 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2129 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2130 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _1949 = (((cbLight._m0[_2111].x * 0.3183098733425140380859375) * _2129) * _2130) + _1904;
        _1951 = (((cbLight._m0[_2111].y * 0.3183098733425140380859375) * _2129) * _2130) + _1906;
        _1953 = (((cbLight._m0[_2111].z * 0.3183098733425140380859375) * _2129) * _2130) + _1908;
    }
    uint _1956 = _1817 + 8u;
    float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _617) * 0.949999988079071044921875);
    float _1970 = _1969 * _1969;
    float _1971 = cbLight._m0[_1817].x + _694;
    float _1972 = cbLight._m0[_1817].y + _695;
    float _1973 = cbLight._m0[_1817].z + _696;
    float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
    float _1978 = _1977 * _1971;
    float _1979 = _1977 * _1972;
    float _1980 = _1977 * _1973;
    float _1981 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_1817].xyz));
    float _4030 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _1985 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1986 = dot(vec3(_614, _615, _616), vec3(_1978, _1979, _1980));
    float _4052 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _1990 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_1978, _1979, _1980));
    float _4063 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1994 = _1970 * _1970;
    float _1998 = ((_1989 * _1989) * (_1994 + (-1.0))) + 1.0;
    float _2009 = (exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2010 = 1.0 - _1970;
    float _2021 = (0.5 / (((_1985 * ((_1984 * _2010) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2010) + _1970) * _1984))) * _1984;
    float _4074 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1994 / ((_1998 * _1998) * 3.141590118408203125));
    uint _2037 = _1817 + 9u;
    float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _617) * 0.949999988079071044921875);
    float _2049 = _2048 * _2048;
    float _2050 = cbLight._m0[_1857].x + _694;
    float _2051 = cbLight._m0[_1857].y + _695;
    float _2052 = cbLight._m0[_1857].z + _696;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2057 = _2056 * _2050;
    float _2058 = _2056 * _2051;
    float _2059 = _2056 * _2052;
    float _2060 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_1857].xyz));
    float _4085 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _2064 = dot(vec3(_614, _615, _616), vec3(_2057, _2058, _2059));
    float _4096 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2057, _2058, _2059));
    float _4107 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2049 * _2049;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2086 = 1.0 - _2049;
    float _2096 = (0.5 / (((_1985 * ((_2063 * _2086) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2086) + _2049) * _2063))) * _2063;
    float _4118 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    float _2108 = (((_2085 * cbLight._m0[_2037].x) * _2098) * _1840) + ((((cbLight._m0[_1956].x * _1809) * _2009) * _2023) * _1853);
    float _2109 = (((_2085 * cbLight._m0[_2037].y) * _2098) * _1840) + ((((cbLight._m0[_1956].y * _1810) * _2009) * _2023) * _1853);
    float _2110 = (((_2085 * cbLight._m0[_2037].z) * _2098) * _1840) + ((((cbLight._m0[_1956].z * _1811) * _2009) * _2023) * _1853);
    float _2172;
    float _2174;
    float _2176;
    if (_1893)
    {
        _2172 = _2108;
        _2174 = _2109;
        _2176 = _2110;
    }
    else
    {
        uint _2178 = _1817 + 2u;
        uint _2182 = _1817 + 10u;
        float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _617) * 0.949999988079071044921875);
        float _2197 = _2196 * _2196;
        float _2198 = cbLight._m0[_2178].x + _694;
        float _2199 = cbLight._m0[_2178].y + _695;
        float _2200 = cbLight._m0[_2178].z + _696;
        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
        float _2205 = _2204 * _2198;
        float _2206 = _2204 * _2199;
        float _2207 = _2204 * _2200;
        float _2208 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2178].xyz));
        float _4129 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2212 = dot(vec3(_614, _615, _616), vec3(_2205, _2206, _2207));
        float _4140 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2216 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2205, _2206, _2207));
        float _4151 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2220 = _2197 * _2197;
        float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
        float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2234 = 1.0 - _2197;
        float _2244 = (0.5 / (((_1985 * ((_2211 * _2234) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2234) + _2197) * _2211))) * _2211;
        float _4162 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2246 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
        float _2247 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2172 = (((_2233 * cbLight._m0[_2182].x) * _2246) * _2247) + _2108;
        _2174 = (((_2233 * cbLight._m0[_2182].y) * _2246) * _2247) + _2109;
        _2176 = (((_2233 * cbLight._m0[_2182].z) * _2246) * _2247) + _2110;
    }
    float _2282;
    float _2284;
    float _2286;
    if (_1911)
    {
        _2282 = _2172;
        _2284 = _2174;
        _2286 = _2176;
    }
    else
    {
        uint _2293 = _1817 + 3u;
        uint _2297 = _1817 + 11u;
        float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _617) * 0.949999988079071044921875);
        float _2312 = _2311 * _2311;
        float _2313 = cbLight._m0[_2293].x + _694;
        float _2314 = cbLight._m0[_2293].y + _695;
        float _2315 = cbLight._m0[_2293].z + _696;
        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
        float _2320 = _2319 * _2313;
        float _2321 = _2319 * _2314;
        float _2322 = _2319 * _2315;
        float _2323 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2293].xyz));
        float _4178 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2327 = dot(vec3(_614, _615, _616), vec3(_2320, _2321, _2322));
        float _4189 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2331 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2320, _2321, _2322));
        float _4200 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _2312 * _2312;
        float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
        float _2348 = (exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2349 = 1.0 - _2312;
        float _2359 = (0.5 / (((_1985 * ((_2326 * _2349) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_1985 * _2349) + _2312) * _2326))) * _2326;
        float _4211 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2361 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
        float _2362 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2282 = (((_2348 * cbLight._m0[_2297].x) * _2361) * _2362) + _2172;
        _2284 = (((_2348 * cbLight._m0[_2297].y) * _2361) * _2362) + _2174;
        _2286 = (((_2348 * cbLight._m0[_2297].z) * _2361) * _2362) + _2176;
    }
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_1815.y == 0u)
    {
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2437;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2437;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2437;
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.x;
        uint _2464 = uint((float(_2452.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _2453))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _2453)));
        float _2474 = (log2(_2440 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2475 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        uint _2478 = uint(isnan(14.0) ? _2475 : (isnan(_2475) ? 14.0 : min(_2475, 14.0)));
        uvec4 _2483 = texelFetch(g_lightClusterGridBuffer, int(((_2478 << 2u) + (_2464 << 6u)) >> 2u));
        uint _2484 = _2483.x;
        uint _2485 = _2452.z;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((((1u << ((_2485 >> 4u) & 15u)) + 4294967295u) & _2484) == 0u) || ((_2485 & 240u) == 0u))
        {
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
        }
        else
        {
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            uint _2736 = 0u;
            uint _2745;
            bool _2746;
            for (;;)
            {
                _2745 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2736 << 2u)) >> 2u)).x;
                _2746 = _2745 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2746)
                {
                    frontier_phi_61_pred = _2730;
                    frontier_phi_61_pred_1 = _2735;
                    frontier_phi_61_pred_2 = _2734;
                    frontier_phi_61_pred_3 = _2733;
                    frontier_phi_61_pred_4 = _2732;
                    frontier_phi_61_pred_5 = _2731;
                }
                else
                {
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    uint _2860;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2745;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    for (;;)
                    {
                        uint _2864 = uint(findLSB(_2860)) + (_2736 << 5u);
                        uint _2861 = (_2860 + 4294967295u) & _2860;
                        uint _2866 = _2864 * 48u;
                        vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2886 = (_2864 * 48u) + 4u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2905 = (_2864 * 48u) + 8u;
                        vec3 _2916 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x));
                        float _2920 = _2880.x - _2438;
                        float _2921 = _2880.y - _2439;
                        float _2922 = _2880.z - _2440;
                        float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                        float _2926 = inversesqrt(_2923);
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2930 = dot(vec3(_721, _724, _727), vec3(_2927, _2928, _2929));
                        float _2935 = 1.0 - (_2923 * _2880.w);
                        float _4237 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2936 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2937 = sqrt(_2923) * _2899.w;
                        float _2940 = 1.39999997615814208984375 / (_2937 + 1.39999997615814208984375);
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2930) + _2941;
                        float _2947 = _2937 * _2937;
                        float _2951 = ((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2936) / ((_2947 * 0.699999988079071044921875) + 1.0);
                        float _2955 = (-0.0) - _2438;
                        float _2956 = (-0.0) - _2439;
                        float _2957 = (-0.0) - _2440;
                        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2972 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                        float _2973 = 1.0 - _781;
                        float _2980 = sqrt(1.0 - ((1.0 - (_2973 * _2973)) * (1.0 - (_2972 * _2972))));
                        float _2981 = _2980 * _2980;
                        float _2982 = _2981 * _2981;
                        float _2983 = _2962 + _2927;
                        float _2984 = _2963 + _2928;
                        float _2985 = _2964 + _2929;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2993 = dot(vec3(_721, _724, _727), vec3(_2962, _2963, _2964));
                        float _4253 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2997 = dot(vec3(_721, _724, _727), vec3(_2989 * _2983, _2989 * _2984, _2989 * _2985));
                        float _4264 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _3004 = ((_3000 * _3000) * (_2982 + (-1.0))) + 1.0;
                        float _3005 = _2940 * _2981;
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2930) + _3006;
                        float _4275 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _3011 = 1.0 - _2981;
                        float _3021 = (0.5 / (((_3010 * ((_2996 * _3011) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_3010 * _3011) + _2981) * _2996))) * _3010;
                        float _4286 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3032 = (((_2982 * 3.1415927410125732421875) * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) / ((_3004 * _3004) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125))) * _2936;
                        _2789 = (_2951 * _2899.x) + _2857;
                        _2790 = (_2951 * _2899.y) + _2858;
                        _2791 = (_2951 * _2899.z) + _2859;
                        _2786 = (_3032 * _2916.x) + _2854;
                        _2787 = (_3032 * _2916.y) + _2855;
                        _2788 = (_3032 * _2916.z) + _2856;
                        if (_2861 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2861;
                        }
                    }
                    frontier_phi_61_pred = _2786;
                    frontier_phi_61_pred_1 = _2791;
                    frontier_phi_61_pred_2 = _2790;
                    frontier_phi_61_pred_3 = _2789;
                    frontier_phi_61_pred_4 = _2788;
                    frontier_phi_61_pred_5 = _2787;
                }
                _2586 = frontier_phi_61_pred;
                _2596 = frontier_phi_61_pred_1;
                _2594 = frontier_phi_61_pred_2;
                _2592 = frontier_phi_61_pred_3;
                _2590 = frontier_phi_61_pred_4;
                _2588 = frontier_phi_61_pred_5;
                uint _2737 = _2736 + 1u;
                if (_2737 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2730 = _2586;
                    _2731 = _2588;
                    _2732 = _2590;
                    _2733 = _2592;
                    _2734 = _2594;
                    _2735 = _2596;
                    _2736 = _2737;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
        }
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.z;
        uint _2602 = (_2600 >> 8u) & 15u;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        if (((4294967295u << _2602) & _2484) == 0u)
        {
            _2698 = _2585;
            _2700 = _2587;
            _2702 = _2589;
            _2704 = _2591;
            _2706 = _2593;
            _2708 = _2595;
        }
        else
        {
            float _2723 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
            float _2724 = _2723 * _2438;
            float _2725 = _2723 * _2439;
            float _2726 = _2723 * _2440;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2602 < ((_2600 >> 12u) & 15u))
            {
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2837 = _2585;
                float _2838 = _2587;
                float _2839 = _2589;
                float _2840 = _2591;
                float _2841 = _2593;
                float _2842 = _2595;
                uint _2843 = _2602;
                uint _2852;
                bool _2853;
                for (;;)
                {
                    _2852 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                    _2853 = _2852 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2853)
                    {
                        frontier_phi_67_pred = _2840;
                        frontier_phi_67_pred_1 = _2841;
                        frontier_phi_67_pred_2 = _2842;
                        frontier_phi_67_pred_3 = _2839;
                        frontier_phi_67_pred_4 = _2838;
                        frontier_phi_67_pred_5 = _2837;
                    }
                    else
                    {
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3050 = _2837;
                        float _3051 = _2838;
                        float _3052 = _2839;
                        float _3053 = _2840;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        uint _3056 = _2852;
                        uint _3057;
                        vec4 _3082;
                        float _3083;
                        vec4 _3098;
                        vec3 _3110;
                        vec4 _3125;
                        vec4 _3141;
                        float _3187;
                        bool _3188;
                        for (;;)
                        {
                            uint _3067 = ((_2843 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3056));
                            _3057 = (_3056 + 4294967295u) & _3056;
                            uint _3069 = _3067 * 40u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            _3083 = _3082.w;
                            uint _3085 = (_3067 * 40u) + 4u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3067 * 40u) + 8u;
                            _3110 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x));
                            uint _3112 = (_3067 * 40u) + 16u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3128 = (_3067 * 40u) + 20u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3143 = (_3067 * 40u) + 24u;
                            vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3162 = (_3067 * 40u) + 28u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            _3187 = fma(_2440, _3175.z, fma(_2439, _3175.y, _3175.x * _2438)) + _3175.w;
                            _3188 = !((fma(_2440, _3156.z, fma(_2439, _3156.y, _3156.x * _2438)) + _3156.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3188)
                            {
                                float _3215 = _3082.x - _2438;
                                float _3216 = _3082.y - _2439;
                                float _3217 = _3082.z - _2440;
                                float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                                float _3221 = inversesqrt(_3218);
                                float _3222 = _3221 * _3215;
                                float _3223 = _3221 * _3216;
                                float _3224 = _3221 * _3217;
                                float _3228 = 1.0 - (_3218 / (_3083 * _3083));
                                float _4297 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3233 = sqrt(_3218) * _3098.w;
                                float _3235 = 1.39999997615814208984375 / (_3233 + 1.39999997615814208984375);
                                float _3236 = _3235 * _3235;
                                float _3239 = ((1.0 - _3236) * dot(vec3(_3222, _3223, _3224), vec3(_721, _724, _727))) + _3236;
                                float _3242 = _3233 * _3233;
                                float _3246 = (fma(_2440, _3125.z, fma(_2439, _3125.y, _3125.x * _2438)) + _3125.w) / _3187;
                                float _3247 = (fma(_2440, _3141.z, fma(_2439, _3141.y, _3141.x * _2438)) + _3141.w) / _3187;
                                float _3251 = 1.0 - dot(vec2(_3246, _3247), vec2(_3246, _3247));
                                float _4313 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3253 = _3252 * (((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3229) / ((_3242 * 0.699999988079071044921875) + 1.0));
                                float _3265 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                                float _3266 = 1.0 - _781;
                                float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                                float _3274 = _3273 * _3273;
                                float _3275 = _3274 * _3274;
                                float _3276 = _3222 - _2724;
                                float _3277 = _3223 - _2725;
                                float _3278 = _3224 - _2726;
                                float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                                float _3286 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2724, (-0.0) - _2725, (-0.0) - _2726));
                                float _4324 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3290 = dot(vec3(_721, _724, _727), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                                float _4335 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3293 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                                float _3298 = _3235 * _3274;
                                float _3299 = _3298 * _3298;
                                float _3305 = ((1.0 - _3299) * dot(vec3(_721, _724, _727), vec3(_3222, _3223, _3224))) + _3299;
                                float _4346 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3307 = 1.0 - _3274;
                                float _3317 = (0.5 / (((_3306 * ((_3289 * _3307) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3306 * _3307) + _3274) * _3289))) * _3306;
                                float _4357 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3327 = (_3252 * _3229) * (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) / ((_3297 * _3297) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3327 * _3110.x;
                                frontier_phi_73_pred_1 = _3327 * _3110.y;
                                frontier_phi_73_pred_2 = _3253 * _3098.z;
                                frontier_phi_73_pred_3 = _3253 * _3098.y;
                                frontier_phi_73_pred_4 = _3253 * _3098.x;
                                frontier_phi_73_pred_5 = _3327 * _3110.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3331 = frontier_phi_73_pred;
                            _3332 = frontier_phi_73_pred_1;
                            _3336 = frontier_phi_73_pred_2;
                            _3335 = frontier_phi_73_pred_3;
                            _3334 = frontier_phi_73_pred_4;
                            _3333 = frontier_phi_73_pred_5;
                            _3040 = _3334 + _3053;
                            _3041 = _3335 + _3054;
                            _3042 = _3336 + _3055;
                            _3037 = _3331 + _3050;
                            _3038 = _3332 + _3051;
                            _3039 = _3333 + _3052;
                            if (_3057 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3057;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3040;
                        frontier_phi_67_pred_1 = _3041;
                        frontier_phi_67_pred_2 = _3042;
                        frontier_phi_67_pred_3 = _3039;
                        frontier_phi_67_pred_4 = _3038;
                        frontier_phi_67_pred_5 = _3037;
                    }
                    _2705 = frontier_phi_67_pred;
                    _2707 = frontier_phi_67_pred_1;
                    _2709 = frontier_phi_67_pred_2;
                    _2703 = frontier_phi_67_pred_3;
                    _2701 = frontier_phi_67_pred_4;
                    _2699 = frontier_phi_67_pred_5;
                    uint _2844 = _2843 + 1u;
                    if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2837 = _2699;
                        _2838 = _2701;
                        _2839 = _2703;
                        _2840 = _2705;
                        _2841 = _2707;
                        _2842 = _2709;
                        _2843 = _2844;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2707;
                frontier_phi_55_56_ladder_1 = _2709;
                frontier_phi_55_56_ladder_2 = _2705;
                frontier_phi_55_56_ladder_3 = _2703;
                frontier_phi_55_56_ladder_4 = _2701;
                frontier_phi_55_56_ladder_5 = _2699;
            }
            else
            {
                frontier_phi_55_56_ladder = _2593;
                frontier_phi_55_56_ladder_1 = _2595;
                frontier_phi_55_56_ladder_2 = _2591;
                frontier_phi_55_56_ladder_3 = _2589;
                frontier_phi_55_56_ladder_4 = _2587;
                frontier_phi_55_56_ladder_5 = _2585;
            }
            _2698 = frontier_phi_55_56_ladder_5;
            _2700 = frontier_phi_55_56_ladder_4;
            _2702 = frontier_phi_55_56_ladder_3;
            _2704 = frontier_phi_55_56_ladder_2;
            _2706 = frontier_phi_55_56_ladder;
            _2708 = frontier_phi_55_56_ladder_1;
        }
        float _2713 = isnan(1.0) ? _765 : (isnan(_765) ? 1.0 : min(_765, 1.0));
        _2497 = (_2713 * _2704) + _1949;
        _2499 = (_2713 * _2706) + _1951;
        _2501 = (_2713 * _2708) + _1953;
        _2503 = ((_2698 * 0.039999999105930328369140625) * _2713) + _2282;
        _2505 = ((_2700 * 0.039999999105930328369140625) * _2713) + _2284;
        _2507 = ((_2702 * 0.039999999105930328369140625) * _2713) + _2286;
    }
    else
    {
        _2497 = _1949;
        _2499 = _1951;
        _2501 = _1953;
        _2503 = _2282;
        _2505 = _2284;
        _2507 = _2286;
    }
    float _4373 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4384 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4395 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    uint _2527 = _234 + 6u;
    float _2535 = _702 / cbSceneParam._m0[86u].x;
    float _2536 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2610 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2611 = _2610 / _635;
        float _2622 = _2611 * _687;
        float _2623 = _688 * _2611;
        float _2624 = (-0.0) - _2623;
        float _2626 = _2611 * _689;
        float _2628 = (cbSceneParam._m0[77u].w * _2624) / _2610;
        float _2629 = _2628 + cbSceneParam._m0[79u].w;
        float _2630 = cbSceneParam._m0[79u].w - _2623;
        float _2636 = sqrt(((_2622 * _2622) + (_2623 * _2623)) + (_2626 * _2626));
        float _2639 = (1.0 - (cbSceneParam._m0[77u].w / _2610)) * _2636;
        float _2644 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2646 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2799;
        if (abs((_2624 - _2628) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2799 = ((((_2629 > 0.0) ? exp2(_2644 * _2629) : (2.0 - exp2(_2646 * _2629))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2639;
        }
        else
        {
            float _2759 = 1.0 / cbSceneParam._m0[80u].x;
            float _2760 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : max(_2629, _2630));
            float _2761 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : min(_2629, _2630));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            _2799 = ((abs(_2636 / _2624) * cbSceneParam._m0[80u].y) * ((((_2770 - _2771) * 2.0) - ((exp2(_2644 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0)))) - exp2(_2644 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0))))) * _2759)) - ((exp2(_2646 * _2770) - exp2(_2646 * _2771)) * _2759))) + (_2639 * cbSceneParam._m0[80u].z);
        }
        vec4 _2801 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2810 = exp2((_2799 * (-1.44269502162933349609375)) * (1.0 - _2801.w));
        float _2811 = log2(_2810);
        float _2827 = log2(_2555);
        _2648 = (exp2(_2827 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].x)) * _2801.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2650 = (exp2(_2827 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].y)) * _2801.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2652 = (exp2(_2827 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].z)) * _2801.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2654 = _2810 * _2555;
    }
    else
    {
        _2648 = _2552;
        _2650 = _2553;
        _2652 = _2554;
        _2654 = _2555;
    }
    float _2666 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2667 = _2666 == 3.0;
    float _2668 = log2(_2654);
    float _2675 = exp2(_2668 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2497 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _765))) + ((_2503 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1570)) * cbPerFrame._m0[3u].x));
    float _2676 = exp2(_2668 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2499 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _765))) + ((_2505 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1570)) * cbPerFrame._m0[3u].x));
    float _2677 = exp2(_2668 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2501 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _765))) + ((_2507 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1570)) * cbPerFrame._m0[3u].x));
    float _2686 = (_2666 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2686 * (_2667 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2648)));
    SV_Target.y = _2686 * (_2667 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2650)));
    SV_Target.z = _2686 * (_2667 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.w = cbInstanceData._m0[_2527].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2527].w;
}


