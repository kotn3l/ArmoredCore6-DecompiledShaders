#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1501;
float _4142;
float _4143;
float _4144;
float _4145;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4154 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4165 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4176 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _426 = _424.x;
    float _438 = dot(vec4(_426, _424.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _455 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _389.x) * 2.0) - ((((_426 - _438) * cbMtdParam._m0[24u].z) + _438) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4187 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _463 = (_456 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _464 = (_456 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _465 = (_456 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _504 = _502.x;
    float _514 = dot(vec4(_504, _502.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _528 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _389.y) * 2.0) - ((((_504 - _514) * cbMtdParam._m0[24u].z) + _514) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4198 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _536 = (_529 * ((_482.x * cbMtdParam._m0[13u].x) - _463)) + _463;
    float _537 = (_529 * ((_482.y * cbMtdParam._m0[13u].y) - _464)) + _464;
    float _538 = (_529 * ((_482.z * cbMtdParam._m0[13u].z) - _465)) + _465;
    float _542 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _536;
    float _545 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _537;
    float _548 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _538;
    float _555 = ((_536 - _542) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) + _542;
    float _556 = ((_537 - _545) * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) + _545;
    float _557 = ((_538 - _548) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) + _548;
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _618 = _616.x;
    float _619 = _616.y;
    float _620 = _616.z;
    float _627 = ((_599.x - _618) * _456) + _618;
    float _628 = ((_599.y - _619) * _456) + _619;
    float _629 = ((_599.z - _620) * _456) + _620;
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _654 = ((_641.z - _629) * _529) + _629;
    float _657 = ((((_641.x - _627) * _529) + _627) * 2.0) + (-1.0);
    float _658 = ((((_641.y - _628) * _529) + _628) * 2.0) + (-1.0);
    float _659 = dot(vec2(_657, _658), vec2(_657, _658));
    float _4209 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _664 = sqrt(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))));
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _694 = (_657 + ((((_574.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_682.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _695 = (_658 + ((((_574.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_682.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _698 = fma(_664, _256, fma(_695, _263, _694 * _249));
    float _701 = fma(_664, _257, fma(_695, _264, _694 * _250));
    float _704 = fma(_664, _258, fma(_695, _265, _694 * _251));
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    vec4 _735 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _737 = _735.x;
    float _738 = 1.0 - _737;
    float _744 = (cbMtdParam._m0[19u].x + dot(vec4(_708 * _698, _708 * _701, _708 * _704, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_737 - _738) * cbMtdParam._m0[24u].w) + _738) * cbMtdParam._m0[21u].z);
    float _4220 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _745 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _747 = (-0.0) - cbMtdParam._m0[24u].x;
    float _749 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _749 : (isnan(_749) ? 1.0 : min(_749, 1.0));
    float _757 = _745 - ((_745 * TEXCOORD_8.x) * _750);
    float _758 = _745 - ((_745 * TEXCOORD_8.y) * _750);
    float _759 = _745 - ((_745 * TEXCOORD_8.z) * _750);
    float _766 = (_757 * (cbMtdParam._m0[17u].x - _555)) + _555;
    float _767 = (_758 * (cbMtdParam._m0[17u].y - _556)) + _556;
    float _768 = (_759 * (cbMtdParam._m0[17u].z - _557)) + _557;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _782 = _780.x;
    float _783 = 1.0 - _782;
    float _809 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_782 - _783) * cbMtdParam._m0[24u].y) + _783) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4241 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _810 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _818 = ((((cbMtdParam._m0[10u].x - _766) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _810) + _766;
    float _819 = ((((cbMtdParam._m0[10u].y - _767) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _810) + _767;
    float _820 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _768)) * _810) + _768;
    float _825 = (((_574.z - _654) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _654;
    float _829 = ((_682.z - _825) * cbMtdParam._m0[19u].w) + _825;
    vec4 _843 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _850 = (_843.x * 2.0) + (-1.0);
    float _851 = (_843.y * 2.0) + (-1.0);
    float _852 = dot(vec2(_850, _851), vec2(_850, _851));
    float _4252 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _860 = ((_843.z - _829) * _757) + _829;
    float _863 = ((cbMtdParam._m0[23u].y - _860) * _810) + _860;
    vec4 _884 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _890 = (_884.x * 2.0) + (-1.0);
    float _891 = (_884.y * 2.0) + (-1.0);
    float _892 = dot(vec2(_890, _891), vec2(_890, _891));
    float _4263 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _907 = ((sqrt(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) - _664) * _759) + _664;
    float _910 = (((_850 - _694) * _757) + _694) + (cbMtdParam._m0[21u].x * _694);
    float _911 = (((_851 - _695) * _758) + _695) + (cbMtdParam._m0[21u].x * _695);
    float _922 = (((_890 - _910) + (_910 * cbMtdParam._m0[22u].z)) * _810) + _910;
    float _923 = (((_891 - _911) + (_911 * cbMtdParam._m0[22u].z)) * _810) + _911;
    float _924 = (_810 * (sqrt(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) - _907)) + _907;
    float _926 = cbMtdParam._m0[22u].x + _682.w;
    float _929 = fma(_924, _256, fma(_923, _263, _922 * _249));
    float _932 = fma(_924, _257, fma(_923, _264, _922 * _250));
    float _935 = fma(_924, _258, fma(_923, _265, _922 * _251));
    float _939 = inversesqrt(dot(vec3(_929, _932, _935), vec3(_929, _932, _935)));
    float _940 = _939 * _929;
    float _941 = _939 * _932;
    float _942 = _939 * _935;
    float _4274 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _943 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4296 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4307 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4318 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _961 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1012 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1002);
    float _1013 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1002);
    float _1014 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1002);
    float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
    float _1019 = _1012 * _1018;
    float _1020 = _1013 * _1018;
    float _1021 = _1014 * _1018;
    vec4 _1026 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1028 = _1026.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1182 = sqrt(((_1012 * _1012) + (_1013 * _1013)) + (_1014 * _1014));
        float _1188 = (cbMatDynParam._m0[5u].x * _1182) + cbMatDynParam._m0[5u].y;
        float _4329 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1193 = (cbMatDynParam._m0[5u].z * _1182) + cbMatDynParam._m0[5u].w;
        float _4340 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) - _1189)) + _1189) < ((_1028 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1039 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1040 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1058 = fma(_942, cbSceneParam._m0[5u].z, fma(_941, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _940));
    float _1061 = fma(_942, cbSceneParam._m0[6u].z, fma(_941, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _940));
    float _1064 = fma(_942, cbSceneParam._m0[7u].z, fma(_941, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _940));
    uint _1077 = _287 + 9u;
    uint _1078 = _1077 + uint(cbMatDynParam._m0[0u].w);
    float _1084 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * cbInstanceData._m0[_1078].x;
    float _1085 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * cbInstanceData._m0[_1078].y;
    float _1086 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * cbInstanceData._m0[_1078].z;
    float _4351 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1087 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _4362 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1089 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    vec4 _1098 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1039, cbSceneParam._m0[86u].y * _1040));
    float _1102 = ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * TEXCOORD_5.w) * _1098.x;
    float _1103 = dot(vec3(_940, _941, _942), vec3(_1019, _1020, _1021));
    float _1106 = _1103 * 2.0;
    float _1110 = (_1106 * _940) - _1019;
    float _1111 = (_1106 * _941) - _1020;
    float _1112 = (_1106 * _942) - _1021;
    float _1116 = abs(dot(vec3(_1019, _1020, _1021), vec3(_940, _941, _942)));
    float _4384 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1118 = sqrt(_943);
    float _1131 = exp2((_1118 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1118 * 3.0));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1500;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1225 = fma(_1171, cbModelParam._m0[26u].z, fma(_1167, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163));
        float _1229 = fma(_1171, cbModelParam._m0[27u].z, fma(_1167, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163));
        float _1233 = fma(_1171, cbModelParam._m0[28u].z, fma(_1167, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163));
        float _1258 = _1163 + _940;
        float _1259 = _1167 + _941;
        float _1260 = _1171 + _942;
        float _1270 = fma(_1260, cbModelParam._m0[26u].z, fma(_1259, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1258)) - _1225;
        float _1271 = fma(_1260, cbModelParam._m0[27u].z, fma(_1259, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1258)) - _1229;
        float _1272 = fma(_1260, cbModelParam._m0[28u].z, fma(_1259, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1258)) - _1233;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1225 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1229 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[34u].z) + ((((((_1233 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1328 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1294.x + (-0.5));
        float _1330 = _1328 * (_1294.y + (-0.5));
        float _1331 = _1328 * (_1294.z + (-0.5));
        float _1338 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1301.x + (-0.5));
        float _1340 = _1338 * (_1301.y + (-0.5));
        float _1341 = _1338 * (_1301.z + (-0.5));
        float _1348 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1308.x + (-0.5));
        float _1350 = _1348 * (_1308.y + (-0.5));
        float _1351 = _1348 * (_1308.z + (-0.5));
        float _1358 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1315.x + (-0.5));
        float _1360 = _1358 * (_1315.y + (-0.5));
        float _1361 = _1358 * (_1315.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1382 = (dot(vec3(_940, _941, _942), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4410 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1392 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4421 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4432 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_1394 + 1.0))) + _1399) * _1362;
        float _1409 = _1330 * 0.5;
        float _1410 = _1340 * 0.5;
        float _1411 = _1350 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_940, _941, _942), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4443 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4454 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4465 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_1436 + 1.0))) + _1441) * _1363;
        float _1451 = _1331 * 0.5;
        float _1452 = _1341 * 0.5;
        float _1453 = _1351 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_940, _941, _942), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4498 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1478 + 1.0))) + _1483) * _1364;
        _1500 = _1331;
        _1502 = _1330;
        _1503 = _1329;
        _1504 = _1341;
        _1505 = _1340;
        _1506 = _1339;
        _1507 = _1351;
        _1508 = _1350;
        _1509 = _1349;
        _1510 = _1364;
        _1511 = _1363;
        _1512 = _1362;
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
    }
    else
    {
        _1500 = _1501;
        _1502 = _1501;
        _1503 = _1501;
        _1504 = _1501;
        _1505 = _1501;
        _1506 = _1501;
        _1507 = _1501;
        _1508 = _1501;
        _1509 = _1501;
        _1510 = _1501;
        _1511 = _1501;
        _1512 = _1501;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1542 = fma(_1171, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163));
        float _1546 = fma(_1171, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163));
        float _1550 = fma(_1171, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163));
        float _1573 = _1163 + _940;
        float _1574 = _1167 + _941;
        float _1575 = _1171 + _942;
        float _1585 = fma(_1575, cbModelParam._m0[30u].z, fma(_1574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1573)) - _1542;
        float _1586 = fma(_1575, cbModelParam._m0[31u].z, fma(_1574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1573)) - _1546;
        float _1587 = fma(_1575, cbModelParam._m0[32u].z, fma(_1574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1573)) - _1550;
        float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
        float _1604 = ((_1591 * _1585) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1542 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1591 * _1586) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1546 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1591 * _1587) / cbModelParam._m0[35u].z) + ((((((_1550 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        float _1641 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1608.x + (-0.5));
        float _1643 = _1641 * (_1608.y + (-0.5));
        float _1644 = _1641 * (_1608.z + (-0.5));
        float _1651 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1615.x + (-0.5));
        float _1653 = _1651 * (_1615.y + (-0.5));
        float _1654 = _1651 * (_1615.z + (-0.5));
        float _1661 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1622.x + (-0.5));
        float _1663 = _1661 * (_1622.y + (-0.5));
        float _1664 = _1661 * (_1622.z + (-0.5));
        float _1671 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1629.x + (-0.5));
        float _1673 = _1671 * (_1629.y + (-0.5));
        float _1674 = _1671 * (_1629.z + (-0.5));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = _1642 * 0.5;
        float _1679 = _1652 * 0.5;
        float _1680 = _1662 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_940, _941, _942), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4539 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4550 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4561 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_1705 + 1.0))) + _1710) * _1675;
        float _1720 = _1643 * 0.5;
        float _1721 = _1653 * 0.5;
        float _1722 = _1663 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_940, _941, _942), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4572 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4583 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4594 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_1747 + 1.0))) + _1752) * _1676;
        float _1762 = _1644 * 0.5;
        float _1763 = _1654 * 0.5;
        float _1764 = _1664 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_940, _941, _942), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4605 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4616 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4627 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_1789 + 1.0))) + _1794) * _1677;
        _1811 = _1644;
        _1812 = _1643;
        _1813 = _1642;
        _1814 = _1654;
        _1815 = _1653;
        _1816 = _1652;
        _1817 = _1664;
        _1818 = _1663;
        _1819 = _1662;
        _1820 = _1677;
        _1821 = _1676;
        _1822 = _1675;
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
    }
    else
    {
        _1811 = _1501;
        _1812 = _1501;
        _1813 = _1501;
        _1814 = _1501;
        _1815 = _1501;
        _1816 = _1501;
        _1817 = _1501;
        _1818 = _1501;
        _1819 = _1501;
        _1820 = _1501;
        _1821 = _1501;
        _1822 = _1501;
        _1823 = 0.0;
        _1824 = 0.0;
        _1825 = 0.0;
    }
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1513)) + _1513;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1514)) + _1514;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1515)) + _1515;
    float _1858 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1836, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1836, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1836, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1835));
    float _1879 = _1110 * 0.5;
    float _1880 = _1111 * 0.5;
    float _1881 = _1112 * 0.5;
    float _1882 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1885 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1888 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1922;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1895 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1500, _1504, _1507, _1510));
        float _1899 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1502, _1505, _1508, _1511));
        float _1903 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1503, _1506, _1509, _1512));
        float _1910 = dot(vec4(cbModelParam._m0[39u]), vec4(_1879, _1880, _1881, 1.0));
        _1922 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1922 = 1.0;
    }
    float _1933;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1924 = dot(vec4(cbModelParam._m0[40u]), vec4(_1879, _1880, _1881, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1924) ? 0.0 : (isnan(0.0) ? _1924 : max(0.0, _1924))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1937 = (_1933 * cbModelParam._m0[1u].x) + (_1922 * (1.0 - cbModelParam._m0[1u].x));
    float _1947 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _943);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1947 : min(cbModelParam._m0[25u].z, _1947));
    float _2029;
    float _2031;
    float _2033;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1996 = fma(_1171, cbModelParam._m0[13u].z, fma(_1167, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163)) + cbModelParam._m0[13u].w;
        float _2000 = fma(_1171, cbModelParam._m0[14u].z, fma(_1167, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163)) + cbModelParam._m0[14u].w;
        float _2004 = fma(_1171, cbModelParam._m0[15u].z, fma(_1167, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163)) + cbModelParam._m0[15u].w;
        float _2007 = fma(_1112, cbModelParam._m0[13u].z, fma(_1111, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1110));
        float _2010 = fma(_1112, cbModelParam._m0[14u].z, fma(_1111, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1110));
        float _2013 = fma(_1112, cbModelParam._m0[15u].z, fma(_1111, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1110));
        float _2041;
        if (_2007 > 0.0)
        {
            _2041 = abs((1.0 - _1996) / _2007);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1996 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2041 = frontier_phi_17_15_ladder;
        }
        float _2211;
        if (_2010 > 0.0)
        {
            _2211 = abs((1.0 - _2000) / _2010);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2000 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2211 = frontier_phi_26_22_ladder;
        }
        float _2506;
        if (_2013 > 0.0)
        {
            _2506 = abs((1.0 - _2004) / _2013);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2004 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2506 = frontier_phi_38_33_ladder;
        }
        float _2508 = isnan(_2211) ? _2041 : (isnan(_2041) ? _2211 : min(_2041, _2211));
        float _2509 = isnan(_2506) ? _2508 : (isnan(_2508) ? _2506 : min(_2508, _2506));
        float _2513 = (_2509 * _2007) + _1996;
        float _2514 = (_2509 * _2010) + _2000;
        float _2515 = (_2509 * _2013) + _2004;
        float _2516 = _2509 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2516;
        float _2520 = _2516 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 > _2520) || ((_2514 < _2518) || ((_2513 < _2518) || (_2513 > _2520))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2515, cbModelParam._m0[9u].z, fma(_2514, cbModelParam._m0[9u].y, _2513 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2515, cbModelParam._m0[10u].z, fma(_2514, cbModelParam._m0[10u].y, _2513 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2515, cbModelParam._m0[11u].z, fma(_2514, cbModelParam._m0[11u].y, _2513 * cbModelParam._m0[11u].x))), _1948);
            frontier_phi_16_38_ladder = _2660.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2660.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2660.x * cbModelParam._m0[1u].y;
        }
        _2029 = frontier_phi_16_38_ladder_2;
        _2031 = frontier_phi_16_38_ladder_1;
        _2033 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1110, _1111, _1112), _1948);
        _2029 = _2017.x * cbModelParam._m0[1u].y;
        _2031 = _2017.y * cbModelParam._m0[1u].y;
        _2033 = _2017.z * cbModelParam._m0[1u].y;
    }
    float _2037 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _943);
    float _2038 = isnan(_2037) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2037 : min(cbModelParam._m0[25u].w, _2037));
    float _2128;
    float _2130;
    float _2132;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2092 = fma(_1171, cbModelParam._m0[21u].z, fma(_1167, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163)) + cbModelParam._m0[21u].w;
        float _2096 = fma(_1171, cbModelParam._m0[22u].z, fma(_1167, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163)) + cbModelParam._m0[22u].w;
        float _2100 = fma(_1171, cbModelParam._m0[23u].z, fma(_1167, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163)) + cbModelParam._m0[23u].w;
        float _2103 = fma(_1112, cbModelParam._m0[21u].z, fma(_1111, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1110));
        float _2106 = fma(_1112, cbModelParam._m0[22u].z, fma(_1111, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1110));
        float _2109 = fma(_1112, cbModelParam._m0[23u].z, fma(_1111, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1110));
        float _2216;
        if (_2103 > 0.0)
        {
            _2216 = abs((1.0 - _2092) / _2103);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2092 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2216 = frontier_phi_28_24_ladder;
        }
        float _2533;
        if (_2106 > 0.0)
        {
            _2533 = abs((1.0 - _2096) / _2106);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2096 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2533 = frontier_phi_40_35_ladder;
        }
        float _2860;
        if (_2109 > 0.0)
        {
            _2860 = abs((1.0 - _2100) / _2109);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2100 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2860 = frontier_phi_50_47_ladder;
        }
        float _2862 = isnan(_2533) ? _2216 : (isnan(_2216) ? _2533 : min(_2216, _2533));
        float _2863 = isnan(_2860) ? _2862 : (isnan(_2862) ? _2860 : min(_2862, _2860));
        float _2867 = (_2863 * _2103) + _2092;
        float _2868 = (_2863 * _2106) + _2096;
        float _2869 = (_2863 * _2109) + _2100;
        float _2870 = _2863 * 9.9999997473787516355514526367188e-05;
        float _2871 = (-1.0) - _2870;
        float _2873 = _2870 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2869 > _2873) || ((_2869 < _2871) || ((_2868 > _2873) || ((_2868 < _2871) || ((_2867 < _2871) || (_2867 > _2873))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2869, cbModelParam._m0[17u].z, fma(_2868, cbModelParam._m0[17u].y, _2867 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2869, cbModelParam._m0[18u].z, fma(_2868, cbModelParam._m0[18u].y, _2867 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2869, cbModelParam._m0[19u].z, fma(_2868, cbModelParam._m0[19u].y, _2867 * cbModelParam._m0[19u].x))), _2038);
            frontier_phi_25_50_ladder = _2987.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2987.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2987.x * cbModelParam._m0[1u].z;
        }
        _2128 = frontier_phi_25_50_ladder_2;
        _2130 = frontier_phi_25_50_ladder_1;
        _2132 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1110, _1111, _1112), _2038);
        _2128 = _2112.x * cbModelParam._m0[1u].z;
        _2130 = _2112.y * cbModelParam._m0[1u].z;
        _2132 = _2112.z * cbModelParam._m0[1u].z;
    }
    float _2144 = ((((1.0 - _1131) * ((_1118 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1131 * _1118)) * _1102;
    float _2145 = _2144 * ((cbModelParam._m0[1u].w * (_2128 - _2029)) + _2029);
    float _2146 = _2144 * ((cbModelParam._m0[1u].w * (_2130 - _2031)) + _2031);
    float _2147 = _2144 * ((cbModelParam._m0[1u].w * (_2132 - _2033)) + _2033);
    float _2150 = fma(_2147, cbSceneParam._m0[89u].z, fma(_2146, cbSceneParam._m0[89u].y, _2145 * cbSceneParam._m0[89u].x));
    float _2153 = fma(_2147, cbSceneParam._m0[90u].z, fma(_2146, cbSceneParam._m0[90u].y, _2145 * cbSceneParam._m0[90u].x));
    float _2156 = fma(_2147, cbSceneParam._m0[91u].z, fma(_2146, cbSceneParam._m0[91u].y, _2145 * cbSceneParam._m0[91u].x));
    float _2190 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2194 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2203 = _2190 / _2202;
    float _2204 = _2194 / _2202;
    float _2205 = _2198 / _2202;
    float _2352;
    float _2353;
    float _2354;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2232 = ((uint(_2205 > cbSceneParam._m0[59u].y) + uint(_2205 > cbSceneParam._m0[59u].x)) + uint(_2205 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2233 = _2232 + 43u;
        uint _2241 = _2232 + 44u;
        uint _2249 = _2232 + 45u;
        uint _2257 = _2232 + 46u;
        float _2268 = fma(_2202, cbSceneParam._m0[_2233].w, fma(_2198, cbSceneParam._m0[_2233].z, fma(_2194, cbSceneParam._m0[_2233].y, _2190 * cbSceneParam._m0[_2233].x)));
        float _2272 = fma(_2202, cbSceneParam._m0[_2241].w, fma(_2198, cbSceneParam._m0[_2241].z, fma(_2194, cbSceneParam._m0[_2241].y, _2190 * cbSceneParam._m0[_2241].x)));
        float _2280 = fma(_2202, cbSceneParam._m0[_2257].w, fma(_2198, cbSceneParam._m0[_2257].z, fma(_2194, cbSceneParam._m0[_2257].y, _2190 * cbSceneParam._m0[_2257].x)));
        float _2285 = cbSceneParam._m0[33u].z * _2280;
        float _2287 = cbSceneParam._m0[33u].w * _2280;
        float _2290 = fma(_2202, cbSceneParam._m0[_2249].w, fma(_2198, cbSceneParam._m0[_2249].z, fma(_2194, cbSceneParam._m0[_2249].y, _2190 * cbSceneParam._m0[_2249].x))) / _2280;
        float _2338 = (cbSceneParam._m0[33u].x - sqrt(((_2204 * _2204) + (_2203 * _2203)) + (_2205 * _2205))) * cbSceneParam._m0[33u].y;
        float _4753 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2345 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2285 + _2268) / _2280, (_2287 + _2272) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2287 + _2268) / _2280, (_2272 - _2285) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 - _2285) / _2280, (_2272 - _2287) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 - _2287) / _2280, (_2285 + _2272) / _2280), _2290), 0.0)).x), vec4(0.25)));
        _2352 = 1.0 - (_2345 * cbSceneParam._m0[34u].x);
        _2353 = 1.0 - (_2345 * cbSceneParam._m0[34u].y);
        _2354 = 1.0 - (_2345 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2352 = 1.0;
        _2353 = 1.0;
        _2354 = 1.0;
    }
    float _2418;
    float _2420;
    float _2422;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2406 = fma(_2202, cbSceneParam._m0[63u].w, fma(_2198, cbSceneParam._m0[63u].z, fma(_2194, cbSceneParam._m0[63u].y, _2190 * cbSceneParam._m0[63u].x)));
        float _2407 = fma(_2202, cbSceneParam._m0[60u].w, fma(_2198, cbSceneParam._m0[60u].z, fma(_2194, cbSceneParam._m0[60u].y, _2190 * cbSceneParam._m0[60u].x))) / _2406;
        float _2408 = fma(_2202, cbSceneParam._m0[61u].w, fma(_2198, cbSceneParam._m0[61u].z, fma(_2194, cbSceneParam._m0[61u].y, _2190 * cbSceneParam._m0[61u].x))) / _2406;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2407 >= cbSceneParam._m0[64u].x) && (_2408 >= cbSceneParam._m0[64u].y)) && (_2407 <= cbSceneParam._m0[64u].z)) && (_2408 <= cbSceneParam._m0[64u].w))
        {
            float _2546 = fma(_2202, cbSceneParam._m0[62u].w, fma(_2198, cbSceneParam._m0[62u].z, fma(_2194, cbSceneParam._m0[62u].y, _2190 * cbSceneParam._m0[62u].x))) / _2406;
            float _2550 = isnan(cbSceneParam._m0[41u].w) ? _2546 : (isnan(_2546) ? cbSceneParam._m0[41u].w : max(_2546, cbSceneParam._m0[41u].w));
            float _2593 = (cbSceneParam._m0[33u].x - sqrt(((_2204 * _2204) + (_2203 * _2203)) + (_2205 * _2205))) * cbSceneParam._m0[33u].y;
            float _4769 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
            float _2600 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2407, cbSceneParam._m0[33u].w + _2408), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2407, _2408 - cbSceneParam._m0[33u].z), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2407 - cbSceneParam._m0[33u].z, _2408 - cbSceneParam._m0[33u].w), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2407 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2408), _2550), 0.0)).x), vec4(0.25)));
            float _2604 = 1.0 - (_2600 * cbSceneParam._m0[34u].x);
            float _2605 = 1.0 - (_2600 * cbSceneParam._m0[34u].y);
            float _2606 = 1.0 - (_2600 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2606) ? _2354 : (isnan(_2354) ? _2606 : min(_2354, _2606));
            frontier_phi_37_36_ladder_1 = isnan(_2605) ? _2353 : (isnan(_2353) ? _2605 : min(_2353, _2605));
            frontier_phi_37_36_ladder_2 = isnan(_2604) ? _2352 : (isnan(_2352) ? _2604 : min(_2352, _2604));
        }
        else
        {
            frontier_phi_37_36_ladder = _2354;
            frontier_phi_37_36_ladder_1 = _2353;
            frontier_phi_37_36_ladder_2 = _2352;
        }
        _2418 = frontier_phi_37_36_ladder_2;
        _2420 = frontier_phi_37_36_ladder_1;
        _2422 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2418 = _2352;
        _2420 = _2353;
        _2422 = _2354;
    }
    uvec4 _2427 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2429 = _2427.x * 14u;
    uint _2430 = _2429 + 13u;
    float _2437 = _1102 + (-1.0);
    float _2442 = (cbLight._m0[_2430].x * _2437) + 1.0;
    float _2443 = (cbLight._m0[_2430].y * _2437) + 1.0;
    float _2444 = (cbLight._m0[_2430].z * _2437) + 1.0;
    float _2445 = (cbLight._m0[_2430].w * _2437) + 1.0;
    uint _2446 = _2429 + 5u;
    float _2452 = isnan(1.0) ? _2443 : (isnan(_2443) ? 1.0 : min(_2443, 1.0));
    uint _2456 = _2429 + 4u;
    float _2465 = isnan(1.0) ? _2442 : (isnan(_2442) ? 1.0 : min(_2442, 1.0));
    uint _2469 = _2429 | 1u;
    float _2480 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_940, _941, _942));
    float _2483 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_940, _941, _942));
    float _4805 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _4816 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2488 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * 0.3183098733425140380859375;
    float _2490 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * 0.3183098733425140380859375;
    float _2497 = ((cbLight._m0[_2446].x * _2452) * _2490) + (((cbLight._m0[_2456].x * _2418) * _2465) * _2488);
    float _2498 = ((_2452 * cbLight._m0[_2446].y) * _2490) + (((cbLight._m0[_2456].y * _2420) * _2465) * _2488);
    float _2499 = ((_2452 * cbLight._m0[_2446].z) * _2490) + (((cbLight._m0[_2456].z * _2422) * _2465) * _2488);
    uvec4 _2503 = floatBitsToUint(cbLight._m0[_2429 + 12u]);
    bool _2505 = _2503.x == 0u;
    float _2607;
    float _2609;
    float _2611;
    if (_2505)
    {
        _2607 = _2497;
        _2609 = _2498;
        _2611 = _2499;
    }
    else
    {
        uint _2615 = _2429 + 6u;
        float _2631 = (dot(vec3(cbLight._m0[_2429 + 2u].xyz), vec3(_940, _941, _942)) * 0.5) + 0.5;
        float _2632 = _2631 * _2631;
        float _4827 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2633 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2634 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        _2607 = (((cbLight._m0[_2615].x * 0.3183098733425140380859375) * _2633) * _2634) + _2497;
        _2609 = (((cbLight._m0[_2615].y * 0.3183098733425140380859375) * _2633) * _2634) + _2498;
        _2611 = (((cbLight._m0[_2615].z * 0.3183098733425140380859375) * _2633) * _2634) + _2499;
    }
    bool _2614 = _2503.y == 0u;
    float _2669;
    float _2671;
    float _2673;
    if (_2614)
    {
        _2669 = _2607;
        _2671 = _2609;
        _2673 = _2611;
    }
    else
    {
        uint _2831 = _2429 + 7u;
        float _2847 = (dot(vec3(cbLight._m0[_2429 + 3u].xyz), vec3(_940, _941, _942)) * 0.5) + 0.5;
        float _2848 = _2847 * _2847;
        float _4843 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2849 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2850 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2669 = (((cbLight._m0[_2831].x * 0.3183098733425140380859375) * _2849) * _2850) + _2607;
        _2671 = (((cbLight._m0[_2831].y * 0.3183098733425140380859375) * _2849) * _2850) + _2609;
        _2673 = (((cbLight._m0[_2831].z * 0.3183098733425140380859375) * _2849) * _2850) + _2611;
    }
    uint _2676 = _2429 + 8u;
    float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _943) * 0.949999988079071044921875);
    float _2690 = _2689 * _2689;
    float _2691 = cbLight._m0[_2429].x + _1019;
    float _2692 = cbLight._m0[_2429].y + _1020;
    float _2693 = cbLight._m0[_2429].z + _1021;
    float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
    float _2698 = _2697 * _2691;
    float _2699 = _2697 * _2692;
    float _2700 = _2697 * _2693;
    float _2701 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2429].xyz));
    float _4859 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
    float _4870 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _2705 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
    float _2706 = dot(vec3(_940, _941, _942), vec3(_2698, _2699, _2700));
    float _4881 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
    float _2710 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2698, _2699, _2700));
    float _4892 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2714 = _2690 * _2690;
    float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
    float _2729 = (exp2(log2(1.0 - (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2730 = 1.0 - _2690;
    float _2741 = (0.5 / (((_2705 * ((_2704 * _2730) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2730) + _2690) * _2704))) * _2704;
    float _4903 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2743 = (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
    uint _2757 = _2429 + 9u;
    float _2768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _943) * 0.949999988079071044921875);
    float _2769 = _2768 * _2768;
    float _2770 = cbLight._m0[_2469].x + _1019;
    float _2771 = cbLight._m0[_2469].y + _1020;
    float _2772 = cbLight._m0[_2469].z + _1021;
    float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
    float _2777 = _2776 * _2770;
    float _2778 = _2776 * _2771;
    float _2779 = _2776 * _2772;
    float _2780 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2469].xyz));
    float _4914 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2783 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
    float _2784 = dot(vec3(_940, _941, _942), vec3(_2777, _2778, _2779));
    float _4925 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2787 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
    float _2788 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2777, _2778, _2779));
    float _4936 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
    float _2792 = _2769 * _2769;
    float _2796 = ((_2787 * _2787) * (_2792 + (-1.0))) + 1.0;
    float _2805 = (exp2(log2(1.0 - (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2806 = 1.0 - _2769;
    float _2816 = (0.5 / (((_2705 * ((_2783 * _2806) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2806) + _2769) * _2783))) * _2783;
    float _4947 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
    float _2818 = (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2792 / ((_2796 * _2796) * 3.141590118408203125));
    float _2828 = (((_2805 * cbLight._m0[_2757].x) * _2818) * _2452) + ((((cbLight._m0[_2676].x * _2418) * _2729) * _2743) * _2465);
    float _2829 = (((_2805 * cbLight._m0[_2757].y) * _2818) * _2452) + ((((cbLight._m0[_2676].y * _2420) * _2729) * _2743) * _2465);
    float _2830 = (((_2805 * cbLight._m0[_2757].z) * _2818) * _2452) + ((((cbLight._m0[_2676].z * _2422) * _2729) * _2743) * _2465);
    float _2886;
    float _2888;
    float _2890;
    if (_2505)
    {
        _2886 = _2828;
        _2888 = _2829;
        _2890 = _2830;
    }
    else
    {
        uint _2892 = _2429 + 2u;
        uint _2896 = _2429 + 10u;
        float _2910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2892].w)) * _943) * 0.949999988079071044921875);
        float _2911 = _2910 * _2910;
        float _2912 = cbLight._m0[_2892].x + _1019;
        float _2913 = cbLight._m0[_2892].y + _1020;
        float _2914 = cbLight._m0[_2892].z + _1021;
        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
        float _2919 = _2918 * _2912;
        float _2920 = _2918 * _2913;
        float _2921 = _2918 * _2914;
        float _2922 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2892].xyz));
        float _4958 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
        float _2926 = dot(vec3(_940, _941, _942), vec3(_2919, _2920, _2921));
        float _4969 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2929 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
        float _2930 = dot(vec3(cbLight._m0[_2892].xyz), vec3(_2919, _2920, _2921));
        float _4980 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2934 = _2911 * _2911;
        float _2938 = ((_2929 * _2929) * (_2934 + (-1.0))) + 1.0;
        float _2947 = (exp2(log2(1.0 - (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2948 = 1.0 - _2911;
        float _2958 = (0.5 / (((_2705 * ((_2925 * _2948) + _2911)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2948) + _2911) * _2925))) * _2925;
        float _4991 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2960 = (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * (_2934 / ((_2938 * _2938) * 3.141590118408203125));
        float _2961 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        _2886 = (((_2947 * cbLight._m0[_2896].x) * _2960) * _2961) + _2828;
        _2888 = (((_2947 * cbLight._m0[_2896].y) * _2960) * _2961) + _2829;
        _2890 = (((_2947 * cbLight._m0[_2896].z) * _2960) * _2961) + _2830;
    }
    float _2992;
    float _2994;
    float _2996;
    if (_2614)
    {
        _2992 = _2886;
        _2994 = _2888;
        _2996 = _2890;
    }
    else
    {
        uint _3003 = _2429 + 3u;
        uint _3007 = _2429 + 11u;
        float _3021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3003].w)) * _943) * 0.949999988079071044921875);
        float _3022 = _3021 * _3021;
        float _3023 = cbLight._m0[_3003].x + _1019;
        float _3024 = cbLight._m0[_3003].y + _1020;
        float _3025 = cbLight._m0[_3003].z + _1021;
        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
        float _3030 = _3029 * _3023;
        float _3031 = _3029 * _3024;
        float _3032 = _3029 * _3025;
        float _3033 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_3003].xyz));
        float _5007 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3036 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
        float _3037 = dot(vec3(_940, _941, _942), vec3(_3030, _3031, _3032));
        float _5018 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        float _3040 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
        float _3041 = dot(vec3(cbLight._m0[_3003].xyz), vec3(_3030, _3031, _3032));
        float _5029 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
        float _3045 = _3022 * _3022;
        float _3049 = ((_3040 * _3040) * (_3045 + (-1.0))) + 1.0;
        float _3058 = (exp2(log2(1.0 - (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3059 = 1.0 - _3022;
        float _3069 = (0.5 / (((_2705 * ((_3036 * _3059) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _3059) + _3022) * _3036))) * _3036;
        float _5040 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3071 = (isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_3045 / ((_3049 * _3049) * 3.141590118408203125));
        float _3072 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2992 = (((_3058 * cbLight._m0[_3007].x) * _3071) * _3072) + _2886;
        _2994 = (((_3058 * cbLight._m0[_3007].y) * _3071) * _3072) + _2888;
        _2996 = (((_3058 * cbLight._m0[_3007].z) * _3071) * _3072) + _2890;
    }
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    float _3148;
    if (_2427.y == 0u)
    {
        uvec4 _3093 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3094 = _3093.x;
        uint _3105 = uint((float(_3093.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1040) / _3094))) + floor(float(uint(cbSceneParam._m0[85u].x * _1039) / _3094)));
        float _3115 = (log2(_2205 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3116 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
        uint _3119 = uint(isnan(14.0) ? _3116 : (isnan(_3116) ? 14.0 : min(_3116, 14.0)));
        uvec4 _3124 = texelFetch(g_lightClusterGridBuffer, int(((_3119 << 2u) + (_3105 << 6u)) >> 2u));
        uint _3125 = _3124.x;
        uint _3126 = _3093.z;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        if (((((1u << ((_3126 >> 4u) & 15u)) + 4294967295u) & _3125) == 0u) || ((_3126 & 240u) == 0u))
        {
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
        }
        else
        {
            float _3206;
            float _3208;
            float _3210;
            float _3212;
            float _3214;
            float _3216;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            float _3360 = 0.0;
            float _3361 = 0.0;
            float _3362 = 0.0;
            uint _3363 = 0u;
            uint _3372;
            bool _3373;
            for (;;)
            {
                _3372 = texelFetch(g_lightClassification, int((((_3119 << 5u) + (_3105 << 9u)) + (_3363 << 2u)) >> 2u)).x;
                _3373 = _3372 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3373)
                {
                    frontier_phi_71_pred = _3362;
                    frontier_phi_71_pred_1 = _3361;
                    frontier_phi_71_pred_2 = _3360;
                    frontier_phi_71_pred_3 = _3359;
                    frontier_phi_71_pred_4 = _3358;
                    frontier_phi_71_pred_5 = _3357;
                }
                else
                {
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    float _3506;
                    float _3507;
                    uint _3508;
                    _3502 = _3357;
                    _3503 = _3358;
                    _3504 = _3359;
                    _3505 = _3360;
                    _3506 = _3361;
                    _3507 = _3362;
                    _3508 = _3372;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    for (;;)
                    {
                        uint _3512 = uint(findLSB(_3508)) + (_3363 << 5u);
                        uint _3509 = (_3508 + 4294967295u) & _3508;
                        uint _3514 = _3512 * 48u;
                        vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3514)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 3u)).x));
                        uint _3534 = (_3512 * 48u) + 4u;
                        vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3534)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 3u)).x));
                        uint _3553 = (_3512 * 48u) + 8u;
                        vec3 _3564 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3553)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 2u)).x));
                        float _3568 = _3528.x - _2203;
                        float _3569 = _3528.y - _2204;
                        float _3570 = _3528.z - _2205;
                        float _3571 = dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570));
                        float _3574 = inversesqrt(_3571);
                        float _3575 = _3574 * _3568;
                        float _3576 = _3574 * _3569;
                        float _3577 = _3574 * _3570;
                        float _3578 = dot(vec3(_1058, _1061, _1064), vec3(_3575, _3576, _3577));
                        float _3583 = 1.0 - (_3571 * _3528.w);
                        float _5066 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3584 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                        float _3585 = sqrt(_3571) * _3547.w;
                        float _3588 = 1.39999997615814208984375 / (_3585 + 1.39999997615814208984375);
                        float _3589 = _3588 * _3588;
                        float _3592 = ((1.0 - _3589) * _3578) + _3589;
                        float _3595 = _3585 * _3585;
                        float _3599 = ((isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0))) * _3584) / ((_3595 * 0.699999988079071044921875) + 1.0);
                        float _3603 = (-0.0) - _2203;
                        float _3604 = (-0.0) - _2204;
                        float _3605 = (-0.0) - _2205;
                        float _3609 = inversesqrt(dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605)));
                        float _3610 = _3609 * _3603;
                        float _3611 = _3609 * _3604;
                        float _3612 = _3609 * _3605;
                        float _3619 = exp2(log2(1.0 / ((_3595 * 3.5) + 5.0)) * 0.25);
                        float _3620 = 1.0 - _1118;
                        float _3627 = sqrt(1.0 - ((1.0 - (_3620 * _3620)) * (1.0 - (_3619 * _3619))));
                        float _3628 = _3627 * _3627;
                        float _3629 = _3628 * _3628;
                        float _3630 = _3610 + _3575;
                        float _3631 = _3611 + _3576;
                        float _3632 = _3612 + _3577;
                        float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                        float _3640 = dot(vec3(_1058, _1061, _1064), vec3(_3610, _3611, _3612));
                        float _5082 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                        float _3643 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                        float _3644 = dot(vec3(_1058, _1061, _1064), vec3(_3636 * _3630, _3636 * _3631, _3636 * _3632));
                        float _5093 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                        float _3647 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                        float _3651 = ((_3647 * _3647) * (_3629 + (-1.0))) + 1.0;
                        float _3652 = _3588 * _3628;
                        float _3653 = _3652 * _3652;
                        float _3656 = ((1.0 - _3653) * _3578) + _3653;
                        float _5104 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3657 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                        float _3658 = 1.0 - _3628;
                        float _3668 = (0.5 / (((_3657 * ((_3643 * _3658) + _3628)) + 9.9999999392252902907785028219223e-09) + (((_3657 * _3658) + _3628) * _3643))) * _3657;
                        float _5115 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3679 = (((_3629 * 3.1415927410125732421875) * (isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0)))) / ((_3651 * _3651) * ((_3595 * 2.1991131305694580078125) + 3.141590118408203125))) * _3584;
                        _3432 = (_3599 * _3547.x) + _3505;
                        _3433 = (_3599 * _3547.y) + _3506;
                        _3434 = (_3599 * _3547.z) + _3507;
                        _3429 = (_3679 * _3564.x) + _3502;
                        _3430 = (_3679 * _3564.y) + _3503;
                        _3431 = (_3679 * _3564.z) + _3504;
                        if (_3509 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3502 = _3429;
                            _3503 = _3430;
                            _3504 = _3431;
                            _3505 = _3432;
                            _3506 = _3433;
                            _3507 = _3434;
                            _3508 = _3509;
                        }
                    }
                    frontier_phi_71_pred = _3434;
                    frontier_phi_71_pred_1 = _3433;
                    frontier_phi_71_pred_2 = _3432;
                    frontier_phi_71_pred_3 = _3431;
                    frontier_phi_71_pred_4 = _3430;
                    frontier_phi_71_pred_5 = _3429;
                }
                _3216 = frontier_phi_71_pred;
                _3214 = frontier_phi_71_pred_1;
                _3212 = frontier_phi_71_pred_2;
                _3210 = frontier_phi_71_pred_3;
                _3208 = frontier_phi_71_pred_4;
                _3206 = frontier_phi_71_pred_5;
                uint _3364 = _3363 + 1u;
                if (_3364 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3357 = _3206;
                    _3358 = _3208;
                    _3359 = _3210;
                    _3360 = _3212;
                    _3361 = _3214;
                    _3362 = _3216;
                    _3363 = _3364;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
        }
        uvec4 _3219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3220 = _3219.z;
        uint _3222 = (_3220 >> 8u) & 15u;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        if (((4294967295u << _3222) & _3125) == 0u)
        {
            _3325 = _3205;
            _3327 = _3207;
            _3329 = _3209;
            _3331 = _3211;
            _3333 = _3213;
            _3335 = _3215;
        }
        else
        {
            float _3350 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
            float _3351 = _3350 * _2203;
            float _3352 = _3350 * _2204;
            float _3353 = _3350 * _2205;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3222 < ((_3220 >> 12u) & 15u))
            {
                float _3326;
                float _3328;
                float _3330;
                float _3332;
                float _3334;
                float _3336;
                float _3485 = _3205;
                float _3486 = _3207;
                float _3487 = _3209;
                float _3488 = _3211;
                float _3489 = _3213;
                float _3490 = _3215;
                uint _3491 = _3222;
                uint _3500;
                bool _3501;
                for (;;)
                {
                    _3500 = texelFetch(g_lightClassification, int((((_3119 << 5u) + (_3105 << 9u)) + (_3491 << 2u)) >> 2u)).x;
                    _3501 = _3500 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3501)
                    {
                        frontier_phi_82_pred = _3490;
                        frontier_phi_82_pred_1 = _3489;
                        frontier_phi_82_pred_2 = _3488;
                        frontier_phi_82_pred_3 = _3487;
                        frontier_phi_82_pred_4 = _3486;
                        frontier_phi_82_pred_5 = _3485;
                    }
                    else
                    {
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3986;
                        float _3987;
                        float _3988;
                        float _3989;
                        float _3990;
                        float _3991;
                        float _3706 = _3485;
                        float _3707 = _3486;
                        float _3708 = _3487;
                        float _3709 = _3488;
                        float _3710 = _3489;
                        float _3711 = _3490;
                        uint _3712 = _3500;
                        uint _3713;
                        vec4 _3738;
                        float _3739;
                        vec4 _3754;
                        vec3 _3766;
                        vec4 _3781;
                        vec4 _3796;
                        float _3842;
                        bool _3843;
                        for (;;)
                        {
                            uint _3723 = ((_3491 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3712));
                            _3713 = (_3712 + 4294967295u) & _3712;
                            uint _3725 = _3723 * 40u;
                            _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            _3739 = _3738.w;
                            uint _3741 = (_3723 * 40u) + 4u;
                            _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            uint _3756 = (_3723 * 40u) + 8u;
                            _3766 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 2u)).x));
                            uint _3768 = (_3723 * 40u) + 16u;
                            _3781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 3u)).x));
                            uint _3783 = (_3723 * 40u) + 20u;
                            _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            uint _3798 = (_3723 * 40u) + 24u;
                            vec4 _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3817 = (_3723 * 40u) + 28u;
                            vec4 _3830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 3u)).x));
                            _3842 = fma(_2205, _3830.z, fma(_2204, _3830.y, _3830.x * _2203)) + _3830.w;
                            _3843 = !((fma(_2205, _3811.z, fma(_2204, _3811.y, _3811.x * _2203)) + _3811.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3843)
                            {
                                float _3870 = _3738.x - _2203;
                                float _3871 = _3738.y - _2204;
                                float _3872 = _3738.z - _2205;
                                float _3873 = dot(vec3(_3870, _3871, _3872), vec3(_3870, _3871, _3872));
                                float _3876 = inversesqrt(_3873);
                                float _3877 = _3876 * _3870;
                                float _3878 = _3876 * _3871;
                                float _3879 = _3876 * _3872;
                                float _3883 = 1.0 - (_3873 / (_3739 * _3739));
                                float _5126 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3884 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
                                float _3888 = sqrt(_3873) * _3754.w;
                                float _3890 = 1.39999997615814208984375 / (_3888 + 1.39999997615814208984375);
                                float _3891 = _3890 * _3890;
                                float _3894 = ((1.0 - _3891) * dot(vec3(_3877, _3878, _3879), vec3(_1058, _1061, _1064))) + _3891;
                                float _3897 = _3888 * _3888;
                                float _3901 = (fma(_2205, _3781.z, fma(_2204, _3781.y, _3781.x * _2203)) + _3781.w) / _3842;
                                float _3902 = (fma(_2205, _3796.z, fma(_2204, _3796.y, _3796.x * _2203)) + _3796.w) / _3842;
                                float _3906 = 1.0 - dot(vec2(_3901, _3902), vec2(_3901, _3902));
                                float _5142 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3907 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                                float _3908 = _3907 * (((isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0))) * _3884) / ((_3897 * 0.699999988079071044921875) + 1.0));
                                float _3920 = exp2(log2(1.0 / ((_3897 * 3.5) + 5.0)) * 0.25);
                                float _3921 = 1.0 - _1118;
                                float _3928 = sqrt(1.0 - ((1.0 - (_3921 * _3921)) * (1.0 - (_3920 * _3920))));
                                float _3929 = _3928 * _3928;
                                float _3930 = _3929 * _3929;
                                float _3931 = _3877 - _3351;
                                float _3932 = _3878 - _3352;
                                float _3933 = _3879 - _3353;
                                float _3937 = inversesqrt(dot(vec3(_3931, _3932, _3933), vec3(_3931, _3932, _3933)));
                                float _3941 = dot(vec3(_1058, _1061, _1064), vec3((-0.0) - _3351, (-0.0) - _3352, (-0.0) - _3353));
                                float _5153 = isnan(0.0) ? _3941 : (isnan(_3941) ? 0.0 : max(_3941, 0.0));
                                float _3944 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
                                float _3945 = dot(vec3(_1058, _1061, _1064), vec3(_3937 * _3931, _3937 * _3932, _3937 * _3933));
                                float _5164 = isnan(0.0) ? _3945 : (isnan(_3945) ? 0.0 : max(_3945, 0.0));
                                float _3948 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                                float _3952 = ((_3948 * _3948) * (_3930 + (-1.0))) + 1.0;
                                float _3953 = _3890 * _3929;
                                float _3954 = _3953 * _3953;
                                float _3960 = ((1.0 - _3954) * dot(vec3(_1058, _1061, _1064), vec3(_3877, _3878, _3879))) + _3954;
                                float _5175 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                                float _3961 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
                                float _3962 = 1.0 - _3929;
                                float _3972 = (0.5 / (((_3961 * ((_3944 * _3962) + _3929)) + 9.9999999392252902907785028219223e-09) + (((_3961 * _3962) + _3929) * _3944))) * _3961;
                                float _5186 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3982 = (_3907 * _3884) * (((_3930 * 3.1415927410125732421875) * (isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0)))) / ((_3952 * _3952) * ((_3897 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3908 * _3754.z;
                                frontier_phi_88_pred_1 = _3908 * _3754.y;
                                frontier_phi_88_pred_2 = _3908 * _3754.x;
                                frontier_phi_88_pred_3 = _3982 * _3766.z;
                                frontier_phi_88_pred_4 = _3982 * _3766.y;
                                frontier_phi_88_pred_5 = _3982 * _3766.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3991 = frontier_phi_88_pred;
                            _3990 = frontier_phi_88_pred_1;
                            _3989 = frontier_phi_88_pred_2;
                            _3988 = frontier_phi_88_pred_3;
                            _3987 = frontier_phi_88_pred_4;
                            _3986 = frontier_phi_88_pred_5;
                            _3696 = _3989 + _3709;
                            _3697 = _3990 + _3710;
                            _3698 = _3991 + _3711;
                            _3693 = _3986 + _3706;
                            _3694 = _3987 + _3707;
                            _3695 = _3988 + _3708;
                            if (_3713 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3706 = _3693;
                                _3707 = _3694;
                                _3708 = _3695;
                                _3709 = _3696;
                                _3710 = _3697;
                                _3711 = _3698;
                                _3712 = _3713;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3698;
                        frontier_phi_82_pred_1 = _3697;
                        frontier_phi_82_pred_2 = _3696;
                        frontier_phi_82_pred_3 = _3695;
                        frontier_phi_82_pred_4 = _3694;
                        frontier_phi_82_pred_5 = _3693;
                    }
                    _3336 = frontier_phi_82_pred;
                    _3334 = frontier_phi_82_pred_1;
                    _3332 = frontier_phi_82_pred_2;
                    _3330 = frontier_phi_82_pred_3;
                    _3328 = frontier_phi_82_pred_4;
                    _3326 = frontier_phi_82_pred_5;
                    uint _3492 = _3491 + 1u;
                    if (_3492 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3485 = _3326;
                        _3486 = _3328;
                        _3487 = _3330;
                        _3488 = _3332;
                        _3489 = _3334;
                        _3490 = _3336;
                        _3491 = _3492;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3332;
                frontier_phi_63_64_ladder_1 = _3336;
                frontier_phi_63_64_ladder_2 = _3334;
                frontier_phi_63_64_ladder_3 = _3330;
                frontier_phi_63_64_ladder_4 = _3328;
                frontier_phi_63_64_ladder_5 = _3326;
            }
            else
            {
                frontier_phi_63_64_ladder = _3211;
                frontier_phi_63_64_ladder_1 = _3215;
                frontier_phi_63_64_ladder_2 = _3213;
                frontier_phi_63_64_ladder_3 = _3209;
                frontier_phi_63_64_ladder_4 = _3207;
                frontier_phi_63_64_ladder_5 = _3205;
            }
            _3325 = frontier_phi_63_64_ladder_5;
            _3327 = frontier_phi_63_64_ladder_4;
            _3329 = frontier_phi_63_64_ladder_3;
            _3331 = frontier_phi_63_64_ladder;
            _3333 = frontier_phi_63_64_ladder_2;
            _3335 = frontier_phi_63_64_ladder_1;
        }
        float _3340 = isnan(1.0) ? _1102 : (isnan(_1102) ? 1.0 : min(_1102, 1.0));
        _3138 = (_3340 * _3331) + _2669;
        _3140 = (_3340 * _3333) + _2671;
        _3142 = (_3340 * _3335) + _2673;
        _3144 = ((_3325 * 0.039999999105930328369140625) * _3340) + _2992;
        _3146 = ((_3327 * 0.039999999105930328369140625) * _3340) + _2994;
        _3148 = ((_3329 * 0.039999999105930328369140625) * _3340) + _2996;
    }
    else
    {
        _3138 = _2669;
        _3140 = _2671;
        _3142 = _2673;
        _3144 = _2992;
        _3146 = _2994;
        _3148 = _2996;
    }
    float _5202 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _5213 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _5224 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _3165 = ((isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0))) * (_3138 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1102))) + ((_3144 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _3166 = ((isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0))) * (_3140 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1102))) + ((_3146 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _3167 = ((isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0))) * (_3142 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1102))) + ((_3148 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    uint _3168 = _287 + 6u;
    float _3176 = _1039 / cbSceneParam._m0[86u].x;
    float _3177 = _1040 / cbSceneParam._m0[86u].y;
    vec4 _3191 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3176, _3177, (log2((isnan(cbSceneParam._m0[77u].w) ? _961 : (isnan(_961) ? cbSceneParam._m0[77u].w : min(_961, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3193 = _3191.x;
    float _3194 = _3191.y;
    float _3195 = _3191.z;
    float _3196 = _3191.w;
    float _3267;
    float _3269;
    float _3271;
    float _3273;
    if (_961 > cbSceneParam._m0[78u].w)
    {
        float _3230 = isnan(_961) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _961 : min(cbSceneParam._m0[80u].w, _961));
        float _3231 = _3230 / _961;
        float _3242 = _3231 * _1012;
        float _3243 = _1013 * _3231;
        float _3244 = (-0.0) - _3243;
        float _3245 = _3231 * _1014;
        float _3247 = (cbSceneParam._m0[77u].w * _3244) / _3230;
        float _3248 = _3247 + cbSceneParam._m0[79u].w;
        float _3249 = cbSceneParam._m0[79u].w - _3243;
        float _3255 = sqrt(((_3242 * _3242) + (_3243 * _3243)) + (_3245 * _3245));
        float _3258 = (1.0 - (cbSceneParam._m0[77u].w / _3230)) * _3255;
        float _3263 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3265 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3442;
        if (abs((_3244 - _3247) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3442 = ((((_3248 > 0.0) ? exp2(_3263 * _3248) : (2.0 - exp2(_3265 * _3248))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3258;
        }
        else
        {
            float _3386 = 1.0 / cbSceneParam._m0[80u].x;
            float _3387 = isnan(_3249) ? _3248 : (isnan(_3248) ? _3249 : max(_3248, _3249));
            float _3388 = isnan(_3249) ? _3248 : (isnan(_3248) ? _3249 : min(_3248, _3249));
            float _3397 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : min(_3387, 0.0));
            float _3398 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : min(_3388, 0.0));
            _3442 = ((abs(_3255 / _3244) * cbSceneParam._m0[80u].y) * ((((_3397 - _3398) * 2.0) - ((exp2(_3263 * (isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0)))) - exp2(_3263 * (isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))))) * _3386)) - ((exp2(_3265 * _3397) - exp2(_3265 * _3398)) * _3386))) + (_3258 * cbSceneParam._m0[80u].z);
        }
        vec4 _3444 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3176, _3177, 1.0), 0.0);
        float _3453 = exp2((_3442 * (-1.44269502162933349609375)) * (1.0 - _3444.w));
        float _3454 = log2(_3453);
        float _3470 = log2(_3196);
        _3267 = (exp2(_3470 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].x)) * _3444.x) / cbSceneParam._m0[78u].x)) + _3193;
        _3269 = (exp2(_3470 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].y)) * _3444.y) / cbSceneParam._m0[78u].y)) + _3194;
        _3271 = (exp2(_3470 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].z)) * _3444.z) / cbSceneParam._m0[78u].z)) + _3195;
        _3273 = _3453 * _3196;
    }
    else
    {
        _3267 = _3193;
        _3269 = _3194;
        _3271 = _3195;
        _3273 = _3196;
    }
    bool _3480;
    vec4 _3283;
    vec4 _3305;
    float _3307;
    float _3311;
    float _3312;
    float _3313;
    float _3314;
    bool _3324;
    for (;;)
    {
        _3283 = cbMatDynParam._m0[0u];
        float _3285 = roundEven(_3283.y);
        bool _3286 = _3285 == 3.0;
        float _3287 = log2(_3273);
        float _3294 = exp2(_3287 * cbSceneParam._m0[78u].x) * _3165;
        float _3295 = exp2(_3287 * cbSceneParam._m0[78u].y) * _3166;
        float _3296 = exp2(_3287 * cbSceneParam._m0[78u].z) * _3167;
        float _3303 = _1028 + (-0.5);
        _3305 = cbMtdParam._m0[1u];
        _3307 = _3305.y * _3303;
        float _3310 = (_3285 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3311 = _3310 * (_3286 ? _3294 : (_3294 + (cbSceneParam._m0[72u].w * _3267)));
        _3312 = _3310 * (_3286 ? _3295 : (_3295 + (cbSceneParam._m0[72u].w * _3269)));
        _3313 = _3310 * (_3286 ? _3296 : (_3296 + (cbSceneParam._m0[72u].w * _3271)));
        _3314 = _3303 * 0.999000012874603271484375;
        _3324 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3324)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3314) < 0.5)
            {
                _3480 = true;
                break;
            }
        }
        uint _3421 = _1077 + uint(_3283.w);
        if ((cbInstanceData._m0[_3421].w < 1.0) && ((cbInstanceData._m0[_3421].w + _3314) < 0.5))
        {
            _3480 = true;
            break;
        }
        if ((_3307 + 1.0) < _3305.x)
        {
            _3480 = true;
            break;
        }
        _3480 = false;
        break;
    }
    float _3684;
    if (_3480)
    {
        discard_state = true;
        _3684 = 0.0;
    }
    else
    {
        _3684 = cbInstanceData._m0[_3168].w;
    }
    SV_Target.x = _3311;
    SV_Target.y = _3312;
    SV_Target.z = _3313;
    SV_Target.w = _3684;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3168].w;
    discard_exit();
}


