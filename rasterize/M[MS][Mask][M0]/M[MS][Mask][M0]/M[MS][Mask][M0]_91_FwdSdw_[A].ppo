#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1303;
float _3943;
float _3944;
float _3945;
float _3946;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _371 = _369.x;
    float _383 = dot(vec4(_371, _369.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _400 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _332.x) * 2.0) - ((((_371 - _383) * cbMtdParam._m0[24u].z) + _383) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3955 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _408 = (_401 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _409 = (_401 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _410 = (_401 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _427 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _459 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _473 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _332.y) * 2.0) - ((((_449 - _459) * cbMtdParam._m0[24u].z) + _459) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3966 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _481 = (_474 * ((_427.x * cbMtdParam._m0[13u].x) - _408)) + _408;
    float _482 = (_474 * ((_427.y * cbMtdParam._m0[13u].y) - _409)) + _409;
    float _483 = (_474 * ((_427.z * cbMtdParam._m0[13u].z) - _410)) + _410;
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _522 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    float _550 = ((_522.x - _541) * _401) + _541;
    float _551 = ((_522.y - _542) * _401) + _542;
    float _552 = ((_522.z - _543) * _401) + _543;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _577 = ((_564.z - _552) * _474) + _552;
    float _580 = ((((_564.x - _550) * _474) + _550) * 2.0) + (-1.0);
    float _582 = ((((_564.y - _551) * _474) + _551) * 2.0) + (-1.0);
    float _583 = dot(vec2(_580, _582), vec2(_580, _582));
    float _3977 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _588 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _614 = (((_602.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _580;
    float _615 = (((_602.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _582;
    float _618 = fma(_588, _232, fma(_615, _239, _614 * _225));
    float _621 = fma(_588, _233, fma(_615, _240, _614 * _226));
    float _624 = fma(_588, _234, fma(_615, _241, _614 * _227));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _657 = _655.x;
    float _658 = 1.0 - _657;
    float _664 = (cbMtdParam._m0[19u].x + dot(vec4(_628 * _618, _628 * _621, _628 * _624, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_657 - _658) * cbMtdParam._m0[24u].w) + _658) * cbMtdParam._m0[21u].z);
    float _3988 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _672 = (_665 * ((_502.x * cbMtdParam._m0[18u].x) - _481)) + _481;
    float _673 = (_665 * ((_502.y * cbMtdParam._m0[18u].y) - _482)) + _482;
    float _674 = (_665 * ((_502.z * cbMtdParam._m0[18u].z) - _483)) + _483;
    float _678 = (cbMtdParam._m0[19u].w * (_602.z - _577)) + _577;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _698 = (_691.x * 2.0) + (-1.0);
    float _699 = (_691.y * 2.0) + (-1.0);
    float _700 = dot(vec2(_698, _699), vec2(_698, _699));
    float _3999 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _708 = ((_691.z - _678) * _665) + _678;
    float _718 = ((sqrt(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) - _588) * _665) + _588;
    float _721 = (((_698 - _614) * _665) + _614) + (cbMtdParam._m0[21u].x * _614);
    float _722 = (((_699 - _615) * _665) + _615) + (cbMtdParam._m0[21u].x * _615);
    float _726 = cbMtdParam._m0[22u].x + _602.w;
    float _729 = fma(_718, _232, fma(_722, _239, _721 * _225));
    float _732 = fma(_718, _233, fma(_722, _240, _721 * _226));
    float _735 = fma(_718, _234, fma(_722, _241, _721 * _227));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    float _740 = _739 * _729;
    float _741 = _739 * _732;
    float _742 = _739 * _735;
    float _4010 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _743 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4032 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4043 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4054 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _761 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _813 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _803);
    float _814 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _803);
    float _815 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _803);
    float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
    float _820 = _813 * _819;
    float _821 = _814 * _819;
    float _822 = _815 * _819;
    vec4 _827 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _829 = _827.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _983 = sqrt(((_813 * _813) + (_814 * _814)) + (_815 * _815));
        float _989 = (cbMatDynParam._m0[5u].x * _983) + cbMatDynParam._m0[5u].y;
        float _4065 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _994 = (cbMatDynParam._m0[5u].z * _983) + cbMatDynParam._m0[5u].w;
        float _4076 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) - _990)) + _990) < ((_829 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _840 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _841 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _859 = fma(_742, cbSceneParam._m0[5u].z, fma(_741, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _740));
    float _862 = fma(_742, cbSceneParam._m0[6u].z, fma(_741, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _740));
    float _865 = fma(_742, cbSceneParam._m0[7u].z, fma(_741, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _740));
    uint _878 = _244 + 9u;
    uint _879 = _878 + uint(cbMatDynParam._m0[0u].w);
    float _885 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_879].x;
    float _886 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_879].y;
    float _887 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_879].z;
    float _4087 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    vec4 _899 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _840, cbSceneParam._m0[86u].y * _841));
    float _903 = ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * TEXCOORD_5.w) * _899.x;
    float _904 = dot(vec3(_740, _741, _742), vec3(_820, _821, _822));
    float _907 = _904 * 2.0;
    float _911 = (_907 * _740) - _820;
    float _912 = (_907 * _741) - _821;
    float _913 = (_907 * _742) - _822;
    float _917 = abs(dot(vec3(_820, _821, _822), vec3(_740, _741, _742)));
    float _4120 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _919 = sqrt(_743);
    float _932 = exp2((_919 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_919 * 3.0));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1302;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_972, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964));
        float _1031 = fma(_972, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964));
        float _1035 = fma(_972, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964));
        float _1060 = _964 + _740;
        float _1061 = _968 + _741;
        float _1062 = _972 + _742;
        float _1072 = fma(_1062, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060)) - _1027;
        float _1073 = fma(_1062, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060)) - _1031;
        float _1074 = fma(_1062, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060)) - _1035;
        float _1078 = inversesqrt(dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074)));
        float _1091 = ((_1078 * _1072) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1078 * _1073) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1078 * _1074) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        float _1130 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1096.x + (-0.5));
        float _1132 = _1130 * (_1096.y + (-0.5));
        float _1133 = _1130 * (_1096.z + (-0.5));
        float _1140 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1103.x + (-0.5));
        float _1142 = _1140 * (_1103.y + (-0.5));
        float _1143 = _1140 * (_1103.z + (-0.5));
        float _1150 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1110.x + (-0.5));
        float _1152 = _1150 * (_1110.y + (-0.5));
        float _1153 = _1150 * (_1110.z + (-0.5));
        float _1160 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1117.x + (-0.5));
        float _1162 = _1160 * (_1117.y + (-0.5));
        float _1163 = _1160 * (_1117.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1184 = (dot(vec3(_740, _741, _742), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1194 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _4168 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1196 + 1.0))) + _1201) * _1164;
        float _1211 = _1132 * 0.5;
        float _1212 = _1142 * 0.5;
        float _1213 = _1152 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_740, _741, _742), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _4201 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1238 + 1.0))) + _1243) * _1165;
        float _1253 = _1133 * 0.5;
        float _1254 = _1143 * 0.5;
        float _1255 = _1153 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_740, _741, _742), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4234 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1280 + 1.0))) + _1285) * _1166;
        _1302 = _1133;
        _1304 = _1132;
        _1305 = _1131;
        _1306 = _1143;
        _1307 = _1142;
        _1308 = _1141;
        _1309 = _1153;
        _1310 = _1152;
        _1311 = _1151;
        _1312 = _1166;
        _1313 = _1165;
        _1314 = _1164;
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
    }
    else
    {
        _1302 = _1303;
        _1304 = _1303;
        _1305 = _1303;
        _1306 = _1303;
        _1307 = _1303;
        _1308 = _1303;
        _1309 = _1303;
        _1310 = _1303;
        _1311 = _1303;
        _1312 = _1303;
        _1313 = _1303;
        _1314 = _1303;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1344 = fma(_972, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964));
        float _1348 = fma(_972, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964));
        float _1352 = fma(_972, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964));
        float _1375 = _964 + _740;
        float _1376 = _968 + _741;
        float _1377 = _972 + _742;
        float _1387 = fma(_1377, cbModelParam._m0[30u].z, fma(_1376, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1375)) - _1344;
        float _1388 = fma(_1377, cbModelParam._m0[31u].z, fma(_1376, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1375)) - _1348;
        float _1389 = fma(_1377, cbModelParam._m0[32u].z, fma(_1376, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1375)) - _1352;
        float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
        float _1406 = ((_1393 * _1387) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1344 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1393 * _1388) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1348 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1393 * _1389) / cbModelParam._m0[35u].z) + ((((((_1352 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1443 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1410.x + (-0.5));
        float _1445 = _1443 * (_1410.y + (-0.5));
        float _1446 = _1443 * (_1410.z + (-0.5));
        float _1453 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1417.x + (-0.5));
        float _1455 = _1453 * (_1417.y + (-0.5));
        float _1456 = _1453 * (_1417.z + (-0.5));
        float _1463 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1424.x + (-0.5));
        float _1465 = _1463 * (_1424.y + (-0.5));
        float _1466 = _1463 * (_1424.z + (-0.5));
        float _1473 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1431.x + (-0.5));
        float _1475 = _1473 * (_1431.y + (-0.5));
        float _1476 = _1473 * (_1431.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_740, _741, _742), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4297 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1507 + 1.0))) + _1512) * _1477;
        float _1522 = _1445 * 0.5;
        float _1523 = _1455 * 0.5;
        float _1524 = _1465 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_740, _741, _742), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4330 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1549 + 1.0))) + _1554) * _1478;
        float _1564 = _1446 * 0.5;
        float _1565 = _1456 * 0.5;
        float _1566 = _1466 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_740, _741, _742), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4363 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1591 + 1.0))) + _1596) * _1479;
        _1613 = _1446;
        _1614 = _1445;
        _1615 = _1444;
        _1616 = _1456;
        _1617 = _1455;
        _1618 = _1454;
        _1619 = _1466;
        _1620 = _1465;
        _1621 = _1464;
        _1622 = _1479;
        _1623 = _1478;
        _1624 = _1477;
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1303;
        _1614 = _1303;
        _1615 = _1303;
        _1616 = _1303;
        _1617 = _1303;
        _1618 = _1303;
        _1619 = _1303;
        _1620 = _1303;
        _1621 = _1303;
        _1622 = _1303;
        _1623 = _1303;
        _1624 = _1303;
        _1625 = 0.0;
        _1626 = 0.0;
        _1627 = 0.0;
    }
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1315)) + _1315;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1316)) + _1316;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1317)) + _1317;
    float _1660 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1637));
    float _1681 = _911 * 0.5;
    float _1682 = _912 * 0.5;
    float _1683 = _913 * 0.5;
    float _1684 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1687 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1690 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1724;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1697 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1302, _1306, _1309, _1312));
        float _1701 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1705 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1712 = dot(vec4(cbModelParam._m0[39u]), vec4(_1681, _1682, _1683, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1735;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1726 = dot(vec4(cbModelParam._m0[40u]), vec4(_1681, _1682, _1683, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1739 = (_1735 * cbModelParam._m0[1u].x) + (_1724 * (1.0 - cbModelParam._m0[1u].x));
    float _1749 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _743);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1749 : min(cbModelParam._m0[25u].z, _1749));
    float _1830;
    float _1832;
    float _1834;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1797 = fma(_972, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964)) + cbModelParam._m0[13u].w;
        float _1801 = fma(_972, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964)) + cbModelParam._m0[14u].w;
        float _1805 = fma(_972, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964)) + cbModelParam._m0[15u].w;
        float _1808 = fma(_913, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _911));
        float _1811 = fma(_913, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _911));
        float _1814 = fma(_913, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _911));
        float _1842;
        if (_1808 > 0.0)
        {
            _1842 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1842 = frontier_phi_17_15_ladder;
        }
        float _2011;
        if (_1811 > 0.0)
        {
            _2011 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2011 = frontier_phi_26_22_ladder;
        }
        float _2306;
        if (_1814 > 0.0)
        {
            _2306 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2306 = frontier_phi_38_33_ladder;
        }
        float _2308 = isnan(_2011) ? _1842 : (isnan(_1842) ? _2011 : min(_1842, _2011));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1808) + _1797;
        float _2314 = (_2309 * _1811) + _1801;
        float _2315 = (_2309 * _1814) + _1805;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2316;
        float _2320 = _2316 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 > _2320) || ((_2314 < _2318) || ((_2313 < _2318) || (_2313 > _2320))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2315, cbModelParam._m0[9u].z, fma(_2314, cbModelParam._m0[9u].y, _2313 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2315, cbModelParam._m0[10u].z, fma(_2314, cbModelParam._m0[10u].y, _2313 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2315, cbModelParam._m0[11u].z, fma(_2314, cbModelParam._m0[11u].y, _2313 * cbModelParam._m0[11u].x))), _1750);
            frontier_phi_16_38_ladder = _2460.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2460.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2460.x * cbModelParam._m0[1u].y;
        }
        _1830 = frontier_phi_16_38_ladder_2;
        _1832 = frontier_phi_16_38_ladder_1;
        _1834 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_911, _912, _913), _1750);
        _1830 = _1818.x * cbModelParam._m0[1u].y;
        _1832 = _1818.y * cbModelParam._m0[1u].y;
        _1834 = _1818.z * cbModelParam._m0[1u].y;
    }
    float _1838 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _743);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1838 : min(cbModelParam._m0[25u].w, _1838));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1892 = fma(_972, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964)) + cbModelParam._m0[21u].w;
        float _1896 = fma(_972, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964)) + cbModelParam._m0[22u].w;
        float _1900 = fma(_972, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964)) + cbModelParam._m0[23u].w;
        float _1903 = fma(_913, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _911));
        float _1906 = fma(_913, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _911));
        float _1909 = fma(_913, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _911));
        float _2016;
        if (_1903 > 0.0)
        {
            _2016 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2016 = frontier_phi_28_24_ladder;
        }
        float _2333;
        if (_1906 > 0.0)
        {
            _2333 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2333 = frontier_phi_40_35_ladder;
        }
        float _2660;
        if (_1909 > 0.0)
        {
            _2660 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2660 = frontier_phi_50_47_ladder;
        }
        float _2662 = isnan(_2333) ? _2016 : (isnan(_2016) ? _2333 : min(_2016, _2333));
        float _2663 = isnan(_2660) ? _2662 : (isnan(_2662) ? _2660 : min(_2662, _2660));
        float _2667 = (_2663 * _1903) + _1892;
        float _2668 = (_2663 * _1906) + _1896;
        float _2669 = (_2663 * _1909) + _1900;
        float _2670 = _2663 * 9.9999997473787516355514526367188e-05;
        float _2671 = (-1.0) - _2670;
        float _2673 = _2670 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2669 > _2673) || ((_2669 < _2671) || ((_2668 > _2673) || ((_2668 < _2671) || ((_2667 < _2671) || (_2667 > _2673))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2669, cbModelParam._m0[17u].z, fma(_2668, cbModelParam._m0[17u].y, _2667 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2669, cbModelParam._m0[18u].z, fma(_2668, cbModelParam._m0[18u].y, _2667 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2669, cbModelParam._m0[19u].z, fma(_2668, cbModelParam._m0[19u].y, _2667 * cbModelParam._m0[19u].x))), _1839);
            frontier_phi_25_50_ladder = _2787.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2787.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2787.x * cbModelParam._m0[1u].z;
        }
        _1928 = frontier_phi_25_50_ladder_2;
        _1930 = frontier_phi_25_50_ladder_1;
        _1932 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_911, _912, _913), _1839);
        _1928 = _1912.x * cbModelParam._m0[1u].z;
        _1930 = _1912.y * cbModelParam._m0[1u].z;
        _1932 = _1912.z * cbModelParam._m0[1u].z;
    }
    float _1944 = ((((1.0 - _932) * ((_919 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_932 * _919)) * _903;
    float _1945 = _1944 * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1946 = _1944 * ((cbModelParam._m0[1u].w * (_1930 - _1832)) + _1832);
    float _1947 = _1944 * ((cbModelParam._m0[1u].w * (_1932 - _1834)) + _1834);
    float _1950 = fma(_1947, cbSceneParam._m0[89u].z, fma(_1946, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1953 = fma(_1947, cbSceneParam._m0[90u].z, fma(_1946, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1956 = fma(_1947, cbSceneParam._m0[91u].z, fma(_1946, cbSceneParam._m0[91u].y, _1945 * cbSceneParam._m0[91u].x));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2002 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2003 = _1990 / _2002;
    float _2004 = _1994 / _2002;
    float _2005 = _1998 / _2002;
    float _2152;
    float _2153;
    float _2154;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2032 = ((uint(_2005 > cbSceneParam._m0[59u].y) + uint(_2005 > cbSceneParam._m0[59u].x)) + uint(_2005 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2033 = _2032 + 43u;
        uint _2041 = _2032 + 44u;
        uint _2049 = _2032 + 45u;
        uint _2057 = _2032 + 46u;
        float _2068 = fma(_2002, cbSceneParam._m0[_2033].w, fma(_1998, cbSceneParam._m0[_2033].z, fma(_1994, cbSceneParam._m0[_2033].y, _1990 * cbSceneParam._m0[_2033].x)));
        float _2072 = fma(_2002, cbSceneParam._m0[_2041].w, fma(_1998, cbSceneParam._m0[_2041].z, fma(_1994, cbSceneParam._m0[_2041].y, _1990 * cbSceneParam._m0[_2041].x)));
        float _2080 = fma(_2002, cbSceneParam._m0[_2057].w, fma(_1998, cbSceneParam._m0[_2057].z, fma(_1994, cbSceneParam._m0[_2057].y, _1990 * cbSceneParam._m0[_2057].x)));
        float _2085 = cbSceneParam._m0[33u].z * _2080;
        float _2087 = cbSceneParam._m0[33u].w * _2080;
        float _2090 = fma(_2002, cbSceneParam._m0[_2049].w, fma(_1998, cbSceneParam._m0[_2049].z, fma(_1994, cbSceneParam._m0[_2049].y, _1990 * cbSceneParam._m0[_2049].x))) / _2080;
        float _2138 = (cbSceneParam._m0[33u].x - sqrt(((_2004 * _2004) + (_2003 * _2003)) + (_2005 * _2005))) * cbSceneParam._m0[33u].y;
        float _4489 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2145 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 + _2068) / _2080, (_2087 + _2072) / _2080), _2090), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2087 + _2068) / _2080, (_2072 - _2085) / _2080), _2090), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 - _2085) / _2080, (_2072 - _2087) / _2080), _2090), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 - _2087) / _2080, (_2085 + _2072) / _2080), _2090), 0.0)).x), vec4(0.25)));
        _2152 = 1.0 - (_2145 * cbSceneParam._m0[34u].x);
        _2153 = 1.0 - (_2145 * cbSceneParam._m0[34u].y);
        _2154 = 1.0 - (_2145 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2152 = 1.0;
        _2153 = 1.0;
        _2154 = 1.0;
    }
    float _2218;
    float _2220;
    float _2222;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2206 = fma(_2002, cbSceneParam._m0[63u].w, fma(_1998, cbSceneParam._m0[63u].z, fma(_1994, cbSceneParam._m0[63u].y, _1990 * cbSceneParam._m0[63u].x)));
        float _2207 = fma(_2002, cbSceneParam._m0[60u].w, fma(_1998, cbSceneParam._m0[60u].z, fma(_1994, cbSceneParam._m0[60u].y, _1990 * cbSceneParam._m0[60u].x))) / _2206;
        float _2208 = fma(_2002, cbSceneParam._m0[61u].w, fma(_1998, cbSceneParam._m0[61u].z, fma(_1994, cbSceneParam._m0[61u].y, _1990 * cbSceneParam._m0[61u].x))) / _2206;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2207 >= cbSceneParam._m0[64u].x) && (_2208 >= cbSceneParam._m0[64u].y)) && (_2207 <= cbSceneParam._m0[64u].z)) && (_2208 <= cbSceneParam._m0[64u].w))
        {
            float _2346 = fma(_2002, cbSceneParam._m0[62u].w, fma(_1998, cbSceneParam._m0[62u].z, fma(_1994, cbSceneParam._m0[62u].y, _1990 * cbSceneParam._m0[62u].x))) / _2206;
            float _2350 = isnan(cbSceneParam._m0[41u].w) ? _2346 : (isnan(_2346) ? cbSceneParam._m0[41u].w : max(_2346, cbSceneParam._m0[41u].w));
            float _2393 = (cbSceneParam._m0[33u].x - sqrt(((_2004 * _2004) + (_2003 * _2003)) + (_2005 * _2005))) * cbSceneParam._m0[33u].y;
            float _4505 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
            float _2400 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2207, cbSceneParam._m0[33u].w + _2208), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2207, _2208 - cbSceneParam._m0[33u].z), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2207 - cbSceneParam._m0[33u].z, _2208 - cbSceneParam._m0[33u].w), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2207 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2208), _2350), 0.0)).x), vec4(0.25)));
            float _2404 = 1.0 - (_2400 * cbSceneParam._m0[34u].x);
            float _2405 = 1.0 - (_2400 * cbSceneParam._m0[34u].y);
            float _2406 = 1.0 - (_2400 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2406) ? _2154 : (isnan(_2154) ? _2406 : min(_2154, _2406));
            frontier_phi_37_36_ladder_1 = isnan(_2405) ? _2153 : (isnan(_2153) ? _2405 : min(_2153, _2405));
            frontier_phi_37_36_ladder_2 = isnan(_2404) ? _2152 : (isnan(_2152) ? _2404 : min(_2152, _2404));
        }
        else
        {
            frontier_phi_37_36_ladder = _2154;
            frontier_phi_37_36_ladder_1 = _2153;
            frontier_phi_37_36_ladder_2 = _2152;
        }
        _2218 = frontier_phi_37_36_ladder_2;
        _2220 = frontier_phi_37_36_ladder_1;
        _2222 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2218 = _2152;
        _2220 = _2153;
        _2222 = _2154;
    }
    uvec4 _2227 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2229 = _2227.x * 14u;
    uint _2230 = _2229 + 13u;
    float _2237 = _903 + (-1.0);
    float _2242 = (cbLight._m0[_2230].x * _2237) + 1.0;
    float _2243 = (cbLight._m0[_2230].y * _2237) + 1.0;
    float _2244 = (cbLight._m0[_2230].z * _2237) + 1.0;
    float _2245 = (cbLight._m0[_2230].w * _2237) + 1.0;
    uint _2246 = _2229 + 5u;
    float _2252 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
    uint _2256 = _2229 + 4u;
    float _2265 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
    uint _2269 = _2229 | 1u;
    float _2280 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_740, _741, _742));
    float _2283 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_740, _741, _742));
    float _4541 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _4552 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2288 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2290 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * 0.3183098733425140380859375;
    float _2297 = ((cbLight._m0[_2246].x * _2252) * _2290) + (((cbLight._m0[_2256].x * _2218) * _2265) * _2288);
    float _2298 = ((_2252 * cbLight._m0[_2246].y) * _2290) + (((cbLight._m0[_2256].y * _2220) * _2265) * _2288);
    float _2299 = ((_2252 * cbLight._m0[_2246].z) * _2290) + (((cbLight._m0[_2256].z * _2222) * _2265) * _2288);
    uvec4 _2303 = floatBitsToUint(cbLight._m0[_2229 + 12u]);
    bool _2305 = _2303.x == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2305)
    {
        _2407 = _2297;
        _2409 = _2298;
        _2411 = _2299;
    }
    else
    {
        uint _2415 = _2229 + 6u;
        float _2431 = (dot(vec3(cbLight._m0[_2229 + 2u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4563 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2434 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2407 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2297;
        _2409 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2298;
        _2411 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2299;
    }
    bool _2414 = _2303.y == 0u;
    float _2469;
    float _2471;
    float _2473;
    if (_2414)
    {
        _2469 = _2407;
        _2471 = _2409;
        _2473 = _2411;
    }
    else
    {
        uint _2631 = _2229 + 7u;
        float _2647 = (dot(vec3(cbLight._m0[_2229 + 3u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2648 = _2647 * _2647;
        float _4579 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2649 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2650 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2469 = (((cbLight._m0[_2631].x * 0.3183098733425140380859375) * _2649) * _2650) + _2407;
        _2471 = (((cbLight._m0[_2631].y * 0.3183098733425140380859375) * _2649) * _2650) + _2409;
        _2473 = (((cbLight._m0[_2631].z * 0.3183098733425140380859375) * _2649) * _2650) + _2411;
    }
    uint _2476 = _2229 + 8u;
    float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _743) * 0.949999988079071044921875);
    float _2490 = _2489 * _2489;
    float _2491 = cbLight._m0[_2229].x + _820;
    float _2492 = cbLight._m0[_2229].y + _821;
    float _2493 = cbLight._m0[_2229].z + _822;
    float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
    float _2498 = _2497 * _2491;
    float _2499 = _2497 * _2492;
    float _2500 = _2497 * _2493;
    float _2501 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2229].xyz));
    float _4595 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _4606 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2505 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2506 = dot(vec3(_740, _741, _742), vec3(_2498, _2499, _2500));
    float _4617 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2510 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2498, _2499, _2500));
    float _4628 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2514 = _2490 * _2490;
    float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
    float _2529 = (exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2530 = 1.0 - _2490;
    float _2541 = (0.5 / (((_2505 * ((_2504 * _2530) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2530) + _2490) * _2504))) * _2504;
    float _4639 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2543 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
    uint _2557 = _2229 + 9u;
    float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _743) * 0.949999988079071044921875);
    float _2569 = _2568 * _2568;
    float _2570 = cbLight._m0[_2269].x + _820;
    float _2571 = cbLight._m0[_2269].y + _821;
    float _2572 = cbLight._m0[_2269].z + _822;
    float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
    float _2577 = _2576 * _2570;
    float _2578 = _2576 * _2571;
    float _2579 = _2576 * _2572;
    float _2580 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2269].xyz));
    float _4650 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2584 = dot(vec3(_740, _741, _742), vec3(_2577, _2578, _2579));
    float _4661 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2588 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2577, _2578, _2579));
    float _4672 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2592 = _2569 * _2569;
    float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
    float _2605 = (exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2606 = 1.0 - _2569;
    float _2616 = (0.5 / (((_2505 * ((_2583 * _2606) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2606) + _2569) * _2583))) * _2583;
    float _4683 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2618 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
    float _2628 = (((_2605 * cbLight._m0[_2557].x) * _2618) * _2252) + ((((cbLight._m0[_2476].x * _2218) * _2529) * _2543) * _2265);
    float _2629 = (((_2605 * cbLight._m0[_2557].y) * _2618) * _2252) + ((((cbLight._m0[_2476].y * _2220) * _2529) * _2543) * _2265);
    float _2630 = (((_2605 * cbLight._m0[_2557].z) * _2618) * _2252) + ((((cbLight._m0[_2476].z * _2222) * _2529) * _2543) * _2265);
    float _2686;
    float _2688;
    float _2690;
    if (_2305)
    {
        _2686 = _2628;
        _2688 = _2629;
        _2690 = _2630;
    }
    else
    {
        uint _2692 = _2229 + 2u;
        uint _2696 = _2229 + 10u;
        float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _743) * 0.949999988079071044921875);
        float _2711 = _2710 * _2710;
        float _2712 = cbLight._m0[_2692].x + _820;
        float _2713 = cbLight._m0[_2692].y + _821;
        float _2714 = cbLight._m0[_2692].z + _822;
        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
        float _2719 = _2718 * _2712;
        float _2720 = _2718 * _2713;
        float _2721 = _2718 * _2714;
        float _2722 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2692].xyz));
        float _4694 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2726 = dot(vec3(_740, _741, _742), vec3(_2719, _2720, _2721));
        float _4705 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2730 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_2719, _2720, _2721));
        float _4716 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2734 = _2711 * _2711;
        float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
        float _2747 = (exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2748 = 1.0 - _2711;
        float _2758 = (0.5 / (((_2505 * ((_2725 * _2748) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2748) + _2711) * _2725))) * _2725;
        float _4727 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2686 = (((_2747 * cbLight._m0[_2696].x) * _2760) * _2761) + _2628;
        _2688 = (((_2747 * cbLight._m0[_2696].y) * _2760) * _2761) + _2629;
        _2690 = (((_2747 * cbLight._m0[_2696].z) * _2760) * _2761) + _2630;
    }
    float _2792;
    float _2794;
    float _2796;
    if (_2414)
    {
        _2792 = _2686;
        _2794 = _2688;
        _2796 = _2690;
    }
    else
    {
        uint _2803 = _2229 + 3u;
        uint _2807 = _2229 + 11u;
        float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2803].w)) * _743) * 0.949999988079071044921875);
        float _2822 = _2821 * _2821;
        float _2823 = cbLight._m0[_2803].x + _820;
        float _2824 = cbLight._m0[_2803].y + _821;
        float _2825 = cbLight._m0[_2803].z + _822;
        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
        float _2830 = _2829 * _2823;
        float _2831 = _2829 * _2824;
        float _2832 = _2829 * _2825;
        float _2833 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2803].xyz));
        float _4743 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2837 = dot(vec3(_740, _741, _742), vec3(_2830, _2831, _2832));
        float _4754 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2841 = dot(vec3(cbLight._m0[_2803].xyz), vec3(_2830, _2831, _2832));
        float _4765 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2845 = _2822 * _2822;
        float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
        float _2858 = (exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2859 = 1.0 - _2822;
        float _2869 = (0.5 / (((_2505 * ((_2836 * _2859) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2859) + _2822) * _2836))) * _2836;
        float _4776 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2871 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
        float _2872 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2792 = (((_2858 * cbLight._m0[_2807].x) * _2871) * _2872) + _2686;
        _2794 = (((_2858 * cbLight._m0[_2807].y) * _2871) * _2872) + _2688;
        _2796 = (((_2858 * cbLight._m0[_2807].z) * _2871) * _2872) + _2690;
    }
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_2227.y == 0u)
    {
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.x;
        uint _2905 = uint((float(_2893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _841) / _2894))) + floor(float(uint(cbSceneParam._m0[85u].x * _840) / _2894)));
        float _2915 = (log2(_2005 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2916 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        uint _2919 = uint(isnan(14.0) ? _2916 : (isnan(_2916) ? 14.0 : min(_2916, 14.0)));
        uvec4 _2924 = texelFetch(g_lightClusterGridBuffer, int(((_2919 << 2u) + (_2905 << 6u)) >> 2u));
        uint _2925 = _2924.x;
        uint _2926 = _2893.z;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((((1u << ((_2926 >> 4u) & 15u)) + 4294967295u) & _2925) == 0u) || ((_2926 & 240u) == 0u))
        {
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
        }
        else
        {
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            uint _3164 = 0u;
            uint _3173;
            bool _3174;
            for (;;)
            {
                _3173 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3164 << 2u)) >> 2u)).x;
                _3174 = _3173 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3174)
                {
                    frontier_phi_71_pred = _3163;
                    frontier_phi_71_pred_1 = _3162;
                    frontier_phi_71_pred_2 = _3161;
                    frontier_phi_71_pred_3 = _3160;
                    frontier_phi_71_pred_4 = _3159;
                    frontier_phi_71_pred_5 = _3158;
                }
                else
                {
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    uint _3309;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3173;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    for (;;)
                    {
                        uint _3313 = uint(findLSB(_3309)) + (_3164 << 5u);
                        uint _3310 = (_3309 + 4294967295u) & _3309;
                        uint _3315 = _3313 * 48u;
                        vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3335 = (_3313 * 48u) + 4u;
                        vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 3u)).x));
                        uint _3354 = (_3313 * 48u) + 8u;
                        vec3 _3365 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x));
                        float _3369 = _3329.x - _2003;
                        float _3370 = _3329.y - _2004;
                        float _3371 = _3329.z - _2005;
                        float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                        float _3375 = inversesqrt(_3372);
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3379 = dot(vec3(_859, _862, _865), vec3(_3376, _3377, _3378));
                        float _3384 = 1.0 - (_3372 * _3329.w);
                        float _4802 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3385 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3386 = sqrt(_3372) * _3348.w;
                        float _3389 = 1.39999997615814208984375 / (_3386 + 1.39999997615814208984375);
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3379) + _3390;
                        float _3396 = _3386 * _3386;
                        float _3400 = ((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3385) / ((_3396 * 0.699999988079071044921875) + 1.0);
                        float _3404 = (-0.0) - _2003;
                        float _3405 = (-0.0) - _2004;
                        float _3406 = (-0.0) - _2005;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3420 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                        float _3421 = 1.0 - _919;
                        float _3428 = sqrt(1.0 - ((1.0 - (_3421 * _3421)) * (1.0 - (_3420 * _3420))));
                        float _3429 = _3428 * _3428;
                        float _3430 = _3429 * _3429;
                        float _3431 = _3411 + _3376;
                        float _3432 = _3412 + _3377;
                        float _3433 = _3413 + _3378;
                        float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                        float _3441 = dot(vec3(_859, _862, _865), vec3(_3411, _3412, _3413));
                        float _4818 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3445 = dot(vec3(_859, _862, _865), vec3(_3437 * _3431, _3437 * _3432, _3437 * _3433));
                        float _4829 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3448 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3452 = ((_3448 * _3448) * (_3430 + (-1.0))) + 1.0;
                        float _3453 = _3389 * _3429;
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3379) + _3454;
                        float _4840 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3458 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                        float _3459 = 1.0 - _3429;
                        float _3469 = (0.5 / (((_3458 * ((_3444 * _3459) + _3429)) + 9.9999999392252902907785028219223e-09) + (((_3458 * _3459) + _3429) * _3444))) * _3458;
                        float _4851 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3480 = (((_3430 * 3.1415927410125732421875) * (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) / ((_3452 * _3452) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125))) * _3385;
                        _3233 = (_3400 * _3348.x) + _3306;
                        _3234 = (_3400 * _3348.y) + _3307;
                        _3235 = (_3400 * _3348.z) + _3308;
                        _3230 = (_3480 * _3365.x) + _3303;
                        _3231 = (_3480 * _3365.y) + _3304;
                        _3232 = (_3480 * _3365.z) + _3305;
                        if (_3310 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3310;
                        }
                    }
                    frontier_phi_71_pred = _3235;
                    frontier_phi_71_pred_1 = _3234;
                    frontier_phi_71_pred_2 = _3233;
                    frontier_phi_71_pred_3 = _3232;
                    frontier_phi_71_pred_4 = _3231;
                    frontier_phi_71_pred_5 = _3230;
                }
                _3016 = frontier_phi_71_pred;
                _3014 = frontier_phi_71_pred_1;
                _3012 = frontier_phi_71_pred_2;
                _3010 = frontier_phi_71_pred_3;
                _3008 = frontier_phi_71_pred_4;
                _3006 = frontier_phi_71_pred_5;
                uint _3165 = _3164 + 1u;
                if (_3165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3158 = _3006;
                    _3159 = _3008;
                    _3160 = _3010;
                    _3161 = _3012;
                    _3162 = _3014;
                    _3163 = _3016;
                    _3164 = _3165;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
        }
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.z;
        uint _3022 = (_3020 >> 8u) & 15u;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        if (((4294967295u << _3022) & _2925) == 0u)
        {
            _3126 = _3005;
            _3128 = _3007;
            _3130 = _3009;
            _3132 = _3011;
            _3134 = _3013;
            _3136 = _3015;
        }
        else
        {
            float _3151 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
            float _3152 = _3151 * _2003;
            float _3153 = _3151 * _2004;
            float _3154 = _3151 * _2005;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3022 < ((_3020 >> 12u) & 15u))
            {
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3286 = _3005;
                float _3287 = _3007;
                float _3288 = _3009;
                float _3289 = _3011;
                float _3290 = _3013;
                float _3291 = _3015;
                uint _3292 = _3022;
                uint _3301;
                bool _3302;
                for (;;)
                {
                    _3301 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3292 << 2u)) >> 2u)).x;
                    _3302 = _3301 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3302)
                    {
                        frontier_phi_82_pred = _3291;
                        frontier_phi_82_pred_1 = _3290;
                        frontier_phi_82_pred_2 = _3289;
                        frontier_phi_82_pred_3 = _3288;
                        frontier_phi_82_pred_4 = _3287;
                        frontier_phi_82_pred_5 = _3286;
                    }
                    else
                    {
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3507 = _3286;
                        float _3508 = _3287;
                        float _3509 = _3288;
                        float _3510 = _3289;
                        float _3511 = _3290;
                        float _3512 = _3291;
                        uint _3513 = _3301;
                        uint _3514;
                        vec4 _3539;
                        float _3540;
                        vec4 _3555;
                        vec3 _3567;
                        vec4 _3582;
                        vec4 _3597;
                        float _3643;
                        bool _3644;
                        for (;;)
                        {
                            uint _3524 = ((_3292 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3513));
                            _3514 = (_3513 + 4294967295u) & _3513;
                            uint _3526 = _3524 * 40u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3540 = _3539.w;
                            uint _3542 = (_3524 * 40u) + 4u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3524 * 40u) + 8u;
                            _3567 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x));
                            uint _3569 = (_3524 * 40u) + 16u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3524 * 40u) + 20u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3524 * 40u) + 24u;
                            vec4 _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3618 = (_3524 * 40u) + 28u;
                            vec4 _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            _3643 = fma(_2005, _3631.z, fma(_2004, _3631.y, _3631.x * _2003)) + _3631.w;
                            _3644 = !((fma(_2005, _3612.z, fma(_2004, _3612.y, _3612.x * _2003)) + _3612.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3644)
                            {
                                float _3671 = _3539.x - _2003;
                                float _3672 = _3539.y - _2004;
                                float _3673 = _3539.z - _2005;
                                float _3674 = dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673));
                                float _3677 = inversesqrt(_3674);
                                float _3678 = _3677 * _3671;
                                float _3679 = _3677 * _3672;
                                float _3680 = _3677 * _3673;
                                float _3684 = 1.0 - (_3674 / (_3540 * _3540));
                                float _4862 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3689 = sqrt(_3674) * _3555.w;
                                float _3691 = 1.39999997615814208984375 / (_3689 + 1.39999997615814208984375);
                                float _3692 = _3691 * _3691;
                                float _3695 = ((1.0 - _3692) * dot(vec3(_3678, _3679, _3680), vec3(_859, _862, _865))) + _3692;
                                float _3698 = _3689 * _3689;
                                float _3702 = (fma(_2005, _3582.z, fma(_2004, _3582.y, _3582.x * _2003)) + _3582.w) / _3643;
                                float _3703 = (fma(_2005, _3597.z, fma(_2004, _3597.y, _3597.x * _2003)) + _3597.w) / _3643;
                                float _3707 = 1.0 - dot(vec2(_3702, _3703), vec2(_3702, _3703));
                                float _4878 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3709 = _3708 * (((isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0))) * _3685) / ((_3698 * 0.699999988079071044921875) + 1.0));
                                float _3721 = exp2(log2(1.0 / ((_3698 * 3.5) + 5.0)) * 0.25);
                                float _3722 = 1.0 - _919;
                                float _3729 = sqrt(1.0 - ((1.0 - (_3722 * _3722)) * (1.0 - (_3721 * _3721))));
                                float _3730 = _3729 * _3729;
                                float _3731 = _3730 * _3730;
                                float _3732 = _3678 - _3152;
                                float _3733 = _3679 - _3153;
                                float _3734 = _3680 - _3154;
                                float _3738 = inversesqrt(dot(vec3(_3732, _3733, _3734), vec3(_3732, _3733, _3734)));
                                float _3742 = dot(vec3(_859, _862, _865), vec3((-0.0) - _3152, (-0.0) - _3153, (-0.0) - _3154));
                                float _4889 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3746 = dot(vec3(_859, _862, _865), vec3(_3738 * _3732, _3738 * _3733, _3738 * _3734));
                                float _4900 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3749 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3753 = ((_3749 * _3749) * (_3731 + (-1.0))) + 1.0;
                                float _3754 = _3691 * _3730;
                                float _3755 = _3754 * _3754;
                                float _3761 = ((1.0 - _3755) * dot(vec3(_859, _862, _865), vec3(_3678, _3679, _3680))) + _3755;
                                float _4911 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3763 = 1.0 - _3730;
                                float _3773 = (0.5 / (((_3762 * ((_3745 * _3763) + _3730)) + 9.9999999392252902907785028219223e-09) + (((_3762 * _3763) + _3730) * _3745))) * _3762;
                                float _4922 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3783 = (_3708 * _3685) * (((_3731 * 3.1415927410125732421875) * (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) / ((_3753 * _3753) * ((_3698 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3709 * _3555.z;
                                frontier_phi_88_pred_1 = _3709 * _3555.y;
                                frontier_phi_88_pred_2 = _3709 * _3555.x;
                                frontier_phi_88_pred_3 = _3783 * _3567.z;
                                frontier_phi_88_pred_4 = _3783 * _3567.y;
                                frontier_phi_88_pred_5 = _3783 * _3567.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3792 = frontier_phi_88_pred;
                            _3791 = frontier_phi_88_pred_1;
                            _3790 = frontier_phi_88_pred_2;
                            _3789 = frontier_phi_88_pred_3;
                            _3788 = frontier_phi_88_pred_4;
                            _3787 = frontier_phi_88_pred_5;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            if (_3514 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3514;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3499;
                        frontier_phi_82_pred_1 = _3498;
                        frontier_phi_82_pred_2 = _3497;
                        frontier_phi_82_pred_3 = _3496;
                        frontier_phi_82_pred_4 = _3495;
                        frontier_phi_82_pred_5 = _3494;
                    }
                    _3137 = frontier_phi_82_pred;
                    _3135 = frontier_phi_82_pred_1;
                    _3133 = frontier_phi_82_pred_2;
                    _3131 = frontier_phi_82_pred_3;
                    _3129 = frontier_phi_82_pred_4;
                    _3127 = frontier_phi_82_pred_5;
                    uint _3293 = _3292 + 1u;
                    if (_3293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3286 = _3127;
                        _3287 = _3129;
                        _3288 = _3131;
                        _3289 = _3133;
                        _3290 = _3135;
                        _3291 = _3137;
                        _3292 = _3293;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3133;
                frontier_phi_63_64_ladder_1 = _3137;
                frontier_phi_63_64_ladder_2 = _3135;
                frontier_phi_63_64_ladder_3 = _3131;
                frontier_phi_63_64_ladder_4 = _3129;
                frontier_phi_63_64_ladder_5 = _3127;
            }
            else
            {
                frontier_phi_63_64_ladder = _3011;
                frontier_phi_63_64_ladder_1 = _3015;
                frontier_phi_63_64_ladder_2 = _3013;
                frontier_phi_63_64_ladder_3 = _3009;
                frontier_phi_63_64_ladder_4 = _3007;
                frontier_phi_63_64_ladder_5 = _3005;
            }
            _3126 = frontier_phi_63_64_ladder_5;
            _3128 = frontier_phi_63_64_ladder_4;
            _3130 = frontier_phi_63_64_ladder_3;
            _3132 = frontier_phi_63_64_ladder;
            _3134 = frontier_phi_63_64_ladder_2;
            _3136 = frontier_phi_63_64_ladder_1;
        }
        float _3141 = isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0));
        _2938 = (_3141 * _3132) + _2469;
        _2940 = (_3141 * _3134) + _2471;
        _2942 = (_3141 * _3136) + _2473;
        _2944 = ((_3126 * 0.039999999105930328369140625) * _3141) + _2792;
        _2946 = ((_3128 * 0.039999999105930328369140625) * _3141) + _2794;
        _2948 = ((_3130 * 0.039999999105930328369140625) * _3141) + _2796;
    }
    else
    {
        _2938 = _2469;
        _2940 = _2471;
        _2942 = _2473;
        _2944 = _2792;
        _2946 = _2794;
        _2948 = _2796;
    }
    float _4938 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4949 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4960 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2965 = ((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2938 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _903))) + ((_2944 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    float _2966 = ((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2940 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _903))) + ((_2946 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    float _2967 = ((isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_2942 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _903))) + ((_2948 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    uint _2968 = _244 + 6u;
    float _2976 = _840 / cbSceneParam._m0[86u].x;
    float _2977 = _841 / cbSceneParam._m0[86u].y;
    vec4 _2991 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2976, _2977, (log2((isnan(cbSceneParam._m0[77u].w) ? _761 : (isnan(_761) ? cbSceneParam._m0[77u].w : min(_761, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2993 = _2991.x;
    float _2994 = _2991.y;
    float _2995 = _2991.z;
    float _2996 = _2991.w;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    if (_761 > cbSceneParam._m0[78u].w)
    {
        float _3030 = isnan(_761) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _761 : min(cbSceneParam._m0[80u].w, _761));
        float _3031 = _3030 / _761;
        float _3042 = _3031 * _813;
        float _3043 = _814 * _3031;
        float _3044 = (-0.0) - _3043;
        float _3046 = _3031 * _815;
        float _3048 = (cbSceneParam._m0[77u].w * _3044) / _3030;
        float _3049 = _3048 + cbSceneParam._m0[79u].w;
        float _3050 = cbSceneParam._m0[79u].w - _3043;
        float _3056 = sqrt(((_3042 * _3042) + (_3043 * _3043)) + (_3046 * _3046));
        float _3059 = (1.0 - (cbSceneParam._m0[77u].w / _3030)) * _3056;
        float _3064 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3066 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3243;
        if (abs((_3044 - _3048) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3243 = ((((_3049 > 0.0) ? exp2(_3064 * _3049) : (2.0 - exp2(_3066 * _3049))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3059;
        }
        else
        {
            float _3187 = 1.0 / cbSceneParam._m0[80u].x;
            float _3188 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : max(_3049, _3050));
            float _3189 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : min(_3049, _3050));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            _3243 = ((abs(_3056 / _3044) * cbSceneParam._m0[80u].y) * ((((_3198 - _3199) * 2.0) - ((exp2(_3064 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0)))) - exp2(_3064 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))))) * _3187)) - ((exp2(_3066 * _3198) - exp2(_3066 * _3199)) * _3187))) + (_3059 * cbSceneParam._m0[80u].z);
        }
        vec4 _3245 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2976, _2977, 1.0), 0.0);
        float _3254 = exp2((_3243 * (-1.44269502162933349609375)) * (1.0 - _3245.w));
        float _3255 = log2(_3254);
        float _3271 = log2(_2996);
        _3068 = (exp2(_3271 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].x)) * _3245.x) / cbSceneParam._m0[78u].x)) + _2993;
        _3070 = (exp2(_3271 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].y)) * _3245.y) / cbSceneParam._m0[78u].y)) + _2994;
        _3072 = (exp2(_3271 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].z)) * _3245.z) / cbSceneParam._m0[78u].z)) + _2995;
        _3074 = _3254 * _2996;
    }
    else
    {
        _3068 = _2993;
        _3070 = _2994;
        _3072 = _2995;
        _3074 = _2996;
    }
    bool _3281;
    vec4 _3084;
    vec4 _3106;
    float _3108;
    float _3112;
    float _3113;
    float _3114;
    float _3115;
    bool _3125;
    for (;;)
    {
        _3084 = cbMatDynParam._m0[0u];
        float _3086 = roundEven(_3084.y);
        bool _3087 = _3086 == 3.0;
        float _3088 = log2(_3074);
        float _3095 = exp2(_3088 * cbSceneParam._m0[78u].x) * _2965;
        float _3096 = exp2(_3088 * cbSceneParam._m0[78u].y) * _2966;
        float _3097 = exp2(_3088 * cbSceneParam._m0[78u].z) * _2967;
        float _3104 = _829 + (-0.5);
        _3106 = cbMtdParam._m0[1u];
        _3108 = _3106.y * _3104;
        float _3111 = (_3086 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3112 = _3111 * (_3087 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3068)));
        _3113 = _3111 * (_3087 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3070)));
        _3114 = _3111 * (_3087 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3072)));
        _3115 = _3104 * 0.999000012874603271484375;
        _3125 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3125)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _3115) < 0.5)
            {
                _3281 = true;
                break;
            }
        }
        uint _3222 = _878 + uint(_3084.w);
        if ((cbInstanceData._m0[_3222].w < 1.0) && ((cbInstanceData._m0[_3222].w + _3115) < 0.5))
        {
            _3281 = true;
            break;
        }
        if ((_3108 + 1.0) < _3106.x)
        {
            _3281 = true;
            break;
        }
        _3281 = false;
        break;
    }
    float _3485;
    if (_3281)
    {
        discard_state = true;
        _3485 = 0.0;
    }
    else
    {
        _3485 = cbInstanceData._m0[_2968].w;
    }
    SV_Target.x = _3112;
    SV_Target.y = _3113;
    SV_Target.z = _3114;
    SV_Target.w = _3485;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2968].w;
    discard_exit();
}


