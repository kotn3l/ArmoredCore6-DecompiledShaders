#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1508;
float _4150;
float _4151;
float _4152;
float _4153;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4162 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4173 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4184 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _453 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _455 = _453.x;
    float _467 = dot(vec4(_455, _453.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _484 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _418.x) * 2.0) - ((((_455 - _467) * cbMtdParam._m0[24u].z) + _467) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4195 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _492 = (_485 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378;
    float _493 = (_485 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _494 = (_485 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380;
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _533 = _531.x;
    float _543 = dot(vec4(_533, _531.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _557 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _418.y) * 2.0) - ((((_533 - _543) * cbMtdParam._m0[24u].z) + _543) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4206 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _568 = (_347.x * cbMtdParam._m0[9u].x) * ((_558 * ((_511.x * cbMtdParam._m0[13u].x) - _492)) + _492);
    float _569 = (_347.y * cbMtdParam._m0[9u].y) * ((_558 * ((_511.y * cbMtdParam._m0[13u].y) - _493)) + _493);
    float _570 = (_347.z * cbMtdParam._m0[9u].z) * ((_558 * ((_511.z * cbMtdParam._m0[13u].z) - _494)) + _494);
    float _574 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _568;
    float _577 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _569;
    float _580 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _570;
    float _588 = (((_568 - _574) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) + _574) * 4.55000019073486328125;
    float _590 = (((_569 - _577) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) + _577) * 4.55000019073486328125;
    float _592 = (((_570 - _580) * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) + _580) * 4.55000019073486328125;
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _651 = _649.x;
    float _652 = _649.y;
    float _653 = _649.z;
    float _660 = ((_632.x - _651) * _485) + _651;
    float _661 = ((_632.y - _652) * _485) + _652;
    float _662 = ((_632.z - _653) * _485) + _653;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _687 = ((_674.z - _662) * _558) + _662;
    float _690 = ((((_674.x - _660) * _558) + _660) * 2.0) + (-1.0);
    float _691 = ((((_674.y - _661) * _558) + _661) * 2.0) + (-1.0);
    float _692 = dot(vec2(_690, _691), vec2(_690, _691));
    float _4217 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _697 = sqrt(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _738 = _736.x;
    float _739 = 1.0 - _738;
    float _745 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _748 = ((isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : min(_745, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _757 = (_748 - ((((((_738 - _739) * cbMtdParam._m0[24u].w) + _739) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _748))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4238 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _765 = (_758 * (cbMtdParam._m0[17u].x - _588)) + _588;
    float _766 = (_758 * (cbMtdParam._m0[17u].y - _590)) + _590;
    float _767 = (_758 * (cbMtdParam._m0[17u].z - _592)) + _592;
    vec4 _779 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _781 = _779.x;
    float _782 = 1.0 - _781;
    float _807 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_781 - _782) * cbMtdParam._m0[24u].y) + _782) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4249 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _808 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _816 = ((((cbMtdParam._m0[10u].x - _765) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _808) + _765;
    float _817 = ((((cbMtdParam._m0[10u].y - _766) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _808) + _766;
    float _818 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _767)) * _808) + _767;
    float _823 = (((_609.z - _687) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _687;
    float _827 = ((_711.z - _823) * cbMtdParam._m0[19u].w) + _823;
    vec4 _841 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _848 = (_841.x * 2.0) + (-1.0);
    float _849 = (_841.y * 2.0) + (-1.0);
    float _850 = dot(vec2(_848, _849), vec2(_848, _849));
    float _4260 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _858 = (_758 * (_841.z - _827)) + _827;
    float _861 = ((cbMtdParam._m0[23u].y - _858) * _808) + _858;
    vec4 _882 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _888 = (_882.x * 2.0) + (-1.0);
    float _889 = (_882.y * 2.0) + (-1.0);
    float _890 = dot(vec2(_888, _889), vec2(_888, _889));
    float _4271 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _904 = (_690 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_609.x * 2.0) + (-1.0)))) + (((_711.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _905 = (_691 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_609.y * 2.0) + (-1.0)))) + (((_711.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _917 = (((_848 - _904) + (cbMtdParam._m0[21u].x * _904)) * _758) + _904;
    float _918 = (((_849 - _905) + (cbMtdParam._m0[21u].x * _905)) * _758) + _905;
    float _919 = (_758 * (sqrt(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) - _697)) + _697;
    float _930 = (((_888 - _917) + (_917 * cbMtdParam._m0[22u].z)) * _808) + _917;
    float _931 = (((_889 - _918) + (_918 * cbMtdParam._m0[22u].z)) * _808) + _918;
    float _932 = ((sqrt(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) - _919) * _808) + _919;
    float _934 = cbMtdParam._m0[22u].x + _711.w;
    float _937 = fma(_932, _259 * NORMAL.x, fma(_931, _266 * TANGENT.x, (_252 * _244) * _930));
    float _940 = fma(_932, _259 * NORMAL.y, fma(_931, _266 * TANGENT.y, (_252 * _245) * _930));
    float _943 = fma(_932, _259 * NORMAL.z, fma(_931, _266 * TANGENT.z, (_252 * _246) * _930));
    float _947 = inversesqrt(dot(vec3(_937, _940, _943), vec3(_937, _940, _943)));
    float _948 = _947 * _937;
    float _949 = _947 * _940;
    float _950 = _947 * _943;
    float _4282 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _951 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4304 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4315 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4326 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _969 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1019 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1009);
    float _1020 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1009);
    float _1021 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1009);
    float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
    float _1026 = _1019 * _1025;
    float _1027 = _1020 * _1025;
    float _1028 = _1021 * _1025;
    vec4 _1033 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1035 = _1033.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1189 = sqrt(((_1019 * _1019) + (_1020 * _1020)) + (_1021 * _1021));
        float _1195 = (cbMatDynParam._m0[5u].x * _1189) + cbMatDynParam._m0[5u].y;
        float _4337 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1200 = (cbMatDynParam._m0[5u].z * _1189) + cbMatDynParam._m0[5u].w;
        float _4348 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) - _1196)) + _1196) < ((_1035 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1046 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1047 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1065 = fma(_950, cbSceneParam._m0[5u].z, fma(_949, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _948));
    float _1068 = fma(_950, cbSceneParam._m0[6u].z, fma(_949, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _948));
    float _1071 = fma(_950, cbSceneParam._m0[7u].z, fma(_949, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _948));
    uint _1084 = _291 + 9u;
    uint _1085 = _1084 + uint(cbMatDynParam._m0[0u].w);
    float _1091 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * cbInstanceData._m0[_1085].x;
    float _1092 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * cbInstanceData._m0[_1085].y;
    float _1093 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * cbInstanceData._m0[_1085].z;
    float _4359 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _4370 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1095 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _4381 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    vec4 _1105 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1046, cbSceneParam._m0[86u].y * _1047));
    float _1109 = ((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * TEXCOORD_5.w) * _1105.x;
    float _1110 = dot(vec3(_948, _949, _950), vec3(_1026, _1027, _1028));
    float _1113 = _1110 * 2.0;
    float _1117 = (_1113 * _948) - _1026;
    float _1118 = (_1113 * _949) - _1027;
    float _1119 = (_1113 * _950) - _1028;
    float _1123 = abs(dot(vec3(_1026, _1027, _1028), vec3(_948, _949, _950)));
    float _4392 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1125 = sqrt(_951);
    float _1138 = exp2((_1125 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1125 * 3.0));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1507;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1232 = fma(_1178, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170));
        float _1236 = fma(_1178, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170));
        float _1240 = fma(_1178, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170));
        float _1265 = _1170 + _948;
        float _1266 = _1174 + _949;
        float _1267 = _1178 + _950;
        float _1277 = fma(_1267, cbModelParam._m0[26u].z, fma(_1266, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265)) - _1232;
        float _1278 = fma(_1267, cbModelParam._m0[27u].z, fma(_1266, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265)) - _1236;
        float _1279 = fma(_1267, cbModelParam._m0[28u].z, fma(_1266, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265)) - _1240;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1232 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1236 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[34u].z) + ((((((_1240 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1335 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1301.x + (-0.5));
        float _1337 = _1335 * (_1301.y + (-0.5));
        float _1338 = _1335 * (_1301.z + (-0.5));
        float _1345 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1308.x + (-0.5));
        float _1347 = _1345 * (_1308.y + (-0.5));
        float _1348 = _1345 * (_1308.z + (-0.5));
        float _1355 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1315.x + (-0.5));
        float _1357 = _1355 * (_1315.y + (-0.5));
        float _1358 = _1355 * (_1315.z + (-0.5));
        float _1365 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1322.x + (-0.5));
        float _1367 = _1365 * (_1322.y + (-0.5));
        float _1368 = _1365 * (_1322.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1389 = (dot(vec3(_948, _949, _950), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4418 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1399 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4429 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4440 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_1401 + 1.0))) + _1406) * _1369;
        float _1416 = _1337 * 0.5;
        float _1417 = _1347 * 0.5;
        float _1418 = _1357 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_948, _949, _950), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4451 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4462 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4473 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_1443 + 1.0))) + _1448) * _1370;
        float _1458 = _1338 * 0.5;
        float _1459 = _1348 * 0.5;
        float _1460 = _1358 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_948, _949, _950), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4484 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4495 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4506 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_1485 + 1.0))) + _1490) * _1371;
        _1507 = _1338;
        _1509 = _1337;
        _1510 = _1336;
        _1511 = _1348;
        _1512 = _1347;
        _1513 = _1346;
        _1514 = _1358;
        _1515 = _1357;
        _1516 = _1356;
        _1517 = _1371;
        _1518 = _1370;
        _1519 = _1369;
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1508;
        _1509 = _1508;
        _1510 = _1508;
        _1511 = _1508;
        _1512 = _1508;
        _1513 = _1508;
        _1514 = _1508;
        _1515 = _1508;
        _1516 = _1508;
        _1517 = _1508;
        _1518 = _1508;
        _1519 = _1508;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1549 = fma(_1178, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170));
        float _1553 = fma(_1178, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170));
        float _1557 = fma(_1178, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170));
        float _1580 = _1170 + _948;
        float _1581 = _1174 + _949;
        float _1582 = _1178 + _950;
        float _1592 = fma(_1582, cbModelParam._m0[30u].z, fma(_1581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1580)) - _1549;
        float _1593 = fma(_1582, cbModelParam._m0[31u].z, fma(_1581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1580)) - _1553;
        float _1594 = fma(_1582, cbModelParam._m0[32u].z, fma(_1581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1580)) - _1557;
        float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
        float _1611 = ((_1598 * _1592) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1549 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1598 * _1593) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1553 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1598 * _1594) / cbModelParam._m0[35u].z) + ((((((_1557 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        float _1648 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1615.x + (-0.5));
        float _1650 = _1648 * (_1615.y + (-0.5));
        float _1651 = _1648 * (_1615.z + (-0.5));
        float _1658 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1622.x + (-0.5));
        float _1660 = _1658 * (_1622.y + (-0.5));
        float _1661 = _1658 * (_1622.z + (-0.5));
        float _1668 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1629.x + (-0.5));
        float _1670 = _1668 * (_1629.y + (-0.5));
        float _1671 = _1668 * (_1629.z + (-0.5));
        float _1678 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1636.x + (-0.5));
        float _1680 = _1678 * (_1636.y + (-0.5));
        float _1681 = _1678 * (_1636.z + (-0.5));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = _1649 * 0.5;
        float _1686 = _1659 * 0.5;
        float _1687 = _1669 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_948, _949, _950), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4547 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4558 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4569 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_1712 + 1.0))) + _1717) * _1682;
        float _1727 = _1650 * 0.5;
        float _1728 = _1660 * 0.5;
        float _1729 = _1670 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_948, _949, _950), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4580 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4591 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4602 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_1754 + 1.0))) + _1759) * _1683;
        float _1769 = _1651 * 0.5;
        float _1770 = _1661 * 0.5;
        float _1771 = _1671 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1785 = (dot(vec3(_948, _949, _950), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4613 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4624 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4635 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_1796 + 1.0))) + _1801) * _1684;
        _1818 = _1651;
        _1819 = _1650;
        _1820 = _1649;
        _1821 = _1661;
        _1822 = _1660;
        _1823 = _1659;
        _1824 = _1671;
        _1825 = _1670;
        _1826 = _1669;
        _1827 = _1684;
        _1828 = _1683;
        _1829 = _1682;
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
    }
    else
    {
        _1818 = _1508;
        _1819 = _1508;
        _1820 = _1508;
        _1821 = _1508;
        _1822 = _1508;
        _1823 = _1508;
        _1824 = _1508;
        _1825 = _1508;
        _1826 = _1508;
        _1827 = _1508;
        _1828 = _1508;
        _1829 = _1508;
        _1830 = 0.0;
        _1831 = 0.0;
        _1832 = 0.0;
    }
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1520)) + _1520;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1521)) + _1521;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1522)) + _1522;
    float _1865 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1842));
    float _1886 = _1117 * 0.5;
    float _1887 = _1118 * 0.5;
    float _1888 = _1119 * 0.5;
    float _1889 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1892 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1895 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1929;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1902 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1507, _1511, _1514, _1517));
        float _1906 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1910 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1917 = dot(vec4(cbModelParam._m0[39u]), vec4(_1886, _1887, _1888, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1940;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1931 = dot(vec4(cbModelParam._m0[40u]), vec4(_1886, _1887, _1888, 1.0));
        _1940 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1931) ? 0.0 : (isnan(0.0) ? _1931 : max(0.0, _1931))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1940 = 1.0;
    }
    float _1944 = (_1940 * cbModelParam._m0[1u].x) + (_1929 * (1.0 - cbModelParam._m0[1u].x));
    float _1954 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _951);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1954 : min(cbModelParam._m0[25u].z, _1954));
    float _2036;
    float _2038;
    float _2040;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2003 = fma(_1178, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1170)) + cbModelParam._m0[13u].w;
        float _2007 = fma(_1178, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1170)) + cbModelParam._m0[14u].w;
        float _2011 = fma(_1178, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1170)) + cbModelParam._m0[15u].w;
        float _2014 = fma(_1119, cbModelParam._m0[13u].z, fma(_1118, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117));
        float _2017 = fma(_1119, cbModelParam._m0[14u].z, fma(_1118, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117));
        float _2020 = fma(_1119, cbModelParam._m0[15u].z, fma(_1118, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117));
        float _2048;
        if (_2014 > 0.0)
        {
            _2048 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2048 = frontier_phi_17_15_ladder;
        }
        float _2218;
        if (_2017 > 0.0)
        {
            _2218 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2218 = frontier_phi_26_22_ladder;
        }
        float _2513;
        if (_2020 > 0.0)
        {
            _2513 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2513 = frontier_phi_38_33_ladder;
        }
        float _2515 = isnan(_2218) ? _2048 : (isnan(_2048) ? _2218 : min(_2048, _2218));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _2014) + _2003;
        float _2521 = (_2516 * _2017) + _2007;
        float _2522 = (_2516 * _2020) + _2011;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2523;
        float _2527 = _2523 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 > _2527) || ((_2521 < _2525) || ((_2520 < _2525) || (_2520 > _2527))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2522, cbModelParam._m0[9u].z, fma(_2521, cbModelParam._m0[9u].y, _2520 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2522, cbModelParam._m0[10u].z, fma(_2521, cbModelParam._m0[10u].y, _2520 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2522, cbModelParam._m0[11u].z, fma(_2521, cbModelParam._m0[11u].y, _2520 * cbModelParam._m0[11u].x))), _1955);
            frontier_phi_16_38_ladder = _2667.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2667.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2667.x * cbModelParam._m0[1u].y;
        }
        _2036 = frontier_phi_16_38_ladder_2;
        _2038 = frontier_phi_16_38_ladder_1;
        _2040 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1117, _1118, _1119), _1955);
        _2036 = _2024.x * cbModelParam._m0[1u].y;
        _2038 = _2024.y * cbModelParam._m0[1u].y;
        _2040 = _2024.z * cbModelParam._m0[1u].y;
    }
    float _2044 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _951);
    float _2045 = isnan(_2044) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2044 : min(cbModelParam._m0[25u].w, _2044));
    float _2135;
    float _2137;
    float _2139;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2099 = fma(_1178, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1170)) + cbModelParam._m0[21u].w;
        float _2103 = fma(_1178, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1170)) + cbModelParam._m0[22u].w;
        float _2107 = fma(_1178, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1170)) + cbModelParam._m0[23u].w;
        float _2110 = fma(_1119, cbModelParam._m0[21u].z, fma(_1118, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117));
        float _2113 = fma(_1119, cbModelParam._m0[22u].z, fma(_1118, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117));
        float _2116 = fma(_1119, cbModelParam._m0[23u].z, fma(_1118, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117));
        float _2223;
        if (_2110 > 0.0)
        {
            _2223 = abs((1.0 - _2099) / _2110);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2099 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2223 = frontier_phi_28_24_ladder;
        }
        float _2540;
        if (_2113 > 0.0)
        {
            _2540 = abs((1.0 - _2103) / _2113);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2103 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2540 = frontier_phi_40_35_ladder;
        }
        float _2867;
        if (_2116 > 0.0)
        {
            _2867 = abs((1.0 - _2107) / _2116);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2107 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2867 = frontier_phi_50_47_ladder;
        }
        float _2869 = isnan(_2540) ? _2223 : (isnan(_2223) ? _2540 : min(_2223, _2540));
        float _2870 = isnan(_2867) ? _2869 : (isnan(_2869) ? _2867 : min(_2869, _2867));
        float _2874 = (_2870 * _2110) + _2099;
        float _2875 = (_2870 * _2113) + _2103;
        float _2876 = (_2870 * _2116) + _2107;
        float _2877 = _2870 * 9.9999997473787516355514526367188e-05;
        float _2878 = (-1.0) - _2877;
        float _2880 = _2877 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2876 > _2880) || ((_2876 < _2878) || ((_2875 > _2880) || ((_2875 < _2878) || ((_2874 < _2878) || (_2874 > _2880))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2876, cbModelParam._m0[17u].z, fma(_2875, cbModelParam._m0[17u].y, _2874 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2876, cbModelParam._m0[18u].z, fma(_2875, cbModelParam._m0[18u].y, _2874 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2876, cbModelParam._m0[19u].z, fma(_2875, cbModelParam._m0[19u].y, _2874 * cbModelParam._m0[19u].x))), _2045);
            frontier_phi_25_50_ladder = _2994.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2994.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2994.x * cbModelParam._m0[1u].z;
        }
        _2135 = frontier_phi_25_50_ladder_2;
        _2137 = frontier_phi_25_50_ladder_1;
        _2139 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2119 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1117, _1118, _1119), _2045);
        _2135 = _2119.x * cbModelParam._m0[1u].z;
        _2137 = _2119.y * cbModelParam._m0[1u].z;
        _2139 = _2119.z * cbModelParam._m0[1u].z;
    }
    float _2151 = ((((1.0 - _1138) * ((_1125 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1138 * _1125)) * _1109;
    float _2152 = _2151 * ((cbModelParam._m0[1u].w * (_2135 - _2036)) + _2036);
    float _2153 = _2151 * ((cbModelParam._m0[1u].w * (_2137 - _2038)) + _2038);
    float _2154 = _2151 * ((cbModelParam._m0[1u].w * (_2139 - _2040)) + _2040);
    float _2157 = fma(_2154, cbSceneParam._m0[89u].z, fma(_2153, cbSceneParam._m0[89u].y, _2152 * cbSceneParam._m0[89u].x));
    float _2160 = fma(_2154, cbSceneParam._m0[90u].z, fma(_2153, cbSceneParam._m0[90u].y, _2152 * cbSceneParam._m0[90u].x));
    float _2163 = fma(_2154, cbSceneParam._m0[91u].z, fma(_2153, cbSceneParam._m0[91u].y, _2152 * cbSceneParam._m0[91u].x));
    float _2197 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2201 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2205 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2209 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2210 = _2197 / _2209;
    float _2211 = _2201 / _2209;
    float _2212 = _2205 / _2209;
    float _2359;
    float _2360;
    float _2361;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2239 = ((uint(_2212 > cbSceneParam._m0[59u].y) + uint(_2212 > cbSceneParam._m0[59u].x)) + uint(_2212 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2240 = _2239 + 43u;
        uint _2248 = _2239 + 44u;
        uint _2256 = _2239 + 45u;
        uint _2264 = _2239 + 46u;
        float _2275 = fma(_2209, cbSceneParam._m0[_2240].w, fma(_2205, cbSceneParam._m0[_2240].z, fma(_2201, cbSceneParam._m0[_2240].y, _2197 * cbSceneParam._m0[_2240].x)));
        float _2279 = fma(_2209, cbSceneParam._m0[_2248].w, fma(_2205, cbSceneParam._m0[_2248].z, fma(_2201, cbSceneParam._m0[_2248].y, _2197 * cbSceneParam._m0[_2248].x)));
        float _2287 = fma(_2209, cbSceneParam._m0[_2264].w, fma(_2205, cbSceneParam._m0[_2264].z, fma(_2201, cbSceneParam._m0[_2264].y, _2197 * cbSceneParam._m0[_2264].x)));
        float _2292 = cbSceneParam._m0[33u].z * _2287;
        float _2294 = cbSceneParam._m0[33u].w * _2287;
        float _2297 = fma(_2209, cbSceneParam._m0[_2256].w, fma(_2205, cbSceneParam._m0[_2256].z, fma(_2201, cbSceneParam._m0[_2256].y, _2197 * cbSceneParam._m0[_2256].x))) / _2287;
        float _2345 = (cbSceneParam._m0[33u].x - sqrt(((_2211 * _2211) + (_2210 * _2210)) + (_2212 * _2212))) * cbSceneParam._m0[33u].y;
        float _4761 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2352 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2292 + _2275) / _2287, (_2294 + _2279) / _2287), _2297), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2294 + _2275) / _2287, (_2279 - _2292) / _2287), _2297), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2275 - _2292) / _2287, (_2279 - _2294) / _2287), _2297), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2275 - _2294) / _2287, (_2292 + _2279) / _2287), _2297), 0.0)).x), vec4(0.25)));
        _2359 = 1.0 - (_2352 * cbSceneParam._m0[34u].x);
        _2360 = 1.0 - (_2352 * cbSceneParam._m0[34u].y);
        _2361 = 1.0 - (_2352 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2359 = 1.0;
        _2360 = 1.0;
        _2361 = 1.0;
    }
    float _2425;
    float _2427;
    float _2429;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2413 = fma(_2209, cbSceneParam._m0[63u].w, fma(_2205, cbSceneParam._m0[63u].z, fma(_2201, cbSceneParam._m0[63u].y, _2197 * cbSceneParam._m0[63u].x)));
        float _2414 = fma(_2209, cbSceneParam._m0[60u].w, fma(_2205, cbSceneParam._m0[60u].z, fma(_2201, cbSceneParam._m0[60u].y, _2197 * cbSceneParam._m0[60u].x))) / _2413;
        float _2415 = fma(_2209, cbSceneParam._m0[61u].w, fma(_2205, cbSceneParam._m0[61u].z, fma(_2201, cbSceneParam._m0[61u].y, _2197 * cbSceneParam._m0[61u].x))) / _2413;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2414 >= cbSceneParam._m0[64u].x) && (_2415 >= cbSceneParam._m0[64u].y)) && (_2414 <= cbSceneParam._m0[64u].z)) && (_2415 <= cbSceneParam._m0[64u].w))
        {
            float _2553 = fma(_2209, cbSceneParam._m0[62u].w, fma(_2205, cbSceneParam._m0[62u].z, fma(_2201, cbSceneParam._m0[62u].y, _2197 * cbSceneParam._m0[62u].x))) / _2413;
            float _2557 = isnan(cbSceneParam._m0[41u].w) ? _2553 : (isnan(_2553) ? cbSceneParam._m0[41u].w : max(_2553, cbSceneParam._m0[41u].w));
            float _2600 = (cbSceneParam._m0[33u].x - sqrt(((_2211 * _2211) + (_2210 * _2210)) + (_2212 * _2212))) * cbSceneParam._m0[33u].y;
            float _4777 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
            float _2607 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2414, cbSceneParam._m0[33u].w + _2415), _2557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2414, _2415 - cbSceneParam._m0[33u].z), _2557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2414 - cbSceneParam._m0[33u].z, _2415 - cbSceneParam._m0[33u].w), _2557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2414 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2415), _2557), 0.0)).x), vec4(0.25)));
            float _2611 = 1.0 - (_2607 * cbSceneParam._m0[34u].x);
            float _2612 = 1.0 - (_2607 * cbSceneParam._m0[34u].y);
            float _2613 = 1.0 - (_2607 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2613) ? _2361 : (isnan(_2361) ? _2613 : min(_2361, _2613));
            frontier_phi_37_36_ladder_1 = isnan(_2612) ? _2360 : (isnan(_2360) ? _2612 : min(_2360, _2612));
            frontier_phi_37_36_ladder_2 = isnan(_2611) ? _2359 : (isnan(_2359) ? _2611 : min(_2359, _2611));
        }
        else
        {
            frontier_phi_37_36_ladder = _2361;
            frontier_phi_37_36_ladder_1 = _2360;
            frontier_phi_37_36_ladder_2 = _2359;
        }
        _2425 = frontier_phi_37_36_ladder_2;
        _2427 = frontier_phi_37_36_ladder_1;
        _2429 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2425 = _2359;
        _2427 = _2360;
        _2429 = _2361;
    }
    uvec4 _2434 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2436 = _2434.x * 14u;
    uint _2437 = _2436 + 13u;
    float _2444 = _1109 + (-1.0);
    float _2449 = (cbLight._m0[_2437].x * _2444) + 1.0;
    float _2450 = (cbLight._m0[_2437].y * _2444) + 1.0;
    float _2451 = (cbLight._m0[_2437].z * _2444) + 1.0;
    float _2452 = (cbLight._m0[_2437].w * _2444) + 1.0;
    uint _2453 = _2436 + 5u;
    float _2459 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
    uint _2463 = _2436 + 4u;
    float _2472 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
    uint _2476 = _2436 | 1u;
    float _2487 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_948, _949, _950));
    float _2490 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_948, _949, _950));
    float _4813 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _4824 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2495 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * 0.3183098733425140380859375;
    float _2497 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * 0.3183098733425140380859375;
    float _2504 = ((cbLight._m0[_2453].x * _2459) * _2497) + (((cbLight._m0[_2463].x * _2425) * _2472) * _2495);
    float _2505 = ((_2459 * cbLight._m0[_2453].y) * _2497) + (((cbLight._m0[_2463].y * _2427) * _2472) * _2495);
    float _2506 = ((_2459 * cbLight._m0[_2453].z) * _2497) + (((cbLight._m0[_2463].z * _2429) * _2472) * _2495);
    uvec4 _2510 = floatBitsToUint(cbLight._m0[_2436 + 12u]);
    bool _2512 = _2510.x == 0u;
    float _2614;
    float _2616;
    float _2618;
    if (_2512)
    {
        _2614 = _2504;
        _2616 = _2505;
        _2618 = _2506;
    }
    else
    {
        uint _2622 = _2436 + 6u;
        float _2638 = (dot(vec3(cbLight._m0[_2436 + 2u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2639 = _2638 * _2638;
        float _4835 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2640 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2641 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2614 = (((cbLight._m0[_2622].x * 0.3183098733425140380859375) * _2640) * _2641) + _2504;
        _2616 = (((cbLight._m0[_2622].y * 0.3183098733425140380859375) * _2640) * _2641) + _2505;
        _2618 = (((cbLight._m0[_2622].z * 0.3183098733425140380859375) * _2640) * _2641) + _2506;
    }
    bool _2621 = _2510.y == 0u;
    float _2676;
    float _2678;
    float _2680;
    if (_2621)
    {
        _2676 = _2614;
        _2678 = _2616;
        _2680 = _2618;
    }
    else
    {
        uint _2838 = _2436 + 7u;
        float _2854 = (dot(vec3(cbLight._m0[_2436 + 3u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2855 = _2854 * _2854;
        float _4851 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2856 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2857 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
        _2676 = (((cbLight._m0[_2838].x * 0.3183098733425140380859375) * _2856) * _2857) + _2614;
        _2678 = (((cbLight._m0[_2838].y * 0.3183098733425140380859375) * _2856) * _2857) + _2616;
        _2680 = (((cbLight._m0[_2838].z * 0.3183098733425140380859375) * _2856) * _2857) + _2618;
    }
    uint _2683 = _2436 + 8u;
    float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _951) * 0.949999988079071044921875);
    float _2697 = _2696 * _2696;
    float _2698 = cbLight._m0[_2436].x + _1026;
    float _2699 = cbLight._m0[_2436].y + _1027;
    float _2700 = cbLight._m0[_2436].z + _1028;
    float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
    float _2705 = _2704 * _2698;
    float _2706 = _2704 * _2699;
    float _2707 = _2704 * _2700;
    float _2708 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2436].xyz));
    float _4867 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _4878 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _2712 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
    float _2713 = dot(vec3(_948, _949, _950), vec3(_2705, _2706, _2707));
    float _4889 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2716 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
    float _2717 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2705, _2706, _2707));
    float _4900 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2721 = _2697 * _2697;
    float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
    float _2736 = (exp2(log2(1.0 - (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2737 = 1.0 - _2697;
    float _2748 = (0.5 / (((_2712 * ((_2711 * _2737) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _2737) + _2697) * _2711))) * _2711;
    float _4911 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2750 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
    uint _2764 = _2436 + 9u;
    float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _951) * 0.949999988079071044921875);
    float _2776 = _2775 * _2775;
    float _2777 = cbLight._m0[_2476].x + _1026;
    float _2778 = cbLight._m0[_2476].y + _1027;
    float _2779 = cbLight._m0[_2476].z + _1028;
    float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
    float _2784 = _2783 * _2777;
    float _2785 = _2783 * _2778;
    float _2786 = _2783 * _2779;
    float _2787 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2476].xyz));
    float _4922 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2790 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
    float _2791 = dot(vec3(_948, _949, _950), vec3(_2784, _2785, _2786));
    float _4933 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2794 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
    float _2795 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2784, _2785, _2786));
    float _4944 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2799 = _2776 * _2776;
    float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
    float _2812 = (exp2(log2(1.0 - (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2813 = 1.0 - _2776;
    float _2823 = (0.5 / (((_2712 * ((_2790 * _2813) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _2813) + _2776) * _2790))) * _2790;
    float _4955 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2825 = (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
    float _2835 = (((_2812 * cbLight._m0[_2764].x) * _2825) * _2459) + ((((cbLight._m0[_2683].x * _2425) * _2736) * _2750) * _2472);
    float _2836 = (((_2812 * cbLight._m0[_2764].y) * _2825) * _2459) + ((((cbLight._m0[_2683].y * _2427) * _2736) * _2750) * _2472);
    float _2837 = (((_2812 * cbLight._m0[_2764].z) * _2825) * _2459) + ((((cbLight._m0[_2683].z * _2429) * _2736) * _2750) * _2472);
    float _2893;
    float _2895;
    float _2897;
    if (_2512)
    {
        _2893 = _2835;
        _2895 = _2836;
        _2897 = _2837;
    }
    else
    {
        uint _2899 = _2436 + 2u;
        uint _2903 = _2436 + 10u;
        float _2917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2899].w)) * _951) * 0.949999988079071044921875);
        float _2918 = _2917 * _2917;
        float _2919 = cbLight._m0[_2899].x + _1026;
        float _2920 = cbLight._m0[_2899].y + _1027;
        float _2921 = cbLight._m0[_2899].z + _1028;
        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
        float _2926 = _2925 * _2919;
        float _2927 = _2925 * _2920;
        float _2928 = _2925 * _2921;
        float _2929 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2899].xyz));
        float _4966 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
        float _2933 = dot(vec3(_948, _949, _950), vec3(_2926, _2927, _2928));
        float _4977 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
        float _2937 = dot(vec3(cbLight._m0[_2899].xyz), vec3(_2926, _2927, _2928));
        float _4988 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2941 = _2918 * _2918;
        float _2945 = ((_2936 * _2936) * (_2941 + (-1.0))) + 1.0;
        float _2954 = (exp2(log2(1.0 - (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2955 = 1.0 - _2918;
        float _2965 = (0.5 / (((_2712 * ((_2932 * _2955) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _2955) + _2918) * _2932))) * _2932;
        float _4999 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2967 = (isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * (_2941 / ((_2945 * _2945) * 3.141590118408203125));
        float _2968 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2893 = (((_2954 * cbLight._m0[_2903].x) * _2967) * _2968) + _2835;
        _2895 = (((_2954 * cbLight._m0[_2903].y) * _2967) * _2968) + _2836;
        _2897 = (((_2954 * cbLight._m0[_2903].z) * _2967) * _2968) + _2837;
    }
    float _2999;
    float _3001;
    float _3003;
    if (_2621)
    {
        _2999 = _2893;
        _3001 = _2895;
        _3003 = _2897;
    }
    else
    {
        uint _3010 = _2436 + 3u;
        uint _3014 = _2436 + 11u;
        float _3028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3010].w)) * _951) * 0.949999988079071044921875);
        float _3029 = _3028 * _3028;
        float _3030 = cbLight._m0[_3010].x + _1026;
        float _3031 = cbLight._m0[_3010].y + _1027;
        float _3032 = cbLight._m0[_3010].z + _1028;
        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
        float _3037 = _3036 * _3030;
        float _3038 = _3036 * _3031;
        float _3039 = _3036 * _3032;
        float _3040 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_3010].xyz));
        float _5015 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3043 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
        float _3044 = dot(vec3(_948, _949, _950), vec3(_3037, _3038, _3039));
        float _5026 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3047 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
        float _3048 = dot(vec3(cbLight._m0[_3010].xyz), vec3(_3037, _3038, _3039));
        float _5037 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3052 = _3029 * _3029;
        float _3056 = ((_3047 * _3047) * (_3052 + (-1.0))) + 1.0;
        float _3065 = (exp2(log2(1.0 - (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3066 = 1.0 - _3029;
        float _3076 = (0.5 / (((_2712 * ((_3043 * _3066) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _3066) + _3029) * _3043))) * _3043;
        float _5048 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        float _3078 = (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_3052 / ((_3056 * _3056) * 3.141590118408203125));
        float _3079 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
        _2999 = (((_3065 * cbLight._m0[_3014].x) * _3078) * _3079) + _2893;
        _3001 = (((_3065 * cbLight._m0[_3014].y) * _3078) * _3079) + _2895;
        _3003 = (((_3065 * cbLight._m0[_3014].z) * _3078) * _3079) + _2897;
    }
    float _3145;
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    if (_2434.y == 0u)
    {
        uvec4 _3100 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3101 = _3100.x;
        uint _3112 = uint((float(_3100.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1047) / _3101))) + floor(float(uint(cbSceneParam._m0[85u].x * _1046) / _3101)));
        float _3122 = (log2(_2212 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3123 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
        uint _3126 = uint(isnan(14.0) ? _3123 : (isnan(_3123) ? 14.0 : min(_3123, 14.0)));
        uvec4 _3131 = texelFetch(g_lightClusterGridBuffer, int(((_3126 << 2u) + (_3112 << 6u)) >> 2u));
        uint _3132 = _3131.x;
        uint _3133 = _3100.z;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        if (((((1u << ((_3133 >> 4u) & 15u)) + 4294967295u) & _3132) == 0u) || ((_3133 & 240u) == 0u))
        {
            _3212 = 0.0;
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
            _3222 = 0.0;
        }
        else
        {
            float _3213;
            float _3215;
            float _3217;
            float _3219;
            float _3221;
            float _3223;
            float _3365 = 0.0;
            float _3366 = 0.0;
            float _3367 = 0.0;
            float _3368 = 0.0;
            float _3369 = 0.0;
            float _3370 = 0.0;
            uint _3371 = 0u;
            uint _3380;
            bool _3381;
            for (;;)
            {
                _3380 = texelFetch(g_lightClassification, int((((_3126 << 5u) + (_3112 << 9u)) + (_3371 << 2u)) >> 2u)).x;
                _3381 = _3380 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3381)
                {
                    frontier_phi_71_pred = _3370;
                    frontier_phi_71_pred_1 = _3369;
                    frontier_phi_71_pred_2 = _3368;
                    frontier_phi_71_pred_3 = _3367;
                    frontier_phi_71_pred_4 = _3366;
                    frontier_phi_71_pred_5 = _3365;
                }
                else
                {
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    float _3514;
                    float _3515;
                    uint _3516;
                    _3510 = _3365;
                    _3511 = _3366;
                    _3512 = _3367;
                    _3513 = _3368;
                    _3514 = _3369;
                    _3515 = _3370;
                    _3516 = _3380;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    for (;;)
                    {
                        uint _3520 = uint(findLSB(_3516)) + (_3371 << 5u);
                        uint _3517 = (_3516 + 4294967295u) & _3516;
                        uint _3522 = _3520 * 48u;
                        vec4 _3536 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3522)).x, texelFetch(g_PointLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3522 + 3u)).x));
                        uint _3542 = (_3520 * 48u) + 4u;
                        vec4 _3555 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3542)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 3u)).x));
                        uint _3561 = (_3520 * 48u) + 8u;
                        vec3 _3572 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3561)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 2u)).x));
                        float _3576 = _3536.x - _2210;
                        float _3577 = _3536.y - _2211;
                        float _3578 = _3536.z - _2212;
                        float _3579 = dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578));
                        float _3582 = inversesqrt(_3579);
                        float _3583 = _3582 * _3576;
                        float _3584 = _3582 * _3577;
                        float _3585 = _3582 * _3578;
                        float _3586 = dot(vec3(_1065, _1068, _1071), vec3(_3583, _3584, _3585));
                        float _3591 = 1.0 - (_3579 * _3536.w);
                        float _5074 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3592 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                        float _3593 = sqrt(_3579) * _3555.w;
                        float _3596 = 1.39999997615814208984375 / (_3593 + 1.39999997615814208984375);
                        float _3597 = _3596 * _3596;
                        float _3600 = ((1.0 - _3597) * _3586) + _3597;
                        float _3603 = _3593 * _3593;
                        float _3607 = ((isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0))) * _3592) / ((_3603 * 0.699999988079071044921875) + 1.0);
                        float _3611 = (-0.0) - _2210;
                        float _3612 = (-0.0) - _2211;
                        float _3613 = (-0.0) - _2212;
                        float _3617 = inversesqrt(dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613)));
                        float _3618 = _3617 * _3611;
                        float _3619 = _3617 * _3612;
                        float _3620 = _3617 * _3613;
                        float _3627 = exp2(log2(1.0 / ((_3603 * 3.5) + 5.0)) * 0.25);
                        float _3628 = 1.0 - _1125;
                        float _3635 = sqrt(1.0 - ((1.0 - (_3628 * _3628)) * (1.0 - (_3627 * _3627))));
                        float _3636 = _3635 * _3635;
                        float _3637 = _3636 * _3636;
                        float _3638 = _3618 + _3583;
                        float _3639 = _3619 + _3584;
                        float _3640 = _3620 + _3585;
                        float _3644 = inversesqrt(dot(vec3(_3638, _3639, _3640), vec3(_3638, _3639, _3640)));
                        float _3648 = dot(vec3(_1065, _1068, _1071), vec3(_3618, _3619, _3620));
                        float _5090 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                        float _3651 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                        float _3652 = dot(vec3(_1065, _1068, _1071), vec3(_3644 * _3638, _3644 * _3639, _3644 * _3640));
                        float _5101 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                        float _3655 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                        float _3659 = ((_3655 * _3655) * (_3637 + (-1.0))) + 1.0;
                        float _3660 = _3596 * _3636;
                        float _3661 = _3660 * _3660;
                        float _3664 = ((1.0 - _3661) * _3586) + _3661;
                        float _5112 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                        float _3665 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                        float _3666 = 1.0 - _3636;
                        float _3676 = (0.5 / (((_3665 * ((_3651 * _3666) + _3636)) + 9.9999999392252902907785028219223e-09) + (((_3665 * _3666) + _3636) * _3651))) * _3665;
                        float _5123 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                        float _3687 = (((_3637 * 3.1415927410125732421875) * (isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0)))) / ((_3659 * _3659) * ((_3603 * 2.1991131305694580078125) + 3.141590118408203125))) * _3592;
                        _3440 = (_3607 * _3555.x) + _3513;
                        _3441 = (_3607 * _3555.y) + _3514;
                        _3442 = (_3607 * _3555.z) + _3515;
                        _3437 = (_3687 * _3572.x) + _3510;
                        _3438 = (_3687 * _3572.y) + _3511;
                        _3439 = (_3687 * _3572.z) + _3512;
                        if (_3517 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3510 = _3437;
                            _3511 = _3438;
                            _3512 = _3439;
                            _3513 = _3440;
                            _3514 = _3441;
                            _3515 = _3442;
                            _3516 = _3517;
                        }
                    }
                    frontier_phi_71_pred = _3442;
                    frontier_phi_71_pred_1 = _3441;
                    frontier_phi_71_pred_2 = _3440;
                    frontier_phi_71_pred_3 = _3439;
                    frontier_phi_71_pred_4 = _3438;
                    frontier_phi_71_pred_5 = _3437;
                }
                _3223 = frontier_phi_71_pred;
                _3221 = frontier_phi_71_pred_1;
                _3219 = frontier_phi_71_pred_2;
                _3217 = frontier_phi_71_pred_3;
                _3215 = frontier_phi_71_pred_4;
                _3213 = frontier_phi_71_pred_5;
                uint _3372 = _3371 + 1u;
                if (_3372 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3365 = _3213;
                    _3366 = _3215;
                    _3367 = _3217;
                    _3368 = _3219;
                    _3369 = _3221;
                    _3370 = _3223;
                    _3371 = _3372;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3212 = _3213;
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
            _3222 = _3223;
        }
        uvec4 _3226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3227 = _3226.z;
        uint _3229 = (_3227 >> 8u) & 15u;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        float _3341;
        float _3343;
        if (((4294967295u << _3229) & _3132) == 0u)
        {
            _3333 = _3212;
            _3335 = _3214;
            _3337 = _3216;
            _3339 = _3218;
            _3341 = _3220;
            _3343 = _3222;
        }
        else
        {
            float _3358 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
            float _3359 = _3358 * _2210;
            float _3360 = _3358 * _2211;
            float _3361 = _3358 * _2212;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3229 < ((_3227 >> 12u) & 15u))
            {
                float _3334;
                float _3336;
                float _3338;
                float _3340;
                float _3342;
                float _3344;
                float _3493 = _3212;
                float _3494 = _3214;
                float _3495 = _3216;
                float _3496 = _3218;
                float _3497 = _3220;
                float _3498 = _3222;
                uint _3499 = _3229;
                uint _3508;
                bool _3509;
                for (;;)
                {
                    _3508 = texelFetch(g_lightClassification, int((((_3126 << 5u) + (_3112 << 9u)) + (_3499 << 2u)) >> 2u)).x;
                    _3509 = _3508 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3509)
                    {
                        frontier_phi_82_pred = _3498;
                        frontier_phi_82_pred_1 = _3497;
                        frontier_phi_82_pred_2 = _3496;
                        frontier_phi_82_pred_3 = _3495;
                        frontier_phi_82_pred_4 = _3494;
                        frontier_phi_82_pred_5 = _3493;
                    }
                    else
                    {
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3994;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _3998;
                        float _3999;
                        float _3714 = _3493;
                        float _3715 = _3494;
                        float _3716 = _3495;
                        float _3717 = _3496;
                        float _3718 = _3497;
                        float _3719 = _3498;
                        uint _3720 = _3508;
                        uint _3721;
                        vec4 _3746;
                        float _3747;
                        vec4 _3762;
                        vec3 _3774;
                        vec4 _3789;
                        vec4 _3804;
                        float _3850;
                        bool _3851;
                        for (;;)
                        {
                            uint _3731 = ((_3499 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3720));
                            _3721 = (_3720 + 4294967295u) & _3720;
                            uint _3733 = _3731 * 40u;
                            _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            _3747 = _3746.w;
                            uint _3749 = (_3731 * 40u) + 4u;
                            _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            uint _3764 = (_3731 * 40u) + 8u;
                            _3774 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x));
                            uint _3776 = (_3731 * 40u) + 16u;
                            _3789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 3u)).x));
                            uint _3791 = (_3731 * 40u) + 20u;
                            _3804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 3u)).x));
                            uint _3806 = (_3731 * 40u) + 24u;
                            vec4 _3819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 3u)).x));
                            uint _3825 = (_3731 * 40u) + 28u;
                            vec4 _3838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 3u)).x));
                            _3850 = fma(_2212, _3838.z, fma(_2211, _3838.y, _3838.x * _2210)) + _3838.w;
                            _3851 = !((fma(_2212, _3819.z, fma(_2211, _3819.y, _3819.x * _2210)) + _3819.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3851)
                            {
                                float _3878 = _3746.x - _2210;
                                float _3879 = _3746.y - _2211;
                                float _3880 = _3746.z - _2212;
                                float _3881 = dot(vec3(_3878, _3879, _3880), vec3(_3878, _3879, _3880));
                                float _3884 = inversesqrt(_3881);
                                float _3885 = _3884 * _3878;
                                float _3886 = _3884 * _3879;
                                float _3887 = _3884 * _3880;
                                float _3891 = 1.0 - (_3881 / (_3747 * _3747));
                                float _5134 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3892 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                                float _3896 = sqrt(_3881) * _3762.w;
                                float _3898 = 1.39999997615814208984375 / (_3896 + 1.39999997615814208984375);
                                float _3899 = _3898 * _3898;
                                float _3902 = ((1.0 - _3899) * dot(vec3(_3885, _3886, _3887), vec3(_1065, _1068, _1071))) + _3899;
                                float _3905 = _3896 * _3896;
                                float _3909 = (fma(_2212, _3789.z, fma(_2211, _3789.y, _3789.x * _2210)) + _3789.w) / _3850;
                                float _3910 = (fma(_2212, _3804.z, fma(_2211, _3804.y, _3804.x * _2210)) + _3804.w) / _3850;
                                float _3914 = 1.0 - dot(vec2(_3909, _3910), vec2(_3909, _3910));
                                float _5150 = isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0));
                                float _3915 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                                float _3916 = _3915 * (((isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0))) * _3892) / ((_3905 * 0.699999988079071044921875) + 1.0));
                                float _3928 = exp2(log2(1.0 / ((_3905 * 3.5) + 5.0)) * 0.25);
                                float _3929 = 1.0 - _1125;
                                float _3936 = sqrt(1.0 - ((1.0 - (_3929 * _3929)) * (1.0 - (_3928 * _3928))));
                                float _3937 = _3936 * _3936;
                                float _3938 = _3937 * _3937;
                                float _3939 = _3885 - _3359;
                                float _3940 = _3886 - _3360;
                                float _3941 = _3887 - _3361;
                                float _3945 = inversesqrt(dot(vec3(_3939, _3940, _3941), vec3(_3939, _3940, _3941)));
                                float _3949 = dot(vec3(_1065, _1068, _1071), vec3((-0.0) - _3359, (-0.0) - _3360, (-0.0) - _3361));
                                float _5161 = isnan(0.0) ? _3949 : (isnan(_3949) ? 0.0 : max(_3949, 0.0));
                                float _3952 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                                float _3953 = dot(vec3(_1065, _1068, _1071), vec3(_3945 * _3939, _3945 * _3940, _3945 * _3941));
                                float _5172 = isnan(0.0) ? _3953 : (isnan(_3953) ? 0.0 : max(_3953, 0.0));
                                float _3956 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
                                float _3960 = ((_3956 * _3956) * (_3938 + (-1.0))) + 1.0;
                                float _3961 = _3898 * _3937;
                                float _3962 = _3961 * _3961;
                                float _3968 = ((1.0 - _3962) * dot(vec3(_1065, _1068, _1071), vec3(_3885, _3886, _3887))) + _3962;
                                float _5183 = isnan(0.0) ? _3968 : (isnan(_3968) ? 0.0 : max(_3968, 0.0));
                                float _3969 = isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0));
                                float _3970 = 1.0 - _3937;
                                float _3980 = (0.5 / (((_3969 * ((_3952 * _3970) + _3937)) + 9.9999999392252902907785028219223e-09) + (((_3969 * _3970) + _3937) * _3952))) * _3969;
                                float _5194 = isnan(0.0) ? _3980 : (isnan(_3980) ? 0.0 : max(_3980, 0.0));
                                float _3990 = (_3915 * _3892) * (((_3938 * 3.1415927410125732421875) * (isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0)))) / ((_3960 * _3960) * ((_3905 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3916 * _3762.z;
                                frontier_phi_88_pred_1 = _3916 * _3762.y;
                                frontier_phi_88_pred_2 = _3916 * _3762.x;
                                frontier_phi_88_pred_3 = _3990 * _3774.z;
                                frontier_phi_88_pred_4 = _3990 * _3774.y;
                                frontier_phi_88_pred_5 = _3990 * _3774.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3999 = frontier_phi_88_pred;
                            _3998 = frontier_phi_88_pred_1;
                            _3997 = frontier_phi_88_pred_2;
                            _3996 = frontier_phi_88_pred_3;
                            _3995 = frontier_phi_88_pred_4;
                            _3994 = frontier_phi_88_pred_5;
                            _3704 = _3997 + _3717;
                            _3705 = _3998 + _3718;
                            _3706 = _3999 + _3719;
                            _3701 = _3994 + _3714;
                            _3702 = _3995 + _3715;
                            _3703 = _3996 + _3716;
                            if (_3721 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3714 = _3701;
                                _3715 = _3702;
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3705;
                                _3719 = _3706;
                                _3720 = _3721;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3706;
                        frontier_phi_82_pred_1 = _3705;
                        frontier_phi_82_pred_2 = _3704;
                        frontier_phi_82_pred_3 = _3703;
                        frontier_phi_82_pred_4 = _3702;
                        frontier_phi_82_pred_5 = _3701;
                    }
                    _3344 = frontier_phi_82_pred;
                    _3342 = frontier_phi_82_pred_1;
                    _3340 = frontier_phi_82_pred_2;
                    _3338 = frontier_phi_82_pred_3;
                    _3336 = frontier_phi_82_pred_4;
                    _3334 = frontier_phi_82_pred_5;
                    uint _3500 = _3499 + 1u;
                    if (_3500 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3493 = _3334;
                        _3494 = _3336;
                        _3495 = _3338;
                        _3496 = _3340;
                        _3497 = _3342;
                        _3498 = _3344;
                        _3499 = _3500;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3340;
                frontier_phi_63_64_ladder_1 = _3344;
                frontier_phi_63_64_ladder_2 = _3342;
                frontier_phi_63_64_ladder_3 = _3338;
                frontier_phi_63_64_ladder_4 = _3336;
                frontier_phi_63_64_ladder_5 = _3334;
            }
            else
            {
                frontier_phi_63_64_ladder = _3218;
                frontier_phi_63_64_ladder_1 = _3222;
                frontier_phi_63_64_ladder_2 = _3220;
                frontier_phi_63_64_ladder_3 = _3216;
                frontier_phi_63_64_ladder_4 = _3214;
                frontier_phi_63_64_ladder_5 = _3212;
            }
            _3333 = frontier_phi_63_64_ladder_5;
            _3335 = frontier_phi_63_64_ladder_4;
            _3337 = frontier_phi_63_64_ladder_3;
            _3339 = frontier_phi_63_64_ladder;
            _3341 = frontier_phi_63_64_ladder_2;
            _3343 = frontier_phi_63_64_ladder_1;
        }
        float _3348 = isnan(1.0) ? _1109 : (isnan(_1109) ? 1.0 : min(_1109, 1.0));
        _3145 = (_3348 * _3339) + _2676;
        _3147 = (_3348 * _3341) + _2678;
        _3149 = (_3348 * _3343) + _2680;
        _3151 = ((_3333 * 0.039999999105930328369140625) * _3348) + _2999;
        _3153 = ((_3335 * 0.039999999105930328369140625) * _3348) + _3001;
        _3155 = ((_3337 * 0.039999999105930328369140625) * _3348) + _3003;
    }
    else
    {
        _3145 = _2676;
        _3147 = _2678;
        _3149 = _2680;
        _3151 = _2999;
        _3153 = _3001;
        _3155 = _3003;
    }
    float _5210 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _5221 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _5232 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _3172 = ((isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0))) * (_3145 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1109))) + ((_3151 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    float _3173 = ((isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0))) * (_3147 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1109))) + ((_3153 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    float _3174 = ((isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0))) * (_3149 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1109))) + ((_3155 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    uint _3175 = _291 + 6u;
    float _3183 = _1046 / cbSceneParam._m0[86u].x;
    float _3184 = _1047 / cbSceneParam._m0[86u].y;
    vec4 _3198 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3183, _3184, (log2((isnan(cbSceneParam._m0[77u].w) ? _969 : (isnan(_969) ? cbSceneParam._m0[77u].w : min(_969, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3200 = _3198.x;
    float _3201 = _3198.y;
    float _3202 = _3198.z;
    float _3203 = _3198.w;
    float _3275;
    float _3277;
    float _3279;
    float _3281;
    if (_969 > cbSceneParam._m0[78u].w)
    {
        float _3237 = isnan(_969) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _969 : min(cbSceneParam._m0[80u].w, _969));
        float _3238 = _3237 / _969;
        float _3249 = _3238 * _1019;
        float _3250 = _1020 * _3238;
        float _3251 = (-0.0) - _3250;
        float _3253 = _3238 * _1021;
        float _3255 = (cbSceneParam._m0[77u].w * _3251) / _3237;
        float _3256 = _3255 + cbSceneParam._m0[79u].w;
        float _3257 = cbSceneParam._m0[79u].w - _3250;
        float _3263 = sqrt(((_3249 * _3249) + (_3250 * _3250)) + (_3253 * _3253));
        float _3266 = (1.0 - (cbSceneParam._m0[77u].w / _3237)) * _3263;
        float _3271 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3273 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3450;
        if (abs((_3251 - _3255) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3450 = ((((_3256 > 0.0) ? exp2(_3271 * _3256) : (2.0 - exp2(_3273 * _3256))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3266;
        }
        else
        {
            float _3394 = 1.0 / cbSceneParam._m0[80u].x;
            float _3395 = isnan(_3257) ? _3256 : (isnan(_3256) ? _3257 : max(_3256, _3257));
            float _3396 = isnan(_3257) ? _3256 : (isnan(_3256) ? _3257 : min(_3256, _3257));
            float _3405 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : min(_3395, 0.0));
            float _3406 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : min(_3396, 0.0));
            _3450 = ((abs(_3263 / _3251) * cbSceneParam._m0[80u].y) * ((((_3405 - _3406) * 2.0) - ((exp2(_3271 * (isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0)))) - exp2(_3271 * (isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))))) * _3394)) - ((exp2(_3273 * _3405) - exp2(_3273 * _3406)) * _3394))) + (_3266 * cbSceneParam._m0[80u].z);
        }
        vec4 _3452 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3183, _3184, 1.0), 0.0);
        float _3461 = exp2((_3450 * (-1.44269502162933349609375)) * (1.0 - _3452.w));
        float _3462 = log2(_3461);
        float _3478 = log2(_3203);
        _3275 = (exp2(_3478 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3462 * cbSceneParam._m0[78u].x)) * _3452.x) / cbSceneParam._m0[78u].x)) + _3200;
        _3277 = (exp2(_3478 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3462 * cbSceneParam._m0[78u].y)) * _3452.y) / cbSceneParam._m0[78u].y)) + _3201;
        _3279 = (exp2(_3478 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3462 * cbSceneParam._m0[78u].z)) * _3452.z) / cbSceneParam._m0[78u].z)) + _3202;
        _3281 = _3461 * _3203;
    }
    else
    {
        _3275 = _3200;
        _3277 = _3201;
        _3279 = _3202;
        _3281 = _3203;
    }
    bool _3488;
    vec4 _3291;
    vec4 _3313;
    float _3315;
    float _3319;
    float _3320;
    float _3321;
    float _3322;
    bool _3332;
    for (;;)
    {
        _3291 = cbMatDynParam._m0[0u];
        float _3293 = roundEven(_3291.y);
        bool _3294 = _3293 == 3.0;
        float _3295 = log2(_3281);
        float _3302 = exp2(_3295 * cbSceneParam._m0[78u].x) * _3172;
        float _3303 = exp2(_3295 * cbSceneParam._m0[78u].y) * _3173;
        float _3304 = exp2(_3295 * cbSceneParam._m0[78u].z) * _3174;
        float _3311 = _1035 + (-0.5);
        _3313 = cbMtdParam._m0[1u];
        _3315 = _3313.y * _3311;
        float _3318 = (_3293 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3319 = _3318 * (_3294 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3275)));
        _3320 = _3318 * (_3294 ? _3303 : (_3303 + (cbSceneParam._m0[72u].w * _3277)));
        _3321 = _3318 * (_3294 ? _3304 : (_3304 + (cbSceneParam._m0[72u].w * _3279)));
        _3322 = _3311 * 0.999000012874603271484375;
        _3332 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3332)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3322) < 0.5)
            {
                _3488 = true;
                break;
            }
        }
        uint _3429 = _1084 + uint(_3291.w);
        if ((cbInstanceData._m0[_3429].w < 1.0) && ((cbInstanceData._m0[_3429].w + _3322) < 0.5))
        {
            _3488 = true;
            break;
        }
        if ((_3315 + 1.0) < _3313.x)
        {
            _3488 = true;
            break;
        }
        _3488 = false;
        break;
    }
    float _3692;
    if (_3488)
    {
        discard_state = true;
        _3692 = 0.0;
    }
    else
    {
        _3692 = cbInstanceData._m0[_3175].w;
    }
    SV_Target.x = _3319;
    SV_Target.y = _3320;
    SV_Target.z = _3321;
    SV_Target.w = _3692;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3175].w;
    discard_exit();
}


