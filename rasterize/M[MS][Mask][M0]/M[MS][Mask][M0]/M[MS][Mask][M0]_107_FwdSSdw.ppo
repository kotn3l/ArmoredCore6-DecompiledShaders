#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1370;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _363.x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[24u].z) + _417) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3699 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _442 = (_435 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _443 = (_435 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _444 = (_435 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _461 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _481 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _483 = _481.x;
    float _493 = dot(vec4(_483, _481.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _507 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _363.y) * 2.0) - ((((_483 - _493) * cbMtdParam._m0[24u].z) + _493) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3710 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _515 = (_508 * ((_461.x * cbMtdParam._m0[13u].x) - _442)) + _442;
    float _516 = (_508 * ((_461.y * cbMtdParam._m0[13u].y) - _443)) + _443;
    float _517 = (_508 * ((_461.z * cbMtdParam._m0[13u].z) - _444)) + _444;
    vec4 _535 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _274) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _275) + cbTextureTilingScale._m0[24u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _554 = _552.x;
    float _564 = dot(vec4(_554, _552.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _576 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _363.z) * 2.0) - ((((_554 - _564) * cbMtdParam._m0[24u].z) + _564) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3721 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _590 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_577 * ((_535.x * cbMtdParam._m0[14u].x) - _515)) + _515);
    float _593 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_577 * ((_535.y * cbMtdParam._m0[14u].y) - _516)) + _516);
    float _596 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_577 * ((_535.z * cbMtdParam._m0[14u].z) - _517)) + _517);
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _630 = _626.z;
    float _637 = ((_609.x - _628) * _435) + _628;
    float _638 = ((_609.y - _629) * _435) + _629;
    float _639 = ((_609.z - _630) * _435) + _630;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _662 = ((_651.x - _637) * _508) + _637;
    float _663 = ((_651.y - _638) * _508) + _638;
    float _664 = ((_651.z - _639) * _508) + _639;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _274) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _275) + cbTextureTilingScale._m0[23u].w));
    float _689 = ((_676.z - _664) * _577) + _664;
    float _692 = ((((_676.x - _662) * _577) + _662) * 2.0) + (-1.0);
    float _694 = ((((_676.y - _663) * _577) + _663) * 2.0) + (-1.0);
    float _695 = dot(vec2(_692, _694), vec2(_692, _694));
    float _3732 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _700 = sqrt(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _726 = (((_714.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _692;
    float _727 = (((_714.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _694;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _741 = _739.x;
    float _742 = 1.0 - _741;
    float _770 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_741 - _742) * cbMtdParam._m0[24u].y) + _742) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3743 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _771 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _779 = ((((cbMtdParam._m0[10u].x - _590) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _771) + _590;
    float _780 = ((((cbMtdParam._m0[10u].y - _593) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _771) + _593;
    float _781 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _596)) * _771) + _596;
    float _785 = (cbMtdParam._m0[19u].w * (_714.z - _689)) + _689;
    float _789 = ((cbMtdParam._m0[23u].y - _785) * _771) + _785;
    vec4 _808 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _814 = (_808.x * 2.0) + (-1.0);
    float _815 = (_808.y * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _3754 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _832 = (_771 * (((cbMtdParam._m0[22u].z * _726) - _726) + _814)) + _726;
    float _833 = (_771 * (((cbMtdParam._m0[22u].z * _727) - _727) + _815)) + _727;
    float _834 = (_771 * (sqrt(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) - _700)) + _700;
    float _836 = cbMtdParam._m0[22u].x + _714.w;
    float _839 = fma(_834, _242 * NORMAL.x, fma(_833, _249 * TANGENT.x, (_235 * _227) * _832));
    float _842 = fma(_834, _242 * NORMAL.y, fma(_833, _249 * TANGENT.y, (_235 * _228) * _832));
    float _845 = fma(_834, _242 * NORMAL.z, fma(_833, _249 * TANGENT.z, (_235 * _229) * _832));
    float _849 = inversesqrt(dot(vec3(_839, _842, _845), vec3(_839, _842, _845)));
    float _850 = _849 * _839;
    float _851 = _849 * _842;
    float _852 = _849 * _845;
    float _3765 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _853 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _3787 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _3798 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _3809 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _871 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _921 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _911);
    float _922 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _911);
    float _923 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _911);
    float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
    float _928 = _921 * _927;
    float _929 = _922 * _927;
    float _930 = _923 * _927;
    float _936 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _937 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _955 = fma(_852, cbSceneParam._m0[5u].z, fma(_851, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _850));
    float _958 = fma(_852, cbSceneParam._m0[6u].z, fma(_851, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _850));
    float _961 = fma(_852, cbSceneParam._m0[7u].z, fma(_851, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _850));
    uint _975 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _981 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_975].x;
    float _982 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_975].y;
    float _983 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_975].z;
    float _3820 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    vec4 _995 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _936, cbSceneParam._m0[86u].y * _937));
    float _999 = ((isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * TEXCOORD_5.w) * _995.x;
    float _1000 = dot(vec3(_850, _851, _852), vec3(_928, _929, _930));
    float _1003 = _1000 * 2.0;
    float _1007 = (_1003 * _850) - _928;
    float _1008 = (_1003 * _851) - _929;
    float _1009 = (_1003 * _852) - _930;
    float _1013 = abs(dot(vec3(_928, _929, _930), vec3(_850, _851, _852)));
    float _3853 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = sqrt(_853);
    float _1028 = exp2((_1015 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1015 * 3.0));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1369;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1094 = fma(_1068, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060));
        float _1098 = fma(_1068, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060));
        float _1102 = fma(_1068, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060));
        float _1127 = _1060 + _850;
        float _1128 = _1064 + _851;
        float _1129 = _1068 + _852;
        float _1139 = fma(_1129, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127)) - _1094;
        float _1140 = fma(_1129, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127)) - _1098;
        float _1141 = fma(_1129, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127)) - _1102;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1094 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1098 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[34u].z) + ((((((_1102 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1197 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1163.x + (-0.5));
        float _1199 = _1197 * (_1163.y + (-0.5));
        float _1200 = _1197 * (_1163.z + (-0.5));
        float _1207 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1170.x + (-0.5));
        float _1209 = _1207 * (_1170.y + (-0.5));
        float _1210 = _1207 * (_1170.z + (-0.5));
        float _1217 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1177.x + (-0.5));
        float _1219 = _1217 * (_1177.y + (-0.5));
        float _1220 = _1217 * (_1177.z + (-0.5));
        float _1227 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1184.x + (-0.5));
        float _1229 = _1227 * (_1184.y + (-0.5));
        float _1230 = _1227 * (_1184.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1251 = (dot(vec3(_850, _851, _852), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1261 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3901 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1263 + 1.0))) + _1268) * _1231;
        float _1278 = _1199 * 0.5;
        float _1279 = _1209 * 0.5;
        float _1280 = _1219 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_850, _851, _852), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3934 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1305 + 1.0))) + _1310) * _1232;
        float _1320 = _1200 * 0.5;
        float _1321 = _1210 * 0.5;
        float _1322 = _1220 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_850, _851, _852), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _3967 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1347 + 1.0))) + _1352) * _1233;
        _1369 = _1200;
        _1371 = _1199;
        _1372 = _1198;
        _1373 = _1210;
        _1374 = _1209;
        _1375 = _1208;
        _1376 = _1220;
        _1377 = _1219;
        _1378 = _1218;
        _1379 = _1233;
        _1380 = _1232;
        _1381 = _1231;
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1370;
        _1371 = _1370;
        _1372 = _1370;
        _1373 = _1370;
        _1374 = _1370;
        _1375 = _1370;
        _1376 = _1370;
        _1377 = _1370;
        _1378 = _1370;
        _1379 = _1370;
        _1380 = _1370;
        _1381 = _1370;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1407 = fma(_1068, cbModelParam._m0[30u].z, fma(_1064, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1060));
        float _1411 = fma(_1068, cbModelParam._m0[31u].z, fma(_1064, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1060));
        float _1415 = fma(_1068, cbModelParam._m0[32u].z, fma(_1064, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1060));
        float _1438 = _1060 + _850;
        float _1439 = _1064 + _851;
        float _1440 = _1068 + _852;
        float _1450 = fma(_1440, cbModelParam._m0[30u].z, fma(_1439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1438)) - _1407;
        float _1451 = fma(_1440, cbModelParam._m0[31u].z, fma(_1439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1438)) - _1411;
        float _1452 = fma(_1440, cbModelParam._m0[32u].z, fma(_1439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1438)) - _1415;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1469 = ((_1456 * _1450) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1407 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1456 * _1451) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1411 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1456 * _1452) / cbModelParam._m0[35u].z) + ((((((_1415 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        float _1506 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1473.x + (-0.5));
        float _1508 = _1506 * (_1473.y + (-0.5));
        float _1509 = _1506 * (_1473.z + (-0.5));
        float _1516 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1480.x + (-0.5));
        float _1518 = _1516 * (_1480.y + (-0.5));
        float _1519 = _1516 * (_1480.z + (-0.5));
        float _1526 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1487.x + (-0.5));
        float _1528 = _1526 * (_1487.y + (-0.5));
        float _1529 = _1526 * (_1487.z + (-0.5));
        float _1536 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1494.x + (-0.5));
        float _1538 = _1536 * (_1494.y + (-0.5));
        float _1539 = _1536 * (_1494.z + (-0.5));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = _1507 * 0.5;
        float _1544 = _1517 * 0.5;
        float _1545 = _1527 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_850, _851, _852), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4030 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1570 + 1.0))) + _1575) * _1540;
        float _1585 = _1508 * 0.5;
        float _1586 = _1518 * 0.5;
        float _1587 = _1528 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_850, _851, _852), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4063 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1612 + 1.0))) + _1617) * _1541;
        float _1627 = _1509 * 0.5;
        float _1628 = _1519 * 0.5;
        float _1629 = _1529 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_850, _851, _852), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4096 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1654 + 1.0))) + _1659) * _1542;
        _1676 = _1509;
        _1677 = _1508;
        _1678 = _1507;
        _1679 = _1519;
        _1680 = _1518;
        _1681 = _1517;
        _1682 = _1529;
        _1683 = _1528;
        _1684 = _1527;
        _1685 = _1542;
        _1686 = _1541;
        _1687 = _1540;
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
    }
    else
    {
        _1676 = _1370;
        _1677 = _1370;
        _1678 = _1370;
        _1679 = _1370;
        _1680 = _1370;
        _1681 = _1370;
        _1682 = _1370;
        _1683 = _1370;
        _1684 = _1370;
        _1685 = _1370;
        _1686 = _1370;
        _1687 = _1370;
        _1688 = 0.0;
        _1689 = 0.0;
        _1690 = 0.0;
    }
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1382)) + _1382;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1383)) + _1383;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1384)) + _1384;
    float _1723 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1700));
    float _1744 = _1007 * 0.5;
    float _1745 = _1008 * 0.5;
    float _1746 = _1009 * 0.5;
    float _1747 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1750 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1753 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1787;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1760 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1369, _1373, _1376, _1379));
        float _1764 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1768 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1775 = dot(vec4(cbModelParam._m0[39u]), vec4(_1744, _1745, _1746, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1798;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1789 = dot(vec4(cbModelParam._m0[40u]), vec4(_1744, _1745, _1746, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1802 = (_1798 * cbModelParam._m0[1u].x) + (_1787 * (1.0 - cbModelParam._m0[1u].x));
    float _1812 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _853);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1812 : min(cbModelParam._m0[25u].z, _1812));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1861 = fma(_1068, cbModelParam._m0[13u].z, fma(_1064, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1060)) + cbModelParam._m0[13u].w;
        float _1865 = fma(_1068, cbModelParam._m0[14u].z, fma(_1064, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1060)) + cbModelParam._m0[14u].w;
        float _1869 = fma(_1068, cbModelParam._m0[15u].z, fma(_1064, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1060)) + cbModelParam._m0[15u].w;
        float _1872 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1875 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1878 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1906;
        if (_1872 > 0.0)
        {
            _1906 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1906 = frontier_phi_14_12_ladder;
        }
        float _2129;
        if (_1875 > 0.0)
        {
            _2129 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2129 = frontier_phi_23_19_ladder;
        }
        float _2375;
        if (_1878 > 0.0)
        {
            _2375 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2375 = frontier_phi_35_30_ladder;
        }
        float _2377 = isnan(_2129) ? _1906 : (isnan(_1906) ? _2129 : min(_1906, _2129));
        float _2378 = isnan(_2375) ? _2377 : (isnan(_2377) ? _2375 : min(_2377, _2375));
        float _2382 = (_2378 * _1872) + _1861;
        float _2383 = (_2378 * _1875) + _1865;
        float _2384 = (_2378 * _1878) + _1869;
        float _2385 = _2378 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2385;
        float _2389 = _2385 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 > _2389) || ((_2383 < _2387) || ((_2382 < _2387) || (_2382 > _2389))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2384, cbModelParam._m0[9u].z, fma(_2383, cbModelParam._m0[9u].y, _2382 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2384, cbModelParam._m0[10u].z, fma(_2383, cbModelParam._m0[10u].y, _2382 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2384, cbModelParam._m0[11u].z, fma(_2383, cbModelParam._m0[11u].y, _2382 * cbModelParam._m0[11u].x))), _1813);
            frontier_phi_13_35_ladder = _2508.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2508.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2508.x * cbModelParam._m0[1u].y;
        }
        _1894 = frontier_phi_13_35_ladder_2;
        _1896 = frontier_phi_13_35_ladder_1;
        _1898 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1813);
        _1894 = _1882.x * cbModelParam._m0[1u].y;
        _1896 = _1882.y * cbModelParam._m0[1u].y;
        _1898 = _1882.z * cbModelParam._m0[1u].y;
    }
    float _1902 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _853);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1902 : min(cbModelParam._m0[25u].w, _1902));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1958 = fma(_1068, cbModelParam._m0[21u].z, fma(_1064, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1060)) + cbModelParam._m0[21u].w;
        float _1962 = fma(_1068, cbModelParam._m0[22u].z, fma(_1064, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1060)) + cbModelParam._m0[22u].w;
        float _1966 = fma(_1068, cbModelParam._m0[23u].z, fma(_1064, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1060)) + cbModelParam._m0[23u].w;
        float _1969 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _1972 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _1975 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2134;
        if (_1969 > 0.0)
        {
            _2134 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2134 = frontier_phi_25_21_ladder;
        }
        float _2402;
        if (_1972 > 0.0)
        {
            _2402 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2402 = frontier_phi_37_32_ladder;
        }
        float _2607;
        if (_1975 > 0.0)
        {
            _2607 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2607 = frontier_phi_46_43_ladder;
        }
        float _2609 = isnan(_2402) ? _2134 : (isnan(_2134) ? _2402 : min(_2134, _2402));
        float _2610 = isnan(_2607) ? _2609 : (isnan(_2609) ? _2607 : min(_2609, _2607));
        float _2614 = (_2610 * _1969) + _1958;
        float _2615 = (_2610 * _1972) + _1962;
        float _2616 = (_2610 * _1975) + _1966;
        float _2617 = _2610 * 9.9999997473787516355514526367188e-05;
        float _2618 = (-1.0) - _2617;
        float _2620 = _2617 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2616 > _2620) || ((_2616 < _2618) || ((_2615 > _2620) || ((_2615 < _2618) || ((_2614 < _2618) || (_2614 > _2620))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2616, cbModelParam._m0[17u].z, fma(_2615, cbModelParam._m0[17u].y, _2614 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2616, cbModelParam._m0[18u].z, fma(_2615, cbModelParam._m0[18u].y, _2614 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2616, cbModelParam._m0[19u].z, fma(_2615, cbModelParam._m0[19u].y, _2614 * cbModelParam._m0[19u].x))), _1903);
            frontier_phi_22_46_ladder = _2815.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2815.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2815.x * cbModelParam._m0[1u].z;
        }
        _1994 = frontier_phi_22_46_ladder_2;
        _1996 = frontier_phi_22_46_ladder_1;
        _1998 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1903);
        _1994 = _1978.x * cbModelParam._m0[1u].z;
        _1996 = _1978.y * cbModelParam._m0[1u].z;
        _1998 = _1978.z * cbModelParam._m0[1u].z;
    }
    float _2010 = ((((1.0 - _1028) * ((_1015 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1028 * _1015)) * _999;
    float _2011 = _2010 * ((cbModelParam._m0[1u].w * (_1994 - _1894)) + _1894);
    float _2012 = _2010 * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2013 = _2010 * ((cbModelParam._m0[1u].w * (_1998 - _1898)) + _1898);
    float _2016 = fma(_2013, cbSceneParam._m0[89u].z, fma(_2012, cbSceneParam._m0[89u].y, _2011 * cbSceneParam._m0[89u].x));
    float _2019 = fma(_2013, cbSceneParam._m0[90u].z, fma(_2012, cbSceneParam._m0[90u].y, _2011 * cbSceneParam._m0[90u].x));
    float _2022 = fma(_2013, cbSceneParam._m0[91u].z, fma(_2012, cbSceneParam._m0[91u].y, _2011 * cbSceneParam._m0[91u].x));
    vec4 _2030 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_936, _937));
    float _2032 = _2030.w;
    float _2044 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2032);
    float _2045 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2032);
    float _2046 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2032);
    uvec4 _2050 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2052 = _2050.x * 14u;
    uint _2053 = _2052 + 13u;
    float _2060 = _999 + (-1.0);
    float _2065 = (cbLight._m0[_2053].x * _2060) + 1.0;
    float _2066 = (cbLight._m0[_2053].y * _2060) + 1.0;
    float _2067 = (cbLight._m0[_2053].z * _2060) + 1.0;
    float _2068 = (cbLight._m0[_2053].w * _2060) + 1.0;
    uint _2069 = _2052 + 5u;
    float _2075 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
    uint _2079 = _2052 + 4u;
    float _2088 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2092 = _2052 | 1u;
    float _2103 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_850, _851, _852));
    float _2106 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_850, _851, _852));
    float _4232 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _4243 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2111 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _2113 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _2120 = ((cbLight._m0[_2069].x * _2075) * _2113) + (((cbLight._m0[_2079].x * _2044) * _2088) * _2111);
    float _2121 = ((_2075 * cbLight._m0[_2069].y) * _2113) + (((cbLight._m0[_2079].y * _2045) * _2088) * _2111);
    float _2122 = ((_2075 * cbLight._m0[_2069].z) * _2113) + (((cbLight._m0[_2079].z * _2046) * _2088) * _2111);
    uvec4 _2126 = floatBitsToUint(cbLight._m0[_2052 + 12u]);
    bool _2128 = _2126.x == 0u;
    float _2139;
    float _2141;
    float _2143;
    if (_2128)
    {
        _2139 = _2120;
        _2141 = _2121;
        _2143 = _2122;
    }
    else
    {
        uint _2147 = _2052 + 6u;
        float _2163 = (dot(vec3(cbLight._m0[_2052 + 2u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2164 = _2163 * _2163;
        float _4254 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2165 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2166 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2139 = (((cbLight._m0[_2147].x * 0.3183098733425140380859375) * _2165) * _2166) + _2120;
        _2141 = (((cbLight._m0[_2147].y * 0.3183098733425140380859375) * _2165) * _2166) + _2121;
        _2143 = (((cbLight._m0[_2147].z * 0.3183098733425140380859375) * _2165) * _2166) + _2122;
    }
    bool _2146 = _2126.y == 0u;
    float _2184;
    float _2186;
    float _2188;
    if (_2146)
    {
        _2184 = _2139;
        _2186 = _2141;
        _2188 = _2143;
    }
    else
    {
        uint _2346 = _2052 + 7u;
        float _2362 = (dot(vec3(cbLight._m0[_2052 + 3u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2363 = _2362 * _2362;
        float _4270 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2364 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2365 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2184 = (((cbLight._m0[_2346].x * 0.3183098733425140380859375) * _2364) * _2365) + _2139;
        _2186 = (((cbLight._m0[_2346].y * 0.3183098733425140380859375) * _2364) * _2365) + _2141;
        _2188 = (((cbLight._m0[_2346].z * 0.3183098733425140380859375) * _2364) * _2365) + _2143;
    }
    uint _2191 = _2052 + 8u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _853) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_2052].x + _928;
    float _2207 = cbLight._m0[_2052].y + _929;
    float _2208 = cbLight._m0[_2052].z + _930;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2052].xyz));
    float _4286 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2220 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2221 = dot(vec3(_850, _851, _852), vec3(_2213, _2214, _2215));
    float _4308 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2225 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2213, _2214, _2215));
    float _4319 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2229 = _2205 * _2205;
    float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
    float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2245 = 1.0 - _2205;
    float _2256 = (0.5 / (((_2220 * ((_2219 * _2245) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2245) + _2205) * _2219))) * _2219;
    float _4330 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
    uint _2272 = _2052 + 9u;
    float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _853) * 0.949999988079071044921875);
    float _2284 = _2283 * _2283;
    float _2285 = cbLight._m0[_2092].x + _928;
    float _2286 = cbLight._m0[_2092].y + _929;
    float _2287 = cbLight._m0[_2092].z + _930;
    float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
    float _2292 = _2291 * _2285;
    float _2293 = _2291 * _2286;
    float _2294 = _2291 * _2287;
    float _2295 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2092].xyz));
    float _4341 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2299 = dot(vec3(_850, _851, _852), vec3(_2292, _2293, _2294));
    float _4352 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2303 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2292, _2293, _2294));
    float _4363 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2307 = _2284 * _2284;
    float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
    float _2320 = (exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2321 = 1.0 - _2284;
    float _2331 = (0.5 / (((_2220 * ((_2298 * _2321) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2321) + _2284) * _2298))) * _2298;
    float _4374 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
    float _2343 = (((_2320 * cbLight._m0[_2272].x) * _2333) * _2075) + ((((cbLight._m0[_2191].x * _2044) * _2244) * _2258) * _2088);
    float _2344 = (((_2320 * cbLight._m0[_2272].y) * _2333) * _2075) + ((((cbLight._m0[_2191].y * _2045) * _2244) * _2258) * _2088);
    float _2345 = (((_2320 * cbLight._m0[_2272].z) * _2333) * _2075) + ((((cbLight._m0[_2191].z * _2046) * _2244) * _2258) * _2088);
    float _2407;
    float _2409;
    float _2411;
    if (_2128)
    {
        _2407 = _2343;
        _2409 = _2344;
        _2411 = _2345;
    }
    else
    {
        uint _2413 = _2052 + 2u;
        uint _2417 = _2052 + 10u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _853) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _928;
        float _2434 = cbLight._m0[_2413].y + _929;
        float _2435 = cbLight._m0[_2413].z + _930;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2413].xyz));
        float _4385 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2447 = dot(vec3(_850, _851, _852), vec3(_2440, _2441, _2442));
        float _4396 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4407 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2468 = (exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2469 = 1.0 - _2432;
        float _2479 = (0.5 / (((_2220 * ((_2446 * _2469) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2469) + _2432) * _2446))) * _2446;
        float _4418 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2407 = (((_2468 * cbLight._m0[_2417].x) * _2481) * _2482) + _2343;
        _2409 = (((_2468 * cbLight._m0[_2417].y) * _2481) * _2482) + _2344;
        _2411 = (((_2468 * cbLight._m0[_2417].z) * _2481) * _2482) + _2345;
    }
    float _2517;
    float _2519;
    float _2521;
    if (_2146)
    {
        _2517 = _2407;
        _2519 = _2409;
        _2521 = _2411;
    }
    else
    {
        uint _2528 = _2052 + 3u;
        uint _2532 = _2052 + 11u;
        float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2528].w)) * _853) * 0.949999988079071044921875);
        float _2547 = _2546 * _2546;
        float _2548 = cbLight._m0[_2528].x + _928;
        float _2549 = cbLight._m0[_2528].y + _929;
        float _2550 = cbLight._m0[_2528].z + _930;
        float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
        float _2555 = _2554 * _2548;
        float _2556 = _2554 * _2549;
        float _2557 = _2554 * _2550;
        float _2558 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2528].xyz));
        float _4434 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2562 = dot(vec3(_850, _851, _852), vec3(_2555, _2556, _2557));
        float _4445 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2566 = dot(vec3(cbLight._m0[_2528].xyz), vec3(_2555, _2556, _2557));
        float _4456 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2570 = _2547 * _2547;
        float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
        float _2583 = (exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2584 = 1.0 - _2547;
        float _2594 = (0.5 / (((_2220 * ((_2561 * _2584) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2584) + _2547) * _2561))) * _2561;
        float _4467 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2596 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
        float _2597 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2517 = (((_2583 * cbLight._m0[_2532].x) * _2596) * _2597) + _2407;
        _2519 = (((_2583 * cbLight._m0[_2532].y) * _2596) * _2597) + _2409;
        _2521 = (((_2583 * cbLight._m0[_2532].z) * _2596) * _2597) + _2411;
    }
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    if (_2050.y == 0u)
    {
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2672;
        float _2674 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2672;
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2672;
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.x;
        uint _2699 = uint((float(_2687.y) * floor(float(uint(cbSceneParam._m0[85u].y * _937) / _2688))) + floor(float(uint(cbSceneParam._m0[85u].x * _936) / _2688)));
        float _2709 = (log2(_2675 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2710 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        uint _2713 = uint(isnan(14.0) ? _2710 : (isnan(_2710) ? 14.0 : min(_2710, 14.0)));
        uvec4 _2718 = texelFetch(g_lightClusterGridBuffer, int(((_2713 << 2u) + (_2699 << 6u)) >> 2u));
        uint _2719 = _2718.x;
        uint _2720 = _2687.z;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((((1u << ((_2720 >> 4u) & 15u)) + 4294967295u) & _2719) == 0u) || ((_2720 & 240u) == 0u))
        {
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
        }
        else
        {
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            uint _2971 = 0u;
            uint _2980;
            bool _2981;
            for (;;)
            {
                _2980 = texelFetch(g_lightClassification, int((((_2713 << 5u) + (_2699 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                _2981 = _2980 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2981)
                {
                    frontier_phi_61_pred = _2965;
                    frontier_phi_61_pred_1 = _2970;
                    frontier_phi_61_pred_2 = _2969;
                    frontier_phi_61_pred_3 = _2968;
                    frontier_phi_61_pred_4 = _2967;
                    frontier_phi_61_pred_5 = _2966;
                }
                else
                {
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    uint _3095;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2968;
                    _3093 = _2969;
                    _3094 = _2970;
                    _3095 = _2980;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    for (;;)
                    {
                        uint _3099 = uint(findLSB(_3095)) + (_2971 << 5u);
                        uint _3096 = (_3095 + 4294967295u) & _3095;
                        uint _3101 = _3099 * 48u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3121 = (_3099 * 48u) + 4u;
                        vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 3u)).x));
                        uint _3140 = (_3099 * 48u) + 8u;
                        vec3 _3151 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x));
                        float _3155 = _3115.x - _2673;
                        float _3156 = _3115.y - _2674;
                        float _3157 = _3115.z - _2675;
                        float _3158 = dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157));
                        float _3161 = inversesqrt(_3158);
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3165 = dot(vec3(_955, _958, _961), vec3(_3162, _3163, _3164));
                        float _3170 = 1.0 - (_3158 * _3115.w);
                        float _4493 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3172 = sqrt(_3158) * _3134.w;
                        float _3175 = 1.39999997615814208984375 / (_3172 + 1.39999997615814208984375);
                        float _3176 = _3175 * _3175;
                        float _3179 = ((1.0 - _3176) * _3165) + _3176;
                        float _3182 = _3172 * _3172;
                        float _3186 = ((isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))) * _3171) / ((_3182 * 0.699999988079071044921875) + 1.0);
                        float _3190 = (-0.0) - _2673;
                        float _3191 = (-0.0) - _2674;
                        float _3192 = (-0.0) - _2675;
                        float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3207 = exp2(log2(1.0 / ((_3182 * 3.5) + 5.0)) * 0.25);
                        float _3208 = 1.0 - _1015;
                        float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                        float _3216 = _3215 * _3215;
                        float _3217 = _3216 * _3216;
                        float _3218 = _3197 + _3162;
                        float _3219 = _3198 + _3163;
                        float _3220 = _3199 + _3164;
                        float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                        float _3228 = dot(vec3(_955, _958, _961), vec3(_3197, _3198, _3199));
                        float _4509 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3232 = dot(vec3(_955, _958, _961), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                        float _4520 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                        float _3240 = _3175 * _3216;
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3165) + _3241;
                        float _4531 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3246 = 1.0 - _3216;
                        float _3256 = (0.5 / (((_3245 * ((_3231 * _3246) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3245 * _3246) + _3216) * _3231))) * _3245;
                        float _4542 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3267 = (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) / ((_3239 * _3239) * ((_3182 * 2.1991131305694580078125) + 3.141590118408203125))) * _3171;
                        _3024 = (_3186 * _3134.x) + _3092;
                        _3025 = (_3186 * _3134.y) + _3093;
                        _3026 = (_3186 * _3134.z) + _3094;
                        _3021 = (_3267 * _3151.x) + _3089;
                        _3022 = (_3267 * _3151.y) + _3090;
                        _3023 = (_3267 * _3151.z) + _3091;
                        if (_3096 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3024;
                            _3093 = _3025;
                            _3094 = _3026;
                            _3095 = _3096;
                        }
                    }
                    frontier_phi_61_pred = _3021;
                    frontier_phi_61_pred_1 = _3026;
                    frontier_phi_61_pred_2 = _3025;
                    frontier_phi_61_pred_3 = _3024;
                    frontier_phi_61_pred_4 = _3023;
                    frontier_phi_61_pred_5 = _3022;
                }
                _2821 = frontier_phi_61_pred;
                _2831 = frontier_phi_61_pred_1;
                _2829 = frontier_phi_61_pred_2;
                _2827 = frontier_phi_61_pred_3;
                _2825 = frontier_phi_61_pred_4;
                _2823 = frontier_phi_61_pred_5;
                uint _2972 = _2971 + 1u;
                if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2965 = _2821;
                    _2966 = _2823;
                    _2967 = _2825;
                    _2968 = _2827;
                    _2969 = _2829;
                    _2970 = _2831;
                    _2971 = _2972;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
        }
        uvec4 _2834 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2835 = _2834.z;
        uint _2837 = (_2835 >> 8u) & 15u;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((4294967295u << _2837) & _2719) == 0u)
        {
            _2933 = _2820;
            _2935 = _2822;
            _2937 = _2824;
            _2939 = _2826;
            _2941 = _2828;
            _2943 = _2830;
        }
        else
        {
            float _2958 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
            float _2959 = _2958 * _2673;
            float _2960 = _2958 * _2674;
            float _2961 = _2958 * _2675;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2837 < ((_2835 >> 12u) & 15u))
            {
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _3072 = _2820;
                float _3073 = _2822;
                float _3074 = _2824;
                float _3075 = _2826;
                float _3076 = _2828;
                float _3077 = _2830;
                uint _3078 = _2837;
                uint _3087;
                bool _3088;
                for (;;)
                {
                    _3087 = texelFetch(g_lightClassification, int((((_2713 << 5u) + (_2699 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                    _3088 = _3087 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3088)
                    {
                        frontier_phi_67_pred = _3075;
                        frontier_phi_67_pred_1 = _3076;
                        frontier_phi_67_pred_2 = _3077;
                        frontier_phi_67_pred_3 = _3074;
                        frontier_phi_67_pred_4 = _3073;
                        frontier_phi_67_pred_5 = _3072;
                    }
                    else
                    {
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3285 = _3072;
                        float _3286 = _3073;
                        float _3287 = _3074;
                        float _3288 = _3075;
                        float _3289 = _3076;
                        float _3290 = _3077;
                        uint _3291 = _3087;
                        uint _3292;
                        vec4 _3317;
                        float _3318;
                        vec4 _3333;
                        vec3 _3345;
                        vec4 _3360;
                        vec4 _3375;
                        float _3421;
                        bool _3422;
                        for (;;)
                        {
                            uint _3302 = ((_3078 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3291));
                            _3292 = (_3291 + 4294967295u) & _3291;
                            uint _3304 = _3302 * 40u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3318 = _3317.w;
                            uint _3320 = (_3302 * 40u) + 4u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3302 * 40u) + 8u;
                            _3345 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x));
                            uint _3347 = (_3302 * 40u) + 16u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3302 * 40u) + 20u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3302 * 40u) + 24u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3396 = (_3302 * 40u) + 28u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3421 = fma(_2675, _3409.z, fma(_2674, _3409.y, _3409.x * _2673)) + _3409.w;
                            _3422 = !((fma(_2675, _3390.z, fma(_2674, _3390.y, _3390.x * _2673)) + _3390.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3422)
                            {
                                float _3449 = _3317.x - _2673;
                                float _3450 = _3317.y - _2674;
                                float _3451 = _3317.z - _2675;
                                float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                                float _3455 = inversesqrt(_3452);
                                float _3456 = _3455 * _3449;
                                float _3457 = _3455 * _3450;
                                float _3458 = _3455 * _3451;
                                float _3462 = 1.0 - (_3452 / (_3318 * _3318));
                                float _4553 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3467 = sqrt(_3452) * _3333.w;
                                float _3469 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                                float _3470 = _3469 * _3469;
                                float _3473 = ((1.0 - _3470) * dot(vec3(_3456, _3457, _3458), vec3(_955, _958, _961))) + _3470;
                                float _3476 = _3467 * _3467;
                                float _3480 = (fma(_2675, _3360.z, fma(_2674, _3360.y, _3360.x * _2673)) + _3360.w) / _3421;
                                float _3481 = (fma(_2675, _3375.z, fma(_2674, _3375.y, _3375.x * _2673)) + _3375.w) / _3421;
                                float _3485 = 1.0 - dot(vec2(_3480, _3481), vec2(_3480, _3481));
                                float _4569 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3487 = _3486 * (((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3463) / ((_3476 * 0.699999988079071044921875) + 1.0));
                                float _3499 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                                float _3500 = 1.0 - _1015;
                                float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                                float _3508 = _3507 * _3507;
                                float _3509 = _3508 * _3508;
                                float _3510 = _3456 - _2959;
                                float _3511 = _3457 - _2960;
                                float _3512 = _3458 - _2961;
                                float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                                float _3520 = dot(vec3(_955, _958, _961), vec3((-0.0) - _2959, (-0.0) - _2960, (-0.0) - _2961));
                                float _4580 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3524 = dot(vec3(_955, _958, _961), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                                float _4591 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                                float _3532 = _3469 * _3508;
                                float _3533 = _3532 * _3532;
                                float _3539 = ((1.0 - _3533) * dot(vec3(_955, _958, _961), vec3(_3456, _3457, _3458))) + _3533;
                                float _4602 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3541 = 1.0 - _3508;
                                float _3551 = (0.5 / (((_3540 * ((_3523 * _3541) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3508) * _3523))) * _3540;
                                float _4613 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3561 = (_3486 * _3463) * (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3531 * _3531) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3561 * _3345.x;
                                frontier_phi_73_pred_1 = _3561 * _3345.y;
                                frontier_phi_73_pred_2 = _3487 * _3333.z;
                                frontier_phi_73_pred_3 = _3487 * _3333.y;
                                frontier_phi_73_pred_4 = _3487 * _3333.x;
                                frontier_phi_73_pred_5 = _3561 * _3345.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3565 = frontier_phi_73_pred;
                            _3566 = frontier_phi_73_pred_1;
                            _3570 = frontier_phi_73_pred_2;
                            _3569 = frontier_phi_73_pred_3;
                            _3568 = frontier_phi_73_pred_4;
                            _3567 = frontier_phi_73_pred_5;
                            _3275 = _3568 + _3288;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            if (_3292 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3292;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3275;
                        frontier_phi_67_pred_1 = _3276;
                        frontier_phi_67_pred_2 = _3277;
                        frontier_phi_67_pred_3 = _3274;
                        frontier_phi_67_pred_4 = _3273;
                        frontier_phi_67_pred_5 = _3272;
                    }
                    _2940 = frontier_phi_67_pred;
                    _2942 = frontier_phi_67_pred_1;
                    _2944 = frontier_phi_67_pred_2;
                    _2938 = frontier_phi_67_pred_3;
                    _2936 = frontier_phi_67_pred_4;
                    _2934 = frontier_phi_67_pred_5;
                    uint _3079 = _3078 + 1u;
                    if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3072 = _2934;
                        _3073 = _2936;
                        _3074 = _2938;
                        _3075 = _2940;
                        _3076 = _2942;
                        _3077 = _2944;
                        _3078 = _3079;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2942;
                frontier_phi_55_56_ladder_1 = _2944;
                frontier_phi_55_56_ladder_2 = _2940;
                frontier_phi_55_56_ladder_3 = _2938;
                frontier_phi_55_56_ladder_4 = _2936;
                frontier_phi_55_56_ladder_5 = _2934;
            }
            else
            {
                frontier_phi_55_56_ladder = _2828;
                frontier_phi_55_56_ladder_1 = _2830;
                frontier_phi_55_56_ladder_2 = _2826;
                frontier_phi_55_56_ladder_3 = _2824;
                frontier_phi_55_56_ladder_4 = _2822;
                frontier_phi_55_56_ladder_5 = _2820;
            }
            _2933 = frontier_phi_55_56_ladder_5;
            _2935 = frontier_phi_55_56_ladder_4;
            _2937 = frontier_phi_55_56_ladder_3;
            _2939 = frontier_phi_55_56_ladder_2;
            _2941 = frontier_phi_55_56_ladder;
            _2943 = frontier_phi_55_56_ladder_1;
        }
        float _2948 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _2732 = (_2948 * _2939) + _2184;
        _2734 = (_2948 * _2941) + _2186;
        _2736 = (_2948 * _2943) + _2188;
        _2738 = ((_2933 * 0.039999999105930328369140625) * _2948) + _2517;
        _2740 = ((_2935 * 0.039999999105930328369140625) * _2948) + _2519;
        _2742 = ((_2937 * 0.039999999105930328369140625) * _2948) + _2521;
    }
    else
    {
        _2732 = _2184;
        _2734 = _2186;
        _2736 = _2188;
        _2738 = _2517;
        _2740 = _2519;
        _2742 = _2521;
    }
    float _4629 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _4640 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _4651 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    uint _2762 = _255 + 6u;
    float _2770 = _936 / cbSceneParam._m0[86u].x;
    float _2771 = _937 / cbSceneParam._m0[86u].y;
    vec4 _2785 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, (log2((isnan(cbSceneParam._m0[77u].w) ? _871 : (isnan(_871) ? cbSceneParam._m0[77u].w : min(_871, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2787 = _2785.x;
    float _2788 = _2785.y;
    float _2789 = _2785.z;
    float _2790 = _2785.w;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_871 > cbSceneParam._m0[78u].w)
    {
        float _2845 = isnan(_871) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _871 : min(cbSceneParam._m0[80u].w, _871));
        float _2846 = _2845 / _871;
        float _2857 = _2846 * _921;
        float _2858 = _922 * _2846;
        float _2859 = (-0.0) - _2858;
        float _2861 = _2846 * _923;
        float _2863 = (cbSceneParam._m0[77u].w * _2859) / _2845;
        float _2864 = _2863 + cbSceneParam._m0[79u].w;
        float _2865 = cbSceneParam._m0[79u].w - _2858;
        float _2871 = sqrt(((_2857 * _2857) + (_2858 * _2858)) + (_2861 * _2861));
        float _2874 = (1.0 - (cbSceneParam._m0[77u].w / _2845)) * _2871;
        float _2879 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2881 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3034;
        if (abs((_2859 - _2863) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3034 = ((((_2864 > 0.0) ? exp2(_2879 * _2864) : (2.0 - exp2(_2881 * _2864))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2874;
        }
        else
        {
            float _2994 = 1.0 / cbSceneParam._m0[80u].x;
            float _2995 = isnan(_2865) ? _2864 : (isnan(_2864) ? _2865 : max(_2864, _2865));
            float _2996 = isnan(_2865) ? _2864 : (isnan(_2864) ? _2865 : min(_2864, _2865));
            float _3005 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : min(_2995, 0.0));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            _3034 = ((abs(_2871 / _2859) * cbSceneParam._m0[80u].y) * ((((_3005 - _3006) * 2.0) - ((exp2(_2879 * (isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0)))) - exp2(_2879 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))))) * _2994)) - ((exp2(_2881 * _3005) - exp2(_2881 * _3006)) * _2994))) + (_2874 * cbSceneParam._m0[80u].z);
        }
        vec4 _3036 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, 1.0), 0.0);
        float _3045 = exp2((_3034 * (-1.44269502162933349609375)) * (1.0 - _3036.w));
        float _3046 = log2(_3045);
        float _3062 = log2(_2790);
        _2883 = (exp2(_3062 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].x)) * _3036.x) / cbSceneParam._m0[78u].x)) + _2787;
        _2885 = (exp2(_3062 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].y)) * _3036.y) / cbSceneParam._m0[78u].y)) + _2788;
        _2887 = (exp2(_3062 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].z)) * _3036.z) / cbSceneParam._m0[78u].z)) + _2789;
        _2889 = _3045 * _2790;
    }
    else
    {
        _2883 = _2787;
        _2885 = _2788;
        _2887 = _2789;
        _2889 = _2790;
    }
    float _2901 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2902 = _2901 == 3.0;
    float _2903 = log2(_2889);
    float _2910 = exp2(_2903 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2732 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _999))) + ((_2738 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1802)) * cbPerFrame._m0[3u].x));
    float _2911 = exp2(_2903 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2734 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _999))) + ((_2740 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1802)) * cbPerFrame._m0[3u].x));
    float _2912 = exp2(_2903 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2736 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _999))) + ((_2742 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1802)) * cbPerFrame._m0[3u].x));
    float _2921 = (_2901 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2921 * (_2902 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.y = _2921 * (_2902 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2885)));
    SV_Target.z = _2921 * (_2902 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2887)));
    SV_Target.w = cbInstanceData._m0[_2762].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2762].w;
}


