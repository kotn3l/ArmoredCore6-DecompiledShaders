#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1267;
float _3629;
float _3630;
float _3631;
float _3632;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3641 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3652 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3663 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[24u].z) + _421) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3674 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _446 = (_439 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _447 = (_439 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _448 = (_439 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    float _452 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _446;
    float _455 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _447;
    float _458 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _448;
    float _465 = ((_446 - _452) * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) + _452;
    float _466 = ((_447 - _455) * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) + _455;
    float _467 = ((_448 - _458) * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) + _458;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _439) + _526;
    float _538 = ((((_505.x - _524) * _439) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _439) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3685 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _579 = (_538 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_480.x * 2.0) + (-1.0)))) + (((_567.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _580 = (_539 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_480.y * 2.0) + (-1.0)))) + (((_567.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _594 = _592.x;
    float _595 = 1.0 - _594;
    float _621 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_594 - _595) * cbMtdParam._m0[24u].y) + _595) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3696 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _630 = ((((cbMtdParam._m0[10u].x - _465) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _622) + _465;
    float _631 = ((((cbMtdParam._m0[10u].y - _466) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _622) + _466;
    float _632 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _467)) * _622) + _467;
    float _637 = (((_480.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    float _641 = ((_567.z - _637) * cbMtdParam._m0[19u].w) + _637;
    float _645 = ((cbMtdParam._m0[23u].y - _641) * _622) + _641;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _670 = (_664.x * 2.0) + (-1.0);
    float _671 = (_664.y * 2.0) + (-1.0);
    float _672 = dot(vec2(_670, _671), vec2(_670, _671));
    float _3707 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _688 = (_622 * (((cbMtdParam._m0[22u].z * _579) - _579) + _670)) + _579;
    float _689 = (_622 * (((cbMtdParam._m0[22u].z * _580) - _580) + _671)) + _580;
    float _690 = (_622 * (sqrt(1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) - _545)) + _545;
    float _692 = cbMtdParam._m0[22u].x + _567.w;
    float _695 = fma(_690, _241 * NORMAL.x, fma(_689, _248 * TANGENT.x, (_234 * _226) * _688));
    float _698 = fma(_690, _241 * NORMAL.y, fma(_689, _248 * TANGENT.y, (_234 * _227) * _688));
    float _701 = fma(_690, _241 * NORMAL.z, fma(_689, _248 * TANGENT.z, (_234 * _228) * _688));
    float _705 = inversesqrt(dot(vec3(_695, _698, _701), vec3(_695, _698, _701)));
    float _706 = _705 * _695;
    float _707 = _705 * _698;
    float _708 = _705 * _701;
    float _3718 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _709 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _3740 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3751 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3762 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _727 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _778 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _768);
    float _779 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _768);
    float _780 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _768);
    float _784 = inversesqrt(dot(vec3(_778, _779, _780), vec3(_778, _779, _780)));
    float _785 = _778 * _784;
    float _786 = _779 * _784;
    float _787 = _780 * _784;
    vec4 _792 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _794 = _792.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _948 = sqrt(((_778 * _778) + (_779 * _779)) + (_780 * _780));
        float _954 = (cbMatDynParam._m0[5u].x * _948) + cbMatDynParam._m0[5u].y;
        float _3773 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _959 = (cbMatDynParam._m0[5u].z * _948) + cbMatDynParam._m0[5u].w;
        float _3784 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) - _955)) + _955) < ((_794 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _805 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _806 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _824 = fma(_708, cbSceneParam._m0[5u].z, fma(_707, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _706));
    float _827 = fma(_708, cbSceneParam._m0[6u].z, fma(_707, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _706));
    float _830 = fma(_708, cbSceneParam._m0[7u].z, fma(_707, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _706));
    uint _843 = _273 + 9u;
    uint _844 = _843 + uint(cbMatDynParam._m0[0u].w);
    float _850 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_844].x;
    float _851 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_844].y;
    float _852 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_844].z;
    float _3795 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    vec4 _864 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _805, cbSceneParam._m0[86u].y * _806));
    float _868 = ((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * TEXCOORD_5.w) * _864.x;
    float _869 = dot(vec3(_706, _707, _708), vec3(_785, _786, _787));
    float _872 = _869 * 2.0;
    float _876 = (_872 * _706) - _785;
    float _877 = (_872 * _707) - _786;
    float _878 = (_872 * _708) - _787;
    float _882 = abs(dot(vec3(_785, _786, _787), vec3(_706, _707, _708)));
    float _3828 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _884 = sqrt(_709);
    float _897 = exp2((_884 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_884 * 3.0));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1266;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _991 = fma(_937, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929));
        float _995 = fma(_937, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929));
        float _999 = fma(_937, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929));
        float _1024 = _929 + _706;
        float _1025 = _933 + _707;
        float _1026 = _937 + _708;
        float _1036 = fma(_1026, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024)) - _991;
        float _1037 = fma(_1026, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024)) - _995;
        float _1038 = fma(_1026, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024)) - _999;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_991 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_995 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[34u].z) + ((((((_999 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1094 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1060.x + (-0.5));
        float _1096 = _1094 * (_1060.y + (-0.5));
        float _1097 = _1094 * (_1060.z + (-0.5));
        float _1104 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1067.x + (-0.5));
        float _1106 = _1104 * (_1067.y + (-0.5));
        float _1107 = _1104 * (_1067.z + (-0.5));
        float _1114 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1074.x + (-0.5));
        float _1116 = _1114 * (_1074.y + (-0.5));
        float _1117 = _1114 * (_1074.z + (-0.5));
        float _1124 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1081.x + (-0.5));
        float _1126 = _1124 * (_1081.y + (-0.5));
        float _1127 = _1124 * (_1081.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1148 = (dot(vec3(_706, _707, _708), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1158 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3876 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1160 + 1.0))) + _1165) * _1128;
        float _1175 = _1096 * 0.5;
        float _1176 = _1106 * 0.5;
        float _1177 = _1116 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_706, _707, _708), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3909 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1202 + 1.0))) + _1207) * _1129;
        float _1217 = _1097 * 0.5;
        float _1218 = _1107 * 0.5;
        float _1219 = _1117 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_706, _707, _708), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3942 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1244 + 1.0))) + _1249) * _1130;
        _1266 = _1097;
        _1268 = _1096;
        _1269 = _1095;
        _1270 = _1107;
        _1271 = _1106;
        _1272 = _1105;
        _1273 = _1117;
        _1274 = _1116;
        _1275 = _1115;
        _1276 = _1130;
        _1277 = _1129;
        _1278 = _1128;
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _1267;
        _1268 = _1267;
        _1269 = _1267;
        _1270 = _1267;
        _1271 = _1267;
        _1272 = _1267;
        _1273 = _1267;
        _1274 = _1267;
        _1275 = _1267;
        _1276 = _1267;
        _1277 = _1267;
        _1278 = _1267;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1309 = fma(_937, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _929));
        float _1313 = fma(_937, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _929));
        float _1317 = fma(_937, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _929));
        float _1340 = _929 + _706;
        float _1341 = _933 + _707;
        float _1342 = _937 + _708;
        float _1352 = fma(_1342, cbModelParam._m0[30u].z, fma(_1341, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1340)) - _1309;
        float _1353 = fma(_1342, cbModelParam._m0[31u].z, fma(_1341, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1340)) - _1313;
        float _1354 = fma(_1342, cbModelParam._m0[32u].z, fma(_1341, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1340)) - _1317;
        float _1358 = inversesqrt(dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354)));
        float _1371 = ((_1358 * _1352) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1309 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1358 * _1353) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1313 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1358 * _1354) / cbModelParam._m0[35u].z) + ((((((_1317 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        float _1408 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1375.x + (-0.5));
        float _1410 = _1408 * (_1375.y + (-0.5));
        float _1411 = _1408 * (_1375.z + (-0.5));
        float _1418 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1382.x + (-0.5));
        float _1420 = _1418 * (_1382.y + (-0.5));
        float _1421 = _1418 * (_1382.z + (-0.5));
        float _1428 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1389.x + (-0.5));
        float _1430 = _1428 * (_1389.y + (-0.5));
        float _1431 = _1428 * (_1389.z + (-0.5));
        float _1438 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1396.x + (-0.5));
        float _1440 = _1438 * (_1396.y + (-0.5));
        float _1441 = _1438 * (_1396.z + (-0.5));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = _1409 * 0.5;
        float _1446 = _1419 * 0.5;
        float _1447 = _1429 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_706, _707, _708), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4005 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1472 + 1.0))) + _1477) * _1442;
        float _1487 = _1410 * 0.5;
        float _1488 = _1420 * 0.5;
        float _1489 = _1430 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_706, _707, _708), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4038 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1514 + 1.0))) + _1519) * _1443;
        float _1529 = _1411 * 0.5;
        float _1530 = _1421 * 0.5;
        float _1531 = _1431 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_706, _707, _708), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4071 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1556 + 1.0))) + _1561) * _1444;
        _1578 = _1411;
        _1579 = _1410;
        _1580 = _1409;
        _1581 = _1421;
        _1582 = _1420;
        _1583 = _1419;
        _1584 = _1431;
        _1585 = _1430;
        _1586 = _1429;
        _1587 = _1444;
        _1588 = _1443;
        _1589 = _1442;
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
    }
    else
    {
        _1578 = _1267;
        _1579 = _1267;
        _1580 = _1267;
        _1581 = _1267;
        _1582 = _1267;
        _1583 = _1267;
        _1584 = _1267;
        _1585 = _1267;
        _1586 = _1267;
        _1587 = _1267;
        _1588 = _1267;
        _1589 = _1267;
        _1590 = 0.0;
        _1591 = 0.0;
        _1592 = 0.0;
    }
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1279)) + _1279;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1280)) + _1280;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1281)) + _1281;
    float _1625 = fma(_1604, cbSceneParam._m0[89u].z, fma(_1603, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1604, cbSceneParam._m0[90u].z, fma(_1603, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1604, cbSceneParam._m0[91u].z, fma(_1603, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1602));
    float _1646 = _876 * 0.5;
    float _1647 = _877 * 0.5;
    float _1648 = _878 * 0.5;
    float _1649 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1652 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1655 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1689;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1662 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1266, _1270, _1273, _1276));
        float _1666 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1670 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1677 = dot(vec4(cbModelParam._m0[39u]), vec4(_1646, _1647, _1648, 1.0));
        _1689 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1689 = 1.0;
    }
    float _1700;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1691 = dot(vec4(cbModelParam._m0[40u]), vec4(_1646, _1647, _1648, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1704 = (_1700 * cbModelParam._m0[1u].x) + (_1689 * (1.0 - cbModelParam._m0[1u].x));
    float _1714 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _709);
    float _1715 = isnan(_1714) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1714 : min(cbModelParam._m0[25u].z, _1714));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1764 = fma(_937, cbModelParam._m0[13u].z, fma(_933, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _929)) + cbModelParam._m0[13u].w;
        float _1768 = fma(_937, cbModelParam._m0[14u].z, fma(_933, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _929)) + cbModelParam._m0[14u].w;
        float _1772 = fma(_937, cbModelParam._m0[15u].z, fma(_933, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _929)) + cbModelParam._m0[15u].w;
        float _1775 = fma(_878, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876));
        float _1778 = fma(_878, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876));
        float _1781 = fma(_878, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876));
        float _1809;
        if (_1775 > 0.0)
        {
            _1809 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1809 = frontier_phi_17_15_ladder;
        }
        float _2011;
        if (_1778 > 0.0)
        {
            _2011 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2011 = frontier_phi_26_22_ladder;
        }
        float _2254;
        if (_1781 > 0.0)
        {
            _2254 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2254 = frontier_phi_38_33_ladder;
        }
        float _2256 = isnan(_2011) ? _1809 : (isnan(_1809) ? _2011 : min(_1809, _2011));
        float _2257 = isnan(_2254) ? _2256 : (isnan(_2256) ? _2254 : min(_2256, _2254));
        float _2261 = (_2257 * _1775) + _1764;
        float _2262 = (_2257 * _1778) + _1768;
        float _2263 = (_2257 * _1781) + _1772;
        float _2264 = _2257 * 9.9999997473787516355514526367188e-05;
        float _2266 = (-1.0) - _2264;
        float _2268 = _2264 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2263 > _2268) || ((_2263 < _2266) || ((_2262 > _2268) || ((_2262 < _2266) || ((_2261 < _2266) || (_2261 > _2268))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2263, cbModelParam._m0[9u].z, fma(_2262, cbModelParam._m0[9u].y, _2261 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2263, cbModelParam._m0[10u].z, fma(_2262, cbModelParam._m0[10u].y, _2261 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2263, cbModelParam._m0[11u].z, fma(_2262, cbModelParam._m0[11u].y, _2261 * cbModelParam._m0[11u].x))), _1715);
            frontier_phi_16_38_ladder = _2387.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2387.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2387.x * cbModelParam._m0[1u].y;
        }
        _1797 = frontier_phi_16_38_ladder_2;
        _1799 = frontier_phi_16_38_ladder_1;
        _1801 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_876, _877, _878), _1715);
        _1797 = _1785.x * cbModelParam._m0[1u].y;
        _1799 = _1785.y * cbModelParam._m0[1u].y;
        _1801 = _1785.z * cbModelParam._m0[1u].y;
    }
    float _1805 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _709);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1805 : min(cbModelParam._m0[25u].w, _1805));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1861 = fma(_937, cbModelParam._m0[21u].z, fma(_933, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _929)) + cbModelParam._m0[21u].w;
        float _1865 = fma(_937, cbModelParam._m0[22u].z, fma(_933, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _929)) + cbModelParam._m0[22u].w;
        float _1869 = fma(_937, cbModelParam._m0[23u].z, fma(_933, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _929)) + cbModelParam._m0[23u].w;
        float _1872 = fma(_878, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876));
        float _1875 = fma(_878, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876));
        float _1878 = fma(_878, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876));
        float _2016;
        if (_1872 > 0.0)
        {
            _2016 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2016 = frontier_phi_28_24_ladder;
        }
        float _2281;
        if (_1875 > 0.0)
        {
            _2281 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2281 = frontier_phi_40_35_ladder;
        }
        float _2486;
        if (_1878 > 0.0)
        {
            _2486 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2486 = frontier_phi_49_46_ladder;
        }
        float _2488 = isnan(_2281) ? _2016 : (isnan(_2016) ? _2281 : min(_2016, _2281));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1872) + _1861;
        float _2494 = (_2489 * _1875) + _1865;
        float _2495 = (_2489 * _1878) + _1869;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2496;
        float _2499 = _2496 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2495 > _2499) || ((_2495 < _2497) || ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 < _2497) || (_2493 > _2499))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2694 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2495, cbModelParam._m0[17u].z, fma(_2494, cbModelParam._m0[17u].y, _2493 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2495, cbModelParam._m0[18u].z, fma(_2494, cbModelParam._m0[18u].y, _2493 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2495, cbModelParam._m0[19u].z, fma(_2494, cbModelParam._m0[19u].y, _2493 * cbModelParam._m0[19u].x))), _1806);
            frontier_phi_25_49_ladder = _2694.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2694.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2694.x * cbModelParam._m0[1u].z;
        }
        _1897 = frontier_phi_25_49_ladder_2;
        _1899 = frontier_phi_25_49_ladder_1;
        _1901 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_876, _877, _878), _1806);
        _1897 = _1881.x * cbModelParam._m0[1u].z;
        _1899 = _1881.y * cbModelParam._m0[1u].z;
        _1901 = _1881.z * cbModelParam._m0[1u].z;
    }
    float _1913 = ((((1.0 - _897) * ((_884 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_897 * _884)) * _868;
    float _1914 = _1913 * ((cbModelParam._m0[1u].w * (_1897 - _1797)) + _1797);
    float _1915 = _1913 * ((cbModelParam._m0[1u].w * (_1899 - _1799)) + _1799);
    float _1916 = _1913 * ((cbModelParam._m0[1u].w * (_1901 - _1801)) + _1801);
    float _1919 = fma(_1916, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1914 * cbSceneParam._m0[89u].x));
    float _1922 = fma(_1916, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1914 * cbSceneParam._m0[90u].x));
    float _1925 = fma(_1916, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, _1914 * cbSceneParam._m0[91u].x));
    uvec4 _1935 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _1937 = _1935.x * 14u;
    uint _1938 = _1937 + 13u;
    float _1945 = _868 + (-1.0);
    float _1950 = (cbLight._m0[_1938].x * _1945) + 1.0;
    float _1951 = (cbLight._m0[_1938].y * _1945) + 1.0;
    float _1952 = (cbLight._m0[_1938].z * _1945) + 1.0;
    float _1953 = (cbLight._m0[_1938].w * _1945) + 1.0;
    uint _1954 = _1937 + 5u;
    float _1960 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1964 = _1937 + 4u;
    float _1970 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1974 = _1937 | 1u;
    float _1985 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_706, _707, _708));
    float _1988 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_706, _707, _708));
    float _4207 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _4218 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1993 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * 0.3183098733425140380859375;
    float _1995 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2002 = ((cbLight._m0[_1954].x * _1960) * _1995) + ((cbLight._m0[_1964].x * _1970) * _1993);
    float _2003 = ((_1960 * cbLight._m0[_1954].y) * _1995) + ((_1970 * cbLight._m0[_1964].y) * _1993);
    float _2004 = ((_1960 * cbLight._m0[_1954].z) * _1995) + ((_1970 * cbLight._m0[_1964].z) * _1993);
    uvec4 _2008 = floatBitsToUint(cbLight._m0[_1937 + 12u]);
    bool _2010 = _2008.x == 0u;
    float _2021;
    float _2023;
    float _2025;
    if (_2010)
    {
        _2021 = _2002;
        _2023 = _2003;
        _2025 = _2004;
    }
    else
    {
        uint _2029 = _1937 + 6u;
        float _2045 = (dot(vec3(cbLight._m0[_1937 + 2u].xyz), vec3(_706, _707, _708)) * 0.5) + 0.5;
        float _2046 = _2045 * _2045;
        float _4229 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2047 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2048 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2021 = (((cbLight._m0[_2029].x * 0.3183098733425140380859375) * _2047) * _2048) + _2002;
        _2023 = (((cbLight._m0[_2029].y * 0.3183098733425140380859375) * _2047) * _2048) + _2003;
        _2025 = (((cbLight._m0[_2029].z * 0.3183098733425140380859375) * _2047) * _2048) + _2004;
    }
    bool _2028 = _2008.y == 0u;
    float _2066;
    float _2068;
    float _2070;
    if (_2028)
    {
        _2066 = _2021;
        _2068 = _2023;
        _2070 = _2025;
    }
    else
    {
        uint _2225 = _1937 + 7u;
        float _2241 = (dot(vec3(cbLight._m0[_1937 + 3u].xyz), vec3(_706, _707, _708)) * 0.5) + 0.5;
        float _2242 = _2241 * _2241;
        float _4245 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2243 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2244 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2066 = (((cbLight._m0[_2225].x * 0.3183098733425140380859375) * _2243) * _2244) + _2021;
        _2068 = (((cbLight._m0[_2225].y * 0.3183098733425140380859375) * _2243) * _2244) + _2023;
        _2070 = (((cbLight._m0[_2225].z * 0.3183098733425140380859375) * _2243) * _2244) + _2025;
    }
    uint _2073 = _1937 + 8u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _709) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1937].x + _785;
    float _2089 = cbLight._m0[_1937].y + _786;
    float _2090 = cbLight._m0[_1937].z + _787;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_1937].xyz));
    float _4261 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2102 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2103 = dot(vec3(_706, _707, _708), vec3(_2095, _2096, _2097));
    float _4283 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2095, _2096, _2097));
    float _4294 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2087 * _2087;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2126 = (exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2127 = 1.0 - _2087;
    float _2138 = (0.5 / (((_2102 * ((_2101 * _2127) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2127) + _2087) * _2101))) * _2101;
    float _4305 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    uint _2151 = _1937 + 9u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _709) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_1974].x + _785;
    float _2165 = cbLight._m0[_1974].y + _786;
    float _2166 = cbLight._m0[_1974].z + _787;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_1974].xyz));
    float _4316 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2178 = dot(vec3(_706, _707, _708), vec3(_2171, _2172, _2173));
    float _4327 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2171, _2172, _2173));
    float _4338 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2163 * _2163;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2199 = (exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2200 = 1.0 - _2163;
    float _2210 = (0.5 / (((_2102 * ((_2177 * _2200) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2200) + _2163) * _2177))) * _2177;
    float _4349 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    float _2222 = (((_2199 * cbLight._m0[_2151].x) * _2212) * _1960) + (((_2126 * cbLight._m0[_2073].x) * _2140) * _1970);
    float _2223 = (((_2199 * cbLight._m0[_2151].y) * _2212) * _1960) + (((_2126 * cbLight._m0[_2073].y) * _2140) * _1970);
    float _2224 = (((_2199 * cbLight._m0[_2151].z) * _2212) * _1960) + (((_2126 * cbLight._m0[_2073].z) * _2140) * _1970);
    float _2286;
    float _2288;
    float _2290;
    if (_2010)
    {
        _2286 = _2222;
        _2288 = _2223;
        _2290 = _2224;
    }
    else
    {
        uint _2292 = _1937 + 2u;
        uint _2296 = _1937 + 10u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _709) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _785;
        float _2313 = cbLight._m0[_2292].y + _786;
        float _2314 = cbLight._m0[_2292].z + _787;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2292].xyz));
        float _4360 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2326 = dot(vec3(_706, _707, _708), vec3(_2319, _2320, _2321));
        float _4371 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4382 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2347 = (exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2348 = 1.0 - _2311;
        float _2358 = (0.5 / (((_2102 * ((_2325 * _2348) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2348) + _2311) * _2325))) * _2325;
        float _4393 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2360 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2361 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2286 = (((_2347 * cbLight._m0[_2296].x) * _2360) * _2361) + _2222;
        _2288 = (((_2347 * cbLight._m0[_2296].y) * _2360) * _2361) + _2223;
        _2290 = (((_2347 * cbLight._m0[_2296].z) * _2360) * _2361) + _2224;
    }
    float _2396;
    float _2398;
    float _2400;
    if (_2028)
    {
        _2396 = _2286;
        _2398 = _2288;
        _2400 = _2290;
    }
    else
    {
        uint _2407 = _1937 + 3u;
        uint _2411 = _1937 + 11u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _709) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _785;
        float _2428 = cbLight._m0[_2407].y + _786;
        float _2429 = cbLight._m0[_2407].z + _787;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2407].xyz));
        float _4409 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2441 = dot(vec3(_706, _707, _708), vec3(_2434, _2435, _2436));
        float _4420 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4431 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2462 = (exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2463 = 1.0 - _2426;
        float _2473 = (0.5 / (((_2102 * ((_2440 * _2463) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2463) + _2426) * _2440))) * _2440;
        float _4442 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2396 = (((_2462 * cbLight._m0[_2411].x) * _2475) * _2476) + _2286;
        _2398 = (((_2462 * cbLight._m0[_2411].y) * _2475) * _2476) + _2288;
        _2400 = (((_2462 * cbLight._m0[_2411].z) * _2475) * _2476) + _2290;
    }
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_1935.y == 0u)
    {
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2551;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2551;
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2551;
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.x;
        uint _2578 = uint((float(_2566.y) * floor(float(uint(cbSceneParam._m0[85u].y * _806) / _2567))) + floor(float(uint(cbSceneParam._m0[85u].x * _805) / _2567)));
        float _2588 = (log2(_2554 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2589 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        uint _2592 = uint(isnan(14.0) ? _2589 : (isnan(_2589) ? 14.0 : min(_2589, 14.0)));
        uvec4 _2597 = texelFetch(g_lightClusterGridBuffer, int(((_2592 << 2u) + (_2578 << 6u)) >> 2u));
        uint _2598 = _2597.x;
        uint _2599 = _2566.z;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        if (((((1u << ((_2599 >> 4u) & 15u)) + 4294967295u) & _2598) == 0u) || ((_2599 & 240u) == 0u))
        {
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
        }
        else
        {
            float _2700;
            float _2702;
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            uint _2858 = 0u;
            uint _2867;
            bool _2868;
            for (;;)
            {
                _2867 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                _2868 = _2867 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2868)
                {
                    frontier_phi_66_pred = _2852;
                    frontier_phi_66_pred_1 = _2857;
                    frontier_phi_66_pred_2 = _2856;
                    frontier_phi_66_pred_3 = _2855;
                    frontier_phi_66_pred_4 = _2854;
                    frontier_phi_66_pred_5 = _2853;
                }
                else
                {
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    uint _3003;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2867;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    for (;;)
                    {
                        uint _3007 = uint(findLSB(_3003)) + (_2858 << 5u);
                        uint _3004 = (_3003 + 4294967295u) & _3003;
                        uint _3009 = _3007 * 48u;
                        vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 3u)).x));
                        uint _3029 = (_3007 * 48u) + 4u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3048 = (_3007 * 48u) + 8u;
                        vec3 _3059 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x));
                        float _3063 = _3023.x - _2552;
                        float _3064 = _3023.y - _2553;
                        float _3065 = _3023.z - _2554;
                        float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                        float _3069 = inversesqrt(_3066);
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3073 = dot(vec3(_824, _827, _830), vec3(_3070, _3071, _3072));
                        float _3078 = 1.0 - (_3066 * _3023.w);
                        float _4468 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3080 = sqrt(_3066) * _3042.w;
                        float _3083 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3073) + _3084;
                        float _3090 = _3080 * _3080;
                        float _3094 = ((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3079) / ((_3090 * 0.699999988079071044921875) + 1.0);
                        float _3098 = (-0.0) - _2552;
                        float _3099 = (-0.0) - _2553;
                        float _3100 = (-0.0) - _2554;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3115 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                        float _3116 = 1.0 - _884;
                        float _3123 = sqrt(1.0 - ((1.0 - (_3116 * _3116)) * (1.0 - (_3115 * _3115))));
                        float _3124 = _3123 * _3123;
                        float _3125 = _3124 * _3124;
                        float _3126 = _3105 + _3070;
                        float _3127 = _3106 + _3071;
                        float _3128 = _3107 + _3072;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3136 = dot(vec3(_824, _827, _830), vec3(_3105, _3106, _3107));
                        float _4484 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3140 = dot(vec3(_824, _827, _830), vec3(_3132 * _3126, _3132 * _3127, _3132 * _3128));
                        float _4495 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3147 = ((_3143 * _3143) * (_3125 + (-1.0))) + 1.0;
                        float _3148 = _3083 * _3124;
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3073) + _3149;
                        float _4506 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3154 = 1.0 - _3124;
                        float _3164 = (0.5 / (((_3153 * ((_3139 * _3154) + _3124)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3124) * _3139))) * _3153;
                        float _4517 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3175 = (((_3125 * 3.1415927410125732421875) * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) / ((_3147 * _3147) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125))) * _3079;
                        _2927 = (_3094 * _3042.x) + _3000;
                        _2928 = (_3094 * _3042.y) + _3001;
                        _2929 = (_3094 * _3042.z) + _3002;
                        _2924 = (_3175 * _3059.x) + _2997;
                        _2925 = (_3175 * _3059.y) + _2998;
                        _2926 = (_3175 * _3059.z) + _2999;
                        if (_3004 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _3004;
                        }
                    }
                    frontier_phi_66_pred = _2924;
                    frontier_phi_66_pred_1 = _2929;
                    frontier_phi_66_pred_2 = _2928;
                    frontier_phi_66_pred_3 = _2927;
                    frontier_phi_66_pred_4 = _2926;
                    frontier_phi_66_pred_5 = _2925;
                }
                _2700 = frontier_phi_66_pred;
                _2710 = frontier_phi_66_pred_1;
                _2708 = frontier_phi_66_pred_2;
                _2706 = frontier_phi_66_pred_3;
                _2704 = frontier_phi_66_pred_4;
                _2702 = frontier_phi_66_pred_5;
                uint _2859 = _2858 + 1u;
                if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2852 = _2700;
                    _2853 = _2702;
                    _2854 = _2704;
                    _2855 = _2706;
                    _2856 = _2708;
                    _2857 = _2710;
                    _2858 = _2859;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
        }
        uvec4 _2713 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2714 = _2713.z;
        uint _2716 = (_2714 >> 8u) & 15u;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((4294967295u << _2716) & _2598) == 0u)
        {
            _2820 = _2699;
            _2822 = _2701;
            _2824 = _2703;
            _2826 = _2705;
            _2828 = _2707;
            _2830 = _2709;
        }
        else
        {
            float _2845 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
            float _2846 = _2845 * _2552;
            float _2847 = _2845 * _2553;
            float _2848 = _2845 * _2554;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2716 < ((_2714 >> 12u) & 15u))
            {
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2980 = _2699;
                float _2981 = _2701;
                float _2982 = _2703;
                float _2983 = _2705;
                float _2984 = _2707;
                float _2985 = _2709;
                uint _2986 = _2716;
                uint _2995;
                bool _2996;
                for (;;)
                {
                    _2995 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                    _2996 = _2995 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2996)
                    {
                        frontier_phi_77_pred = _2985;
                        frontier_phi_77_pred_1 = _2984;
                        frontier_phi_77_pred_2 = _2983;
                        frontier_phi_77_pred_3 = _2982;
                        frontier_phi_77_pred_4 = _2981;
                        frontier_phi_77_pred_5 = _2980;
                    }
                    else
                    {
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3202 = _2980;
                        float _3203 = _2981;
                        float _3204 = _2982;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        float _3207 = _2985;
                        uint _3208 = _2995;
                        uint _3209;
                        vec4 _3234;
                        float _3235;
                        vec4 _3250;
                        vec3 _3262;
                        vec4 _3277;
                        vec4 _3292;
                        float _3338;
                        bool _3339;
                        for (;;)
                        {
                            uint _3219 = ((_2986 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3208));
                            _3209 = (_3208 + 4294967295u) & _3208;
                            uint _3221 = _3219 * 40u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3235 = _3234.w;
                            uint _3237 = (_3219 * 40u) + 4u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3219 * 40u) + 8u;
                            _3262 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x));
                            uint _3264 = (_3219 * 40u) + 16u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3219 * 40u) + 20u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3219 * 40u) + 24u;
                            vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3313 = (_3219 * 40u) + 28u;
                            vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            _3338 = fma(_2554, _3326.z, fma(_2553, _3326.y, _3326.x * _2552)) + _3326.w;
                            _3339 = !((fma(_2554, _3307.z, fma(_2553, _3307.y, _3307.x * _2552)) + _3307.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3339)
                            {
                                float _3366 = _3234.x - _2552;
                                float _3367 = _3234.y - _2553;
                                float _3368 = _3234.z - _2554;
                                float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                                float _3372 = inversesqrt(_3369);
                                float _3373 = _3372 * _3366;
                                float _3374 = _3372 * _3367;
                                float _3375 = _3372 * _3368;
                                float _3379 = 1.0 - (_3369 / (_3235 * _3235));
                                float _4528 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3384 = sqrt(_3369) * _3250.w;
                                float _3386 = 1.39999997615814208984375 / (_3384 + 1.39999997615814208984375);
                                float _3387 = _3386 * _3386;
                                float _3390 = ((1.0 - _3387) * dot(vec3(_3373, _3374, _3375), vec3(_824, _827, _830))) + _3387;
                                float _3393 = _3384 * _3384;
                                float _3397 = (fma(_2554, _3277.z, fma(_2553, _3277.y, _3277.x * _2552)) + _3277.w) / _3338;
                                float _3398 = (fma(_2554, _3292.z, fma(_2553, _3292.y, _3292.x * _2552)) + _3292.w) / _3338;
                                float _3402 = 1.0 - dot(vec2(_3397, _3398), vec2(_3397, _3398));
                                float _4544 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3404 = _3403 * (((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3380) / ((_3393 * 0.699999988079071044921875) + 1.0));
                                float _3416 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                                float _3417 = 1.0 - _884;
                                float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                                float _3425 = _3424 * _3424;
                                float _3426 = _3425 * _3425;
                                float _3427 = _3373 - _2846;
                                float _3428 = _3374 - _2847;
                                float _3429 = _3375 - _2848;
                                float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                                float _3437 = dot(vec3(_824, _827, _830), vec3((-0.0) - _2846, (-0.0) - _2847, (-0.0) - _2848));
                                float _4555 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3440 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3441 = dot(vec3(_824, _827, _830), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                                float _4566 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3444 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                                float _3449 = _3386 * _3425;
                                float _3450 = _3449 * _3449;
                                float _3456 = ((1.0 - _3450) * dot(vec3(_824, _827, _830), vec3(_3373, _3374, _3375))) + _3450;
                                float _4577 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3458 = 1.0 - _3425;
                                float _3468 = (0.5 / (((_3457 * ((_3440 * _3458) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3457 * _3458) + _3425) * _3440))) * _3457;
                                float _4588 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3478 = (_3403 * _3380) * (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3448 * _3448) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3404 * _3250.y;
                                frontier_phi_83_pred_1 = _3404 * _3250.x;
                                frontier_phi_83_pred_2 = _3478 * _3262.z;
                                frontier_phi_83_pred_3 = _3478 * _3262.y;
                                frontier_phi_83_pred_4 = _3478 * _3262.x;
                                frontier_phi_83_pred_5 = _3404 * _3250.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3486 = frontier_phi_83_pred;
                            _3485 = frontier_phi_83_pred_1;
                            _3484 = frontier_phi_83_pred_2;
                            _3483 = frontier_phi_83_pred_3;
                            _3482 = frontier_phi_83_pred_4;
                            _3487 = frontier_phi_83_pred_5;
                            _3192 = _3485 + _3205;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            _3189 = _3482 + _3202;
                            _3190 = _3483 + _3203;
                            _3191 = _3484 + _3204;
                            if (_3209 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3209;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3194;
                        frontier_phi_77_pred_1 = _3193;
                        frontier_phi_77_pred_2 = _3192;
                        frontier_phi_77_pred_3 = _3191;
                        frontier_phi_77_pred_4 = _3190;
                        frontier_phi_77_pred_5 = _3189;
                    }
                    _2831 = frontier_phi_77_pred;
                    _2829 = frontier_phi_77_pred_1;
                    _2827 = frontier_phi_77_pred_2;
                    _2825 = frontier_phi_77_pred_3;
                    _2823 = frontier_phi_77_pred_4;
                    _2821 = frontier_phi_77_pred_5;
                    uint _2987 = _2986 + 1u;
                    if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2980 = _2821;
                        _2981 = _2823;
                        _2982 = _2825;
                        _2983 = _2827;
                        _2984 = _2829;
                        _2985 = _2831;
                        _2986 = _2987;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2825;
                frontier_phi_58_59_ladder_1 = _2831;
                frontier_phi_58_59_ladder_2 = _2829;
                frontier_phi_58_59_ladder_3 = _2827;
                frontier_phi_58_59_ladder_4 = _2823;
                frontier_phi_58_59_ladder_5 = _2821;
            }
            else
            {
                frontier_phi_58_59_ladder = _2703;
                frontier_phi_58_59_ladder_1 = _2709;
                frontier_phi_58_59_ladder_2 = _2707;
                frontier_phi_58_59_ladder_3 = _2705;
                frontier_phi_58_59_ladder_4 = _2701;
                frontier_phi_58_59_ladder_5 = _2699;
            }
            _2820 = frontier_phi_58_59_ladder_5;
            _2822 = frontier_phi_58_59_ladder_4;
            _2824 = frontier_phi_58_59_ladder;
            _2826 = frontier_phi_58_59_ladder_3;
            _2828 = frontier_phi_58_59_ladder_2;
            _2830 = frontier_phi_58_59_ladder_1;
        }
        float _2835 = isnan(1.0) ? _868 : (isnan(_868) ? 1.0 : min(_868, 1.0));
        _2611 = (_2835 * _2826) + _2066;
        _2613 = (_2835 * _2828) + _2068;
        _2615 = (_2835 * _2830) + _2070;
        _2617 = ((_2820 * 0.039999999105930328369140625) * _2835) + _2396;
        _2619 = ((_2822 * 0.039999999105930328369140625) * _2835) + _2398;
        _2621 = ((_2824 * 0.039999999105930328369140625) * _2835) + _2400;
    }
    else
    {
        _2611 = _2066;
        _2613 = _2068;
        _2615 = _2070;
        _2617 = _2396;
        _2619 = _2398;
        _2621 = _2400;
    }
    float _4604 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4615 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4626 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2638 = ((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2611 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _868))) + ((_2617 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1704)) * cbPerFrame._m0[3u].x);
    float _2639 = ((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2613 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _868))) + ((_2619 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1704)) * cbPerFrame._m0[3u].x);
    float _2640 = ((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2615 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _868))) + ((_2621 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1704)) * cbPerFrame._m0[3u].x);
    uint _2641 = _273 + 6u;
    float _2649 = _805 / cbSceneParam._m0[86u].x;
    float _2650 = _806 / cbSceneParam._m0[86u].y;
    vec4 _2664 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2649, _2650, (log2((isnan(cbSceneParam._m0[77u].w) ? _727 : (isnan(_727) ? cbSceneParam._m0[77u].w : min(_727, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2666 = _2664.x;
    float _2667 = _2664.y;
    float _2668 = _2664.z;
    float _2669 = _2664.w;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    if (_727 > cbSceneParam._m0[78u].w)
    {
        float _2724 = isnan(_727) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _727 : min(cbSceneParam._m0[80u].w, _727));
        float _2725 = _2724 / _727;
        float _2736 = _2725 * _778;
        float _2737 = _779 * _2725;
        float _2738 = (-0.0) - _2737;
        float _2740 = _2725 * _780;
        float _2742 = (cbSceneParam._m0[77u].w * _2738) / _2724;
        float _2743 = _2742 + cbSceneParam._m0[79u].w;
        float _2744 = cbSceneParam._m0[79u].w - _2737;
        float _2750 = sqrt(((_2736 * _2736) + (_2737 * _2737)) + (_2740 * _2740));
        float _2753 = (1.0 - (cbSceneParam._m0[77u].w / _2724)) * _2750;
        float _2758 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2760 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2937;
        if (abs((_2738 - _2742) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2937 = ((((_2743 > 0.0) ? exp2(_2758 * _2743) : (2.0 - exp2(_2760 * _2743))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2753;
        }
        else
        {
            float _2881 = 1.0 / cbSceneParam._m0[80u].x;
            float _2882 = isnan(_2744) ? _2743 : (isnan(_2743) ? _2744 : max(_2743, _2744));
            float _2883 = isnan(_2744) ? _2743 : (isnan(_2743) ? _2744 : min(_2743, _2744));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            _2937 = ((abs(_2750 / _2738) * cbSceneParam._m0[80u].y) * ((((_2892 - _2893) * 2.0) - ((exp2(_2758 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0)))) - exp2(_2758 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))))) * _2881)) - ((exp2(_2760 * _2892) - exp2(_2760 * _2893)) * _2881))) + (_2753 * cbSceneParam._m0[80u].z);
        }
        vec4 _2939 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2649, _2650, 1.0), 0.0);
        float _2948 = exp2((_2937 * (-1.44269502162933349609375)) * (1.0 - _2939.w));
        float _2949 = log2(_2948);
        float _2965 = log2(_2669);
        _2762 = (exp2(_2965 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].x)) * _2939.x) / cbSceneParam._m0[78u].x)) + _2666;
        _2764 = (exp2(_2965 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].y)) * _2939.y) / cbSceneParam._m0[78u].y)) + _2667;
        _2766 = (exp2(_2965 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].z)) * _2939.z) / cbSceneParam._m0[78u].z)) + _2668;
        _2768 = _2948 * _2669;
    }
    else
    {
        _2762 = _2666;
        _2764 = _2667;
        _2766 = _2668;
        _2768 = _2669;
    }
    bool _2975;
    vec4 _2778;
    vec4 _2800;
    float _2802;
    float _2806;
    float _2807;
    float _2808;
    float _2809;
    bool _2819;
    for (;;)
    {
        _2778 = cbMatDynParam._m0[0u];
        float _2780 = roundEven(_2778.y);
        bool _2781 = _2780 == 3.0;
        float _2782 = log2(_2768);
        float _2789 = exp2(_2782 * cbSceneParam._m0[78u].x) * _2638;
        float _2790 = exp2(_2782 * cbSceneParam._m0[78u].y) * _2639;
        float _2791 = exp2(_2782 * cbSceneParam._m0[78u].z) * _2640;
        float _2798 = _794 + (-0.5);
        _2800 = cbMtdParam._m0[1u];
        _2802 = _2800.y * _2798;
        float _2805 = (_2780 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2806 = _2805 * (_2781 ? _2789 : (_2789 + (cbSceneParam._m0[72u].w * _2762)));
        _2807 = _2805 * (_2781 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2764)));
        _2808 = _2805 * (_2781 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2766)));
        _2809 = _2798 * 0.999000012874603271484375;
        _2819 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2819)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _2809) < 0.5)
            {
                _2975 = true;
                break;
            }
        }
        uint _2916 = _843 + uint(_2778.w);
        if ((cbInstanceData._m0[_2916].w < 1.0) && ((cbInstanceData._m0[_2916].w + _2809) < 0.5))
        {
            _2975 = true;
            break;
        }
        if ((_2802 + 1.0) < _2800.x)
        {
            _2975 = true;
            break;
        }
        _2975 = false;
        break;
    }
    float _3180;
    if (_2975)
    {
        discard_state = true;
        _3180 = 0.0;
    }
    else
    {
        _3180 = cbInstanceData._m0[_2641].w;
    }
    SV_Target.x = _2806;
    SV_Target.y = _2807;
    SV_Target.z = _2808;
    SV_Target.w = _3180;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2641].w;
    discard_exit();
}


