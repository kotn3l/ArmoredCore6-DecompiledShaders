#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1207;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3513 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3524 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3535 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].z) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3546 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _435 = (_428 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _436 = (_428 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _437 = (_428 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) + _447;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _529 = ((_499.z - _520) * _428) + _520;
    float _532 = ((((_499.x - _518) * _428) + _518) * 2.0) + (-1.0);
    float _533 = ((((_499.y - _519) * _428) + _519) * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3557 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _281) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _282) + cbTextureTilingScale._m0[11u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _596 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_582 - _583) * cbMtdParam._m0[24u].w) + _583) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3568 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _604 = (_597 * (cbMtdParam._m0[17u].x - _454)) + _454;
    float _605 = (_597 * (cbMtdParam._m0[17u].y - _455)) + _455;
    float _606 = (_597 * (cbMtdParam._m0[17u].z - _456)) + _456;
    float _611 = (((_474.z - _529) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _529;
    float _615 = ((_555.z - _611) * cbMtdParam._m0[19u].w) + _611;
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _281) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _282) + cbTextureTilingScale._m0[15u].w));
    float _635 = (_628.x * 2.0) + (-1.0);
    float _636 = (_628.y * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _3579 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _645 = (_597 * (_628.z - _615)) + _615;
    float _654 = (_532 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_474.x * 2.0) + (-1.0)))) + (((_555.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _655 = (_533 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_474.y * 2.0) + (-1.0)))) + (((_555.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _667 = (((_635 - _654) + (cbMtdParam._m0[21u].x * _654)) * _597) + _654;
    float _668 = (((_636 - _655) + (cbMtdParam._m0[21u].x * _655)) * _597) + _655;
    float _669 = (_597 * (sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) - _539)) + _539;
    float _671 = cbMtdParam._m0[22u].x + _555.w;
    float _674 = fma(_669, _228 * NORMAL.x, fma(_668, _235 * TANGENT.x, (_221 * _213) * _667));
    float _677 = fma(_669, _228 * NORMAL.y, fma(_668, _235 * TANGENT.y, (_221 * _214) * _667));
    float _680 = fma(_669, _228 * NORMAL.z, fma(_668, _235 * TANGENT.z, (_221 * _215) * _667));
    float _684 = inversesqrt(dot(vec3(_674, _677, _680), vec3(_674, _677, _680)));
    float _685 = _684 * _674;
    float _686 = _684 * _677;
    float _687 = _684 * _680;
    float _3590 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _688 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3612 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3623 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3634 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _706 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _758 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _748);
    float _759 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _748);
    float _760 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _748);
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _758 * _764;
    float _766 = _759 * _764;
    float _767 = _760 * _764;
    float _773 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _774 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _792 = fma(_687, cbSceneParam._m0[5u].z, fma(_686, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _685));
    float _795 = fma(_687, cbSceneParam._m0[6u].z, fma(_686, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _685));
    float _798 = fma(_687, cbSceneParam._m0[7u].z, fma(_686, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _685));
    uint _812 = (_262 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _818 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_812].x;
    float _819 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_812].y;
    float _820 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_812].z;
    float _3645 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    vec4 _832 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _773, cbSceneParam._m0[86u].y * _774));
    float _836 = ((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * TEXCOORD_5.w) * _832.x;
    float _837 = dot(vec3(_685, _686, _687), vec3(_765, _766, _767));
    float _840 = _837 * 2.0;
    float _844 = (_840 * _685) - _765;
    float _845 = (_840 * _686) - _766;
    float _846 = (_840 * _687) - _767;
    float _850 = abs(dot(vec3(_765, _766, _767), vec3(_685, _686, _687)));
    float _3678 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _852 = sqrt(_688);
    float _865 = exp2((_852 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_852 * 3.0));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1206;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _931 = fma(_905, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897));
        float _935 = fma(_905, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897));
        float _939 = fma(_905, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897));
        float _964 = _897 + _685;
        float _965 = _901 + _686;
        float _966 = _905 + _687;
        float _976 = fma(_966, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964)) - _931;
        float _977 = fma(_966, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964)) - _935;
        float _978 = fma(_966, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964)) - _939;
        float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
        float _995 = ((_982 * _976) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_931 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_982 * _977) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_935 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_982 * _978) / cbModelParam._m0[34u].z) + ((((((_939 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1034 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_1000.x + (-0.5));
        float _1036 = _1034 * (_1000.y + (-0.5));
        float _1037 = _1034 * (_1000.z + (-0.5));
        float _1044 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1007.x + (-0.5));
        float _1046 = _1044 * (_1007.y + (-0.5));
        float _1047 = _1044 * (_1007.z + (-0.5));
        float _1054 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1014.x + (-0.5));
        float _1056 = _1054 * (_1014.y + (-0.5));
        float _1057 = _1054 * (_1014.z + (-0.5));
        float _1064 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1021.x + (-0.5));
        float _1066 = _1064 * (_1021.y + (-0.5));
        float _1067 = _1064 * (_1021.z + (-0.5));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = _1035 * 0.5;
        float _1072 = _1045 * 0.5;
        float _1073 = _1055 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1088 = (dot(vec3(_685, _686, _687), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1098 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3726 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1100 + 1.0))) + _1105) * _1068;
        float _1115 = _1036 * 0.5;
        float _1116 = _1046 * 0.5;
        float _1117 = _1056 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_685, _686, _687), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3759 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1142 + 1.0))) + _1147) * _1069;
        float _1157 = _1037 * 0.5;
        float _1158 = _1047 * 0.5;
        float _1159 = _1057 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_685, _686, _687), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3792 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1184 + 1.0))) + _1189) * _1070;
        _1206 = _1037;
        _1208 = _1036;
        _1209 = _1035;
        _1210 = _1047;
        _1211 = _1046;
        _1212 = _1045;
        _1213 = _1057;
        _1214 = _1056;
        _1215 = _1055;
        _1216 = _1070;
        _1217 = _1069;
        _1218 = _1068;
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _1207;
        _1208 = _1207;
        _1209 = _1207;
        _1210 = _1207;
        _1211 = _1207;
        _1212 = _1207;
        _1213 = _1207;
        _1214 = _1207;
        _1215 = _1207;
        _1216 = _1207;
        _1217 = _1207;
        _1218 = _1207;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1246 = fma(_905, cbModelParam._m0[30u].z, fma(_901, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897));
        float _1250 = fma(_905, cbModelParam._m0[31u].z, fma(_901, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897));
        float _1254 = fma(_905, cbModelParam._m0[32u].z, fma(_901, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897));
        float _1277 = _897 + _685;
        float _1278 = _901 + _686;
        float _1279 = _905 + _687;
        float _1289 = fma(_1279, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1277)) - _1246;
        float _1290 = fma(_1279, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1277)) - _1250;
        float _1291 = fma(_1279, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1277)) - _1254;
        float _1295 = inversesqrt(dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291)));
        float _1308 = ((_1295 * _1289) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1246 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1295 * _1290) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1250 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1295 * _1291) / cbModelParam._m0[35u].z) + ((((((_1254 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1345 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1312.x + (-0.5));
        float _1347 = _1345 * (_1312.y + (-0.5));
        float _1348 = _1345 * (_1312.z + (-0.5));
        float _1355 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1319.x + (-0.5));
        float _1357 = _1355 * (_1319.y + (-0.5));
        float _1358 = _1355 * (_1319.z + (-0.5));
        float _1365 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1326.x + (-0.5));
        float _1367 = _1365 * (_1326.y + (-0.5));
        float _1368 = _1365 * (_1326.z + (-0.5));
        float _1375 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1333.x + (-0.5));
        float _1377 = _1375 * (_1333.y + (-0.5));
        float _1378 = _1375 * (_1333.z + (-0.5));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = _1346 * 0.5;
        float _1383 = _1356 * 0.5;
        float _1384 = _1366 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_685, _686, _687), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3855 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1409 + 1.0))) + _1414) * _1379;
        float _1424 = _1347 * 0.5;
        float _1425 = _1357 * 0.5;
        float _1426 = _1367 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_685, _686, _687), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3888 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1451 + 1.0))) + _1456) * _1380;
        float _1466 = _1348 * 0.5;
        float _1467 = _1358 * 0.5;
        float _1468 = _1368 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_685, _686, _687), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _3921 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1493 + 1.0))) + _1498) * _1381;
        _1515 = _1348;
        _1516 = _1347;
        _1517 = _1346;
        _1518 = _1358;
        _1519 = _1357;
        _1520 = _1356;
        _1521 = _1368;
        _1522 = _1367;
        _1523 = _1366;
        _1524 = _1381;
        _1525 = _1380;
        _1526 = _1379;
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
    }
    else
    {
        _1515 = _1207;
        _1516 = _1207;
        _1517 = _1207;
        _1518 = _1207;
        _1519 = _1207;
        _1520 = _1207;
        _1521 = _1207;
        _1522 = _1207;
        _1523 = _1207;
        _1524 = _1207;
        _1525 = _1207;
        _1526 = _1207;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1219)) + _1219;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1220)) + _1220;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1221)) + _1221;
    float _1562 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1539));
    float _1583 = _844 * 0.5;
    float _1584 = _845 * 0.5;
    float _1585 = _846 * 0.5;
    float _1586 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1589 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1592 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1626;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1599 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1206, _1210, _1213, _1216));
        float _1603 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1607 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1614 = dot(vec4(cbModelParam._m0[39u]), vec4(_1583, _1584, _1585, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1637;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1628 = dot(vec4(cbModelParam._m0[40u]), vec4(_1583, _1584, _1585, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1641 = (_1637 * cbModelParam._m0[1u].x) + (_1626 * (1.0 - cbModelParam._m0[1u].x));
    float _1651 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _688);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1651 : min(cbModelParam._m0[25u].z, _1651));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1700 = fma(_905, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897)) + cbModelParam._m0[13u].w;
        float _1704 = fma(_905, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897)) + cbModelParam._m0[14u].w;
        float _1708 = fma(_905, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897)) + cbModelParam._m0[15u].w;
        float _1711 = fma(_846, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844));
        float _1714 = fma(_846, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844));
        float _1717 = fma(_846, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844));
        float _1745;
        if (_1711 > 0.0)
        {
            _1745 = abs((1.0 - _1700) / _1711);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1700 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1745 = frontier_phi_14_12_ladder;
        }
        float _1946;
        if (_1714 > 0.0)
        {
            _1946 = abs((1.0 - _1704) / _1714);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1704 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1946 = frontier_phi_23_19_ladder;
        }
        float _2189;
        if (_1717 > 0.0)
        {
            _2189 = abs((1.0 - _1708) / _1717);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1708 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2189 = frontier_phi_35_30_ladder;
        }
        float _2191 = isnan(_1946) ? _1745 : (isnan(_1745) ? _1946 : min(_1745, _1946));
        float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
        float _2196 = (_2192 * _1711) + _1700;
        float _2197 = (_2192 * _1714) + _1704;
        float _2198 = (_2192 * _1717) + _1708;
        float _2199 = _2192 * 9.9999997473787516355514526367188e-05;
        float _2201 = (-1.0) - _2199;
        float _2203 = _2199 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2198 > _2203) || ((_2198 < _2201) || ((_2197 > _2203) || ((_2197 < _2201) || ((_2196 < _2201) || (_2196 > _2203))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2198, cbModelParam._m0[9u].z, fma(_2197, cbModelParam._m0[9u].y, _2196 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2198, cbModelParam._m0[10u].z, fma(_2197, cbModelParam._m0[10u].y, _2196 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2198, cbModelParam._m0[11u].z, fma(_2197, cbModelParam._m0[11u].y, _2196 * cbModelParam._m0[11u].x))), _1652);
            frontier_phi_13_35_ladder = _2322.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2322.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2322.x * cbModelParam._m0[1u].y;
        }
        _1733 = frontier_phi_13_35_ladder_2;
        _1735 = frontier_phi_13_35_ladder_1;
        _1737 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1721 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_844, _845, _846), _1652);
        _1733 = _1721.x * cbModelParam._m0[1u].y;
        _1735 = _1721.y * cbModelParam._m0[1u].y;
        _1737 = _1721.z * cbModelParam._m0[1u].y;
    }
    float _1741 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _688);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1741 : min(cbModelParam._m0[25u].w, _1741));
    float _1832;
    float _1834;
    float _1836;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1796 = fma(_905, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897)) + cbModelParam._m0[21u].w;
        float _1800 = fma(_905, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897)) + cbModelParam._m0[22u].w;
        float _1804 = fma(_905, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897)) + cbModelParam._m0[23u].w;
        float _1807 = fma(_846, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844));
        float _1810 = fma(_846, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844));
        float _1813 = fma(_846, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844));
        float _1951;
        if (_1807 > 0.0)
        {
            _1951 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1951 = frontier_phi_25_21_ladder;
        }
        float _2216;
        if (_1810 > 0.0)
        {
            _2216 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2216 = frontier_phi_37_32_ladder;
        }
        float _2421;
        if (_1813 > 0.0)
        {
            _2421 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2421 = frontier_phi_46_43_ladder;
        }
        float _2423 = isnan(_2216) ? _1951 : (isnan(_1951) ? _2216 : min(_1951, _2216));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1807) + _1796;
        float _2429 = (_2424 * _1810) + _1800;
        float _2430 = (_2424 * _1813) + _1804;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2431;
        float _2434 = _2431 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2430 > _2434) || ((_2430 < _2432) || ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 < _2432) || (_2428 > _2434))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2430, cbModelParam._m0[17u].z, fma(_2429, cbModelParam._m0[17u].y, _2428 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2430, cbModelParam._m0[18u].z, fma(_2429, cbModelParam._m0[18u].y, _2428 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2430, cbModelParam._m0[19u].z, fma(_2429, cbModelParam._m0[19u].y, _2428 * cbModelParam._m0[19u].x))), _1742);
            frontier_phi_22_46_ladder = _2629.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2629.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2629.x * cbModelParam._m0[1u].z;
        }
        _1832 = frontier_phi_22_46_ladder_2;
        _1834 = frontier_phi_22_46_ladder_1;
        _1836 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_844, _845, _846), _1742);
        _1832 = _1816.x * cbModelParam._m0[1u].z;
        _1834 = _1816.y * cbModelParam._m0[1u].z;
        _1836 = _1816.z * cbModelParam._m0[1u].z;
    }
    float _1848 = ((((1.0 - _865) * ((_852 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_865 * _852)) * _836;
    float _1849 = _1848 * ((cbModelParam._m0[1u].w * (_1832 - _1733)) + _1733);
    float _1850 = _1848 * ((cbModelParam._m0[1u].w * (_1834 - _1735)) + _1735);
    float _1851 = _1848 * ((cbModelParam._m0[1u].w * (_1836 - _1737)) + _1737);
    float _1854 = fma(_1851, cbSceneParam._m0[89u].z, fma(_1850, cbSceneParam._m0[89u].y, _1849 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1851, cbSceneParam._m0[90u].z, fma(_1850, cbSceneParam._m0[90u].y, _1849 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1851, cbSceneParam._m0[91u].z, fma(_1850, cbSceneParam._m0[91u].y, _1849 * cbSceneParam._m0[91u].x));
    uvec4 _1870 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _1872 = _1870.x * 14u;
    uint _1873 = _1872 + 13u;
    float _1880 = _836 + (-1.0);
    float _1885 = (cbLight._m0[_1873].x * _1880) + 1.0;
    float _1886 = (cbLight._m0[_1873].y * _1880) + 1.0;
    float _1887 = (cbLight._m0[_1873].z * _1880) + 1.0;
    float _1888 = (cbLight._m0[_1873].w * _1880) + 1.0;
    uint _1889 = _1872 + 5u;
    float _1895 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
    uint _1899 = _1872 + 4u;
    float _1905 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
    uint _1909 = _1872 | 1u;
    float _1920 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_685, _686, _687));
    float _1923 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_685, _686, _687));
    float _4057 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _4068 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1928 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1930 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _1937 = ((cbLight._m0[_1889].x * _1895) * _1930) + ((cbLight._m0[_1899].x * _1905) * _1928);
    float _1938 = ((_1895 * cbLight._m0[_1889].y) * _1930) + ((_1905 * cbLight._m0[_1899].y) * _1928);
    float _1939 = ((_1895 * cbLight._m0[_1889].z) * _1930) + ((_1905 * cbLight._m0[_1899].z) * _1928);
    uvec4 _1943 = floatBitsToUint(cbLight._m0[_1872 + 12u]);
    bool _1945 = _1943.x == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1945)
    {
        _1956 = _1937;
        _1958 = _1938;
        _1960 = _1939;
    }
    else
    {
        uint _1964 = _1872 + 6u;
        float _1980 = (dot(vec3(cbLight._m0[_1872 + 2u].xyz), vec3(_685, _686, _687)) * 0.5) + 0.5;
        float _1981 = _1980 * _1980;
        float _4079 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1983 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _1956 = (((cbLight._m0[_1964].x * 0.3183098733425140380859375) * _1982) * _1983) + _1937;
        _1958 = (((cbLight._m0[_1964].y * 0.3183098733425140380859375) * _1982) * _1983) + _1938;
        _1960 = (((cbLight._m0[_1964].z * 0.3183098733425140380859375) * _1982) * _1983) + _1939;
    }
    bool _1963 = _1943.y == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1963)
    {
        _2001 = _1956;
        _2003 = _1958;
        _2005 = _1960;
    }
    else
    {
        uint _2160 = _1872 + 7u;
        float _2176 = (dot(vec3(cbLight._m0[_1872 + 3u].xyz), vec3(_685, _686, _687)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4095 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2179 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2001 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _1956;
        _2003 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _1958;
        _2005 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _1960;
    }
    uint _2008 = _1872 + 8u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _688) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1872].x + _765;
    float _2024 = cbLight._m0[_1872].y + _766;
    float _2025 = cbLight._m0[_1872].z + _767;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_1872].xyz));
    float _4111 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2037 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2038 = dot(vec3(_685, _686, _687), vec3(_2030, _2031, _2032));
    float _4133 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2030, _2031, _2032));
    float _4144 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2022 * _2022;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2061 = (exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2062 = 1.0 - _2022;
    float _2073 = (0.5 / (((_2037 * ((_2036 * _2062) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2062) + _2022) * _2036))) * _2036;
    float _4155 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    uint _2086 = _1872 + 9u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _688) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1909].x + _765;
    float _2100 = cbLight._m0[_1909].y + _766;
    float _2101 = cbLight._m0[_1909].z + _767;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_1909].xyz));
    float _4166 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2113 = dot(vec3(_685, _686, _687), vec3(_2106, _2107, _2108));
    float _4177 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_2106, _2107, _2108));
    float _4188 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2098 * _2098;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2134 = (exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2135 = 1.0 - _2098;
    float _2145 = (0.5 / (((_2037 * ((_2112 * _2135) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2135) + _2098) * _2112))) * _2112;
    float _4199 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    float _2157 = (((_2134 * cbLight._m0[_2086].x) * _2147) * _1895) + (((_2061 * cbLight._m0[_2008].x) * _2075) * _1905);
    float _2158 = (((_2134 * cbLight._m0[_2086].y) * _2147) * _1895) + (((_2061 * cbLight._m0[_2008].y) * _2075) * _1905);
    float _2159 = (((_2134 * cbLight._m0[_2086].z) * _2147) * _1895) + (((_2061 * cbLight._m0[_2008].z) * _2075) * _1905);
    float _2221;
    float _2223;
    float _2225;
    if (_1945)
    {
        _2221 = _2157;
        _2223 = _2158;
        _2225 = _2159;
    }
    else
    {
        uint _2227 = _1872 + 2u;
        uint _2231 = _1872 + 10u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _688) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _765;
        float _2248 = cbLight._m0[_2227].y + _766;
        float _2249 = cbLight._m0[_2227].z + _767;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2227].xyz));
        float _4210 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2261 = dot(vec3(_685, _686, _687), vec3(_2254, _2255, _2256));
        float _4221 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4232 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2282 = (exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2283 = 1.0 - _2246;
        float _2293 = (0.5 / (((_2037 * ((_2260 * _2283) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2283) + _2246) * _2260))) * _2260;
        float _4243 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2221 = (((_2282 * cbLight._m0[_2231].x) * _2295) * _2296) + _2157;
        _2223 = (((_2282 * cbLight._m0[_2231].y) * _2295) * _2296) + _2158;
        _2225 = (((_2282 * cbLight._m0[_2231].z) * _2295) * _2296) + _2159;
    }
    float _2331;
    float _2333;
    float _2335;
    if (_1963)
    {
        _2331 = _2221;
        _2333 = _2223;
        _2335 = _2225;
    }
    else
    {
        uint _2342 = _1872 + 3u;
        uint _2346 = _1872 + 11u;
        float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _688) * 0.949999988079071044921875);
        float _2361 = _2360 * _2360;
        float _2362 = cbLight._m0[_2342].x + _765;
        float _2363 = cbLight._m0[_2342].y + _766;
        float _2364 = cbLight._m0[_2342].z + _767;
        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
        float _2369 = _2368 * _2362;
        float _2370 = _2368 * _2363;
        float _2371 = _2368 * _2364;
        float _2372 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2342].xyz));
        float _4259 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2376 = dot(vec3(_685, _686, _687), vec3(_2369, _2370, _2371));
        float _4270 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2380 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2369, _2370, _2371));
        float _4281 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2384 = _2361 * _2361;
        float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
        float _2397 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2398 = 1.0 - _2361;
        float _2408 = (0.5 / (((_2037 * ((_2375 * _2398) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2398) + _2361) * _2375))) * _2375;
        float _4292 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2410 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
        float _2411 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2331 = (((_2397 * cbLight._m0[_2346].x) * _2410) * _2411) + _2221;
        _2333 = (((_2397 * cbLight._m0[_2346].y) * _2410) * _2411) + _2223;
        _2335 = (((_2397 * cbLight._m0[_2346].z) * _2410) * _2411) + _2225;
    }
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_1870.y == 0u)
    {
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2486;
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2486;
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2486;
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.x;
        uint _2513 = uint((float(_2501.y) * floor(float(uint(cbSceneParam._m0[85u].y * _774) / _2502))) + floor(float(uint(cbSceneParam._m0[85u].x * _773) / _2502)));
        float _2523 = (log2(_2489 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2524 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        uint _2527 = uint(isnan(14.0) ? _2524 : (isnan(_2524) ? 14.0 : min(_2524, 14.0)));
        uvec4 _2532 = texelFetch(g_lightClusterGridBuffer, int(((_2527 << 2u) + (_2513 << 6u)) >> 2u));
        uint _2533 = _2532.x;
        uint _2534 = _2501.z;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        if (((((1u << ((_2534 >> 4u) & 15u)) + 4294967295u) & _2533) == 0u) || ((_2534 & 240u) == 0u))
        {
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
        }
        else
        {
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            uint _2785 = 0u;
            uint _2794;
            bool _2795;
            for (;;)
            {
                _2794 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                _2795 = _2794 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2795)
                {
                    frontier_phi_61_pred = _2779;
                    frontier_phi_61_pred_1 = _2784;
                    frontier_phi_61_pred_2 = _2783;
                    frontier_phi_61_pred_3 = _2782;
                    frontier_phi_61_pred_4 = _2781;
                    frontier_phi_61_pred_5 = _2780;
                }
                else
                {
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    uint _2909;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2794;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    for (;;)
                    {
                        uint _2913 = uint(findLSB(_2909)) + (_2785 << 5u);
                        uint _2910 = (_2909 + 4294967295u) & _2909;
                        uint _2915 = _2913 * 48u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2935 = (_2913 * 48u) + 4u;
                        vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 3u)).x));
                        uint _2954 = (_2913 * 48u) + 8u;
                        vec3 _2965 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2954)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 2u)).x));
                        float _2969 = _2929.x - _2487;
                        float _2970 = _2929.y - _2488;
                        float _2971 = _2929.z - _2489;
                        float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                        float _2975 = inversesqrt(_2972);
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2979 = dot(vec3(_792, _795, _798), vec3(_2976, _2977, _2978));
                        float _2984 = 1.0 - (_2972 * _2929.w);
                        float _4318 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2985 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _2986 = sqrt(_2972) * _2948.w;
                        float _2989 = 1.39999997615814208984375 / (_2986 + 1.39999997615814208984375);
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2979) + _2990;
                        float _2996 = _2986 * _2986;
                        float _3000 = ((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2985) / ((_2996 * 0.699999988079071044921875) + 1.0);
                        float _3004 = (-0.0) - _2487;
                        float _3005 = (-0.0) - _2488;
                        float _3006 = (-0.0) - _2489;
                        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                        float _3011 = _3010 * _3004;
                        float _3012 = _3010 * _3005;
                        float _3013 = _3010 * _3006;
                        float _3021 = exp2(log2(1.0 / ((_2996 * 3.5) + 5.0)) * 0.25);
                        float _3022 = 1.0 - _852;
                        float _3029 = sqrt(1.0 - ((1.0 - (_3022 * _3022)) * (1.0 - (_3021 * _3021))));
                        float _3030 = _3029 * _3029;
                        float _3031 = _3030 * _3030;
                        float _3032 = _3011 + _2976;
                        float _3033 = _3012 + _2977;
                        float _3034 = _3013 + _2978;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3042 = dot(vec3(_792, _795, _798), vec3(_3011, _3012, _3013));
                        float _4334 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3046 = dot(vec3(_792, _795, _798), vec3(_3038 * _3032, _3038 * _3033, _3038 * _3034));
                        float _4345 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3053 = ((_3049 * _3049) * (_3031 + (-1.0))) + 1.0;
                        float _3054 = _2989 * _3030;
                        float _3055 = _3054 * _3054;
                        float _3058 = ((1.0 - _3055) * _2979) + _3055;
                        float _4356 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3059 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3060 = 1.0 - _3030;
                        float _3070 = (0.5 / (((_3059 * ((_3045 * _3060) + _3030)) + 9.9999999392252902907785028219223e-09) + (((_3059 * _3060) + _3030) * _3045))) * _3059;
                        float _4367 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3081 = (((_3031 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3053 * _3053) * ((_2996 * 2.1991131305694580078125) + 3.141590118408203125))) * _2985;
                        _2838 = (_3000 * _2948.x) + _2906;
                        _2839 = (_3000 * _2948.y) + _2907;
                        _2840 = (_3000 * _2948.z) + _2908;
                        _2835 = (_3081 * _2965.x) + _2903;
                        _2836 = (_3081 * _2965.y) + _2904;
                        _2837 = (_3081 * _2965.z) + _2905;
                        if (_2910 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2910;
                        }
                    }
                    frontier_phi_61_pred = _2835;
                    frontier_phi_61_pred_1 = _2840;
                    frontier_phi_61_pred_2 = _2839;
                    frontier_phi_61_pred_3 = _2838;
                    frontier_phi_61_pred_4 = _2837;
                    frontier_phi_61_pred_5 = _2836;
                }
                _2635 = frontier_phi_61_pred;
                _2645 = frontier_phi_61_pred_1;
                _2643 = frontier_phi_61_pred_2;
                _2641 = frontier_phi_61_pred_3;
                _2639 = frontier_phi_61_pred_4;
                _2637 = frontier_phi_61_pred_5;
                uint _2786 = _2785 + 1u;
                if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2779 = _2635;
                    _2780 = _2637;
                    _2781 = _2639;
                    _2782 = _2641;
                    _2783 = _2643;
                    _2784 = _2645;
                    _2785 = _2786;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
        }
        uvec4 _2648 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2649 = _2648.z;
        uint _2651 = (_2649 >> 8u) & 15u;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        if (((4294967295u << _2651) & _2533) == 0u)
        {
            _2747 = _2634;
            _2749 = _2636;
            _2751 = _2638;
            _2753 = _2640;
            _2755 = _2642;
            _2757 = _2644;
        }
        else
        {
            float _2772 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
            float _2773 = _2772 * _2487;
            float _2774 = _2772 * _2488;
            float _2775 = _2772 * _2489;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2651 < ((_2649 >> 12u) & 15u))
            {
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2886 = _2634;
                float _2887 = _2636;
                float _2888 = _2638;
                float _2889 = _2640;
                float _2890 = _2642;
                float _2891 = _2644;
                uint _2892 = _2651;
                uint _2901;
                bool _2902;
                for (;;)
                {
                    _2901 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2892 << 2u)) >> 2u)).x;
                    _2902 = _2901 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2902)
                    {
                        frontier_phi_67_pred = _2889;
                        frontier_phi_67_pred_1 = _2890;
                        frontier_phi_67_pred_2 = _2891;
                        frontier_phi_67_pred_3 = _2888;
                        frontier_phi_67_pred_4 = _2887;
                        frontier_phi_67_pred_5 = _2886;
                    }
                    else
                    {
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3099 = _2886;
                        float _3100 = _2887;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        float _3103 = _2890;
                        float _3104 = _2891;
                        uint _3105 = _2901;
                        uint _3106;
                        vec4 _3131;
                        float _3132;
                        vec4 _3147;
                        vec3 _3159;
                        vec4 _3174;
                        vec4 _3189;
                        float _3235;
                        bool _3236;
                        for (;;)
                        {
                            uint _3116 = ((_2892 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3105));
                            _3106 = (_3105 + 4294967295u) & _3105;
                            uint _3118 = _3116 * 40u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3132 = _3131.w;
                            uint _3134 = (_3116 * 40u) + 4u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3116 * 40u) + 8u;
                            _3159 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x));
                            uint _3161 = (_3116 * 40u) + 16u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3116 * 40u) + 20u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3116 * 40u) + 24u;
                            vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3210 = (_3116 * 40u) + 28u;
                            vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            _3235 = fma(_2489, _3223.z, fma(_2488, _3223.y, _3223.x * _2487)) + _3223.w;
                            _3236 = !((fma(_2489, _3204.z, fma(_2488, _3204.y, _3204.x * _2487)) + _3204.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3236)
                            {
                                float _3263 = _3131.x - _2487;
                                float _3264 = _3131.y - _2488;
                                float _3265 = _3131.z - _2489;
                                float _3266 = dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265));
                                float _3269 = inversesqrt(_3266);
                                float _3270 = _3269 * _3263;
                                float _3271 = _3269 * _3264;
                                float _3272 = _3269 * _3265;
                                float _3276 = 1.0 - (_3266 / (_3132 * _3132));
                                float _4378 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3277 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3281 = sqrt(_3266) * _3147.w;
                                float _3283 = 1.39999997615814208984375 / (_3281 + 1.39999997615814208984375);
                                float _3284 = _3283 * _3283;
                                float _3287 = ((1.0 - _3284) * dot(vec3(_3270, _3271, _3272), vec3(_792, _795, _798))) + _3284;
                                float _3290 = _3281 * _3281;
                                float _3294 = (fma(_2489, _3174.z, fma(_2488, _3174.y, _3174.x * _2487)) + _3174.w) / _3235;
                                float _3295 = (fma(_2489, _3189.z, fma(_2488, _3189.y, _3189.x * _2487)) + _3189.w) / _3235;
                                float _3299 = 1.0 - dot(vec2(_3294, _3295), vec2(_3294, _3295));
                                float _4394 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3301 = _3300 * (((isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))) * _3277) / ((_3290 * 0.699999988079071044921875) + 1.0));
                                float _3313 = exp2(log2(1.0 / ((_3290 * 3.5) + 5.0)) * 0.25);
                                float _3314 = 1.0 - _852;
                                float _3321 = sqrt(1.0 - ((1.0 - (_3314 * _3314)) * (1.0 - (_3313 * _3313))));
                                float _3322 = _3321 * _3321;
                                float _3323 = _3322 * _3322;
                                float _3324 = _3270 - _2773;
                                float _3325 = _3271 - _2774;
                                float _3326 = _3272 - _2775;
                                float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                                float _3334 = dot(vec3(_792, _795, _798), vec3((-0.0) - _2773, (-0.0) - _2774, (-0.0) - _2775));
                                float _4405 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3337 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3338 = dot(vec3(_792, _795, _798), vec3(_3330 * _3324, _3330 * _3325, _3330 * _3326));
                                float _4416 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3345 = ((_3341 * _3341) * (_3323 + (-1.0))) + 1.0;
                                float _3346 = _3283 * _3322;
                                float _3347 = _3346 * _3346;
                                float _3353 = ((1.0 - _3347) * dot(vec3(_792, _795, _798), vec3(_3270, _3271, _3272))) + _3347;
                                float _4427 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3355 = 1.0 - _3322;
                                float _3365 = (0.5 / (((_3354 * ((_3337 * _3355) + _3322)) + 9.9999999392252902907785028219223e-09) + (((_3354 * _3355) + _3322) * _3337))) * _3354;
                                float _4438 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3375 = (_3300 * _3277) * (((_3323 * 3.1415927410125732421875) * (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) / ((_3345 * _3345) * ((_3290 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3375 * _3159.x;
                                frontier_phi_73_pred_1 = _3375 * _3159.y;
                                frontier_phi_73_pred_2 = _3301 * _3147.z;
                                frontier_phi_73_pred_3 = _3301 * _3147.y;
                                frontier_phi_73_pred_4 = _3301 * _3147.x;
                                frontier_phi_73_pred_5 = _3375 * _3159.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3379 = frontier_phi_73_pred;
                            _3380 = frontier_phi_73_pred_1;
                            _3384 = frontier_phi_73_pred_2;
                            _3383 = frontier_phi_73_pred_3;
                            _3382 = frontier_phi_73_pred_4;
                            _3381 = frontier_phi_73_pred_5;
                            _3089 = _3382 + _3102;
                            _3090 = _3383 + _3103;
                            _3091 = _3384 + _3104;
                            _3086 = _3379 + _3099;
                            _3087 = _3380 + _3100;
                            _3088 = _3381 + _3101;
                            if (_3106 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3106;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3089;
                        frontier_phi_67_pred_1 = _3090;
                        frontier_phi_67_pred_2 = _3091;
                        frontier_phi_67_pred_3 = _3088;
                        frontier_phi_67_pred_4 = _3087;
                        frontier_phi_67_pred_5 = _3086;
                    }
                    _2754 = frontier_phi_67_pred;
                    _2756 = frontier_phi_67_pred_1;
                    _2758 = frontier_phi_67_pred_2;
                    _2752 = frontier_phi_67_pred_3;
                    _2750 = frontier_phi_67_pred_4;
                    _2748 = frontier_phi_67_pred_5;
                    uint _2893 = _2892 + 1u;
                    if (_2893 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2886 = _2748;
                        _2887 = _2750;
                        _2888 = _2752;
                        _2889 = _2754;
                        _2890 = _2756;
                        _2891 = _2758;
                        _2892 = _2893;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2756;
                frontier_phi_55_56_ladder_1 = _2758;
                frontier_phi_55_56_ladder_2 = _2754;
                frontier_phi_55_56_ladder_3 = _2752;
                frontier_phi_55_56_ladder_4 = _2750;
                frontier_phi_55_56_ladder_5 = _2748;
            }
            else
            {
                frontier_phi_55_56_ladder = _2642;
                frontier_phi_55_56_ladder_1 = _2644;
                frontier_phi_55_56_ladder_2 = _2640;
                frontier_phi_55_56_ladder_3 = _2638;
                frontier_phi_55_56_ladder_4 = _2636;
                frontier_phi_55_56_ladder_5 = _2634;
            }
            _2747 = frontier_phi_55_56_ladder_5;
            _2749 = frontier_phi_55_56_ladder_4;
            _2751 = frontier_phi_55_56_ladder_3;
            _2753 = frontier_phi_55_56_ladder_2;
            _2755 = frontier_phi_55_56_ladder;
            _2757 = frontier_phi_55_56_ladder_1;
        }
        float _2762 = isnan(1.0) ? _836 : (isnan(_836) ? 1.0 : min(_836, 1.0));
        _2546 = (_2762 * _2753) + _2001;
        _2548 = (_2762 * _2755) + _2003;
        _2550 = (_2762 * _2757) + _2005;
        _2552 = ((_2747 * 0.039999999105930328369140625) * _2762) + _2331;
        _2554 = ((_2749 * 0.039999999105930328369140625) * _2762) + _2333;
        _2556 = ((_2751 * 0.039999999105930328369140625) * _2762) + _2335;
    }
    else
    {
        _2546 = _2001;
        _2548 = _2003;
        _2550 = _2005;
        _2552 = _2331;
        _2554 = _2333;
        _2556 = _2335;
    }
    float _4454 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4465 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4476 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    uint _2576 = _262 + 6u;
    float _2584 = _773 / cbSceneParam._m0[86u].x;
    float _2585 = _774 / cbSceneParam._m0[86u].y;
    vec4 _2599 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, (log2((isnan(cbSceneParam._m0[77u].w) ? _706 : (isnan(_706) ? cbSceneParam._m0[77u].w : min(_706, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2601 = _2599.x;
    float _2602 = _2599.y;
    float _2603 = _2599.z;
    float _2604 = _2599.w;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    if (_706 > cbSceneParam._m0[78u].w)
    {
        float _2659 = isnan(_706) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _706 : min(cbSceneParam._m0[80u].w, _706));
        float _2660 = _2659 / _706;
        float _2671 = _2660 * _758;
        float _2672 = _759 * _2660;
        float _2673 = (-0.0) - _2672;
        float _2675 = _2660 * _760;
        float _2677 = (cbSceneParam._m0[77u].w * _2673) / _2659;
        float _2678 = _2677 + cbSceneParam._m0[79u].w;
        float _2679 = cbSceneParam._m0[79u].w - _2672;
        float _2685 = sqrt(((_2671 * _2671) + (_2672 * _2672)) + (_2675 * _2675));
        float _2688 = (1.0 - (cbSceneParam._m0[77u].w / _2659)) * _2685;
        float _2693 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2695 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2848;
        if (abs((_2673 - _2677) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2848 = ((((_2678 > 0.0) ? exp2(_2693 * _2678) : (2.0 - exp2(_2695 * _2678))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2688;
        }
        else
        {
            float _2808 = 1.0 / cbSceneParam._m0[80u].x;
            float _2809 = isnan(_2679) ? _2678 : (isnan(_2678) ? _2679 : max(_2678, _2679));
            float _2810 = isnan(_2679) ? _2678 : (isnan(_2678) ? _2679 : min(_2678, _2679));
            float _2819 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : min(_2809, 0.0));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            _2848 = ((abs(_2685 / _2673) * cbSceneParam._m0[80u].y) * ((((_2819 - _2820) * 2.0) - ((exp2(_2693 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0)))) - exp2(_2693 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))))) * _2808)) - ((exp2(_2695 * _2819) - exp2(_2695 * _2820)) * _2808))) + (_2688 * cbSceneParam._m0[80u].z);
        }
        vec4 _2850 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, 1.0), 0.0);
        float _2859 = exp2((_2848 * (-1.44269502162933349609375)) * (1.0 - _2850.w));
        float _2860 = log2(_2859);
        float _2876 = log2(_2604);
        _2697 = (exp2(_2876 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].x)) * _2850.x) / cbSceneParam._m0[78u].x)) + _2601;
        _2699 = (exp2(_2876 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].y)) * _2850.y) / cbSceneParam._m0[78u].y)) + _2602;
        _2701 = (exp2(_2876 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].z)) * _2850.z) / cbSceneParam._m0[78u].z)) + _2603;
        _2703 = _2859 * _2604;
    }
    else
    {
        _2697 = _2601;
        _2699 = _2602;
        _2701 = _2603;
        _2703 = _2604;
    }
    float _2715 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2716 = _2715 == 3.0;
    float _2717 = log2(_2703);
    float _2724 = exp2(_2717 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2546 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _836))) + ((_2552 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _2725 = exp2(_2717 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2548 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _836))) + ((_2554 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _2726 = exp2(_2717 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2550 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _836))) + ((_2556 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _2735 = (_2715 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2735 * (_2716 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2697)));
    SV_Target.y = _2735 * (_2716 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2699)));
    SV_Target.z = _2735 * (_2716 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2701)));
    SV_Target.w = cbInstanceData._m0[_2576].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2576].w;
}


