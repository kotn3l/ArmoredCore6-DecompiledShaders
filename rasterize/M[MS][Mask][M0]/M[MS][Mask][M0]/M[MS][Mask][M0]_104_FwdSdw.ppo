#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1351;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3939 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3950 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3961 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _453 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _470 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _401.x) * 2.0) - ((((_441 - _453) * cbMtdParam._m0[24u].z) + _453) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3972 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _478 = (_471 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _479 = (_471 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _480 = (_471 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _519 = _517.x;
    float _529 = dot(vec4(_519, _517.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _543 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _401.y) * 2.0) - ((((_519 - _529) * cbMtdParam._m0[24u].z) + _529) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3983 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _551 = (_544 * ((_497.x * cbMtdParam._m0[13u].x) - _478)) + _478;
    float _552 = (_544 * ((_497.y * cbMtdParam._m0[13u].y) - _479)) + _479;
    float _553 = (_544 * ((_497.z * cbMtdParam._m0[13u].z) - _480)) + _480;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _293) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _294) + cbTextureTilingScale._m0[24u].w));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _590 = _588.x;
    float _600 = dot(vec4(_590, _588.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _612 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _401.z) * 2.0) - ((((_590 - _600) * cbMtdParam._m0[24u].z) + _600) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3994 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _623 = (_330.x * cbMtdParam._m0[9u].x) * ((_613 * ((_571.x * cbMtdParam._m0[14u].x) - _551)) + _551);
    float _624 = (_330.y * cbMtdParam._m0[9u].y) * ((_613 * ((_571.y * cbMtdParam._m0[14u].y) - _552)) + _552);
    float _625 = (_330.z * cbMtdParam._m0[9u].z) * ((_613 * ((_571.z * cbMtdParam._m0[14u].z) - _553)) + _553);
    float _629 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _623;
    float _632 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _624;
    float _635 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _625;
    float _643 = (((_623 - _629) * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) + _629) * 4.55000019073486328125;
    float _645 = (((_624 - _632) * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) + _632) * 4.55000019073486328125;
    float _647 = (((_625 - _635) * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) + _635) * 4.55000019073486328125;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _701 = _699.x;
    float _702 = _699.y;
    float _703 = _699.z;
    float _710 = ((_682.x - _701) * _471) + _701;
    float _711 = ((_682.y - _702) * _471) + _702;
    float _712 = ((_682.z - _703) * _471) + _703;
    vec4 _724 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _735 = ((_724.x - _710) * _544) + _710;
    float _736 = ((_724.y - _711) * _544) + _711;
    float _737 = ((_724.z - _712) * _544) + _712;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _293) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _294) + cbTextureTilingScale._m0[23u].w));
    float _762 = ((_749.z - _737) * _613) + _737;
    float _765 = ((((_749.x - _735) * _613) + _735) * 2.0) + (-1.0);
    float _766 = ((((_749.y - _736) * _613) + _736) * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _4005 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _772 = sqrt(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))));
    vec4 _792 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _804 = (_765 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_659.x * 2.0) + (-1.0)))) + (((_792.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _805 = (_766 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_659.y * 2.0) + (-1.0)))) + (((_792.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _810 = (((_659.z - _762) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _762;
    float _814 = ((_792.z - _810) * cbMtdParam._m0[19u].w) + _810;
    float _816 = cbMtdParam._m0[22u].x + _792.w;
    float _819 = fma(_772, _240 * NORMAL.x, fma(_805, _247 * TANGENT.x, (_233 * _225) * _804));
    float _822 = fma(_772, _240 * NORMAL.y, fma(_805, _247 * TANGENT.y, (_233 * _226) * _804));
    float _825 = fma(_772, _240 * NORMAL.z, fma(_805, _247 * TANGENT.z, (_233 * _227) * _804));
    float _829 = inversesqrt(dot(vec3(_819, _822, _825), vec3(_819, _822, _825)));
    float _830 = _829 * _819;
    float _831 = _829 * _822;
    float _832 = _829 * _825;
    float _4016 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _833 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4038 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4049 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4060 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _851 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _902 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _892);
    float _903 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _892);
    float _904 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _892);
    float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
    float _909 = _902 * _908;
    float _910 = _903 * _908;
    float _911 = _904 * _908;
    float _917 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _918 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _936 = fma(_832, cbSceneParam._m0[5u].z, fma(_831, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _830));
    float _939 = fma(_832, cbSceneParam._m0[6u].z, fma(_831, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _830));
    float _942 = fma(_832, cbSceneParam._m0[7u].z, fma(_831, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _830));
    uint _956 = (_274 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _962 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_956].x;
    float _963 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_956].y;
    float _964 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_956].z;
    float _4071 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    vec4 _976 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _917, cbSceneParam._m0[86u].y * _918));
    float _980 = ((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * TEXCOORD_5.w) * _976.x;
    float _981 = dot(vec3(_830, _831, _832), vec3(_909, _910, _911));
    float _984 = _981 * 2.0;
    float _988 = (_984 * _830) - _909;
    float _989 = (_984 * _831) - _910;
    float _990 = (_984 * _832) - _911;
    float _994 = abs(dot(vec3(_909, _910, _911), vec3(_830, _831, _832)));
    float _4104 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _996 = sqrt(_833);
    float _1009 = exp2((_996 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_996 * 3.0));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1350;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1075 = fma(_1049, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041));
        float _1079 = fma(_1049, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041));
        float _1083 = fma(_1049, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041));
        float _1108 = _1041 + _830;
        float _1109 = _1045 + _831;
        float _1110 = _1049 + _832;
        float _1120 = fma(_1110, cbModelParam._m0[26u].z, fma(_1109, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108)) - _1075;
        float _1121 = fma(_1110, cbModelParam._m0[27u].z, fma(_1109, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108)) - _1079;
        float _1122 = fma(_1110, cbModelParam._m0[28u].z, fma(_1109, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108)) - _1083;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1075 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1079 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[34u].z) + ((((((_1083 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1178 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1144.x + (-0.5));
        float _1180 = _1178 * (_1144.y + (-0.5));
        float _1181 = _1178 * (_1144.z + (-0.5));
        float _1188 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1151.x + (-0.5));
        float _1190 = _1188 * (_1151.y + (-0.5));
        float _1191 = _1188 * (_1151.z + (-0.5));
        float _1198 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1158.x + (-0.5));
        float _1200 = _1198 * (_1158.y + (-0.5));
        float _1201 = _1198 * (_1158.z + (-0.5));
        float _1208 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1165.x + (-0.5));
        float _1210 = _1208 * (_1165.y + (-0.5));
        float _1211 = _1208 * (_1165.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1232 = (dot(vec3(_830, _831, _832), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1242 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _4152 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1244 + 1.0))) + _1249) * _1212;
        float _1259 = _1180 * 0.5;
        float _1260 = _1190 * 0.5;
        float _1261 = _1200 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_830, _831, _832), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4185 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1286 + 1.0))) + _1291) * _1213;
        float _1301 = _1181 * 0.5;
        float _1302 = _1191 * 0.5;
        float _1303 = _1201 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_830, _831, _832), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4218 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1328 + 1.0))) + _1333) * _1214;
        _1350 = _1181;
        _1352 = _1180;
        _1353 = _1179;
        _1354 = _1191;
        _1355 = _1190;
        _1356 = _1189;
        _1357 = _1201;
        _1358 = _1200;
        _1359 = _1199;
        _1360 = _1214;
        _1361 = _1213;
        _1362 = _1212;
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1351;
        _1352 = _1351;
        _1353 = _1351;
        _1354 = _1351;
        _1355 = _1351;
        _1356 = _1351;
        _1357 = _1351;
        _1358 = _1351;
        _1359 = _1351;
        _1360 = _1351;
        _1361 = _1351;
        _1362 = _1351;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1388 = fma(_1049, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041));
        float _1392 = fma(_1049, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041));
        float _1396 = fma(_1049, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041));
        float _1419 = _1041 + _830;
        float _1420 = _1045 + _831;
        float _1421 = _1049 + _832;
        float _1431 = fma(_1421, cbModelParam._m0[30u].z, fma(_1420, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1419)) - _1388;
        float _1432 = fma(_1421, cbModelParam._m0[31u].z, fma(_1420, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1419)) - _1392;
        float _1433 = fma(_1421, cbModelParam._m0[32u].z, fma(_1420, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1419)) - _1396;
        float _1437 = inversesqrt(dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433)));
        float _1450 = ((_1437 * _1431) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1388 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1437 * _1432) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1392 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1437 * _1433) / cbModelParam._m0[35u].z) + ((((((_1396 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        float _1487 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1454.x + (-0.5));
        float _1489 = _1487 * (_1454.y + (-0.5));
        float _1490 = _1487 * (_1454.z + (-0.5));
        float _1497 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1461.x + (-0.5));
        float _1499 = _1497 * (_1461.y + (-0.5));
        float _1500 = _1497 * (_1461.z + (-0.5));
        float _1507 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1468.x + (-0.5));
        float _1509 = _1507 * (_1468.y + (-0.5));
        float _1510 = _1507 * (_1468.z + (-0.5));
        float _1517 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1475.x + (-0.5));
        float _1519 = _1517 * (_1475.y + (-0.5));
        float _1520 = _1517 * (_1475.z + (-0.5));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = _1488 * 0.5;
        float _1525 = _1498 * 0.5;
        float _1526 = _1508 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_830, _831, _832), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4281 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1551 + 1.0))) + _1556) * _1521;
        float _1566 = _1489 * 0.5;
        float _1567 = _1499 * 0.5;
        float _1568 = _1509 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_830, _831, _832), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4314 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1593 + 1.0))) + _1598) * _1522;
        float _1608 = _1490 * 0.5;
        float _1609 = _1500 * 0.5;
        float _1610 = _1510 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_830, _831, _832), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4347 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1635 + 1.0))) + _1640) * _1523;
        _1657 = _1490;
        _1658 = _1489;
        _1659 = _1488;
        _1660 = _1500;
        _1661 = _1499;
        _1662 = _1498;
        _1663 = _1510;
        _1664 = _1509;
        _1665 = _1508;
        _1666 = _1523;
        _1667 = _1522;
        _1668 = _1521;
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
    }
    else
    {
        _1657 = _1351;
        _1658 = _1351;
        _1659 = _1351;
        _1660 = _1351;
        _1661 = _1351;
        _1662 = _1351;
        _1663 = _1351;
        _1664 = _1351;
        _1665 = _1351;
        _1666 = _1351;
        _1667 = _1351;
        _1668 = _1351;
        _1669 = 0.0;
        _1670 = 0.0;
        _1671 = 0.0;
    }
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1363)) + _1363;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1364)) + _1364;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1365)) + _1365;
    float _1704 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1681));
    float _1725 = _988 * 0.5;
    float _1726 = _989 * 0.5;
    float _1727 = _990 * 0.5;
    float _1728 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1731 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1734 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1768;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1741 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1350, _1354, _1357, _1360));
        float _1745 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1749 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1756 = dot(vec4(cbModelParam._m0[39u]), vec4(_1725, _1726, _1727, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1779;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1770 = dot(vec4(cbModelParam._m0[40u]), vec4(_1725, _1726, _1727, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1770) ? 0.0 : (isnan(0.0) ? _1770 : max(0.0, _1770))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1783 = (_1779 * cbModelParam._m0[1u].x) + (_1768 * (1.0 - cbModelParam._m0[1u].x));
    float _1793 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _833);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1793 : min(cbModelParam._m0[25u].z, _1793));
    float _1875;
    float _1877;
    float _1879;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1842 = fma(_1049, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041)) + cbModelParam._m0[13u].w;
        float _1846 = fma(_1049, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041)) + cbModelParam._m0[14u].w;
        float _1850 = fma(_1049, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041)) + cbModelParam._m0[15u].w;
        float _1853 = fma(_990, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988));
        float _1856 = fma(_990, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988));
        float _1859 = fma(_990, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988));
        float _1887;
        if (_1853 > 0.0)
        {
            _1887 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1887 = frontier_phi_14_12_ladder;
        }
        float _2058;
        if (_1856 > 0.0)
        {
            _2058 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2058 = frontier_phi_23_19_ladder;
        }
        float _2353;
        if (_1859 > 0.0)
        {
            _2353 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2353 = frontier_phi_35_30_ladder;
        }
        float _2355 = isnan(_2058) ? _1887 : (isnan(_1887) ? _2058 : min(_1887, _2058));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1853) + _1842;
        float _2361 = (_2356 * _1856) + _1846;
        float _2362 = (_2356 * _1859) + _1850;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2363;
        float _2367 = _2363 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 > _2367) || ((_2361 < _2365) || ((_2360 < _2365) || (_2360 > _2367))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2362, cbModelParam._m0[9u].z, fma(_2361, cbModelParam._m0[9u].y, _2360 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2362, cbModelParam._m0[10u].z, fma(_2361, cbModelParam._m0[10u].y, _2360 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2362, cbModelParam._m0[11u].z, fma(_2361, cbModelParam._m0[11u].y, _2360 * cbModelParam._m0[11u].x))), _1794);
            frontier_phi_13_35_ladder = _2507.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2507.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2507.x * cbModelParam._m0[1u].y;
        }
        _1875 = frontier_phi_13_35_ladder_2;
        _1877 = frontier_phi_13_35_ladder_1;
        _1879 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1863 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_988, _989, _990), _1794);
        _1875 = _1863.x * cbModelParam._m0[1u].y;
        _1877 = _1863.y * cbModelParam._m0[1u].y;
        _1879 = _1863.z * cbModelParam._m0[1u].y;
    }
    float _1883 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _833);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1883 : min(cbModelParam._m0[25u].w, _1883));
    float _1975;
    float _1977;
    float _1979;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1939 = fma(_1049, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041)) + cbModelParam._m0[21u].w;
        float _1943 = fma(_1049, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041)) + cbModelParam._m0[22u].w;
        float _1947 = fma(_1049, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041)) + cbModelParam._m0[23u].w;
        float _1950 = fma(_990, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988));
        float _1953 = fma(_990, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988));
        float _1956 = fma(_990, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988));
        float _2063;
        if (_1950 > 0.0)
        {
            _2063 = abs((1.0 - _1939) / _1950);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1939 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2063 = frontier_phi_25_21_ladder;
        }
        float _2380;
        if (_1953 > 0.0)
        {
            _2380 = abs((1.0 - _1943) / _1953);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1943 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2380 = frontier_phi_37_32_ladder;
        }
        float _2707;
        if (_1956 > 0.0)
        {
            _2707 = abs((1.0 - _1947) / _1956);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1947 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2707 = frontier_phi_47_44_ladder;
        }
        float _2709 = isnan(_2380) ? _2063 : (isnan(_2063) ? _2380 : min(_2063, _2380));
        float _2710 = isnan(_2707) ? _2709 : (isnan(_2709) ? _2707 : min(_2709, _2707));
        float _2714 = (_2710 * _1950) + _1939;
        float _2715 = (_2710 * _1953) + _1943;
        float _2716 = (_2710 * _1956) + _1947;
        float _2717 = _2710 * 9.9999997473787516355514526367188e-05;
        float _2718 = (-1.0) - _2717;
        float _2720 = _2717 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2716 > _2720) || ((_2716 < _2718) || ((_2715 > _2720) || ((_2715 < _2718) || ((_2714 < _2718) || (_2714 > _2720))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2716, cbModelParam._m0[17u].z, fma(_2715, cbModelParam._m0[17u].y, _2714 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2716, cbModelParam._m0[18u].z, fma(_2715, cbModelParam._m0[18u].y, _2714 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2716, cbModelParam._m0[19u].z, fma(_2715, cbModelParam._m0[19u].y, _2714 * cbModelParam._m0[19u].x))), _1884);
            frontier_phi_22_47_ladder = _2834.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2834.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2834.x * cbModelParam._m0[1u].z;
        }
        _1975 = frontier_phi_22_47_ladder_2;
        _1977 = frontier_phi_22_47_ladder_1;
        _1979 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_988, _989, _990), _1884);
        _1975 = _1959.x * cbModelParam._m0[1u].z;
        _1977 = _1959.y * cbModelParam._m0[1u].z;
        _1979 = _1959.z * cbModelParam._m0[1u].z;
    }
    float _1991 = ((((1.0 - _1009) * ((_996 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1009 * _996)) * _980;
    float _1992 = _1991 * ((cbModelParam._m0[1u].w * (_1975 - _1875)) + _1875);
    float _1993 = _1991 * ((cbModelParam._m0[1u].w * (_1977 - _1877)) + _1877);
    float _1994 = _1991 * ((cbModelParam._m0[1u].w * (_1979 - _1879)) + _1879);
    float _1997 = fma(_1994, cbSceneParam._m0[89u].z, fma(_1993, cbSceneParam._m0[89u].y, _1992 * cbSceneParam._m0[89u].x));
    float _2000 = fma(_1994, cbSceneParam._m0[90u].z, fma(_1993, cbSceneParam._m0[90u].y, _1992 * cbSceneParam._m0[90u].x));
    float _2003 = fma(_1994, cbSceneParam._m0[91u].z, fma(_1993, cbSceneParam._m0[91u].y, _1992 * cbSceneParam._m0[91u].x));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2050 = _2037 / _2049;
    float _2051 = _2041 / _2049;
    float _2052 = _2045 / _2049;
    float _2199;
    float _2200;
    float _2201;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2079 = ((uint(_2052 > cbSceneParam._m0[59u].y) + uint(_2052 > cbSceneParam._m0[59u].x)) + uint(_2052 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2080 = _2079 + 43u;
        uint _2088 = _2079 + 44u;
        uint _2096 = _2079 + 45u;
        uint _2104 = _2079 + 46u;
        float _2115 = fma(_2049, cbSceneParam._m0[_2080].w, fma(_2045, cbSceneParam._m0[_2080].z, fma(_2041, cbSceneParam._m0[_2080].y, _2037 * cbSceneParam._m0[_2080].x)));
        float _2119 = fma(_2049, cbSceneParam._m0[_2088].w, fma(_2045, cbSceneParam._m0[_2088].z, fma(_2041, cbSceneParam._m0[_2088].y, _2037 * cbSceneParam._m0[_2088].x)));
        float _2127 = fma(_2049, cbSceneParam._m0[_2104].w, fma(_2045, cbSceneParam._m0[_2104].z, fma(_2041, cbSceneParam._m0[_2104].y, _2037 * cbSceneParam._m0[_2104].x)));
        float _2132 = cbSceneParam._m0[33u].z * _2127;
        float _2134 = cbSceneParam._m0[33u].w * _2127;
        float _2137 = fma(_2049, cbSceneParam._m0[_2096].w, fma(_2045, cbSceneParam._m0[_2096].z, fma(_2041, cbSceneParam._m0[_2096].y, _2037 * cbSceneParam._m0[_2096].x))) / _2127;
        float _2185 = (cbSceneParam._m0[33u].x - sqrt(((_2051 * _2051) + (_2050 * _2050)) + (_2052 * _2052))) * cbSceneParam._m0[33u].y;
        float _4473 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2192 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 + _2115) / _2127, (_2134 + _2119) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2134 + _2115) / _2127, (_2119 - _2132) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 - _2132) / _2127, (_2119 - _2134) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 - _2134) / _2127, (_2132 + _2119) / _2127), _2137), 0.0)).x), vec4(0.25)));
        _2199 = 1.0 - (_2192 * cbSceneParam._m0[34u].x);
        _2200 = 1.0 - (_2192 * cbSceneParam._m0[34u].y);
        _2201 = 1.0 - (_2192 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2199 = 1.0;
        _2200 = 1.0;
        _2201 = 1.0;
    }
    float _2265;
    float _2267;
    float _2269;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2253 = fma(_2049, cbSceneParam._m0[63u].w, fma(_2045, cbSceneParam._m0[63u].z, fma(_2041, cbSceneParam._m0[63u].y, _2037 * cbSceneParam._m0[63u].x)));
        float _2254 = fma(_2049, cbSceneParam._m0[60u].w, fma(_2045, cbSceneParam._m0[60u].z, fma(_2041, cbSceneParam._m0[60u].y, _2037 * cbSceneParam._m0[60u].x))) / _2253;
        float _2255 = fma(_2049, cbSceneParam._m0[61u].w, fma(_2045, cbSceneParam._m0[61u].z, fma(_2041, cbSceneParam._m0[61u].y, _2037 * cbSceneParam._m0[61u].x))) / _2253;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2254 >= cbSceneParam._m0[64u].x) && (_2255 >= cbSceneParam._m0[64u].y)) && (_2254 <= cbSceneParam._m0[64u].z)) && (_2255 <= cbSceneParam._m0[64u].w))
        {
            float _2393 = fma(_2049, cbSceneParam._m0[62u].w, fma(_2045, cbSceneParam._m0[62u].z, fma(_2041, cbSceneParam._m0[62u].y, _2037 * cbSceneParam._m0[62u].x))) / _2253;
            float _2397 = isnan(cbSceneParam._m0[41u].w) ? _2393 : (isnan(_2393) ? cbSceneParam._m0[41u].w : max(_2393, cbSceneParam._m0[41u].w));
            float _2440 = (cbSceneParam._m0[33u].x - sqrt(((_2051 * _2051) + (_2050 * _2050)) + (_2052 * _2052))) * cbSceneParam._m0[33u].y;
            float _4489 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
            float _2447 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2254, cbSceneParam._m0[33u].w + _2255), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2254, _2255 - cbSceneParam._m0[33u].z), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2254 - cbSceneParam._m0[33u].z, _2255 - cbSceneParam._m0[33u].w), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2254 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2255), _2397), 0.0)).x), vec4(0.25)));
            float _2451 = 1.0 - (_2447 * cbSceneParam._m0[34u].x);
            float _2452 = 1.0 - (_2447 * cbSceneParam._m0[34u].y);
            float _2453 = 1.0 - (_2447 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2453) ? _2201 : (isnan(_2201) ? _2453 : min(_2201, _2453));
            frontier_phi_34_33_ladder_1 = isnan(_2452) ? _2200 : (isnan(_2200) ? _2452 : min(_2200, _2452));
            frontier_phi_34_33_ladder_2 = isnan(_2451) ? _2199 : (isnan(_2199) ? _2451 : min(_2199, _2451));
        }
        else
        {
            frontier_phi_34_33_ladder = _2201;
            frontier_phi_34_33_ladder_1 = _2200;
            frontier_phi_34_33_ladder_2 = _2199;
        }
        _2265 = frontier_phi_34_33_ladder_2;
        _2267 = frontier_phi_34_33_ladder_1;
        _2269 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2265 = _2199;
        _2267 = _2200;
        _2269 = _2201;
    }
    uvec4 _2274 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2276 = _2274.x * 14u;
    uint _2277 = _2276 + 13u;
    float _2284 = _980 + (-1.0);
    float _2289 = (cbLight._m0[_2277].x * _2284) + 1.0;
    float _2290 = (cbLight._m0[_2277].y * _2284) + 1.0;
    float _2291 = (cbLight._m0[_2277].z * _2284) + 1.0;
    float _2292 = (cbLight._m0[_2277].w * _2284) + 1.0;
    uint _2293 = _2276 + 5u;
    float _2299 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
    uint _2303 = _2276 + 4u;
    float _2312 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2316 = _2276 | 1u;
    float _2327 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_830, _831, _832));
    float _2330 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_830, _831, _832));
    float _4525 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _4536 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2335 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * 0.3183098733425140380859375;
    float _2337 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * 0.3183098733425140380859375;
    float _2344 = ((cbLight._m0[_2293].x * _2299) * _2337) + (((cbLight._m0[_2303].x * _2265) * _2312) * _2335);
    float _2345 = ((_2299 * cbLight._m0[_2293].y) * _2337) + (((cbLight._m0[_2303].y * _2267) * _2312) * _2335);
    float _2346 = ((_2299 * cbLight._m0[_2293].z) * _2337) + (((cbLight._m0[_2303].z * _2269) * _2312) * _2335);
    uvec4 _2350 = floatBitsToUint(cbLight._m0[_2276 + 12u]);
    bool _2352 = _2350.x == 0u;
    float _2454;
    float _2456;
    float _2458;
    if (_2352)
    {
        _2454 = _2344;
        _2456 = _2345;
        _2458 = _2346;
    }
    else
    {
        uint _2462 = _2276 + 6u;
        float _2478 = (dot(vec3(cbLight._m0[_2276 + 2u].xyz), vec3(_830, _831, _832)) * 0.5) + 0.5;
        float _2479 = _2478 * _2478;
        float _4547 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2480 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2481 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2454 = (((cbLight._m0[_2462].x * 0.3183098733425140380859375) * _2480) * _2481) + _2344;
        _2456 = (((cbLight._m0[_2462].y * 0.3183098733425140380859375) * _2480) * _2481) + _2345;
        _2458 = (((cbLight._m0[_2462].z * 0.3183098733425140380859375) * _2480) * _2481) + _2346;
    }
    bool _2461 = _2350.y == 0u;
    float _2516;
    float _2518;
    float _2520;
    if (_2461)
    {
        _2516 = _2454;
        _2518 = _2456;
        _2520 = _2458;
    }
    else
    {
        uint _2678 = _2276 + 7u;
        float _2694 = (dot(vec3(cbLight._m0[_2276 + 3u].xyz), vec3(_830, _831, _832)) * 0.5) + 0.5;
        float _2695 = _2694 * _2694;
        float _4563 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2696 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2697 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2516 = (((cbLight._m0[_2678].x * 0.3183098733425140380859375) * _2696) * _2697) + _2454;
        _2518 = (((cbLight._m0[_2678].y * 0.3183098733425140380859375) * _2696) * _2697) + _2456;
        _2520 = (((cbLight._m0[_2678].z * 0.3183098733425140380859375) * _2696) * _2697) + _2458;
    }
    uint _2523 = _2276 + 8u;
    float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _833) * 0.949999988079071044921875);
    float _2537 = _2536 * _2536;
    float _2538 = cbLight._m0[_2276].x + _909;
    float _2539 = cbLight._m0[_2276].y + _910;
    float _2540 = cbLight._m0[_2276].z + _911;
    float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
    float _2545 = _2544 * _2538;
    float _2546 = _2544 * _2539;
    float _2547 = _2544 * _2540;
    float _2548 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2276].xyz));
    float _4579 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _4590 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2552 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2553 = dot(vec3(_830, _831, _832), vec3(_2545, _2546, _2547));
    float _4601 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2557 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2545, _2546, _2547));
    float _4612 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2561 = _2537 * _2537;
    float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
    float _2576 = (exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2577 = 1.0 - _2537;
    float _2588 = (0.5 / (((_2552 * ((_2551 * _2577) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2577) + _2537) * _2551))) * _2551;
    float _4623 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2590 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
    uint _2604 = _2276 + 9u;
    float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _833) * 0.949999988079071044921875);
    float _2616 = _2615 * _2615;
    float _2617 = cbLight._m0[_2316].x + _909;
    float _2618 = cbLight._m0[_2316].y + _910;
    float _2619 = cbLight._m0[_2316].z + _911;
    float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
    float _2624 = _2623 * _2617;
    float _2625 = _2623 * _2618;
    float _2626 = _2623 * _2619;
    float _2627 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2316].xyz));
    float _4634 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2631 = dot(vec3(_830, _831, _832), vec3(_2624, _2625, _2626));
    float _4645 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2635 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2624, _2625, _2626));
    float _4656 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2639 = _2616 * _2616;
    float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
    float _2652 = (exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2653 = 1.0 - _2616;
    float _2663 = (0.5 / (((_2552 * ((_2630 * _2653) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2653) + _2616) * _2630))) * _2630;
    float _4667 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2665 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
    float _2675 = (((_2652 * cbLight._m0[_2604].x) * _2665) * _2299) + ((((cbLight._m0[_2523].x * _2265) * _2576) * _2590) * _2312);
    float _2676 = (((_2652 * cbLight._m0[_2604].y) * _2665) * _2299) + ((((cbLight._m0[_2523].y * _2267) * _2576) * _2590) * _2312);
    float _2677 = (((_2652 * cbLight._m0[_2604].z) * _2665) * _2299) + ((((cbLight._m0[_2523].z * _2269) * _2576) * _2590) * _2312);
    float _2733;
    float _2735;
    float _2737;
    if (_2352)
    {
        _2733 = _2675;
        _2735 = _2676;
        _2737 = _2677;
    }
    else
    {
        uint _2739 = _2276 + 2u;
        uint _2743 = _2276 + 10u;
        float _2757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2739].w)) * _833) * 0.949999988079071044921875);
        float _2758 = _2757 * _2757;
        float _2759 = cbLight._m0[_2739].x + _909;
        float _2760 = cbLight._m0[_2739].y + _910;
        float _2761 = cbLight._m0[_2739].z + _911;
        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
        float _2766 = _2765 * _2759;
        float _2767 = _2765 * _2760;
        float _2768 = _2765 * _2761;
        float _2769 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2739].xyz));
        float _4678 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2773 = dot(vec3(_830, _831, _832), vec3(_2766, _2767, _2768));
        float _4689 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2777 = dot(vec3(cbLight._m0[_2739].xyz), vec3(_2766, _2767, _2768));
        float _4700 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2781 = _2758 * _2758;
        float _2785 = ((_2776 * _2776) * (_2781 + (-1.0))) + 1.0;
        float _2794 = (exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2795 = 1.0 - _2758;
        float _2805 = (0.5 / (((_2552 * ((_2772 * _2795) + _2758)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2795) + _2758) * _2772))) * _2772;
        float _4711 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2781 / ((_2785 * _2785) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2733 = (((_2794 * cbLight._m0[_2743].x) * _2807) * _2808) + _2675;
        _2735 = (((_2794 * cbLight._m0[_2743].y) * _2807) * _2808) + _2676;
        _2737 = (((_2794 * cbLight._m0[_2743].z) * _2807) * _2808) + _2677;
    }
    float _2839;
    float _2841;
    float _2843;
    if (_2461)
    {
        _2839 = _2733;
        _2841 = _2735;
        _2843 = _2737;
    }
    else
    {
        uint _2850 = _2276 + 3u;
        uint _2854 = _2276 + 11u;
        float _2868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2850].w)) * _833) * 0.949999988079071044921875);
        float _2869 = _2868 * _2868;
        float _2870 = cbLight._m0[_2850].x + _909;
        float _2871 = cbLight._m0[_2850].y + _910;
        float _2872 = cbLight._m0[_2850].z + _911;
        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
        float _2877 = _2876 * _2870;
        float _2878 = _2876 * _2871;
        float _2879 = _2876 * _2872;
        float _2880 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2850].xyz));
        float _4727 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _2884 = dot(vec3(_830, _831, _832), vec3(_2877, _2878, _2879));
        float _4738 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2888 = dot(vec3(cbLight._m0[_2850].xyz), vec3(_2877, _2878, _2879));
        float _4749 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2892 = _2869 * _2869;
        float _2896 = ((_2887 * _2887) * (_2892 + (-1.0))) + 1.0;
        float _2905 = (exp2(log2(1.0 - (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2906 = 1.0 - _2869;
        float _2916 = (0.5 / (((_2552 * ((_2883 * _2906) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2906) + _2869) * _2883))) * _2883;
        float _4760 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2918 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2892 / ((_2896 * _2896) * 3.141590118408203125));
        float _2919 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2839 = (((_2905 * cbLight._m0[_2854].x) * _2918) * _2919) + _2733;
        _2841 = (((_2905 * cbLight._m0[_2854].y) * _2918) * _2919) + _2735;
        _2843 = (((_2905 * cbLight._m0[_2854].z) * _2918) * _2919) + _2737;
    }
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_2274.y == 0u)
    {
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.x;
        uint _2952 = uint((float(_2940.y) * floor(float(uint(cbSceneParam._m0[85u].y * _918) / _2941))) + floor(float(uint(cbSceneParam._m0[85u].x * _917) / _2941)));
        float _2962 = (log2(_2052 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2963 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        uint _2966 = uint(isnan(14.0) ? _2963 : (isnan(_2963) ? 14.0 : min(_2963, 14.0)));
        uvec4 _2971 = texelFetch(g_lightClusterGridBuffer, int(((_2966 << 2u) + (_2952 << 6u)) >> 2u));
        uint _2972 = _2971.x;
        uint _2973 = _2940.z;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((((1u << ((_2973 >> 4u) & 15u)) + 4294967295u) & _2972) == 0u) || ((_2973 & 240u) == 0u))
        {
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
        }
        else
        {
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            uint _3203 = 0u;
            uint _3212;
            bool _3213;
            for (;;)
            {
                _3212 = texelFetch(g_lightClassification, int((((_2966 << 5u) + (_2952 << 9u)) + (_3203 << 2u)) >> 2u)).x;
                _3213 = _3212 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3213)
                {
                    frontier_phi_66_pred = _3202;
                    frontier_phi_66_pred_1 = _3201;
                    frontier_phi_66_pred_2 = _3200;
                    frontier_phi_66_pred_3 = _3199;
                    frontier_phi_66_pred_4 = _3198;
                    frontier_phi_66_pred_5 = _3197;
                }
                else
                {
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    uint _3327;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3212;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    for (;;)
                    {
                        uint _3331 = uint(findLSB(_3327)) + (_3203 << 5u);
                        uint _3328 = (_3327 + 4294967295u) & _3327;
                        uint _3333 = _3331 * 48u;
                        vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 3u)).x));
                        uint _3353 = (_3331 * 48u) + 4u;
                        vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 3u)).x));
                        uint _3372 = (_3331 * 48u) + 8u;
                        vec3 _3383 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x));
                        float _3387 = _3347.x - _2050;
                        float _3388 = _3347.y - _2051;
                        float _3389 = _3347.z - _2052;
                        float _3390 = dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389));
                        float _3393 = inversesqrt(_3390);
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3397 = dot(vec3(_936, _939, _942), vec3(_3394, _3395, _3396));
                        float _3402 = 1.0 - (_3390 * _3347.w);
                        float _4786 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3403 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3404 = sqrt(_3390) * _3366.w;
                        float _3407 = 1.39999997615814208984375 / (_3404 + 1.39999997615814208984375);
                        float _3408 = _3407 * _3407;
                        float _3411 = ((1.0 - _3408) * _3397) + _3408;
                        float _3414 = _3404 * _3404;
                        float _3418 = ((isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))) * _3403) / ((_3414 * 0.699999988079071044921875) + 1.0);
                        float _3422 = (-0.0) - _2050;
                        float _3423 = (-0.0) - _2051;
                        float _3424 = (-0.0) - _2052;
                        float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3438 = exp2(log2(1.0 / ((_3414 * 3.5) + 5.0)) * 0.25);
                        float _3439 = 1.0 - _996;
                        float _3446 = sqrt(1.0 - ((1.0 - (_3439 * _3439)) * (1.0 - (_3438 * _3438))));
                        float _3447 = _3446 * _3446;
                        float _3448 = _3447 * _3447;
                        float _3449 = _3429 + _3394;
                        float _3450 = _3430 + _3395;
                        float _3451 = _3431 + _3396;
                        float _3455 = inversesqrt(dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451)));
                        float _3459 = dot(vec3(_936, _939, _942), vec3(_3429, _3430, _3431));
                        float _4802 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3462 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3463 = dot(vec3(_936, _939, _942), vec3(_3455 * _3449, _3455 * _3450, _3455 * _3451));
                        float _4813 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3466 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3470 = ((_3466 * _3466) * (_3448 + (-1.0))) + 1.0;
                        float _3471 = _3407 * _3447;
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3397) + _3472;
                        float _4824 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3476 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3477 = 1.0 - _3447;
                        float _3487 = (0.5 / (((_3476 * ((_3462 * _3477) + _3447)) + 9.9999999392252902907785028219223e-09) + (((_3476 * _3477) + _3447) * _3462))) * _3476;
                        float _4835 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3498 = (((_3448 * 3.1415927410125732421875) * (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) / ((_3470 * _3470) * ((_3414 * 2.1991131305694580078125) + 3.141590118408203125))) * _3403;
                        _3256 = (_3418 * _3366.x) + _3324;
                        _3257 = (_3418 * _3366.y) + _3325;
                        _3258 = (_3418 * _3366.z) + _3326;
                        _3253 = (_3498 * _3383.x) + _3321;
                        _3254 = (_3498 * _3383.y) + _3322;
                        _3255 = (_3498 * _3383.z) + _3323;
                        if (_3328 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3328;
                        }
                    }
                    frontier_phi_66_pred = _3258;
                    frontier_phi_66_pred_1 = _3257;
                    frontier_phi_66_pred_2 = _3256;
                    frontier_phi_66_pred_3 = _3255;
                    frontier_phi_66_pred_4 = _3254;
                    frontier_phi_66_pred_5 = _3253;
                }
                _3063 = frontier_phi_66_pred;
                _3061 = frontier_phi_66_pred_1;
                _3059 = frontier_phi_66_pred_2;
                _3057 = frontier_phi_66_pred_3;
                _3055 = frontier_phi_66_pred_4;
                _3053 = frontier_phi_66_pred_5;
                uint _3204 = _3203 + 1u;
                if (_3204 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3197 = _3053;
                    _3198 = _3055;
                    _3199 = _3057;
                    _3200 = _3059;
                    _3201 = _3061;
                    _3202 = _3063;
                    _3203 = _3204;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
        }
        uvec4 _3066 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3067 = _3066.z;
        uint _3069 = (_3067 >> 8u) & 15u;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        if (((4294967295u << _3069) & _2972) == 0u)
        {
            _3165 = _3052;
            _3167 = _3054;
            _3169 = _3056;
            _3171 = _3058;
            _3173 = _3060;
            _3175 = _3062;
        }
        else
        {
            float _3190 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
            float _3191 = _3190 * _2050;
            float _3192 = _3190 * _2051;
            float _3193 = _3190 * _2052;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3069 < ((_3067 >> 12u) & 15u))
            {
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3304 = _3052;
                float _3305 = _3054;
                float _3306 = _3056;
                float _3307 = _3058;
                float _3308 = _3060;
                float _3309 = _3062;
                uint _3310 = _3069;
                uint _3319;
                bool _3320;
                for (;;)
                {
                    _3319 = texelFetch(g_lightClassification, int((((_2966 << 5u) + (_2952 << 9u)) + (_3310 << 2u)) >> 2u)).x;
                    _3320 = _3319 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3320)
                    {
                        frontier_phi_72_pred = _3309;
                        frontier_phi_72_pred_1 = _3308;
                        frontier_phi_72_pred_2 = _3307;
                        frontier_phi_72_pred_3 = _3306;
                        frontier_phi_72_pred_4 = _3305;
                        frontier_phi_72_pred_5 = _3304;
                    }
                    else
                    {
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3516 = _3304;
                        float _3517 = _3305;
                        float _3518 = _3306;
                        float _3519 = _3307;
                        float _3520 = _3308;
                        float _3521 = _3309;
                        uint _3522 = _3319;
                        uint _3523;
                        vec4 _3548;
                        float _3549;
                        vec4 _3564;
                        vec3 _3576;
                        vec4 _3591;
                        vec4 _3606;
                        float _3652;
                        bool _3653;
                        for (;;)
                        {
                            uint _3533 = ((_3310 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3522));
                            _3523 = (_3522 + 4294967295u) & _3522;
                            uint _3535 = _3533 * 40u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            _3549 = _3548.w;
                            uint _3551 = (_3533 * 40u) + 4u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3533 * 40u) + 8u;
                            _3576 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x));
                            uint _3578 = (_3533 * 40u) + 16u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3533 * 40u) + 20u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3533 * 40u) + 24u;
                            vec4 _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3627 = (_3533 * 40u) + 28u;
                            vec4 _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            _3652 = fma(_2052, _3640.z, fma(_2051, _3640.y, _3640.x * _2050)) + _3640.w;
                            _3653 = !((fma(_2052, _3621.z, fma(_2051, _3621.y, _3621.x * _2050)) + _3621.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3653)
                            {
                                float _3680 = _3548.x - _2050;
                                float _3681 = _3548.y - _2051;
                                float _3682 = _3548.z - _2052;
                                float _3683 = dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682));
                                float _3686 = inversesqrt(_3683);
                                float _3687 = _3686 * _3680;
                                float _3688 = _3686 * _3681;
                                float _3689 = _3686 * _3682;
                                float _3693 = 1.0 - (_3683 / (_3549 * _3549));
                                float _4846 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3698 = sqrt(_3683) * _3564.w;
                                float _3700 = 1.39999997615814208984375 / (_3698 + 1.39999997615814208984375);
                                float _3701 = _3700 * _3700;
                                float _3704 = ((1.0 - _3701) * dot(vec3(_3687, _3688, _3689), vec3(_936, _939, _942))) + _3701;
                                float _3707 = _3698 * _3698;
                                float _3711 = (fma(_2052, _3591.z, fma(_2051, _3591.y, _3591.x * _2050)) + _3591.w) / _3652;
                                float _3712 = (fma(_2052, _3606.z, fma(_2051, _3606.y, _3606.x * _2050)) + _3606.w) / _3652;
                                float _3716 = 1.0 - dot(vec2(_3711, _3712), vec2(_3711, _3712));
                                float _4862 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3718 = _3717 * (((isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0))) * _3694) / ((_3707 * 0.699999988079071044921875) + 1.0));
                                float _3730 = exp2(log2(1.0 / ((_3707 * 3.5) + 5.0)) * 0.25);
                                float _3731 = 1.0 - _996;
                                float _3738 = sqrt(1.0 - ((1.0 - (_3731 * _3731)) * (1.0 - (_3730 * _3730))));
                                float _3739 = _3738 * _3738;
                                float _3740 = _3739 * _3739;
                                float _3741 = _3687 - _3191;
                                float _3742 = _3688 - _3192;
                                float _3743 = _3689 - _3193;
                                float _3747 = inversesqrt(dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743)));
                                float _3751 = dot(vec3(_936, _939, _942), vec3((-0.0) - _3191, (-0.0) - _3192, (-0.0) - _3193));
                                float _4873 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3754 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3755 = dot(vec3(_936, _939, _942), vec3(_3747 * _3741, _3747 * _3742, _3747 * _3743));
                                float _4884 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3758 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3762 = ((_3758 * _3758) * (_3740 + (-1.0))) + 1.0;
                                float _3763 = _3700 * _3739;
                                float _3764 = _3763 * _3763;
                                float _3770 = ((1.0 - _3764) * dot(vec3(_936, _939, _942), vec3(_3687, _3688, _3689))) + _3764;
                                float _4895 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3772 = 1.0 - _3739;
                                float _3782 = (0.5 / (((_3771 * ((_3754 * _3772) + _3739)) + 9.9999999392252902907785028219223e-09) + (((_3771 * _3772) + _3739) * _3754))) * _3771;
                                float _4906 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3792 = (_3717 * _3694) * (((_3740 * 3.1415927410125732421875) * (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) / ((_3762 * _3762) * ((_3707 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3718 * _3564.y;
                                frontier_phi_78_pred_1 = _3718 * _3564.x;
                                frontier_phi_78_pred_2 = _3792 * _3576.z;
                                frontier_phi_78_pred_3 = _3792 * _3576.y;
                                frontier_phi_78_pred_4 = _3792 * _3576.x;
                                frontier_phi_78_pred_5 = _3718 * _3564.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3800 = frontier_phi_78_pred;
                            _3799 = frontier_phi_78_pred_1;
                            _3798 = frontier_phi_78_pred_2;
                            _3797 = frontier_phi_78_pred_3;
                            _3796 = frontier_phi_78_pred_4;
                            _3801 = frontier_phi_78_pred_5;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            if (_3523 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3523;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3508;
                        frontier_phi_72_pred_1 = _3507;
                        frontier_phi_72_pred_2 = _3506;
                        frontier_phi_72_pred_3 = _3505;
                        frontier_phi_72_pred_4 = _3504;
                        frontier_phi_72_pred_5 = _3503;
                    }
                    _3176 = frontier_phi_72_pred;
                    _3174 = frontier_phi_72_pred_1;
                    _3172 = frontier_phi_72_pred_2;
                    _3170 = frontier_phi_72_pred_3;
                    _3168 = frontier_phi_72_pred_4;
                    _3166 = frontier_phi_72_pred_5;
                    uint _3311 = _3310 + 1u;
                    if (_3311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3304 = _3166;
                        _3305 = _3168;
                        _3306 = _3170;
                        _3307 = _3172;
                        _3308 = _3174;
                        _3309 = _3176;
                        _3310 = _3311;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3176;
                frontier_phi_60_61_ladder_1 = _3174;
                frontier_phi_60_61_ladder_2 = _3170;
                frontier_phi_60_61_ladder_3 = _3168;
                frontier_phi_60_61_ladder_4 = _3166;
                frontier_phi_60_61_ladder_5 = _3172;
            }
            else
            {
                frontier_phi_60_61_ladder = _3062;
                frontier_phi_60_61_ladder_1 = _3060;
                frontier_phi_60_61_ladder_2 = _3056;
                frontier_phi_60_61_ladder_3 = _3054;
                frontier_phi_60_61_ladder_4 = _3052;
                frontier_phi_60_61_ladder_5 = _3058;
            }
            _3165 = frontier_phi_60_61_ladder_4;
            _3167 = frontier_phi_60_61_ladder_3;
            _3169 = frontier_phi_60_61_ladder_2;
            _3171 = frontier_phi_60_61_ladder_5;
            _3173 = frontier_phi_60_61_ladder_1;
            _3175 = frontier_phi_60_61_ladder;
        }
        float _3180 = isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0));
        _2985 = (_3180 * _3171) + _2516;
        _2987 = (_3180 * _3173) + _2518;
        _2989 = (_3180 * _3175) + _2520;
        _2991 = ((_3165 * 0.039999999105930328369140625) * _3180) + _2839;
        _2993 = ((_3167 * 0.039999999105930328369140625) * _3180) + _2841;
        _2995 = ((_3169 * 0.039999999105930328369140625) * _3180) + _2843;
    }
    else
    {
        _2985 = _2516;
        _2987 = _2518;
        _2989 = _2520;
        _2991 = _2839;
        _2993 = _2841;
        _2995 = _2843;
    }
    float _4922 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4933 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4944 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    uint _3015 = _274 + 6u;
    float _3023 = _917 / cbSceneParam._m0[86u].x;
    float _3024 = _918 / cbSceneParam._m0[86u].y;
    vec4 _3038 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3023, _3024, (log2((isnan(cbSceneParam._m0[77u].w) ? _851 : (isnan(_851) ? cbSceneParam._m0[77u].w : min(_851, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3040 = _3038.x;
    float _3041 = _3038.y;
    float _3042 = _3038.z;
    float _3043 = _3038.w;
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    if (_851 > cbSceneParam._m0[78u].w)
    {
        float _3077 = isnan(_851) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _851 : min(cbSceneParam._m0[80u].w, _851));
        float _3078 = _3077 / _851;
        float _3089 = _3078 * _902;
        float _3090 = _903 * _3078;
        float _3091 = (-0.0) - _3090;
        float _3093 = _3078 * _904;
        float _3095 = (cbSceneParam._m0[77u].w * _3091) / _3077;
        float _3096 = _3095 + cbSceneParam._m0[79u].w;
        float _3097 = cbSceneParam._m0[79u].w - _3090;
        float _3103 = sqrt(((_3089 * _3089) + (_3090 * _3090)) + (_3093 * _3093));
        float _3106 = (1.0 - (cbSceneParam._m0[77u].w / _3077)) * _3103;
        float _3111 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3113 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3266;
        if (abs((_3091 - _3095) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3266 = ((((_3096 > 0.0) ? exp2(_3111 * _3096) : (2.0 - exp2(_3113 * _3096))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3106;
        }
        else
        {
            float _3226 = 1.0 / cbSceneParam._m0[80u].x;
            float _3227 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : max(_3096, _3097));
            float _3228 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : min(_3096, _3097));
            float _3237 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : min(_3227, 0.0));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            _3266 = ((abs(_3103 / _3091) * cbSceneParam._m0[80u].y) * ((((_3237 - _3238) * 2.0) - ((exp2(_3111 * (isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0)))) - exp2(_3111 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))))) * _3226)) - ((exp2(_3113 * _3237) - exp2(_3113 * _3238)) * _3226))) + (_3106 * cbSceneParam._m0[80u].z);
        }
        vec4 _3268 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3023, _3024, 1.0), 0.0);
        float _3277 = exp2((_3266 * (-1.44269502162933349609375)) * (1.0 - _3268.w));
        float _3278 = log2(_3277);
        float _3294 = log2(_3043);
        _3115 = (exp2(_3294 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].x)) * _3268.x) / cbSceneParam._m0[78u].x)) + _3040;
        _3117 = (exp2(_3294 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].y)) * _3268.y) / cbSceneParam._m0[78u].y)) + _3041;
        _3119 = (exp2(_3294 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].z)) * _3268.z) / cbSceneParam._m0[78u].z)) + _3042;
        _3121 = _3277 * _3043;
    }
    else
    {
        _3115 = _3040;
        _3117 = _3041;
        _3119 = _3042;
        _3121 = _3043;
    }
    float _3133 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3134 = _3133 == 3.0;
    float _3135 = log2(_3121);
    float _3142 = exp2(_3135 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2985 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _980))) + ((_2991 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1783)) * cbPerFrame._m0[3u].x));
    float _3143 = exp2(_3135 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2987 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _980))) + ((_2993 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1783)) * cbPerFrame._m0[3u].x));
    float _3144 = exp2(_3135 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2989 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _980))) + ((_2995 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1783)) * cbPerFrame._m0[3u].x));
    float _3153 = (_3133 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3153 * (_3134 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3115)));
    SV_Target.y = _3153 * (_3134 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.z = _3153 * (_3134 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3119)));
    SV_Target.w = cbInstanceData._m0[_3015].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3015].w;
}


