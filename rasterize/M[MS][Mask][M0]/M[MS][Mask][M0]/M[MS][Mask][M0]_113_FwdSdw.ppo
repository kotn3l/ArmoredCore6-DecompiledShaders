#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1418;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4004 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4015 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4026 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[24u].z) + _432) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4037 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _457 = (_450 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _458 = (_450 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _459 = (_450 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4048 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _297) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _298) + cbTextureTilingScale._m0[24u].w));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _569 = _567.x;
    float _579 = dot(vec4(_569, _567.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _591 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _380.z) * 2.0) - ((((_569 - _579) * cbMtdParam._m0[24u].z) + _579) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4059 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _599 = (_592 * ((_550.x * cbMtdParam._m0[14u].x) - _530)) + _530;
    float _600 = (_592 * ((_550.y * cbMtdParam._m0[14u].y) - _531)) + _531;
    float _601 = (_592 * ((_550.z * cbMtdParam._m0[14u].z) - _532)) + _532;
    float _605 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _599;
    float _608 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _600;
    float _611 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _601;
    float _618 = ((_599 - _605) * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) + _605;
    float _619 = ((_600 - _608) * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) + _608;
    float _620 = ((_601 - _611) * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) + _611;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _679 = _677.x;
    float _680 = _677.y;
    float _681 = _677.z;
    float _688 = ((_660.x - _679) * _450) + _679;
    float _689 = ((_660.y - _680) * _450) + _680;
    float _690 = ((_660.z - _681) * _450) + _681;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _713 = ((_702.x - _688) * _523) + _688;
    float _714 = ((_702.y - _689) * _523) + _689;
    float _715 = ((_702.z - _690) * _523) + _690;
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _297) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _298) + cbTextureTilingScale._m0[23u].w));
    float _740 = ((_727.z - _715) * _592) + _715;
    float _743 = ((((_727.x - _713) * _592) + _713) * 2.0) + (-1.0);
    float _744 = ((((_727.y - _714) * _592) + _714) * 2.0) + (-1.0);
    float _745 = dot(vec2(_743, _744), vec2(_743, _744));
    float _4070 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _750 = sqrt(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))));
    vec4 _764 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _789 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _791 = _789.x;
    float _792 = 1.0 - _791;
    float _805 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_791 - _792) * cbMtdParam._m0[24u].w) + _792) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4081 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _806 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _813 = (_806 * (cbMtdParam._m0[17u].x - _618)) + _618;
    float _814 = (_806 * (cbMtdParam._m0[17u].y - _619)) + _619;
    float _815 = (_806 * (cbMtdParam._m0[17u].z - _620)) + _620;
    float _820 = (((_637.z - _740) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _740;
    float _824 = ((_764.z - _820) * cbMtdParam._m0[19u].w) + _820;
    vec4 _837 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _844 = (_837.x * 2.0) + (-1.0);
    float _845 = (_837.y * 2.0) + (-1.0);
    float _846 = dot(vec2(_844, _845), vec2(_844, _845));
    float _4092 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _854 = (_806 * (_837.z - _824)) + _824;
    float _863 = (_743 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_637.x * 2.0) + (-1.0)))) + (((_764.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _864 = (_744 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_637.y * 2.0) + (-1.0)))) + (((_764.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _876 = (((_844 - _863) + (cbMtdParam._m0[21u].x * _863)) * _806) + _863;
    float _877 = (((_845 - _864) + (cbMtdParam._m0[21u].x * _864)) * _806) + _864;
    float _878 = (_806 * (sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) - _750)) + _750;
    float _882 = cbMtdParam._m0[22u].x + _764.w;
    float _885 = fma(_878, _244 * NORMAL.x, fma(_877, _251 * TANGENT.x, (_237 * _229) * _876));
    float _888 = fma(_878, _244 * NORMAL.y, fma(_877, _251 * TANGENT.y, (_237 * _230) * _876));
    float _891 = fma(_878, _244 * NORMAL.z, fma(_877, _251 * TANGENT.z, (_237 * _231) * _876));
    float _895 = inversesqrt(dot(vec3(_885, _888, _891), vec3(_885, _888, _891)));
    float _896 = _895 * _885;
    float _897 = _895 * _888;
    float _898 = _895 * _891;
    float _4103 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _899 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4125 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4136 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4147 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _917 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _969 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _959);
    float _970 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _959);
    float _971 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _959);
    float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
    float _976 = _969 * _975;
    float _977 = _970 * _975;
    float _978 = _971 * _975;
    float _984 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _985 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1003 = fma(_898, cbSceneParam._m0[5u].z, fma(_897, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _896));
    float _1006 = fma(_898, cbSceneParam._m0[6u].z, fma(_897, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _896));
    float _1009 = fma(_898, cbSceneParam._m0[7u].z, fma(_897, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _896));
    uint _1023 = (_278 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1029 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * cbInstanceData._m0[_1023].x;
    float _1030 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * cbInstanceData._m0[_1023].y;
    float _1031 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_1023].z;
    float _4158 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    vec4 _1043 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _984, cbSceneParam._m0[86u].y * _985));
    float _1047 = ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * TEXCOORD_5.w) * _1043.x;
    float _1048 = dot(vec3(_896, _897, _898), vec3(_976, _977, _978));
    float _1051 = _1048 * 2.0;
    float _1055 = (_1051 * _896) - _976;
    float _1056 = (_1051 * _897) - _977;
    float _1057 = (_1051 * _898) - _978;
    float _1061 = abs(dot(vec3(_976, _977, _978), vec3(_896, _897, _898)));
    float _4191 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1063 = sqrt(_899);
    float _1076 = exp2((_1063 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1063 * 3.0));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1417;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1142 = fma(_1116, cbModelParam._m0[26u].z, fma(_1112, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108));
        float _1146 = fma(_1116, cbModelParam._m0[27u].z, fma(_1112, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108));
        float _1150 = fma(_1116, cbModelParam._m0[28u].z, fma(_1112, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108));
        float _1175 = _1108 + _896;
        float _1176 = _1112 + _897;
        float _1177 = _1116 + _898;
        float _1187 = fma(_1177, cbModelParam._m0[26u].z, fma(_1176, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175)) - _1142;
        float _1188 = fma(_1177, cbModelParam._m0[27u].z, fma(_1176, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175)) - _1146;
        float _1189 = fma(_1177, cbModelParam._m0[28u].z, fma(_1176, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175)) - _1150;
        float _1193 = inversesqrt(dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189)));
        float _1206 = ((_1193 * _1187) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1142 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1193 * _1188) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1146 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1193 * _1189) / cbModelParam._m0[34u].z) + ((((((_1150 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        float _1245 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1211.x + (-0.5));
        float _1247 = _1245 * (_1211.y + (-0.5));
        float _1248 = _1245 * (_1211.z + (-0.5));
        float _1255 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1218.x + (-0.5));
        float _1257 = _1255 * (_1218.y + (-0.5));
        float _1258 = _1255 * (_1218.z + (-0.5));
        float _1265 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1225.x + (-0.5));
        float _1267 = _1265 * (_1225.y + (-0.5));
        float _1268 = _1265 * (_1225.z + (-0.5));
        float _1275 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1232.x + (-0.5));
        float _1277 = _1275 * (_1232.y + (-0.5));
        float _1278 = _1275 * (_1232.z + (-0.5));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = _1246 * 0.5;
        float _1283 = _1256 * 0.5;
        float _1284 = _1266 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1299 = (dot(vec3(_896, _897, _898), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1309 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4239 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1311 + 1.0))) + _1316) * _1279;
        float _1326 = _1247 * 0.5;
        float _1327 = _1257 * 0.5;
        float _1328 = _1267 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_896, _897, _898), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4272 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1353 + 1.0))) + _1358) * _1280;
        float _1368 = _1248 * 0.5;
        float _1369 = _1258 * 0.5;
        float _1370 = _1268 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_896, _897, _898), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4305 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1395 + 1.0))) + _1400) * _1281;
        _1417 = _1248;
        _1419 = _1247;
        _1420 = _1246;
        _1421 = _1258;
        _1422 = _1257;
        _1423 = _1256;
        _1424 = _1268;
        _1425 = _1267;
        _1426 = _1266;
        _1427 = _1281;
        _1428 = _1280;
        _1429 = _1279;
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1418;
        _1419 = _1418;
        _1420 = _1418;
        _1421 = _1418;
        _1422 = _1418;
        _1423 = _1418;
        _1424 = _1418;
        _1425 = _1418;
        _1426 = _1418;
        _1427 = _1418;
        _1428 = _1418;
        _1429 = _1418;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1455 = fma(_1116, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1108));
        float _1459 = fma(_1116, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1108));
        float _1463 = fma(_1116, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1108));
        float _1486 = _1108 + _896;
        float _1487 = _1112 + _897;
        float _1488 = _1116 + _898;
        float _1498 = fma(_1488, cbModelParam._m0[30u].z, fma(_1487, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1486)) - _1455;
        float _1499 = fma(_1488, cbModelParam._m0[31u].z, fma(_1487, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1486)) - _1459;
        float _1500 = fma(_1488, cbModelParam._m0[32u].z, fma(_1487, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1486)) - _1463;
        float _1504 = inversesqrt(dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500)));
        float _1517 = ((_1504 * _1498) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1455 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1504 * _1499) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1459 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1519 = ((_1504 * _1500) / cbModelParam._m0[35u].z) + ((((((_1463 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        float _1554 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1521.x + (-0.5));
        float _1556 = _1554 * (_1521.y + (-0.5));
        float _1557 = _1554 * (_1521.z + (-0.5));
        float _1564 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1528.x + (-0.5));
        float _1566 = _1564 * (_1528.y + (-0.5));
        float _1567 = _1564 * (_1528.z + (-0.5));
        float _1574 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1535.x + (-0.5));
        float _1576 = _1574 * (_1535.y + (-0.5));
        float _1577 = _1574 * (_1535.z + (-0.5));
        float _1584 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1542.x + (-0.5));
        float _1586 = _1584 * (_1542.y + (-0.5));
        float _1587 = _1584 * (_1542.z + (-0.5));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = _1555 * 0.5;
        float _1592 = _1565 * 0.5;
        float _1593 = _1575 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_896, _897, _898), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4368 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1618 + 1.0))) + _1623) * _1588;
        float _1633 = _1556 * 0.5;
        float _1634 = _1566 * 0.5;
        float _1635 = _1576 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_896, _897, _898), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4401 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1660 + 1.0))) + _1665) * _1589;
        float _1675 = _1557 * 0.5;
        float _1676 = _1567 * 0.5;
        float _1677 = _1577 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_896, _897, _898), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4434 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1702 + 1.0))) + _1707) * _1590;
        _1724 = _1557;
        _1725 = _1556;
        _1726 = _1555;
        _1727 = _1567;
        _1728 = _1566;
        _1729 = _1565;
        _1730 = _1577;
        _1731 = _1576;
        _1732 = _1575;
        _1733 = _1590;
        _1734 = _1589;
        _1735 = _1588;
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
    }
    else
    {
        _1724 = _1418;
        _1725 = _1418;
        _1726 = _1418;
        _1727 = _1418;
        _1728 = _1418;
        _1729 = _1418;
        _1730 = _1418;
        _1731 = _1418;
        _1732 = _1418;
        _1733 = _1418;
        _1734 = _1418;
        _1735 = _1418;
        _1736 = 0.0;
        _1737 = 0.0;
        _1738 = 0.0;
    }
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1430)) + _1430;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1431)) + _1431;
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1432)) + _1432;
    float _1771 = fma(_1750, cbSceneParam._m0[89u].z, fma(_1749, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1774 = fma(_1750, cbSceneParam._m0[90u].z, fma(_1749, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1777 = fma(_1750, cbSceneParam._m0[91u].z, fma(_1749, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1748));
    float _1792 = _1055 * 0.5;
    float _1793 = _1056 * 0.5;
    float _1794 = _1057 * 0.5;
    float _1795 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1798 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1801 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1835;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1808 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1417, _1421, _1424, _1427));
        float _1812 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1419, _1422, _1425, _1428));
        float _1816 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1420, _1423, _1426, _1429));
        float _1823 = dot(vec4(cbModelParam._m0[39u]), vec4(_1792, _1793, _1794, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1823) ? 0.0 : (isnan(0.0) ? _1823 : max(0.0, _1823))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1846;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1837 = dot(vec4(cbModelParam._m0[40u]), vec4(_1792, _1793, _1794, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1850 = (_1846 * cbModelParam._m0[1u].x) + (_1835 * (1.0 - cbModelParam._m0[1u].x));
    float _1860 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _899);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1860 : min(cbModelParam._m0[25u].z, _1860));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1908 = fma(_1116, cbModelParam._m0[13u].z, fma(_1112, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1108)) + cbModelParam._m0[13u].w;
        float _1912 = fma(_1116, cbModelParam._m0[14u].z, fma(_1112, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1108)) + cbModelParam._m0[14u].w;
        float _1916 = fma(_1116, cbModelParam._m0[15u].z, fma(_1112, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1108)) + cbModelParam._m0[15u].w;
        float _1919 = fma(_1057, cbModelParam._m0[13u].z, fma(_1056, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055));
        float _1922 = fma(_1057, cbModelParam._m0[14u].z, fma(_1056, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055));
        float _1925 = fma(_1057, cbModelParam._m0[15u].z, fma(_1056, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055));
        float _1953;
        if (_1919 > 0.0)
        {
            _1953 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1953 = frontier_phi_14_12_ladder;
        }
        float _2123;
        if (_1922 > 0.0)
        {
            _2123 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2123 = frontier_phi_23_19_ladder;
        }
        float _2418;
        if (_1925 > 0.0)
        {
            _2418 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2418 = frontier_phi_35_30_ladder;
        }
        float _2420 = isnan(_2123) ? _1953 : (isnan(_1953) ? _2123 : min(_1953, _2123));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1919) + _1908;
        float _2426 = (_2421 * _1922) + _1912;
        float _2427 = (_2421 * _1925) + _1916;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2428;
        float _2432 = _2428 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 > _2432) || ((_2426 < _2430) || ((_2425 < _2430) || (_2425 > _2432))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2572 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2427, cbModelParam._m0[9u].z, fma(_2426, cbModelParam._m0[9u].y, _2425 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2427, cbModelParam._m0[10u].z, fma(_2426, cbModelParam._m0[10u].y, _2425 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2427, cbModelParam._m0[11u].z, fma(_2426, cbModelParam._m0[11u].y, _2425 * cbModelParam._m0[11u].x))), _1861);
            frontier_phi_13_35_ladder = _2572.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2572.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2572.x * cbModelParam._m0[1u].y;
        }
        _1941 = frontier_phi_13_35_ladder_2;
        _1943 = frontier_phi_13_35_ladder_1;
        _1945 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1055, _1056, _1057), _1861);
        _1941 = _1929.x * cbModelParam._m0[1u].y;
        _1943 = _1929.y * cbModelParam._m0[1u].y;
        _1945 = _1929.z * cbModelParam._m0[1u].y;
    }
    float _1949 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _899);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1949 : min(cbModelParam._m0[25u].w, _1949));
    float _2040;
    float _2042;
    float _2044;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2004 = fma(_1116, cbModelParam._m0[21u].z, fma(_1112, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1108)) + cbModelParam._m0[21u].w;
        float _2008 = fma(_1116, cbModelParam._m0[22u].z, fma(_1112, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1108)) + cbModelParam._m0[22u].w;
        float _2012 = fma(_1116, cbModelParam._m0[23u].z, fma(_1112, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1108)) + cbModelParam._m0[23u].w;
        float _2015 = fma(_1057, cbModelParam._m0[21u].z, fma(_1056, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055));
        float _2018 = fma(_1057, cbModelParam._m0[22u].z, fma(_1056, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055));
        float _2021 = fma(_1057, cbModelParam._m0[23u].z, fma(_1056, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055));
        float _2128;
        if (_2015 > 0.0)
        {
            _2128 = abs((1.0 - _2004) / _2015);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2004 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2128 = frontier_phi_25_21_ladder;
        }
        float _2445;
        if (_2018 > 0.0)
        {
            _2445 = abs((1.0 - _2008) / _2018);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2008 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2445 = frontier_phi_37_32_ladder;
        }
        float _2772;
        if (_2021 > 0.0)
        {
            _2772 = abs((1.0 - _2012) / _2021);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2012 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2772 = frontier_phi_47_44_ladder;
        }
        float _2774 = isnan(_2445) ? _2128 : (isnan(_2128) ? _2445 : min(_2128, _2445));
        float _2775 = isnan(_2772) ? _2774 : (isnan(_2774) ? _2772 : min(_2774, _2772));
        float _2779 = (_2775 * _2015) + _2004;
        float _2780 = (_2775 * _2018) + _2008;
        float _2781 = (_2775 * _2021) + _2012;
        float _2782 = _2775 * 9.9999997473787516355514526367188e-05;
        float _2783 = (-1.0) - _2782;
        float _2785 = _2782 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2781 > _2785) || ((_2781 < _2783) || ((_2780 > _2785) || ((_2780 < _2783) || ((_2779 < _2783) || (_2779 > _2785))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2781, cbModelParam._m0[17u].z, fma(_2780, cbModelParam._m0[17u].y, _2779 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2781, cbModelParam._m0[18u].z, fma(_2780, cbModelParam._m0[18u].y, _2779 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2781, cbModelParam._m0[19u].z, fma(_2780, cbModelParam._m0[19u].y, _2779 * cbModelParam._m0[19u].x))), _1950);
            frontier_phi_22_47_ladder = _2899.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2899.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2899.x * cbModelParam._m0[1u].z;
        }
        _2040 = frontier_phi_22_47_ladder_2;
        _2042 = frontier_phi_22_47_ladder_1;
        _2044 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1055, _1056, _1057), _1950);
        _2040 = _2024.x * cbModelParam._m0[1u].z;
        _2042 = _2024.y * cbModelParam._m0[1u].z;
        _2044 = _2024.z * cbModelParam._m0[1u].z;
    }
    float _2056 = ((((1.0 - _1076) * ((_1063 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1076 * _1063)) * _1047;
    float _2057 = _2056 * ((cbModelParam._m0[1u].w * (_2040 - _1941)) + _1941);
    float _2058 = _2056 * ((cbModelParam._m0[1u].w * (_2042 - _1943)) + _1943);
    float _2059 = _2056 * ((cbModelParam._m0[1u].w * (_2044 - _1945)) + _1945);
    float _2062 = fma(_2059, cbSceneParam._m0[89u].z, fma(_2058, cbSceneParam._m0[89u].y, _2057 * cbSceneParam._m0[89u].x));
    float _2065 = fma(_2059, cbSceneParam._m0[90u].z, fma(_2058, cbSceneParam._m0[90u].y, _2057 * cbSceneParam._m0[90u].x));
    float _2068 = fma(_2059, cbSceneParam._m0[91u].z, fma(_2058, cbSceneParam._m0[91u].y, _2057 * cbSceneParam._m0[91u].x));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2106 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2114 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2115 = _2102 / _2114;
    float _2116 = _2106 / _2114;
    float _2117 = _2110 / _2114;
    float _2264;
    float _2265;
    float _2266;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2144 = ((uint(_2117 > cbSceneParam._m0[59u].y) + uint(_2117 > cbSceneParam._m0[59u].x)) + uint(_2117 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2145 = _2144 + 43u;
        uint _2153 = _2144 + 44u;
        uint _2161 = _2144 + 45u;
        uint _2169 = _2144 + 46u;
        float _2180 = fma(_2114, cbSceneParam._m0[_2145].w, fma(_2110, cbSceneParam._m0[_2145].z, fma(_2106, cbSceneParam._m0[_2145].y, _2102 * cbSceneParam._m0[_2145].x)));
        float _2184 = fma(_2114, cbSceneParam._m0[_2153].w, fma(_2110, cbSceneParam._m0[_2153].z, fma(_2106, cbSceneParam._m0[_2153].y, _2102 * cbSceneParam._m0[_2153].x)));
        float _2192 = fma(_2114, cbSceneParam._m0[_2169].w, fma(_2110, cbSceneParam._m0[_2169].z, fma(_2106, cbSceneParam._m0[_2169].y, _2102 * cbSceneParam._m0[_2169].x)));
        float _2197 = cbSceneParam._m0[33u].z * _2192;
        float _2199 = cbSceneParam._m0[33u].w * _2192;
        float _2202 = fma(_2114, cbSceneParam._m0[_2161].w, fma(_2110, cbSceneParam._m0[_2161].z, fma(_2106, cbSceneParam._m0[_2161].y, _2102 * cbSceneParam._m0[_2161].x))) / _2192;
        float _2250 = (cbSceneParam._m0[33u].x - sqrt(((_2116 * _2116) + (_2115 * _2115)) + (_2117 * _2117))) * cbSceneParam._m0[33u].y;
        float _4560 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2257 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2197 + _2180) / _2192, (_2199 + _2184) / _2192), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2199 + _2180) / _2192, (_2184 - _2197) / _2192), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2180 - _2197) / _2192, (_2184 - _2199) / _2192), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2180 - _2199) / _2192, (_2197 + _2184) / _2192), _2202), 0.0)).x), vec4(0.25)));
        _2264 = 1.0 - (_2257 * cbSceneParam._m0[34u].x);
        _2265 = 1.0 - (_2257 * cbSceneParam._m0[34u].y);
        _2266 = 1.0 - (_2257 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2264 = 1.0;
        _2265 = 1.0;
        _2266 = 1.0;
    }
    float _2330;
    float _2332;
    float _2334;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2318 = fma(_2114, cbSceneParam._m0[63u].w, fma(_2110, cbSceneParam._m0[63u].z, fma(_2106, cbSceneParam._m0[63u].y, _2102 * cbSceneParam._m0[63u].x)));
        float _2319 = fma(_2114, cbSceneParam._m0[60u].w, fma(_2110, cbSceneParam._m0[60u].z, fma(_2106, cbSceneParam._m0[60u].y, _2102 * cbSceneParam._m0[60u].x))) / _2318;
        float _2320 = fma(_2114, cbSceneParam._m0[61u].w, fma(_2110, cbSceneParam._m0[61u].z, fma(_2106, cbSceneParam._m0[61u].y, _2102 * cbSceneParam._m0[61u].x))) / _2318;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2319 >= cbSceneParam._m0[64u].x) && (_2320 >= cbSceneParam._m0[64u].y)) && (_2319 <= cbSceneParam._m0[64u].z)) && (_2320 <= cbSceneParam._m0[64u].w))
        {
            float _2458 = fma(_2114, cbSceneParam._m0[62u].w, fma(_2110, cbSceneParam._m0[62u].z, fma(_2106, cbSceneParam._m0[62u].y, _2102 * cbSceneParam._m0[62u].x))) / _2318;
            float _2462 = isnan(cbSceneParam._m0[41u].w) ? _2458 : (isnan(_2458) ? cbSceneParam._m0[41u].w : max(_2458, cbSceneParam._m0[41u].w));
            float _2505 = (cbSceneParam._m0[33u].x - sqrt(((_2116 * _2116) + (_2115 * _2115)) + (_2117 * _2117))) * cbSceneParam._m0[33u].y;
            float _4576 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
            float _2512 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2319, cbSceneParam._m0[33u].w + _2320), _2462), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2319, _2320 - cbSceneParam._m0[33u].z), _2462), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2319 - cbSceneParam._m0[33u].z, _2320 - cbSceneParam._m0[33u].w), _2462), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2319 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2320), _2462), 0.0)).x), vec4(0.25)));
            float _2516 = 1.0 - (_2512 * cbSceneParam._m0[34u].x);
            float _2517 = 1.0 - (_2512 * cbSceneParam._m0[34u].y);
            float _2518 = 1.0 - (_2512 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2518) ? _2266 : (isnan(_2266) ? _2518 : min(_2266, _2518));
            frontier_phi_34_33_ladder_1 = isnan(_2517) ? _2265 : (isnan(_2265) ? _2517 : min(_2265, _2517));
            frontier_phi_34_33_ladder_2 = isnan(_2516) ? _2264 : (isnan(_2264) ? _2516 : min(_2264, _2516));
        }
        else
        {
            frontier_phi_34_33_ladder = _2266;
            frontier_phi_34_33_ladder_1 = _2265;
            frontier_phi_34_33_ladder_2 = _2264;
        }
        _2330 = frontier_phi_34_33_ladder_2;
        _2332 = frontier_phi_34_33_ladder_1;
        _2334 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2330 = _2264;
        _2332 = _2265;
        _2334 = _2266;
    }
    uvec4 _2339 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2341 = _2339.x * 14u;
    uint _2342 = _2341 + 13u;
    float _2349 = _1047 + (-1.0);
    float _2354 = (cbLight._m0[_2342].x * _2349) + 1.0;
    float _2355 = (cbLight._m0[_2342].y * _2349) + 1.0;
    float _2356 = (cbLight._m0[_2342].z * _2349) + 1.0;
    float _2357 = (cbLight._m0[_2342].w * _2349) + 1.0;
    uint _2358 = _2341 + 5u;
    float _2364 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
    uint _2368 = _2341 + 4u;
    float _2377 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
    uint _2381 = _2341 | 1u;
    float _2392 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_896, _897, _898));
    float _2395 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_896, _897, _898));
    float _4612 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _4623 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2400 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * 0.3183098733425140380859375;
    float _2402 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * 0.3183098733425140380859375;
    float _2409 = ((cbLight._m0[_2358].x * _2364) * _2402) + (((cbLight._m0[_2368].x * _2330) * _2377) * _2400);
    float _2410 = ((_2364 * cbLight._m0[_2358].y) * _2402) + (((cbLight._m0[_2368].y * _2332) * _2377) * _2400);
    float _2411 = ((_2364 * cbLight._m0[_2358].z) * _2402) + (((cbLight._m0[_2368].z * _2334) * _2377) * _2400);
    uvec4 _2415 = floatBitsToUint(cbLight._m0[_2341 + 12u]);
    bool _2417 = _2415.x == 0u;
    float _2519;
    float _2521;
    float _2523;
    if (_2417)
    {
        _2519 = _2409;
        _2521 = _2410;
        _2523 = _2411;
    }
    else
    {
        uint _2527 = _2341 + 6u;
        float _2543 = (dot(vec3(cbLight._m0[_2341 + 2u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2544 = _2543 * _2543;
        float _4634 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2545 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2546 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2519 = (((cbLight._m0[_2527].x * 0.3183098733425140380859375) * _2545) * _2546) + _2409;
        _2521 = (((cbLight._m0[_2527].y * 0.3183098733425140380859375) * _2545) * _2546) + _2410;
        _2523 = (((cbLight._m0[_2527].z * 0.3183098733425140380859375) * _2545) * _2546) + _2411;
    }
    bool _2526 = _2415.y == 0u;
    float _2581;
    float _2583;
    float _2585;
    if (_2526)
    {
        _2581 = _2519;
        _2583 = _2521;
        _2585 = _2523;
    }
    else
    {
        uint _2743 = _2341 + 7u;
        float _2759 = (dot(vec3(cbLight._m0[_2341 + 3u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2760 = _2759 * _2759;
        float _4650 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2761 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2762 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
        _2581 = (((cbLight._m0[_2743].x * 0.3183098733425140380859375) * _2761) * _2762) + _2519;
        _2583 = (((cbLight._m0[_2743].y * 0.3183098733425140380859375) * _2761) * _2762) + _2521;
        _2585 = (((cbLight._m0[_2743].z * 0.3183098733425140380859375) * _2761) * _2762) + _2523;
    }
    uint _2588 = _2341 + 8u;
    float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _899) * 0.949999988079071044921875);
    float _2602 = _2601 * _2601;
    float _2603 = cbLight._m0[_2341].x + _976;
    float _2604 = cbLight._m0[_2341].y + _977;
    float _2605 = cbLight._m0[_2341].z + _978;
    float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
    float _2610 = _2609 * _2603;
    float _2611 = _2609 * _2604;
    float _2612 = _2609 * _2605;
    float _2613 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2341].xyz));
    float _4666 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _4677 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _2617 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2618 = dot(vec3(_896, _897, _898), vec3(_2610, _2611, _2612));
    float _4688 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2621 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2622 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2610, _2611, _2612));
    float _4699 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2626 = _2602 * _2602;
    float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
    float _2641 = (exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2642 = 1.0 - _2602;
    float _2653 = (0.5 / (((_2617 * ((_2616 * _2642) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2642) + _2602) * _2616))) * _2616;
    float _4710 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2655 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
    uint _2669 = _2341 + 9u;
    float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _899) * 0.949999988079071044921875);
    float _2681 = _2680 * _2680;
    float _2682 = cbLight._m0[_2381].x + _976;
    float _2683 = cbLight._m0[_2381].y + _977;
    float _2684 = cbLight._m0[_2381].z + _978;
    float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
    float _2689 = _2688 * _2682;
    float _2690 = _2688 * _2683;
    float _2691 = _2688 * _2684;
    float _2692 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2381].xyz));
    float _4721 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2695 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2696 = dot(vec3(_896, _897, _898), vec3(_2689, _2690, _2691));
    float _4732 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2699 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2700 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2689, _2690, _2691));
    float _4743 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2704 = _2681 * _2681;
    float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
    float _2717 = (exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2718 = 1.0 - _2681;
    float _2728 = (0.5 / (((_2617 * ((_2695 * _2718) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2718) + _2681) * _2695))) * _2695;
    float _4754 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2730 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
    float _2740 = (((_2717 * cbLight._m0[_2669].x) * _2730) * _2364) + ((((cbLight._m0[_2588].x * _2330) * _2641) * _2655) * _2377);
    float _2741 = (((_2717 * cbLight._m0[_2669].y) * _2730) * _2364) + ((((cbLight._m0[_2588].y * _2332) * _2641) * _2655) * _2377);
    float _2742 = (((_2717 * cbLight._m0[_2669].z) * _2730) * _2364) + ((((cbLight._m0[_2588].z * _2334) * _2641) * _2655) * _2377);
    float _2798;
    float _2800;
    float _2802;
    if (_2417)
    {
        _2798 = _2740;
        _2800 = _2741;
        _2802 = _2742;
    }
    else
    {
        uint _2804 = _2341 + 2u;
        uint _2808 = _2341 + 10u;
        float _2822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2804].w)) * _899) * 0.949999988079071044921875);
        float _2823 = _2822 * _2822;
        float _2824 = cbLight._m0[_2804].x + _976;
        float _2825 = cbLight._m0[_2804].y + _977;
        float _2826 = cbLight._m0[_2804].z + _978;
        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
        float _2831 = _2830 * _2824;
        float _2832 = _2830 * _2825;
        float _2833 = _2830 * _2826;
        float _2834 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2804].xyz));
        float _4765 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2838 = dot(vec3(_896, _897, _898), vec3(_2831, _2832, _2833));
        float _4776 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
        float _2842 = dot(vec3(cbLight._m0[_2804].xyz), vec3(_2831, _2832, _2833));
        float _4787 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2846 = _2823 * _2823;
        float _2850 = ((_2841 * _2841) * (_2846 + (-1.0))) + 1.0;
        float _2859 = (exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2860 = 1.0 - _2823;
        float _2870 = (0.5 / (((_2617 * ((_2837 * _2860) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2860) + _2823) * _2837))) * _2837;
        float _4798 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2872 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2846 / ((_2850 * _2850) * 3.141590118408203125));
        float _2873 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2798 = (((_2859 * cbLight._m0[_2808].x) * _2872) * _2873) + _2740;
        _2800 = (((_2859 * cbLight._m0[_2808].y) * _2872) * _2873) + _2741;
        _2802 = (((_2859 * cbLight._m0[_2808].z) * _2872) * _2873) + _2742;
    }
    float _2904;
    float _2906;
    float _2908;
    if (_2526)
    {
        _2904 = _2798;
        _2906 = _2800;
        _2908 = _2802;
    }
    else
    {
        uint _2915 = _2341 + 3u;
        uint _2919 = _2341 + 11u;
        float _2933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2915].w)) * _899) * 0.949999988079071044921875);
        float _2934 = _2933 * _2933;
        float _2935 = cbLight._m0[_2915].x + _976;
        float _2936 = cbLight._m0[_2915].y + _977;
        float _2937 = cbLight._m0[_2915].z + _978;
        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
        float _2942 = _2941 * _2935;
        float _2943 = _2941 * _2936;
        float _2944 = _2941 * _2937;
        float _2945 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2915].xyz));
        float _4814 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2948 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2949 = dot(vec3(_896, _897, _898), vec3(_2942, _2943, _2944));
        float _4825 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2952 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2953 = dot(vec3(cbLight._m0[_2915].xyz), vec3(_2942, _2943, _2944));
        float _4836 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2957 = _2934 * _2934;
        float _2961 = ((_2952 * _2952) * (_2957 + (-1.0))) + 1.0;
        float _2970 = (exp2(log2(1.0 - (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2971 = 1.0 - _2934;
        float _2981 = (0.5 / (((_2617 * ((_2948 * _2971) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2971) + _2934) * _2948))) * _2948;
        float _4847 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2983 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2957 / ((_2961 * _2961) * 3.141590118408203125));
        float _2984 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
        _2904 = (((_2970 * cbLight._m0[_2919].x) * _2983) * _2984) + _2798;
        _2906 = (((_2970 * cbLight._m0[_2919].y) * _2983) * _2984) + _2800;
        _2908 = (((_2970 * cbLight._m0[_2919].z) * _2983) * _2984) + _2802;
    }
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    if (_2339.y == 0u)
    {
        uvec4 _3005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3006 = _3005.x;
        uint _3017 = uint((float(_3005.y) * floor(float(uint(cbSceneParam._m0[85u].y * _985) / _3006))) + floor(float(uint(cbSceneParam._m0[85u].x * _984) / _3006)));
        float _3027 = (log2(_2117 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3028 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        uint _3031 = uint(isnan(14.0) ? _3028 : (isnan(_3028) ? 14.0 : min(_3028, 14.0)));
        uvec4 _3036 = texelFetch(g_lightClusterGridBuffer, int(((_3031 << 2u) + (_3017 << 6u)) >> 2u));
        uint _3037 = _3036.x;
        uint _3038 = _3005.z;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        if (((((1u << ((_3038 >> 4u) & 15u)) + 4294967295u) & _3037) == 0u) || ((_3038 & 240u) == 0u))
        {
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
        }
        else
        {
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3126;
            float _3128;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            uint _3268 = 0u;
            uint _3277;
            bool _3278;
            for (;;)
            {
                _3277 = texelFetch(g_lightClassification, int((((_3031 << 5u) + (_3017 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                _3278 = _3277 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3278)
                {
                    frontier_phi_66_pred = _3267;
                    frontier_phi_66_pred_1 = _3266;
                    frontier_phi_66_pred_2 = _3265;
                    frontier_phi_66_pred_3 = _3264;
                    frontier_phi_66_pred_4 = _3263;
                    frontier_phi_66_pred_5 = _3262;
                }
                else
                {
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    uint _3392;
                    _3386 = _3262;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3267;
                    _3392 = _3277;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    for (;;)
                    {
                        uint _3396 = uint(findLSB(_3392)) + (_3268 << 5u);
                        uint _3393 = (_3392 + 4294967295u) & _3392;
                        uint _3398 = _3396 * 48u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 3u)).x));
                        uint _3418 = (_3396 * 48u) + 4u;
                        vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 3u)).x));
                        uint _3437 = (_3396 * 48u) + 8u;
                        vec3 _3448 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x));
                        float _3452 = _3412.x - _2115;
                        float _3453 = _3412.y - _2116;
                        float _3454 = _3412.z - _2117;
                        float _3455 = dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454));
                        float _3458 = inversesqrt(_3455);
                        float _3459 = _3458 * _3452;
                        float _3460 = _3458 * _3453;
                        float _3461 = _3458 * _3454;
                        float _3462 = dot(vec3(_1003, _1006, _1009), vec3(_3459, _3460, _3461));
                        float _3467 = 1.0 - (_3455 * _3412.w);
                        float _4873 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3468 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3469 = sqrt(_3455) * _3431.w;
                        float _3472 = 1.39999997615814208984375 / (_3469 + 1.39999997615814208984375);
                        float _3473 = _3472 * _3472;
                        float _3476 = ((1.0 - _3473) * _3462) + _3473;
                        float _3479 = _3469 * _3469;
                        float _3483 = ((isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0))) * _3468) / ((_3479 * 0.699999988079071044921875) + 1.0);
                        float _3487 = (-0.0) - _2115;
                        float _3488 = (-0.0) - _2116;
                        float _3489 = (-0.0) - _2117;
                        float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                        float _3494 = _3493 * _3487;
                        float _3495 = _3493 * _3488;
                        float _3496 = _3493 * _3489;
                        float _3503 = exp2(log2(1.0 / ((_3479 * 3.5) + 5.0)) * 0.25);
                        float _3504 = 1.0 - _1063;
                        float _3511 = sqrt(1.0 - ((1.0 - (_3504 * _3504)) * (1.0 - (_3503 * _3503))));
                        float _3512 = _3511 * _3511;
                        float _3513 = _3512 * _3512;
                        float _3514 = _3494 + _3459;
                        float _3515 = _3495 + _3460;
                        float _3516 = _3496 + _3461;
                        float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                        float _3524 = dot(vec3(_1003, _1006, _1009), vec3(_3494, _3495, _3496));
                        float _4889 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3527 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3528 = dot(vec3(_1003, _1006, _1009), vec3(_3520 * _3514, _3520 * _3515, _3520 * _3516));
                        float _4900 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3531 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3535 = ((_3531 * _3531) * (_3513 + (-1.0))) + 1.0;
                        float _3536 = _3472 * _3512;
                        float _3537 = _3536 * _3536;
                        float _3540 = ((1.0 - _3537) * _3462) + _3537;
                        float _4911 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3541 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3542 = 1.0 - _3512;
                        float _3552 = (0.5 / (((_3541 * ((_3527 * _3542) + _3512)) + 9.9999999392252902907785028219223e-09) + (((_3541 * _3542) + _3512) * _3527))) * _3541;
                        float _4922 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3563 = (((_3513 * 3.1415927410125732421875) * (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) / ((_3535 * _3535) * ((_3479 * 2.1991131305694580078125) + 3.141590118408203125))) * _3468;
                        _3321 = (_3483 * _3431.x) + _3389;
                        _3322 = (_3483 * _3431.y) + _3390;
                        _3323 = (_3483 * _3431.z) + _3391;
                        _3318 = (_3563 * _3448.x) + _3386;
                        _3319 = (_3563 * _3448.y) + _3387;
                        _3320 = (_3563 * _3448.z) + _3388;
                        if (_3393 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3386 = _3318;
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3323;
                            _3392 = _3393;
                        }
                    }
                    frontier_phi_66_pred = _3323;
                    frontier_phi_66_pred_1 = _3322;
                    frontier_phi_66_pred_2 = _3321;
                    frontier_phi_66_pred_3 = _3320;
                    frontier_phi_66_pred_4 = _3319;
                    frontier_phi_66_pred_5 = _3318;
                }
                _3128 = frontier_phi_66_pred;
                _3126 = frontier_phi_66_pred_1;
                _3124 = frontier_phi_66_pred_2;
                _3122 = frontier_phi_66_pred_3;
                _3120 = frontier_phi_66_pred_4;
                _3118 = frontier_phi_66_pred_5;
                uint _3269 = _3268 + 1u;
                if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3262 = _3118;
                    _3263 = _3120;
                    _3264 = _3122;
                    _3265 = _3124;
                    _3266 = _3126;
                    _3267 = _3128;
                    _3268 = _3269;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
        }
        uvec4 _3131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3132 = _3131.z;
        uint _3134 = (_3132 >> 8u) & 15u;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        if (((4294967295u << _3134) & _3037) == 0u)
        {
            _3230 = _3117;
            _3232 = _3119;
            _3234 = _3121;
            _3236 = _3123;
            _3238 = _3125;
            _3240 = _3127;
        }
        else
        {
            float _3255 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
            float _3256 = _3255 * _2115;
            float _3257 = _3255 * _2116;
            float _3258 = _3255 * _2117;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3134 < ((_3132 >> 12u) & 15u))
            {
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3369 = _3117;
                float _3370 = _3119;
                float _3371 = _3121;
                float _3372 = _3123;
                float _3373 = _3125;
                float _3374 = _3127;
                uint _3375 = _3134;
                uint _3384;
                bool _3385;
                for (;;)
                {
                    _3384 = texelFetch(g_lightClassification, int((((_3031 << 5u) + (_3017 << 9u)) + (_3375 << 2u)) >> 2u)).x;
                    _3385 = _3384 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3385)
                    {
                        frontier_phi_72_pred = _3374;
                        frontier_phi_72_pred_1 = _3373;
                        frontier_phi_72_pred_2 = _3372;
                        frontier_phi_72_pred_3 = _3371;
                        frontier_phi_72_pred_4 = _3370;
                        frontier_phi_72_pred_5 = _3369;
                    }
                    else
                    {
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3581 = _3369;
                        float _3582 = _3370;
                        float _3583 = _3371;
                        float _3584 = _3372;
                        float _3585 = _3373;
                        float _3586 = _3374;
                        uint _3587 = _3384;
                        uint _3588;
                        vec4 _3613;
                        float _3614;
                        vec4 _3629;
                        vec3 _3641;
                        vec4 _3656;
                        vec4 _3671;
                        float _3717;
                        bool _3718;
                        for (;;)
                        {
                            uint _3598 = ((_3375 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3587));
                            _3588 = (_3587 + 4294967295u) & _3587;
                            uint _3600 = _3598 * 40u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3614 = _3613.w;
                            uint _3616 = (_3598 * 40u) + 4u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3598 * 40u) + 8u;
                            _3641 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x));
                            uint _3643 = (_3598 * 40u) + 16u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3598 * 40u) + 20u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3598 * 40u) + 24u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3692 = (_3598 * 40u) + 28u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3717 = fma(_2117, _3705.z, fma(_2116, _3705.y, _3705.x * _2115)) + _3705.w;
                            _3718 = !((fma(_2117, _3686.z, fma(_2116, _3686.y, _3686.x * _2115)) + _3686.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3718)
                            {
                                float _3745 = _3613.x - _2115;
                                float _3746 = _3613.y - _2116;
                                float _3747 = _3613.z - _2117;
                                float _3748 = dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747));
                                float _3751 = inversesqrt(_3748);
                                float _3752 = _3751 * _3745;
                                float _3753 = _3751 * _3746;
                                float _3754 = _3751 * _3747;
                                float _3758 = 1.0 - (_3748 / (_3614 * _3614));
                                float _4933 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3763 = sqrt(_3748) * _3629.w;
                                float _3765 = 1.39999997615814208984375 / (_3763 + 1.39999997615814208984375);
                                float _3766 = _3765 * _3765;
                                float _3769 = ((1.0 - _3766) * dot(vec3(_3752, _3753, _3754), vec3(_1003, _1006, _1009))) + _3766;
                                float _3772 = _3763 * _3763;
                                float _3776 = (fma(_2117, _3656.z, fma(_2116, _3656.y, _3656.x * _2115)) + _3656.w) / _3717;
                                float _3777 = (fma(_2117, _3671.z, fma(_2116, _3671.y, _3671.x * _2115)) + _3671.w) / _3717;
                                float _3781 = 1.0 - dot(vec2(_3776, _3777), vec2(_3776, _3777));
                                float _4949 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3783 = _3782 * (((isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0))) * _3759) / ((_3772 * 0.699999988079071044921875) + 1.0));
                                float _3795 = exp2(log2(1.0 / ((_3772 * 3.5) + 5.0)) * 0.25);
                                float _3796 = 1.0 - _1063;
                                float _3803 = sqrt(1.0 - ((1.0 - (_3796 * _3796)) * (1.0 - (_3795 * _3795))));
                                float _3804 = _3803 * _3803;
                                float _3805 = _3804 * _3804;
                                float _3806 = _3752 - _3256;
                                float _3807 = _3753 - _3257;
                                float _3808 = _3754 - _3258;
                                float _3812 = inversesqrt(dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808)));
                                float _3816 = dot(vec3(_1003, _1006, _1009), vec3((-0.0) - _3256, (-0.0) - _3257, (-0.0) - _3258));
                                float _4960 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3820 = dot(vec3(_1003, _1006, _1009), vec3(_3812 * _3806, _3812 * _3807, _3812 * _3808));
                                float _4971 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3827 = ((_3823 * _3823) * (_3805 + (-1.0))) + 1.0;
                                float _3828 = _3765 * _3804;
                                float _3829 = _3828 * _3828;
                                float _3835 = ((1.0 - _3829) * dot(vec3(_1003, _1006, _1009), vec3(_3752, _3753, _3754))) + _3829;
                                float _4982 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3837 = 1.0 - _3804;
                                float _3847 = (0.5 / (((_3836 * ((_3819 * _3837) + _3804)) + 9.9999999392252902907785028219223e-09) + (((_3836 * _3837) + _3804) * _3819))) * _3836;
                                float _4993 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3857 = (_3782 * _3759) * (((_3805 * 3.1415927410125732421875) * (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) / ((_3827 * _3827) * ((_3772 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3783 * _3629.y;
                                frontier_phi_78_pred_1 = _3783 * _3629.x;
                                frontier_phi_78_pred_2 = _3857 * _3641.z;
                                frontier_phi_78_pred_3 = _3857 * _3641.y;
                                frontier_phi_78_pred_4 = _3857 * _3641.x;
                                frontier_phi_78_pred_5 = _3783 * _3629.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3865 = frontier_phi_78_pred;
                            _3864 = frontier_phi_78_pred_1;
                            _3863 = frontier_phi_78_pred_2;
                            _3862 = frontier_phi_78_pred_3;
                            _3861 = frontier_phi_78_pred_4;
                            _3866 = frontier_phi_78_pred_5;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            if (_3588 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3588;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3573;
                        frontier_phi_72_pred_1 = _3572;
                        frontier_phi_72_pred_2 = _3571;
                        frontier_phi_72_pred_3 = _3570;
                        frontier_phi_72_pred_4 = _3569;
                        frontier_phi_72_pred_5 = _3568;
                    }
                    _3241 = frontier_phi_72_pred;
                    _3239 = frontier_phi_72_pred_1;
                    _3237 = frontier_phi_72_pred_2;
                    _3235 = frontier_phi_72_pred_3;
                    _3233 = frontier_phi_72_pred_4;
                    _3231 = frontier_phi_72_pred_5;
                    uint _3376 = _3375 + 1u;
                    if (_3376 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3369 = _3231;
                        _3370 = _3233;
                        _3371 = _3235;
                        _3372 = _3237;
                        _3373 = _3239;
                        _3374 = _3241;
                        _3375 = _3376;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3241;
                frontier_phi_60_61_ladder_1 = _3239;
                frontier_phi_60_61_ladder_2 = _3235;
                frontier_phi_60_61_ladder_3 = _3233;
                frontier_phi_60_61_ladder_4 = _3231;
                frontier_phi_60_61_ladder_5 = _3237;
            }
            else
            {
                frontier_phi_60_61_ladder = _3127;
                frontier_phi_60_61_ladder_1 = _3125;
                frontier_phi_60_61_ladder_2 = _3121;
                frontier_phi_60_61_ladder_3 = _3119;
                frontier_phi_60_61_ladder_4 = _3117;
                frontier_phi_60_61_ladder_5 = _3123;
            }
            _3230 = frontier_phi_60_61_ladder_4;
            _3232 = frontier_phi_60_61_ladder_3;
            _3234 = frontier_phi_60_61_ladder_2;
            _3236 = frontier_phi_60_61_ladder_5;
            _3238 = frontier_phi_60_61_ladder_1;
            _3240 = frontier_phi_60_61_ladder;
        }
        float _3245 = isnan(1.0) ? _1047 : (isnan(_1047) ? 1.0 : min(_1047, 1.0));
        _3050 = (_3245 * _3236) + _2581;
        _3052 = (_3245 * _3238) + _2583;
        _3054 = (_3245 * _3240) + _2585;
        _3056 = ((_3230 * 0.039999999105930328369140625) * _3245) + _2904;
        _3058 = ((_3232 * 0.039999999105930328369140625) * _3245) + _2906;
        _3060 = ((_3234 * 0.039999999105930328369140625) * _3245) + _2908;
    }
    else
    {
        _3050 = _2581;
        _3052 = _2583;
        _3054 = _2585;
        _3056 = _2904;
        _3058 = _2906;
        _3060 = _2908;
    }
    float _5009 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _5020 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _5031 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    uint _3080 = _278 + 6u;
    float _3088 = _984 / cbSceneParam._m0[86u].x;
    float _3089 = _985 / cbSceneParam._m0[86u].y;
    vec4 _3103 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3088, _3089, (log2((isnan(cbSceneParam._m0[77u].w) ? _917 : (isnan(_917) ? cbSceneParam._m0[77u].w : min(_917, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3105 = _3103.x;
    float _3106 = _3103.y;
    float _3107 = _3103.z;
    float _3108 = _3103.w;
    float _3180;
    float _3182;
    float _3184;
    float _3186;
    if (_917 > cbSceneParam._m0[78u].w)
    {
        float _3142 = isnan(_917) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _917 : min(cbSceneParam._m0[80u].w, _917));
        float _3143 = _3142 / _917;
        float _3154 = _3143 * _969;
        float _3155 = _970 * _3143;
        float _3156 = (-0.0) - _3155;
        float _3158 = _3143 * _971;
        float _3160 = (cbSceneParam._m0[77u].w * _3156) / _3142;
        float _3161 = _3160 + cbSceneParam._m0[79u].w;
        float _3162 = cbSceneParam._m0[79u].w - _3155;
        float _3168 = sqrt(((_3154 * _3154) + (_3155 * _3155)) + (_3158 * _3158));
        float _3171 = (1.0 - (cbSceneParam._m0[77u].w / _3142)) * _3168;
        float _3176 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3178 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3331;
        if (abs((_3156 - _3160) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3331 = ((((_3161 > 0.0) ? exp2(_3176 * _3161) : (2.0 - exp2(_3178 * _3161))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3171;
        }
        else
        {
            float _3291 = 1.0 / cbSceneParam._m0[80u].x;
            float _3292 = isnan(_3162) ? _3161 : (isnan(_3161) ? _3162 : max(_3161, _3162));
            float _3293 = isnan(_3162) ? _3161 : (isnan(_3161) ? _3162 : min(_3161, _3162));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            float _3303 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : min(_3293, 0.0));
            _3331 = ((abs(_3168 / _3156) * cbSceneParam._m0[80u].y) * ((((_3302 - _3303) * 2.0) - ((exp2(_3176 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0)))) - exp2(_3176 * (isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))))) * _3291)) - ((exp2(_3178 * _3302) - exp2(_3178 * _3303)) * _3291))) + (_3171 * cbSceneParam._m0[80u].z);
        }
        vec4 _3333 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3088, _3089, 1.0), 0.0);
        float _3342 = exp2((_3331 * (-1.44269502162933349609375)) * (1.0 - _3333.w));
        float _3343 = log2(_3342);
        float _3359 = log2(_3108);
        _3180 = (exp2(_3359 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].x)) * _3333.x) / cbSceneParam._m0[78u].x)) + _3105;
        _3182 = (exp2(_3359 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].y)) * _3333.y) / cbSceneParam._m0[78u].y)) + _3106;
        _3184 = (exp2(_3359 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].z)) * _3333.z) / cbSceneParam._m0[78u].z)) + _3107;
        _3186 = _3342 * _3108;
    }
    else
    {
        _3180 = _3105;
        _3182 = _3106;
        _3184 = _3107;
        _3186 = _3108;
    }
    float _3198 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3199 = _3198 == 3.0;
    float _3200 = log2(_3186);
    float _3207 = exp2(_3200 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_3050 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1047))) + ((_3056 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1850)) * cbPerFrame._m0[3u].x));
    float _3208 = exp2(_3200 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_3052 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1047))) + ((_3058 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1850)) * cbPerFrame._m0[3u].x));
    float _3209 = exp2(_3200 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0))) * (_3054 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1047))) + ((_3060 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1850)) * cbPerFrame._m0[3u].x));
    float _3218 = (_3198 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3218 * (_3199 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3180)));
    SV_Target.y = _3218 * (_3199 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3182)));
    SV_Target.z = _3218 * (_3199 ? _3209 : (_3209 + (cbSceneParam._m0[72u].w * _3184)));
    SV_Target.w = cbInstanceData._m0[_3080].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3080].w;
}


