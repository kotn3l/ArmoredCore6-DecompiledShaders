#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1487;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4073 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4084 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4095 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _453 = _451.x;
    float _465 = dot(vec4(_453, _451.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _482 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _416.x) * 2.0) - ((((_453 - _465) * cbMtdParam._m0[24u].z) + _465) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4106 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _490 = (_483 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376;
    float _491 = (_483 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377;
    float _492 = (_483 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378;
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _531 = _529.x;
    float _541 = dot(vec4(_531, _529.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _555 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _416.y) * 2.0) - ((((_531 - _541) * cbMtdParam._m0[24u].z) + _541) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4117 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _566 = (_345.x * cbMtdParam._m0[9u].x) * ((_556 * ((_509.x * cbMtdParam._m0[13u].x) - _490)) + _490);
    float _567 = (_345.y * cbMtdParam._m0[9u].y) * ((_556 * ((_509.y * cbMtdParam._m0[13u].y) - _491)) + _491);
    float _568 = (_345.z * cbMtdParam._m0[9u].z) * ((_556 * ((_509.z * cbMtdParam._m0[13u].z) - _492)) + _492);
    float _572 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _566;
    float _575 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _567;
    float _578 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _568;
    float _586 = (((_566 - _572) * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) + _572) * 4.55000019073486328125;
    float _588 = (((_567 - _575) * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) + _575) * 4.55000019073486328125;
    float _590 = (((_568 - _578) * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) + _578) * 4.55000019073486328125;
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _670 = _668.x;
    float _671 = _668.y;
    float _672 = _668.z;
    float _679 = ((_651.x - _670) * _483) + _670;
    float _680 = ((_651.y - _671) * _483) + _671;
    float _681 = ((_651.z - _672) * _483) + _672;
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _706 = ((_693.z - _681) * _556) + _681;
    float _709 = ((((_693.x - _679) * _556) + _679) * 2.0) + (-1.0);
    float _710 = ((((_693.y - _680) * _556) + _680) * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _4128 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _716 = sqrt(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))));
    vec4 _730 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _755 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _757 = _755.x;
    float _758 = 1.0 - _757;
    float _764 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _767 = ((isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : min(_764, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _776 = (_767 - ((((((_757 - _758) * cbMtdParam._m0[24u].w) + _758) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _767))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4149 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _777 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _784 = (_777 * ((_609.x * cbMtdParam._m0[18u].x) - _586)) + _586;
    float _785 = (_777 * ((_609.y * cbMtdParam._m0[18u].y) - _588)) + _588;
    float _786 = (_777 * ((_609.z * cbMtdParam._m0[18u].z) - _590)) + _590;
    vec4 _798 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _800 = _798.x;
    float _801 = 1.0 - _800;
    float _826 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_800 - _801) * cbMtdParam._m0[24u].y) + _801) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4160 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _827 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _835 = ((((cbMtdParam._m0[10u].x - _784) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _827) + _784;
    float _836 = ((((cbMtdParam._m0[10u].y - _785) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _827) + _785;
    float _837 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _786)) * _827) + _786;
    float _842 = (((_628.z - _706) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _706;
    float _846 = ((_730.z - _842) * cbMtdParam._m0[19u].w) + _842;
    vec4 _860 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _867 = (_860.x * 2.0) + (-1.0);
    float _868 = (_860.y * 2.0) + (-1.0);
    float _869 = dot(vec2(_867, _868), vec2(_867, _868));
    float _4171 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _877 = (_777 * (_860.z - _846)) + _846;
    float _880 = ((cbMtdParam._m0[23u].y - _877) * _827) + _877;
    vec4 _901 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _907 = (_901.x * 2.0) + (-1.0);
    float _908 = (_901.y * 2.0) + (-1.0);
    float _909 = dot(vec2(_907, _908), vec2(_907, _908));
    float _4182 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _923 = (_709 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_628.x * 2.0) + (-1.0)))) + (((_730.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _924 = (_710 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_628.y * 2.0) + (-1.0)))) + (((_730.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _936 = (((_867 - _923) + (cbMtdParam._m0[21u].x * _923)) * _777) + _923;
    float _937 = (((_868 - _924) + (cbMtdParam._m0[21u].x * _924)) * _777) + _924;
    float _938 = (_777 * (sqrt(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) - _716)) + _716;
    float _949 = (((_907 - _936) + (_936 * cbMtdParam._m0[22u].z)) * _827) + _936;
    float _950 = (((_908 - _937) + (_937 * cbMtdParam._m0[22u].z)) * _827) + _937;
    float _951 = ((sqrt(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) - _938) * _827) + _938;
    float _953 = cbMtdParam._m0[22u].x + _730.w;
    float _956 = fma(_951, _257 * NORMAL.x, fma(_950, _264 * TANGENT.x, (_250 * _242) * _949));
    float _959 = fma(_951, _257 * NORMAL.y, fma(_950, _264 * TANGENT.y, (_250 * _243) * _949));
    float _962 = fma(_951, _257 * NORMAL.z, fma(_950, _264 * TANGENT.z, (_250 * _244) * _949));
    float _966 = inversesqrt(dot(vec3(_956, _959, _962), vec3(_956, _959, _962)));
    float _967 = _966 * _956;
    float _968 = _966 * _959;
    float _969 = _966 * _962;
    float _4193 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _970 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _4215 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4226 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4237 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _988 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1038 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1028);
    float _1039 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1028);
    float _1040 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1028);
    float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
    float _1045 = _1038 * _1044;
    float _1046 = _1039 * _1044;
    float _1047 = _1040 * _1044;
    float _1053 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1054 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1072 = fma(_969, cbSceneParam._m0[5u].z, fma(_968, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _967));
    float _1075 = fma(_969, cbSceneParam._m0[6u].z, fma(_968, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _967));
    float _1078 = fma(_969, cbSceneParam._m0[7u].z, fma(_968, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _967));
    uint _1092 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1098 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * cbInstanceData._m0[_1092].x;
    float _1099 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * cbInstanceData._m0[_1092].y;
    float _1100 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * cbInstanceData._m0[_1092].z;
    float _4248 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    vec4 _1112 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1053, cbSceneParam._m0[86u].y * _1054));
    float _1116 = ((isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * TEXCOORD_5.w) * _1112.x;
    float _1117 = dot(vec3(_967, _968, _969), vec3(_1045, _1046, _1047));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _967) - _1045;
    float _1125 = (_1120 * _968) - _1046;
    float _1126 = (_1120 * _969) - _1047;
    float _1130 = abs(dot(vec3(_1045, _1046, _1047), vec3(_967, _968, _969)));
    float _4281 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_970);
    float _1145 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1185 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1486;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1211 = fma(_1185, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177));
        float _1215 = fma(_1185, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177));
        float _1219 = fma(_1185, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177));
        float _1244 = _1177 + _967;
        float _1245 = _1181 + _968;
        float _1246 = _1185 + _969;
        float _1256 = fma(_1246, cbModelParam._m0[26u].z, fma(_1245, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1244)) - _1211;
        float _1257 = fma(_1246, cbModelParam._m0[27u].z, fma(_1245, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1244)) - _1215;
        float _1258 = fma(_1246, cbModelParam._m0[28u].z, fma(_1245, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1244)) - _1219;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1211 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1215 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[34u].z) + ((((((_1219 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1314 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1280.x + (-0.5));
        float _1316 = _1314 * (_1280.y + (-0.5));
        float _1317 = _1314 * (_1280.z + (-0.5));
        float _1324 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1287.x + (-0.5));
        float _1326 = _1324 * (_1287.y + (-0.5));
        float _1327 = _1324 * (_1287.z + (-0.5));
        float _1334 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1294.x + (-0.5));
        float _1336 = _1334 * (_1294.y + (-0.5));
        float _1337 = _1334 * (_1294.z + (-0.5));
        float _1344 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1301.x + (-0.5));
        float _1346 = _1344 * (_1301.y + (-0.5));
        float _1347 = _1344 * (_1301.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1368 = (dot(vec3(_967, _968, _969), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1378 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4329 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1380 + 1.0))) + _1385) * _1348;
        float _1395 = _1316 * 0.5;
        float _1396 = _1326 * 0.5;
        float _1397 = _1336 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_967, _968, _969), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4362 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1422 + 1.0))) + _1427) * _1349;
        float _1437 = _1317 * 0.5;
        float _1438 = _1327 * 0.5;
        float _1439 = _1337 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_967, _968, _969), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4395 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1464 + 1.0))) + _1469) * _1350;
        _1486 = _1317;
        _1488 = _1316;
        _1489 = _1315;
        _1490 = _1327;
        _1491 = _1326;
        _1492 = _1325;
        _1493 = _1337;
        _1494 = _1336;
        _1495 = _1335;
        _1496 = _1350;
        _1497 = _1349;
        _1498 = _1348;
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    }
    else
    {
        _1486 = _1487;
        _1488 = _1487;
        _1489 = _1487;
        _1490 = _1487;
        _1491 = _1487;
        _1492 = _1487;
        _1493 = _1487;
        _1494 = _1487;
        _1495 = _1487;
        _1496 = _1487;
        _1497 = _1487;
        _1498 = _1487;
        _1499 = 0.0;
        _1500 = 0.0;
        _1501 = 0.0;
    }
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1525 = fma(_1185, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1177));
        float _1529 = fma(_1185, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1177));
        float _1533 = fma(_1185, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1177));
        float _1556 = _1177 + _967;
        float _1557 = _1181 + _968;
        float _1558 = _1185 + _969;
        float _1568 = fma(_1558, cbModelParam._m0[30u].z, fma(_1557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1556)) - _1525;
        float _1569 = fma(_1558, cbModelParam._m0[31u].z, fma(_1557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1556)) - _1529;
        float _1570 = fma(_1558, cbModelParam._m0[32u].z, fma(_1557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1556)) - _1533;
        float _1574 = inversesqrt(dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570)));
        float _1587 = ((_1574 * _1568) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1525 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1574 * _1569) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1529 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1574 * _1570) / cbModelParam._m0[35u].z) + ((((((_1533 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        float _1624 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1591.x + (-0.5));
        float _1626 = _1624 * (_1591.y + (-0.5));
        float _1627 = _1624 * (_1591.z + (-0.5));
        float _1634 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1598.x + (-0.5));
        float _1636 = _1634 * (_1598.y + (-0.5));
        float _1637 = _1634 * (_1598.z + (-0.5));
        float _1644 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1605.x + (-0.5));
        float _1646 = _1644 * (_1605.y + (-0.5));
        float _1647 = _1644 * (_1605.z + (-0.5));
        float _1654 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1612.x + (-0.5));
        float _1656 = _1654 * (_1612.y + (-0.5));
        float _1657 = _1654 * (_1612.z + (-0.5));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = _1625 * 0.5;
        float _1662 = _1635 * 0.5;
        float _1663 = _1645 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_967, _968, _969), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4458 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1688 + 1.0))) + _1693) * _1658;
        float _1703 = _1626 * 0.5;
        float _1704 = _1636 * 0.5;
        float _1705 = _1646 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_967, _968, _969), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4469 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4480 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4491 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_1730 + 1.0))) + _1735) * _1659;
        float _1745 = _1627 * 0.5;
        float _1746 = _1637 * 0.5;
        float _1747 = _1647 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_967, _968, _969), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4502 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4513 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4524 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_1772 + 1.0))) + _1777) * _1660;
        _1794 = _1627;
        _1795 = _1626;
        _1796 = _1625;
        _1797 = _1637;
        _1798 = _1636;
        _1799 = _1635;
        _1800 = _1647;
        _1801 = _1646;
        _1802 = _1645;
        _1803 = _1660;
        _1804 = _1659;
        _1805 = _1658;
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
    }
    else
    {
        _1794 = _1487;
        _1795 = _1487;
        _1796 = _1487;
        _1797 = _1487;
        _1798 = _1487;
        _1799 = _1487;
        _1800 = _1487;
        _1801 = _1487;
        _1802 = _1487;
        _1803 = _1487;
        _1804 = _1487;
        _1805 = _1487;
        _1806 = 0.0;
        _1807 = 0.0;
        _1808 = 0.0;
    }
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1499)) + _1499;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1500)) + _1500;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1501)) + _1501;
    float _1841 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1818));
    float _1862 = _1124 * 0.5;
    float _1863 = _1125 * 0.5;
    float _1864 = _1126 * 0.5;
    float _1865 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1868 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1871 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1905;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1878 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1486, _1490, _1493, _1496));
        float _1882 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1488, _1491, _1494, _1497));
        float _1886 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1489, _1492, _1495, _1498));
        float _1893 = dot(vec4(cbModelParam._m0[39u]), vec4(_1862, _1863, _1864, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1916;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1907 = dot(vec4(cbModelParam._m0[40u]), vec4(_1862, _1863, _1864, 1.0));
        _1916 = dot(vec3(isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1907) ? 0.0 : (isnan(0.0) ? _1907 : max(0.0, _1907))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1916 = 1.0;
    }
    float _1920 = (_1916 * cbModelParam._m0[1u].x) + (_1905 * (1.0 - cbModelParam._m0[1u].x));
    float _1930 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _970);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1930 : min(cbModelParam._m0[25u].z, _1930));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1978 = fma(_1185, cbModelParam._m0[13u].z, fma(_1181, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177)) + cbModelParam._m0[13u].w;
        float _1982 = fma(_1185, cbModelParam._m0[14u].z, fma(_1181, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177)) + cbModelParam._m0[14u].w;
        float _1986 = fma(_1185, cbModelParam._m0[15u].z, fma(_1181, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177)) + cbModelParam._m0[15u].w;
        float _1989 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _1992 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _1995 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2023;
        if (_1989 > 0.0)
        {
            _2023 = abs((1.0 - _1978) / _1989);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1978 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2023 = frontier_phi_14_12_ladder;
        }
        float _2192;
        if (_1992 > 0.0)
        {
            _2192 = abs((1.0 - _1982) / _1992);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1982 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2192 = frontier_phi_23_19_ladder;
        }
        float _2487;
        if (_1995 > 0.0)
        {
            _2487 = abs((1.0 - _1986) / _1995);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1986 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2487 = frontier_phi_35_30_ladder;
        }
        float _2489 = isnan(_2192) ? _2023 : (isnan(_2023) ? _2192 : min(_2023, _2192));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1989) + _1978;
        float _2495 = (_2490 * _1992) + _1982;
        float _2496 = (_2490 * _1995) + _1986;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2497;
        float _2501 = _2497 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 > _2501) || ((_2495 < _2499) || ((_2494 < _2499) || (_2494 > _2501))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2496, cbModelParam._m0[9u].z, fma(_2495, cbModelParam._m0[9u].y, _2494 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2496, cbModelParam._m0[10u].z, fma(_2495, cbModelParam._m0[10u].y, _2494 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2496, cbModelParam._m0[11u].z, fma(_2495, cbModelParam._m0[11u].y, _2494 * cbModelParam._m0[11u].x))), _1931);
            frontier_phi_13_35_ladder = _2641.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2641.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2641.x * cbModelParam._m0[1u].y;
        }
        _2011 = frontier_phi_13_35_ladder_2;
        _2013 = frontier_phi_13_35_ladder_1;
        _2015 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1931);
        _2011 = _1999.x * cbModelParam._m0[1u].y;
        _2013 = _1999.y * cbModelParam._m0[1u].y;
        _2015 = _1999.z * cbModelParam._m0[1u].y;
    }
    float _2019 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _970);
    float _2020 = isnan(_2019) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2019 : min(cbModelParam._m0[25u].w, _2019));
    float _2109;
    float _2111;
    float _2113;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2073 = fma(_1185, cbModelParam._m0[21u].z, fma(_1181, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177)) + cbModelParam._m0[21u].w;
        float _2077 = fma(_1185, cbModelParam._m0[22u].z, fma(_1181, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177)) + cbModelParam._m0[22u].w;
        float _2081 = fma(_1185, cbModelParam._m0[23u].z, fma(_1181, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177)) + cbModelParam._m0[23u].w;
        float _2084 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2087 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2090 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2197;
        if (_2084 > 0.0)
        {
            _2197 = abs((1.0 - _2073) / _2084);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2073 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2197 = frontier_phi_25_21_ladder;
        }
        float _2514;
        if (_2087 > 0.0)
        {
            _2514 = abs((1.0 - _2077) / _2087);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2077 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2514 = frontier_phi_37_32_ladder;
        }
        float _2841;
        if (_2090 > 0.0)
        {
            _2841 = abs((1.0 - _2081) / _2090);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2081 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2841 = frontier_phi_47_44_ladder;
        }
        float _2843 = isnan(_2514) ? _2197 : (isnan(_2197) ? _2514 : min(_2197, _2514));
        float _2844 = isnan(_2841) ? _2843 : (isnan(_2843) ? _2841 : min(_2843, _2841));
        float _2848 = (_2844 * _2084) + _2073;
        float _2849 = (_2844 * _2087) + _2077;
        float _2850 = (_2844 * _2090) + _2081;
        float _2851 = _2844 * 9.9999997473787516355514526367188e-05;
        float _2852 = (-1.0) - _2851;
        float _2854 = _2851 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2850 > _2854) || ((_2850 < _2852) || ((_2849 > _2854) || ((_2849 < _2852) || ((_2848 < _2852) || (_2848 > _2854))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2850, cbModelParam._m0[17u].z, fma(_2849, cbModelParam._m0[17u].y, _2848 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2850, cbModelParam._m0[18u].z, fma(_2849, cbModelParam._m0[18u].y, _2848 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2850, cbModelParam._m0[19u].z, fma(_2849, cbModelParam._m0[19u].y, _2848 * cbModelParam._m0[19u].x))), _2020);
            frontier_phi_22_47_ladder = _2968.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2968.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2968.x * cbModelParam._m0[1u].z;
        }
        _2109 = frontier_phi_22_47_ladder_2;
        _2111 = frontier_phi_22_47_ladder_1;
        _2113 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2020);
        _2109 = _2093.x * cbModelParam._m0[1u].z;
        _2111 = _2093.y * cbModelParam._m0[1u].z;
        _2113 = _2093.z * cbModelParam._m0[1u].z;
    }
    float _2125 = ((((1.0 - _1145) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1145 * _1132)) * _1116;
    float _2126 = _2125 * ((cbModelParam._m0[1u].w * (_2109 - _2011)) + _2011);
    float _2127 = _2125 * ((cbModelParam._m0[1u].w * (_2111 - _2013)) + _2013);
    float _2128 = _2125 * ((cbModelParam._m0[1u].w * (_2113 - _2015)) + _2015);
    float _2131 = fma(_2128, cbSceneParam._m0[89u].z, fma(_2127, cbSceneParam._m0[89u].y, _2126 * cbSceneParam._m0[89u].x));
    float _2134 = fma(_2128, cbSceneParam._m0[90u].z, fma(_2127, cbSceneParam._m0[90u].y, _2126 * cbSceneParam._m0[90u].x));
    float _2137 = fma(_2128, cbSceneParam._m0[91u].z, fma(_2127, cbSceneParam._m0[91u].y, _2126 * cbSceneParam._m0[91u].x));
    float _2171 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2179 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2183 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2184 = _2171 / _2183;
    float _2185 = _2175 / _2183;
    float _2186 = _2179 / _2183;
    float _2333;
    float _2334;
    float _2335;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2213 = ((uint(_2186 > cbSceneParam._m0[59u].y) + uint(_2186 > cbSceneParam._m0[59u].x)) + uint(_2186 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2214 = _2213 + 43u;
        uint _2222 = _2213 + 44u;
        uint _2230 = _2213 + 45u;
        uint _2238 = _2213 + 46u;
        float _2249 = fma(_2183, cbSceneParam._m0[_2214].w, fma(_2179, cbSceneParam._m0[_2214].z, fma(_2175, cbSceneParam._m0[_2214].y, _2171 * cbSceneParam._m0[_2214].x)));
        float _2253 = fma(_2183, cbSceneParam._m0[_2222].w, fma(_2179, cbSceneParam._m0[_2222].z, fma(_2175, cbSceneParam._m0[_2222].y, _2171 * cbSceneParam._m0[_2222].x)));
        float _2261 = fma(_2183, cbSceneParam._m0[_2238].w, fma(_2179, cbSceneParam._m0[_2238].z, fma(_2175, cbSceneParam._m0[_2238].y, _2171 * cbSceneParam._m0[_2238].x)));
        float _2266 = cbSceneParam._m0[33u].z * _2261;
        float _2268 = cbSceneParam._m0[33u].w * _2261;
        float _2271 = fma(_2183, cbSceneParam._m0[_2230].w, fma(_2179, cbSceneParam._m0[_2230].z, fma(_2175, cbSceneParam._m0[_2230].y, _2171 * cbSceneParam._m0[_2230].x))) / _2261;
        float _2319 = (cbSceneParam._m0[33u].x - sqrt(((_2185 * _2185) + (_2184 * _2184)) + (_2186 * _2186))) * cbSceneParam._m0[33u].y;
        float _4650 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2326 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2266 + _2249) / _2261, (_2268 + _2253) / _2261), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 + _2249) / _2261, (_2253 - _2266) / _2261), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2249 - _2266) / _2261, (_2253 - _2268) / _2261), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2249 - _2268) / _2261, (_2266 + _2253) / _2261), _2271), 0.0)).x), vec4(0.25)));
        _2333 = 1.0 - (_2326 * cbSceneParam._m0[34u].x);
        _2334 = 1.0 - (_2326 * cbSceneParam._m0[34u].y);
        _2335 = 1.0 - (_2326 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2333 = 1.0;
        _2334 = 1.0;
        _2335 = 1.0;
    }
    float _2399;
    float _2401;
    float _2403;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2387 = fma(_2183, cbSceneParam._m0[63u].w, fma(_2179, cbSceneParam._m0[63u].z, fma(_2175, cbSceneParam._m0[63u].y, _2171 * cbSceneParam._m0[63u].x)));
        float _2388 = fma(_2183, cbSceneParam._m0[60u].w, fma(_2179, cbSceneParam._m0[60u].z, fma(_2175, cbSceneParam._m0[60u].y, _2171 * cbSceneParam._m0[60u].x))) / _2387;
        float _2389 = fma(_2183, cbSceneParam._m0[61u].w, fma(_2179, cbSceneParam._m0[61u].z, fma(_2175, cbSceneParam._m0[61u].y, _2171 * cbSceneParam._m0[61u].x))) / _2387;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2388 >= cbSceneParam._m0[64u].x) && (_2389 >= cbSceneParam._m0[64u].y)) && (_2388 <= cbSceneParam._m0[64u].z)) && (_2389 <= cbSceneParam._m0[64u].w))
        {
            float _2527 = fma(_2183, cbSceneParam._m0[62u].w, fma(_2179, cbSceneParam._m0[62u].z, fma(_2175, cbSceneParam._m0[62u].y, _2171 * cbSceneParam._m0[62u].x))) / _2387;
            float _2531 = isnan(cbSceneParam._m0[41u].w) ? _2527 : (isnan(_2527) ? cbSceneParam._m0[41u].w : max(_2527, cbSceneParam._m0[41u].w));
            float _2574 = (cbSceneParam._m0[33u].x - sqrt(((_2185 * _2185) + (_2184 * _2184)) + (_2186 * _2186))) * cbSceneParam._m0[33u].y;
            float _4666 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
            float _2581 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2388, cbSceneParam._m0[33u].w + _2389), _2531), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2388, _2389 - cbSceneParam._m0[33u].z), _2531), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2388 - cbSceneParam._m0[33u].z, _2389 - cbSceneParam._m0[33u].w), _2531), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2388 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2389), _2531), 0.0)).x), vec4(0.25)));
            float _2585 = 1.0 - (_2581 * cbSceneParam._m0[34u].x);
            float _2586 = 1.0 - (_2581 * cbSceneParam._m0[34u].y);
            float _2587 = 1.0 - (_2581 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2587) ? _2335 : (isnan(_2335) ? _2587 : min(_2335, _2587));
            frontier_phi_34_33_ladder_1 = isnan(_2586) ? _2334 : (isnan(_2334) ? _2586 : min(_2334, _2586));
            frontier_phi_34_33_ladder_2 = isnan(_2585) ? _2333 : (isnan(_2333) ? _2585 : min(_2333, _2585));
        }
        else
        {
            frontier_phi_34_33_ladder = _2335;
            frontier_phi_34_33_ladder_1 = _2334;
            frontier_phi_34_33_ladder_2 = _2333;
        }
        _2399 = frontier_phi_34_33_ladder_2;
        _2401 = frontier_phi_34_33_ladder_1;
        _2403 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2399 = _2333;
        _2401 = _2334;
        _2403 = _2335;
    }
    uvec4 _2408 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2410 = _2408.x * 14u;
    uint _2411 = _2410 + 13u;
    float _2418 = _1116 + (-1.0);
    float _2423 = (cbLight._m0[_2411].x * _2418) + 1.0;
    float _2424 = (cbLight._m0[_2411].y * _2418) + 1.0;
    float _2425 = (cbLight._m0[_2411].z * _2418) + 1.0;
    float _2426 = (cbLight._m0[_2411].w * _2418) + 1.0;
    uint _2427 = _2410 + 5u;
    float _2433 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
    uint _2437 = _2410 + 4u;
    float _2446 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
    uint _2450 = _2410 | 1u;
    float _2461 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_967, _968, _969));
    float _2464 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_967, _968, _969));
    float _4702 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _4713 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2469 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * 0.3183098733425140380859375;
    float _2471 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * 0.3183098733425140380859375;
    float _2478 = ((cbLight._m0[_2427].x * _2433) * _2471) + (((cbLight._m0[_2437].x * _2399) * _2446) * _2469);
    float _2479 = ((_2433 * cbLight._m0[_2427].y) * _2471) + (((cbLight._m0[_2437].y * _2401) * _2446) * _2469);
    float _2480 = ((_2433 * cbLight._m0[_2427].z) * _2471) + (((cbLight._m0[_2437].z * _2403) * _2446) * _2469);
    uvec4 _2484 = floatBitsToUint(cbLight._m0[_2410 + 12u]);
    bool _2486 = _2484.x == 0u;
    float _2588;
    float _2590;
    float _2592;
    if (_2486)
    {
        _2588 = _2478;
        _2590 = _2479;
        _2592 = _2480;
    }
    else
    {
        uint _2596 = _2410 + 6u;
        float _2612 = (dot(vec3(cbLight._m0[_2410 + 2u].xyz), vec3(_967, _968, _969)) * 0.5) + 0.5;
        float _2613 = _2612 * _2612;
        float _4724 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2614 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2615 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2588 = (((cbLight._m0[_2596].x * 0.3183098733425140380859375) * _2614) * _2615) + _2478;
        _2590 = (((cbLight._m0[_2596].y * 0.3183098733425140380859375) * _2614) * _2615) + _2479;
        _2592 = (((cbLight._m0[_2596].z * 0.3183098733425140380859375) * _2614) * _2615) + _2480;
    }
    bool _2595 = _2484.y == 0u;
    float _2650;
    float _2652;
    float _2654;
    if (_2595)
    {
        _2650 = _2588;
        _2652 = _2590;
        _2654 = _2592;
    }
    else
    {
        uint _2812 = _2410 + 7u;
        float _2828 = (dot(vec3(cbLight._m0[_2410 + 3u].xyz), vec3(_967, _968, _969)) * 0.5) + 0.5;
        float _2829 = _2828 * _2828;
        float _4740 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2830 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2831 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2650 = (((cbLight._m0[_2812].x * 0.3183098733425140380859375) * _2830) * _2831) + _2588;
        _2652 = (((cbLight._m0[_2812].y * 0.3183098733425140380859375) * _2830) * _2831) + _2590;
        _2654 = (((cbLight._m0[_2812].z * 0.3183098733425140380859375) * _2830) * _2831) + _2592;
    }
    uint _2657 = _2410 + 8u;
    float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _970) * 0.949999988079071044921875);
    float _2671 = _2670 * _2670;
    float _2672 = cbLight._m0[_2410].x + _1045;
    float _2673 = cbLight._m0[_2410].y + _1046;
    float _2674 = cbLight._m0[_2410].z + _1047;
    float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
    float _2679 = _2678 * _2672;
    float _2680 = _2678 * _2673;
    float _2681 = _2678 * _2674;
    float _2682 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2410].xyz));
    float _4756 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2685 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _4767 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2686 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
    float _2687 = dot(vec3(_967, _968, _969), vec3(_2679, _2680, _2681));
    float _4778 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
    float _2691 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2679, _2680, _2681));
    float _4789 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2695 = _2671 * _2671;
    float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
    float _2710 = (exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2711 = 1.0 - _2671;
    float _2722 = (0.5 / (((_2686 * ((_2685 * _2711) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2711) + _2671) * _2685))) * _2685;
    float _4800 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2724 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
    uint _2738 = _2410 + 9u;
    float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _970) * 0.949999988079071044921875);
    float _2750 = _2749 * _2749;
    float _2751 = cbLight._m0[_2450].x + _1045;
    float _2752 = cbLight._m0[_2450].y + _1046;
    float _2753 = cbLight._m0[_2450].z + _1047;
    float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
    float _2758 = _2757 * _2751;
    float _2759 = _2757 * _2752;
    float _2760 = _2757 * _2753;
    float _2761 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2450].xyz));
    float _4811 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2764 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
    float _2765 = dot(vec3(_967, _968, _969), vec3(_2758, _2759, _2760));
    float _4822 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2768 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
    float _2769 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2758, _2759, _2760));
    float _4833 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
    float _2773 = _2750 * _2750;
    float _2777 = ((_2768 * _2768) * (_2773 + (-1.0))) + 1.0;
    float _2786 = (exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2787 = 1.0 - _2750;
    float _2797 = (0.5 / (((_2686 * ((_2764 * _2787) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2787) + _2750) * _2764))) * _2764;
    float _4844 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2799 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2773 / ((_2777 * _2777) * 3.141590118408203125));
    float _2809 = (((_2786 * cbLight._m0[_2738].x) * _2799) * _2433) + ((((cbLight._m0[_2657].x * _2399) * _2710) * _2724) * _2446);
    float _2810 = (((_2786 * cbLight._m0[_2738].y) * _2799) * _2433) + ((((cbLight._m0[_2657].y * _2401) * _2710) * _2724) * _2446);
    float _2811 = (((_2786 * cbLight._m0[_2738].z) * _2799) * _2433) + ((((cbLight._m0[_2657].z * _2403) * _2710) * _2724) * _2446);
    float _2867;
    float _2869;
    float _2871;
    if (_2486)
    {
        _2867 = _2809;
        _2869 = _2810;
        _2871 = _2811;
    }
    else
    {
        uint _2873 = _2410 + 2u;
        uint _2877 = _2410 + 10u;
        float _2891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2873].w)) * _970) * 0.949999988079071044921875);
        float _2892 = _2891 * _2891;
        float _2893 = cbLight._m0[_2873].x + _1045;
        float _2894 = cbLight._m0[_2873].y + _1046;
        float _2895 = cbLight._m0[_2873].z + _1047;
        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
        float _2900 = _2899 * _2893;
        float _2901 = _2899 * _2894;
        float _2902 = _2899 * _2895;
        float _2903 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2873].xyz));
        float _4855 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2906 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2907 = dot(vec3(_967, _968, _969), vec3(_2900, _2901, _2902));
        float _4866 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2910 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2911 = dot(vec3(cbLight._m0[_2873].xyz), vec3(_2900, _2901, _2902));
        float _4877 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2915 = _2892 * _2892;
        float _2919 = ((_2910 * _2910) * (_2915 + (-1.0))) + 1.0;
        float _2928 = (exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2929 = 1.0 - _2892;
        float _2939 = (0.5 / (((_2686 * ((_2906 * _2929) + _2892)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2929) + _2892) * _2906))) * _2906;
        float _4888 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2941 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2915 / ((_2919 * _2919) * 3.141590118408203125));
        float _2942 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2867 = (((_2928 * cbLight._m0[_2877].x) * _2941) * _2942) + _2809;
        _2869 = (((_2928 * cbLight._m0[_2877].y) * _2941) * _2942) + _2810;
        _2871 = (((_2928 * cbLight._m0[_2877].z) * _2941) * _2942) + _2811;
    }
    float _2973;
    float _2975;
    float _2977;
    if (_2595)
    {
        _2973 = _2867;
        _2975 = _2869;
        _2977 = _2871;
    }
    else
    {
        uint _2984 = _2410 + 3u;
        uint _2988 = _2410 + 11u;
        float _3002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2984].w)) * _970) * 0.949999988079071044921875);
        float _3003 = _3002 * _3002;
        float _3004 = cbLight._m0[_2984].x + _1045;
        float _3005 = cbLight._m0[_2984].y + _1046;
        float _3006 = cbLight._m0[_2984].z + _1047;
        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
        float _3011 = _3010 * _3004;
        float _3012 = _3010 * _3005;
        float _3013 = _3010 * _3006;
        float _3014 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2984].xyz));
        float _4904 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3017 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
        float _3018 = dot(vec3(_967, _968, _969), vec3(_3011, _3012, _3013));
        float _4915 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3021 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
        float _3022 = dot(vec3(cbLight._m0[_2984].xyz), vec3(_3011, _3012, _3013));
        float _4926 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
        float _3026 = _3003 * _3003;
        float _3030 = ((_3021 * _3021) * (_3026 + (-1.0))) + 1.0;
        float _3039 = (exp2(log2(1.0 - (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3040 = 1.0 - _3003;
        float _3050 = (0.5 / (((_2686 * ((_3017 * _3040) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _3040) + _3003) * _3017))) * _3017;
        float _4937 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3052 = (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_3026 / ((_3030 * _3030) * 3.141590118408203125));
        float _3053 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2973 = (((_3039 * cbLight._m0[_2988].x) * _3052) * _3053) + _2867;
        _2975 = (((_3039 * cbLight._m0[_2988].y) * _3052) * _3053) + _2869;
        _2977 = (((_3039 * cbLight._m0[_2988].z) * _3052) * _3053) + _2871;
    }
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    if (_2408.y == 0u)
    {
        uvec4 _3074 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3075 = _3074.x;
        uint _3086 = uint((float(_3074.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1054) / _3075))) + floor(float(uint(cbSceneParam._m0[85u].x * _1053) / _3075)));
        float _3096 = (log2(_2186 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3097 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        uint _3100 = uint(isnan(14.0) ? _3097 : (isnan(_3097) ? 14.0 : min(_3097, 14.0)));
        uvec4 _3105 = texelFetch(g_lightClusterGridBuffer, int(((_3100 << 2u) + (_3086 << 6u)) >> 2u));
        uint _3106 = _3105.x;
        uint _3107 = _3074.z;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        if (((((1u << ((_3107 >> 4u) & 15u)) + 4294967295u) & _3106) == 0u) || ((_3107 & 240u) == 0u))
        {
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
            _3194 = 0.0;
            _3196 = 0.0;
        }
        else
        {
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3195;
            float _3197;
            float _3331 = 0.0;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            float _3335 = 0.0;
            float _3336 = 0.0;
            uint _3337 = 0u;
            uint _3346;
            bool _3347;
            for (;;)
            {
                _3346 = texelFetch(g_lightClassification, int((((_3100 << 5u) + (_3086 << 9u)) + (_3337 << 2u)) >> 2u)).x;
                _3347 = _3346 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3347)
                {
                    frontier_phi_66_pred = _3336;
                    frontier_phi_66_pred_1 = _3335;
                    frontier_phi_66_pred_2 = _3334;
                    frontier_phi_66_pred_3 = _3333;
                    frontier_phi_66_pred_4 = _3332;
                    frontier_phi_66_pred_5 = _3331;
                }
                else
                {
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    uint _3461;
                    _3455 = _3331;
                    _3456 = _3332;
                    _3457 = _3333;
                    _3458 = _3334;
                    _3459 = _3335;
                    _3460 = _3336;
                    _3461 = _3346;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    for (;;)
                    {
                        uint _3465 = uint(findLSB(_3461)) + (_3337 << 5u);
                        uint _3462 = (_3461 + 4294967295u) & _3461;
                        uint _3467 = _3465 * 48u;
                        vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3467)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 3u)).x));
                        uint _3487 = (_3465 * 48u) + 4u;
                        vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3487)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 3u)).x));
                        uint _3506 = (_3465 * 48u) + 8u;
                        vec3 _3517 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3506)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 2u)).x));
                        float _3521 = _3481.x - _2184;
                        float _3522 = _3481.y - _2185;
                        float _3523 = _3481.z - _2186;
                        float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                        float _3527 = inversesqrt(_3524);
                        float _3528 = _3527 * _3521;
                        float _3529 = _3527 * _3522;
                        float _3530 = _3527 * _3523;
                        float _3531 = dot(vec3(_1072, _1075, _1078), vec3(_3528, _3529, _3530));
                        float _3536 = 1.0 - (_3524 * _3481.w);
                        float _4963 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3537 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3538 = sqrt(_3524) * _3500.w;
                        float _3541 = 1.39999997615814208984375 / (_3538 + 1.39999997615814208984375);
                        float _3542 = _3541 * _3541;
                        float _3545 = ((1.0 - _3542) * _3531) + _3542;
                        float _3548 = _3538 * _3538;
                        float _3552 = ((isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))) * _3537) / ((_3548 * 0.699999988079071044921875) + 1.0);
                        float _3556 = (-0.0) - _2184;
                        float _3557 = (-0.0) - _2185;
                        float _3558 = (-0.0) - _2186;
                        float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                        float _3563 = _3562 * _3556;
                        float _3564 = _3562 * _3557;
                        float _3565 = _3562 * _3558;
                        float _3572 = exp2(log2(1.0 / ((_3548 * 3.5) + 5.0)) * 0.25);
                        float _3573 = 1.0 - _1132;
                        float _3580 = sqrt(1.0 - ((1.0 - (_3573 * _3573)) * (1.0 - (_3572 * _3572))));
                        float _3581 = _3580 * _3580;
                        float _3582 = _3581 * _3581;
                        float _3583 = _3563 + _3528;
                        float _3584 = _3564 + _3529;
                        float _3585 = _3565 + _3530;
                        float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                        float _3593 = dot(vec3(_1072, _1075, _1078), vec3(_3563, _3564, _3565));
                        float _4979 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                        float _3596 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                        float _3597 = dot(vec3(_1072, _1075, _1078), vec3(_3589 * _3583, _3589 * _3584, _3589 * _3585));
                        float _4990 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                        float _3600 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                        float _3604 = ((_3600 * _3600) * (_3582 + (-1.0))) + 1.0;
                        float _3605 = _3541 * _3581;
                        float _3606 = _3605 * _3605;
                        float _3609 = ((1.0 - _3606) * _3531) + _3606;
                        float _5001 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                        float _3610 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                        float _3611 = 1.0 - _3581;
                        float _3621 = (0.5 / (((_3610 * ((_3596 * _3611) + _3581)) + 9.9999999392252902907785028219223e-09) + (((_3610 * _3611) + _3581) * _3596))) * _3610;
                        float _5012 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                        float _3632 = (((_3582 * 3.1415927410125732421875) * (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0)))) / ((_3604 * _3604) * ((_3548 * 2.1991131305694580078125) + 3.141590118408203125))) * _3537;
                        _3390 = (_3552 * _3500.x) + _3458;
                        _3391 = (_3552 * _3500.y) + _3459;
                        _3392 = (_3552 * _3500.z) + _3460;
                        _3387 = (_3632 * _3517.x) + _3455;
                        _3388 = (_3632 * _3517.y) + _3456;
                        _3389 = (_3632 * _3517.z) + _3457;
                        if (_3462 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3455 = _3387;
                            _3456 = _3388;
                            _3457 = _3389;
                            _3458 = _3390;
                            _3459 = _3391;
                            _3460 = _3392;
                            _3461 = _3462;
                        }
                    }
                    frontier_phi_66_pred = _3392;
                    frontier_phi_66_pred_1 = _3391;
                    frontier_phi_66_pred_2 = _3390;
                    frontier_phi_66_pred_3 = _3389;
                    frontier_phi_66_pred_4 = _3388;
                    frontier_phi_66_pred_5 = _3387;
                }
                _3197 = frontier_phi_66_pred;
                _3195 = frontier_phi_66_pred_1;
                _3193 = frontier_phi_66_pred_2;
                _3191 = frontier_phi_66_pred_3;
                _3189 = frontier_phi_66_pred_4;
                _3187 = frontier_phi_66_pred_5;
                uint _3338 = _3337 + 1u;
                if (_3338 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3331 = _3187;
                    _3332 = _3189;
                    _3333 = _3191;
                    _3334 = _3193;
                    _3335 = _3195;
                    _3336 = _3197;
                    _3337 = _3338;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
            _3194 = _3195;
            _3196 = _3197;
        }
        uvec4 _3200 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3201 = _3200.z;
        uint _3203 = (_3201 >> 8u) & 15u;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        if (((4294967295u << _3203) & _3106) == 0u)
        {
            _3299 = _3186;
            _3301 = _3188;
            _3303 = _3190;
            _3305 = _3192;
            _3307 = _3194;
            _3309 = _3196;
        }
        else
        {
            float _3324 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
            float _3325 = _3324 * _2184;
            float _3326 = _3324 * _2185;
            float _3327 = _3324 * _2186;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3203 < ((_3201 >> 12u) & 15u))
            {
                float _3300;
                float _3302;
                float _3304;
                float _3306;
                float _3308;
                float _3310;
                float _3438 = _3186;
                float _3439 = _3188;
                float _3440 = _3190;
                float _3441 = _3192;
                float _3442 = _3194;
                float _3443 = _3196;
                uint _3444 = _3203;
                uint _3453;
                bool _3454;
                for (;;)
                {
                    _3453 = texelFetch(g_lightClassification, int((((_3100 << 5u) + (_3086 << 9u)) + (_3444 << 2u)) >> 2u)).x;
                    _3454 = _3453 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3454)
                    {
                        frontier_phi_72_pred = _3443;
                        frontier_phi_72_pred_1 = _3442;
                        frontier_phi_72_pred_2 = _3441;
                        frontier_phi_72_pred_3 = _3440;
                        frontier_phi_72_pred_4 = _3439;
                        frontier_phi_72_pred_5 = _3438;
                    }
                    else
                    {
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3650 = _3438;
                        float _3651 = _3439;
                        float _3652 = _3440;
                        float _3653 = _3441;
                        float _3654 = _3442;
                        float _3655 = _3443;
                        uint _3656 = _3453;
                        uint _3657;
                        vec4 _3682;
                        float _3683;
                        vec4 _3698;
                        vec3 _3710;
                        vec4 _3725;
                        vec4 _3740;
                        float _3786;
                        bool _3787;
                        for (;;)
                        {
                            uint _3667 = ((_3444 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3656));
                            _3657 = (_3656 + 4294967295u) & _3656;
                            uint _3669 = _3667 * 40u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            _3683 = _3682.w;
                            uint _3685 = (_3667 * 40u) + 4u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3700 = (_3667 * 40u) + 8u;
                            _3710 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x));
                            uint _3712 = (_3667 * 40u) + 16u;
                            _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            uint _3727 = (_3667 * 40u) + 20u;
                            _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            uint _3742 = (_3667 * 40u) + 24u;
                            vec4 _3755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 3u)).x));
                            uint _3761 = (_3667 * 40u) + 28u;
                            vec4 _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            _3786 = fma(_2186, _3774.z, fma(_2185, _3774.y, _3774.x * _2184)) + _3774.w;
                            _3787 = !((fma(_2186, _3755.z, fma(_2185, _3755.y, _3755.x * _2184)) + _3755.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3787)
                            {
                                float _3814 = _3682.x - _2184;
                                float _3815 = _3682.y - _2185;
                                float _3816 = _3682.z - _2186;
                                float _3817 = dot(vec3(_3814, _3815, _3816), vec3(_3814, _3815, _3816));
                                float _3820 = inversesqrt(_3817);
                                float _3821 = _3820 * _3814;
                                float _3822 = _3820 * _3815;
                                float _3823 = _3820 * _3816;
                                float _3827 = 1.0 - (_3817 / (_3683 * _3683));
                                float _5023 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3828 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3832 = sqrt(_3817) * _3698.w;
                                float _3834 = 1.39999997615814208984375 / (_3832 + 1.39999997615814208984375);
                                float _3835 = _3834 * _3834;
                                float _3838 = ((1.0 - _3835) * dot(vec3(_3821, _3822, _3823), vec3(_1072, _1075, _1078))) + _3835;
                                float _3841 = _3832 * _3832;
                                float _3845 = (fma(_2186, _3725.z, fma(_2185, _3725.y, _3725.x * _2184)) + _3725.w) / _3786;
                                float _3846 = (fma(_2186, _3740.z, fma(_2185, _3740.y, _3740.x * _2184)) + _3740.w) / _3786;
                                float _3850 = 1.0 - dot(vec2(_3845, _3846), vec2(_3845, _3846));
                                float _5039 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3851 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                                float _3852 = _3851 * (((isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0))) * _3828) / ((_3841 * 0.699999988079071044921875) + 1.0));
                                float _3864 = exp2(log2(1.0 / ((_3841 * 3.5) + 5.0)) * 0.25);
                                float _3865 = 1.0 - _1132;
                                float _3872 = sqrt(1.0 - ((1.0 - (_3865 * _3865)) * (1.0 - (_3864 * _3864))));
                                float _3873 = _3872 * _3872;
                                float _3874 = _3873 * _3873;
                                float _3875 = _3821 - _3325;
                                float _3876 = _3822 - _3326;
                                float _3877 = _3823 - _3327;
                                float _3881 = inversesqrt(dot(vec3(_3875, _3876, _3877), vec3(_3875, _3876, _3877)));
                                float _3885 = dot(vec3(_1072, _1075, _1078), vec3((-0.0) - _3325, (-0.0) - _3326, (-0.0) - _3327));
                                float _5050 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3888 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                                float _3889 = dot(vec3(_1072, _1075, _1078), vec3(_3881 * _3875, _3881 * _3876, _3881 * _3877));
                                float _5061 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3892 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                                float _3896 = ((_3892 * _3892) * (_3874 + (-1.0))) + 1.0;
                                float _3897 = _3834 * _3873;
                                float _3898 = _3897 * _3897;
                                float _3904 = ((1.0 - _3898) * dot(vec3(_1072, _1075, _1078), vec3(_3821, _3822, _3823))) + _3898;
                                float _5072 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3905 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                                float _3906 = 1.0 - _3873;
                                float _3916 = (0.5 / (((_3905 * ((_3888 * _3906) + _3873)) + 9.9999999392252902907785028219223e-09) + (((_3905 * _3906) + _3873) * _3888))) * _3905;
                                float _5083 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3926 = (_3851 * _3828) * (((_3874 * 3.1415927410125732421875) * (isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0)))) / ((_3896 * _3896) * ((_3841 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3852 * _3698.y;
                                frontier_phi_78_pred_1 = _3852 * _3698.x;
                                frontier_phi_78_pred_2 = _3926 * _3710.z;
                                frontier_phi_78_pred_3 = _3926 * _3710.y;
                                frontier_phi_78_pred_4 = _3926 * _3710.x;
                                frontier_phi_78_pred_5 = _3852 * _3698.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3934 = frontier_phi_78_pred;
                            _3933 = frontier_phi_78_pred_1;
                            _3932 = frontier_phi_78_pred_2;
                            _3931 = frontier_phi_78_pred_3;
                            _3930 = frontier_phi_78_pred_4;
                            _3935 = frontier_phi_78_pred_5;
                            _3640 = _3933 + _3653;
                            _3641 = _3934 + _3654;
                            _3642 = _3935 + _3655;
                            _3637 = _3930 + _3650;
                            _3638 = _3931 + _3651;
                            _3639 = _3932 + _3652;
                            if (_3657 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3657;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3642;
                        frontier_phi_72_pred_1 = _3641;
                        frontier_phi_72_pred_2 = _3640;
                        frontier_phi_72_pred_3 = _3639;
                        frontier_phi_72_pred_4 = _3638;
                        frontier_phi_72_pred_5 = _3637;
                    }
                    _3310 = frontier_phi_72_pred;
                    _3308 = frontier_phi_72_pred_1;
                    _3306 = frontier_phi_72_pred_2;
                    _3304 = frontier_phi_72_pred_3;
                    _3302 = frontier_phi_72_pred_4;
                    _3300 = frontier_phi_72_pred_5;
                    uint _3445 = _3444 + 1u;
                    if (_3445 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3438 = _3300;
                        _3439 = _3302;
                        _3440 = _3304;
                        _3441 = _3306;
                        _3442 = _3308;
                        _3443 = _3310;
                        _3444 = _3445;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3310;
                frontier_phi_60_61_ladder_1 = _3308;
                frontier_phi_60_61_ladder_2 = _3304;
                frontier_phi_60_61_ladder_3 = _3302;
                frontier_phi_60_61_ladder_4 = _3300;
                frontier_phi_60_61_ladder_5 = _3306;
            }
            else
            {
                frontier_phi_60_61_ladder = _3196;
                frontier_phi_60_61_ladder_1 = _3194;
                frontier_phi_60_61_ladder_2 = _3190;
                frontier_phi_60_61_ladder_3 = _3188;
                frontier_phi_60_61_ladder_4 = _3186;
                frontier_phi_60_61_ladder_5 = _3192;
            }
            _3299 = frontier_phi_60_61_ladder_4;
            _3301 = frontier_phi_60_61_ladder_3;
            _3303 = frontier_phi_60_61_ladder_2;
            _3305 = frontier_phi_60_61_ladder_5;
            _3307 = frontier_phi_60_61_ladder_1;
            _3309 = frontier_phi_60_61_ladder;
        }
        float _3314 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _3119 = (_3314 * _3305) + _2650;
        _3121 = (_3314 * _3307) + _2652;
        _3123 = (_3314 * _3309) + _2654;
        _3125 = ((_3299 * 0.039999999105930328369140625) * _3314) + _2973;
        _3127 = ((_3301 * 0.039999999105930328369140625) * _3314) + _2975;
        _3129 = ((_3303 * 0.039999999105930328369140625) * _3314) + _2977;
    }
    else
    {
        _3119 = _2650;
        _3121 = _2652;
        _3123 = _2654;
        _3125 = _2973;
        _3127 = _2975;
        _3129 = _2977;
    }
    float _5099 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _5110 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _5121 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    uint _3149 = _289 + 6u;
    float _3157 = _1053 / cbSceneParam._m0[86u].x;
    float _3158 = _1054 / cbSceneParam._m0[86u].y;
    vec4 _3172 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3157, _3158, (log2((isnan(cbSceneParam._m0[77u].w) ? _988 : (isnan(_988) ? cbSceneParam._m0[77u].w : min(_988, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3174 = _3172.x;
    float _3175 = _3172.y;
    float _3176 = _3172.z;
    float _3177 = _3172.w;
    float _3249;
    float _3251;
    float _3253;
    float _3255;
    if (_988 > cbSceneParam._m0[78u].w)
    {
        float _3211 = isnan(_988) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _988 : min(cbSceneParam._m0[80u].w, _988));
        float _3212 = _3211 / _988;
        float _3223 = _3212 * _1038;
        float _3224 = _1039 * _3212;
        float _3225 = (-0.0) - _3224;
        float _3227 = _3212 * _1040;
        float _3229 = (cbSceneParam._m0[77u].w * _3225) / _3211;
        float _3230 = _3229 + cbSceneParam._m0[79u].w;
        float _3231 = cbSceneParam._m0[79u].w - _3224;
        float _3237 = sqrt(((_3223 * _3223) + (_3224 * _3224)) + (_3227 * _3227));
        float _3240 = (1.0 - (cbSceneParam._m0[77u].w / _3211)) * _3237;
        float _3245 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3247 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3400;
        if (abs((_3225 - _3229) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3400 = ((((_3230 > 0.0) ? exp2(_3245 * _3230) : (2.0 - exp2(_3247 * _3230))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3240;
        }
        else
        {
            float _3360 = 1.0 / cbSceneParam._m0[80u].x;
            float _3361 = isnan(_3231) ? _3230 : (isnan(_3230) ? _3231 : max(_3230, _3231));
            float _3362 = isnan(_3231) ? _3230 : (isnan(_3230) ? _3231 : min(_3230, _3231));
            float _3371 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : min(_3361, 0.0));
            float _3372 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : min(_3362, 0.0));
            _3400 = ((abs(_3237 / _3225) * cbSceneParam._m0[80u].y) * ((((_3371 - _3372) * 2.0) - ((exp2(_3245 * (isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0)))) - exp2(_3245 * (isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))))) * _3360)) - ((exp2(_3247 * _3371) - exp2(_3247 * _3372)) * _3360))) + (_3240 * cbSceneParam._m0[80u].z);
        }
        vec4 _3402 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3157, _3158, 1.0), 0.0);
        float _3411 = exp2((_3400 * (-1.44269502162933349609375)) * (1.0 - _3402.w));
        float _3412 = log2(_3411);
        float _3428 = log2(_3177);
        _3249 = (exp2(_3428 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].x)) * _3402.x) / cbSceneParam._m0[78u].x)) + _3174;
        _3251 = (exp2(_3428 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].y)) * _3402.y) / cbSceneParam._m0[78u].y)) + _3175;
        _3253 = (exp2(_3428 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].z)) * _3402.z) / cbSceneParam._m0[78u].z)) + _3176;
        _3255 = _3411 * _3177;
    }
    else
    {
        _3249 = _3174;
        _3251 = _3175;
        _3253 = _3176;
        _3255 = _3177;
    }
    float _3267 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3268 = _3267 == 3.0;
    float _3269 = log2(_3255);
    float _3276 = exp2(_3269 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0))) * (_3119 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1116))) + ((_3125 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1920)) * cbPerFrame._m0[3u].x));
    float _3277 = exp2(_3269 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0))) * (_3121 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1116))) + ((_3127 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1920)) * cbPerFrame._m0[3u].x));
    float _3278 = exp2(_3269 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0))) * (_3123 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1116))) + ((_3129 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1920)) * cbPerFrame._m0[3u].x));
    float _3287 = (_3267 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3287 * (_3268 ? _3276 : (_3276 + (cbSceneParam._m0[72u].w * _3249)));
    SV_Target.y = _3287 * (_3268 ? _3277 : (_3277 + (cbSceneParam._m0[72u].w * _3251)));
    SV_Target.z = _3287 * (_3268 ? _3278 : (_3278 + (cbSceneParam._m0[72u].w * _3253)));
    SV_Target.w = cbInstanceData._m0[_3149].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3149].w;
}


