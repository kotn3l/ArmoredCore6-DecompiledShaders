#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1505;
float _3861;
float _3862;
float _3863;
float _3864;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _345.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[24u].z) + _399) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3873 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _424 = (_417 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _425 = (_417 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _426 = (_417 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _345.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[24u].z) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3884 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _558 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _345.z) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[24u].z) + _546) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3895 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _566 = (_559 * ((_517.x * cbMtdParam._m0[14u].x) - _497)) + _497;
    float _567 = (_559 * ((_517.y * cbMtdParam._m0[14u].y) - _498)) + _498;
    float _568 = (_559 * ((_517.z * cbMtdParam._m0[14u].z) - _499)) + _499;
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _605 = _603.x;
    float _606 = _603.y;
    float _607 = _603.z;
    float _614 = ((_586.x - _605) * _417) + _605;
    float _615 = ((_586.y - _606) * _417) + _606;
    float _616 = ((_586.z - _607) * _417) + _607;
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _639 = ((_628.x - _614) * _490) + _614;
    float _640 = ((_628.y - _615) * _490) + _615;
    float _641 = ((_628.z - _616) * _490) + _616;
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _666 = ((_653.z - _641) * _559) + _641;
    float _669 = ((((_653.x - _639) * _559) + _639) * 2.0) + (-1.0);
    float _671 = ((((_653.y - _640) * _559) + _640) * 2.0) + (-1.0);
    float _672 = dot(vec2(_669, _671), vec2(_669, _671));
    float _3906 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _677 = sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _703 = (((_691.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _669;
    float _704 = (((_691.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _671;
    float _707 = fma(_677, _247, fma(_704, _254, _703 * _240));
    float _710 = fma(_677, _248, fma(_704, _255, _703 * _241));
    float _713 = fma(_677, _249, fma(_704, _256, _703 * _242));
    float _717 = inversesqrt(dot(vec3(_707, _710, _713), vec3(_707, _710, _713)));
    vec4 _744 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _746 = _744.x;
    float _747 = 1.0 - _746;
    float _753 = (cbMtdParam._m0[19u].x + dot(vec4(_717 * _707, _717 * _710, _717 * _713, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_746 - _747) * cbMtdParam._m0[24u].w) + _747) * cbMtdParam._m0[21u].z);
    float _3917 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _756 = (-0.0) - cbMtdParam._m0[24u].x;
    float _758 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
    float _766 = _754 - ((_754 * TEXCOORD_8.x) * _759);
    float _767 = _754 - ((_754 * TEXCOORD_8.y) * _759);
    float _768 = _754 - ((_754 * TEXCOORD_8.z) * _759);
    float _775 = (_766 * (cbMtdParam._m0[17u].x - _566)) + _566;
    float _776 = (_767 * (cbMtdParam._m0[17u].y - _567)) + _567;
    float _777 = (_768 * (cbMtdParam._m0[17u].z - _568)) + _568;
    vec4 _789 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _791 = _789.x;
    float _792 = 1.0 - _791;
    float _820 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_791 - _792) * cbMtdParam._m0[24u].y) + _792) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3938 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _821 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _829 = ((((cbMtdParam._m0[10u].x - _775) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _821) + _775;
    float _830 = ((((cbMtdParam._m0[10u].y - _776) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _821) + _776;
    float _831 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _777)) * _821) + _777;
    float _835 = (cbMtdParam._m0[19u].w * (_691.z - _666)) + _666;
    vec4 _849 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _856 = (_849.x * 2.0) + (-1.0);
    float _857 = (_849.y * 2.0) + (-1.0);
    float _858 = dot(vec2(_856, _857), vec2(_856, _857));
    float _3949 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _866 = ((_849.z - _835) * _766) + _835;
    float _869 = ((cbMtdParam._m0[23u].y - _866) * _821) + _866;
    vec4 _888 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _894 = (_888.x * 2.0) + (-1.0);
    float _895 = (_888.y * 2.0) + (-1.0);
    float _896 = dot(vec2(_894, _895), vec2(_894, _895));
    float _3960 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _911 = ((sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) - _677) * _768) + _677;
    float _914 = (((_856 - _703) * _766) + _703) + (cbMtdParam._m0[21u].x * _703);
    float _915 = (((_857 - _704) * _767) + _704) + (cbMtdParam._m0[21u].x * _704);
    float _926 = (((_894 - _914) + (_914 * cbMtdParam._m0[22u].z)) * _821) + _914;
    float _927 = (((_895 - _915) + (_915 * cbMtdParam._m0[22u].z)) * _821) + _915;
    float _928 = (_821 * (sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) - _911)) + _911;
    float _930 = cbMtdParam._m0[22u].x + _691.w;
    float _933 = fma(_928, _247, fma(_927, _254, _926 * _240));
    float _936 = fma(_928, _248, fma(_927, _255, _926 * _241));
    float _939 = fma(_928, _249, fma(_927, _256, _926 * _242));
    float _943 = inversesqrt(dot(vec3(_933, _936, _939), vec3(_933, _936, _939)));
    float _944 = _943 * _933;
    float _945 = _943 * _936;
    float _946 = _943 * _939;
    float _3971 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _947 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _3993 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4004 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4015 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _965 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1016 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1006);
    float _1017 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1006);
    float _1018 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1006);
    float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
    float _1023 = _1016 * _1022;
    float _1024 = _1017 * _1022;
    float _1025 = _1018 * _1022;
    vec4 _1030 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1032 = _1030.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1186 = sqrt(((_1016 * _1016) + (_1017 * _1017)) + (_1018 * _1018));
        float _1192 = (cbMatDynParam._m0[5u].x * _1186) + cbMatDynParam._m0[5u].y;
        float _4026 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1197 = (cbMatDynParam._m0[5u].z * _1186) + cbMatDynParam._m0[5u].w;
        float _4037 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) - _1193)) + _1193) < ((_1032 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1043 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1044 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1062 = fma(_946, cbSceneParam._m0[5u].z, fma(_945, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _944));
    float _1065 = fma(_946, cbSceneParam._m0[6u].z, fma(_945, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _944));
    float _1068 = fma(_946, cbSceneParam._m0[7u].z, fma(_945, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _944));
    uint _1081 = _259 + 9u;
    uint _1082 = _1081 + uint(cbMatDynParam._m0[0u].w);
    float _1088 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_1082].x;
    float _1089 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_1082].y;
    float _1090 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_1082].z;
    float _4048 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1091 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    vec4 _1102 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1043, cbSceneParam._m0[86u].y * _1044));
    float _1106 = ((isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * TEXCOORD_5.w) * _1102.x;
    float _1107 = dot(vec3(_944, _945, _946), vec3(_1023, _1024, _1025));
    float _1110 = _1107 * 2.0;
    float _1114 = (_1110 * _944) - _1023;
    float _1115 = (_1110 * _945) - _1024;
    float _1116 = (_1110 * _946) - _1025;
    float _1120 = abs(dot(vec3(_1023, _1024, _1025), vec3(_944, _945, _946)));
    float _4081 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1122 = sqrt(_947);
    float _1135 = exp2((_1122 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1122 * 3.0));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1504;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1229 = fma(_1175, cbModelParam._m0[26u].z, fma(_1171, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167));
        float _1233 = fma(_1175, cbModelParam._m0[27u].z, fma(_1171, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167));
        float _1237 = fma(_1175, cbModelParam._m0[28u].z, fma(_1171, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167));
        float _1262 = _1167 + _944;
        float _1263 = _1171 + _945;
        float _1264 = _1175 + _946;
        float _1274 = fma(_1264, cbModelParam._m0[26u].z, fma(_1263, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1262)) - _1229;
        float _1275 = fma(_1264, cbModelParam._m0[27u].z, fma(_1263, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1262)) - _1233;
        float _1276 = fma(_1264, cbModelParam._m0[28u].z, fma(_1263, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1262)) - _1237;
        float _1280 = inversesqrt(dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276)));
        float _1293 = ((_1280 * _1274) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1229 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1280 * _1275) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1233 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1280 * _1276) / cbModelParam._m0[34u].z) + ((((((_1237 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        float _1332 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1298.x + (-0.5));
        float _1334 = _1332 * (_1298.y + (-0.5));
        float _1335 = _1332 * (_1298.z + (-0.5));
        float _1342 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1305.x + (-0.5));
        float _1344 = _1342 * (_1305.y + (-0.5));
        float _1345 = _1342 * (_1305.z + (-0.5));
        float _1352 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1312.x + (-0.5));
        float _1354 = _1352 * (_1312.y + (-0.5));
        float _1355 = _1352 * (_1312.z + (-0.5));
        float _1362 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1319.x + (-0.5));
        float _1364 = _1362 * (_1319.y + (-0.5));
        float _1365 = _1362 * (_1319.z + (-0.5));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = _1333 * 0.5;
        float _1370 = _1343 * 0.5;
        float _1371 = _1353 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1386 = (dot(vec3(_944, _945, _946), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1396 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4129 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1398 + 1.0))) + _1403) * _1366;
        float _1413 = _1334 * 0.5;
        float _1414 = _1344 * 0.5;
        float _1415 = _1354 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_944, _945, _946), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4162 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1440 + 1.0))) + _1445) * _1367;
        float _1455 = _1335 * 0.5;
        float _1456 = _1345 * 0.5;
        float _1457 = _1355 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_944, _945, _946), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4195 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1482 + 1.0))) + _1487) * _1368;
        _1504 = _1335;
        _1506 = _1334;
        _1507 = _1333;
        _1508 = _1345;
        _1509 = _1344;
        _1510 = _1343;
        _1511 = _1355;
        _1512 = _1354;
        _1513 = _1353;
        _1514 = _1368;
        _1515 = _1367;
        _1516 = _1366;
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
    }
    else
    {
        _1504 = _1505;
        _1506 = _1505;
        _1507 = _1505;
        _1508 = _1505;
        _1509 = _1505;
        _1510 = _1505;
        _1511 = _1505;
        _1512 = _1505;
        _1513 = _1505;
        _1514 = _1505;
        _1515 = _1505;
        _1516 = _1505;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1545 = fma(_1175, cbModelParam._m0[30u].z, fma(_1171, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1167));
        float _1549 = fma(_1175, cbModelParam._m0[31u].z, fma(_1171, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1167));
        float _1553 = fma(_1175, cbModelParam._m0[32u].z, fma(_1171, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1167));
        float _1576 = _1167 + _944;
        float _1577 = _1171 + _945;
        float _1578 = _1175 + _946;
        float _1588 = fma(_1578, cbModelParam._m0[30u].z, fma(_1577, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1576)) - _1545;
        float _1589 = fma(_1578, cbModelParam._m0[31u].z, fma(_1577, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1576)) - _1549;
        float _1590 = fma(_1578, cbModelParam._m0[32u].z, fma(_1577, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1576)) - _1553;
        float _1594 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
        float _1607 = ((_1594 * _1588) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1545 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1594 * _1589) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1549 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1594 * _1590) / cbModelParam._m0[35u].z) + ((((((_1553 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        float _1644 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1611.x + (-0.5));
        float _1646 = _1644 * (_1611.y + (-0.5));
        float _1647 = _1644 * (_1611.z + (-0.5));
        float _1654 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1618.x + (-0.5));
        float _1656 = _1654 * (_1618.y + (-0.5));
        float _1657 = _1654 * (_1618.z + (-0.5));
        float _1664 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1625.x + (-0.5));
        float _1666 = _1664 * (_1625.y + (-0.5));
        float _1667 = _1664 * (_1625.z + (-0.5));
        float _1674 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1632.x + (-0.5));
        float _1676 = _1674 * (_1632.y + (-0.5));
        float _1677 = _1674 * (_1632.z + (-0.5));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = _1645 * 0.5;
        float _1682 = _1655 * 0.5;
        float _1683 = _1665 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_944, _945, _946), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4258 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1708 + 1.0))) + _1713) * _1678;
        float _1723 = _1646 * 0.5;
        float _1724 = _1656 * 0.5;
        float _1725 = _1666 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_944, _945, _946), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4291 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1750 + 1.0))) + _1755) * _1679;
        float _1765 = _1647 * 0.5;
        float _1766 = _1657 * 0.5;
        float _1767 = _1667 * 0.5;
        float _1768 = dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767));
        float _1773 = (_1768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1768);
        float _1781 = (dot(vec3(_944, _945, _946), vec3(_1773 * _1765, _1773 * _1766, _1773 * _1767)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1790 = sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1792 = _1791 * 2.0;
        float _1796 = (1.0 - _1791) / (_1791 + 1.0);
        float _4324 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1806 = ((((1.0 - _1797) * (_1792 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1792 + 1.0))) + _1797) * _1680;
        _1814 = _1647;
        _1815 = _1646;
        _1816 = _1645;
        _1817 = _1657;
        _1818 = _1656;
        _1819 = _1655;
        _1820 = _1667;
        _1821 = _1666;
        _1822 = _1665;
        _1823 = _1680;
        _1824 = _1679;
        _1825 = _1678;
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)));
    }
    else
    {
        _1814 = _1505;
        _1815 = _1505;
        _1816 = _1505;
        _1817 = _1505;
        _1818 = _1505;
        _1819 = _1505;
        _1820 = _1505;
        _1821 = _1505;
        _1822 = _1505;
        _1823 = _1505;
        _1824 = _1505;
        _1825 = _1505;
        _1826 = 0.0;
        _1827 = 0.0;
        _1828 = 0.0;
    }
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1517)) + _1517;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1518)) + _1518;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1519)) + _1519;
    float _1861 = fma(_1840, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1840, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1840, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1838));
    float _1882 = _1114 * 0.5;
    float _1883 = _1115 * 0.5;
    float _1884 = _1116 * 0.5;
    float _1885 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1888 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1891 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1925;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1898 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1504, _1508, _1511, _1514));
        float _1902 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1506, _1509, _1512, _1515));
        float _1906 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1507, _1510, _1513, _1516));
        float _1913 = dot(vec4(cbModelParam._m0[39u]), vec4(_1882, _1883, _1884, 1.0));
        _1925 = dot(vec3(isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1913) ? 0.0 : (isnan(0.0) ? _1913 : max(0.0, _1913))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1925 = 1.0;
    }
    float _1936;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1927 = dot(vec4(cbModelParam._m0[40u]), vec4(_1882, _1883, _1884, 1.0));
        _1936 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1927) ? 0.0 : (isnan(0.0) ? _1927 : max(0.0, _1927))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1936 = 1.0;
    }
    float _1940 = (_1936 * cbModelParam._m0[1u].x) + (_1925 * (1.0 - cbModelParam._m0[1u].x));
    float _1950 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _947);
    float _1951 = isnan(_1950) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1950 : min(cbModelParam._m0[25u].z, _1950));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1998 = fma(_1175, cbModelParam._m0[13u].z, fma(_1171, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1167)) + cbModelParam._m0[13u].w;
        float _2002 = fma(_1175, cbModelParam._m0[14u].z, fma(_1171, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1167)) + cbModelParam._m0[14u].w;
        float _2006 = fma(_1175, cbModelParam._m0[15u].z, fma(_1171, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1167)) + cbModelParam._m0[15u].w;
        float _2009 = fma(_1116, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1114));
        float _2012 = fma(_1116, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1114));
        float _2015 = fma(_1116, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1114));
        float _2043;
        if (_2009 > 0.0)
        {
            _2043 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2043 = frontier_phi_17_15_ladder;
        }
        float _2244;
        if (_2012 > 0.0)
        {
            _2244 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2244 = frontier_phi_26_22_ladder;
        }
        float _2487;
        if (_2015 > 0.0)
        {
            _2487 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2487 = frontier_phi_38_33_ladder;
        }
        float _2489 = isnan(_2244) ? _2043 : (isnan(_2043) ? _2244 : min(_2043, _2244));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _2009) + _1998;
        float _2495 = (_2490 * _2012) + _2002;
        float _2496 = (_2490 * _2015) + _2006;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2497;
        float _2501 = _2497 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 > _2501) || ((_2495 < _2499) || ((_2494 < _2499) || (_2494 > _2501))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2496, cbModelParam._m0[9u].z, fma(_2495, cbModelParam._m0[9u].y, _2494 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2496, cbModelParam._m0[10u].z, fma(_2495, cbModelParam._m0[10u].y, _2494 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2496, cbModelParam._m0[11u].z, fma(_2495, cbModelParam._m0[11u].y, _2494 * cbModelParam._m0[11u].x))), _1951);
            frontier_phi_16_38_ladder = _2620.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2620.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2620.x * cbModelParam._m0[1u].y;
        }
        _2031 = frontier_phi_16_38_ladder_2;
        _2033 = frontier_phi_16_38_ladder_1;
        _2035 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1114, _1115, _1116), _1951);
        _2031 = _2019.x * cbModelParam._m0[1u].y;
        _2033 = _2019.y * cbModelParam._m0[1u].y;
        _2035 = _2019.z * cbModelParam._m0[1u].y;
    }
    float _2039 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _947);
    float _2040 = isnan(_2039) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2039 : min(cbModelParam._m0[25u].w, _2039));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2094 = fma(_1175, cbModelParam._m0[21u].z, fma(_1171, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1167)) + cbModelParam._m0[21u].w;
        float _2098 = fma(_1175, cbModelParam._m0[22u].z, fma(_1171, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1167)) + cbModelParam._m0[22u].w;
        float _2102 = fma(_1175, cbModelParam._m0[23u].z, fma(_1171, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1167)) + cbModelParam._m0[23u].w;
        float _2105 = fma(_1116, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1114));
        float _2108 = fma(_1116, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1114));
        float _2111 = fma(_1116, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1114));
        float _2249;
        if (_2105 > 0.0)
        {
            _2249 = abs((1.0 - _2094) / _2105);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2094 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2249 = frontier_phi_28_24_ladder;
        }
        float _2514;
        if (_2108 > 0.0)
        {
            _2514 = abs((1.0 - _2098) / _2108);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2098 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2514 = frontier_phi_40_35_ladder;
        }
        float _2719;
        if (_2111 > 0.0)
        {
            _2719 = abs((1.0 - _2102) / _2111);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2102 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2719 = frontier_phi_49_46_ladder;
        }
        float _2721 = isnan(_2514) ? _2249 : (isnan(_2249) ? _2514 : min(_2249, _2514));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _2105) + _2094;
        float _2727 = (_2722 * _2108) + _2098;
        float _2728 = (_2722 * _2111) + _2102;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2730 = (-1.0) - _2729;
        float _2732 = _2729 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2728 > _2732) || ((_2728 < _2730) || ((_2727 > _2732) || ((_2727 < _2730) || ((_2726 < _2730) || (_2726 > _2732))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2728, cbModelParam._m0[17u].z, fma(_2727, cbModelParam._m0[17u].y, _2726 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2728, cbModelParam._m0[18u].z, fma(_2727, cbModelParam._m0[18u].y, _2726 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2728, cbModelParam._m0[19u].z, fma(_2727, cbModelParam._m0[19u].y, _2726 * cbModelParam._m0[19u].x))), _2040);
            frontier_phi_25_49_ladder = _2927.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2927.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2927.x * cbModelParam._m0[1u].z;
        }
        _2130 = frontier_phi_25_49_ladder_2;
        _2132 = frontier_phi_25_49_ladder_1;
        _2134 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1114, _1115, _1116), _2040);
        _2130 = _2114.x * cbModelParam._m0[1u].z;
        _2132 = _2114.y * cbModelParam._m0[1u].z;
        _2134 = _2114.z * cbModelParam._m0[1u].z;
    }
    float _2146 = ((((1.0 - _1135) * ((_1122 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1135 * _1122)) * _1106;
    float _2147 = _2146 * ((cbModelParam._m0[1u].w * (_2130 - _2031)) + _2031);
    float _2148 = _2146 * ((cbModelParam._m0[1u].w * (_2132 - _2033)) + _2033);
    float _2149 = _2146 * ((cbModelParam._m0[1u].w * (_2134 - _2035)) + _2035);
    float _2152 = fma(_2149, cbSceneParam._m0[89u].z, fma(_2148, cbSceneParam._m0[89u].y, _2147 * cbSceneParam._m0[89u].x));
    float _2155 = fma(_2149, cbSceneParam._m0[90u].z, fma(_2148, cbSceneParam._m0[90u].y, _2147 * cbSceneParam._m0[90u].x));
    float _2158 = fma(_2149, cbSceneParam._m0[91u].z, fma(_2148, cbSceneParam._m0[91u].y, _2147 * cbSceneParam._m0[91u].x));
    uvec4 _2168 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2170 = _2168.x * 14u;
    uint _2171 = _2170 + 13u;
    float _2178 = _1106 + (-1.0);
    float _2183 = (cbLight._m0[_2171].x * _2178) + 1.0;
    float _2184 = (cbLight._m0[_2171].y * _2178) + 1.0;
    float _2185 = (cbLight._m0[_2171].z * _2178) + 1.0;
    float _2186 = (cbLight._m0[_2171].w * _2178) + 1.0;
    uint _2187 = _2170 + 5u;
    float _2193 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2197 = _2170 + 4u;
    float _2203 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2207 = _2170 | 1u;
    float _2218 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_944, _945, _946));
    float _2221 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_944, _945, _946));
    float _4460 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _4471 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2226 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * 0.3183098733425140380859375;
    float _2228 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * 0.3183098733425140380859375;
    float _2235 = ((cbLight._m0[_2187].x * _2193) * _2228) + ((cbLight._m0[_2197].x * _2203) * _2226);
    float _2236 = ((_2193 * cbLight._m0[_2187].y) * _2228) + ((_2203 * cbLight._m0[_2197].y) * _2226);
    float _2237 = ((_2193 * cbLight._m0[_2187].z) * _2228) + ((_2203 * cbLight._m0[_2197].z) * _2226);
    uvec4 _2241 = floatBitsToUint(cbLight._m0[_2170 + 12u]);
    bool _2243 = _2241.x == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2243)
    {
        _2254 = _2235;
        _2256 = _2236;
        _2258 = _2237;
    }
    else
    {
        uint _2262 = _2170 + 6u;
        float _2278 = (dot(vec3(cbLight._m0[_2170 + 2u].xyz), vec3(_944, _945, _946)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4482 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2281 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2254 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2235;
        _2256 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2236;
        _2258 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2237;
    }
    bool _2261 = _2241.y == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2261)
    {
        _2299 = _2254;
        _2301 = _2256;
        _2303 = _2258;
    }
    else
    {
        uint _2458 = _2170 + 7u;
        float _2474 = (dot(vec3(cbLight._m0[_2170 + 3u].xyz), vec3(_944, _945, _946)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4498 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2477 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2299 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2254;
        _2301 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2256;
        _2303 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2258;
    }
    uint _2306 = _2170 + 8u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _947) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2170].x + _1023;
    float _2322 = cbLight._m0[_2170].y + _1024;
    float _2323 = cbLight._m0[_2170].z + _1025;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2170].xyz));
    float _4514 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _4525 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _2335 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2336 = dot(vec3(_944, _945, _946), vec3(_2328, _2329, _2330));
    float _4536 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2340 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2328, _2329, _2330));
    float _4547 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2344 = _2320 * _2320;
    float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
    float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2360 = 1.0 - _2320;
    float _2371 = (0.5 / (((_2335 * ((_2334 * _2360) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2360) + _2320) * _2334))) * _2334;
    float _4558 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
    uint _2384 = _2170 + 9u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _947) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2207].x + _1023;
    float _2398 = cbLight._m0[_2207].y + _1024;
    float _2399 = cbLight._m0[_2207].z + _1025;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2207].xyz));
    float _4569 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2411 = dot(vec3(_944, _945, _946), vec3(_2404, _2405, _2406));
    float _4580 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2404, _2405, _2406));
    float _4591 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2396 * _2396;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2432 = (exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2433 = 1.0 - _2396;
    float _2443 = (0.5 / (((_2335 * ((_2410 * _2433) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2433) + _2396) * _2410))) * _2410;
    float _4602 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    float _2455 = (((_2432 * cbLight._m0[_2384].x) * _2445) * _2193) + (((_2359 * cbLight._m0[_2306].x) * _2373) * _2203);
    float _2456 = (((_2432 * cbLight._m0[_2384].y) * _2445) * _2193) + (((_2359 * cbLight._m0[_2306].y) * _2373) * _2203);
    float _2457 = (((_2432 * cbLight._m0[_2384].z) * _2445) * _2193) + (((_2359 * cbLight._m0[_2306].z) * _2373) * _2203);
    float _2519;
    float _2521;
    float _2523;
    if (_2243)
    {
        _2519 = _2455;
        _2521 = _2456;
        _2523 = _2457;
    }
    else
    {
        uint _2525 = _2170 + 2u;
        uint _2529 = _2170 + 10u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _947) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _1023;
        float _2546 = cbLight._m0[_2525].y + _1024;
        float _2547 = cbLight._m0[_2525].z + _1025;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2525].xyz));
        float _4613 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2559 = dot(vec3(_944, _945, _946), vec3(_2552, _2553, _2554));
        float _4624 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4635 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2580 = (exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2581 = 1.0 - _2544;
        float _2591 = (0.5 / (((_2335 * ((_2558 * _2581) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2581) + _2544) * _2558))) * _2558;
        float _4646 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2519 = (((_2580 * cbLight._m0[_2529].x) * _2593) * _2594) + _2455;
        _2521 = (((_2580 * cbLight._m0[_2529].y) * _2593) * _2594) + _2456;
        _2523 = (((_2580 * cbLight._m0[_2529].z) * _2593) * _2594) + _2457;
    }
    float _2629;
    float _2631;
    float _2633;
    if (_2261)
    {
        _2629 = _2519;
        _2631 = _2521;
        _2633 = _2523;
    }
    else
    {
        uint _2640 = _2170 + 3u;
        uint _2644 = _2170 + 11u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _947) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _1023;
        float _2661 = cbLight._m0[_2640].y + _1024;
        float _2662 = cbLight._m0[_2640].z + _1025;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2640].xyz));
        float _4662 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2674 = dot(vec3(_944, _945, _946), vec3(_2667, _2668, _2669));
        float _4673 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4684 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2695 = (exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2696 = 1.0 - _2659;
        float _2706 = (0.5 / (((_2335 * ((_2673 * _2696) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2696) + _2659) * _2673))) * _2673;
        float _4695 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2629 = (((_2695 * cbLight._m0[_2644].x) * _2708) * _2709) + _2519;
        _2631 = (((_2695 * cbLight._m0[_2644].y) * _2708) * _2709) + _2521;
        _2633 = (((_2695 * cbLight._m0[_2644].z) * _2708) * _2709) + _2523;
    }
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_2168.y == 0u)
    {
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2784;
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2784;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2784;
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.x;
        uint _2811 = uint((float(_2799.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1044) / _2800))) + floor(float(uint(cbSceneParam._m0[85u].x * _1043) / _2800)));
        float _2821 = (log2(_2787 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2822 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        uint _2825 = uint(isnan(14.0) ? _2822 : (isnan(_2822) ? 14.0 : min(_2822, 14.0)));
        uvec4 _2830 = texelFetch(g_lightClusterGridBuffer, int(((_2825 << 2u) + (_2811 << 6u)) >> 2u));
        uint _2831 = _2830.x;
        uint _2832 = _2799.z;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        if (((((1u << ((_2832 >> 4u) & 15u)) + 4294967295u) & _2831) == 0u) || ((_2832 & 240u) == 0u))
        {
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
        }
        else
        {
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            uint _3090 = 0u;
            uint _3099;
            bool _3100;
            for (;;)
            {
                _3099 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                _3100 = _3099 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3100)
                {
                    frontier_phi_66_pred = _3084;
                    frontier_phi_66_pred_1 = _3089;
                    frontier_phi_66_pred_2 = _3088;
                    frontier_phi_66_pred_3 = _3087;
                    frontier_phi_66_pred_4 = _3086;
                    frontier_phi_66_pred_5 = _3085;
                }
                else
                {
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    uint _3235;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3099;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    for (;;)
                    {
                        uint _3239 = uint(findLSB(_3235)) + (_3090 << 5u);
                        uint _3236 = (_3235 + 4294967295u) & _3235;
                        uint _3241 = _3239 * 48u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3261 = (_3239 * 48u) + 4u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3280 = (_3239 * 48u) + 8u;
                        vec3 _3291 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x));
                        float _3295 = _3255.x - _2785;
                        float _3296 = _3255.y - _2786;
                        float _3297 = _3255.z - _2787;
                        float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                        float _3301 = inversesqrt(_3298);
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3305 = dot(vec3(_1062, _1065, _1068), vec3(_3302, _3303, _3304));
                        float _3310 = 1.0 - (_3298 * _3255.w);
                        float _4721 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3312 = sqrt(_3298) * _3274.w;
                        float _3315 = 1.39999997615814208984375 / (_3312 + 1.39999997615814208984375);
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3305) + _3316;
                        float _3322 = _3312 * _3312;
                        float _3326 = ((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3311) / ((_3322 * 0.699999988079071044921875) + 1.0);
                        float _3330 = (-0.0) - _2785;
                        float _3331 = (-0.0) - _2786;
                        float _3332 = (-0.0) - _2787;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3347 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                        float _3348 = 1.0 - _1122;
                        float _3355 = sqrt(1.0 - ((1.0 - (_3348 * _3348)) * (1.0 - (_3347 * _3347))));
                        float _3356 = _3355 * _3355;
                        float _3357 = _3356 * _3356;
                        float _3358 = _3337 + _3302;
                        float _3359 = _3338 + _3303;
                        float _3360 = _3339 + _3304;
                        float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                        float _3368 = dot(vec3(_1062, _1065, _1068), vec3(_3337, _3338, _3339));
                        float _4737 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3371 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3372 = dot(vec3(_1062, _1065, _1068), vec3(_3364 * _3358, _3364 * _3359, _3364 * _3360));
                        float _4748 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3375 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3379 = ((_3375 * _3375) * (_3357 + (-1.0))) + 1.0;
                        float _3380 = _3315 * _3356;
                        float _3381 = _3380 * _3380;
                        float _3384 = ((1.0 - _3381) * _3305) + _3381;
                        float _4759 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3385 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3386 = 1.0 - _3356;
                        float _3396 = (0.5 / (((_3385 * ((_3371 * _3386) + _3356)) + 9.9999999392252902907785028219223e-09) + (((_3385 * _3386) + _3356) * _3371))) * _3385;
                        float _4770 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3407 = (((_3357 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3379 * _3379) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125))) * _3311;
                        _3159 = (_3326 * _3274.x) + _3232;
                        _3160 = (_3326 * _3274.y) + _3233;
                        _3161 = (_3326 * _3274.z) + _3234;
                        _3156 = (_3407 * _3291.x) + _3229;
                        _3157 = (_3407 * _3291.y) + _3230;
                        _3158 = (_3407 * _3291.z) + _3231;
                        if (_3236 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3236;
                        }
                    }
                    frontier_phi_66_pred = _3156;
                    frontier_phi_66_pred_1 = _3161;
                    frontier_phi_66_pred_2 = _3160;
                    frontier_phi_66_pred_3 = _3159;
                    frontier_phi_66_pred_4 = _3158;
                    frontier_phi_66_pred_5 = _3157;
                }
                _2933 = frontier_phi_66_pred;
                _2943 = frontier_phi_66_pred_1;
                _2941 = frontier_phi_66_pred_2;
                _2939 = frontier_phi_66_pred_3;
                _2937 = frontier_phi_66_pred_4;
                _2935 = frontier_phi_66_pred_5;
                uint _3091 = _3090 + 1u;
                if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3084 = _2933;
                    _3085 = _2935;
                    _3086 = _2937;
                    _3087 = _2939;
                    _3088 = _2941;
                    _3089 = _2943;
                    _3090 = _3091;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
        }
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.z;
        uint _2949 = (_2947 >> 8u) & 15u;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((4294967295u << _2949) & _2831) == 0u)
        {
            _3052 = _2932;
            _3054 = _2934;
            _3056 = _2936;
            _3058 = _2938;
            _3060 = _2940;
            _3062 = _2942;
        }
        else
        {
            float _3077 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
            float _3078 = _3077 * _2785;
            float _3079 = _3077 * _2786;
            float _3080 = _3077 * _2787;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2949 < ((_2947 >> 12u) & 15u))
            {
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3212 = _2932;
                float _3213 = _2934;
                float _3214 = _2936;
                float _3215 = _2938;
                float _3216 = _2940;
                float _3217 = _2942;
                uint _3218 = _2949;
                uint _3227;
                bool _3228;
                for (;;)
                {
                    _3227 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                    _3228 = _3227 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3228)
                    {
                        frontier_phi_77_pred = _3217;
                        frontier_phi_77_pred_1 = _3216;
                        frontier_phi_77_pred_2 = _3215;
                        frontier_phi_77_pred_3 = _3214;
                        frontier_phi_77_pred_4 = _3213;
                        frontier_phi_77_pred_5 = _3212;
                    }
                    else
                    {
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        uint _3440 = _3227;
                        uint _3441;
                        vec4 _3466;
                        float _3467;
                        vec4 _3482;
                        vec3 _3494;
                        vec4 _3509;
                        vec4 _3524;
                        float _3570;
                        bool _3571;
                        for (;;)
                        {
                            uint _3451 = ((_3218 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3440));
                            _3441 = (_3440 + 4294967295u) & _3440;
                            uint _3453 = _3451 * 40u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            _3467 = _3466.w;
                            uint _3469 = (_3451 * 40u) + 4u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3451 * 40u) + 8u;
                            _3494 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x));
                            uint _3496 = (_3451 * 40u) + 16u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3451 * 40u) + 20u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3451 * 40u) + 24u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3545 = (_3451 * 40u) + 28u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3570 = fma(_2787, _3558.z, fma(_2786, _3558.y, _3558.x * _2785)) + _3558.w;
                            _3571 = !((fma(_2787, _3539.z, fma(_2786, _3539.y, _3539.x * _2785)) + _3539.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3571)
                            {
                                float _3598 = _3466.x - _2785;
                                float _3599 = _3466.y - _2786;
                                float _3600 = _3466.z - _2787;
                                float _3601 = dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600));
                                float _3604 = inversesqrt(_3601);
                                float _3605 = _3604 * _3598;
                                float _3606 = _3604 * _3599;
                                float _3607 = _3604 * _3600;
                                float _3611 = 1.0 - (_3601 / (_3467 * _3467));
                                float _4781 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3616 = sqrt(_3601) * _3482.w;
                                float _3618 = 1.39999997615814208984375 / (_3616 + 1.39999997615814208984375);
                                float _3619 = _3618 * _3618;
                                float _3622 = ((1.0 - _3619) * dot(vec3(_3605, _3606, _3607), vec3(_1062, _1065, _1068))) + _3619;
                                float _3625 = _3616 * _3616;
                                float _3629 = (fma(_2787, _3509.z, fma(_2786, _3509.y, _3509.x * _2785)) + _3509.w) / _3570;
                                float _3630 = (fma(_2787, _3524.z, fma(_2786, _3524.y, _3524.x * _2785)) + _3524.w) / _3570;
                                float _3634 = 1.0 - dot(vec2(_3629, _3630), vec2(_3629, _3630));
                                float _4797 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3636 = _3635 * (((isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0))) * _3612) / ((_3625 * 0.699999988079071044921875) + 1.0));
                                float _3648 = exp2(log2(1.0 / ((_3625 * 3.5) + 5.0)) * 0.25);
                                float _3649 = 1.0 - _1122;
                                float _3656 = sqrt(1.0 - ((1.0 - (_3649 * _3649)) * (1.0 - (_3648 * _3648))));
                                float _3657 = _3656 * _3656;
                                float _3658 = _3657 * _3657;
                                float _3659 = _3605 - _3078;
                                float _3660 = _3606 - _3079;
                                float _3661 = _3607 - _3080;
                                float _3665 = inversesqrt(dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661)));
                                float _3669 = dot(vec3(_1062, _1065, _1068), vec3((-0.0) - _3078, (-0.0) - _3079, (-0.0) - _3080));
                                float _4808 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3673 = dot(vec3(_1062, _1065, _1068), vec3(_3665 * _3659, _3665 * _3660, _3665 * _3661));
                                float _4819 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3680 = ((_3676 * _3676) * (_3658 + (-1.0))) + 1.0;
                                float _3681 = _3618 * _3657;
                                float _3682 = _3681 * _3681;
                                float _3688 = ((1.0 - _3682) * dot(vec3(_1062, _1065, _1068), vec3(_3605, _3606, _3607))) + _3682;
                                float _4830 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3690 = 1.0 - _3657;
                                float _3700 = (0.5 / (((_3689 * ((_3672 * _3690) + _3657)) + 9.9999999392252902907785028219223e-09) + (((_3689 * _3690) + _3657) * _3672))) * _3689;
                                float _4841 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3710 = (_3635 * _3612) * (((_3658 * 3.1415927410125732421875) * (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) / ((_3680 * _3680) * ((_3625 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3636 * _3482.y;
                                frontier_phi_83_pred_1 = _3636 * _3482.x;
                                frontier_phi_83_pred_2 = _3710 * _3494.z;
                                frontier_phi_83_pred_3 = _3710 * _3494.y;
                                frontier_phi_83_pred_4 = _3710 * _3494.x;
                                frontier_phi_83_pred_5 = _3636 * _3482.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3718 = frontier_phi_83_pred;
                            _3717 = frontier_phi_83_pred_1;
                            _3716 = frontier_phi_83_pred_2;
                            _3715 = frontier_phi_83_pred_3;
                            _3714 = frontier_phi_83_pred_4;
                            _3719 = frontier_phi_83_pred_5;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            if (_3441 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3441;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3426;
                        frontier_phi_77_pred_1 = _3425;
                        frontier_phi_77_pred_2 = _3424;
                        frontier_phi_77_pred_3 = _3423;
                        frontier_phi_77_pred_4 = _3422;
                        frontier_phi_77_pred_5 = _3421;
                    }
                    _3063 = frontier_phi_77_pred;
                    _3061 = frontier_phi_77_pred_1;
                    _3059 = frontier_phi_77_pred_2;
                    _3057 = frontier_phi_77_pred_3;
                    _3055 = frontier_phi_77_pred_4;
                    _3053 = frontier_phi_77_pred_5;
                    uint _3219 = _3218 + 1u;
                    if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3212 = _3053;
                        _3213 = _3055;
                        _3214 = _3057;
                        _3215 = _3059;
                        _3216 = _3061;
                        _3217 = _3063;
                        _3218 = _3219;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3057;
                frontier_phi_58_59_ladder_1 = _3063;
                frontier_phi_58_59_ladder_2 = _3061;
                frontier_phi_58_59_ladder_3 = _3059;
                frontier_phi_58_59_ladder_4 = _3055;
                frontier_phi_58_59_ladder_5 = _3053;
            }
            else
            {
                frontier_phi_58_59_ladder = _2936;
                frontier_phi_58_59_ladder_1 = _2942;
                frontier_phi_58_59_ladder_2 = _2940;
                frontier_phi_58_59_ladder_3 = _2938;
                frontier_phi_58_59_ladder_4 = _2934;
                frontier_phi_58_59_ladder_5 = _2932;
            }
            _3052 = frontier_phi_58_59_ladder_5;
            _3054 = frontier_phi_58_59_ladder_4;
            _3056 = frontier_phi_58_59_ladder;
            _3058 = frontier_phi_58_59_ladder_3;
            _3060 = frontier_phi_58_59_ladder_2;
            _3062 = frontier_phi_58_59_ladder_1;
        }
        float _3067 = isnan(1.0) ? _1106 : (isnan(_1106) ? 1.0 : min(_1106, 1.0));
        _2844 = (_3067 * _3058) + _2299;
        _2846 = (_3067 * _3060) + _2301;
        _2848 = (_3067 * _3062) + _2303;
        _2850 = ((_3052 * 0.039999999105930328369140625) * _3067) + _2629;
        _2852 = ((_3054 * 0.039999999105930328369140625) * _3067) + _2631;
        _2854 = ((_3056 * 0.039999999105930328369140625) * _3067) + _2633;
    }
    else
    {
        _2844 = _2299;
        _2846 = _2301;
        _2848 = _2303;
        _2850 = _2629;
        _2852 = _2631;
        _2854 = _2633;
    }
    float _4857 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _4868 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _4879 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _2871 = ((isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2844 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1106))) + ((_2850 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    float _2872 = ((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2846 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1106))) + ((_2852 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    float _2873 = ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2848 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1106))) + ((_2854 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    uint _2874 = _259 + 6u;
    float _2882 = _1043 / cbSceneParam._m0[86u].x;
    float _2883 = _1044 / cbSceneParam._m0[86u].y;
    vec4 _2897 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, (log2((isnan(cbSceneParam._m0[77u].w) ? _965 : (isnan(_965) ? cbSceneParam._m0[77u].w : min(_965, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2899 = _2897.x;
    float _2900 = _2897.y;
    float _2901 = _2897.z;
    float _2902 = _2897.w;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_965 > cbSceneParam._m0[78u].w)
    {
        float _2957 = isnan(_965) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _965 : min(cbSceneParam._m0[80u].w, _965));
        float _2958 = _2957 / _965;
        float _2969 = _2958 * _1016;
        float _2970 = _1017 * _2958;
        float _2971 = (-0.0) - _2970;
        float _2972 = _2958 * _1018;
        float _2974 = (cbSceneParam._m0[77u].w * _2971) / _2957;
        float _2975 = _2974 + cbSceneParam._m0[79u].w;
        float _2976 = cbSceneParam._m0[79u].w - _2970;
        float _2982 = sqrt(((_2969 * _2969) + (_2970 * _2970)) + (_2972 * _2972));
        float _2985 = (1.0 - (cbSceneParam._m0[77u].w / _2957)) * _2982;
        float _2990 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2992 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3169;
        if (abs((_2971 - _2974) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3169 = ((((_2975 > 0.0) ? exp2(_2990 * _2975) : (2.0 - exp2(_2992 * _2975))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2985;
        }
        else
        {
            float _3113 = 1.0 / cbSceneParam._m0[80u].x;
            float _3114 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : max(_2975, _2976));
            float _3115 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : min(_2975, _2976));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            _3169 = ((abs(_2982 / _2971) * cbSceneParam._m0[80u].y) * ((((_3124 - _3125) * 2.0) - ((exp2(_2990 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0)))) - exp2(_2990 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))))) * _3113)) - ((exp2(_2992 * _3124) - exp2(_2992 * _3125)) * _3113))) + (_2985 * cbSceneParam._m0[80u].z);
        }
        vec4 _3171 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, 1.0), 0.0);
        float _3180 = exp2((_3169 * (-1.44269502162933349609375)) * (1.0 - _3171.w));
        float _3181 = log2(_3180);
        float _3197 = log2(_2902);
        _2994 = (exp2(_3197 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].x)) * _3171.x) / cbSceneParam._m0[78u].x)) + _2899;
        _2996 = (exp2(_3197 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].y)) * _3171.y) / cbSceneParam._m0[78u].y)) + _2900;
        _2998 = (exp2(_3197 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].z)) * _3171.z) / cbSceneParam._m0[78u].z)) + _2901;
        _3000 = _3180 * _2902;
    }
    else
    {
        _2994 = _2899;
        _2996 = _2900;
        _2998 = _2901;
        _3000 = _2902;
    }
    bool _3207;
    vec4 _3010;
    vec4 _3032;
    float _3034;
    float _3038;
    float _3039;
    float _3040;
    float _3041;
    bool _3051;
    for (;;)
    {
        _3010 = cbMatDynParam._m0[0u];
        float _3012 = roundEven(_3010.y);
        bool _3013 = _3012 == 3.0;
        float _3014 = log2(_3000);
        float _3021 = exp2(_3014 * cbSceneParam._m0[78u].x) * _2871;
        float _3022 = exp2(_3014 * cbSceneParam._m0[78u].y) * _2872;
        float _3023 = exp2(_3014 * cbSceneParam._m0[78u].z) * _2873;
        float _3030 = _1032 + (-0.5);
        _3032 = cbMtdParam._m0[1u];
        _3034 = _3032.y * _3030;
        float _3037 = (_3012 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3038 = _3037 * (_3013 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2994)));
        _3039 = _3037 * (_3013 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2996)));
        _3040 = _3037 * (_3013 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2998)));
        _3041 = _3030 * 0.999000012874603271484375;
        _3051 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3051)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3041) < 0.5)
            {
                _3207 = true;
                break;
            }
        }
        uint _3148 = _1081 + uint(_3010.w);
        if ((cbInstanceData._m0[_3148].w < 1.0) && ((cbInstanceData._m0[_3148].w + _3041) < 0.5))
        {
            _3207 = true;
            break;
        }
        if ((_3034 + 1.0) < _3032.x)
        {
            _3207 = true;
            break;
        }
        _3207 = false;
        break;
    }
    float _3412;
    if (_3207)
    {
        discard_state = true;
        _3412 = 0.0;
    }
    else
    {
        _3412 = cbInstanceData._m0[_2874].w;
    }
    SV_Target.x = _3038;
    SV_Target.y = _3039;
    SV_Target.z = _3040;
    SV_Target.w = _3412;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2874].w;
    discard_exit();
}


