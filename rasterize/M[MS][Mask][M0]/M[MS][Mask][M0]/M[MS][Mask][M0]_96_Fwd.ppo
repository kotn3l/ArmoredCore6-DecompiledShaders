#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1381;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _337.x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[24u].z) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3683 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _413 = (_406 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _414 = (_406 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _415 = (_406 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _464 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _478 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _337.y) * 2.0) - ((((_454 - _464) * cbMtdParam._m0[24u].z) + _464) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3694 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _486 = (_479 * ((_432.x * cbMtdParam._m0[13u].x) - _413)) + _413;
    float _487 = (_479 * ((_432.y * cbMtdParam._m0[13u].y) - _414)) + _414;
    float _488 = (_479 * ((_432.z * cbMtdParam._m0[13u].z) - _415)) + _415;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    float _555 = ((_527.x - _546) * _406) + _546;
    float _556 = ((_527.y - _547) * _406) + _547;
    float _557 = ((_527.z - _548) * _406) + _548;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _582 = ((_569.z - _557) * _479) + _557;
    float _585 = ((((_569.x - _555) * _479) + _555) * 2.0) + (-1.0);
    float _587 = ((((_569.y - _556) * _479) + _556) * 2.0) + (-1.0);
    float _588 = dot(vec2(_585, _587), vec2(_585, _587));
    float _3705 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _593 = sqrt(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _619 = (((_607.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _585;
    float _620 = (((_607.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _587;
    float _623 = fma(_593, _239, fma(_620, _246, _619 * _232));
    float _626 = fma(_593, _240, fma(_620, _247, _619 * _233));
    float _629 = fma(_593, _241, fma(_620, _248, _619 * _234));
    float _633 = inversesqrt(dot(vec3(_623, _626, _629), vec3(_623, _626, _629)));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _662 = _660.x;
    float _663 = 1.0 - _662;
    float _669 = (cbMtdParam._m0[19u].x + dot(vec4(_633 * _623, _633 * _626, _633 * _629, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_662 - _663) * cbMtdParam._m0[24u].w) + _663) * cbMtdParam._m0[21u].z);
    float _3716 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _670 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _672 = (-0.0) - cbMtdParam._m0[24u].x;
    float _674 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _674 : (isnan(_674) ? 1.0 : min(_674, 1.0));
    float _682 = _670 - ((_670 * TEXCOORD_8.x) * _675);
    float _683 = _670 - ((_670 * TEXCOORD_8.y) * _675);
    float _684 = _670 - ((_670 * TEXCOORD_8.z) * _675);
    float _691 = (_682 * ((_507.x * cbMtdParam._m0[18u].x) - _486)) + _486;
    float _692 = (_683 * ((_507.y * cbMtdParam._m0[18u].y) - _487)) + _487;
    float _693 = (_684 * ((_507.z * cbMtdParam._m0[18u].z) - _488)) + _488;
    vec4 _705 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _707 = _705.x;
    float _708 = 1.0 - _707;
    float _736 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_707 - _708) * cbMtdParam._m0[24u].y) + _708) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3737 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _737 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _745 = ((((cbMtdParam._m0[10u].x - _691) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _737) + _691;
    float _746 = ((((cbMtdParam._m0[10u].y - _692) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _737) + _692;
    float _747 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _693)) * _737) + _693;
    float _751 = (cbMtdParam._m0[19u].w * (_607.z - _582)) + _582;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _772 = (_765.x * 2.0) + (-1.0);
    float _773 = (_765.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _3748 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _782 = ((_765.z - _751) * _682) + _751;
    float _785 = ((cbMtdParam._m0[23u].y - _782) * _737) + _782;
    vec4 _804 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _810 = (_804.x * 2.0) + (-1.0);
    float _811 = (_804.y * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _3759 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _827 = ((sqrt(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) - _593) * _684) + _593;
    float _830 = (((_772 - _619) * _682) + _619) + (cbMtdParam._m0[21u].x * _619);
    float _831 = (((_773 - _620) * _683) + _620) + (cbMtdParam._m0[21u].x * _620);
    float _842 = (((_810 - _830) + (_830 * cbMtdParam._m0[22u].z)) * _737) + _830;
    float _843 = (((_811 - _831) + (_831 * cbMtdParam._m0[22u].z)) * _737) + _831;
    float _844 = (_737 * (sqrt(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) - _827)) + _827;
    float _846 = cbMtdParam._m0[22u].x + _607.w;
    float _849 = fma(_844, _239, fma(_843, _246, _842 * _232));
    float _852 = fma(_844, _240, fma(_843, _247, _842 * _233));
    float _855 = fma(_844, _241, fma(_843, _248, _842 * _234));
    float _859 = inversesqrt(dot(vec3(_849, _852, _855), vec3(_849, _852, _855)));
    float _860 = _859 * _849;
    float _861 = _859 * _852;
    float _862 = _859 * _855;
    float _3770 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _863 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _3792 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _3803 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _3814 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _881 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _932 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _922);
    float _933 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _922);
    float _934 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _922);
    float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
    float _939 = _932 * _938;
    float _940 = _933 * _938;
    float _941 = _934 * _938;
    float _947 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _948 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _966 = fma(_862, cbSceneParam._m0[5u].z, fma(_861, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _860));
    float _969 = fma(_862, cbSceneParam._m0[6u].z, fma(_861, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _860));
    float _972 = fma(_862, cbSceneParam._m0[7u].z, fma(_861, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _860));
    uint _986 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _992 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * cbInstanceData._m0[_986].x;
    float _993 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * cbInstanceData._m0[_986].y;
    float _994 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * cbInstanceData._m0[_986].z;
    float _3825 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    vec4 _1006 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _947, cbSceneParam._m0[86u].y * _948));
    float _1010 = ((isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * TEXCOORD_5.w) * _1006.x;
    float _1011 = dot(vec3(_860, _861, _862), vec3(_939, _940, _941));
    float _1014 = _1011 * 2.0;
    float _1018 = (_1014 * _860) - _939;
    float _1019 = (_1014 * _861) - _940;
    float _1020 = (_1014 * _862) - _941;
    float _1024 = abs(dot(vec3(_939, _940, _941), vec3(_860, _861, _862)));
    float _3858 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1026 = sqrt(_863);
    float _1039 = exp2((_1026 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1026 * 3.0));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1380;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1105 = fma(_1079, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071));
        float _1109 = fma(_1079, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071));
        float _1113 = fma(_1079, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071));
        float _1138 = _1071 + _860;
        float _1139 = _1075 + _861;
        float _1140 = _1079 + _862;
        float _1150 = fma(_1140, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138)) - _1105;
        float _1151 = fma(_1140, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138)) - _1109;
        float _1152 = fma(_1140, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138)) - _1113;
        float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
        float _1169 = ((_1156 * _1150) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1105 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1156 * _1151) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1109 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1156 * _1152) / cbModelParam._m0[34u].z) + ((((((_1113 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        float _1208 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1174.x + (-0.5));
        float _1210 = _1208 * (_1174.y + (-0.5));
        float _1211 = _1208 * (_1174.z + (-0.5));
        float _1218 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1181.x + (-0.5));
        float _1220 = _1218 * (_1181.y + (-0.5));
        float _1221 = _1218 * (_1181.z + (-0.5));
        float _1228 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1188.x + (-0.5));
        float _1230 = _1228 * (_1188.y + (-0.5));
        float _1231 = _1228 * (_1188.z + (-0.5));
        float _1238 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1195.x + (-0.5));
        float _1240 = _1238 * (_1195.y + (-0.5));
        float _1241 = _1238 * (_1195.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1262 = (dot(vec3(_860, _861, _862), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1272 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3906 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1274 + 1.0))) + _1279) * _1242;
        float _1289 = _1210 * 0.5;
        float _1290 = _1220 * 0.5;
        float _1291 = _1230 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_860, _861, _862), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3939 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1316 + 1.0))) + _1321) * _1243;
        float _1331 = _1211 * 0.5;
        float _1332 = _1221 * 0.5;
        float _1333 = _1231 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_860, _861, _862), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3972 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1358 + 1.0))) + _1363) * _1244;
        _1380 = _1211;
        _1382 = _1210;
        _1383 = _1209;
        _1384 = _1221;
        _1385 = _1220;
        _1386 = _1219;
        _1387 = _1231;
        _1388 = _1230;
        _1389 = _1229;
        _1390 = _1244;
        _1391 = _1243;
        _1392 = _1242;
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1381;
        _1382 = _1381;
        _1383 = _1381;
        _1384 = _1381;
        _1385 = _1381;
        _1386 = _1381;
        _1387 = _1381;
        _1388 = _1381;
        _1389 = _1381;
        _1390 = _1381;
        _1391 = _1381;
        _1392 = _1381;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1079, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071));
        float _1423 = fma(_1079, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071));
        float _1427 = fma(_1079, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071));
        float _1450 = _1071 + _860;
        float _1451 = _1075 + _861;
        float _1452 = _1079 + _862;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_860, _861, _862), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4035 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_860, _861, _862), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4068 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_860, _861, _862), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4101 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1381;
        _1689 = _1381;
        _1690 = _1381;
        _1691 = _1381;
        _1692 = _1381;
        _1693 = _1381;
        _1694 = _1381;
        _1695 = _1381;
        _1696 = _1381;
        _1697 = _1381;
        _1698 = _1381;
        _1699 = _1381;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1393)) + _1393;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1394)) + _1394;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1395)) + _1395;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _1018 * 0.5;
    float _1757 = _1019 * 0.5;
    float _1758 = _1020 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1380, _1384, _1387, _1390));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1801 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1814 = (_1810 * cbModelParam._m0[1u].x) + (_1799 * (1.0 - cbModelParam._m0[1u].x));
    float _1824 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _863);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1824 : min(cbModelParam._m0[25u].z, _1824));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1079, cbModelParam._m0[13u].z, fma(_1075, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1079, cbModelParam._m0[14u].z, fma(_1075, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1079, cbModelParam._m0[15u].z, fma(_1075, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_1020, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018));
        float _1886 = fma(_1020, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018));
        float _1889 = fma(_1020, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1917 = frontier_phi_14_12_ladder;
        }
        float _2117;
        if (_1886 > 0.0)
        {
            _2117 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2117 = frontier_phi_23_19_ladder;
        }
        float _2360;
        if (_1889 > 0.0)
        {
            _2360 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2360 = frontier_phi_35_30_ladder;
        }
        float _2362 = isnan(_2117) ? _1917 : (isnan(_1917) ? _2117 : min(_1917, _2117));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1883) + _1872;
        float _2368 = (_2363 * _1886) + _1876;
        float _2369 = (_2363 * _1889) + _1880;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2370;
        float _2374 = _2370 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 > _2374) || ((_2368 < _2372) || ((_2367 < _2372) || (_2367 > _2374))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2369, cbModelParam._m0[9u].z, fma(_2368, cbModelParam._m0[9u].y, _2367 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2369, cbModelParam._m0[10u].z, fma(_2368, cbModelParam._m0[10u].y, _2367 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2369, cbModelParam._m0[11u].z, fma(_2368, cbModelParam._m0[11u].y, _2367 * cbModelParam._m0[11u].x))), _1825);
            frontier_phi_13_35_ladder = _2493.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2493.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2493.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_13_35_ladder_2;
        _1907 = frontier_phi_13_35_ladder_1;
        _1909 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1018, _1019, _1020), _1825);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _863);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2003;
    float _2005;
    float _2007;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1967 = fma(_1079, cbModelParam._m0[21u].z, fma(_1075, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071)) + cbModelParam._m0[21u].w;
        float _1971 = fma(_1079, cbModelParam._m0[22u].z, fma(_1075, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071)) + cbModelParam._m0[22u].w;
        float _1975 = fma(_1079, cbModelParam._m0[23u].z, fma(_1075, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071)) + cbModelParam._m0[23u].w;
        float _1978 = fma(_1020, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018));
        float _1981 = fma(_1020, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018));
        float _1984 = fma(_1020, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018));
        float _2122;
        if (_1978 > 0.0)
        {
            _2122 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2122 = frontier_phi_25_21_ladder;
        }
        float _2387;
        if (_1981 > 0.0)
        {
            _2387 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2387 = frontier_phi_37_32_ladder;
        }
        float _2592;
        if (_1984 > 0.0)
        {
            _2592 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2592 = frontier_phi_46_43_ladder;
        }
        float _2594 = isnan(_2387) ? _2122 : (isnan(_2122) ? _2387 : min(_2122, _2387));
        float _2595 = isnan(_2592) ? _2594 : (isnan(_2594) ? _2592 : min(_2594, _2592));
        float _2599 = (_2595 * _1978) + _1967;
        float _2600 = (_2595 * _1981) + _1971;
        float _2601 = (_2595 * _1984) + _1975;
        float _2602 = _2595 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2602;
        float _2605 = _2602 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2601 > _2605) || ((_2601 < _2603) || ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 < _2603) || (_2599 > _2605))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2601, cbModelParam._m0[17u].z, fma(_2600, cbModelParam._m0[17u].y, _2599 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2601, cbModelParam._m0[18u].z, fma(_2600, cbModelParam._m0[18u].y, _2599 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2601, cbModelParam._m0[19u].z, fma(_2600, cbModelParam._m0[19u].y, _2599 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_22_46_ladder = _2800.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2800.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2800.x * cbModelParam._m0[1u].z;
        }
        _2003 = frontier_phi_22_46_ladder_2;
        _2005 = frontier_phi_22_46_ladder_1;
        _2007 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1018, _1019, _1020), _1914);
        _2003 = _1987.x * cbModelParam._m0[1u].z;
        _2005 = _1987.y * cbModelParam._m0[1u].z;
        _2007 = _1987.z * cbModelParam._m0[1u].z;
    }
    float _2019 = ((((1.0 - _1039) * ((_1026 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1039 * _1026)) * _1010;
    float _2020 = _2019 * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2021 = _2019 * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2022 = _2019 * ((cbModelParam._m0[1u].w * (_2007 - _1909)) + _1909);
    float _2025 = fma(_2022, cbSceneParam._m0[89u].z, fma(_2021, cbSceneParam._m0[89u].y, _2020 * cbSceneParam._m0[89u].x));
    float _2028 = fma(_2022, cbSceneParam._m0[90u].z, fma(_2021, cbSceneParam._m0[90u].y, _2020 * cbSceneParam._m0[90u].x));
    float _2031 = fma(_2022, cbSceneParam._m0[91u].z, fma(_2021, cbSceneParam._m0[91u].y, _2020 * cbSceneParam._m0[91u].x));
    uvec4 _2041 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2043 = _2041.x * 14u;
    uint _2044 = _2043 + 13u;
    float _2051 = _1010 + (-1.0);
    float _2056 = (cbLight._m0[_2044].x * _2051) + 1.0;
    float _2057 = (cbLight._m0[_2044].y * _2051) + 1.0;
    float _2058 = (cbLight._m0[_2044].z * _2051) + 1.0;
    float _2059 = (cbLight._m0[_2044].w * _2051) + 1.0;
    uint _2060 = _2043 + 5u;
    float _2066 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2070 = _2043 + 4u;
    float _2076 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2080 = _2043 | 1u;
    float _2091 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_860, _861, _862));
    float _2094 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_860, _861, _862));
    float _4237 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _4248 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2099 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2101 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.3183098733425140380859375;
    float _2108 = ((cbLight._m0[_2060].x * _2066) * _2101) + ((cbLight._m0[_2070].x * _2076) * _2099);
    float _2109 = ((_2066 * cbLight._m0[_2060].y) * _2101) + ((_2076 * cbLight._m0[_2070].y) * _2099);
    float _2110 = ((_2066 * cbLight._m0[_2060].z) * _2101) + ((_2076 * cbLight._m0[_2070].z) * _2099);
    uvec4 _2114 = floatBitsToUint(cbLight._m0[_2043 + 12u]);
    bool _2116 = _2114.x == 0u;
    float _2127;
    float _2129;
    float _2131;
    if (_2116)
    {
        _2127 = _2108;
        _2129 = _2109;
        _2131 = _2110;
    }
    else
    {
        uint _2135 = _2043 + 6u;
        float _2151 = (dot(vec3(cbLight._m0[_2043 + 2u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2152 = _2151 * _2151;
        float _4259 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2154 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2127 = (((cbLight._m0[_2135].x * 0.3183098733425140380859375) * _2153) * _2154) + _2108;
        _2129 = (((cbLight._m0[_2135].y * 0.3183098733425140380859375) * _2153) * _2154) + _2109;
        _2131 = (((cbLight._m0[_2135].z * 0.3183098733425140380859375) * _2153) * _2154) + _2110;
    }
    bool _2134 = _2114.y == 0u;
    float _2172;
    float _2174;
    float _2176;
    if (_2134)
    {
        _2172 = _2127;
        _2174 = _2129;
        _2176 = _2131;
    }
    else
    {
        uint _2331 = _2043 + 7u;
        float _2347 = (dot(vec3(cbLight._m0[_2043 + 3u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4275 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2350 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2172 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2127;
        _2174 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2129;
        _2176 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2131;
    }
    uint _2179 = _2043 + 8u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _863) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_2043].x + _939;
    float _2195 = cbLight._m0[_2043].y + _940;
    float _2196 = cbLight._m0[_2043].z + _941;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2043].xyz));
    float _4291 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _2208 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2209 = dot(vec3(_860, _861, _862), vec3(_2201, _2202, _2203));
    float _4313 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2201, _2202, _2203));
    float _4324 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2193 * _2193;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2233 = 1.0 - _2193;
    float _2244 = (0.5 / (((_2208 * ((_2207 * _2233) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2233) + _2193) * _2207))) * _2207;
    float _4335 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    uint _2257 = _2043 + 9u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _863) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2080].x + _939;
    float _2271 = cbLight._m0[_2080].y + _940;
    float _2272 = cbLight._m0[_2080].z + _941;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2080].xyz));
    float _4346 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2284 = dot(vec3(_860, _861, _862), vec3(_2277, _2278, _2279));
    float _4357 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2277, _2278, _2279));
    float _4368 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2269 * _2269;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2306 = 1.0 - _2269;
    float _2316 = (0.5 / (((_2208 * ((_2283 * _2306) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2306) + _2269) * _2283))) * _2283;
    float _4379 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    float _2328 = (((_2305 * cbLight._m0[_2257].x) * _2318) * _2066) + (((_2232 * cbLight._m0[_2179].x) * _2246) * _2076);
    float _2329 = (((_2305 * cbLight._m0[_2257].y) * _2318) * _2066) + (((_2232 * cbLight._m0[_2179].y) * _2246) * _2076);
    float _2330 = (((_2305 * cbLight._m0[_2257].z) * _2318) * _2066) + (((_2232 * cbLight._m0[_2179].z) * _2246) * _2076);
    float _2392;
    float _2394;
    float _2396;
    if (_2116)
    {
        _2392 = _2328;
        _2394 = _2329;
        _2396 = _2330;
    }
    else
    {
        uint _2398 = _2043 + 2u;
        uint _2402 = _2043 + 10u;
        float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _863) * 0.949999988079071044921875);
        float _2417 = _2416 * _2416;
        float _2418 = cbLight._m0[_2398].x + _939;
        float _2419 = cbLight._m0[_2398].y + _940;
        float _2420 = cbLight._m0[_2398].z + _941;
        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
        float _2425 = _2424 * _2418;
        float _2426 = _2424 * _2419;
        float _2427 = _2424 * _2420;
        float _2428 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2398].xyz));
        float _4390 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2432 = dot(vec3(_860, _861, _862), vec3(_2425, _2426, _2427));
        float _4401 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2436 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2425, _2426, _2427));
        float _4412 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2440 = _2417 * _2417;
        float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
        float _2453 = (exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2454 = 1.0 - _2417;
        float _2464 = (0.5 / (((_2208 * ((_2431 * _2454) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2454) + _2417) * _2431))) * _2431;
        float _4423 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2466 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
        float _2467 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2392 = (((_2453 * cbLight._m0[_2402].x) * _2466) * _2467) + _2328;
        _2394 = (((_2453 * cbLight._m0[_2402].y) * _2466) * _2467) + _2329;
        _2396 = (((_2453 * cbLight._m0[_2402].z) * _2466) * _2467) + _2330;
    }
    float _2502;
    float _2504;
    float _2506;
    if (_2134)
    {
        _2502 = _2392;
        _2504 = _2394;
        _2506 = _2396;
    }
    else
    {
        uint _2513 = _2043 + 3u;
        uint _2517 = _2043 + 11u;
        float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _863) * 0.949999988079071044921875);
        float _2532 = _2531 * _2531;
        float _2533 = cbLight._m0[_2513].x + _939;
        float _2534 = cbLight._m0[_2513].y + _940;
        float _2535 = cbLight._m0[_2513].z + _941;
        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
        float _2540 = _2539 * _2533;
        float _2541 = _2539 * _2534;
        float _2542 = _2539 * _2535;
        float _2543 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2513].xyz));
        float _4439 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2547 = dot(vec3(_860, _861, _862), vec3(_2540, _2541, _2542));
        float _4450 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2551 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2540, _2541, _2542));
        float _4461 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _2532 * _2532;
        float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
        float _2568 = (exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2569 = 1.0 - _2532;
        float _2579 = (0.5 / (((_2208 * ((_2546 * _2569) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2569) + _2532) * _2546))) * _2546;
        float _4472 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2502 = (((_2568 * cbLight._m0[_2517].x) * _2581) * _2582) + _2392;
        _2504 = (((_2568 * cbLight._m0[_2517].y) * _2581) * _2582) + _2394;
        _2506 = (((_2568 * cbLight._m0[_2517].z) * _2581) * _2582) + _2396;
    }
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_2041.y == 0u)
    {
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2657;
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2657;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2657;
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.x;
        uint _2684 = uint((float(_2672.y) * floor(float(uint(cbSceneParam._m0[85u].y * _948) / _2673))) + floor(float(uint(cbSceneParam._m0[85u].x * _947) / _2673)));
        float _2694 = (log2(_2660 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2695 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        uint _2698 = uint(isnan(14.0) ? _2695 : (isnan(_2695) ? 14.0 : min(_2695, 14.0)));
        uvec4 _2703 = texelFetch(g_lightClusterGridBuffer, int(((_2698 << 2u) + (_2684 << 6u)) >> 2u));
        uint _2704 = _2703.x;
        uint _2705 = _2672.z;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((((1u << ((_2705 >> 4u) & 15u)) + 4294967295u) & _2704) == 0u) || ((_2705 & 240u) == 0u))
        {
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
        }
        else
        {
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            uint _2955 = 0u;
            uint _2964;
            bool _2965;
            for (;;)
            {
                _2964 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                _2965 = _2964 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2965)
                {
                    frontier_phi_61_pred = _2949;
                    frontier_phi_61_pred_1 = _2954;
                    frontier_phi_61_pred_2 = _2953;
                    frontier_phi_61_pred_3 = _2952;
                    frontier_phi_61_pred_4 = _2951;
                    frontier_phi_61_pred_5 = _2950;
                }
                else
                {
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    uint _3079;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2964;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    for (;;)
                    {
                        uint _3083 = uint(findLSB(_3079)) + (_2955 << 5u);
                        uint _3080 = (_3079 + 4294967295u) & _3079;
                        uint _3085 = _3083 * 48u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3105 = (_3083 * 48u) + 4u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3124 = (_3083 * 48u) + 8u;
                        vec3 _3135 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x));
                        float _3139 = _3099.x - _2658;
                        float _3140 = _3099.y - _2659;
                        float _3141 = _3099.z - _2660;
                        float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                        float _3145 = inversesqrt(_3142);
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3149 = dot(vec3(_966, _969, _972), vec3(_3146, _3147, _3148));
                        float _3154 = 1.0 - (_3142 * _3099.w);
                        float _4498 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3156 = sqrt(_3142) * _3118.w;
                        float _3159 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3149) + _3160;
                        float _3166 = _3156 * _3156;
                        float _3170 = ((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3155) / ((_3166 * 0.699999988079071044921875) + 1.0);
                        float _3174 = (-0.0) - _2658;
                        float _3175 = (-0.0) - _2659;
                        float _3176 = (-0.0) - _2660;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3181 = _3180 * _3174;
                        float _3182 = _3180 * _3175;
                        float _3183 = _3180 * _3176;
                        float _3191 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                        float _3192 = 1.0 - _1026;
                        float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                        float _3200 = _3199 * _3199;
                        float _3201 = _3200 * _3200;
                        float _3202 = _3181 + _3146;
                        float _3203 = _3182 + _3147;
                        float _3204 = _3183 + _3148;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3212 = dot(vec3(_966, _969, _972), vec3(_3181, _3182, _3183));
                        float _4514 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3216 = dot(vec3(_966, _969, _972), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                        float _4525 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                        float _3224 = _3159 * _3200;
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3149) + _3225;
                        float _4536 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3230 = 1.0 - _3200;
                        float _3240 = (0.5 / (((_3229 * ((_3215 * _3230) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3200) * _3215))) * _3229;
                        float _4547 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3251 = (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3223 * _3223) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125))) * _3155;
                        _3008 = (_3170 * _3118.x) + _3076;
                        _3009 = (_3170 * _3118.y) + _3077;
                        _3010 = (_3170 * _3118.z) + _3078;
                        _3005 = (_3251 * _3135.x) + _3073;
                        _3006 = (_3251 * _3135.y) + _3074;
                        _3007 = (_3251 * _3135.z) + _3075;
                        if (_3080 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3080;
                        }
                    }
                    frontier_phi_61_pred = _3005;
                    frontier_phi_61_pred_1 = _3010;
                    frontier_phi_61_pred_2 = _3009;
                    frontier_phi_61_pred_3 = _3008;
                    frontier_phi_61_pred_4 = _3007;
                    frontier_phi_61_pred_5 = _3006;
                }
                _2806 = frontier_phi_61_pred;
                _2816 = frontier_phi_61_pred_1;
                _2814 = frontier_phi_61_pred_2;
                _2812 = frontier_phi_61_pred_3;
                _2810 = frontier_phi_61_pred_4;
                _2808 = frontier_phi_61_pred_5;
                uint _2956 = _2955 + 1u;
                if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2949 = _2806;
                    _2950 = _2808;
                    _2951 = _2810;
                    _2952 = _2812;
                    _2953 = _2814;
                    _2954 = _2816;
                    _2955 = _2956;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
        }
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.z;
        uint _2822 = (_2820 >> 8u) & 15u;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        if (((4294967295u << _2822) & _2704) == 0u)
        {
            _2917 = _2805;
            _2919 = _2807;
            _2921 = _2809;
            _2923 = _2811;
            _2925 = _2813;
            _2927 = _2815;
        }
        else
        {
            float _2942 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
            float _2943 = _2942 * _2658;
            float _2944 = _2942 * _2659;
            float _2945 = _2942 * _2660;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2822 < ((_2820 >> 12u) & 15u))
            {
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _3056 = _2805;
                float _3057 = _2807;
                float _3058 = _2809;
                float _3059 = _2811;
                float _3060 = _2813;
                float _3061 = _2815;
                uint _3062 = _2822;
                uint _3071;
                bool _3072;
                for (;;)
                {
                    _3071 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                    _3072 = _3071 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3072)
                    {
                        frontier_phi_67_pred = _3059;
                        frontier_phi_67_pred_1 = _3060;
                        frontier_phi_67_pred_2 = _3061;
                        frontier_phi_67_pred_3 = _3058;
                        frontier_phi_67_pred_4 = _3057;
                        frontier_phi_67_pred_5 = _3056;
                    }
                    else
                    {
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3269 = _3056;
                        float _3270 = _3057;
                        float _3271 = _3058;
                        float _3272 = _3059;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        uint _3275 = _3071;
                        uint _3276;
                        vec4 _3301;
                        float _3302;
                        vec4 _3317;
                        vec3 _3329;
                        vec4 _3344;
                        vec4 _3359;
                        float _3405;
                        bool _3406;
                        for (;;)
                        {
                            uint _3286 = ((_3062 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3275));
                            _3276 = (_3275 + 4294967295u) & _3275;
                            uint _3288 = _3286 * 40u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3302 = _3301.w;
                            uint _3304 = (_3286 * 40u) + 4u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3319 = (_3286 * 40u) + 8u;
                            _3329 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x));
                            uint _3331 = (_3286 * 40u) + 16u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3286 * 40u) + 20u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3361 = (_3286 * 40u) + 24u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3380 = (_3286 * 40u) + 28u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3405 = fma(_2660, _3393.z, fma(_2659, _3393.y, _3393.x * _2658)) + _3393.w;
                            _3406 = !((fma(_2660, _3374.z, fma(_2659, _3374.y, _3374.x * _2658)) + _3374.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3406)
                            {
                                float _3433 = _3301.x - _2658;
                                float _3434 = _3301.y - _2659;
                                float _3435 = _3301.z - _2660;
                                float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                                float _3439 = inversesqrt(_3436);
                                float _3440 = _3439 * _3433;
                                float _3441 = _3439 * _3434;
                                float _3442 = _3439 * _3435;
                                float _3446 = 1.0 - (_3436 / (_3302 * _3302));
                                float _4558 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3451 = sqrt(_3436) * _3317.w;
                                float _3453 = 1.39999997615814208984375 / (_3451 + 1.39999997615814208984375);
                                float _3454 = _3453 * _3453;
                                float _3457 = ((1.0 - _3454) * dot(vec3(_3440, _3441, _3442), vec3(_966, _969, _972))) + _3454;
                                float _3460 = _3451 * _3451;
                                float _3464 = (fma(_2660, _3344.z, fma(_2659, _3344.y, _3344.x * _2658)) + _3344.w) / _3405;
                                float _3465 = (fma(_2660, _3359.z, fma(_2659, _3359.y, _3359.x * _2658)) + _3359.w) / _3405;
                                float _3469 = 1.0 - dot(vec2(_3464, _3465), vec2(_3464, _3465));
                                float _4574 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3471 = _3470 * (((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3447) / ((_3460 * 0.699999988079071044921875) + 1.0));
                                float _3483 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                                float _3484 = 1.0 - _1026;
                                float _3491 = sqrt(1.0 - ((1.0 - (_3484 * _3484)) * (1.0 - (_3483 * _3483))));
                                float _3492 = _3491 * _3491;
                                float _3493 = _3492 * _3492;
                                float _3494 = _3440 - _2943;
                                float _3495 = _3441 - _2944;
                                float _3496 = _3442 - _2945;
                                float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                                float _3504 = dot(vec3(_966, _969, _972), vec3((-0.0) - _2943, (-0.0) - _2944, (-0.0) - _2945));
                                float _4585 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3507 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3508 = dot(vec3(_966, _969, _972), vec3(_3500 * _3494, _3500 * _3495, _3500 * _3496));
                                float _4596 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3515 = ((_3511 * _3511) * (_3493 + (-1.0))) + 1.0;
                                float _3516 = _3453 * _3492;
                                float _3517 = _3516 * _3516;
                                float _3523 = ((1.0 - _3517) * dot(vec3(_966, _969, _972), vec3(_3440, _3441, _3442))) + _3517;
                                float _4607 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3525 = 1.0 - _3492;
                                float _3535 = (0.5 / (((_3524 * ((_3507 * _3525) + _3492)) + 9.9999999392252902907785028219223e-09) + (((_3524 * _3525) + _3492) * _3507))) * _3524;
                                float _4618 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3545 = (_3470 * _3447) * (((_3493 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3515 * _3515) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3545 * _3329.x;
                                frontier_phi_73_pred_1 = _3545 * _3329.y;
                                frontier_phi_73_pred_2 = _3471 * _3317.z;
                                frontier_phi_73_pred_3 = _3471 * _3317.y;
                                frontier_phi_73_pred_4 = _3471 * _3317.x;
                                frontier_phi_73_pred_5 = _3545 * _3329.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3549 = frontier_phi_73_pred;
                            _3550 = frontier_phi_73_pred_1;
                            _3554 = frontier_phi_73_pred_2;
                            _3553 = frontier_phi_73_pred_3;
                            _3552 = frontier_phi_73_pred_4;
                            _3551 = frontier_phi_73_pred_5;
                            _3259 = _3552 + _3272;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3256 = _3549 + _3269;
                            _3257 = _3550 + _3270;
                            _3258 = _3551 + _3271;
                            if (_3276 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3276;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3259;
                        frontier_phi_67_pred_1 = _3260;
                        frontier_phi_67_pred_2 = _3261;
                        frontier_phi_67_pred_3 = _3258;
                        frontier_phi_67_pred_4 = _3257;
                        frontier_phi_67_pred_5 = _3256;
                    }
                    _2924 = frontier_phi_67_pred;
                    _2926 = frontier_phi_67_pred_1;
                    _2928 = frontier_phi_67_pred_2;
                    _2922 = frontier_phi_67_pred_3;
                    _2920 = frontier_phi_67_pred_4;
                    _2918 = frontier_phi_67_pred_5;
                    uint _3063 = _3062 + 1u;
                    if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3056 = _2918;
                        _3057 = _2920;
                        _3058 = _2922;
                        _3059 = _2924;
                        _3060 = _2926;
                        _3061 = _2928;
                        _3062 = _3063;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2926;
                frontier_phi_55_56_ladder_1 = _2928;
                frontier_phi_55_56_ladder_2 = _2924;
                frontier_phi_55_56_ladder_3 = _2922;
                frontier_phi_55_56_ladder_4 = _2920;
                frontier_phi_55_56_ladder_5 = _2918;
            }
            else
            {
                frontier_phi_55_56_ladder = _2813;
                frontier_phi_55_56_ladder_1 = _2815;
                frontier_phi_55_56_ladder_2 = _2811;
                frontier_phi_55_56_ladder_3 = _2809;
                frontier_phi_55_56_ladder_4 = _2807;
                frontier_phi_55_56_ladder_5 = _2805;
            }
            _2917 = frontier_phi_55_56_ladder_5;
            _2919 = frontier_phi_55_56_ladder_4;
            _2921 = frontier_phi_55_56_ladder_3;
            _2923 = frontier_phi_55_56_ladder_2;
            _2925 = frontier_phi_55_56_ladder;
            _2927 = frontier_phi_55_56_ladder_1;
        }
        float _2932 = isnan(1.0) ? _1010 : (isnan(_1010) ? 1.0 : min(_1010, 1.0));
        _2717 = (_2932 * _2923) + _2172;
        _2719 = (_2932 * _2925) + _2174;
        _2721 = (_2932 * _2927) + _2176;
        _2723 = ((_2917 * 0.039999999105930328369140625) * _2932) + _2502;
        _2725 = ((_2919 * 0.039999999105930328369140625) * _2932) + _2504;
        _2727 = ((_2921 * 0.039999999105930328369140625) * _2932) + _2506;
    }
    else
    {
        _2717 = _2172;
        _2719 = _2174;
        _2721 = _2176;
        _2723 = _2502;
        _2725 = _2504;
        _2727 = _2506;
    }
    float _4634 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4645 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4656 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    uint _2747 = _251 + 6u;
    float _2755 = _947 / cbSceneParam._m0[86u].x;
    float _2756 = _948 / cbSceneParam._m0[86u].y;
    vec4 _2770 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, (log2((isnan(cbSceneParam._m0[77u].w) ? _881 : (isnan(_881) ? cbSceneParam._m0[77u].w : min(_881, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2772 = _2770.x;
    float _2773 = _2770.y;
    float _2774 = _2770.z;
    float _2775 = _2770.w;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_881 > cbSceneParam._m0[78u].w)
    {
        float _2830 = isnan(_881) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _881 : min(cbSceneParam._m0[80u].w, _881));
        float _2831 = _2830 / _881;
        float _2842 = _2831 * _932;
        float _2843 = _933 * _2831;
        float _2844 = (-0.0) - _2843;
        float _2845 = _2831 * _934;
        float _2847 = (cbSceneParam._m0[77u].w * _2844) / _2830;
        float _2848 = _2847 + cbSceneParam._m0[79u].w;
        float _2849 = cbSceneParam._m0[79u].w - _2843;
        float _2855 = sqrt(((_2842 * _2842) + (_2843 * _2843)) + (_2845 * _2845));
        float _2858 = (1.0 - (cbSceneParam._m0[77u].w / _2830)) * _2855;
        float _2863 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2865 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3018;
        if (abs((_2844 - _2847) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3018 = ((((_2848 > 0.0) ? exp2(_2863 * _2848) : (2.0 - exp2(_2865 * _2848))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2858;
        }
        else
        {
            float _2978 = 1.0 / cbSceneParam._m0[80u].x;
            float _2979 = isnan(_2849) ? _2848 : (isnan(_2848) ? _2849 : max(_2848, _2849));
            float _2980 = isnan(_2849) ? _2848 : (isnan(_2848) ? _2849 : min(_2848, _2849));
            float _2989 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : min(_2979, 0.0));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            _3018 = ((abs(_2855 / _2844) * cbSceneParam._m0[80u].y) * ((((_2989 - _2990) * 2.0) - ((exp2(_2863 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0)))) - exp2(_2863 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))))) * _2978)) - ((exp2(_2865 * _2989) - exp2(_2865 * _2990)) * _2978))) + (_2858 * cbSceneParam._m0[80u].z);
        }
        vec4 _3020 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, 1.0), 0.0);
        float _3029 = exp2((_3018 * (-1.44269502162933349609375)) * (1.0 - _3020.w));
        float _3030 = log2(_3029);
        float _3046 = log2(_2775);
        _2867 = (exp2(_3046 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].x)) * _3020.x) / cbSceneParam._m0[78u].x)) + _2772;
        _2869 = (exp2(_3046 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].y)) * _3020.y) / cbSceneParam._m0[78u].y)) + _2773;
        _2871 = (exp2(_3046 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].z)) * _3020.z) / cbSceneParam._m0[78u].z)) + _2774;
        _2873 = _3029 * _2775;
    }
    else
    {
        _2867 = _2772;
        _2869 = _2773;
        _2871 = _2774;
        _2873 = _2775;
    }
    float _2885 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2886 = _2885 == 3.0;
    float _2887 = log2(_2873);
    float _2894 = exp2(_2887 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2717 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1010))) + ((_2723 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _2895 = exp2(_2887 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2719 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1010))) + ((_2725 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _2896 = exp2(_2887 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2721 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1010))) + ((_2727 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _2905 = (_2885 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2905 * (_2886 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2867)));
    SV_Target.y = _2905 * (_2886 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2869)));
    SV_Target.z = _2905 * (_2886 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2871)));
    SV_Target.w = cbInstanceData._m0[_2747].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2747].w;
}


