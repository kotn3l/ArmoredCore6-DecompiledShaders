#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1608;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4193 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4204 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4215 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _462 = _460.x;
    float _474 = dot(vec4(_462, _460.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _491 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_462 - _474) * cbMtdParam._m0[24u].z) + _474) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4226 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _499 = (_492 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _500 = (_492 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _501 = (_492 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _540 = _538.x;
    float _550 = dot(vec4(_540, _538.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _564 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_540 - _550) * cbMtdParam._m0[24u].z) + _550) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4237 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _572 = (_565 * ((_518.x * cbMtdParam._m0[13u].x) - _499)) + _499;
    float _573 = (_565 * ((_518.y * cbMtdParam._m0[13u].y) - _500)) + _500;
    float _574 = (_565 * ((_518.z * cbMtdParam._m0[13u].z) - _501)) + _501;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _314) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _315) + cbTextureTilingScale._m0[24u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _611 = _609.x;
    float _621 = dot(vec4(_611, _609.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _633 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _422.z) * 2.0) - ((((_611 - _621) * cbMtdParam._m0[24u].z) + _621) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4248 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _644 = (_351.x * cbMtdParam._m0[9u].x) * ((_634 * ((_592.x * cbMtdParam._m0[14u].x) - _572)) + _572);
    float _645 = (_351.y * cbMtdParam._m0[9u].y) * ((_634 * ((_592.y * cbMtdParam._m0[14u].y) - _573)) + _573);
    float _646 = (_351.z * cbMtdParam._m0[9u].z) * ((_634 * ((_592.z * cbMtdParam._m0[14u].z) - _574)) + _574);
    float _650 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _644;
    float _653 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _645;
    float _656 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _646;
    float _664 = (((_644 - _650) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) + _650) * 4.55000019073486328125;
    float _666 = (((_645 - _653) * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) + _653) * 4.55000019073486328125;
    float _668 = (((_646 - _656) * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) + _656) * 4.55000019073486328125;
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _314) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _315) + cbTextureTilingScale._m0[14u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _747 = _745.x;
    float _748 = _745.y;
    float _749 = _745.z;
    float _756 = ((_728.x - _747) * _492) + _747;
    float _757 = ((_728.y - _748) * _492) + _748;
    float _758 = ((_728.z - _749) * _492) + _749;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _781 = ((_770.x - _756) * _565) + _756;
    float _782 = ((_770.y - _757) * _565) + _757;
    float _783 = ((_770.z - _758) * _565) + _758;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _314) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _315) + cbTextureTilingScale._m0[23u].w));
    float _808 = ((_795.z - _783) * _634) + _783;
    float _811 = ((((_795.x - _781) * _634) + _781) * 2.0) + (-1.0);
    float _812 = ((((_795.y - _782) * _634) + _782) * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _4259 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _818 = sqrt(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))));
    vec4 _832 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _857 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _859 = _857.x;
    float _860 = 1.0 - _859;
    float _866 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _869 = ((isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : min(_866, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _878 = (_869 - ((((((_859 - _860) * cbMtdParam._m0[24u].w) + _860) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _869))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4280 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _879 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _886 = (_879 * ((_686.x * cbMtdParam._m0[18u].x) - _664)) + _664;
    float _887 = (_879 * ((_686.y * cbMtdParam._m0[18u].y) - _666)) + _666;
    float _888 = (_879 * ((_686.z * cbMtdParam._m0[18u].z) - _668)) + _668;
    float _903 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _904 = _903 * TEXCOORD.z;
    float _905 = _903 * TEXCOORD.w;
    vec4 _917 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _904) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _905) + cbTextureTilingScale._m0[19u].w));
    float _919 = _917.x;
    float _920 = 1.0 - _919;
    float _947 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_919 - _920) * cbMtdParam._m0[24u].y) + _920) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4291 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _948 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _956 = ((((cbMtdParam._m0[10u].x - _886) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _948) + _886;
    float _957 = ((((cbMtdParam._m0[10u].y - _887) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _948) + _887;
    float _958 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _888)) * _948) + _888;
    float _963 = (((_705.z - _808) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _808;
    float _967 = ((_832.z - _963) * cbMtdParam._m0[19u].w) + _963;
    vec4 _981 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _988 = (_981.x * 2.0) + (-1.0);
    float _989 = (_981.y * 2.0) + (-1.0);
    float _990 = dot(vec2(_988, _989), vec2(_988, _989));
    float _4302 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _998 = (_879 * (_981.z - _967)) + _967;
    float _1001 = ((cbMtdParam._m0[23u].y - _998) * _948) + _998;
    vec4 _1022 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _904) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _905) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1028 = (_1022.x * 2.0) + (-1.0);
    float _1029 = (_1022.y * 2.0) + (-1.0);
    float _1030 = dot(vec2(_1028, _1029), vec2(_1028, _1029));
    float _4313 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1044 = (_811 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_705.x * 2.0) + (-1.0)))) + (((_832.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1045 = (_812 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_705.y * 2.0) + (-1.0)))) + (((_832.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1057 = (((_988 - _1044) + (cbMtdParam._m0[21u].x * _1044)) * _879) + _1044;
    float _1058 = (((_989 - _1045) + (cbMtdParam._m0[21u].x * _1045)) * _879) + _1045;
    float _1059 = (_879 * (sqrt(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) - _818)) + _818;
    float _1070 = (((_1028 - _1057) + (_1057 * cbMtdParam._m0[22u].z)) * _948) + _1057;
    float _1071 = (((_1029 - _1058) + (_1058 * cbMtdParam._m0[22u].z)) * _948) + _1058;
    float _1072 = ((sqrt(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) - _1059) * _948) + _1059;
    float _1074 = cbMtdParam._m0[22u].x + _832.w;
    float _1077 = fma(_1072, _263 * NORMAL.x, fma(_1071, _270 * TANGENT.x, (_256 * _248) * _1070));
    float _1080 = fma(_1072, _263 * NORMAL.y, fma(_1071, _270 * TANGENT.y, (_256 * _249) * _1070));
    float _1083 = fma(_1072, _263 * NORMAL.z, fma(_1071, _270 * TANGENT.z, (_256 * _250) * _1070));
    float _1087 = inversesqrt(dot(vec3(_1077, _1080, _1083), vec3(_1077, _1080, _1083)));
    float _1088 = _1087 * _1077;
    float _1089 = _1087 * _1080;
    float _1090 = _1087 * _1083;
    float _4324 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1091 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _4335 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _4346 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4357 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4368 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _1109 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1159 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1149);
    float _1160 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1149);
    float _1161 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1149);
    float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
    float _1166 = _1159 * _1165;
    float _1167 = _1160 * _1165;
    float _1168 = _1161 * _1165;
    float _1174 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1175 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1193 = fma(_1090, cbSceneParam._m0[5u].z, fma(_1089, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1088));
    float _1196 = fma(_1090, cbSceneParam._m0[6u].z, fma(_1089, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1088));
    float _1199 = fma(_1090, cbSceneParam._m0[7u].z, fma(_1089, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1088));
    uint _1213 = (_295 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1219 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * cbInstanceData._m0[_1213].x;
    float _1220 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * cbInstanceData._m0[_1213].y;
    float _1221 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * cbInstanceData._m0[_1213].z;
    float _4379 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _1222 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _4390 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1223 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _4401 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _1224 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    vec4 _1233 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1174, cbSceneParam._m0[86u].y * _1175));
    float _1237 = ((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * TEXCOORD_5.w) * _1233.x;
    float _1238 = dot(vec3(_1088, _1089, _1090), vec3(_1166, _1167, _1168));
    float _1241 = _1238 * 2.0;
    float _1245 = (_1241 * _1088) - _1166;
    float _1246 = (_1241 * _1089) - _1167;
    float _1247 = (_1241 * _1090) - _1168;
    float _1251 = abs(dot(vec3(_1166, _1167, _1168), vec3(_1088, _1089, _1090)));
    float _4412 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
    float _1253 = sqrt(_1091);
    float _1266 = exp2((_1253 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1253 * 3.0));
    float _1298 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1302 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1306 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1607;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1332 = fma(_1306, cbModelParam._m0[26u].z, fma(_1302, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1298));
        float _1336 = fma(_1306, cbModelParam._m0[27u].z, fma(_1302, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1298));
        float _1340 = fma(_1306, cbModelParam._m0[28u].z, fma(_1302, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1298));
        float _1365 = _1298 + _1088;
        float _1366 = _1302 + _1089;
        float _1367 = _1306 + _1090;
        float _1377 = fma(_1367, cbModelParam._m0[26u].z, fma(_1366, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1365)) - _1332;
        float _1378 = fma(_1367, cbModelParam._m0[27u].z, fma(_1366, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1365)) - _1336;
        float _1379 = fma(_1367, cbModelParam._m0[28u].z, fma(_1366, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1365)) - _1340;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1332 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1336 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[34u].z) + ((((((_1340 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1435 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1401.x + (-0.5));
        float _1437 = _1435 * (_1401.y + (-0.5));
        float _1438 = _1435 * (_1401.z + (-0.5));
        float _1445 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1408.x + (-0.5));
        float _1447 = _1445 * (_1408.y + (-0.5));
        float _1448 = _1445 * (_1408.z + (-0.5));
        float _1455 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1415.x + (-0.5));
        float _1457 = _1455 * (_1415.y + (-0.5));
        float _1458 = _1455 * (_1415.z + (-0.5));
        float _1465 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1422.x + (-0.5));
        float _1467 = _1465 * (_1422.y + (-0.5));
        float _1468 = _1465 * (_1422.z + (-0.5));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = _1436 * 0.5;
        float _1473 = _1446 * 0.5;
        float _1474 = _1456 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1489 = (dot(vec3(_1088, _1089, _1090), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1499 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4460 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1501 + 1.0))) + _1506) * _1469;
        float _1516 = _1437 * 0.5;
        float _1517 = _1447 * 0.5;
        float _1518 = _1457 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_1088, _1089, _1090), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4493 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1543 + 1.0))) + _1548) * _1470;
        float _1558 = _1438 * 0.5;
        float _1559 = _1448 * 0.5;
        float _1560 = _1458 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_1088, _1089, _1090), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4526 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1585 + 1.0))) + _1590) * _1471;
        _1607 = _1438;
        _1609 = _1437;
        _1610 = _1436;
        _1611 = _1448;
        _1612 = _1447;
        _1613 = _1446;
        _1614 = _1458;
        _1615 = _1457;
        _1616 = _1456;
        _1617 = _1471;
        _1618 = _1470;
        _1619 = _1469;
        _1620 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1621 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1622 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1608;
        _1609 = _1608;
        _1610 = _1608;
        _1611 = _1608;
        _1612 = _1608;
        _1613 = _1608;
        _1614 = _1608;
        _1615 = _1608;
        _1616 = _1608;
        _1617 = _1608;
        _1618 = _1608;
        _1619 = _1608;
        _1620 = 0.0;
        _1621 = 0.0;
        _1622 = 0.0;
    }
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1645 = fma(_1306, cbModelParam._m0[30u].z, fma(_1302, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1298));
        float _1649 = fma(_1306, cbModelParam._m0[31u].z, fma(_1302, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1298));
        float _1653 = fma(_1306, cbModelParam._m0[32u].z, fma(_1302, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1298));
        float _1676 = _1298 + _1088;
        float _1677 = _1302 + _1089;
        float _1678 = _1306 + _1090;
        float _1688 = fma(_1678, cbModelParam._m0[30u].z, fma(_1677, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1676)) - _1645;
        float _1689 = fma(_1678, cbModelParam._m0[31u].z, fma(_1677, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1676)) - _1649;
        float _1690 = fma(_1678, cbModelParam._m0[32u].z, fma(_1677, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1676)) - _1653;
        float _1694 = inversesqrt(dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690)));
        float _1707 = ((_1694 * _1688) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1645 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1708 = ((_1694 * _1689) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1649 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1709 = ((_1694 * _1690) / cbModelParam._m0[35u].z) + ((((((_1653 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1711 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        vec4 _1718 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        vec4 _1725 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        vec4 _1732 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1707, _1708, _1709), 0.0);
        float _1744 = exp2((_1711.w + (-0.5)) * 20.0) * 2.0;
        float _1745 = _1744 * (_1711.x + (-0.5));
        float _1746 = _1744 * (_1711.y + (-0.5));
        float _1747 = _1744 * (_1711.z + (-0.5));
        float _1754 = exp2((_1718.w + (-0.5)) * 20.0) * 2.0;
        float _1755 = _1754 * (_1718.x + (-0.5));
        float _1756 = _1754 * (_1718.y + (-0.5));
        float _1757 = _1754 * (_1718.z + (-0.5));
        float _1764 = exp2((_1725.w + (-0.5)) * 20.0) * 2.0;
        float _1765 = _1764 * (_1725.x + (-0.5));
        float _1766 = _1764 * (_1725.y + (-0.5));
        float _1767 = _1764 * (_1725.z + (-0.5));
        float _1774 = exp2((_1732.w + (-0.5)) * 20.0) * 2.0;
        float _1775 = _1774 * (_1732.x + (-0.5));
        float _1776 = _1774 * (_1732.y + (-0.5));
        float _1777 = _1774 * (_1732.z + (-0.5));
        float _1778 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1781 = _1745 * 0.5;
        float _1782 = _1755 * 0.5;
        float _1783 = _1765 * 0.5;
        float _1784 = dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783));
        float _1789 = (_1784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1784);
        float _1797 = (dot(vec3(_1088, _1089, _1090), vec3(_1789 * _1781, _1789 * _1782, _1789 * _1783)) + 1.0) * 0.5;
        float _4567 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1806 = sqrt(((_1782 * _1782) + (_1781 * _1781)) + (_1783 * _1783)) / (_1778 + 9.9999997473787516355514526367188e-06);
        float _4578 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _1808 = _1807 * 2.0;
        float _1812 = (1.0 - _1807) / (_1807 + 1.0);
        float _4589 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1822 = ((((1.0 - _1813) * (_1808 + 2.0)) * exp2(log2(isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_1808 + 1.0))) + _1813) * _1778;
        float _1823 = _1746 * 0.5;
        float _1824 = _1756 * 0.5;
        float _1825 = _1766 * 0.5;
        float _1826 = dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825));
        float _1831 = (_1826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1826);
        float _1839 = (dot(vec3(_1088, _1089, _1090), vec3(_1831 * _1823, _1831 * _1824, _1831 * _1825)) + 1.0) * 0.5;
        float _4600 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1848 = sqrt(((_1824 * _1824) + (_1823 * _1823)) + (_1825 * _1825)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _4611 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _1850 = _1849 * 2.0;
        float _1854 = (1.0 - _1849) / (_1849 + 1.0);
        float _4622 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1864 = ((((1.0 - _1855) * (_1850 + 2.0)) * exp2(log2(isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_1850 + 1.0))) + _1855) * _1779;
        float _1865 = _1747 * 0.5;
        float _1866 = _1757 * 0.5;
        float _1867 = _1767 * 0.5;
        float _1868 = dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867));
        float _1873 = (_1868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1868);
        float _1881 = (dot(vec3(_1088, _1089, _1090), vec3(_1873 * _1865, _1873 * _1866, _1873 * _1867)) + 1.0) * 0.5;
        float _4633 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1890 = sqrt(((_1866 * _1866) + (_1865 * _1865)) + (_1867 * _1867)) / (_1780 + 9.9999997473787516355514526367188e-06);
        float _4644 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _1892 = _1891 * 2.0;
        float _1896 = (1.0 - _1891) / (_1891 + 1.0);
        float _4655 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _1906 = ((((1.0 - _1897) * (_1892 + 2.0)) * exp2(log2(isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_1892 + 1.0))) + _1897) * _1780;
        _1914 = _1747;
        _1915 = _1746;
        _1916 = _1745;
        _1917 = _1757;
        _1918 = _1756;
        _1919 = _1755;
        _1920 = _1767;
        _1921 = _1766;
        _1922 = _1765;
        _1923 = _1780;
        _1924 = _1779;
        _1925 = _1778;
        _1926 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)));
        _1927 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)));
        _1928 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)));
    }
    else
    {
        _1914 = _1608;
        _1915 = _1608;
        _1916 = _1608;
        _1917 = _1608;
        _1918 = _1608;
        _1919 = _1608;
        _1920 = _1608;
        _1921 = _1608;
        _1922 = _1608;
        _1923 = _1608;
        _1924 = _1608;
        _1925 = _1608;
        _1926 = 0.0;
        _1927 = 0.0;
        _1928 = 0.0;
    }
    float _1938 = (cbModelParam._m0[1u].x * (_1926 - _1620)) + _1620;
    float _1939 = (cbModelParam._m0[1u].x * (_1927 - _1621)) + _1621;
    float _1940 = (cbModelParam._m0[1u].x * (_1928 - _1622)) + _1622;
    float _1961 = fma(_1940, cbSceneParam._m0[89u].z, fma(_1939, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1964 = fma(_1940, cbSceneParam._m0[90u].z, fma(_1939, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1967 = fma(_1940, cbSceneParam._m0[91u].z, fma(_1939, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1938));
    float _1982 = _1245 * 0.5;
    float _1983 = _1246 * 0.5;
    float _1984 = _1247 * 0.5;
    float _1985 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1916, _1919, _1922, _1925));
    float _1988 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1915, _1918, _1921, _1924));
    float _1991 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1914, _1917, _1920, _1923));
    float _2025;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1998 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1607, _1611, _1614, _1617));
        float _2002 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1609, _1612, _1615, _1618));
        float _2006 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1610, _1613, _1616, _1619));
        float _2013 = dot(vec4(cbModelParam._m0[39u]), vec4(_1982, _1983, _1984, 1.0));
        _2025 = dot(vec3(isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)), isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2013) ? 0.0 : (isnan(0.0) ? _2013 : max(0.0, _2013))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2025 = 1.0;
    }
    float _2036;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2027 = dot(vec4(cbModelParam._m0[40u]), vec4(_1982, _1983, _1984, 1.0));
        _2036 = dot(vec3(isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0)), isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2027) ? 0.0 : (isnan(0.0) ? _2027 : max(0.0, _2027))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2036 = 1.0;
    }
    float _2040 = (_2036 * cbModelParam._m0[1u].x) + (_2025 * (1.0 - cbModelParam._m0[1u].x));
    float _2050 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1091);
    float _2051 = isnan(_2050) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2050 : min(cbModelParam._m0[25u].z, _2050));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2098 = fma(_1306, cbModelParam._m0[13u].z, fma(_1302, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1298)) + cbModelParam._m0[13u].w;
        float _2102 = fma(_1306, cbModelParam._m0[14u].z, fma(_1302, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1298)) + cbModelParam._m0[14u].w;
        float _2106 = fma(_1306, cbModelParam._m0[15u].z, fma(_1302, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1298)) + cbModelParam._m0[15u].w;
        float _2109 = fma(_1247, cbModelParam._m0[13u].z, fma(_1246, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1245));
        float _2112 = fma(_1247, cbModelParam._m0[14u].z, fma(_1246, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1245));
        float _2115 = fma(_1247, cbModelParam._m0[15u].z, fma(_1246, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1245));
        float _2143;
        if (_2109 > 0.0)
        {
            _2143 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2143 = frontier_phi_14_12_ladder;
        }
        float _2312;
        if (_2112 > 0.0)
        {
            _2312 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2312 = frontier_phi_23_19_ladder;
        }
        float _2607;
        if (_2115 > 0.0)
        {
            _2607 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2607 = frontier_phi_35_30_ladder;
        }
        float _2609 = isnan(_2312) ? _2143 : (isnan(_2143) ? _2312 : min(_2143, _2312));
        float _2610 = isnan(_2607) ? _2609 : (isnan(_2609) ? _2607 : min(_2609, _2607));
        float _2614 = (_2610 * _2109) + _2098;
        float _2615 = (_2610 * _2112) + _2102;
        float _2616 = (_2610 * _2115) + _2106;
        float _2617 = _2610 * 9.9999997473787516355514526367188e-05;
        float _2619 = (-1.0) - _2617;
        float _2621 = _2617 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2616 > _2621) || ((_2616 < _2619) || ((_2615 > _2621) || ((_2615 < _2619) || ((_2614 < _2619) || (_2614 > _2621))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2761 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2616, cbModelParam._m0[9u].z, fma(_2615, cbModelParam._m0[9u].y, _2614 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2616, cbModelParam._m0[10u].z, fma(_2615, cbModelParam._m0[10u].y, _2614 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2616, cbModelParam._m0[11u].z, fma(_2615, cbModelParam._m0[11u].y, _2614 * cbModelParam._m0[11u].x))), _2051);
            frontier_phi_13_35_ladder = _2761.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2761.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2761.x * cbModelParam._m0[1u].y;
        }
        _2131 = frontier_phi_13_35_ladder_2;
        _2133 = frontier_phi_13_35_ladder_1;
        _2135 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1245, _1246, _1247), _2051);
        _2131 = _2119.x * cbModelParam._m0[1u].y;
        _2133 = _2119.y * cbModelParam._m0[1u].y;
        _2135 = _2119.z * cbModelParam._m0[1u].y;
    }
    float _2139 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1091);
    float _2140 = isnan(_2139) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2139 : min(cbModelParam._m0[25u].w, _2139));
    float _2229;
    float _2231;
    float _2233;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2193 = fma(_1306, cbModelParam._m0[21u].z, fma(_1302, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1298)) + cbModelParam._m0[21u].w;
        float _2197 = fma(_1306, cbModelParam._m0[22u].z, fma(_1302, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1298)) + cbModelParam._m0[22u].w;
        float _2201 = fma(_1306, cbModelParam._m0[23u].z, fma(_1302, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1298)) + cbModelParam._m0[23u].w;
        float _2204 = fma(_1247, cbModelParam._m0[21u].z, fma(_1246, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1245));
        float _2207 = fma(_1247, cbModelParam._m0[22u].z, fma(_1246, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1245));
        float _2210 = fma(_1247, cbModelParam._m0[23u].z, fma(_1246, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1245));
        float _2317;
        if (_2204 > 0.0)
        {
            _2317 = abs((1.0 - _2193) / _2204);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2193 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2317 = frontier_phi_25_21_ladder;
        }
        float _2634;
        if (_2207 > 0.0)
        {
            _2634 = abs((1.0 - _2197) / _2207);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2197 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2634 = frontier_phi_37_32_ladder;
        }
        float _2961;
        if (_2210 > 0.0)
        {
            _2961 = abs((1.0 - _2201) / _2210);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2201 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2961 = frontier_phi_47_44_ladder;
        }
        float _2963 = isnan(_2634) ? _2317 : (isnan(_2317) ? _2634 : min(_2317, _2634));
        float _2964 = isnan(_2961) ? _2963 : (isnan(_2963) ? _2961 : min(_2963, _2961));
        float _2968 = (_2964 * _2204) + _2193;
        float _2969 = (_2964 * _2207) + _2197;
        float _2970 = (_2964 * _2210) + _2201;
        float _2971 = _2964 * 9.9999997473787516355514526367188e-05;
        float _2972 = (-1.0) - _2971;
        float _2974 = _2971 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2970 > _2974) || ((_2970 < _2972) || ((_2969 > _2974) || ((_2969 < _2972) || ((_2968 < _2972) || (_2968 > _2974))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3088 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2970, cbModelParam._m0[17u].z, fma(_2969, cbModelParam._m0[17u].y, _2968 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2970, cbModelParam._m0[18u].z, fma(_2969, cbModelParam._m0[18u].y, _2968 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2970, cbModelParam._m0[19u].z, fma(_2969, cbModelParam._m0[19u].y, _2968 * cbModelParam._m0[19u].x))), _2140);
            frontier_phi_22_47_ladder = _3088.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3088.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3088.x * cbModelParam._m0[1u].z;
        }
        _2229 = frontier_phi_22_47_ladder_2;
        _2231 = frontier_phi_22_47_ladder_1;
        _2233 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2213 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1245, _1246, _1247), _2140);
        _2229 = _2213.x * cbModelParam._m0[1u].z;
        _2231 = _2213.y * cbModelParam._m0[1u].z;
        _2233 = _2213.z * cbModelParam._m0[1u].z;
    }
    float _2245 = ((((1.0 - _1266) * ((_1253 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1266 * _1253)) * _1237;
    float _2246 = _2245 * ((cbModelParam._m0[1u].w * (_2229 - _2131)) + _2131);
    float _2247 = _2245 * ((cbModelParam._m0[1u].w * (_2231 - _2133)) + _2133);
    float _2248 = _2245 * ((cbModelParam._m0[1u].w * (_2233 - _2135)) + _2135);
    float _2251 = fma(_2248, cbSceneParam._m0[89u].z, fma(_2247, cbSceneParam._m0[89u].y, _2246 * cbSceneParam._m0[89u].x));
    float _2254 = fma(_2248, cbSceneParam._m0[90u].z, fma(_2247, cbSceneParam._m0[90u].y, _2246 * cbSceneParam._m0[90u].x));
    float _2257 = fma(_2248, cbSceneParam._m0[91u].z, fma(_2247, cbSceneParam._m0[91u].y, _2246 * cbSceneParam._m0[91u].x));
    float _2291 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2295 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2299 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2303 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2304 = _2291 / _2303;
    float _2305 = _2295 / _2303;
    float _2306 = _2299 / _2303;
    float _2453;
    float _2454;
    float _2455;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2333 = ((uint(_2306 > cbSceneParam._m0[59u].y) + uint(_2306 > cbSceneParam._m0[59u].x)) + uint(_2306 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2334 = _2333 + 43u;
        uint _2342 = _2333 + 44u;
        uint _2350 = _2333 + 45u;
        uint _2358 = _2333 + 46u;
        float _2369 = fma(_2303, cbSceneParam._m0[_2334].w, fma(_2299, cbSceneParam._m0[_2334].z, fma(_2295, cbSceneParam._m0[_2334].y, _2291 * cbSceneParam._m0[_2334].x)));
        float _2373 = fma(_2303, cbSceneParam._m0[_2342].w, fma(_2299, cbSceneParam._m0[_2342].z, fma(_2295, cbSceneParam._m0[_2342].y, _2291 * cbSceneParam._m0[_2342].x)));
        float _2381 = fma(_2303, cbSceneParam._m0[_2358].w, fma(_2299, cbSceneParam._m0[_2358].z, fma(_2295, cbSceneParam._m0[_2358].y, _2291 * cbSceneParam._m0[_2358].x)));
        float _2386 = cbSceneParam._m0[33u].z * _2381;
        float _2388 = cbSceneParam._m0[33u].w * _2381;
        float _2391 = fma(_2303, cbSceneParam._m0[_2350].w, fma(_2299, cbSceneParam._m0[_2350].z, fma(_2295, cbSceneParam._m0[_2350].y, _2291 * cbSceneParam._m0[_2350].x))) / _2381;
        float _2439 = (cbSceneParam._m0[33u].x - sqrt(((_2305 * _2305) + (_2304 * _2304)) + (_2306 * _2306))) * cbSceneParam._m0[33u].y;
        float _4781 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2446 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2386 + _2369) / _2381, (_2388 + _2373) / _2381), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2388 + _2369) / _2381, (_2373 - _2386) / _2381), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2369 - _2386) / _2381, (_2373 - _2388) / _2381), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2369 - _2388) / _2381, (_2386 + _2373) / _2381), _2391), 0.0)).x), vec4(0.25)));
        _2453 = 1.0 - (_2446 * cbSceneParam._m0[34u].x);
        _2454 = 1.0 - (_2446 * cbSceneParam._m0[34u].y);
        _2455 = 1.0 - (_2446 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2453 = 1.0;
        _2454 = 1.0;
        _2455 = 1.0;
    }
    float _2519;
    float _2521;
    float _2523;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2507 = fma(_2303, cbSceneParam._m0[63u].w, fma(_2299, cbSceneParam._m0[63u].z, fma(_2295, cbSceneParam._m0[63u].y, _2291 * cbSceneParam._m0[63u].x)));
        float _2508 = fma(_2303, cbSceneParam._m0[60u].w, fma(_2299, cbSceneParam._m0[60u].z, fma(_2295, cbSceneParam._m0[60u].y, _2291 * cbSceneParam._m0[60u].x))) / _2507;
        float _2509 = fma(_2303, cbSceneParam._m0[61u].w, fma(_2299, cbSceneParam._m0[61u].z, fma(_2295, cbSceneParam._m0[61u].y, _2291 * cbSceneParam._m0[61u].x))) / _2507;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2508 >= cbSceneParam._m0[64u].x) && (_2509 >= cbSceneParam._m0[64u].y)) && (_2508 <= cbSceneParam._m0[64u].z)) && (_2509 <= cbSceneParam._m0[64u].w))
        {
            float _2647 = fma(_2303, cbSceneParam._m0[62u].w, fma(_2299, cbSceneParam._m0[62u].z, fma(_2295, cbSceneParam._m0[62u].y, _2291 * cbSceneParam._m0[62u].x))) / _2507;
            float _2651 = isnan(cbSceneParam._m0[41u].w) ? _2647 : (isnan(_2647) ? cbSceneParam._m0[41u].w : max(_2647, cbSceneParam._m0[41u].w));
            float _2694 = (cbSceneParam._m0[33u].x - sqrt(((_2305 * _2305) + (_2304 * _2304)) + (_2306 * _2306))) * cbSceneParam._m0[33u].y;
            float _4797 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
            float _2701 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2508, cbSceneParam._m0[33u].w + _2509), _2651), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2508, _2509 - cbSceneParam._m0[33u].z), _2651), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2508 - cbSceneParam._m0[33u].z, _2509 - cbSceneParam._m0[33u].w), _2651), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2508 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2509), _2651), 0.0)).x), vec4(0.25)));
            float _2705 = 1.0 - (_2701 * cbSceneParam._m0[34u].x);
            float _2706 = 1.0 - (_2701 * cbSceneParam._m0[34u].y);
            float _2707 = 1.0 - (_2701 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2707) ? _2455 : (isnan(_2455) ? _2707 : min(_2455, _2707));
            frontier_phi_34_33_ladder_1 = isnan(_2706) ? _2454 : (isnan(_2454) ? _2706 : min(_2454, _2706));
            frontier_phi_34_33_ladder_2 = isnan(_2705) ? _2453 : (isnan(_2453) ? _2705 : min(_2453, _2705));
        }
        else
        {
            frontier_phi_34_33_ladder = _2455;
            frontier_phi_34_33_ladder_1 = _2454;
            frontier_phi_34_33_ladder_2 = _2453;
        }
        _2519 = frontier_phi_34_33_ladder_2;
        _2521 = frontier_phi_34_33_ladder_1;
        _2523 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2519 = _2453;
        _2521 = _2454;
        _2523 = _2455;
    }
    uvec4 _2528 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2530 = _2528.x * 14u;
    uint _2531 = _2530 + 13u;
    float _2538 = _1237 + (-1.0);
    float _2543 = (cbLight._m0[_2531].x * _2538) + 1.0;
    float _2544 = (cbLight._m0[_2531].y * _2538) + 1.0;
    float _2545 = (cbLight._m0[_2531].z * _2538) + 1.0;
    float _2546 = (cbLight._m0[_2531].w * _2538) + 1.0;
    uint _2547 = _2530 + 5u;
    float _2553 = isnan(1.0) ? _2544 : (isnan(_2544) ? 1.0 : min(_2544, 1.0));
    uint _2557 = _2530 + 4u;
    float _2566 = isnan(1.0) ? _2543 : (isnan(_2543) ? 1.0 : min(_2543, 1.0));
    uint _2570 = _2530 | 1u;
    float _2581 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_1088, _1089, _1090));
    float _2584 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_1088, _1089, _1090));
    float _4833 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _4844 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2589 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * 0.3183098733425140380859375;
    float _2591 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * 0.3183098733425140380859375;
    float _2598 = ((cbLight._m0[_2547].x * _2553) * _2591) + (((cbLight._m0[_2557].x * _2519) * _2566) * _2589);
    float _2599 = ((_2553 * cbLight._m0[_2547].y) * _2591) + (((cbLight._m0[_2557].y * _2521) * _2566) * _2589);
    float _2600 = ((_2553 * cbLight._m0[_2547].z) * _2591) + (((cbLight._m0[_2557].z * _2523) * _2566) * _2589);
    uvec4 _2604 = floatBitsToUint(cbLight._m0[_2530 + 12u]);
    bool _2606 = _2604.x == 0u;
    float _2708;
    float _2710;
    float _2712;
    if (_2606)
    {
        _2708 = _2598;
        _2710 = _2599;
        _2712 = _2600;
    }
    else
    {
        uint _2716 = _2530 + 6u;
        float _2732 = (dot(vec3(cbLight._m0[_2530 + 2u].xyz), vec3(_1088, _1089, _1090)) * 0.5) + 0.5;
        float _2733 = _2732 * _2732;
        float _4855 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2734 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2735 = isnan(1.0) ? _2545 : (isnan(_2545) ? 1.0 : min(_2545, 1.0));
        _2708 = (((cbLight._m0[_2716].x * 0.3183098733425140380859375) * _2734) * _2735) + _2598;
        _2710 = (((cbLight._m0[_2716].y * 0.3183098733425140380859375) * _2734) * _2735) + _2599;
        _2712 = (((cbLight._m0[_2716].z * 0.3183098733425140380859375) * _2734) * _2735) + _2600;
    }
    bool _2715 = _2604.y == 0u;
    float _2770;
    float _2772;
    float _2774;
    if (_2715)
    {
        _2770 = _2708;
        _2772 = _2710;
        _2774 = _2712;
    }
    else
    {
        uint _2932 = _2530 + 7u;
        float _2948 = (dot(vec3(cbLight._m0[_2530 + 3u].xyz), vec3(_1088, _1089, _1090)) * 0.5) + 0.5;
        float _2949 = _2948 * _2948;
        float _4871 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2950 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2951 = isnan(1.0) ? _2546 : (isnan(_2546) ? 1.0 : min(_2546, 1.0));
        _2770 = (((cbLight._m0[_2932].x * 0.3183098733425140380859375) * _2950) * _2951) + _2708;
        _2772 = (((cbLight._m0[_2932].y * 0.3183098733425140380859375) * _2950) * _2951) + _2710;
        _2774 = (((cbLight._m0[_2932].z * 0.3183098733425140380859375) * _2950) * _2951) + _2712;
    }
    uint _2777 = _2530 + 8u;
    float _2790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _1091) * 0.949999988079071044921875);
    float _2791 = _2790 * _2790;
    float _2792 = cbLight._m0[_2530].x + _1166;
    float _2793 = cbLight._m0[_2530].y + _1167;
    float _2794 = cbLight._m0[_2530].z + _1168;
    float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
    float _2799 = _2798 * _2792;
    float _2800 = _2798 * _2793;
    float _2801 = _2798 * _2794;
    float _2802 = dot(vec3(_1088, _1089, _1090), vec3(cbLight._m0[_2530].xyz));
    float _4887 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2805 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _4898 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _2806 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    float _2807 = dot(vec3(_1088, _1089, _1090), vec3(_2799, _2800, _2801));
    float _4909 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2810 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    float _2811 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2799, _2800, _2801));
    float _4920 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
    float _2815 = _2791 * _2791;
    float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
    float _2830 = (exp2(log2(1.0 - (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2831 = 1.0 - _2791;
    float _2842 = (0.5 / (((_2806 * ((_2805 * _2831) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2806 * _2831) + _2791) * _2805))) * _2805;
    float _4931 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
    float _2844 = (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
    uint _2858 = _2530 + 9u;
    float _2869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2570].w)) * _1091) * 0.949999988079071044921875);
    float _2870 = _2869 * _2869;
    float _2871 = cbLight._m0[_2570].x + _1166;
    float _2872 = cbLight._m0[_2570].y + _1167;
    float _2873 = cbLight._m0[_2570].z + _1168;
    float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
    float _2878 = _2877 * _2871;
    float _2879 = _2877 * _2872;
    float _2880 = _2877 * _2873;
    float _2881 = dot(vec3(_1088, _1089, _1090), vec3(cbLight._m0[_2570].xyz));
    float _4942 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
    float _2884 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
    float _2885 = dot(vec3(_1088, _1089, _1090), vec3(_2878, _2879, _2880));
    float _4953 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
    float _2888 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
    float _2889 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_2878, _2879, _2880));
    float _4964 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
    float _2893 = _2870 * _2870;
    float _2897 = ((_2888 * _2888) * (_2893 + (-1.0))) + 1.0;
    float _2906 = (exp2(log2(1.0 - (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2907 = 1.0 - _2870;
    float _2917 = (0.5 / (((_2806 * ((_2884 * _2907) + _2870)) + 9.9999999392252902907785028219223e-09) + (((_2806 * _2907) + _2870) * _2884))) * _2884;
    float _4975 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
    float _2919 = (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2893 / ((_2897 * _2897) * 3.141590118408203125));
    float _2929 = (((_2906 * cbLight._m0[_2858].x) * _2919) * _2553) + ((((cbLight._m0[_2777].x * _2519) * _2830) * _2844) * _2566);
    float _2930 = (((_2906 * cbLight._m0[_2858].y) * _2919) * _2553) + ((((cbLight._m0[_2777].y * _2521) * _2830) * _2844) * _2566);
    float _2931 = (((_2906 * cbLight._m0[_2858].z) * _2919) * _2553) + ((((cbLight._m0[_2777].z * _2523) * _2830) * _2844) * _2566);
    float _2987;
    float _2989;
    float _2991;
    if (_2606)
    {
        _2987 = _2929;
        _2989 = _2930;
        _2991 = _2931;
    }
    else
    {
        uint _2993 = _2530 + 2u;
        uint _2997 = _2530 + 10u;
        float _3011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2993].w)) * _1091) * 0.949999988079071044921875);
        float _3012 = _3011 * _3011;
        float _3013 = cbLight._m0[_2993].x + _1166;
        float _3014 = cbLight._m0[_2993].y + _1167;
        float _3015 = cbLight._m0[_2993].z + _1168;
        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
        float _3020 = _3019 * _3013;
        float _3021 = _3019 * _3014;
        float _3022 = _3019 * _3015;
        float _3023 = dot(vec3(_1088, _1089, _1090), vec3(cbLight._m0[_2993].xyz));
        float _4986 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3026 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
        float _3027 = dot(vec3(_1088, _1089, _1090), vec3(_3020, _3021, _3022));
        float _4997 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        float _3030 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
        float _3031 = dot(vec3(cbLight._m0[_2993].xyz), vec3(_3020, _3021, _3022));
        float _5008 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        float _3035 = _3012 * _3012;
        float _3039 = ((_3030 * _3030) * (_3035 + (-1.0))) + 1.0;
        float _3048 = (exp2(log2(1.0 - (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3049 = 1.0 - _3012;
        float _3059 = (0.5 / (((_2806 * ((_3026 * _3049) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_2806 * _3049) + _3012) * _3026))) * _3026;
        float _5019 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        float _3061 = (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_3035 / ((_3039 * _3039) * 3.141590118408203125));
        float _3062 = isnan(1.0) ? _2545 : (isnan(_2545) ? 1.0 : min(_2545, 1.0));
        _2987 = (((_3048 * cbLight._m0[_2997].x) * _3061) * _3062) + _2929;
        _2989 = (((_3048 * cbLight._m0[_2997].y) * _3061) * _3062) + _2930;
        _2991 = (((_3048 * cbLight._m0[_2997].z) * _3061) * _3062) + _2931;
    }
    float _3093;
    float _3095;
    float _3097;
    if (_2715)
    {
        _3093 = _2987;
        _3095 = _2989;
        _3097 = _2991;
    }
    else
    {
        uint _3104 = _2530 + 3u;
        uint _3108 = _2530 + 11u;
        float _3122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3104].w)) * _1091) * 0.949999988079071044921875);
        float _3123 = _3122 * _3122;
        float _3124 = cbLight._m0[_3104].x + _1166;
        float _3125 = cbLight._m0[_3104].y + _1167;
        float _3126 = cbLight._m0[_3104].z + _1168;
        float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
        float _3131 = _3130 * _3124;
        float _3132 = _3130 * _3125;
        float _3133 = _3130 * _3126;
        float _3134 = dot(vec3(_1088, _1089, _1090), vec3(cbLight._m0[_3104].xyz));
        float _5035 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
        float _3137 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
        float _3138 = dot(vec3(_1088, _1089, _1090), vec3(_3131, _3132, _3133));
        float _5046 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
        float _3141 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
        float _3142 = dot(vec3(cbLight._m0[_3104].xyz), vec3(_3131, _3132, _3133));
        float _5057 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
        float _3146 = _3123 * _3123;
        float _3150 = ((_3141 * _3141) * (_3146 + (-1.0))) + 1.0;
        float _3159 = (exp2(log2(1.0 - (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3160 = 1.0 - _3123;
        float _3170 = (0.5 / (((_2806 * ((_3137 * _3160) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_2806 * _3160) + _3123) * _3137))) * _3137;
        float _5068 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
        float _3172 = (isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3146 / ((_3150 * _3150) * 3.141590118408203125));
        float _3173 = isnan(1.0) ? _2546 : (isnan(_2546) ? 1.0 : min(_2546, 1.0));
        _3093 = (((_3159 * cbLight._m0[_3108].x) * _3172) * _3173) + _2987;
        _3095 = (((_3159 * cbLight._m0[_3108].y) * _3172) * _3173) + _2989;
        _3097 = (((_3159 * cbLight._m0[_3108].z) * _3172) * _3173) + _2991;
    }
    float _3239;
    float _3241;
    float _3243;
    float _3245;
    float _3247;
    float _3249;
    if (_2528.y == 0u)
    {
        uvec4 _3194 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3195 = _3194.x;
        uint _3206 = uint((float(_3194.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1175) / _3195))) + floor(float(uint(cbSceneParam._m0[85u].x * _1174) / _3195)));
        float _3216 = (log2(_2306 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3217 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
        uint _3220 = uint(isnan(14.0) ? _3217 : (isnan(_3217) ? 14.0 : min(_3217, 14.0)));
        uvec4 _3225 = texelFetch(g_lightClusterGridBuffer, int(((_3220 << 2u) + (_3206 << 6u)) >> 2u));
        uint _3226 = _3225.x;
        uint _3227 = _3194.z;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        if (((((1u << ((_3227 >> 4u) & 15u)) + 4294967295u) & _3226) == 0u) || ((_3227 & 240u) == 0u))
        {
            _3306 = 0.0;
            _3308 = 0.0;
            _3310 = 0.0;
            _3312 = 0.0;
            _3314 = 0.0;
            _3316 = 0.0;
        }
        else
        {
            float _3307;
            float _3309;
            float _3311;
            float _3313;
            float _3315;
            float _3317;
            float _3451 = 0.0;
            float _3452 = 0.0;
            float _3453 = 0.0;
            float _3454 = 0.0;
            float _3455 = 0.0;
            float _3456 = 0.0;
            uint _3457 = 0u;
            uint _3466;
            bool _3467;
            for (;;)
            {
                _3466 = texelFetch(g_lightClassification, int((((_3220 << 5u) + (_3206 << 9u)) + (_3457 << 2u)) >> 2u)).x;
                _3467 = _3466 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3467)
                {
                    frontier_phi_66_pred = _3456;
                    frontier_phi_66_pred_1 = _3455;
                    frontier_phi_66_pred_2 = _3454;
                    frontier_phi_66_pred_3 = _3453;
                    frontier_phi_66_pred_4 = _3452;
                    frontier_phi_66_pred_5 = _3451;
                }
                else
                {
                    float _3575;
                    float _3576;
                    float _3577;
                    float _3578;
                    float _3579;
                    float _3580;
                    uint _3581;
                    _3575 = _3451;
                    _3576 = _3452;
                    _3577 = _3453;
                    _3578 = _3454;
                    _3579 = _3455;
                    _3580 = _3456;
                    _3581 = _3466;
                    float _3507;
                    float _3508;
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    for (;;)
                    {
                        uint _3585 = uint(findLSB(_3581)) + (_3457 << 5u);
                        uint _3582 = (_3581 + 4294967295u) & _3581;
                        uint _3587 = _3585 * 48u;
                        vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3587)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 3u)).x));
                        uint _3607 = (_3585 * 48u) + 4u;
                        vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3607)).x, texelFetch(g_PointLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3607 + 3u)).x));
                        uint _3626 = (_3585 * 48u) + 8u;
                        vec3 _3637 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3626)).x, texelFetch(g_PointLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3626 + 2u)).x));
                        float _3641 = _3601.x - _2304;
                        float _3642 = _3601.y - _2305;
                        float _3643 = _3601.z - _2306;
                        float _3644 = dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643));
                        float _3647 = inversesqrt(_3644);
                        float _3648 = _3647 * _3641;
                        float _3649 = _3647 * _3642;
                        float _3650 = _3647 * _3643;
                        float _3651 = dot(vec3(_1193, _1196, _1199), vec3(_3648, _3649, _3650));
                        float _3656 = 1.0 - (_3644 * _3601.w);
                        float _5094 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3657 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                        float _3658 = sqrt(_3644) * _3620.w;
                        float _3661 = 1.39999997615814208984375 / (_3658 + 1.39999997615814208984375);
                        float _3662 = _3661 * _3661;
                        float _3665 = ((1.0 - _3662) * _3651) + _3662;
                        float _3668 = _3658 * _3658;
                        float _3672 = ((isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0))) * _3657) / ((_3668 * 0.699999988079071044921875) + 1.0);
                        float _3676 = (-0.0) - _2304;
                        float _3677 = (-0.0) - _2305;
                        float _3678 = (-0.0) - _2306;
                        float _3682 = inversesqrt(dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678)));
                        float _3683 = _3682 * _3676;
                        float _3684 = _3682 * _3677;
                        float _3685 = _3682 * _3678;
                        float _3692 = exp2(log2(1.0 / ((_3668 * 3.5) + 5.0)) * 0.25);
                        float _3693 = 1.0 - _1253;
                        float _3700 = sqrt(1.0 - ((1.0 - (_3693 * _3693)) * (1.0 - (_3692 * _3692))));
                        float _3701 = _3700 * _3700;
                        float _3702 = _3701 * _3701;
                        float _3703 = _3683 + _3648;
                        float _3704 = _3684 + _3649;
                        float _3705 = _3685 + _3650;
                        float _3709 = inversesqrt(dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705)));
                        float _3713 = dot(vec3(_1193, _1196, _1199), vec3(_3683, _3684, _3685));
                        float _5110 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                        float _3716 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                        float _3717 = dot(vec3(_1193, _1196, _1199), vec3(_3709 * _3703, _3709 * _3704, _3709 * _3705));
                        float _5121 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                        float _3720 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                        float _3724 = ((_3720 * _3720) * (_3702 + (-1.0))) + 1.0;
                        float _3725 = _3661 * _3701;
                        float _3726 = _3725 * _3725;
                        float _3729 = ((1.0 - _3726) * _3651) + _3726;
                        float _5132 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                        float _3730 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                        float _3731 = 1.0 - _3701;
                        float _3741 = (0.5 / (((_3730 * ((_3716 * _3731) + _3701)) + 9.9999999392252902907785028219223e-09) + (((_3730 * _3731) + _3701) * _3716))) * _3730;
                        float _5143 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                        float _3752 = (((_3702 * 3.1415927410125732421875) * (isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0)))) / ((_3724 * _3724) * ((_3668 * 2.1991131305694580078125) + 3.141590118408203125))) * _3657;
                        _3510 = (_3672 * _3620.x) + _3578;
                        _3511 = (_3672 * _3620.y) + _3579;
                        _3512 = (_3672 * _3620.z) + _3580;
                        _3507 = (_3752 * _3637.x) + _3575;
                        _3508 = (_3752 * _3637.y) + _3576;
                        _3509 = (_3752 * _3637.z) + _3577;
                        if (_3582 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3575 = _3507;
                            _3576 = _3508;
                            _3577 = _3509;
                            _3578 = _3510;
                            _3579 = _3511;
                            _3580 = _3512;
                            _3581 = _3582;
                        }
                    }
                    frontier_phi_66_pred = _3512;
                    frontier_phi_66_pred_1 = _3511;
                    frontier_phi_66_pred_2 = _3510;
                    frontier_phi_66_pred_3 = _3509;
                    frontier_phi_66_pred_4 = _3508;
                    frontier_phi_66_pred_5 = _3507;
                }
                _3317 = frontier_phi_66_pred;
                _3315 = frontier_phi_66_pred_1;
                _3313 = frontier_phi_66_pred_2;
                _3311 = frontier_phi_66_pred_3;
                _3309 = frontier_phi_66_pred_4;
                _3307 = frontier_phi_66_pred_5;
                uint _3458 = _3457 + 1u;
                if (_3458 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3451 = _3307;
                    _3452 = _3309;
                    _3453 = _3311;
                    _3454 = _3313;
                    _3455 = _3315;
                    _3456 = _3317;
                    _3457 = _3458;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3306 = _3307;
            _3308 = _3309;
            _3310 = _3311;
            _3312 = _3313;
            _3314 = _3315;
            _3316 = _3317;
        }
        uvec4 _3320 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3321 = _3320.z;
        uint _3323 = (_3321 >> 8u) & 15u;
        float _3419;
        float _3421;
        float _3423;
        float _3425;
        float _3427;
        float _3429;
        if (((4294967295u << _3323) & _3226) == 0u)
        {
            _3419 = _3306;
            _3421 = _3308;
            _3423 = _3310;
            _3425 = _3312;
            _3427 = _3314;
            _3429 = _3316;
        }
        else
        {
            float _3444 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
            float _3445 = _3444 * _2304;
            float _3446 = _3444 * _2305;
            float _3447 = _3444 * _2306;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3323 < ((_3321 >> 12u) & 15u))
            {
                float _3420;
                float _3422;
                float _3424;
                float _3426;
                float _3428;
                float _3430;
                float _3558 = _3306;
                float _3559 = _3308;
                float _3560 = _3310;
                float _3561 = _3312;
                float _3562 = _3314;
                float _3563 = _3316;
                uint _3564 = _3323;
                uint _3573;
                bool _3574;
                for (;;)
                {
                    _3573 = texelFetch(g_lightClassification, int((((_3220 << 5u) + (_3206 << 9u)) + (_3564 << 2u)) >> 2u)).x;
                    _3574 = _3573 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3574)
                    {
                        frontier_phi_72_pred = _3563;
                        frontier_phi_72_pred_1 = _3562;
                        frontier_phi_72_pred_2 = _3561;
                        frontier_phi_72_pred_3 = _3560;
                        frontier_phi_72_pred_4 = _3559;
                        frontier_phi_72_pred_5 = _3558;
                    }
                    else
                    {
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _4050;
                        float _4051;
                        float _4052;
                        float _4053;
                        float _4054;
                        float _4055;
                        float _3770 = _3558;
                        float _3771 = _3559;
                        float _3772 = _3560;
                        float _3773 = _3561;
                        float _3774 = _3562;
                        float _3775 = _3563;
                        uint _3776 = _3573;
                        uint _3777;
                        vec4 _3802;
                        float _3803;
                        vec4 _3818;
                        vec3 _3830;
                        vec4 _3845;
                        vec4 _3860;
                        float _3906;
                        bool _3907;
                        for (;;)
                        {
                            uint _3787 = ((_3564 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3776));
                            _3777 = (_3776 + 4294967295u) & _3776;
                            uint _3789 = _3787 * 40u;
                            _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            _3803 = _3802.w;
                            uint _3805 = (_3787 * 40u) + 4u;
                            _3818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 3u)).x));
                            uint _3820 = (_3787 * 40u) + 8u;
                            _3830 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 2u)).x));
                            uint _3832 = (_3787 * 40u) + 16u;
                            _3845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 3u)).x));
                            uint _3847 = (_3787 * 40u) + 20u;
                            _3860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 3u)).x));
                            uint _3862 = (_3787 * 40u) + 24u;
                            vec4 _3875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 3u)).x));
                            uint _3881 = (_3787 * 40u) + 28u;
                            vec4 _3894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 3u)).x));
                            _3906 = fma(_2306, _3894.z, fma(_2305, _3894.y, _3894.x * _2304)) + _3894.w;
                            _3907 = !((fma(_2306, _3875.z, fma(_2305, _3875.y, _3875.x * _2304)) + _3875.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3907)
                            {
                                float _3934 = _3802.x - _2304;
                                float _3935 = _3802.y - _2305;
                                float _3936 = _3802.z - _2306;
                                float _3937 = dot(vec3(_3934, _3935, _3936), vec3(_3934, _3935, _3936));
                                float _3940 = inversesqrt(_3937);
                                float _3941 = _3940 * _3934;
                                float _3942 = _3940 * _3935;
                                float _3943 = _3940 * _3936;
                                float _3947 = 1.0 - (_3937 / (_3803 * _3803));
                                float _5154 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3948 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                                float _3952 = sqrt(_3937) * _3818.w;
                                float _3954 = 1.39999997615814208984375 / (_3952 + 1.39999997615814208984375);
                                float _3955 = _3954 * _3954;
                                float _3958 = ((1.0 - _3955) * dot(vec3(_3941, _3942, _3943), vec3(_1193, _1196, _1199))) + _3955;
                                float _3961 = _3952 * _3952;
                                float _3965 = (fma(_2306, _3845.z, fma(_2305, _3845.y, _3845.x * _2304)) + _3845.w) / _3906;
                                float _3966 = (fma(_2306, _3860.z, fma(_2305, _3860.y, _3860.x * _2304)) + _3860.w) / _3906;
                                float _3970 = 1.0 - dot(vec2(_3965, _3966), vec2(_3965, _3966));
                                float _5170 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3971 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                                float _3972 = _3971 * (((isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0))) * _3948) / ((_3961 * 0.699999988079071044921875) + 1.0));
                                float _3984 = exp2(log2(1.0 / ((_3961 * 3.5) + 5.0)) * 0.25);
                                float _3985 = 1.0 - _1253;
                                float _3992 = sqrt(1.0 - ((1.0 - (_3985 * _3985)) * (1.0 - (_3984 * _3984))));
                                float _3993 = _3992 * _3992;
                                float _3994 = _3993 * _3993;
                                float _3995 = _3941 - _3445;
                                float _3996 = _3942 - _3446;
                                float _3997 = _3943 - _3447;
                                float _4001 = inversesqrt(dot(vec3(_3995, _3996, _3997), vec3(_3995, _3996, _3997)));
                                float _4005 = dot(vec3(_1193, _1196, _1199), vec3((-0.0) - _3445, (-0.0) - _3446, (-0.0) - _3447));
                                float _5181 = isnan(0.0) ? _4005 : (isnan(_4005) ? 0.0 : max(_4005, 0.0));
                                float _4008 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                                float _4009 = dot(vec3(_1193, _1196, _1199), vec3(_4001 * _3995, _4001 * _3996, _4001 * _3997));
                                float _5192 = isnan(0.0) ? _4009 : (isnan(_4009) ? 0.0 : max(_4009, 0.0));
                                float _4012 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
                                float _4016 = ((_4012 * _4012) * (_3994 + (-1.0))) + 1.0;
                                float _4017 = _3954 * _3993;
                                float _4018 = _4017 * _4017;
                                float _4024 = ((1.0 - _4018) * dot(vec3(_1193, _1196, _1199), vec3(_3941, _3942, _3943))) + _4018;
                                float _5203 = isnan(0.0) ? _4024 : (isnan(_4024) ? 0.0 : max(_4024, 0.0));
                                float _4025 = isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0));
                                float _4026 = 1.0 - _3993;
                                float _4036 = (0.5 / (((_4025 * ((_4008 * _4026) + _3993)) + 9.9999999392252902907785028219223e-09) + (((_4025 * _4026) + _3993) * _4008))) * _4025;
                                float _5214 = isnan(0.0) ? _4036 : (isnan(_4036) ? 0.0 : max(_4036, 0.0));
                                float _4046 = (_3971 * _3948) * (((_3994 * 3.1415927410125732421875) * (isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0)))) / ((_4016 * _4016) * ((_3961 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3972 * _3818.y;
                                frontier_phi_78_pred_1 = _3972 * _3818.x;
                                frontier_phi_78_pred_2 = _4046 * _3830.z;
                                frontier_phi_78_pred_3 = _4046 * _3830.y;
                                frontier_phi_78_pred_4 = _4046 * _3830.x;
                                frontier_phi_78_pred_5 = _3972 * _3818.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4054 = frontier_phi_78_pred;
                            _4053 = frontier_phi_78_pred_1;
                            _4052 = frontier_phi_78_pred_2;
                            _4051 = frontier_phi_78_pred_3;
                            _4050 = frontier_phi_78_pred_4;
                            _4055 = frontier_phi_78_pred_5;
                            _3760 = _4053 + _3773;
                            _3761 = _4054 + _3774;
                            _3762 = _4055 + _3775;
                            _3757 = _4050 + _3770;
                            _3758 = _4051 + _3771;
                            _3759 = _4052 + _3772;
                            if (_3777 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3770 = _3757;
                                _3771 = _3758;
                                _3772 = _3759;
                                _3773 = _3760;
                                _3774 = _3761;
                                _3775 = _3762;
                                _3776 = _3777;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3762;
                        frontier_phi_72_pred_1 = _3761;
                        frontier_phi_72_pred_2 = _3760;
                        frontier_phi_72_pred_3 = _3759;
                        frontier_phi_72_pred_4 = _3758;
                        frontier_phi_72_pred_5 = _3757;
                    }
                    _3430 = frontier_phi_72_pred;
                    _3428 = frontier_phi_72_pred_1;
                    _3426 = frontier_phi_72_pred_2;
                    _3424 = frontier_phi_72_pred_3;
                    _3422 = frontier_phi_72_pred_4;
                    _3420 = frontier_phi_72_pred_5;
                    uint _3565 = _3564 + 1u;
                    if (_3565 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3558 = _3420;
                        _3559 = _3422;
                        _3560 = _3424;
                        _3561 = _3426;
                        _3562 = _3428;
                        _3563 = _3430;
                        _3564 = _3565;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3430;
                frontier_phi_60_61_ladder_1 = _3428;
                frontier_phi_60_61_ladder_2 = _3424;
                frontier_phi_60_61_ladder_3 = _3422;
                frontier_phi_60_61_ladder_4 = _3420;
                frontier_phi_60_61_ladder_5 = _3426;
            }
            else
            {
                frontier_phi_60_61_ladder = _3316;
                frontier_phi_60_61_ladder_1 = _3314;
                frontier_phi_60_61_ladder_2 = _3310;
                frontier_phi_60_61_ladder_3 = _3308;
                frontier_phi_60_61_ladder_4 = _3306;
                frontier_phi_60_61_ladder_5 = _3312;
            }
            _3419 = frontier_phi_60_61_ladder_4;
            _3421 = frontier_phi_60_61_ladder_3;
            _3423 = frontier_phi_60_61_ladder_2;
            _3425 = frontier_phi_60_61_ladder_5;
            _3427 = frontier_phi_60_61_ladder_1;
            _3429 = frontier_phi_60_61_ladder;
        }
        float _3434 = isnan(1.0) ? _1237 : (isnan(_1237) ? 1.0 : min(_1237, 1.0));
        _3239 = (_3434 * _3425) + _2770;
        _3241 = (_3434 * _3427) + _2772;
        _3243 = (_3434 * _3429) + _2774;
        _3245 = ((_3419 * 0.039999999105930328369140625) * _3434) + _3093;
        _3247 = ((_3421 * 0.039999999105930328369140625) * _3434) + _3095;
        _3249 = ((_3423 * 0.039999999105930328369140625) * _3434) + _3097;
    }
    else
    {
        _3239 = _2770;
        _3241 = _2772;
        _3243 = _2774;
        _3245 = _3093;
        _3247 = _3095;
        _3249 = _3097;
    }
    float _5230 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _5241 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _5252 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    uint _3269 = _295 + 6u;
    float _3277 = _1174 / cbSceneParam._m0[86u].x;
    float _3278 = _1175 / cbSceneParam._m0[86u].y;
    vec4 _3292 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3277, _3278, (log2((isnan(cbSceneParam._m0[77u].w) ? _1109 : (isnan(_1109) ? cbSceneParam._m0[77u].w : min(_1109, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3294 = _3292.x;
    float _3295 = _3292.y;
    float _3296 = _3292.z;
    float _3297 = _3292.w;
    float _3369;
    float _3371;
    float _3373;
    float _3375;
    if (_1109 > cbSceneParam._m0[78u].w)
    {
        float _3331 = isnan(_1109) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1109 : min(cbSceneParam._m0[80u].w, _1109));
        float _3332 = _3331 / _1109;
        float _3343 = _3332 * _1159;
        float _3344 = _1160 * _3332;
        float _3345 = (-0.0) - _3344;
        float _3347 = _3332 * _1161;
        float _3349 = (cbSceneParam._m0[77u].w * _3345) / _3331;
        float _3350 = _3349 + cbSceneParam._m0[79u].w;
        float _3351 = cbSceneParam._m0[79u].w - _3344;
        float _3357 = sqrt(((_3343 * _3343) + (_3344 * _3344)) + (_3347 * _3347));
        float _3360 = (1.0 - (cbSceneParam._m0[77u].w / _3331)) * _3357;
        float _3365 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3367 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3520;
        if (abs((_3345 - _3349) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3520 = ((((_3350 > 0.0) ? exp2(_3365 * _3350) : (2.0 - exp2(_3367 * _3350))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3360;
        }
        else
        {
            float _3480 = 1.0 / cbSceneParam._m0[80u].x;
            float _3481 = isnan(_3351) ? _3350 : (isnan(_3350) ? _3351 : max(_3350, _3351));
            float _3482 = isnan(_3351) ? _3350 : (isnan(_3350) ? _3351 : min(_3350, _3351));
            float _3491 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : min(_3481, 0.0));
            float _3492 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : min(_3482, 0.0));
            _3520 = ((abs(_3357 / _3345) * cbSceneParam._m0[80u].y) * ((((_3491 - _3492) * 2.0) - ((exp2(_3365 * (isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0)))) - exp2(_3365 * (isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))))) * _3480)) - ((exp2(_3367 * _3491) - exp2(_3367 * _3492)) * _3480))) + (_3360 * cbSceneParam._m0[80u].z);
        }
        vec4 _3522 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3277, _3278, 1.0), 0.0);
        float _3531 = exp2((_3520 * (-1.44269502162933349609375)) * (1.0 - _3522.w));
        float _3532 = log2(_3531);
        float _3548 = log2(_3297);
        _3369 = (exp2(_3548 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3532 * cbSceneParam._m0[78u].x)) * _3522.x) / cbSceneParam._m0[78u].x)) + _3294;
        _3371 = (exp2(_3548 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3532 * cbSceneParam._m0[78u].y)) * _3522.y) / cbSceneParam._m0[78u].y)) + _3295;
        _3373 = (exp2(_3548 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3532 * cbSceneParam._m0[78u].z)) * _3522.z) / cbSceneParam._m0[78u].z)) + _3296;
        _3375 = _3531 * _3297;
    }
    else
    {
        _3369 = _3294;
        _3371 = _3295;
        _3373 = _3296;
        _3375 = _3297;
    }
    float _3387 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3388 = _3387 == 3.0;
    float _3389 = log2(_3375);
    float _3396 = exp2(_3389 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (_3239 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1237))) + ((_3245 + ((isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0))) * _2040)) * cbPerFrame._m0[3u].x));
    float _3397 = exp2(_3389 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0))) * (_3241 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1237))) + ((_3247 + ((isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0))) * _2040)) * cbPerFrame._m0[3u].x));
    float _3398 = exp2(_3389 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0))) * (_3243 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1237))) + ((_3249 + ((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _2040)) * cbPerFrame._m0[3u].x));
    float _3407 = (_3387 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3407 * (_3388 ? _3396 : (_3396 + (cbSceneParam._m0[72u].w * _3369)));
    SV_Target.y = _3407 * (_3388 ? _3397 : (_3397 + (cbSceneParam._m0[72u].w * _3371)));
    SV_Target.z = _3407 * (_3388 ? _3398 : (_3398 + (cbSceneParam._m0[72u].w * _3373)));
    SV_Target.w = cbInstanceData._m0[_3269].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3269].w;
}


