#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1345;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3933 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3944 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3955 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _438 = _436.x;
    float _450 = dot(vec4(_438, _436.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _467 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _401.x) * 2.0) - ((((_438 - _450) * cbMtdParam._m0[24u].z) + _450) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3966 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _475 = (_468 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _476 = (_468 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _477 = (_468 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _516 = _514.x;
    float _526 = dot(vec4(_516, _514.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _540 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _401.y) * 2.0) - ((((_516 - _526) * cbMtdParam._m0[24u].z) + _526) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3977 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _551 = (_330.x * cbMtdParam._m0[9u].x) * ((_541 * ((_494.x * cbMtdParam._m0[13u].x) - _475)) + _475);
    float _552 = (_330.y * cbMtdParam._m0[9u].y) * ((_541 * ((_494.y * cbMtdParam._m0[13u].y) - _476)) + _476);
    float _553 = (_330.z * cbMtdParam._m0[9u].z) * ((_541 * ((_494.z * cbMtdParam._m0[13u].z) - _477)) + _477);
    float _557 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _551;
    float _560 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _552;
    float _563 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _553;
    float _571 = (((_551 - _557) * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) + _557) * 4.55000019073486328125;
    float _573 = (((_552 - _560) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) + _560) * 4.55000019073486328125;
    float _575 = (((_553 - _563) * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) + _563) * 4.55000019073486328125;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _634 = _632.x;
    float _635 = _632.y;
    float _636 = _632.z;
    float _643 = ((_615.x - _634) * _468) + _634;
    float _644 = ((_615.y - _635) * _468) + _635;
    float _645 = ((_615.z - _636) * _468) + _636;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _670 = ((_657.z - _645) * _541) + _645;
    float _673 = ((((_657.x - _643) * _541) + _643) * 2.0) + (-1.0);
    float _674 = ((((_657.y - _644) * _541) + _644) * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3988 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _680 = sqrt(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))));
    vec4 _694 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _719 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _721 = _719.x;
    float _722 = 1.0 - _721;
    float _735 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_721 - _722) * cbMtdParam._m0[24u].w) + _722) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3999 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _736 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _743 = (_736 * (cbMtdParam._m0[17u].x - _571)) + _571;
    float _744 = (_736 * (cbMtdParam._m0[17u].y - _573)) + _573;
    float _745 = (_736 * (cbMtdParam._m0[17u].z - _575)) + _575;
    float _750 = (((_592.z - _670) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _670;
    float _754 = ((_694.z - _750) * cbMtdParam._m0[19u].w) + _750;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _774 = (_767.x * 2.0) + (-1.0);
    float _775 = (_767.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _4010 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _784 = (_736 * (_767.z - _754)) + _754;
    float _793 = (_673 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_592.x * 2.0) + (-1.0)))) + (((_694.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _794 = (_674 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_592.y * 2.0) + (-1.0)))) + (((_694.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _806 = (((_774 - _793) + (cbMtdParam._m0[21u].x * _793)) * _736) + _793;
    float _807 = (((_775 - _794) + (cbMtdParam._m0[21u].x * _794)) * _736) + _794;
    float _808 = (_736 * (sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) - _680)) + _680;
    float _810 = cbMtdParam._m0[22u].x + _694.w;
    float _813 = fma(_808, _240 * NORMAL.x, fma(_807, _247 * TANGENT.x, (_233 * _225) * _806));
    float _816 = fma(_808, _240 * NORMAL.y, fma(_807, _247 * TANGENT.y, (_233 * _226) * _806));
    float _819 = fma(_808, _240 * NORMAL.z, fma(_807, _247 * TANGENT.z, (_233 * _227) * _806));
    float _823 = inversesqrt(dot(vec3(_813, _816, _819), vec3(_813, _816, _819)));
    float _824 = _823 * _813;
    float _825 = _823 * _816;
    float _826 = _823 * _819;
    float _4021 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _827 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4043 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4054 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4065 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _845 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _896 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _886);
    float _897 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _886);
    float _898 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _886);
    float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
    float _903 = _896 * _902;
    float _904 = _897 * _902;
    float _905 = _898 * _902;
    float _911 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _912 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _930 = fma(_826, cbSceneParam._m0[5u].z, fma(_825, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _824));
    float _933 = fma(_826, cbSceneParam._m0[6u].z, fma(_825, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _824));
    float _936 = fma(_826, cbSceneParam._m0[7u].z, fma(_825, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _824));
    uint _950 = (_274 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _956 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_950].x;
    float _957 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_950].y;
    float _958 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * cbInstanceData._m0[_950].z;
    float _4076 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    vec4 _970 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _911, cbSceneParam._m0[86u].y * _912));
    float _974 = ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * TEXCOORD_5.w) * _970.x;
    float _975 = dot(vec3(_824, _825, _826), vec3(_903, _904, _905));
    float _978 = _975 * 2.0;
    float _982 = (_978 * _824) - _903;
    float _983 = (_978 * _825) - _904;
    float _984 = (_978 * _826) - _905;
    float _988 = abs(dot(vec3(_903, _904, _905), vec3(_824, _825, _826)));
    float _4109 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _990 = sqrt(_827);
    float _1003 = exp2((_990 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_990 * 3.0));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1344;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1069 = fma(_1043, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035));
        float _1073 = fma(_1043, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035));
        float _1077 = fma(_1043, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035));
        float _1102 = _1035 + _824;
        float _1103 = _1039 + _825;
        float _1104 = _1043 + _826;
        float _1114 = fma(_1104, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1102)) - _1069;
        float _1115 = fma(_1104, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1102)) - _1073;
        float _1116 = fma(_1104, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1102)) - _1077;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1133 = ((_1120 * _1114) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1069 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1120 * _1115) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1073 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1120 * _1116) / cbModelParam._m0[34u].z) + ((((((_1077 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1172 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1138.x + (-0.5));
        float _1174 = _1172 * (_1138.y + (-0.5));
        float _1175 = _1172 * (_1138.z + (-0.5));
        float _1182 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1145.x + (-0.5));
        float _1184 = _1182 * (_1145.y + (-0.5));
        float _1185 = _1182 * (_1145.z + (-0.5));
        float _1192 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1152.x + (-0.5));
        float _1194 = _1192 * (_1152.y + (-0.5));
        float _1195 = _1192 * (_1152.z + (-0.5));
        float _1202 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1159.x + (-0.5));
        float _1204 = _1202 * (_1159.y + (-0.5));
        float _1205 = _1202 * (_1159.z + (-0.5));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = _1173 * 0.5;
        float _1210 = _1183 * 0.5;
        float _1211 = _1193 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1226 = (dot(vec3(_824, _825, _826), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1236 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _4157 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1238 + 1.0))) + _1243) * _1206;
        float _1253 = _1174 * 0.5;
        float _1254 = _1184 * 0.5;
        float _1255 = _1194 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_824, _825, _826), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4190 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1280 + 1.0))) + _1285) * _1207;
        float _1295 = _1175 * 0.5;
        float _1296 = _1185 * 0.5;
        float _1297 = _1195 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_824, _825, _826), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4223 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1322 + 1.0))) + _1327) * _1208;
        _1344 = _1175;
        _1346 = _1174;
        _1347 = _1173;
        _1348 = _1185;
        _1349 = _1184;
        _1350 = _1183;
        _1351 = _1195;
        _1352 = _1194;
        _1353 = _1193;
        _1354 = _1208;
        _1355 = _1207;
        _1356 = _1206;
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _1345;
        _1346 = _1345;
        _1347 = _1345;
        _1348 = _1345;
        _1349 = _1345;
        _1350 = _1345;
        _1351 = _1345;
        _1352 = _1345;
        _1353 = _1345;
        _1354 = _1345;
        _1355 = _1345;
        _1356 = _1345;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1383 = fma(_1043, cbModelParam._m0[30u].z, fma(_1039, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035));
        float _1387 = fma(_1043, cbModelParam._m0[31u].z, fma(_1039, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035));
        float _1391 = fma(_1043, cbModelParam._m0[32u].z, fma(_1039, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035));
        float _1414 = _1035 + _824;
        float _1415 = _1039 + _825;
        float _1416 = _1043 + _826;
        float _1426 = fma(_1416, cbModelParam._m0[30u].z, fma(_1415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1414)) - _1383;
        float _1427 = fma(_1416, cbModelParam._m0[31u].z, fma(_1415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1414)) - _1387;
        float _1428 = fma(_1416, cbModelParam._m0[32u].z, fma(_1415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1414)) - _1391;
        float _1432 = inversesqrt(dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428)));
        float _1445 = ((_1432 * _1426) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1383 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1432 * _1427) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1387 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1432 * _1428) / cbModelParam._m0[35u].z) + ((((((_1391 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        float _1482 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1449.x + (-0.5));
        float _1484 = _1482 * (_1449.y + (-0.5));
        float _1485 = _1482 * (_1449.z + (-0.5));
        float _1492 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1456.x + (-0.5));
        float _1494 = _1492 * (_1456.y + (-0.5));
        float _1495 = _1492 * (_1456.z + (-0.5));
        float _1502 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1463.x + (-0.5));
        float _1504 = _1502 * (_1463.y + (-0.5));
        float _1505 = _1502 * (_1463.z + (-0.5));
        float _1512 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1470.x + (-0.5));
        float _1514 = _1512 * (_1470.y + (-0.5));
        float _1515 = _1512 * (_1470.z + (-0.5));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = _1483 * 0.5;
        float _1520 = _1493 * 0.5;
        float _1521 = _1503 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_824, _825, _826), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4286 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1546 + 1.0))) + _1551) * _1516;
        float _1561 = _1484 * 0.5;
        float _1562 = _1494 * 0.5;
        float _1563 = _1504 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_824, _825, _826), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4319 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1588 + 1.0))) + _1593) * _1517;
        float _1603 = _1485 * 0.5;
        float _1604 = _1495 * 0.5;
        float _1605 = _1505 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_824, _825, _826), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4352 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1630 + 1.0))) + _1635) * _1518;
        _1652 = _1485;
        _1653 = _1484;
        _1654 = _1483;
        _1655 = _1495;
        _1656 = _1494;
        _1657 = _1493;
        _1658 = _1505;
        _1659 = _1504;
        _1660 = _1503;
        _1661 = _1518;
        _1662 = _1517;
        _1663 = _1516;
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
    }
    else
    {
        _1652 = _1345;
        _1653 = _1345;
        _1654 = _1345;
        _1655 = _1345;
        _1656 = _1345;
        _1657 = _1345;
        _1658 = _1345;
        _1659 = _1345;
        _1660 = _1345;
        _1661 = _1345;
        _1662 = _1345;
        _1663 = _1345;
        _1664 = 0.0;
        _1665 = 0.0;
        _1666 = 0.0;
    }
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1357)) + _1357;
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1358)) + _1358;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1359)) + _1359;
    float _1699 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1676));
    float _1720 = _982 * 0.5;
    float _1721 = _983 * 0.5;
    float _1722 = _984 * 0.5;
    float _1723 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1726 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1729 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1763;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1736 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1344, _1348, _1351, _1354));
        float _1740 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1744 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1347, _1350, _1353, _1356));
        float _1751 = dot(vec4(cbModelParam._m0[39u]), vec4(_1720, _1721, _1722, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1751) ? 0.0 : (isnan(0.0) ? _1751 : max(0.0, _1751))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1774;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1765 = dot(vec4(cbModelParam._m0[40u]), vec4(_1720, _1721, _1722, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1778 = (_1774 * cbModelParam._m0[1u].x) + (_1763 * (1.0 - cbModelParam._m0[1u].x));
    float _1788 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _827);
    float _1789 = isnan(_1788) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1788 : min(cbModelParam._m0[25u].z, _1788));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1837 = fma(_1043, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035)) + cbModelParam._m0[13u].w;
        float _1841 = fma(_1043, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035)) + cbModelParam._m0[14u].w;
        float _1845 = fma(_1043, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035)) + cbModelParam._m0[15u].w;
        float _1848 = fma(_984, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982));
        float _1851 = fma(_984, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982));
        float _1854 = fma(_984, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982));
        float _1882;
        if (_1848 > 0.0)
        {
            _1882 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1882 = frontier_phi_14_12_ladder;
        }
        float _2052;
        if (_1851 > 0.0)
        {
            _2052 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2052 = frontier_phi_23_19_ladder;
        }
        float _2347;
        if (_1854 > 0.0)
        {
            _2347 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2347 = frontier_phi_35_30_ladder;
        }
        float _2349 = isnan(_2052) ? _1882 : (isnan(_1882) ? _2052 : min(_1882, _2052));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1848) + _1837;
        float _2355 = (_2350 * _1851) + _1841;
        float _2356 = (_2350 * _1854) + _1845;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2357;
        float _2361 = _2357 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 > _2361) || ((_2355 < _2359) || ((_2354 < _2359) || (_2354 > _2361))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2356, cbModelParam._m0[9u].z, fma(_2355, cbModelParam._m0[9u].y, _2354 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2356, cbModelParam._m0[10u].z, fma(_2355, cbModelParam._m0[10u].y, _2354 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2356, cbModelParam._m0[11u].z, fma(_2355, cbModelParam._m0[11u].y, _2354 * cbModelParam._m0[11u].x))), _1789);
            frontier_phi_13_35_ladder = _2501.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2501.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2501.x * cbModelParam._m0[1u].y;
        }
        _1870 = frontier_phi_13_35_ladder_2;
        _1872 = frontier_phi_13_35_ladder_1;
        _1874 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_982, _983, _984), _1789);
        _1870 = _1858.x * cbModelParam._m0[1u].y;
        _1872 = _1858.y * cbModelParam._m0[1u].y;
        _1874 = _1858.z * cbModelParam._m0[1u].y;
    }
    float _1878 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _827);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1878 : min(cbModelParam._m0[25u].w, _1878));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1933 = fma(_1043, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035)) + cbModelParam._m0[21u].w;
        float _1937 = fma(_1043, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035)) + cbModelParam._m0[22u].w;
        float _1941 = fma(_1043, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035)) + cbModelParam._m0[23u].w;
        float _1944 = fma(_984, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982));
        float _1947 = fma(_984, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982));
        float _1950 = fma(_984, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982));
        float _2057;
        if (_1944 > 0.0)
        {
            _2057 = abs((1.0 - _1933) / _1944);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1933 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2057 = frontier_phi_25_21_ladder;
        }
        float _2374;
        if (_1947 > 0.0)
        {
            _2374 = abs((1.0 - _1937) / _1947);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1937 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2374 = frontier_phi_37_32_ladder;
        }
        float _2701;
        if (_1950 > 0.0)
        {
            _2701 = abs((1.0 - _1941) / _1950);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1941 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2701 = frontier_phi_47_44_ladder;
        }
        float _2703 = isnan(_2374) ? _2057 : (isnan(_2057) ? _2374 : min(_2057, _2374));
        float _2704 = isnan(_2701) ? _2703 : (isnan(_2703) ? _2701 : min(_2703, _2701));
        float _2708 = (_2704 * _1944) + _1933;
        float _2709 = (_2704 * _1947) + _1937;
        float _2710 = (_2704 * _1950) + _1941;
        float _2711 = _2704 * 9.9999997473787516355514526367188e-05;
        float _2712 = (-1.0) - _2711;
        float _2714 = _2711 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2710 > _2714) || ((_2710 < _2712) || ((_2709 > _2714) || ((_2709 < _2712) || ((_2708 < _2712) || (_2708 > _2714))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2710, cbModelParam._m0[17u].z, fma(_2709, cbModelParam._m0[17u].y, _2708 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2710, cbModelParam._m0[18u].z, fma(_2709, cbModelParam._m0[18u].y, _2708 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2710, cbModelParam._m0[19u].z, fma(_2709, cbModelParam._m0[19u].y, _2708 * cbModelParam._m0[19u].x))), _1879);
            frontier_phi_22_47_ladder = _2828.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2828.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2828.x * cbModelParam._m0[1u].z;
        }
        _1969 = frontier_phi_22_47_ladder_2;
        _1971 = frontier_phi_22_47_ladder_1;
        _1973 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_982, _983, _984), _1879);
        _1969 = _1953.x * cbModelParam._m0[1u].z;
        _1971 = _1953.y * cbModelParam._m0[1u].z;
        _1973 = _1953.z * cbModelParam._m0[1u].z;
    }
    float _1985 = ((((1.0 - _1003) * ((_990 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1003 * _990)) * _974;
    float _1986 = _1985 * ((cbModelParam._m0[1u].w * (_1969 - _1870)) + _1870);
    float _1987 = _1985 * ((cbModelParam._m0[1u].w * (_1971 - _1872)) + _1872);
    float _1988 = _1985 * ((cbModelParam._m0[1u].w * (_1973 - _1874)) + _1874);
    float _1991 = fma(_1988, cbSceneParam._m0[89u].z, fma(_1987, cbSceneParam._m0[89u].y, _1986 * cbSceneParam._m0[89u].x));
    float _1994 = fma(_1988, cbSceneParam._m0[90u].z, fma(_1987, cbSceneParam._m0[90u].y, _1986 * cbSceneParam._m0[90u].x));
    float _1997 = fma(_1988, cbSceneParam._m0[91u].z, fma(_1987, cbSceneParam._m0[91u].y, _1986 * cbSceneParam._m0[91u].x));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2039 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2043 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2044 = _2031 / _2043;
    float _2045 = _2035 / _2043;
    float _2046 = _2039 / _2043;
    float _2193;
    float _2194;
    float _2195;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2073 = ((uint(_2046 > cbSceneParam._m0[59u].y) + uint(_2046 > cbSceneParam._m0[59u].x)) + uint(_2046 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2074 = _2073 + 43u;
        uint _2082 = _2073 + 44u;
        uint _2090 = _2073 + 45u;
        uint _2098 = _2073 + 46u;
        float _2109 = fma(_2043, cbSceneParam._m0[_2074].w, fma(_2039, cbSceneParam._m0[_2074].z, fma(_2035, cbSceneParam._m0[_2074].y, _2031 * cbSceneParam._m0[_2074].x)));
        float _2113 = fma(_2043, cbSceneParam._m0[_2082].w, fma(_2039, cbSceneParam._m0[_2082].z, fma(_2035, cbSceneParam._m0[_2082].y, _2031 * cbSceneParam._m0[_2082].x)));
        float _2121 = fma(_2043, cbSceneParam._m0[_2098].w, fma(_2039, cbSceneParam._m0[_2098].z, fma(_2035, cbSceneParam._m0[_2098].y, _2031 * cbSceneParam._m0[_2098].x)));
        float _2126 = cbSceneParam._m0[33u].z * _2121;
        float _2128 = cbSceneParam._m0[33u].w * _2121;
        float _2131 = fma(_2043, cbSceneParam._m0[_2090].w, fma(_2039, cbSceneParam._m0[_2090].z, fma(_2035, cbSceneParam._m0[_2090].y, _2031 * cbSceneParam._m0[_2090].x))) / _2121;
        float _2179 = (cbSceneParam._m0[33u].x - sqrt(((_2045 * _2045) + (_2044 * _2044)) + (_2046 * _2046))) * cbSceneParam._m0[33u].y;
        float _4478 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2186 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 + _2109) / _2121, (_2128 + _2113) / _2121), _2131), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 + _2109) / _2121, (_2113 - _2126) / _2121), _2131), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 - _2126) / _2121, (_2113 - _2128) / _2121), _2131), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 - _2128) / _2121, (_2126 + _2113) / _2121), _2131), 0.0)).x), vec4(0.25)));
        _2193 = 1.0 - (_2186 * cbSceneParam._m0[34u].x);
        _2194 = 1.0 - (_2186 * cbSceneParam._m0[34u].y);
        _2195 = 1.0 - (_2186 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2193 = 1.0;
        _2194 = 1.0;
        _2195 = 1.0;
    }
    float _2259;
    float _2261;
    float _2263;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2247 = fma(_2043, cbSceneParam._m0[63u].w, fma(_2039, cbSceneParam._m0[63u].z, fma(_2035, cbSceneParam._m0[63u].y, _2031 * cbSceneParam._m0[63u].x)));
        float _2248 = fma(_2043, cbSceneParam._m0[60u].w, fma(_2039, cbSceneParam._m0[60u].z, fma(_2035, cbSceneParam._m0[60u].y, _2031 * cbSceneParam._m0[60u].x))) / _2247;
        float _2249 = fma(_2043, cbSceneParam._m0[61u].w, fma(_2039, cbSceneParam._m0[61u].z, fma(_2035, cbSceneParam._m0[61u].y, _2031 * cbSceneParam._m0[61u].x))) / _2247;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2248 >= cbSceneParam._m0[64u].x) && (_2249 >= cbSceneParam._m0[64u].y)) && (_2248 <= cbSceneParam._m0[64u].z)) && (_2249 <= cbSceneParam._m0[64u].w))
        {
            float _2387 = fma(_2043, cbSceneParam._m0[62u].w, fma(_2039, cbSceneParam._m0[62u].z, fma(_2035, cbSceneParam._m0[62u].y, _2031 * cbSceneParam._m0[62u].x))) / _2247;
            float _2391 = isnan(cbSceneParam._m0[41u].w) ? _2387 : (isnan(_2387) ? cbSceneParam._m0[41u].w : max(_2387, cbSceneParam._m0[41u].w));
            float _2434 = (cbSceneParam._m0[33u].x - sqrt(((_2045 * _2045) + (_2044 * _2044)) + (_2046 * _2046))) * cbSceneParam._m0[33u].y;
            float _4494 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
            float _2441 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2248, cbSceneParam._m0[33u].w + _2249), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2248, _2249 - cbSceneParam._m0[33u].z), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2248 - cbSceneParam._m0[33u].z, _2249 - cbSceneParam._m0[33u].w), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2248 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2249), _2391), 0.0)).x), vec4(0.25)));
            float _2445 = 1.0 - (_2441 * cbSceneParam._m0[34u].x);
            float _2446 = 1.0 - (_2441 * cbSceneParam._m0[34u].y);
            float _2447 = 1.0 - (_2441 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2447) ? _2195 : (isnan(_2195) ? _2447 : min(_2195, _2447));
            frontier_phi_34_33_ladder_1 = isnan(_2446) ? _2194 : (isnan(_2194) ? _2446 : min(_2194, _2446));
            frontier_phi_34_33_ladder_2 = isnan(_2445) ? _2193 : (isnan(_2193) ? _2445 : min(_2193, _2445));
        }
        else
        {
            frontier_phi_34_33_ladder = _2195;
            frontier_phi_34_33_ladder_1 = _2194;
            frontier_phi_34_33_ladder_2 = _2193;
        }
        _2259 = frontier_phi_34_33_ladder_2;
        _2261 = frontier_phi_34_33_ladder_1;
        _2263 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2259 = _2193;
        _2261 = _2194;
        _2263 = _2195;
    }
    uvec4 _2268 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2270 = _2268.x * 14u;
    uint _2271 = _2270 + 13u;
    float _2278 = _974 + (-1.0);
    float _2283 = (cbLight._m0[_2271].x * _2278) + 1.0;
    float _2284 = (cbLight._m0[_2271].y * _2278) + 1.0;
    float _2285 = (cbLight._m0[_2271].z * _2278) + 1.0;
    float _2286 = (cbLight._m0[_2271].w * _2278) + 1.0;
    uint _2287 = _2270 + 5u;
    float _2293 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
    uint _2297 = _2270 + 4u;
    float _2306 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
    uint _2310 = _2270 | 1u;
    float _2321 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_824, _825, _826));
    float _2324 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_824, _825, _826));
    float _4530 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _4541 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2329 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2331 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2338 = ((cbLight._m0[_2287].x * _2293) * _2331) + (((cbLight._m0[_2297].x * _2259) * _2306) * _2329);
    float _2339 = ((_2293 * cbLight._m0[_2287].y) * _2331) + (((cbLight._m0[_2297].y * _2261) * _2306) * _2329);
    float _2340 = ((_2293 * cbLight._m0[_2287].z) * _2331) + (((cbLight._m0[_2297].z * _2263) * _2306) * _2329);
    uvec4 _2344 = floatBitsToUint(cbLight._m0[_2270 + 12u]);
    bool _2346 = _2344.x == 0u;
    float _2448;
    float _2450;
    float _2452;
    if (_2346)
    {
        _2448 = _2338;
        _2450 = _2339;
        _2452 = _2340;
    }
    else
    {
        uint _2456 = _2270 + 6u;
        float _2472 = (dot(vec3(cbLight._m0[_2270 + 2u].xyz), vec3(_824, _825, _826)) * 0.5) + 0.5;
        float _2473 = _2472 * _2472;
        float _4552 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2474 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2475 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2448 = (((cbLight._m0[_2456].x * 0.3183098733425140380859375) * _2474) * _2475) + _2338;
        _2450 = (((cbLight._m0[_2456].y * 0.3183098733425140380859375) * _2474) * _2475) + _2339;
        _2452 = (((cbLight._m0[_2456].z * 0.3183098733425140380859375) * _2474) * _2475) + _2340;
    }
    bool _2455 = _2344.y == 0u;
    float _2510;
    float _2512;
    float _2514;
    if (_2455)
    {
        _2510 = _2448;
        _2512 = _2450;
        _2514 = _2452;
    }
    else
    {
        uint _2672 = _2270 + 7u;
        float _2688 = (dot(vec3(cbLight._m0[_2270 + 3u].xyz), vec3(_824, _825, _826)) * 0.5) + 0.5;
        float _2689 = _2688 * _2688;
        float _4568 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2690 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2691 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2510 = (((cbLight._m0[_2672].x * 0.3183098733425140380859375) * _2690) * _2691) + _2448;
        _2512 = (((cbLight._m0[_2672].y * 0.3183098733425140380859375) * _2690) * _2691) + _2450;
        _2514 = (((cbLight._m0[_2672].z * 0.3183098733425140380859375) * _2690) * _2691) + _2452;
    }
    uint _2517 = _2270 + 8u;
    float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _827) * 0.949999988079071044921875);
    float _2531 = _2530 * _2530;
    float _2532 = cbLight._m0[_2270].x + _903;
    float _2533 = cbLight._m0[_2270].y + _904;
    float _2534 = cbLight._m0[_2270].z + _905;
    float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
    float _2539 = _2538 * _2532;
    float _2540 = _2538 * _2533;
    float _2541 = _2538 * _2534;
    float _2542 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2270].xyz));
    float _4584 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _4595 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2546 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2547 = dot(vec3(_824, _825, _826), vec3(_2539, _2540, _2541));
    float _4606 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2551 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2539, _2540, _2541));
    float _4617 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2555 = _2531 * _2531;
    float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
    float _2570 = (exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2571 = 1.0 - _2531;
    float _2582 = (0.5 / (((_2546 * ((_2545 * _2571) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2571) + _2531) * _2545))) * _2545;
    float _4628 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2584 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
    uint _2598 = _2270 + 9u;
    float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _827) * 0.949999988079071044921875);
    float _2610 = _2609 * _2609;
    float _2611 = cbLight._m0[_2310].x + _903;
    float _2612 = cbLight._m0[_2310].y + _904;
    float _2613 = cbLight._m0[_2310].z + _905;
    float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
    float _2618 = _2617 * _2611;
    float _2619 = _2617 * _2612;
    float _2620 = _2617 * _2613;
    float _2621 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2310].xyz));
    float _4639 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2625 = dot(vec3(_824, _825, _826), vec3(_2618, _2619, _2620));
    float _4650 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2628 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2629 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2618, _2619, _2620));
    float _4661 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2633 = _2610 * _2610;
    float _2637 = ((_2628 * _2628) * (_2633 + (-1.0))) + 1.0;
    float _2646 = (exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2647 = 1.0 - _2610;
    float _2657 = (0.5 / (((_2546 * ((_2624 * _2647) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2647) + _2610) * _2624))) * _2624;
    float _4672 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2659 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2633 / ((_2637 * _2637) * 3.141590118408203125));
    float _2669 = (((_2646 * cbLight._m0[_2598].x) * _2659) * _2293) + ((((cbLight._m0[_2517].x * _2259) * _2570) * _2584) * _2306);
    float _2670 = (((_2646 * cbLight._m0[_2598].y) * _2659) * _2293) + ((((cbLight._m0[_2517].y * _2261) * _2570) * _2584) * _2306);
    float _2671 = (((_2646 * cbLight._m0[_2598].z) * _2659) * _2293) + ((((cbLight._m0[_2517].z * _2263) * _2570) * _2584) * _2306);
    float _2727;
    float _2729;
    float _2731;
    if (_2346)
    {
        _2727 = _2669;
        _2729 = _2670;
        _2731 = _2671;
    }
    else
    {
        uint _2733 = _2270 + 2u;
        uint _2737 = _2270 + 10u;
        float _2751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2733].w)) * _827) * 0.949999988079071044921875);
        float _2752 = _2751 * _2751;
        float _2753 = cbLight._m0[_2733].x + _903;
        float _2754 = cbLight._m0[_2733].y + _904;
        float _2755 = cbLight._m0[_2733].z + _905;
        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
        float _2760 = _2759 * _2753;
        float _2761 = _2759 * _2754;
        float _2762 = _2759 * _2755;
        float _2763 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2733].xyz));
        float _4683 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2767 = dot(vec3(_824, _825, _826), vec3(_2760, _2761, _2762));
        float _4694 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2771 = dot(vec3(cbLight._m0[_2733].xyz), vec3(_2760, _2761, _2762));
        float _4705 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2775 = _2752 * _2752;
        float _2779 = ((_2770 * _2770) * (_2775 + (-1.0))) + 1.0;
        float _2788 = (exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2789 = 1.0 - _2752;
        float _2799 = (0.5 / (((_2546 * ((_2766 * _2789) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2789) + _2752) * _2766))) * _2766;
        float _4716 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2801 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2775 / ((_2779 * _2779) * 3.141590118408203125));
        float _2802 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2727 = (((_2788 * cbLight._m0[_2737].x) * _2801) * _2802) + _2669;
        _2729 = (((_2788 * cbLight._m0[_2737].y) * _2801) * _2802) + _2670;
        _2731 = (((_2788 * cbLight._m0[_2737].z) * _2801) * _2802) + _2671;
    }
    float _2833;
    float _2835;
    float _2837;
    if (_2455)
    {
        _2833 = _2727;
        _2835 = _2729;
        _2837 = _2731;
    }
    else
    {
        uint _2844 = _2270 + 3u;
        uint _2848 = _2270 + 11u;
        float _2862 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2844].w)) * _827) * 0.949999988079071044921875);
        float _2863 = _2862 * _2862;
        float _2864 = cbLight._m0[_2844].x + _903;
        float _2865 = cbLight._m0[_2844].y + _904;
        float _2866 = cbLight._m0[_2844].z + _905;
        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
        float _2871 = _2870 * _2864;
        float _2872 = _2870 * _2865;
        float _2873 = _2870 * _2866;
        float _2874 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2844].xyz));
        float _4732 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2878 = dot(vec3(_824, _825, _826), vec3(_2871, _2872, _2873));
        float _4743 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2881 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2882 = dot(vec3(cbLight._m0[_2844].xyz), vec3(_2871, _2872, _2873));
        float _4754 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2886 = _2863 * _2863;
        float _2890 = ((_2881 * _2881) * (_2886 + (-1.0))) + 1.0;
        float _2899 = (exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2900 = 1.0 - _2863;
        float _2910 = (0.5 / (((_2546 * ((_2877 * _2900) + _2863)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2900) + _2863) * _2877))) * _2877;
        float _4765 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2912 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2886 / ((_2890 * _2890) * 3.141590118408203125));
        float _2913 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2833 = (((_2899 * cbLight._m0[_2848].x) * _2912) * _2913) + _2727;
        _2835 = (((_2899 * cbLight._m0[_2848].y) * _2912) * _2913) + _2729;
        _2837 = (((_2899 * cbLight._m0[_2848].z) * _2912) * _2913) + _2731;
    }
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_2268.y == 0u)
    {
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.x;
        uint _2946 = uint((float(_2934.y) * floor(float(uint(cbSceneParam._m0[85u].y * _912) / _2935))) + floor(float(uint(cbSceneParam._m0[85u].x * _911) / _2935)));
        float _2956 = (log2(_2046 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2957 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        uint _2960 = uint(isnan(14.0) ? _2957 : (isnan(_2957) ? 14.0 : min(_2957, 14.0)));
        uvec4 _2965 = texelFetch(g_lightClusterGridBuffer, int(((_2960 << 2u) + (_2946 << 6u)) >> 2u));
        uint _2966 = _2965.x;
        uint _2967 = _2934.z;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((((1u << ((_2967 >> 4u) & 15u)) + 4294967295u) & _2966) == 0u) || ((_2967 & 240u) == 0u))
        {
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
        }
        else
        {
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            uint _3197 = 0u;
            uint _3206;
            bool _3207;
            for (;;)
            {
                _3206 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                _3207 = _3206 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3207)
                {
                    frontier_phi_66_pred = _3196;
                    frontier_phi_66_pred_1 = _3195;
                    frontier_phi_66_pred_2 = _3194;
                    frontier_phi_66_pred_3 = _3193;
                    frontier_phi_66_pred_4 = _3192;
                    frontier_phi_66_pred_5 = _3191;
                }
                else
                {
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    uint _3321;
                    _3315 = _3191;
                    _3316 = _3192;
                    _3317 = _3193;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3206;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    for (;;)
                    {
                        uint _3325 = uint(findLSB(_3321)) + (_3197 << 5u);
                        uint _3322 = (_3321 + 4294967295u) & _3321;
                        uint _3327 = _3325 * 48u;
                        vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 3u)).x));
                        uint _3347 = (_3325 * 48u) + 4u;
                        vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 3u)).x));
                        uint _3366 = (_3325 * 48u) + 8u;
                        vec3 _3377 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3366)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 2u)).x));
                        float _3381 = _3341.x - _2044;
                        float _3382 = _3341.y - _2045;
                        float _3383 = _3341.z - _2046;
                        float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                        float _3387 = inversesqrt(_3384);
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3391 = dot(vec3(_930, _933, _936), vec3(_3388, _3389, _3390));
                        float _3396 = 1.0 - (_3384 * _3341.w);
                        float _4791 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3397 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3398 = sqrt(_3384) * _3360.w;
                        float _3401 = 1.39999997615814208984375 / (_3398 + 1.39999997615814208984375);
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3391) + _3402;
                        float _3408 = _3398 * _3398;
                        float _3412 = ((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3397) / ((_3408 * 0.699999988079071044921875) + 1.0);
                        float _3416 = (-0.0) - _2044;
                        float _3417 = (-0.0) - _2045;
                        float _3418 = (-0.0) - _2046;
                        float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                        float _3423 = _3422 * _3416;
                        float _3424 = _3422 * _3417;
                        float _3425 = _3422 * _3418;
                        float _3432 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                        float _3433 = 1.0 - _990;
                        float _3440 = sqrt(1.0 - ((1.0 - (_3433 * _3433)) * (1.0 - (_3432 * _3432))));
                        float _3441 = _3440 * _3440;
                        float _3442 = _3441 * _3441;
                        float _3443 = _3423 + _3388;
                        float _3444 = _3424 + _3389;
                        float _3445 = _3425 + _3390;
                        float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                        float _3453 = dot(vec3(_930, _933, _936), vec3(_3423, _3424, _3425));
                        float _4807 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3457 = dot(vec3(_930, _933, _936), vec3(_3449 * _3443, _3449 * _3444, _3449 * _3445));
                        float _4818 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3464 = ((_3460 * _3460) * (_3442 + (-1.0))) + 1.0;
                        float _3465 = _3401 * _3441;
                        float _3466 = _3465 * _3465;
                        float _3469 = ((1.0 - _3466) * _3391) + _3466;
                        float _4829 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3470 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3471 = 1.0 - _3441;
                        float _3481 = (0.5 / (((_3470 * ((_3456 * _3471) + _3441)) + 9.9999999392252902907785028219223e-09) + (((_3470 * _3471) + _3441) * _3456))) * _3470;
                        float _4840 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3492 = (((_3442 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3464 * _3464) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125))) * _3397;
                        _3250 = (_3412 * _3360.x) + _3318;
                        _3251 = (_3412 * _3360.y) + _3319;
                        _3252 = (_3412 * _3360.z) + _3320;
                        _3247 = (_3492 * _3377.x) + _3315;
                        _3248 = (_3492 * _3377.y) + _3316;
                        _3249 = (_3492 * _3377.z) + _3317;
                        if (_3322 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3315 = _3247;
                            _3316 = _3248;
                            _3317 = _3249;
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3322;
                        }
                    }
                    frontier_phi_66_pred = _3252;
                    frontier_phi_66_pred_1 = _3251;
                    frontier_phi_66_pred_2 = _3250;
                    frontier_phi_66_pred_3 = _3249;
                    frontier_phi_66_pred_4 = _3248;
                    frontier_phi_66_pred_5 = _3247;
                }
                _3057 = frontier_phi_66_pred;
                _3055 = frontier_phi_66_pred_1;
                _3053 = frontier_phi_66_pred_2;
                _3051 = frontier_phi_66_pred_3;
                _3049 = frontier_phi_66_pred_4;
                _3047 = frontier_phi_66_pred_5;
                uint _3198 = _3197 + 1u;
                if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3191 = _3047;
                    _3192 = _3049;
                    _3193 = _3051;
                    _3194 = _3053;
                    _3195 = _3055;
                    _3196 = _3057;
                    _3197 = _3198;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
        }
        uvec4 _3060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3061 = _3060.z;
        uint _3063 = (_3061 >> 8u) & 15u;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((4294967295u << _3063) & _2966) == 0u)
        {
            _3159 = _3046;
            _3161 = _3048;
            _3163 = _3050;
            _3165 = _3052;
            _3167 = _3054;
            _3169 = _3056;
        }
        else
        {
            float _3184 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
            float _3185 = _3184 * _2044;
            float _3186 = _3184 * _2045;
            float _3187 = _3184 * _2046;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3063 < ((_3061 >> 12u) & 15u))
            {
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3298 = _3046;
                float _3299 = _3048;
                float _3300 = _3050;
                float _3301 = _3052;
                float _3302 = _3054;
                float _3303 = _3056;
                uint _3304 = _3063;
                uint _3313;
                bool _3314;
                for (;;)
                {
                    _3313 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3304 << 2u)) >> 2u)).x;
                    _3314 = _3313 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3314)
                    {
                        frontier_phi_72_pred = _3303;
                        frontier_phi_72_pred_1 = _3302;
                        frontier_phi_72_pred_2 = _3301;
                        frontier_phi_72_pred_3 = _3300;
                        frontier_phi_72_pred_4 = _3299;
                        frontier_phi_72_pred_5 = _3298;
                    }
                    else
                    {
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3510 = _3298;
                        float _3511 = _3299;
                        float _3512 = _3300;
                        float _3513 = _3301;
                        float _3514 = _3302;
                        float _3515 = _3303;
                        uint _3516 = _3313;
                        uint _3517;
                        vec4 _3542;
                        float _3543;
                        vec4 _3558;
                        vec3 _3570;
                        vec4 _3585;
                        vec4 _3600;
                        float _3646;
                        bool _3647;
                        for (;;)
                        {
                            uint _3527 = ((_3304 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3516));
                            _3517 = (_3516 + 4294967295u) & _3516;
                            uint _3529 = _3527 * 40u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            _3543 = _3542.w;
                            uint _3545 = (_3527 * 40u) + 4u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3527 * 40u) + 8u;
                            _3570 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x));
                            uint _3572 = (_3527 * 40u) + 16u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3587 = (_3527 * 40u) + 20u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3527 * 40u) + 24u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3621 = (_3527 * 40u) + 28u;
                            vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3646 = fma(_2046, _3634.z, fma(_2045, _3634.y, _3634.x * _2044)) + _3634.w;
                            _3647 = !((fma(_2046, _3615.z, fma(_2045, _3615.y, _3615.x * _2044)) + _3615.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3647)
                            {
                                float _3674 = _3542.x - _2044;
                                float _3675 = _3542.y - _2045;
                                float _3676 = _3542.z - _2046;
                                float _3677 = dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676));
                                float _3680 = inversesqrt(_3677);
                                float _3681 = _3680 * _3674;
                                float _3682 = _3680 * _3675;
                                float _3683 = _3680 * _3676;
                                float _3687 = 1.0 - (_3677 / (_3543 * _3543));
                                float _4851 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3692 = sqrt(_3677) * _3558.w;
                                float _3694 = 1.39999997615814208984375 / (_3692 + 1.39999997615814208984375);
                                float _3695 = _3694 * _3694;
                                float _3698 = ((1.0 - _3695) * dot(vec3(_3681, _3682, _3683), vec3(_930, _933, _936))) + _3695;
                                float _3701 = _3692 * _3692;
                                float _3705 = (fma(_2046, _3585.z, fma(_2045, _3585.y, _3585.x * _2044)) + _3585.w) / _3646;
                                float _3706 = (fma(_2046, _3600.z, fma(_2045, _3600.y, _3600.x * _2044)) + _3600.w) / _3646;
                                float _3710 = 1.0 - dot(vec2(_3705, _3706), vec2(_3705, _3706));
                                float _4867 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3712 = _3711 * (((isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0))) * _3688) / ((_3701 * 0.699999988079071044921875) + 1.0));
                                float _3724 = exp2(log2(1.0 / ((_3701 * 3.5) + 5.0)) * 0.25);
                                float _3725 = 1.0 - _990;
                                float _3732 = sqrt(1.0 - ((1.0 - (_3725 * _3725)) * (1.0 - (_3724 * _3724))));
                                float _3733 = _3732 * _3732;
                                float _3734 = _3733 * _3733;
                                float _3735 = _3681 - _3185;
                                float _3736 = _3682 - _3186;
                                float _3737 = _3683 - _3187;
                                float _3741 = inversesqrt(dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737)));
                                float _3745 = dot(vec3(_930, _933, _936), vec3((-0.0) - _3185, (-0.0) - _3186, (-0.0) - _3187));
                                float _4878 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3749 = dot(vec3(_930, _933, _936), vec3(_3741 * _3735, _3741 * _3736, _3741 * _3737));
                                float _4889 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3756 = ((_3752 * _3752) * (_3734 + (-1.0))) + 1.0;
                                float _3757 = _3694 * _3733;
                                float _3758 = _3757 * _3757;
                                float _3764 = ((1.0 - _3758) * dot(vec3(_930, _933, _936), vec3(_3681, _3682, _3683))) + _3758;
                                float _4900 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3765 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3766 = 1.0 - _3733;
                                float _3776 = (0.5 / (((_3765 * ((_3748 * _3766) + _3733)) + 9.9999999392252902907785028219223e-09) + (((_3765 * _3766) + _3733) * _3748))) * _3765;
                                float _4911 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3786 = (_3711 * _3688) * (((_3734 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3756 * _3756) * ((_3701 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3712 * _3558.y;
                                frontier_phi_78_pred_1 = _3712 * _3558.x;
                                frontier_phi_78_pred_2 = _3786 * _3570.z;
                                frontier_phi_78_pred_3 = _3786 * _3570.y;
                                frontier_phi_78_pred_4 = _3786 * _3570.x;
                                frontier_phi_78_pred_5 = _3712 * _3558.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3794 = frontier_phi_78_pred;
                            _3793 = frontier_phi_78_pred_1;
                            _3792 = frontier_phi_78_pred_2;
                            _3791 = frontier_phi_78_pred_3;
                            _3790 = frontier_phi_78_pred_4;
                            _3795 = frontier_phi_78_pred_5;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            if (_3517 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3517;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3502;
                        frontier_phi_72_pred_1 = _3501;
                        frontier_phi_72_pred_2 = _3500;
                        frontier_phi_72_pred_3 = _3499;
                        frontier_phi_72_pred_4 = _3498;
                        frontier_phi_72_pred_5 = _3497;
                    }
                    _3170 = frontier_phi_72_pred;
                    _3168 = frontier_phi_72_pred_1;
                    _3166 = frontier_phi_72_pred_2;
                    _3164 = frontier_phi_72_pred_3;
                    _3162 = frontier_phi_72_pred_4;
                    _3160 = frontier_phi_72_pred_5;
                    uint _3305 = _3304 + 1u;
                    if (_3305 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3298 = _3160;
                        _3299 = _3162;
                        _3300 = _3164;
                        _3301 = _3166;
                        _3302 = _3168;
                        _3303 = _3170;
                        _3304 = _3305;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3170;
                frontier_phi_60_61_ladder_1 = _3168;
                frontier_phi_60_61_ladder_2 = _3164;
                frontier_phi_60_61_ladder_3 = _3162;
                frontier_phi_60_61_ladder_4 = _3160;
                frontier_phi_60_61_ladder_5 = _3166;
            }
            else
            {
                frontier_phi_60_61_ladder = _3056;
                frontier_phi_60_61_ladder_1 = _3054;
                frontier_phi_60_61_ladder_2 = _3050;
                frontier_phi_60_61_ladder_3 = _3048;
                frontier_phi_60_61_ladder_4 = _3046;
                frontier_phi_60_61_ladder_5 = _3052;
            }
            _3159 = frontier_phi_60_61_ladder_4;
            _3161 = frontier_phi_60_61_ladder_3;
            _3163 = frontier_phi_60_61_ladder_2;
            _3165 = frontier_phi_60_61_ladder_5;
            _3167 = frontier_phi_60_61_ladder_1;
            _3169 = frontier_phi_60_61_ladder;
        }
        float _3174 = isnan(1.0) ? _974 : (isnan(_974) ? 1.0 : min(_974, 1.0));
        _2979 = (_3174 * _3165) + _2510;
        _2981 = (_3174 * _3167) + _2512;
        _2983 = (_3174 * _3169) + _2514;
        _2985 = ((_3159 * 0.039999999105930328369140625) * _3174) + _2833;
        _2987 = ((_3161 * 0.039999999105930328369140625) * _3174) + _2835;
        _2989 = ((_3163 * 0.039999999105930328369140625) * _3174) + _2837;
    }
    else
    {
        _2979 = _2510;
        _2981 = _2512;
        _2983 = _2514;
        _2985 = _2833;
        _2987 = _2835;
        _2989 = _2837;
    }
    float _4927 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4938 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4949 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    uint _3009 = _274 + 6u;
    float _3017 = _911 / cbSceneParam._m0[86u].x;
    float _3018 = _912 / cbSceneParam._m0[86u].y;
    vec4 _3032 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, (log2((isnan(cbSceneParam._m0[77u].w) ? _845 : (isnan(_845) ? cbSceneParam._m0[77u].w : min(_845, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3034 = _3032.x;
    float _3035 = _3032.y;
    float _3036 = _3032.z;
    float _3037 = _3032.w;
    float _3109;
    float _3111;
    float _3113;
    float _3115;
    if (_845 > cbSceneParam._m0[78u].w)
    {
        float _3071 = isnan(_845) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _845 : min(cbSceneParam._m0[80u].w, _845));
        float _3072 = _3071 / _845;
        float _3083 = _3072 * _896;
        float _3084 = _897 * _3072;
        float _3085 = (-0.0) - _3084;
        float _3087 = _3072 * _898;
        float _3089 = (cbSceneParam._m0[77u].w * _3085) / _3071;
        float _3090 = _3089 + cbSceneParam._m0[79u].w;
        float _3091 = cbSceneParam._m0[79u].w - _3084;
        float _3097 = sqrt(((_3083 * _3083) + (_3084 * _3084)) + (_3087 * _3087));
        float _3100 = (1.0 - (cbSceneParam._m0[77u].w / _3071)) * _3097;
        float _3105 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3107 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3260;
        if (abs((_3085 - _3089) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3260 = ((((_3090 > 0.0) ? exp2(_3105 * _3090) : (2.0 - exp2(_3107 * _3090))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3100;
        }
        else
        {
            float _3220 = 1.0 / cbSceneParam._m0[80u].x;
            float _3221 = isnan(_3091) ? _3090 : (isnan(_3090) ? _3091 : max(_3090, _3091));
            float _3222 = isnan(_3091) ? _3090 : (isnan(_3090) ? _3091 : min(_3090, _3091));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            float _3232 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : min(_3222, 0.0));
            _3260 = ((abs(_3097 / _3085) * cbSceneParam._m0[80u].y) * ((((_3231 - _3232) * 2.0) - ((exp2(_3105 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0)))) - exp2(_3105 * (isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))))) * _3220)) - ((exp2(_3107 * _3231) - exp2(_3107 * _3232)) * _3220))) + (_3100 * cbSceneParam._m0[80u].z);
        }
        vec4 _3262 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, 1.0), 0.0);
        float _3271 = exp2((_3260 * (-1.44269502162933349609375)) * (1.0 - _3262.w));
        float _3272 = log2(_3271);
        float _3288 = log2(_3037);
        _3109 = (exp2(_3288 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].x)) * _3262.x) / cbSceneParam._m0[78u].x)) + _3034;
        _3111 = (exp2(_3288 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].y)) * _3262.y) / cbSceneParam._m0[78u].y)) + _3035;
        _3113 = (exp2(_3288 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].z)) * _3262.z) / cbSceneParam._m0[78u].z)) + _3036;
        _3115 = _3271 * _3037;
    }
    else
    {
        _3109 = _3034;
        _3111 = _3035;
        _3113 = _3036;
        _3115 = _3037;
    }
    float _3127 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3128 = _3127 == 3.0;
    float _3129 = log2(_3115);
    float _3136 = exp2(_3129 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2979 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _974))) + ((_2985 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1778)) * cbPerFrame._m0[3u].x));
    float _3137 = exp2(_3129 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2981 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _974))) + ((_2987 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1778)) * cbPerFrame._m0[3u].x));
    float _3138 = exp2(_3129 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2983 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _974))) + ((_2989 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1778)) * cbPerFrame._m0[3u].x));
    float _3147 = (_3127 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3147 * (_3128 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3109)));
    SV_Target.y = _3147 * (_3128 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3111)));
    SV_Target.z = _3147 * (_3128 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3113)));
    SV_Target.w = cbInstanceData._m0[_3009].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3009].w;
}


