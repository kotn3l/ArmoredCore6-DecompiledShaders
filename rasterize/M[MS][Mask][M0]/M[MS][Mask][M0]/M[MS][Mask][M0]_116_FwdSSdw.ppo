#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1438;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _345.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[24u].z) + _399) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3765 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _424 = (_417 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _425 = (_417 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _426 = (_417 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _345.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[24u].z) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3776 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _558 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _345.z) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[24u].z) + _546) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3787 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _566 = (_559 * ((_517.x * cbMtdParam._m0[14u].x) - _497)) + _497;
    float _567 = (_559 * ((_517.y * cbMtdParam._m0[14u].y) - _498)) + _498;
    float _568 = (_559 * ((_517.z * cbMtdParam._m0[14u].z) - _499)) + _499;
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _605 = _603.x;
    float _606 = _603.y;
    float _607 = _603.z;
    float _614 = ((_586.x - _605) * _417) + _605;
    float _615 = ((_586.y - _606) * _417) + _606;
    float _616 = ((_586.z - _607) * _417) + _607;
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _639 = ((_628.x - _614) * _490) + _614;
    float _640 = ((_628.y - _615) * _490) + _615;
    float _641 = ((_628.z - _616) * _490) + _616;
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _666 = ((_653.z - _641) * _559) + _641;
    float _669 = ((((_653.x - _639) * _559) + _639) * 2.0) + (-1.0);
    float _671 = ((((_653.y - _640) * _559) + _640) * 2.0) + (-1.0);
    float _672 = dot(vec2(_669, _671), vec2(_669, _671));
    float _3798 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _677 = sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _718 = _716.x;
    float _719 = 1.0 - _718;
    float _725 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _728 = ((isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : min(_725, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _737 = (_728 - ((((((_718 - _719) * cbMtdParam._m0[24u].w) + _719) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _728))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3819 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _738 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _745 = (_738 * (cbMtdParam._m0[17u].x - _566)) + _566;
    float _746 = (_738 * (cbMtdParam._m0[17u].y - _567)) + _567;
    float _747 = (_738 * (cbMtdParam._m0[17u].z - _568)) + _568;
    vec4 _759 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _761 = _759.x;
    float _762 = 1.0 - _761;
    float _789 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_761 - _762) * cbMtdParam._m0[24u].y) + _762) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3830 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _790 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _798 = ((((cbMtdParam._m0[10u].x - _745) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _790) + _745;
    float _799 = ((((cbMtdParam._m0[10u].y - _746) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _790) + _746;
    float _800 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _747)) * _790) + _747;
    float _804 = (cbMtdParam._m0[19u].w * (_691.z - _666)) + _666;
    vec4 _818 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _825 = (_818.x * 2.0) + (-1.0);
    float _826 = (_818.y * 2.0) + (-1.0);
    float _827 = dot(vec2(_825, _826), vec2(_825, _826));
    float _3841 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _835 = (_738 * (_818.z - _804)) + _804;
    float _838 = ((cbMtdParam._m0[23u].y - _835) * _790) + _835;
    vec4 _857 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _863 = (_857.x * 2.0) + (-1.0);
    float _864 = (_857.y * 2.0) + (-1.0);
    float _865 = dot(vec2(_863, _864), vec2(_863, _864));
    float _3852 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _873 = (((_691.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _669;
    float _874 = (((_691.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _671;
    float _886 = (((_825 - _873) + (cbMtdParam._m0[21u].x * _873)) * _738) + _873;
    float _887 = (((_826 - _874) + (cbMtdParam._m0[21u].x * _874)) * _738) + _874;
    float _888 = (_738 * (sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) - _677)) + _677;
    float _899 = (((_863 - _886) + (_886 * cbMtdParam._m0[22u].z)) * _790) + _886;
    float _900 = (((_864 - _887) + (_887 * cbMtdParam._m0[22u].z)) * _790) + _887;
    float _901 = ((sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) - _888) * _790) + _888;
    float _903 = cbMtdParam._m0[22u].x + _691.w;
    float _906 = fma(_901, _246 * NORMAL.x, fma(_900, _253 * TANGENT.x, (_239 * _231) * _899));
    float _909 = fma(_901, _246 * NORMAL.y, fma(_900, _253 * TANGENT.y, (_239 * _232) * _899));
    float _912 = fma(_901, _246 * NORMAL.z, fma(_900, _253 * TANGENT.z, (_239 * _233) * _899));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _3863 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _920 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _3885 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _3896 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _3907 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _938 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _989 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _979);
    float _990 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _979);
    float _991 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _979);
    float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
    float _996 = _989 * _995;
    float _997 = _990 * _995;
    float _998 = _991 * _995;
    float _1004 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1005 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1023 = fma(_919, cbSceneParam._m0[5u].z, fma(_918, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _917));
    float _1026 = fma(_919, cbSceneParam._m0[6u].z, fma(_918, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _917));
    float _1029 = fma(_919, cbSceneParam._m0[7u].z, fma(_918, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _917));
    uint _1043 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1049 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_1043].x;
    float _1050 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_1043].y;
    float _1051 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_1043].z;
    float _3918 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    vec4 _1063 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1004, cbSceneParam._m0[86u].y * _1005));
    float _1067 = ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * TEXCOORD_5.w) * _1063.x;
    float _1068 = dot(vec3(_917, _918, _919), vec3(_996, _997, _998));
    float _1071 = _1068 * 2.0;
    float _1075 = (_1071 * _917) - _996;
    float _1076 = (_1071 * _918) - _997;
    float _1077 = (_1071 * _919) - _998;
    float _1081 = abs(dot(vec3(_996, _997, _998), vec3(_917, _918, _919)));
    float _3951 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1083 = sqrt(_920);
    float _1096 = exp2((_1083 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1083 * 3.0));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1437;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1162 = fma(_1136, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128));
        float _1166 = fma(_1136, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128));
        float _1170 = fma(_1136, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128));
        float _1195 = _1128 + _917;
        float _1196 = _1132 + _918;
        float _1197 = _1136 + _919;
        float _1207 = fma(_1197, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195)) - _1162;
        float _1208 = fma(_1197, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195)) - _1166;
        float _1209 = fma(_1197, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195)) - _1170;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1162 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1166 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[34u].z) + ((((((_1170 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1265 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1231.x + (-0.5));
        float _1267 = _1265 * (_1231.y + (-0.5));
        float _1268 = _1265 * (_1231.z + (-0.5));
        float _1275 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1238.x + (-0.5));
        float _1277 = _1275 * (_1238.y + (-0.5));
        float _1278 = _1275 * (_1238.z + (-0.5));
        float _1285 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1245.x + (-0.5));
        float _1287 = _1285 * (_1245.y + (-0.5));
        float _1288 = _1285 * (_1245.z + (-0.5));
        float _1295 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1252.x + (-0.5));
        float _1297 = _1295 * (_1252.y + (-0.5));
        float _1298 = _1295 * (_1252.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1319 = (dot(vec3(_917, _918, _919), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1329 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3999 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1331 + 1.0))) + _1336) * _1299;
        float _1346 = _1267 * 0.5;
        float _1347 = _1277 * 0.5;
        float _1348 = _1287 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_917, _918, _919), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4032 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1373 + 1.0))) + _1378) * _1300;
        float _1388 = _1268 * 0.5;
        float _1389 = _1278 * 0.5;
        float _1390 = _1288 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_917, _918, _919), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4065 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1415 + 1.0))) + _1420) * _1301;
        _1437 = _1268;
        _1439 = _1267;
        _1440 = _1266;
        _1441 = _1278;
        _1442 = _1277;
        _1443 = _1276;
        _1444 = _1288;
        _1445 = _1287;
        _1446 = _1286;
        _1447 = _1301;
        _1448 = _1300;
        _1449 = _1299;
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1438;
        _1439 = _1438;
        _1440 = _1438;
        _1441 = _1438;
        _1442 = _1438;
        _1443 = _1438;
        _1444 = _1438;
        _1445 = _1438;
        _1446 = _1438;
        _1447 = _1438;
        _1448 = _1438;
        _1449 = _1438;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1475 = fma(_1136, cbModelParam._m0[30u].z, fma(_1132, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128));
        float _1479 = fma(_1136, cbModelParam._m0[31u].z, fma(_1132, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128));
        float _1483 = fma(_1136, cbModelParam._m0[32u].z, fma(_1132, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128));
        float _1506 = _1128 + _917;
        float _1507 = _1132 + _918;
        float _1508 = _1136 + _919;
        float _1518 = fma(_1508, cbModelParam._m0[30u].z, fma(_1507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1506)) - _1475;
        float _1519 = fma(_1508, cbModelParam._m0[31u].z, fma(_1507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1506)) - _1479;
        float _1520 = fma(_1508, cbModelParam._m0[32u].z, fma(_1507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1506)) - _1483;
        float _1524 = inversesqrt(dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520)));
        float _1537 = ((_1524 * _1518) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1475 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1524 * _1519) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1479 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1524 * _1520) / cbModelParam._m0[35u].z) + ((((((_1483 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        float _1574 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1541.x + (-0.5));
        float _1576 = _1574 * (_1541.y + (-0.5));
        float _1577 = _1574 * (_1541.z + (-0.5));
        float _1584 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1548.x + (-0.5));
        float _1586 = _1584 * (_1548.y + (-0.5));
        float _1587 = _1584 * (_1548.z + (-0.5));
        float _1594 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1555.x + (-0.5));
        float _1596 = _1594 * (_1555.y + (-0.5));
        float _1597 = _1594 * (_1555.z + (-0.5));
        float _1604 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1562.x + (-0.5));
        float _1606 = _1604 * (_1562.y + (-0.5));
        float _1607 = _1604 * (_1562.z + (-0.5));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = _1575 * 0.5;
        float _1612 = _1585 * 0.5;
        float _1613 = _1595 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_917, _918, _919), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4128 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1638 + 1.0))) + _1643) * _1608;
        float _1653 = _1576 * 0.5;
        float _1654 = _1586 * 0.5;
        float _1655 = _1596 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_917, _918, _919), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4161 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1680 + 1.0))) + _1685) * _1609;
        float _1695 = _1577 * 0.5;
        float _1696 = _1587 * 0.5;
        float _1697 = _1597 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_917, _918, _919), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4194 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1722 + 1.0))) + _1727) * _1610;
        _1744 = _1577;
        _1745 = _1576;
        _1746 = _1575;
        _1747 = _1587;
        _1748 = _1586;
        _1749 = _1585;
        _1750 = _1597;
        _1751 = _1596;
        _1752 = _1595;
        _1753 = _1610;
        _1754 = _1609;
        _1755 = _1608;
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
    }
    else
    {
        _1744 = _1438;
        _1745 = _1438;
        _1746 = _1438;
        _1747 = _1438;
        _1748 = _1438;
        _1749 = _1438;
        _1750 = _1438;
        _1751 = _1438;
        _1752 = _1438;
        _1753 = _1438;
        _1754 = _1438;
        _1755 = _1438;
        _1756 = 0.0;
        _1757 = 0.0;
        _1758 = 0.0;
    }
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1450)) + _1450;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1451)) + _1451;
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1452)) + _1452;
    float _1791 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1768));
    float _1812 = _1075 * 0.5;
    float _1813 = _1076 * 0.5;
    float _1814 = _1077 * 0.5;
    float _1815 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1818 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1821 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1855;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1828 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1437, _1441, _1444, _1447));
        float _1832 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1836 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1843 = dot(vec4(cbModelParam._m0[39u]), vec4(_1812, _1813, _1814, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1866;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1857 = dot(vec4(cbModelParam._m0[40u]), vec4(_1812, _1813, _1814, 1.0));
        _1866 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1866 = 1.0;
    }
    float _1870 = (_1866 * cbModelParam._m0[1u].x) + (_1855 * (1.0 - cbModelParam._m0[1u].x));
    float _1880 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _920);
    float _1881 = isnan(_1880) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1880 : min(cbModelParam._m0[25u].z, _1880));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1928 = fma(_1136, cbModelParam._m0[13u].z, fma(_1132, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1128)) + cbModelParam._m0[13u].w;
        float _1932 = fma(_1136, cbModelParam._m0[14u].z, fma(_1132, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1128)) + cbModelParam._m0[14u].w;
        float _1936 = fma(_1136, cbModelParam._m0[15u].z, fma(_1132, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1128)) + cbModelParam._m0[15u].w;
        float _1939 = fma(_1077, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075));
        float _1942 = fma(_1077, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075));
        float _1945 = fma(_1077, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075));
        float _1973;
        if (_1939 > 0.0)
        {
            _1973 = abs((1.0 - _1928) / _1939);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1928 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1973 = frontier_phi_14_12_ladder;
        }
        float _2195;
        if (_1942 > 0.0)
        {
            _2195 = abs((1.0 - _1932) / _1942);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1932 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2195 = frontier_phi_23_19_ladder;
        }
        float _2441;
        if (_1945 > 0.0)
        {
            _2441 = abs((1.0 - _1936) / _1945);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1936 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2441 = frontier_phi_35_30_ladder;
        }
        float _2443 = isnan(_2195) ? _1973 : (isnan(_1973) ? _2195 : min(_1973, _2195));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1939) + _1928;
        float _2449 = (_2444 * _1942) + _1932;
        float _2450 = (_2444 * _1945) + _1936;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2451;
        float _2455 = _2451 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 > _2455) || ((_2449 < _2453) || ((_2448 < _2453) || (_2448 > _2455))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2574 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2450, cbModelParam._m0[9u].z, fma(_2449, cbModelParam._m0[9u].y, _2448 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2450, cbModelParam._m0[10u].z, fma(_2449, cbModelParam._m0[10u].y, _2448 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2450, cbModelParam._m0[11u].z, fma(_2449, cbModelParam._m0[11u].y, _2448 * cbModelParam._m0[11u].x))), _1881);
            frontier_phi_13_35_ladder = _2574.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2574.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2574.x * cbModelParam._m0[1u].y;
        }
        _1961 = frontier_phi_13_35_ladder_2;
        _1963 = frontier_phi_13_35_ladder_1;
        _1965 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1075, _1076, _1077), _1881);
        _1961 = _1949.x * cbModelParam._m0[1u].y;
        _1963 = _1949.y * cbModelParam._m0[1u].y;
        _1965 = _1949.z * cbModelParam._m0[1u].y;
    }
    float _1969 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _920);
    float _1970 = isnan(_1969) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1969 : min(cbModelParam._m0[25u].w, _1969));
    float _2060;
    float _2062;
    float _2064;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2024 = fma(_1136, cbModelParam._m0[21u].z, fma(_1132, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1128)) + cbModelParam._m0[21u].w;
        float _2028 = fma(_1136, cbModelParam._m0[22u].z, fma(_1132, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1128)) + cbModelParam._m0[22u].w;
        float _2032 = fma(_1136, cbModelParam._m0[23u].z, fma(_1132, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1128)) + cbModelParam._m0[23u].w;
        float _2035 = fma(_1077, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075));
        float _2038 = fma(_1077, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075));
        float _2041 = fma(_1077, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075));
        float _2200;
        if (_2035 > 0.0)
        {
            _2200 = abs((1.0 - _2024) / _2035);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2024 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2200 = frontier_phi_25_21_ladder;
        }
        float _2468;
        if (_2038 > 0.0)
        {
            _2468 = abs((1.0 - _2028) / _2038);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2028 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2468 = frontier_phi_37_32_ladder;
        }
        float _2673;
        if (_2041 > 0.0)
        {
            _2673 = abs((1.0 - _2032) / _2041);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2032 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2673 = frontier_phi_46_43_ladder;
        }
        float _2675 = isnan(_2468) ? _2200 : (isnan(_2200) ? _2468 : min(_2200, _2468));
        float _2676 = isnan(_2673) ? _2675 : (isnan(_2675) ? _2673 : min(_2675, _2673));
        float _2680 = (_2676 * _2035) + _2024;
        float _2681 = (_2676 * _2038) + _2028;
        float _2682 = (_2676 * _2041) + _2032;
        float _2683 = _2676 * 9.9999997473787516355514526367188e-05;
        float _2684 = (-1.0) - _2683;
        float _2686 = _2683 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2682 > _2686) || ((_2682 < _2684) || ((_2681 > _2686) || ((_2681 < _2684) || ((_2680 < _2684) || (_2680 > _2686))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2682, cbModelParam._m0[17u].z, fma(_2681, cbModelParam._m0[17u].y, _2680 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2682, cbModelParam._m0[18u].z, fma(_2681, cbModelParam._m0[18u].y, _2680 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2682, cbModelParam._m0[19u].z, fma(_2681, cbModelParam._m0[19u].y, _2680 * cbModelParam._m0[19u].x))), _1970);
            frontier_phi_22_46_ladder = _2881.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2881.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2881.x * cbModelParam._m0[1u].z;
        }
        _2060 = frontier_phi_22_46_ladder_2;
        _2062 = frontier_phi_22_46_ladder_1;
        _2064 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1075, _1076, _1077), _1970);
        _2060 = _2044.x * cbModelParam._m0[1u].z;
        _2062 = _2044.y * cbModelParam._m0[1u].z;
        _2064 = _2044.z * cbModelParam._m0[1u].z;
    }
    float _2076 = ((((1.0 - _1096) * ((_1083 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1096 * _1083)) * _1067;
    float _2077 = _2076 * ((cbModelParam._m0[1u].w * (_2060 - _1961)) + _1961);
    float _2078 = _2076 * ((cbModelParam._m0[1u].w * (_2062 - _1963)) + _1963);
    float _2079 = _2076 * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2082 = fma(_2079, cbSceneParam._m0[89u].z, fma(_2078, cbSceneParam._m0[89u].y, _2077 * cbSceneParam._m0[89u].x));
    float _2085 = fma(_2079, cbSceneParam._m0[90u].z, fma(_2078, cbSceneParam._m0[90u].y, _2077 * cbSceneParam._m0[90u].x));
    float _2088 = fma(_2079, cbSceneParam._m0[91u].z, fma(_2078, cbSceneParam._m0[91u].y, _2077 * cbSceneParam._m0[91u].x));
    vec4 _2096 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1004, _1005));
    float _2098 = _2096.w;
    float _2110 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2098);
    float _2111 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2098);
    float _2112 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2098);
    uvec4 _2116 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2118 = _2116.x * 14u;
    uint _2119 = _2118 + 13u;
    float _2126 = _1067 + (-1.0);
    float _2131 = (cbLight._m0[_2119].x * _2126) + 1.0;
    float _2132 = (cbLight._m0[_2119].y * _2126) + 1.0;
    float _2133 = (cbLight._m0[_2119].z * _2126) + 1.0;
    float _2134 = (cbLight._m0[_2119].w * _2126) + 1.0;
    uint _2135 = _2118 + 5u;
    float _2141 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
    uint _2145 = _2118 + 4u;
    float _2154 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2158 = _2118 | 1u;
    float _2169 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_917, _918, _919));
    float _2172 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_917, _918, _919));
    float _4330 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _4341 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2177 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2179 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2186 = ((cbLight._m0[_2135].x * _2141) * _2179) + (((cbLight._m0[_2145].x * _2110) * _2154) * _2177);
    float _2187 = ((_2141 * cbLight._m0[_2135].y) * _2179) + (((cbLight._m0[_2145].y * _2111) * _2154) * _2177);
    float _2188 = ((_2141 * cbLight._m0[_2135].z) * _2179) + (((cbLight._m0[_2145].z * _2112) * _2154) * _2177);
    uvec4 _2192 = floatBitsToUint(cbLight._m0[_2118 + 12u]);
    bool _2194 = _2192.x == 0u;
    float _2205;
    float _2207;
    float _2209;
    if (_2194)
    {
        _2205 = _2186;
        _2207 = _2187;
        _2209 = _2188;
    }
    else
    {
        uint _2213 = _2118 + 6u;
        float _2229 = (dot(vec3(cbLight._m0[_2118 + 2u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2230 = _2229 * _2229;
        float _4352 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2231 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2232 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2205 = (((cbLight._m0[_2213].x * 0.3183098733425140380859375) * _2231) * _2232) + _2186;
        _2207 = (((cbLight._m0[_2213].y * 0.3183098733425140380859375) * _2231) * _2232) + _2187;
        _2209 = (((cbLight._m0[_2213].z * 0.3183098733425140380859375) * _2231) * _2232) + _2188;
    }
    bool _2212 = _2192.y == 0u;
    float _2250;
    float _2252;
    float _2254;
    if (_2212)
    {
        _2250 = _2205;
        _2252 = _2207;
        _2254 = _2209;
    }
    else
    {
        uint _2412 = _2118 + 7u;
        float _2428 = (dot(vec3(cbLight._m0[_2118 + 3u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2429 = _2428 * _2428;
        float _4368 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2430 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2431 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2250 = (((cbLight._m0[_2412].x * 0.3183098733425140380859375) * _2430) * _2431) + _2205;
        _2252 = (((cbLight._m0[_2412].y * 0.3183098733425140380859375) * _2430) * _2431) + _2207;
        _2254 = (((cbLight._m0[_2412].z * 0.3183098733425140380859375) * _2430) * _2431) + _2209;
    }
    uint _2257 = _2118 + 8u;
    float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _920) * 0.949999988079071044921875);
    float _2271 = _2270 * _2270;
    float _2272 = cbLight._m0[_2118].x + _996;
    float _2273 = cbLight._m0[_2118].y + _997;
    float _2274 = cbLight._m0[_2118].z + _998;
    float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
    float _2279 = _2278 * _2272;
    float _2280 = _2278 * _2273;
    float _2281 = _2278 * _2274;
    float _2282 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2118].xyz));
    float _4384 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _4395 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _2286 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2287 = dot(vec3(_917, _918, _919), vec3(_2279, _2280, _2281));
    float _4406 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2291 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2279, _2280, _2281));
    float _4417 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2295 = _2271 * _2271;
    float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
    float _2310 = (exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2311 = 1.0 - _2271;
    float _2322 = (0.5 / (((_2286 * ((_2285 * _2311) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2311) + _2271) * _2285))) * _2285;
    float _4428 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2324 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
    uint _2338 = _2118 + 9u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _920) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2158].x + _996;
    float _2352 = cbLight._m0[_2158].y + _997;
    float _2353 = cbLight._m0[_2158].z + _998;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2158].xyz));
    float _4439 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2365 = dot(vec3(_917, _918, _919), vec3(_2358, _2359, _2360));
    float _4450 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2358, _2359, _2360));
    float _4461 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2350 * _2350;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2387 = 1.0 - _2350;
    float _2397 = (0.5 / (((_2286 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2387) + _2350) * _2364))) * _2364;
    float _4472 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    float _2409 = (((_2386 * cbLight._m0[_2338].x) * _2399) * _2141) + ((((cbLight._m0[_2257].x * _2110) * _2310) * _2324) * _2154);
    float _2410 = (((_2386 * cbLight._m0[_2338].y) * _2399) * _2141) + ((((cbLight._m0[_2257].y * _2111) * _2310) * _2324) * _2154);
    float _2411 = (((_2386 * cbLight._m0[_2338].z) * _2399) * _2141) + ((((cbLight._m0[_2257].z * _2112) * _2310) * _2324) * _2154);
    float _2473;
    float _2475;
    float _2477;
    if (_2194)
    {
        _2473 = _2409;
        _2475 = _2410;
        _2477 = _2411;
    }
    else
    {
        uint _2479 = _2118 + 2u;
        uint _2483 = _2118 + 10u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _920) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _996;
        float _2500 = cbLight._m0[_2479].y + _997;
        float _2501 = cbLight._m0[_2479].z + _998;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2479].xyz));
        float _4483 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2513 = dot(vec3(_917, _918, _919), vec3(_2506, _2507, _2508));
        float _4494 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4505 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2535 = 1.0 - _2498;
        float _2545 = (0.5 / (((_2286 * ((_2512 * _2535) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2535) + _2498) * _2512))) * _2512;
        float _4516 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2547 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2548 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2473 = (((_2534 * cbLight._m0[_2483].x) * _2547) * _2548) + _2409;
        _2475 = (((_2534 * cbLight._m0[_2483].y) * _2547) * _2548) + _2410;
        _2477 = (((_2534 * cbLight._m0[_2483].z) * _2547) * _2548) + _2411;
    }
    float _2583;
    float _2585;
    float _2587;
    if (_2212)
    {
        _2583 = _2473;
        _2585 = _2475;
        _2587 = _2477;
    }
    else
    {
        uint _2594 = _2118 + 3u;
        uint _2598 = _2118 + 11u;
        float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2594].w)) * _920) * 0.949999988079071044921875);
        float _2613 = _2612 * _2612;
        float _2614 = cbLight._m0[_2594].x + _996;
        float _2615 = cbLight._m0[_2594].y + _997;
        float _2616 = cbLight._m0[_2594].z + _998;
        float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
        float _2621 = _2620 * _2614;
        float _2622 = _2620 * _2615;
        float _2623 = _2620 * _2616;
        float _2624 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2594].xyz));
        float _4532 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2628 = dot(vec3(_917, _918, _919), vec3(_2621, _2622, _2623));
        float _4543 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2632 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_2621, _2622, _2623));
        float _4554 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2636 = _2613 * _2613;
        float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
        float _2649 = (exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2650 = 1.0 - _2613;
        float _2660 = (0.5 / (((_2286 * ((_2627 * _2650) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2650) + _2613) * _2627))) * _2627;
        float _4565 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2583 = (((_2649 * cbLight._m0[_2598].x) * _2662) * _2663) + _2473;
        _2585 = (((_2649 * cbLight._m0[_2598].y) * _2662) * _2663) + _2475;
        _2587 = (((_2649 * cbLight._m0[_2598].z) * _2662) * _2663) + _2477;
    }
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    if (_2116.y == 0u)
    {
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2738;
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2738;
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2738;
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.x;
        uint _2765 = uint((float(_2753.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1005) / _2754))) + floor(float(uint(cbSceneParam._m0[85u].x * _1004) / _2754)));
        float _2775 = (log2(_2741 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2776 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        uint _2779 = uint(isnan(14.0) ? _2776 : (isnan(_2776) ? 14.0 : min(_2776, 14.0)));
        uvec4 _2784 = texelFetch(g_lightClusterGridBuffer, int(((_2779 << 2u) + (_2765 << 6u)) >> 2u));
        uint _2785 = _2784.x;
        uint _2786 = _2753.z;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((((1u << ((_2786 >> 4u) & 15u)) + 4294967295u) & _2785) == 0u) || ((_2786 & 240u) == 0u))
        {
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
        }
        else
        {
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            uint _3037 = 0u;
            uint _3046;
            bool _3047;
            for (;;)
            {
                _3046 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                _3047 = _3046 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3047)
                {
                    frontier_phi_61_pred = _3031;
                    frontier_phi_61_pred_1 = _3036;
                    frontier_phi_61_pred_2 = _3035;
                    frontier_phi_61_pred_3 = _3034;
                    frontier_phi_61_pred_4 = _3033;
                    frontier_phi_61_pred_5 = _3032;
                }
                else
                {
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    uint _3161;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3046;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    for (;;)
                    {
                        uint _3165 = uint(findLSB(_3161)) + (_3037 << 5u);
                        uint _3162 = (_3161 + 4294967295u) & _3161;
                        uint _3167 = _3165 * 48u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3187 = (_3165 * 48u) + 4u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3206 = (_3165 * 48u) + 8u;
                        vec3 _3217 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x));
                        float _3221 = _3181.x - _2739;
                        float _3222 = _3181.y - _2740;
                        float _3223 = _3181.z - _2741;
                        float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                        float _3227 = inversesqrt(_3224);
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3231 = dot(vec3(_1023, _1026, _1029), vec3(_3228, _3229, _3230));
                        float _3236 = 1.0 - (_3224 * _3181.w);
                        float _4591 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3238 = sqrt(_3224) * _3200.w;
                        float _3241 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3231) + _3242;
                        float _3248 = _3238 * _3238;
                        float _3252 = ((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3237) / ((_3248 * 0.699999988079071044921875) + 1.0);
                        float _3256 = (-0.0) - _2739;
                        float _3257 = (-0.0) - _2740;
                        float _3258 = (-0.0) - _2741;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3273 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                        float _3274 = 1.0 - _1083;
                        float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                        float _3282 = _3281 * _3281;
                        float _3283 = _3282 * _3282;
                        float _3284 = _3263 + _3228;
                        float _3285 = _3264 + _3229;
                        float _3286 = _3265 + _3230;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3294 = dot(vec3(_1023, _1026, _1029), vec3(_3263, _3264, _3265));
                        float _4607 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3298 = dot(vec3(_1023, _1026, _1029), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                        float _4618 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                        float _3306 = _3241 * _3282;
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3231) + _3307;
                        float _4629 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3312 = 1.0 - _3282;
                        float _3322 = (0.5 / (((_3311 * ((_3297 * _3312) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3282) * _3297))) * _3311;
                        float _4640 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3333 = (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) / ((_3305 * _3305) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125))) * _3237;
                        _3090 = (_3252 * _3200.x) + _3158;
                        _3091 = (_3252 * _3200.y) + _3159;
                        _3092 = (_3252 * _3200.z) + _3160;
                        _3087 = (_3333 * _3217.x) + _3155;
                        _3088 = (_3333 * _3217.y) + _3156;
                        _3089 = (_3333 * _3217.z) + _3157;
                        if (_3162 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3162;
                        }
                    }
                    frontier_phi_61_pred = _3087;
                    frontier_phi_61_pred_1 = _3092;
                    frontier_phi_61_pred_2 = _3091;
                    frontier_phi_61_pred_3 = _3090;
                    frontier_phi_61_pred_4 = _3089;
                    frontier_phi_61_pred_5 = _3088;
                }
                _2887 = frontier_phi_61_pred;
                _2897 = frontier_phi_61_pred_1;
                _2895 = frontier_phi_61_pred_2;
                _2893 = frontier_phi_61_pred_3;
                _2891 = frontier_phi_61_pred_4;
                _2889 = frontier_phi_61_pred_5;
                uint _3038 = _3037 + 1u;
                if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3031 = _2887;
                    _3032 = _2889;
                    _3033 = _2891;
                    _3034 = _2893;
                    _3035 = _2895;
                    _3036 = _2897;
                    _3037 = _3038;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
        }
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.z;
        uint _2903 = (_2901 >> 8u) & 15u;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        if (((4294967295u << _2903) & _2785) == 0u)
        {
            _2999 = _2886;
            _3001 = _2888;
            _3003 = _2890;
            _3005 = _2892;
            _3007 = _2894;
            _3009 = _2896;
        }
        else
        {
            float _3024 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
            float _3025 = _3024 * _2739;
            float _3026 = _3024 * _2740;
            float _3027 = _3024 * _2741;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2903 < ((_2901 >> 12u) & 15u))
            {
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3138 = _2886;
                float _3139 = _2888;
                float _3140 = _2890;
                float _3141 = _2892;
                float _3142 = _2894;
                float _3143 = _2896;
                uint _3144 = _2903;
                uint _3153;
                bool _3154;
                for (;;)
                {
                    _3153 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                    _3154 = _3153 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3154)
                    {
                        frontier_phi_67_pred = _3141;
                        frontier_phi_67_pred_1 = _3142;
                        frontier_phi_67_pred_2 = _3143;
                        frontier_phi_67_pred_3 = _3140;
                        frontier_phi_67_pred_4 = _3139;
                        frontier_phi_67_pred_5 = _3138;
                    }
                    else
                    {
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3351 = _3138;
                        float _3352 = _3139;
                        float _3353 = _3140;
                        float _3354 = _3141;
                        float _3355 = _3142;
                        float _3356 = _3143;
                        uint _3357 = _3153;
                        uint _3358;
                        vec4 _3383;
                        float _3384;
                        vec4 _3399;
                        vec3 _3411;
                        vec4 _3426;
                        vec4 _3441;
                        float _3487;
                        bool _3488;
                        for (;;)
                        {
                            uint _3368 = ((_3144 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3357));
                            _3358 = (_3357 + 4294967295u) & _3357;
                            uint _3370 = _3368 * 40u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3384 = _3383.w;
                            uint _3386 = (_3368 * 40u) + 4u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3368 * 40u) + 8u;
                            _3411 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x));
                            uint _3413 = (_3368 * 40u) + 16u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3368 * 40u) + 20u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3368 * 40u) + 24u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3462 = (_3368 * 40u) + 28u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3487 = fma(_2741, _3475.z, fma(_2740, _3475.y, _3475.x * _2739)) + _3475.w;
                            _3488 = !((fma(_2741, _3456.z, fma(_2740, _3456.y, _3456.x * _2739)) + _3456.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3488)
                            {
                                float _3515 = _3383.x - _2739;
                                float _3516 = _3383.y - _2740;
                                float _3517 = _3383.z - _2741;
                                float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                                float _3521 = inversesqrt(_3518);
                                float _3522 = _3521 * _3515;
                                float _3523 = _3521 * _3516;
                                float _3524 = _3521 * _3517;
                                float _3528 = 1.0 - (_3518 / (_3384 * _3384));
                                float _4651 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3533 = sqrt(_3518) * _3399.w;
                                float _3535 = 1.39999997615814208984375 / (_3533 + 1.39999997615814208984375);
                                float _3536 = _3535 * _3535;
                                float _3539 = ((1.0 - _3536) * dot(vec3(_3522, _3523, _3524), vec3(_1023, _1026, _1029))) + _3536;
                                float _3542 = _3533 * _3533;
                                float _3546 = (fma(_2741, _3426.z, fma(_2740, _3426.y, _3426.x * _2739)) + _3426.w) / _3487;
                                float _3547 = (fma(_2741, _3441.z, fma(_2740, _3441.y, _3441.x * _2739)) + _3441.w) / _3487;
                                float _3551 = 1.0 - dot(vec2(_3546, _3547), vec2(_3546, _3547));
                                float _4667 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3553 = _3552 * (((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3529) / ((_3542 * 0.699999988079071044921875) + 1.0));
                                float _3565 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                                float _3566 = 1.0 - _1083;
                                float _3573 = sqrt(1.0 - ((1.0 - (_3566 * _3566)) * (1.0 - (_3565 * _3565))));
                                float _3574 = _3573 * _3573;
                                float _3575 = _3574 * _3574;
                                float _3576 = _3522 - _3025;
                                float _3577 = _3523 - _3026;
                                float _3578 = _3524 - _3027;
                                float _3582 = inversesqrt(dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578)));
                                float _3586 = dot(vec3(_1023, _1026, _1029), vec3((-0.0) - _3025, (-0.0) - _3026, (-0.0) - _3027));
                                float _4678 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3590 = dot(vec3(_1023, _1026, _1029), vec3(_3582 * _3576, _3582 * _3577, _3582 * _3578));
                                float _4689 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3597 = ((_3593 * _3593) * (_3575 + (-1.0))) + 1.0;
                                float _3598 = _3535 * _3574;
                                float _3599 = _3598 * _3598;
                                float _3605 = ((1.0 - _3599) * dot(vec3(_1023, _1026, _1029), vec3(_3522, _3523, _3524))) + _3599;
                                float _4700 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3607 = 1.0 - _3574;
                                float _3617 = (0.5 / (((_3606 * ((_3589 * _3607) + _3574)) + 9.9999999392252902907785028219223e-09) + (((_3606 * _3607) + _3574) * _3589))) * _3606;
                                float _4711 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3627 = (_3552 * _3529) * (((_3575 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3597 * _3597) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3627 * _3411.x;
                                frontier_phi_73_pred_1 = _3627 * _3411.y;
                                frontier_phi_73_pred_2 = _3553 * _3399.z;
                                frontier_phi_73_pred_3 = _3553 * _3399.y;
                                frontier_phi_73_pred_4 = _3553 * _3399.x;
                                frontier_phi_73_pred_5 = _3627 * _3411.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3631 = frontier_phi_73_pred;
                            _3632 = frontier_phi_73_pred_1;
                            _3636 = frontier_phi_73_pred_2;
                            _3635 = frontier_phi_73_pred_3;
                            _3634 = frontier_phi_73_pred_4;
                            _3633 = frontier_phi_73_pred_5;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            if (_3358 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3358;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3341;
                        frontier_phi_67_pred_1 = _3342;
                        frontier_phi_67_pred_2 = _3343;
                        frontier_phi_67_pred_3 = _3340;
                        frontier_phi_67_pred_4 = _3339;
                        frontier_phi_67_pred_5 = _3338;
                    }
                    _3006 = frontier_phi_67_pred;
                    _3008 = frontier_phi_67_pred_1;
                    _3010 = frontier_phi_67_pred_2;
                    _3004 = frontier_phi_67_pred_3;
                    _3002 = frontier_phi_67_pred_4;
                    _3000 = frontier_phi_67_pred_5;
                    uint _3145 = _3144 + 1u;
                    if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3138 = _3000;
                        _3139 = _3002;
                        _3140 = _3004;
                        _3141 = _3006;
                        _3142 = _3008;
                        _3143 = _3010;
                        _3144 = _3145;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3008;
                frontier_phi_55_56_ladder_1 = _3010;
                frontier_phi_55_56_ladder_2 = _3006;
                frontier_phi_55_56_ladder_3 = _3004;
                frontier_phi_55_56_ladder_4 = _3002;
                frontier_phi_55_56_ladder_5 = _3000;
            }
            else
            {
                frontier_phi_55_56_ladder = _2894;
                frontier_phi_55_56_ladder_1 = _2896;
                frontier_phi_55_56_ladder_2 = _2892;
                frontier_phi_55_56_ladder_3 = _2890;
                frontier_phi_55_56_ladder_4 = _2888;
                frontier_phi_55_56_ladder_5 = _2886;
            }
            _2999 = frontier_phi_55_56_ladder_5;
            _3001 = frontier_phi_55_56_ladder_4;
            _3003 = frontier_phi_55_56_ladder_3;
            _3005 = frontier_phi_55_56_ladder_2;
            _3007 = frontier_phi_55_56_ladder;
            _3009 = frontier_phi_55_56_ladder_1;
        }
        float _3014 = isnan(1.0) ? _1067 : (isnan(_1067) ? 1.0 : min(_1067, 1.0));
        _2798 = (_3014 * _3005) + _2250;
        _2800 = (_3014 * _3007) + _2252;
        _2802 = (_3014 * _3009) + _2254;
        _2804 = ((_2999 * 0.039999999105930328369140625) * _3014) + _2583;
        _2806 = ((_3001 * 0.039999999105930328369140625) * _3014) + _2585;
        _2808 = ((_3003 * 0.039999999105930328369140625) * _3014) + _2587;
    }
    else
    {
        _2798 = _2250;
        _2800 = _2252;
        _2802 = _2254;
        _2804 = _2583;
        _2806 = _2585;
        _2808 = _2587;
    }
    float _4727 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4738 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _4749 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    uint _2828 = _259 + 6u;
    float _2836 = _1004 / cbSceneParam._m0[86u].x;
    float _2837 = _1005 / cbSceneParam._m0[86u].y;
    vec4 _2851 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, (log2((isnan(cbSceneParam._m0[77u].w) ? _938 : (isnan(_938) ? cbSceneParam._m0[77u].w : min(_938, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2853 = _2851.x;
    float _2854 = _2851.y;
    float _2855 = _2851.z;
    float _2856 = _2851.w;
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    if (_938 > cbSceneParam._m0[78u].w)
    {
        float _2911 = isnan(_938) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _938 : min(cbSceneParam._m0[80u].w, _938));
        float _2912 = _2911 / _938;
        float _2923 = _2912 * _989;
        float _2924 = _990 * _2912;
        float _2925 = (-0.0) - _2924;
        float _2927 = _2912 * _991;
        float _2929 = (cbSceneParam._m0[77u].w * _2925) / _2911;
        float _2930 = _2929 + cbSceneParam._m0[79u].w;
        float _2931 = cbSceneParam._m0[79u].w - _2924;
        float _2937 = sqrt(((_2923 * _2923) + (_2924 * _2924)) + (_2927 * _2927));
        float _2940 = (1.0 - (cbSceneParam._m0[77u].w / _2911)) * _2937;
        float _2945 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2947 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3100;
        if (abs((_2925 - _2929) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3100 = ((((_2930 > 0.0) ? exp2(_2945 * _2930) : (2.0 - exp2(_2947 * _2930))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2940;
        }
        else
        {
            float _3060 = 1.0 / cbSceneParam._m0[80u].x;
            float _3061 = isnan(_2931) ? _2930 : (isnan(_2930) ? _2931 : max(_2930, _2931));
            float _3062 = isnan(_2931) ? _2930 : (isnan(_2930) ? _2931 : min(_2930, _2931));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            _3100 = ((abs(_2937 / _2925) * cbSceneParam._m0[80u].y) * ((((_3071 - _3072) * 2.0) - ((exp2(_2945 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0)))) - exp2(_2945 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))))) * _3060)) - ((exp2(_2947 * _3071) - exp2(_2947 * _3072)) * _3060))) + (_2940 * cbSceneParam._m0[80u].z);
        }
        vec4 _3102 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, 1.0), 0.0);
        float _3111 = exp2((_3100 * (-1.44269502162933349609375)) * (1.0 - _3102.w));
        float _3112 = log2(_3111);
        float _3128 = log2(_2856);
        _2949 = (exp2(_3128 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].x)) * _3102.x) / cbSceneParam._m0[78u].x)) + _2853;
        _2951 = (exp2(_3128 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].y)) * _3102.y) / cbSceneParam._m0[78u].y)) + _2854;
        _2953 = (exp2(_3128 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].z)) * _3102.z) / cbSceneParam._m0[78u].z)) + _2855;
        _2955 = _3111 * _2856;
    }
    else
    {
        _2949 = _2853;
        _2951 = _2854;
        _2953 = _2855;
        _2955 = _2856;
    }
    float _2967 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2968 = _2967 == 3.0;
    float _2969 = log2(_2955);
    float _2976 = exp2(_2969 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2798 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1067))) + ((_2804 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _2977 = exp2(_2969 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2800 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1067))) + ((_2806 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _2978 = exp2(_2969 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2802 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1067))) + ((_2808 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _2987 = (_2967 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2987 * (_2968 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2949)));
    SV_Target.y = _2987 * (_2968 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2951)));
    SV_Target.z = _2987 * (_2968 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2953)));
    SV_Target.w = cbInstanceData._m0[_2828].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2828].w;
}


