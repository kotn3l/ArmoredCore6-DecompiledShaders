#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1317;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3646 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3657 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3668 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _410 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _412 = _410.x;
    float _424 = dot(vec4(_412, _410.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _441 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _372.x) * 2.0) - ((((_412 - _424) * cbMtdParam._m0[24u].z) + _424) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3679 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _449 = (_442 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _450 = (_442 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _451 = (_442 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    vec4 _468 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _289) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _290) + cbTextureTilingScale._m0[3u].w));
    vec4 _488 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _490 = _488.x;
    float _500 = dot(vec4(_490, _488.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _514 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _372.y) * 2.0) - ((((_490 - _500) * cbMtdParam._m0[24u].z) + _500) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3690 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _522 = (_515 * ((_468.x * cbMtdParam._m0[13u].x) - _449)) + _449;
    float _523 = (_515 * ((_468.y * cbMtdParam._m0[13u].y) - _450)) + _450;
    float _524 = (_515 * ((_468.z * cbMtdParam._m0[13u].z) - _451)) + _451;
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _289) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _290) + cbTextureTilingScale._m0[24u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _561 = _559.x;
    float _571 = dot(vec4(_561, _559.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _583 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _372.z) * 2.0) - ((((_561 - _571) * cbMtdParam._m0[24u].z) + _571) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3701 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _591 = (_584 * ((_542.x * cbMtdParam._m0[14u].x) - _522)) + _522;
    float _592 = (_584 * ((_542.y * cbMtdParam._m0[14u].y) - _523)) + _523;
    float _593 = (_584 * ((_542.z * cbMtdParam._m0[14u].z) - _524)) + _524;
    float _597 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _591;
    float _600 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _592;
    float _603 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _593;
    float _610 = ((_591 - _597) * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) + _597;
    float _611 = ((_592 - _600) * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) + _600;
    float _612 = ((_593 - _603) * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) + _603;
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _666 = _664.x;
    float _667 = _664.y;
    float _668 = _664.z;
    float _675 = ((_647.x - _666) * _442) + _666;
    float _676 = ((_647.y - _667) * _442) + _667;
    float _677 = ((_647.z - _668) * _442) + _668;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _289) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _290) + cbTextureTilingScale._m0[2u].w));
    float _700 = ((_689.x - _675) * _515) + _675;
    float _701 = ((_689.y - _676) * _515) + _676;
    float _702 = ((_689.z - _677) * _515) + _677;
    vec4 _714 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _289) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _290) + cbTextureTilingScale._m0[23u].w));
    float _727 = ((_714.z - _702) * _584) + _702;
    float _730 = ((((_714.x - _700) * _584) + _700) * 2.0) + (-1.0);
    float _731 = ((((_714.y - _701) * _584) + _701) * 2.0) + (-1.0);
    float _732 = dot(vec2(_730, _731), vec2(_730, _731));
    float _3712 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _737 = sqrt(1.0 - (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))));
    vec4 _757 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _769 = (_730 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_624.x * 2.0) + (-1.0)))) + (((_757.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _770 = (_731 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_624.y * 2.0) + (-1.0)))) + (((_757.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _775 = (((_624.z - _727) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _727;
    float _779 = ((_757.z - _775) * cbMtdParam._m0[19u].w) + _775;
    float _781 = cbMtdParam._m0[22u].x + _757.w;
    float _784 = fma(_737, _236 * NORMAL.x, fma(_770, _243 * TANGENT.x, (_229 * _221) * _769));
    float _787 = fma(_737, _236 * NORMAL.y, fma(_770, _243 * TANGENT.y, (_229 * _222) * _769));
    float _790 = fma(_737, _236 * NORMAL.z, fma(_770, _243 * TANGENT.z, (_229 * _223) * _769));
    float _794 = inversesqrt(dot(vec3(_784, _787, _790), vec3(_784, _787, _790)));
    float _795 = _794 * _784;
    float _796 = _794 * _787;
    float _797 = _794 * _790;
    float _3723 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _798 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _3745 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3756 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3767 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _868 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _858);
    float _869 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _858);
    float _870 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _858);
    float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
    float _875 = _868 * _874;
    float _876 = _869 * _874;
    float _877 = _870 * _874;
    float _883 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _884 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _902 = fma(_797, cbSceneParam._m0[5u].z, fma(_796, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _795));
    float _905 = fma(_797, cbSceneParam._m0[6u].z, fma(_796, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _795));
    float _908 = fma(_797, cbSceneParam._m0[7u].z, fma(_796, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _795));
    uint _922 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _928 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_922].x;
    float _929 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_922].y;
    float _930 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_922].z;
    float _3778 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    vec4 _942 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _883, cbSceneParam._m0[86u].y * _884));
    float _946 = ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * TEXCOORD_5.w) * _942.x;
    float _947 = dot(vec3(_795, _796, _797), vec3(_875, _876, _877));
    float _950 = _947 * 2.0;
    float _954 = (_950 * _795) - _875;
    float _955 = (_950 * _796) - _876;
    float _956 = (_950 * _797) - _877;
    float _960 = abs(dot(vec3(_875, _876, _877), vec3(_795, _796, _797)));
    float _3811 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _962 = sqrt(_798);
    float _975 = exp2((_962 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_962 * 3.0));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1316;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1041 = fma(_1015, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1007));
        float _1045 = fma(_1015, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1007));
        float _1049 = fma(_1015, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1007));
        float _1074 = _1007 + _795;
        float _1075 = _1011 + _796;
        float _1076 = _1015 + _797;
        float _1086 = fma(_1076, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074)) - _1041;
        float _1087 = fma(_1076, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074)) - _1045;
        float _1088 = fma(_1076, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074)) - _1049;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1041 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1045 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[34u].z) + ((((((_1049 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1144 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1110.x + (-0.5));
        float _1146 = _1144 * (_1110.y + (-0.5));
        float _1147 = _1144 * (_1110.z + (-0.5));
        float _1154 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1117.x + (-0.5));
        float _1156 = _1154 * (_1117.y + (-0.5));
        float _1157 = _1154 * (_1117.z + (-0.5));
        float _1164 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1124.x + (-0.5));
        float _1166 = _1164 * (_1124.y + (-0.5));
        float _1167 = _1164 * (_1124.z + (-0.5));
        float _1174 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1131.x + (-0.5));
        float _1176 = _1174 * (_1131.y + (-0.5));
        float _1177 = _1174 * (_1131.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1198 = (dot(vec3(_795, _796, _797), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1208 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3859 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1210 + 1.0))) + _1215) * _1178;
        float _1225 = _1146 * 0.5;
        float _1226 = _1156 * 0.5;
        float _1227 = _1166 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_795, _796, _797), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3892 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1252 + 1.0))) + _1257) * _1179;
        float _1267 = _1147 * 0.5;
        float _1268 = _1157 * 0.5;
        float _1269 = _1167 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_795, _796, _797), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3925 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1294 + 1.0))) + _1299) * _1180;
        _1316 = _1147;
        _1318 = _1146;
        _1319 = _1145;
        _1320 = _1157;
        _1321 = _1156;
        _1322 = _1155;
        _1323 = _1167;
        _1324 = _1166;
        _1325 = _1165;
        _1326 = _1180;
        _1327 = _1179;
        _1328 = _1178;
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1317;
        _1318 = _1317;
        _1319 = _1317;
        _1320 = _1317;
        _1321 = _1317;
        _1322 = _1317;
        _1323 = _1317;
        _1324 = _1317;
        _1325 = _1317;
        _1326 = _1317;
        _1327 = _1317;
        _1328 = _1317;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1354 = fma(_1015, cbModelParam._m0[30u].z, fma(_1011, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1007));
        float _1358 = fma(_1015, cbModelParam._m0[31u].z, fma(_1011, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1007));
        float _1362 = fma(_1015, cbModelParam._m0[32u].z, fma(_1011, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1007));
        float _1385 = _1007 + _795;
        float _1386 = _1011 + _796;
        float _1387 = _1015 + _797;
        float _1397 = fma(_1387, cbModelParam._m0[30u].z, fma(_1386, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1385)) - _1354;
        float _1398 = fma(_1387, cbModelParam._m0[31u].z, fma(_1386, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1385)) - _1358;
        float _1399 = fma(_1387, cbModelParam._m0[32u].z, fma(_1386, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1385)) - _1362;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1354 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1358 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[35u].z) + ((((((_1362 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1453 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1420.x + (-0.5));
        float _1455 = _1453 * (_1420.y + (-0.5));
        float _1456 = _1453 * (_1420.z + (-0.5));
        float _1463 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1427.x + (-0.5));
        float _1465 = _1463 * (_1427.y + (-0.5));
        float _1466 = _1463 * (_1427.z + (-0.5));
        float _1473 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1434.x + (-0.5));
        float _1475 = _1473 * (_1434.y + (-0.5));
        float _1476 = _1473 * (_1434.z + (-0.5));
        float _1483 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1441.x + (-0.5));
        float _1485 = _1483 * (_1441.y + (-0.5));
        float _1486 = _1483 * (_1441.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_795, _796, _797), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _3988 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1517 + 1.0))) + _1522) * _1487;
        float _1532 = _1455 * 0.5;
        float _1533 = _1465 * 0.5;
        float _1534 = _1475 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_795, _796, _797), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4021 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1559 + 1.0))) + _1564) * _1488;
        float _1574 = _1456 * 0.5;
        float _1575 = _1466 * 0.5;
        float _1576 = _1476 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_795, _796, _797), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4054 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1601 + 1.0))) + _1606) * _1489;
        _1623 = _1456;
        _1624 = _1455;
        _1625 = _1454;
        _1626 = _1466;
        _1627 = _1465;
        _1628 = _1464;
        _1629 = _1476;
        _1630 = _1475;
        _1631 = _1474;
        _1632 = _1489;
        _1633 = _1488;
        _1634 = _1487;
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1317;
        _1624 = _1317;
        _1625 = _1317;
        _1626 = _1317;
        _1627 = _1317;
        _1628 = _1317;
        _1629 = _1317;
        _1630 = _1317;
        _1631 = _1317;
        _1632 = _1317;
        _1633 = _1317;
        _1634 = _1317;
        _1635 = 0.0;
        _1636 = 0.0;
        _1637 = 0.0;
    }
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1329)) + _1329;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1330)) + _1330;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1331)) + _1331;
    float _1670 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1647));
    float _1691 = _954 * 0.5;
    float _1692 = _955 * 0.5;
    float _1693 = _956 * 0.5;
    float _1694 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1697 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1700 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1734;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1707 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1316, _1320, _1323, _1326));
        float _1711 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1715 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1722 = dot(vec4(cbModelParam._m0[39u]), vec4(_1691, _1692, _1693, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1745;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1736 = dot(vec4(cbModelParam._m0[40u]), vec4(_1691, _1692, _1693, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1749 = (_1745 * cbModelParam._m0[1u].x) + (_1734 * (1.0 - cbModelParam._m0[1u].x));
    float _1759 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _798);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1759 : min(cbModelParam._m0[25u].z, _1759));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1808 = fma(_1015, cbModelParam._m0[13u].z, fma(_1011, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007)) + cbModelParam._m0[13u].w;
        float _1812 = fma(_1015, cbModelParam._m0[14u].z, fma(_1011, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007)) + cbModelParam._m0[14u].w;
        float _1816 = fma(_1015, cbModelParam._m0[15u].z, fma(_1011, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007)) + cbModelParam._m0[15u].w;
        float _1819 = fma(_956, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954));
        float _1822 = fma(_956, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954));
        float _1825 = fma(_956, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954));
        float _1853;
        if (_1819 > 0.0)
        {
            _1853 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1853 = frontier_phi_14_12_ladder;
        }
        float _2076;
        if (_1822 > 0.0)
        {
            _2076 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2076 = frontier_phi_23_19_ladder;
        }
        float _2322;
        if (_1825 > 0.0)
        {
            _2322 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2322 = frontier_phi_35_30_ladder;
        }
        float _2324 = isnan(_2076) ? _1853 : (isnan(_1853) ? _2076 : min(_1853, _2076));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1819) + _1808;
        float _2330 = (_2325 * _1822) + _1812;
        float _2331 = (_2325 * _1825) + _1816;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2332;
        float _2336 = _2332 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 > _2336) || ((_2330 < _2334) || ((_2329 < _2334) || (_2329 > _2336))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2455 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2331, cbModelParam._m0[9u].z, fma(_2330, cbModelParam._m0[9u].y, _2329 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2331, cbModelParam._m0[10u].z, fma(_2330, cbModelParam._m0[10u].y, _2329 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2331, cbModelParam._m0[11u].z, fma(_2330, cbModelParam._m0[11u].y, _2329 * cbModelParam._m0[11u].x))), _1760);
            frontier_phi_13_35_ladder = _2455.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2455.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2455.x * cbModelParam._m0[1u].y;
        }
        _1841 = frontier_phi_13_35_ladder_2;
        _1843 = frontier_phi_13_35_ladder_1;
        _1845 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_954, _955, _956), _1760);
        _1841 = _1829.x * cbModelParam._m0[1u].y;
        _1843 = _1829.y * cbModelParam._m0[1u].y;
        _1845 = _1829.z * cbModelParam._m0[1u].y;
    }
    float _1849 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _798);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1849 : min(cbModelParam._m0[25u].w, _1849));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1905 = fma(_1015, cbModelParam._m0[21u].z, fma(_1011, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007)) + cbModelParam._m0[21u].w;
        float _1909 = fma(_1015, cbModelParam._m0[22u].z, fma(_1011, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007)) + cbModelParam._m0[22u].w;
        float _1913 = fma(_1015, cbModelParam._m0[23u].z, fma(_1011, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007)) + cbModelParam._m0[23u].w;
        float _1916 = fma(_956, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954));
        float _1919 = fma(_956, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954));
        float _1922 = fma(_956, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954));
        float _2081;
        if (_1916 > 0.0)
        {
            _2081 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2081 = frontier_phi_25_21_ladder;
        }
        float _2349;
        if (_1919 > 0.0)
        {
            _2349 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2349 = frontier_phi_37_32_ladder;
        }
        float _2554;
        if (_1922 > 0.0)
        {
            _2554 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2554 = frontier_phi_46_43_ladder;
        }
        float _2556 = isnan(_2349) ? _2081 : (isnan(_2081) ? _2349 : min(_2081, _2349));
        float _2557 = isnan(_2554) ? _2556 : (isnan(_2556) ? _2554 : min(_2556, _2554));
        float _2561 = (_2557 * _1916) + _1905;
        float _2562 = (_2557 * _1919) + _1909;
        float _2563 = (_2557 * _1922) + _1913;
        float _2564 = _2557 * 9.9999997473787516355514526367188e-05;
        float _2565 = (-1.0) - _2564;
        float _2567 = _2564 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2563 > _2567) || ((_2563 < _2565) || ((_2562 > _2567) || ((_2562 < _2565) || ((_2561 < _2565) || (_2561 > _2567))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2563, cbModelParam._m0[17u].z, fma(_2562, cbModelParam._m0[17u].y, _2561 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2563, cbModelParam._m0[18u].z, fma(_2562, cbModelParam._m0[18u].y, _2561 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2563, cbModelParam._m0[19u].z, fma(_2562, cbModelParam._m0[19u].y, _2561 * cbModelParam._m0[19u].x))), _1850);
            frontier_phi_22_46_ladder = _2762.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2762.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2762.x * cbModelParam._m0[1u].z;
        }
        _1941 = frontier_phi_22_46_ladder_2;
        _1943 = frontier_phi_22_46_ladder_1;
        _1945 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_954, _955, _956), _1850);
        _1941 = _1925.x * cbModelParam._m0[1u].z;
        _1943 = _1925.y * cbModelParam._m0[1u].z;
        _1945 = _1925.z * cbModelParam._m0[1u].z;
    }
    float _1957 = ((((1.0 - _975) * ((_962 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_975 * _962)) * _946;
    float _1958 = _1957 * ((cbModelParam._m0[1u].w * (_1941 - _1841)) + _1841);
    float _1959 = _1957 * ((cbModelParam._m0[1u].w * (_1943 - _1843)) + _1843);
    float _1960 = _1957 * ((cbModelParam._m0[1u].w * (_1945 - _1845)) + _1845);
    float _1963 = fma(_1960, cbSceneParam._m0[89u].z, fma(_1959, cbSceneParam._m0[89u].y, _1958 * cbSceneParam._m0[89u].x));
    float _1966 = fma(_1960, cbSceneParam._m0[90u].z, fma(_1959, cbSceneParam._m0[90u].y, _1958 * cbSceneParam._m0[90u].x));
    float _1969 = fma(_1960, cbSceneParam._m0[91u].z, fma(_1959, cbSceneParam._m0[91u].y, _1958 * cbSceneParam._m0[91u].x));
    vec4 _1977 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_883, _884));
    float _1979 = _1977.w;
    float _1991 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1979);
    float _1992 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1979);
    float _1993 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1979);
    uvec4 _1997 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1999 = _1997.x * 14u;
    uint _2000 = _1999 + 13u;
    float _2007 = _946 + (-1.0);
    float _2012 = (cbLight._m0[_2000].x * _2007) + 1.0;
    float _2013 = (cbLight._m0[_2000].y * _2007) + 1.0;
    float _2014 = (cbLight._m0[_2000].z * _2007) + 1.0;
    float _2015 = (cbLight._m0[_2000].w * _2007) + 1.0;
    uint _2016 = _1999 + 5u;
    float _2022 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2026 = _1999 + 4u;
    float _2035 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2039 = _1999 | 1u;
    float _2050 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_795, _796, _797));
    float _2053 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_795, _796, _797));
    float _4190 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _4201 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2058 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _2060 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.3183098733425140380859375;
    float _2067 = ((cbLight._m0[_2016].x * _2022) * _2060) + (((cbLight._m0[_2026].x * _1991) * _2035) * _2058);
    float _2068 = ((_2022 * cbLight._m0[_2016].y) * _2060) + (((cbLight._m0[_2026].y * _1992) * _2035) * _2058);
    float _2069 = ((_2022 * cbLight._m0[_2016].z) * _2060) + (((cbLight._m0[_2026].z * _1993) * _2035) * _2058);
    uvec4 _2073 = floatBitsToUint(cbLight._m0[_1999 + 12u]);
    bool _2075 = _2073.x == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2075)
    {
        _2086 = _2067;
        _2088 = _2068;
        _2090 = _2069;
    }
    else
    {
        uint _2094 = _1999 + 6u;
        float _2110 = (dot(vec3(cbLight._m0[_1999 + 2u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2111 = _2110 * _2110;
        float _4212 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2112 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2113 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2086 = (((cbLight._m0[_2094].x * 0.3183098733425140380859375) * _2112) * _2113) + _2067;
        _2088 = (((cbLight._m0[_2094].y * 0.3183098733425140380859375) * _2112) * _2113) + _2068;
        _2090 = (((cbLight._m0[_2094].z * 0.3183098733425140380859375) * _2112) * _2113) + _2069;
    }
    bool _2093 = _2073.y == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2093)
    {
        _2131 = _2086;
        _2133 = _2088;
        _2135 = _2090;
    }
    else
    {
        uint _2293 = _1999 + 7u;
        float _2309 = (dot(vec3(cbLight._m0[_1999 + 3u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2310 = _2309 * _2309;
        float _4228 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2311 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2312 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2131 = (((cbLight._m0[_2293].x * 0.3183098733425140380859375) * _2311) * _2312) + _2086;
        _2133 = (((cbLight._m0[_2293].y * 0.3183098733425140380859375) * _2311) * _2312) + _2088;
        _2135 = (((cbLight._m0[_2293].z * 0.3183098733425140380859375) * _2311) * _2312) + _2090;
    }
    uint _2138 = _1999 + 8u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _798) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_1999].x + _875;
    float _2154 = cbLight._m0[_1999].y + _876;
    float _2155 = cbLight._m0[_1999].z + _877;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_1999].xyz));
    float _4244 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _2167 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2168 = dot(vec3(_795, _796, _797), vec3(_2160, _2161, _2162));
    float _4266 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2172 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2160, _2161, _2162));
    float _4277 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2176 = _2152 * _2152;
    float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
    float _2191 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2192 = 1.0 - _2152;
    float _2203 = (0.5 / (((_2167 * ((_2166 * _2192) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2192) + _2152) * _2166))) * _2166;
    float _4288 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2205 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
    uint _2219 = _1999 + 9u;
    float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _798) * 0.949999988079071044921875);
    float _2231 = _2230 * _2230;
    float _2232 = cbLight._m0[_2039].x + _875;
    float _2233 = cbLight._m0[_2039].y + _876;
    float _2234 = cbLight._m0[_2039].z + _877;
    float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
    float _2239 = _2238 * _2232;
    float _2240 = _2238 * _2233;
    float _2241 = _2238 * _2234;
    float _2242 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2039].xyz));
    float _4299 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2246 = dot(vec3(_795, _796, _797), vec3(_2239, _2240, _2241));
    float _4310 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2250 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2239, _2240, _2241));
    float _4321 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2254 = _2231 * _2231;
    float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
    float _2267 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2268 = 1.0 - _2231;
    float _2278 = (0.5 / (((_2167 * ((_2245 * _2268) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2268) + _2231) * _2245))) * _2245;
    float _4332 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2280 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
    float _2290 = (((_2267 * cbLight._m0[_2219].x) * _2280) * _2022) + ((((cbLight._m0[_2138].x * _1991) * _2191) * _2205) * _2035);
    float _2291 = (((_2267 * cbLight._m0[_2219].y) * _2280) * _2022) + ((((cbLight._m0[_2138].y * _1992) * _2191) * _2205) * _2035);
    float _2292 = (((_2267 * cbLight._m0[_2219].z) * _2280) * _2022) + ((((cbLight._m0[_2138].z * _1993) * _2191) * _2205) * _2035);
    float _2354;
    float _2356;
    float _2358;
    if (_2075)
    {
        _2354 = _2290;
        _2356 = _2291;
        _2358 = _2292;
    }
    else
    {
        uint _2360 = _1999 + 2u;
        uint _2364 = _1999 + 10u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _798) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _875;
        float _2381 = cbLight._m0[_2360].y + _876;
        float _2382 = cbLight._m0[_2360].z + _877;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2360].xyz));
        float _4343 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2394 = dot(vec3(_795, _796, _797), vec3(_2387, _2388, _2389));
        float _4354 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4365 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2415 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2416 = 1.0 - _2379;
        float _2426 = (0.5 / (((_2167 * ((_2393 * _2416) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2416) + _2379) * _2393))) * _2393;
        float _4376 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2428 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2429 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2354 = (((_2415 * cbLight._m0[_2364].x) * _2428) * _2429) + _2290;
        _2356 = (((_2415 * cbLight._m0[_2364].y) * _2428) * _2429) + _2291;
        _2358 = (((_2415 * cbLight._m0[_2364].z) * _2428) * _2429) + _2292;
    }
    float _2464;
    float _2466;
    float _2468;
    if (_2093)
    {
        _2464 = _2354;
        _2466 = _2356;
        _2468 = _2358;
    }
    else
    {
        uint _2475 = _1999 + 3u;
        uint _2479 = _1999 + 11u;
        float _2493 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2475].w)) * _798) * 0.949999988079071044921875);
        float _2494 = _2493 * _2493;
        float _2495 = cbLight._m0[_2475].x + _875;
        float _2496 = cbLight._m0[_2475].y + _876;
        float _2497 = cbLight._m0[_2475].z + _877;
        float _2501 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
        float _2502 = _2501 * _2495;
        float _2503 = _2501 * _2496;
        float _2504 = _2501 * _2497;
        float _2505 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2475].xyz));
        float _4392 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2509 = dot(vec3(_795, _796, _797), vec3(_2502, _2503, _2504));
        float _4403 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2513 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_2502, _2503, _2504));
        float _4414 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2517 = _2494 * _2494;
        float _2521 = ((_2512 * _2512) * (_2517 + (-1.0))) + 1.0;
        float _2530 = (exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2531 = 1.0 - _2494;
        float _2541 = (0.5 / (((_2167 * ((_2508 * _2531) + _2494)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2531) + _2494) * _2508))) * _2508;
        float _4425 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2543 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2517 / ((_2521 * _2521) * 3.141590118408203125));
        float _2544 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2464 = (((_2530 * cbLight._m0[_2479].x) * _2543) * _2544) + _2354;
        _2466 = (((_2530 * cbLight._m0[_2479].y) * _2543) * _2544) + _2356;
        _2468 = (((_2530 * cbLight._m0[_2479].z) * _2543) * _2544) + _2358;
    }
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    if (_1997.y == 0u)
    {
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2620 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2619;
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2619;
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2619;
        uvec4 _2634 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2635 = _2634.x;
        uint _2646 = uint((float(_2634.y) * floor(float(uint(cbSceneParam._m0[85u].y * _884) / _2635))) + floor(float(uint(cbSceneParam._m0[85u].x * _883) / _2635)));
        float _2656 = (log2(_2622 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2657 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        uint _2660 = uint(isnan(14.0) ? _2657 : (isnan(_2657) ? 14.0 : min(_2657, 14.0)));
        uvec4 _2665 = texelFetch(g_lightClusterGridBuffer, int(((_2660 << 2u) + (_2646 << 6u)) >> 2u));
        uint _2666 = _2665.x;
        uint _2667 = _2634.z;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((((1u << ((_2667 >> 4u) & 15u)) + 4294967295u) & _2666) == 0u) || ((_2667 & 240u) == 0u))
        {
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
        }
        else
        {
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            uint _2918 = 0u;
            uint _2927;
            bool _2928;
            for (;;)
            {
                _2927 = texelFetch(g_lightClassification, int((((_2660 << 5u) + (_2646 << 9u)) + (_2918 << 2u)) >> 2u)).x;
                _2928 = _2927 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2928)
                {
                    frontier_phi_61_pred = _2912;
                    frontier_phi_61_pred_1 = _2917;
                    frontier_phi_61_pred_2 = _2916;
                    frontier_phi_61_pred_3 = _2915;
                    frontier_phi_61_pred_4 = _2914;
                    frontier_phi_61_pred_5 = _2913;
                }
                else
                {
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    uint _3042;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2916;
                    _3041 = _2917;
                    _3042 = _2927;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    for (;;)
                    {
                        uint _3046 = uint(findLSB(_3042)) + (_2918 << 5u);
                        uint _3043 = (_3042 + 4294967295u) & _3042;
                        uint _3048 = _3046 * 48u;
                        vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3068 = (_3046 * 48u) + 4u;
                        vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 3u)).x));
                        uint _3087 = (_3046 * 48u) + 8u;
                        vec3 _3098 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x));
                        float _3102 = _3062.x - _2620;
                        float _3103 = _3062.y - _2621;
                        float _3104 = _3062.z - _2622;
                        float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                        float _3108 = inversesqrt(_3105);
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3112 = dot(vec3(_902, _905, _908), vec3(_3109, _3110, _3111));
                        float _3117 = 1.0 - (_3105 * _3062.w);
                        float _4451 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3118 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3119 = sqrt(_3105) * _3081.w;
                        float _3122 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3112) + _3123;
                        float _3129 = _3119 * _3119;
                        float _3133 = ((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3118) / ((_3129 * 0.699999988079071044921875) + 1.0);
                        float _3137 = (-0.0) - _2620;
                        float _3138 = (-0.0) - _2621;
                        float _3139 = (-0.0) - _2622;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3154 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                        float _3155 = 1.0 - _962;
                        float _3162 = sqrt(1.0 - ((1.0 - (_3155 * _3155)) * (1.0 - (_3154 * _3154))));
                        float _3163 = _3162 * _3162;
                        float _3164 = _3163 * _3163;
                        float _3165 = _3144 + _3109;
                        float _3166 = _3145 + _3110;
                        float _3167 = _3146 + _3111;
                        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                        float _3175 = dot(vec3(_902, _905, _908), vec3(_3144, _3145, _3146));
                        float _4467 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3179 = dot(vec3(_902, _905, _908), vec3(_3171 * _3165, _3171 * _3166, _3171 * _3167));
                        float _4478 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3182 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3186 = ((_3182 * _3182) * (_3164 + (-1.0))) + 1.0;
                        float _3187 = _3122 * _3163;
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3112) + _3188;
                        float _4489 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3192 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3193 = 1.0 - _3163;
                        float _3203 = (0.5 / (((_3192 * ((_3178 * _3193) + _3163)) + 9.9999999392252902907785028219223e-09) + (((_3192 * _3193) + _3163) * _3178))) * _3192;
                        float _4500 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3214 = (((_3164 * 3.1415927410125732421875) * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) / ((_3186 * _3186) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125))) * _3118;
                        _2971 = (_3133 * _3081.x) + _3039;
                        _2972 = (_3133 * _3081.y) + _3040;
                        _2973 = (_3133 * _3081.z) + _3041;
                        _2968 = (_3214 * _3098.x) + _3036;
                        _2969 = (_3214 * _3098.y) + _3037;
                        _2970 = (_3214 * _3098.z) + _3038;
                        if (_3043 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _2972;
                            _3041 = _2973;
                            _3042 = _3043;
                        }
                    }
                    frontier_phi_61_pred = _2968;
                    frontier_phi_61_pred_1 = _2973;
                    frontier_phi_61_pred_2 = _2972;
                    frontier_phi_61_pred_3 = _2971;
                    frontier_phi_61_pred_4 = _2970;
                    frontier_phi_61_pred_5 = _2969;
                }
                _2768 = frontier_phi_61_pred;
                _2778 = frontier_phi_61_pred_1;
                _2776 = frontier_phi_61_pred_2;
                _2774 = frontier_phi_61_pred_3;
                _2772 = frontier_phi_61_pred_4;
                _2770 = frontier_phi_61_pred_5;
                uint _2919 = _2918 + 1u;
                if (_2919 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2912 = _2768;
                    _2913 = _2770;
                    _2914 = _2772;
                    _2915 = _2774;
                    _2916 = _2776;
                    _2917 = _2778;
                    _2918 = _2919;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
        }
        uvec4 _2781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2782 = _2781.z;
        uint _2784 = (_2782 >> 8u) & 15u;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((4294967295u << _2784) & _2666) == 0u)
        {
            _2880 = _2767;
            _2882 = _2769;
            _2884 = _2771;
            _2886 = _2773;
            _2888 = _2775;
            _2890 = _2777;
        }
        else
        {
            float _2905 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
            float _2906 = _2905 * _2620;
            float _2907 = _2905 * _2621;
            float _2908 = _2905 * _2622;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2784 < ((_2782 >> 12u) & 15u))
            {
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _3019 = _2767;
                float _3020 = _2769;
                float _3021 = _2771;
                float _3022 = _2773;
                float _3023 = _2775;
                float _3024 = _2777;
                uint _3025 = _2784;
                uint _3034;
                bool _3035;
                for (;;)
                {
                    _3034 = texelFetch(g_lightClassification, int((((_2660 << 5u) + (_2646 << 9u)) + (_3025 << 2u)) >> 2u)).x;
                    _3035 = _3034 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3035)
                    {
                        frontier_phi_67_pred = _3022;
                        frontier_phi_67_pred_1 = _3023;
                        frontier_phi_67_pred_2 = _3024;
                        frontier_phi_67_pred_3 = _3021;
                        frontier_phi_67_pred_4 = _3020;
                        frontier_phi_67_pred_5 = _3019;
                    }
                    else
                    {
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3232 = _3019;
                        float _3233 = _3020;
                        float _3234 = _3021;
                        float _3235 = _3022;
                        float _3236 = _3023;
                        float _3237 = _3024;
                        uint _3238 = _3034;
                        uint _3239;
                        vec4 _3264;
                        float _3265;
                        vec4 _3280;
                        vec3 _3292;
                        vec4 _3307;
                        vec4 _3322;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3249 = ((_3025 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3238));
                            _3239 = (_3238 + 4294967295u) & _3238;
                            uint _3251 = _3249 * 40u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            _3265 = _3264.w;
                            uint _3267 = (_3249 * 40u) + 4u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3249 * 40u) + 8u;
                            _3292 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x));
                            uint _3294 = (_3249 * 40u) + 16u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3309 = (_3249 * 40u) + 20u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3249 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3249 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_2622, _3356.z, fma(_2621, _3356.y, _3356.x * _2620)) + _3356.w;
                            _3369 = !((fma(_2622, _3337.z, fma(_2621, _3337.y, _3337.x * _2620)) + _3337.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3264.x - _2620;
                                float _3397 = _3264.y - _2621;
                                float _3398 = _3264.z - _2622;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3265 * _3265));
                                float _4511 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3414 = sqrt(_3399) * _3280.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_902, _905, _908))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_2622, _3307.z, fma(_2621, _3307.y, _3307.x * _2620)) + _3307.w) / _3368;
                                float _3428 = (fma(_2622, _3322.z, fma(_2621, _3322.y, _3322.x * _2620)) + _3322.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4527 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _962;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2906;
                                float _3458 = _3404 - _2907;
                                float _3459 = _3405 - _2908;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_902, _905, _908), vec3((-0.0) - _2906, (-0.0) - _2907, (-0.0) - _2908));
                                float _4538 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3471 = dot(vec3(_902, _905, _908), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4549 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_902, _905, _908), vec3(_3403, _3404, _3405))) + _3480;
                                float _4560 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4571 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3508 * _3292.x;
                                frontier_phi_73_pred_1 = _3508 * _3292.y;
                                frontier_phi_73_pred_2 = _3434 * _3280.z;
                                frontier_phi_73_pred_3 = _3434 * _3280.y;
                                frontier_phi_73_pred_4 = _3434 * _3280.x;
                                frontier_phi_73_pred_5 = _3508 * _3292.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3512 = frontier_phi_73_pred;
                            _3513 = frontier_phi_73_pred_1;
                            _3517 = frontier_phi_73_pred_2;
                            _3516 = frontier_phi_73_pred_3;
                            _3515 = frontier_phi_73_pred_4;
                            _3514 = frontier_phi_73_pred_5;
                            _3222 = _3515 + _3235;
                            _3223 = _3516 + _3236;
                            _3224 = _3517 + _3237;
                            _3219 = _3512 + _3232;
                            _3220 = _3513 + _3233;
                            _3221 = _3514 + _3234;
                            if (_3239 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3239;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3222;
                        frontier_phi_67_pred_1 = _3223;
                        frontier_phi_67_pred_2 = _3224;
                        frontier_phi_67_pred_3 = _3221;
                        frontier_phi_67_pred_4 = _3220;
                        frontier_phi_67_pred_5 = _3219;
                    }
                    _2887 = frontier_phi_67_pred;
                    _2889 = frontier_phi_67_pred_1;
                    _2891 = frontier_phi_67_pred_2;
                    _2885 = frontier_phi_67_pred_3;
                    _2883 = frontier_phi_67_pred_4;
                    _2881 = frontier_phi_67_pred_5;
                    uint _3026 = _3025 + 1u;
                    if (_3026 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3019 = _2881;
                        _3020 = _2883;
                        _3021 = _2885;
                        _3022 = _2887;
                        _3023 = _2889;
                        _3024 = _2891;
                        _3025 = _3026;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2889;
                frontier_phi_55_56_ladder_1 = _2891;
                frontier_phi_55_56_ladder_2 = _2887;
                frontier_phi_55_56_ladder_3 = _2885;
                frontier_phi_55_56_ladder_4 = _2883;
                frontier_phi_55_56_ladder_5 = _2881;
            }
            else
            {
                frontier_phi_55_56_ladder = _2775;
                frontier_phi_55_56_ladder_1 = _2777;
                frontier_phi_55_56_ladder_2 = _2773;
                frontier_phi_55_56_ladder_3 = _2771;
                frontier_phi_55_56_ladder_4 = _2769;
                frontier_phi_55_56_ladder_5 = _2767;
            }
            _2880 = frontier_phi_55_56_ladder_5;
            _2882 = frontier_phi_55_56_ladder_4;
            _2884 = frontier_phi_55_56_ladder_3;
            _2886 = frontier_phi_55_56_ladder_2;
            _2888 = frontier_phi_55_56_ladder;
            _2890 = frontier_phi_55_56_ladder_1;
        }
        float _2895 = isnan(1.0) ? _946 : (isnan(_946) ? 1.0 : min(_946, 1.0));
        _2679 = (_2895 * _2886) + _2131;
        _2681 = (_2895 * _2888) + _2133;
        _2683 = (_2895 * _2890) + _2135;
        _2685 = ((_2880 * 0.039999999105930328369140625) * _2895) + _2464;
        _2687 = ((_2882 * 0.039999999105930328369140625) * _2895) + _2466;
        _2689 = ((_2884 * 0.039999999105930328369140625) * _2895) + _2468;
    }
    else
    {
        _2679 = _2131;
        _2681 = _2133;
        _2683 = _2135;
        _2685 = _2464;
        _2687 = _2466;
        _2689 = _2468;
    }
    float _4587 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4598 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4609 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    uint _2709 = _270 + 6u;
    float _2717 = _883 / cbSceneParam._m0[86u].x;
    float _2718 = _884 / cbSceneParam._m0[86u].y;
    vec4 _2732 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2717, _2718, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2734 = _2732.x;
    float _2735 = _2732.y;
    float _2736 = _2732.z;
    float _2737 = _2732.w;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _2792 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _2793 = _2792 / _816;
        float _2804 = _2793 * _868;
        float _2805 = _869 * _2793;
        float _2806 = (-0.0) - _2805;
        float _2808 = _2793 * _870;
        float _2810 = (cbSceneParam._m0[77u].w * _2806) / _2792;
        float _2811 = _2810 + cbSceneParam._m0[79u].w;
        float _2812 = cbSceneParam._m0[79u].w - _2805;
        float _2818 = sqrt(((_2804 * _2804) + (_2805 * _2805)) + (_2808 * _2808));
        float _2821 = (1.0 - (cbSceneParam._m0[77u].w / _2792)) * _2818;
        float _2826 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2828 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2981;
        if (abs((_2806 - _2810) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2981 = ((((_2811 > 0.0) ? exp2(_2826 * _2811) : (2.0 - exp2(_2828 * _2811))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2821;
        }
        else
        {
            float _2941 = 1.0 / cbSceneParam._m0[80u].x;
            float _2942 = isnan(_2812) ? _2811 : (isnan(_2811) ? _2812 : max(_2811, _2812));
            float _2943 = isnan(_2812) ? _2811 : (isnan(_2811) ? _2812 : min(_2811, _2812));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            _2981 = ((abs(_2818 / _2806) * cbSceneParam._m0[80u].y) * ((((_2952 - _2953) * 2.0) - ((exp2(_2826 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0)))) - exp2(_2826 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))))) * _2941)) - ((exp2(_2828 * _2952) - exp2(_2828 * _2953)) * _2941))) + (_2821 * cbSceneParam._m0[80u].z);
        }
        vec4 _2983 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2717, _2718, 1.0), 0.0);
        float _2992 = exp2((_2981 * (-1.44269502162933349609375)) * (1.0 - _2983.w));
        float _2993 = log2(_2992);
        float _3009 = log2(_2737);
        _2830 = (exp2(_3009 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2993 * cbSceneParam._m0[78u].x)) * _2983.x) / cbSceneParam._m0[78u].x)) + _2734;
        _2832 = (exp2(_3009 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2993 * cbSceneParam._m0[78u].y)) * _2983.y) / cbSceneParam._m0[78u].y)) + _2735;
        _2834 = (exp2(_3009 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2993 * cbSceneParam._m0[78u].z)) * _2983.z) / cbSceneParam._m0[78u].z)) + _2736;
        _2836 = _2992 * _2737;
    }
    else
    {
        _2830 = _2734;
        _2832 = _2735;
        _2834 = _2736;
        _2836 = _2737;
    }
    float _2848 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2849 = _2848 == 3.0;
    float _2850 = log2(_2836);
    float _2857 = exp2(_2850 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2679 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _946))) + ((_2685 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _2858 = exp2(_2850 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2681 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _946))) + ((_2687 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _2859 = exp2(_2850 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2683 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _946))) + ((_2689 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _2868 = (_2848 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2868 * (_2849 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2830)));
    SV_Target.y = _2868 * (_2849 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2832)));
    SV_Target.z = _2868 * (_2849 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2834)));
    SV_Target.w = cbInstanceData._m0[_2709].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2709].w;
}


