#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1288;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _397 = _395.x;
    float _409 = dot(vec4(_397, _395.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _426 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_397 - _409) * cbMtdParam._m0[24u].z) + _409) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3876 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _440 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_427 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321);
    float _443 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_427 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322);
    float _446 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_427 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323);
    vec4 _465 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _504 = _502.x;
    float _505 = _502.y;
    float _506 = _502.z;
    float _515 = ((_485.z - _506) * _427) + _506;
    float _518 = ((((_485.x - _504) * _427) + _504) * 2.0) + (-1.0);
    float _520 = ((((_485.y - _505) * _427) + _505) * 2.0) + (-1.0);
    float _521 = dot(vec2(_518, _520), vec2(_518, _520));
    float _3887 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = sqrt(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _569 = _567.x;
    float _570 = 1.0 - _569;
    float _576 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _579 = ((isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : min(_576, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _588 = (_579 - ((((((_569 - _570) * cbMtdParam._m0[24u].w) + _570) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _579))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3908 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _596 = (_589 * ((_465.x * cbMtdParam._m0[18u].x) - _440)) + _440;
    float _597 = (_589 * ((_465.y * cbMtdParam._m0[18u].y) - _443)) + _443;
    float _598 = (_589 * ((_465.z * cbMtdParam._m0[18u].z) - _446)) + _446;
    vec4 _610 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _612 = _610.x;
    float _613 = 1.0 - _612;
    float _640 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_612 - _613) * cbMtdParam._m0[24u].y) + _613) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3919 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _649 = ((((cbMtdParam._m0[10u].x - _596) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _641) + _596;
    float _650 = ((((cbMtdParam._m0[10u].y - _597) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _641) + _597;
    float _651 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _598)) * _641) + _598;
    float _655 = (cbMtdParam._m0[19u].w * (_542.z - _515)) + _515;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _676 = (_669.x * 2.0) + (-1.0);
    float _677 = (_669.y * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _3930 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _686 = (_589 * (_669.z - _655)) + _655;
    float _689 = ((cbMtdParam._m0[23u].y - _686) * _641) + _686;
    vec4 _708 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _714 = (_708.x * 2.0) + (-1.0);
    float _715 = (_708.y * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _3941 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _724 = (((_542.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _518;
    float _725 = (((_542.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _520;
    float _737 = (((_676 - _724) + (cbMtdParam._m0[21u].x * _724)) * _589) + _724;
    float _738 = (((_677 - _725) + (cbMtdParam._m0[21u].x * _725)) * _589) + _725;
    float _739 = (_589 * (sqrt(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) - _526)) + _526;
    float _750 = (((_714 - _737) + (_737 * cbMtdParam._m0[22u].z)) * _641) + _737;
    float _751 = (((_715 - _738) + (_738 * cbMtdParam._m0[22u].z)) * _641) + _738;
    float _752 = ((sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) - _739) * _641) + _739;
    float _754 = cbMtdParam._m0[22u].x + _542.w;
    float _757 = fma(_752, _240 * NORMAL.x, fma(_751, _247 * TANGENT.x, (_233 * _225) * _750));
    float _760 = fma(_752, _240 * NORMAL.y, fma(_751, _247 * TANGENT.y, (_233 * _226) * _750));
    float _763 = fma(_752, _240 * NORMAL.z, fma(_751, _247 * TANGENT.z, (_233 * _227) * _750));
    float _767 = inversesqrt(dot(vec3(_757, _760, _763), vec3(_757, _760, _763)));
    float _768 = _767 * _757;
    float _769 = _767 * _760;
    float _770 = _767 * _763;
    float _3952 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _771 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _3974 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3985 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _3996 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _839 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _829);
    float _840 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _829);
    float _841 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _829);
    float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
    float _846 = _839 * _845;
    float _847 = _840 * _845;
    float _848 = _841 * _845;
    float _854 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _855 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_770, cbSceneParam._m0[5u].z, fma(_769, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _768));
    float _876 = fma(_770, cbSceneParam._m0[6u].z, fma(_769, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _768));
    float _879 = fma(_770, cbSceneParam._m0[7u].z, fma(_769, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _768));
    uint _893 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_893].z;
    float _4007 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _854, cbSceneParam._m0[86u].y * _855));
    float _917 = ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * TEXCOORD_5.w) * _913.x;
    float _918 = dot(vec3(_768, _769, _770), vec3(_846, _847, _848));
    float _921 = _918 * 2.0;
    float _925 = (_921 * _768) - _846;
    float _926 = (_921 * _769) - _847;
    float _927 = (_921 * _770) - _848;
    float _931 = abs(dot(vec3(_846, _847, _848), vec3(_768, _769, _770)));
    float _4040 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _933 = sqrt(_771);
    float _946 = exp2((_933 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_933 * 3.0));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1287;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1012 = fma(_986, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978));
        float _1016 = fma(_986, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978));
        float _1020 = fma(_986, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978));
        float _1045 = _978 + _768;
        float _1046 = _982 + _769;
        float _1047 = _986 + _770;
        float _1057 = fma(_1047, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045)) - _1012;
        float _1058 = fma(_1047, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045)) - _1016;
        float _1059 = fma(_1047, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045)) - _1020;
        float _1063 = inversesqrt(dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059)));
        float _1076 = ((_1063 * _1057) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1012 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1063 * _1058) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1016 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1063 * _1059) / cbModelParam._m0[34u].z) + ((((((_1020 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        float _1115 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1081.x + (-0.5));
        float _1117 = _1115 * (_1081.y + (-0.5));
        float _1118 = _1115 * (_1081.z + (-0.5));
        float _1125 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1088.x + (-0.5));
        float _1127 = _1125 * (_1088.y + (-0.5));
        float _1128 = _1125 * (_1088.z + (-0.5));
        float _1135 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1095.x + (-0.5));
        float _1137 = _1135 * (_1095.y + (-0.5));
        float _1138 = _1135 * (_1095.z + (-0.5));
        float _1145 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1102.x + (-0.5));
        float _1147 = _1145 * (_1102.y + (-0.5));
        float _1148 = _1145 * (_1102.z + (-0.5));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1116 * 0.5;
        float _1153 = _1126 * 0.5;
        float _1154 = _1136 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1169 = (dot(vec3(_768, _769, _770), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1179 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _4088 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1181 + 1.0))) + _1186) * _1149;
        float _1196 = _1117 * 0.5;
        float _1197 = _1127 * 0.5;
        float _1198 = _1137 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_768, _769, _770), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4121 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1223 + 1.0))) + _1228) * _1150;
        float _1238 = _1118 * 0.5;
        float _1239 = _1128 * 0.5;
        float _1240 = _1138 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_768, _769, _770), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4154 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1265 + 1.0))) + _1270) * _1151;
        _1287 = _1118;
        _1289 = _1117;
        _1290 = _1116;
        _1291 = _1128;
        _1292 = _1127;
        _1293 = _1126;
        _1294 = _1138;
        _1295 = _1137;
        _1296 = _1136;
        _1297 = _1151;
        _1298 = _1150;
        _1299 = _1149;
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _1288;
        _1289 = _1288;
        _1290 = _1288;
        _1291 = _1288;
        _1292 = _1288;
        _1293 = _1288;
        _1294 = _1288;
        _1295 = _1288;
        _1296 = _1288;
        _1297 = _1288;
        _1298 = _1288;
        _1299 = _1288;
        _1300 = 0.0;
        _1301 = 0.0;
        _1302 = 0.0;
    }
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1327 = fma(_986, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978));
        float _1331 = fma(_986, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978));
        float _1335 = fma(_986, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978));
        float _1358 = _978 + _768;
        float _1359 = _982 + _769;
        float _1360 = _986 + _770;
        float _1370 = fma(_1360, cbModelParam._m0[30u].z, fma(_1359, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1358)) - _1327;
        float _1371 = fma(_1360, cbModelParam._m0[31u].z, fma(_1359, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1358)) - _1331;
        float _1372 = fma(_1360, cbModelParam._m0[32u].z, fma(_1359, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1358)) - _1335;
        float _1376 = inversesqrt(dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372)));
        float _1389 = ((_1376 * _1370) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1327 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1376 * _1371) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1331 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1376 * _1372) / cbModelParam._m0[35u].z) + ((((((_1335 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        float _1426 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1393.x + (-0.5));
        float _1428 = _1426 * (_1393.y + (-0.5));
        float _1429 = _1426 * (_1393.z + (-0.5));
        float _1436 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1400.x + (-0.5));
        float _1438 = _1436 * (_1400.y + (-0.5));
        float _1439 = _1436 * (_1400.z + (-0.5));
        float _1446 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1407.x + (-0.5));
        float _1448 = _1446 * (_1407.y + (-0.5));
        float _1449 = _1446 * (_1407.z + (-0.5));
        float _1456 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1414.x + (-0.5));
        float _1458 = _1456 * (_1414.y + (-0.5));
        float _1459 = _1456 * (_1414.z + (-0.5));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = _1427 * 0.5;
        float _1464 = _1437 * 0.5;
        float _1465 = _1447 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_768, _769, _770), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4217 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1490 + 1.0))) + _1495) * _1460;
        float _1505 = _1428 * 0.5;
        float _1506 = _1438 * 0.5;
        float _1507 = _1448 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_768, _769, _770), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4250 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1532 + 1.0))) + _1537) * _1461;
        float _1547 = _1429 * 0.5;
        float _1548 = _1439 * 0.5;
        float _1549 = _1449 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_768, _769, _770), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4283 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1574 + 1.0))) + _1579) * _1462;
        _1596 = _1429;
        _1597 = _1428;
        _1598 = _1427;
        _1599 = _1439;
        _1600 = _1438;
        _1601 = _1437;
        _1602 = _1449;
        _1603 = _1448;
        _1604 = _1447;
        _1605 = _1462;
        _1606 = _1461;
        _1607 = _1460;
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
    }
    else
    {
        _1596 = _1288;
        _1597 = _1288;
        _1598 = _1288;
        _1599 = _1288;
        _1600 = _1288;
        _1601 = _1288;
        _1602 = _1288;
        _1603 = _1288;
        _1604 = _1288;
        _1605 = _1288;
        _1606 = _1288;
        _1607 = _1288;
        _1608 = 0.0;
        _1609 = 0.0;
        _1610 = 0.0;
    }
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1300)) + _1300;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1301)) + _1301;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1302)) + _1302;
    float _1643 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1621, cbSceneParam._m0[89u].y, _1620 * cbSceneParam._m0[89u].x));
    float _1646 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1621, cbSceneParam._m0[90u].y, _1620 * cbSceneParam._m0[90u].x));
    float _1649 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1621, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1620));
    float _1664 = _925 * 0.5;
    float _1665 = _926 * 0.5;
    float _1666 = _927 * 0.5;
    float _1667 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1670 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1673 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1707;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1680 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1287, _1291, _1294, _1297));
        float _1684 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1688 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1290, _1293, _1296, _1299));
        float _1695 = dot(vec4(cbModelParam._m0[39u]), vec4(_1664, _1665, _1666, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1695) ? 0.0 : (isnan(0.0) ? _1695 : max(0.0, _1695))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1718;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1709 = dot(vec4(cbModelParam._m0[40u]), vec4(_1664, _1665, _1666, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1722 = (_1718 * cbModelParam._m0[1u].x) + (_1707 * (1.0 - cbModelParam._m0[1u].x));
    float _1732 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _771);
    float _1733 = isnan(_1732) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1732 : min(cbModelParam._m0[25u].z, _1732));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1780 = fma(_986, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978)) + cbModelParam._m0[13u].w;
        float _1784 = fma(_986, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978)) + cbModelParam._m0[14u].w;
        float _1788 = fma(_986, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978)) + cbModelParam._m0[15u].w;
        float _1791 = fma(_927, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925));
        float _1794 = fma(_927, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925));
        float _1797 = fma(_927, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925));
        float _1825;
        if (_1791 > 0.0)
        {
            _1825 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1825 = frontier_phi_14_12_ladder;
        }
        float _1994;
        if (_1794 > 0.0)
        {
            _1994 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1994 = frontier_phi_23_19_ladder;
        }
        float _2289;
        if (_1797 > 0.0)
        {
            _2289 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2289 = frontier_phi_35_30_ladder;
        }
        float _2291 = isnan(_1994) ? _1825 : (isnan(_1825) ? _1994 : min(_1825, _1994));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1791) + _1780;
        float _2297 = (_2292 * _1794) + _1784;
        float _2298 = (_2292 * _1797) + _1788;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2299;
        float _2303 = _2299 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 > _2303) || ((_2297 < _2301) || ((_2296 < _2301) || (_2296 > _2303))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2298, cbModelParam._m0[9u].z, fma(_2297, cbModelParam._m0[9u].y, _2296 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2298, cbModelParam._m0[10u].z, fma(_2297, cbModelParam._m0[10u].y, _2296 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2298, cbModelParam._m0[11u].z, fma(_2297, cbModelParam._m0[11u].y, _2296 * cbModelParam._m0[11u].x))), _1733);
            frontier_phi_13_35_ladder = _2443.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2443.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2443.x * cbModelParam._m0[1u].y;
        }
        _1813 = frontier_phi_13_35_ladder_2;
        _1815 = frontier_phi_13_35_ladder_1;
        _1817 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_925, _926, _927), _1733);
        _1813 = _1801.x * cbModelParam._m0[1u].y;
        _1815 = _1801.y * cbModelParam._m0[1u].y;
        _1817 = _1801.z * cbModelParam._m0[1u].y;
    }
    float _1821 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _771);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1821 : min(cbModelParam._m0[25u].w, _1821));
    float _1911;
    float _1913;
    float _1915;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1875 = fma(_986, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978)) + cbModelParam._m0[21u].w;
        float _1879 = fma(_986, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978)) + cbModelParam._m0[22u].w;
        float _1883 = fma(_986, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978)) + cbModelParam._m0[23u].w;
        float _1886 = fma(_927, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925));
        float _1889 = fma(_927, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925));
        float _1892 = fma(_927, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925));
        float _1999;
        if (_1886 > 0.0)
        {
            _1999 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1999 = frontier_phi_25_21_ladder;
        }
        float _2316;
        if (_1889 > 0.0)
        {
            _2316 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2316 = frontier_phi_37_32_ladder;
        }
        float _2643;
        if (_1892 > 0.0)
        {
            _2643 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2643 = frontier_phi_47_44_ladder;
        }
        float _2645 = isnan(_2316) ? _1999 : (isnan(_1999) ? _2316 : min(_1999, _2316));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _1886) + _1875;
        float _2651 = (_2646 * _1889) + _1879;
        float _2652 = (_2646 * _1892) + _1883;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2654 = (-1.0) - _2653;
        float _2656 = _2653 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2652 > _2656) || ((_2652 < _2654) || ((_2651 > _2656) || ((_2651 < _2654) || ((_2650 < _2654) || (_2650 > _2656))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2770 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2652, cbModelParam._m0[17u].z, fma(_2651, cbModelParam._m0[17u].y, _2650 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2652, cbModelParam._m0[18u].z, fma(_2651, cbModelParam._m0[18u].y, _2650 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2652, cbModelParam._m0[19u].z, fma(_2651, cbModelParam._m0[19u].y, _2650 * cbModelParam._m0[19u].x))), _1822);
            frontier_phi_22_47_ladder = _2770.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2770.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2770.x * cbModelParam._m0[1u].z;
        }
        _1911 = frontier_phi_22_47_ladder_2;
        _1913 = frontier_phi_22_47_ladder_1;
        _1915 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_925, _926, _927), _1822);
        _1911 = _1895.x * cbModelParam._m0[1u].z;
        _1913 = _1895.y * cbModelParam._m0[1u].z;
        _1915 = _1895.z * cbModelParam._m0[1u].z;
    }
    float _1927 = ((((1.0 - _946) * ((_933 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_946 * _933)) * _917;
    float _1928 = _1927 * ((cbModelParam._m0[1u].w * (_1911 - _1813)) + _1813);
    float _1929 = _1927 * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1930 = _1927 * ((cbModelParam._m0[1u].w * (_1915 - _1817)) + _1817);
    float _1933 = fma(_1930, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1928 * cbSceneParam._m0[89u].x));
    float _1936 = fma(_1930, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1928 * cbSceneParam._m0[90u].x));
    float _1939 = fma(_1930, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, _1928 * cbSceneParam._m0[91u].x));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1986 = _1973 / _1985;
    float _1987 = _1977 / _1985;
    float _1988 = _1981 / _1985;
    float _2135;
    float _2136;
    float _2137;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2015 = ((uint(_1988 > cbSceneParam._m0[59u].y) + uint(_1988 > cbSceneParam._m0[59u].x)) + uint(_1988 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2016 = _2015 + 43u;
        uint _2024 = _2015 + 44u;
        uint _2032 = _2015 + 45u;
        uint _2040 = _2015 + 46u;
        float _2051 = fma(_1985, cbSceneParam._m0[_2016].w, fma(_1981, cbSceneParam._m0[_2016].z, fma(_1977, cbSceneParam._m0[_2016].y, _1973 * cbSceneParam._m0[_2016].x)));
        float _2055 = fma(_1985, cbSceneParam._m0[_2024].w, fma(_1981, cbSceneParam._m0[_2024].z, fma(_1977, cbSceneParam._m0[_2024].y, _1973 * cbSceneParam._m0[_2024].x)));
        float _2063 = fma(_1985, cbSceneParam._m0[_2040].w, fma(_1981, cbSceneParam._m0[_2040].z, fma(_1977, cbSceneParam._m0[_2040].y, _1973 * cbSceneParam._m0[_2040].x)));
        float _2068 = cbSceneParam._m0[33u].z * _2063;
        float _2070 = cbSceneParam._m0[33u].w * _2063;
        float _2073 = fma(_1985, cbSceneParam._m0[_2032].w, fma(_1981, cbSceneParam._m0[_2032].z, fma(_1977, cbSceneParam._m0[_2032].y, _1973 * cbSceneParam._m0[_2032].x))) / _2063;
        float _2121 = (cbSceneParam._m0[33u].x - sqrt(((_1987 * _1987) + (_1986 * _1986)) + (_1988 * _1988))) * cbSceneParam._m0[33u].y;
        float _4409 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2128 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 + _2051) / _2063, (_2070 + _2055) / _2063), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2070 + _2051) / _2063, (_2055 - _2068) / _2063), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 - _2068) / _2063, (_2055 - _2070) / _2063), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 - _2070) / _2063, (_2068 + _2055) / _2063), _2073), 0.0)).x), vec4(0.25)));
        _2135 = 1.0 - (_2128 * cbSceneParam._m0[34u].x);
        _2136 = 1.0 - (_2128 * cbSceneParam._m0[34u].y);
        _2137 = 1.0 - (_2128 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2135 = 1.0;
        _2136 = 1.0;
        _2137 = 1.0;
    }
    float _2201;
    float _2203;
    float _2205;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2189 = fma(_1985, cbSceneParam._m0[63u].w, fma(_1981, cbSceneParam._m0[63u].z, fma(_1977, cbSceneParam._m0[63u].y, _1973 * cbSceneParam._m0[63u].x)));
        float _2190 = fma(_1985, cbSceneParam._m0[60u].w, fma(_1981, cbSceneParam._m0[60u].z, fma(_1977, cbSceneParam._m0[60u].y, _1973 * cbSceneParam._m0[60u].x))) / _2189;
        float _2191 = fma(_1985, cbSceneParam._m0[61u].w, fma(_1981, cbSceneParam._m0[61u].z, fma(_1977, cbSceneParam._m0[61u].y, _1973 * cbSceneParam._m0[61u].x))) / _2189;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2190 >= cbSceneParam._m0[64u].x) && (_2191 >= cbSceneParam._m0[64u].y)) && (_2190 <= cbSceneParam._m0[64u].z)) && (_2191 <= cbSceneParam._m0[64u].w))
        {
            float _2329 = fma(_1985, cbSceneParam._m0[62u].w, fma(_1981, cbSceneParam._m0[62u].z, fma(_1977, cbSceneParam._m0[62u].y, _1973 * cbSceneParam._m0[62u].x))) / _2189;
            float _2333 = isnan(cbSceneParam._m0[41u].w) ? _2329 : (isnan(_2329) ? cbSceneParam._m0[41u].w : max(_2329, cbSceneParam._m0[41u].w));
            float _2376 = (cbSceneParam._m0[33u].x - sqrt(((_1987 * _1987) + (_1986 * _1986)) + (_1988 * _1988))) * cbSceneParam._m0[33u].y;
            float _4425 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
            float _2383 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2190, cbSceneParam._m0[33u].w + _2191), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2190, _2191 - cbSceneParam._m0[33u].z), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2190 - cbSceneParam._m0[33u].z, _2191 - cbSceneParam._m0[33u].w), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2190 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2191), _2333), 0.0)).x), vec4(0.25)));
            float _2387 = 1.0 - (_2383 * cbSceneParam._m0[34u].x);
            float _2388 = 1.0 - (_2383 * cbSceneParam._m0[34u].y);
            float _2389 = 1.0 - (_2383 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2389) ? _2137 : (isnan(_2137) ? _2389 : min(_2137, _2389));
            frontier_phi_34_33_ladder_1 = isnan(_2388) ? _2136 : (isnan(_2136) ? _2388 : min(_2136, _2388));
            frontier_phi_34_33_ladder_2 = isnan(_2387) ? _2135 : (isnan(_2135) ? _2387 : min(_2135, _2387));
        }
        else
        {
            frontier_phi_34_33_ladder = _2137;
            frontier_phi_34_33_ladder_1 = _2136;
            frontier_phi_34_33_ladder_2 = _2135;
        }
        _2201 = frontier_phi_34_33_ladder_2;
        _2203 = frontier_phi_34_33_ladder_1;
        _2205 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2201 = _2135;
        _2203 = _2136;
        _2205 = _2137;
    }
    uvec4 _2210 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2212 = _2210.x * 14u;
    uint _2213 = _2212 + 13u;
    float _2220 = _917 + (-1.0);
    float _2225 = (cbLight._m0[_2213].x * _2220) + 1.0;
    float _2226 = (cbLight._m0[_2213].y * _2220) + 1.0;
    float _2227 = (cbLight._m0[_2213].z * _2220) + 1.0;
    float _2228 = (cbLight._m0[_2213].w * _2220) + 1.0;
    uint _2229 = _2212 + 5u;
    float _2235 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2239 = _2212 + 4u;
    float _2248 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2252 = _2212 | 1u;
    float _2263 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_768, _769, _770));
    float _2266 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_768, _769, _770));
    float _4461 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _4472 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2271 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * 0.3183098733425140380859375;
    float _2273 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * 0.3183098733425140380859375;
    float _2280 = ((cbLight._m0[_2229].x * _2235) * _2273) + (((cbLight._m0[_2239].x * _2201) * _2248) * _2271);
    float _2281 = ((_2235 * cbLight._m0[_2229].y) * _2273) + (((cbLight._m0[_2239].y * _2203) * _2248) * _2271);
    float _2282 = ((_2235 * cbLight._m0[_2229].z) * _2273) + (((cbLight._m0[_2239].z * _2205) * _2248) * _2271);
    uvec4 _2286 = floatBitsToUint(cbLight._m0[_2212 + 12u]);
    bool _2288 = _2286.x == 0u;
    float _2390;
    float _2392;
    float _2394;
    if (_2288)
    {
        _2390 = _2280;
        _2392 = _2281;
        _2394 = _2282;
    }
    else
    {
        uint _2398 = _2212 + 6u;
        float _2414 = (dot(vec3(cbLight._m0[_2212 + 2u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4483 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2417 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2390 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2280;
        _2392 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2281;
        _2394 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2282;
    }
    bool _2397 = _2286.y == 0u;
    float _2452;
    float _2454;
    float _2456;
    if (_2397)
    {
        _2452 = _2390;
        _2454 = _2392;
        _2456 = _2394;
    }
    else
    {
        uint _2614 = _2212 + 7u;
        float _2630 = (dot(vec3(cbLight._m0[_2212 + 3u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2631 = _2630 * _2630;
        float _4499 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2632 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2633 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2452 = (((cbLight._m0[_2614].x * 0.3183098733425140380859375) * _2632) * _2633) + _2390;
        _2454 = (((cbLight._m0[_2614].y * 0.3183098733425140380859375) * _2632) * _2633) + _2392;
        _2456 = (((cbLight._m0[_2614].z * 0.3183098733425140380859375) * _2632) * _2633) + _2394;
    }
    uint _2459 = _2212 + 8u;
    float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _771) * 0.949999988079071044921875);
    float _2473 = _2472 * _2472;
    float _2474 = cbLight._m0[_2212].x + _846;
    float _2475 = cbLight._m0[_2212].y + _847;
    float _2476 = cbLight._m0[_2212].z + _848;
    float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
    float _2481 = _2480 * _2474;
    float _2482 = _2480 * _2475;
    float _2483 = _2480 * _2476;
    float _2484 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2212].xyz));
    float _4515 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _4526 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2488 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2489 = dot(vec3(_768, _769, _770), vec3(_2481, _2482, _2483));
    float _4537 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2493 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2481, _2482, _2483));
    float _4548 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2497 = _2473 * _2473;
    float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
    float _2512 = (exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2513 = 1.0 - _2473;
    float _2524 = (0.5 / (((_2488 * ((_2487 * _2513) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2513) + _2473) * _2487))) * _2487;
    float _4559 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2526 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
    uint _2540 = _2212 + 9u;
    float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _771) * 0.949999988079071044921875);
    float _2552 = _2551 * _2551;
    float _2553 = cbLight._m0[_2252].x + _846;
    float _2554 = cbLight._m0[_2252].y + _847;
    float _2555 = cbLight._m0[_2252].z + _848;
    float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
    float _2560 = _2559 * _2553;
    float _2561 = _2559 * _2554;
    float _2562 = _2559 * _2555;
    float _2563 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2252].xyz));
    float _4570 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2567 = dot(vec3(_768, _769, _770), vec3(_2560, _2561, _2562));
    float _4581 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2571 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2560, _2561, _2562));
    float _4592 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2575 = _2552 * _2552;
    float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
    float _2588 = (exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2589 = 1.0 - _2552;
    float _2599 = (0.5 / (((_2488 * ((_2566 * _2589) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2589) + _2552) * _2566))) * _2566;
    float _4603 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
    float _2611 = (((_2588 * cbLight._m0[_2540].x) * _2601) * _2235) + ((((cbLight._m0[_2459].x * _2201) * _2512) * _2526) * _2248);
    float _2612 = (((_2588 * cbLight._m0[_2540].y) * _2601) * _2235) + ((((cbLight._m0[_2459].y * _2203) * _2512) * _2526) * _2248);
    float _2613 = (((_2588 * cbLight._m0[_2540].z) * _2601) * _2235) + ((((cbLight._m0[_2459].z * _2205) * _2512) * _2526) * _2248);
    float _2669;
    float _2671;
    float _2673;
    if (_2288)
    {
        _2669 = _2611;
        _2671 = _2612;
        _2673 = _2613;
    }
    else
    {
        uint _2675 = _2212 + 2u;
        uint _2679 = _2212 + 10u;
        float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2675].w)) * _771) * 0.949999988079071044921875);
        float _2694 = _2693 * _2693;
        float _2695 = cbLight._m0[_2675].x + _846;
        float _2696 = cbLight._m0[_2675].y + _847;
        float _2697 = cbLight._m0[_2675].z + _848;
        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
        float _2702 = _2701 * _2695;
        float _2703 = _2701 * _2696;
        float _2704 = _2701 * _2697;
        float _2705 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2675].xyz));
        float _4614 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2709 = dot(vec3(_768, _769, _770), vec3(_2702, _2703, _2704));
        float _4625 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2713 = dot(vec3(cbLight._m0[_2675].xyz), vec3(_2702, _2703, _2704));
        float _4636 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2717 = _2694 * _2694;
        float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
        float _2730 = (exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2731 = 1.0 - _2694;
        float _2741 = (0.5 / (((_2488 * ((_2708 * _2731) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2731) + _2694) * _2708))) * _2708;
        float _4647 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2743 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
        float _2744 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2669 = (((_2730 * cbLight._m0[_2679].x) * _2743) * _2744) + _2611;
        _2671 = (((_2730 * cbLight._m0[_2679].y) * _2743) * _2744) + _2612;
        _2673 = (((_2730 * cbLight._m0[_2679].z) * _2743) * _2744) + _2613;
    }
    float _2775;
    float _2777;
    float _2779;
    if (_2397)
    {
        _2775 = _2669;
        _2777 = _2671;
        _2779 = _2673;
    }
    else
    {
        uint _2786 = _2212 + 3u;
        uint _2790 = _2212 + 11u;
        float _2804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2786].w)) * _771) * 0.949999988079071044921875);
        float _2805 = _2804 * _2804;
        float _2806 = cbLight._m0[_2786].x + _846;
        float _2807 = cbLight._m0[_2786].y + _847;
        float _2808 = cbLight._m0[_2786].z + _848;
        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
        float _2813 = _2812 * _2806;
        float _2814 = _2812 * _2807;
        float _2815 = _2812 * _2808;
        float _2816 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2786].xyz));
        float _4663 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2820 = dot(vec3(_768, _769, _770), vec3(_2813, _2814, _2815));
        float _4674 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2824 = dot(vec3(cbLight._m0[_2786].xyz), vec3(_2813, _2814, _2815));
        float _4685 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2828 = _2805 * _2805;
        float _2832 = ((_2823 * _2823) * (_2828 + (-1.0))) + 1.0;
        float _2841 = (exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2842 = 1.0 - _2805;
        float _2852 = (0.5 / (((_2488 * ((_2819 * _2842) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2842) + _2805) * _2819))) * _2819;
        float _4696 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2854 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2828 / ((_2832 * _2832) * 3.141590118408203125));
        float _2855 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2775 = (((_2841 * cbLight._m0[_2790].x) * _2854) * _2855) + _2669;
        _2777 = (((_2841 * cbLight._m0[_2790].y) * _2854) * _2855) + _2671;
        _2779 = (((_2841 * cbLight._m0[_2790].z) * _2854) * _2855) + _2673;
    }
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    if (_2210.y == 0u)
    {
        uvec4 _2876 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2877 = _2876.x;
        uint _2888 = uint((float(_2876.y) * floor(float(uint(cbSceneParam._m0[85u].y * _855) / _2877))) + floor(float(uint(cbSceneParam._m0[85u].x * _854) / _2877)));
        float _2898 = (log2(_1988 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2899 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        uint _2902 = uint(isnan(14.0) ? _2899 : (isnan(_2899) ? 14.0 : min(_2899, 14.0)));
        uvec4 _2907 = texelFetch(g_lightClusterGridBuffer, int(((_2902 << 2u) + (_2888 << 6u)) >> 2u));
        uint _2908 = _2907.x;
        uint _2909 = _2876.z;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((((1u << ((_2909 >> 4u) & 15u)) + 4294967295u) & _2908) == 0u) || ((_2909 & 240u) == 0u))
        {
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
        }
        else
        {
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            uint _3139 = 0u;
            uint _3148;
            bool _3149;
            for (;;)
            {
                _3148 = texelFetch(g_lightClassification, int((((_2902 << 5u) + (_2888 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                _3149 = _3148 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3149)
                {
                    frontier_phi_66_pred = _3138;
                    frontier_phi_66_pred_1 = _3137;
                    frontier_phi_66_pred_2 = _3136;
                    frontier_phi_66_pred_3 = _3135;
                    frontier_phi_66_pred_4 = _3134;
                    frontier_phi_66_pred_5 = _3133;
                }
                else
                {
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    uint _3263;
                    _3257 = _3133;
                    _3258 = _3134;
                    _3259 = _3135;
                    _3260 = _3136;
                    _3261 = _3137;
                    _3262 = _3138;
                    _3263 = _3148;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    for (;;)
                    {
                        uint _3267 = uint(findLSB(_3263)) + (_3139 << 5u);
                        uint _3264 = (_3263 + 4294967295u) & _3263;
                        uint _3269 = _3267 * 48u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3269)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 3u)).x));
                        uint _3289 = (_3267 * 48u) + 4u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3308 = (_3267 * 48u) + 8u;
                        vec3 _3319 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x));
                        float _3323 = _3283.x - _1986;
                        float _3324 = _3283.y - _1987;
                        float _3325 = _3283.z - _1988;
                        float _3326 = dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325));
                        float _3329 = inversesqrt(_3326);
                        float _3330 = _3329 * _3323;
                        float _3331 = _3329 * _3324;
                        float _3332 = _3329 * _3325;
                        float _3333 = dot(vec3(_873, _876, _879), vec3(_3330, _3331, _3332));
                        float _3338 = 1.0 - (_3326 * _3283.w);
                        float _4722 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3340 = sqrt(_3326) * _3302.w;
                        float _3343 = 1.39999997615814208984375 / (_3340 + 1.39999997615814208984375);
                        float _3344 = _3343 * _3343;
                        float _3347 = ((1.0 - _3344) * _3333) + _3344;
                        float _3350 = _3340 * _3340;
                        float _3354 = ((isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))) * _3339) / ((_3350 * 0.699999988079071044921875) + 1.0);
                        float _3358 = (-0.0) - _1986;
                        float _3359 = (-0.0) - _1987;
                        float _3360 = (-0.0) - _1988;
                        float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                        float _3365 = _3364 * _3358;
                        float _3366 = _3364 * _3359;
                        float _3367 = _3364 * _3360;
                        float _3374 = exp2(log2(1.0 / ((_3350 * 3.5) + 5.0)) * 0.25);
                        float _3375 = 1.0 - _933;
                        float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                        float _3383 = _3382 * _3382;
                        float _3384 = _3383 * _3383;
                        float _3385 = _3365 + _3330;
                        float _3386 = _3366 + _3331;
                        float _3387 = _3367 + _3332;
                        float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                        float _3395 = dot(vec3(_873, _876, _879), vec3(_3365, _3366, _3367));
                        float _4738 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3399 = dot(vec3(_873, _876, _879), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                        float _4749 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                        float _3407 = _3343 * _3383;
                        float _3408 = _3407 * _3407;
                        float _3411 = ((1.0 - _3408) * _3333) + _3408;
                        float _4760 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3412 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3413 = 1.0 - _3383;
                        float _3423 = (0.5 / (((_3412 * ((_3398 * _3413) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3412 * _3413) + _3383) * _3398))) * _3412;
                        float _4771 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3434 = (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3406 * _3406) * ((_3350 * 2.1991131305694580078125) + 3.141590118408203125))) * _3339;
                        _3192 = (_3354 * _3302.x) + _3260;
                        _3193 = (_3354 * _3302.y) + _3261;
                        _3194 = (_3354 * _3302.z) + _3262;
                        _3189 = (_3434 * _3319.x) + _3257;
                        _3190 = (_3434 * _3319.y) + _3258;
                        _3191 = (_3434 * _3319.z) + _3259;
                        if (_3264 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3257 = _3189;
                            _3258 = _3190;
                            _3259 = _3191;
                            _3260 = _3192;
                            _3261 = _3193;
                            _3262 = _3194;
                            _3263 = _3264;
                        }
                    }
                    frontier_phi_66_pred = _3194;
                    frontier_phi_66_pred_1 = _3193;
                    frontier_phi_66_pred_2 = _3192;
                    frontier_phi_66_pred_3 = _3191;
                    frontier_phi_66_pred_4 = _3190;
                    frontier_phi_66_pred_5 = _3189;
                }
                _2999 = frontier_phi_66_pred;
                _2997 = frontier_phi_66_pred_1;
                _2995 = frontier_phi_66_pred_2;
                _2993 = frontier_phi_66_pred_3;
                _2991 = frontier_phi_66_pred_4;
                _2989 = frontier_phi_66_pred_5;
                uint _3140 = _3139 + 1u;
                if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3133 = _2989;
                    _3134 = _2991;
                    _3135 = _2993;
                    _3136 = _2995;
                    _3137 = _2997;
                    _3138 = _2999;
                    _3139 = _3140;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
        }
        uvec4 _3002 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3003 = _3002.z;
        uint _3005 = (_3003 >> 8u) & 15u;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        if (((4294967295u << _3005) & _2908) == 0u)
        {
            _3101 = _2988;
            _3103 = _2990;
            _3105 = _2992;
            _3107 = _2994;
            _3109 = _2996;
            _3111 = _2998;
        }
        else
        {
            float _3126 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
            float _3127 = _3126 * _1986;
            float _3128 = _3126 * _1987;
            float _3129 = _3126 * _1988;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3005 < ((_3003 >> 12u) & 15u))
            {
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3240 = _2988;
                float _3241 = _2990;
                float _3242 = _2992;
                float _3243 = _2994;
                float _3244 = _2996;
                float _3245 = _2998;
                uint _3246 = _3005;
                uint _3255;
                bool _3256;
                for (;;)
                {
                    _3255 = texelFetch(g_lightClassification, int((((_2902 << 5u) + (_2888 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                    _3256 = _3255 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3256)
                    {
                        frontier_phi_72_pred = _3245;
                        frontier_phi_72_pred_1 = _3244;
                        frontier_phi_72_pred_2 = _3243;
                        frontier_phi_72_pred_3 = _3242;
                        frontier_phi_72_pred_4 = _3241;
                        frontier_phi_72_pred_5 = _3240;
                    }
                    else
                    {
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3452 = _3240;
                        float _3453 = _3241;
                        float _3454 = _3242;
                        float _3455 = _3243;
                        float _3456 = _3244;
                        float _3457 = _3245;
                        uint _3458 = _3255;
                        uint _3459;
                        vec4 _3484;
                        float _3485;
                        vec4 _3500;
                        vec3 _3512;
                        vec4 _3527;
                        vec4 _3543;
                        float _3589;
                        bool _3590;
                        for (;;)
                        {
                            uint _3469 = ((_3246 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3458));
                            _3459 = (_3458 + 4294967295u) & _3458;
                            uint _3471 = _3469 * 40u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            _3485 = _3484.w;
                            uint _3487 = (_3469 * 40u) + 4u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3502 = (_3469 * 40u) + 8u;
                            _3512 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x));
                            uint _3514 = (_3469 * 40u) + 16u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3530 = (_3469 * 40u) + 20u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3469 * 40u) + 24u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3564 = (_3469 * 40u) + 28u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3589 = fma(_1988, _3577.z, fma(_1987, _3577.y, _3577.x * _1986)) + _3577.w;
                            _3590 = !((fma(_1988, _3558.z, fma(_1987, _3558.y, _3558.x * _1986)) + _3558.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3590)
                            {
                                float _3617 = _3484.x - _1986;
                                float _3618 = _3484.y - _1987;
                                float _3619 = _3484.z - _1988;
                                float _3620 = dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619));
                                float _3623 = inversesqrt(_3620);
                                float _3624 = _3623 * _3617;
                                float _3625 = _3623 * _3618;
                                float _3626 = _3623 * _3619;
                                float _3630 = 1.0 - (_3620 / (_3485 * _3485));
                                float _4782 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3635 = sqrt(_3620) * _3500.w;
                                float _3637 = 1.39999997615814208984375 / (_3635 + 1.39999997615814208984375);
                                float _3638 = _3637 * _3637;
                                float _3641 = ((1.0 - _3638) * dot(vec3(_3624, _3625, _3626), vec3(_873, _876, _879))) + _3638;
                                float _3644 = _3635 * _3635;
                                float _3648 = (fma(_1988, _3527.z, fma(_1987, _3527.y, _3527.x * _1986)) + _3527.w) / _3589;
                                float _3649 = (fma(_1988, _3543.z, fma(_1987, _3543.y, _3543.x * _1986)) + _3543.w) / _3589;
                                float _3653 = 1.0 - dot(vec2(_3648, _3649), vec2(_3648, _3649));
                                float _4798 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3655 = _3654 * (((isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0))) * _3631) / ((_3644 * 0.699999988079071044921875) + 1.0));
                                float _3667 = exp2(log2(1.0 / ((_3644 * 3.5) + 5.0)) * 0.25);
                                float _3668 = 1.0 - _933;
                                float _3675 = sqrt(1.0 - ((1.0 - (_3668 * _3668)) * (1.0 - (_3667 * _3667))));
                                float _3676 = _3675 * _3675;
                                float _3677 = _3676 * _3676;
                                float _3678 = _3624 - _3127;
                                float _3679 = _3625 - _3128;
                                float _3680 = _3626 - _3129;
                                float _3684 = inversesqrt(dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680)));
                                float _3688 = dot(vec3(_873, _876, _879), vec3((-0.0) - _3127, (-0.0) - _3128, (-0.0) - _3129));
                                float _4809 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3692 = dot(vec3(_873, _876, _879), vec3(_3684 * _3678, _3684 * _3679, _3684 * _3680));
                                float _4820 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3699 = ((_3695 * _3695) * (_3677 + (-1.0))) + 1.0;
                                float _3700 = _3637 * _3676;
                                float _3701 = _3700 * _3700;
                                float _3707 = ((1.0 - _3701) * dot(vec3(_873, _876, _879), vec3(_3624, _3625, _3626))) + _3701;
                                float _4831 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3709 = 1.0 - _3676;
                                float _3719 = (0.5 / (((_3708 * ((_3691 * _3709) + _3676)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3676) * _3691))) * _3708;
                                float _4842 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3729 = (_3654 * _3631) * (((_3677 * 3.1415927410125732421875) * (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) / ((_3699 * _3699) * ((_3644 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3655 * _3500.y;
                                frontier_phi_78_pred_1 = _3655 * _3500.x;
                                frontier_phi_78_pred_2 = _3729 * _3512.z;
                                frontier_phi_78_pred_3 = _3729 * _3512.y;
                                frontier_phi_78_pred_4 = _3729 * _3512.x;
                                frontier_phi_78_pred_5 = _3655 * _3500.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3737 = frontier_phi_78_pred;
                            _3736 = frontier_phi_78_pred_1;
                            _3735 = frontier_phi_78_pred_2;
                            _3734 = frontier_phi_78_pred_3;
                            _3733 = frontier_phi_78_pred_4;
                            _3738 = frontier_phi_78_pred_5;
                            _3442 = _3736 + _3455;
                            _3443 = _3737 + _3456;
                            _3444 = _3738 + _3457;
                            _3439 = _3733 + _3452;
                            _3440 = _3734 + _3453;
                            _3441 = _3735 + _3454;
                            if (_3459 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3459;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3444;
                        frontier_phi_72_pred_1 = _3443;
                        frontier_phi_72_pred_2 = _3442;
                        frontier_phi_72_pred_3 = _3441;
                        frontier_phi_72_pred_4 = _3440;
                        frontier_phi_72_pred_5 = _3439;
                    }
                    _3112 = frontier_phi_72_pred;
                    _3110 = frontier_phi_72_pred_1;
                    _3108 = frontier_phi_72_pred_2;
                    _3106 = frontier_phi_72_pred_3;
                    _3104 = frontier_phi_72_pred_4;
                    _3102 = frontier_phi_72_pred_5;
                    uint _3247 = _3246 + 1u;
                    if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3240 = _3102;
                        _3241 = _3104;
                        _3242 = _3106;
                        _3243 = _3108;
                        _3244 = _3110;
                        _3245 = _3112;
                        _3246 = _3247;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3112;
                frontier_phi_60_61_ladder_1 = _3110;
                frontier_phi_60_61_ladder_2 = _3106;
                frontier_phi_60_61_ladder_3 = _3104;
                frontier_phi_60_61_ladder_4 = _3102;
                frontier_phi_60_61_ladder_5 = _3108;
            }
            else
            {
                frontier_phi_60_61_ladder = _2998;
                frontier_phi_60_61_ladder_1 = _2996;
                frontier_phi_60_61_ladder_2 = _2992;
                frontier_phi_60_61_ladder_3 = _2990;
                frontier_phi_60_61_ladder_4 = _2988;
                frontier_phi_60_61_ladder_5 = _2994;
            }
            _3101 = frontier_phi_60_61_ladder_4;
            _3103 = frontier_phi_60_61_ladder_3;
            _3105 = frontier_phi_60_61_ladder_2;
            _3107 = frontier_phi_60_61_ladder_5;
            _3109 = frontier_phi_60_61_ladder_1;
            _3111 = frontier_phi_60_61_ladder;
        }
        float _3116 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
        _2921 = (_3116 * _3107) + _2452;
        _2923 = (_3116 * _3109) + _2454;
        _2925 = (_3116 * _3111) + _2456;
        _2927 = ((_3101 * 0.039999999105930328369140625) * _3116) + _2775;
        _2929 = ((_3103 * 0.039999999105930328369140625) * _3116) + _2777;
        _2931 = ((_3105 * 0.039999999105930328369140625) * _3116) + _2779;
    }
    else
    {
        _2921 = _2452;
        _2923 = _2454;
        _2925 = _2456;
        _2927 = _2775;
        _2929 = _2777;
        _2931 = _2779;
    }
    float _4858 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4869 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4880 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    uint _2951 = _253 + 6u;
    float _2959 = _854 / cbSceneParam._m0[86u].x;
    float _2960 = _855 / cbSceneParam._m0[86u].y;
    vec4 _2974 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2959, _2960, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2976 = _2974.x;
    float _2977 = _2974.y;
    float _2978 = _2974.z;
    float _2979 = _2974.w;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _3013 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _3014 = _3013 / _789;
        float _3025 = _3014 * _839;
        float _3026 = _840 * _3014;
        float _3027 = (-0.0) - _3026;
        float _3029 = _3014 * _841;
        float _3031 = (cbSceneParam._m0[77u].w * _3027) / _3013;
        float _3032 = _3031 + cbSceneParam._m0[79u].w;
        float _3033 = cbSceneParam._m0[79u].w - _3026;
        float _3039 = sqrt(((_3025 * _3025) + (_3026 * _3026)) + (_3029 * _3029));
        float _3042 = (1.0 - (cbSceneParam._m0[77u].w / _3013)) * _3039;
        float _3047 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3049 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3202;
        if (abs((_3027 - _3031) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3202 = ((((_3032 > 0.0) ? exp2(_3047 * _3032) : (2.0 - exp2(_3049 * _3032))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3042;
        }
        else
        {
            float _3162 = 1.0 / cbSceneParam._m0[80u].x;
            float _3163 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : max(_3032, _3033));
            float _3164 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : min(_3032, _3033));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            _3202 = ((abs(_3039 / _3027) * cbSceneParam._m0[80u].y) * ((((_3173 - _3174) * 2.0) - ((exp2(_3047 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0)))) - exp2(_3047 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))))) * _3162)) - ((exp2(_3049 * _3173) - exp2(_3049 * _3174)) * _3162))) + (_3042 * cbSceneParam._m0[80u].z);
        }
        vec4 _3204 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2959, _2960, 1.0), 0.0);
        float _3213 = exp2((_3202 * (-1.44269502162933349609375)) * (1.0 - _3204.w));
        float _3214 = log2(_3213);
        float _3230 = log2(_2979);
        _3051 = (exp2(_3230 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].x)) * _3204.x) / cbSceneParam._m0[78u].x)) + _2976;
        _3053 = (exp2(_3230 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].y)) * _3204.y) / cbSceneParam._m0[78u].y)) + _2977;
        _3055 = (exp2(_3230 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].z)) * _3204.z) / cbSceneParam._m0[78u].z)) + _2978;
        _3057 = _3213 * _2979;
    }
    else
    {
        _3051 = _2976;
        _3053 = _2977;
        _3055 = _2978;
        _3057 = _2979;
    }
    float _3069 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3070 = _3069 == 3.0;
    float _3071 = log2(_3057);
    float _3078 = exp2(_3071 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2921 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _917))) + ((_2927 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1722)) * cbPerFrame._m0[3u].x));
    float _3079 = exp2(_3071 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2923 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _917))) + ((_2929 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1722)) * cbPerFrame._m0[3u].x));
    float _3080 = exp2(_3071 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2925 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _917))) + ((_2931 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1722)) * cbPerFrame._m0[3u].x));
    float _3089 = (_3069 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3089 * (_3070 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3051)));
    SV_Target.y = _3089 * (_3070 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3053)));
    SV_Target.z = _3089 * (_3070 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3055)));
    SV_Target.w = cbInstanceData._m0[_2951].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2951].w;
}


