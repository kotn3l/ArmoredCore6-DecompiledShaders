#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1267;
float _3626;
float _3627;
float _3628;
float _3629;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _328.x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[24u].z) + _382) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3638 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _407 = (_400 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _408 = (_400 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _409 = (_400 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _426 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _446 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _448 = _446.x;
    float _458 = dot(vec4(_448, _446.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _472 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _328.y) * 2.0) - ((((_448 - _458) * cbMtdParam._m0[24u].z) + _458) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3649 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _480 = (_473 * ((_426.x * cbMtdParam._m0[13u].x) - _407)) + _407;
    float _481 = (_473 * ((_426.y * cbMtdParam._m0[13u].y) - _408)) + _408;
    float _482 = (_473 * ((_426.z * cbMtdParam._m0[13u].z) - _409)) + _409;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _260) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _261) + cbTextureTilingScale._m0[24u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _519 = _517.x;
    float _529 = dot(vec4(_519, _517.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _541 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _328.z) * 2.0) - ((((_519 - _529) * cbMtdParam._m0[24u].z) + _529) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3660 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _549 = (_542 * ((_500.x * cbMtdParam._m0[14u].x) - _480)) + _480;
    float _550 = (_542 * ((_500.y * cbMtdParam._m0[14u].y) - _481)) + _481;
    float _551 = (_542 * ((_500.z * cbMtdParam._m0[14u].z) - _482)) + _482;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _581 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _583 = _581.x;
    float _584 = _581.y;
    float _585 = _581.z;
    float _592 = ((_564.x - _583) * _400) + _583;
    float _593 = ((_564.y - _584) * _400) + _584;
    float _594 = ((_564.z - _585) * _400) + _585;
    vec4 _606 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _617 = ((_606.x - _592) * _473) + _592;
    float _618 = ((_606.y - _593) * _473) + _593;
    float _619 = ((_606.z - _594) * _473) + _594;
    vec4 _631 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _260) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _261) + cbTextureTilingScale._m0[23u].w));
    float _644 = ((_631.z - _619) * _542) + _619;
    float _647 = ((((_631.x - _617) * _542) + _617) * 2.0) + (-1.0);
    float _649 = ((((_631.y - _618) * _542) + _618) * 2.0) + (-1.0);
    float _650 = dot(vec2(_647, _649), vec2(_647, _649));
    float _3671 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _655 = sqrt(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _681 = (((_669.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _647;
    float _682 = (((_669.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _649;
    float _686 = (cbMtdParam._m0[19u].w * (_669.z - _644)) + _644;
    float _690 = cbMtdParam._m0[22u].x + _669.w;
    float _693 = fma(_655, _227 * NORMAL.x, fma(_682, _234 * TANGENT.x, (_220 * _212) * _681));
    float _696 = fma(_655, _227 * NORMAL.y, fma(_682, _234 * TANGENT.y, (_220 * _213) * _681));
    float _699 = fma(_655, _227 * NORMAL.z, fma(_682, _234 * TANGENT.z, (_220 * _214) * _681));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _3682 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _707 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3704 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3715 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3726 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _725 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    vec4 _791 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _793 = _791.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _947 = sqrt(((_777 * _777) + (_778 * _778)) + (_779 * _779));
        float _953 = (cbMatDynParam._m0[5u].x * _947) + cbMatDynParam._m0[5u].y;
        float _3737 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _958 = (cbMatDynParam._m0[5u].z * _947) + cbMatDynParam._m0[5u].w;
        float _3748 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) - _954)) + _954) < ((_793 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _804 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _805 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _823 = fma(_706, cbSceneParam._m0[5u].z, fma(_705, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _704));
    float _826 = fma(_706, cbSceneParam._m0[6u].z, fma(_705, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _704));
    float _829 = fma(_706, cbSceneParam._m0[7u].z, fma(_705, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _704));
    uint _842 = _240 + 9u;
    uint _843 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_843].z;
    float _3759 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    vec4 _863 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _804, cbSceneParam._m0[86u].y * _805));
    float _867 = ((isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * TEXCOORD_5.w) * _863.x;
    float _868 = dot(vec3(_704, _705, _706), vec3(_784, _785, _786));
    float _871 = _868 * 2.0;
    float _875 = (_871 * _704) - _784;
    float _876 = (_871 * _705) - _785;
    float _877 = (_871 * _706) - _786;
    float _881 = abs(dot(vec3(_784, _785, _786), vec3(_704, _705, _706)));
    float _3792 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _883 = sqrt(_707);
    float _896 = exp2((_883 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_883 * 3.0));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1266;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _991 = fma(_936, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928));
        float _995 = fma(_936, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928));
        float _999 = fma(_936, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928));
        float _1024 = _928 + _704;
        float _1025 = _932 + _705;
        float _1026 = _936 + _706;
        float _1036 = fma(_1026, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024)) - _991;
        float _1037 = fma(_1026, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024)) - _995;
        float _1038 = fma(_1026, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024)) - _999;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_991 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_995 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[34u].z) + ((((((_999 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1094 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1060.x + (-0.5));
        float _1096 = _1094 * (_1060.y + (-0.5));
        float _1097 = _1094 * (_1060.z + (-0.5));
        float _1104 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1067.x + (-0.5));
        float _1106 = _1104 * (_1067.y + (-0.5));
        float _1107 = _1104 * (_1067.z + (-0.5));
        float _1114 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1074.x + (-0.5));
        float _1116 = _1114 * (_1074.y + (-0.5));
        float _1117 = _1114 * (_1074.z + (-0.5));
        float _1124 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1081.x + (-0.5));
        float _1126 = _1124 * (_1081.y + (-0.5));
        float _1127 = _1124 * (_1081.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1148 = (dot(vec3(_704, _705, _706), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1158 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3840 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1160 + 1.0))) + _1165) * _1128;
        float _1175 = _1096 * 0.5;
        float _1176 = _1106 * 0.5;
        float _1177 = _1116 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_704, _705, _706), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3873 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1202 + 1.0))) + _1207) * _1129;
        float _1217 = _1097 * 0.5;
        float _1218 = _1107 * 0.5;
        float _1219 = _1117 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_704, _705, _706), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3906 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1244 + 1.0))) + _1249) * _1130;
        _1266 = _1097;
        _1268 = _1096;
        _1269 = _1095;
        _1270 = _1107;
        _1271 = _1106;
        _1272 = _1105;
        _1273 = _1117;
        _1274 = _1116;
        _1275 = _1115;
        _1276 = _1130;
        _1277 = _1129;
        _1278 = _1128;
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _1267;
        _1268 = _1267;
        _1269 = _1267;
        _1270 = _1267;
        _1271 = _1267;
        _1272 = _1267;
        _1273 = _1267;
        _1274 = _1267;
        _1275 = _1267;
        _1276 = _1267;
        _1277 = _1267;
        _1278 = _1267;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1307 = fma(_936, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928));
        float _1311 = fma(_936, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928));
        float _1315 = fma(_936, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928));
        float _1338 = _928 + _704;
        float _1339 = _932 + _705;
        float _1340 = _936 + _706;
        float _1350 = fma(_1340, cbModelParam._m0[30u].z, fma(_1339, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1338)) - _1307;
        float _1351 = fma(_1340, cbModelParam._m0[31u].z, fma(_1339, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1338)) - _1311;
        float _1352 = fma(_1340, cbModelParam._m0[32u].z, fma(_1339, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1338)) - _1315;
        float _1356 = inversesqrt(dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352)));
        float _1369 = ((_1356 * _1350) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1307 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1356 * _1351) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1311 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1356 * _1352) / cbModelParam._m0[35u].z) + ((((((_1315 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        float _1406 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1373.x + (-0.5));
        float _1408 = _1406 * (_1373.y + (-0.5));
        float _1409 = _1406 * (_1373.z + (-0.5));
        float _1416 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1380.x + (-0.5));
        float _1418 = _1416 * (_1380.y + (-0.5));
        float _1419 = _1416 * (_1380.z + (-0.5));
        float _1426 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1387.x + (-0.5));
        float _1428 = _1426 * (_1387.y + (-0.5));
        float _1429 = _1426 * (_1387.z + (-0.5));
        float _1436 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1394.x + (-0.5));
        float _1438 = _1436 * (_1394.y + (-0.5));
        float _1439 = _1436 * (_1394.z + (-0.5));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = _1407 * 0.5;
        float _1444 = _1417 * 0.5;
        float _1445 = _1427 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_704, _705, _706), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _3969 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1470 + 1.0))) + _1475) * _1440;
        float _1485 = _1408 * 0.5;
        float _1486 = _1418 * 0.5;
        float _1487 = _1428 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_704, _705, _706), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4002 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1512 + 1.0))) + _1517) * _1441;
        float _1527 = _1409 * 0.5;
        float _1528 = _1419 * 0.5;
        float _1529 = _1429 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_704, _705, _706), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4035 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1554 + 1.0))) + _1559) * _1442;
        _1576 = _1409;
        _1577 = _1408;
        _1578 = _1407;
        _1579 = _1419;
        _1580 = _1418;
        _1581 = _1417;
        _1582 = _1429;
        _1583 = _1428;
        _1584 = _1427;
        _1585 = _1442;
        _1586 = _1441;
        _1587 = _1440;
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
    }
    else
    {
        _1576 = _1267;
        _1577 = _1267;
        _1578 = _1267;
        _1579 = _1267;
        _1580 = _1267;
        _1581 = _1267;
        _1582 = _1267;
        _1583 = _1267;
        _1584 = _1267;
        _1585 = _1267;
        _1586 = _1267;
        _1587 = _1267;
        _1588 = 0.0;
        _1589 = 0.0;
        _1590 = 0.0;
    }
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1279)) + _1279;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1280)) + _1280;
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1281)) + _1281;
    float _1623 = fma(_1602, cbSceneParam._m0[89u].z, fma(_1601, cbSceneParam._m0[89u].y, _1600 * cbSceneParam._m0[89u].x));
    float _1626 = fma(_1602, cbSceneParam._m0[90u].z, fma(_1601, cbSceneParam._m0[90u].y, _1600 * cbSceneParam._m0[90u].x));
    float _1629 = fma(_1602, cbSceneParam._m0[91u].z, fma(_1601, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1600));
    float _1644 = _875 * 0.5;
    float _1645 = _876 * 0.5;
    float _1646 = _877 * 0.5;
    float _1647 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1650 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1653 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1687;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1660 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1266, _1270, _1273, _1276));
        float _1664 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1668 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1675 = dot(vec4(cbModelParam._m0[39u]), vec4(_1644, _1645, _1646, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1675) ? 0.0 : (isnan(0.0) ? _1675 : max(0.0, _1675))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1698;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1689 = dot(vec4(cbModelParam._m0[40u]), vec4(_1644, _1645, _1646, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1689) ? 0.0 : (isnan(0.0) ? _1689 : max(0.0, _1689))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1702 = (_1698 * cbModelParam._m0[1u].x) + (_1687 * (1.0 - cbModelParam._m0[1u].x));
    float _1712 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _707);
    float _1713 = isnan(_1712) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1712 : min(cbModelParam._m0[25u].z, _1712));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1761 = fma(_936, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928)) + cbModelParam._m0[13u].w;
        float _1765 = fma(_936, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928)) + cbModelParam._m0[14u].w;
        float _1769 = fma(_936, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928)) + cbModelParam._m0[15u].w;
        float _1772 = fma(_877, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875));
        float _1775 = fma(_877, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875));
        float _1778 = fma(_877, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875));
        float _1806;
        if (_1772 > 0.0)
        {
            _1806 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1806 = frontier_phi_17_15_ladder;
        }
        float _2008;
        if (_1775 > 0.0)
        {
            _2008 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2008 = frontier_phi_26_22_ladder;
        }
        float _2251;
        if (_1778 > 0.0)
        {
            _2251 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2251 = frontier_phi_38_33_ladder;
        }
        float _2253 = isnan(_2008) ? _1806 : (isnan(_1806) ? _2008 : min(_1806, _2008));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1772) + _1761;
        float _2259 = (_2254 * _1775) + _1765;
        float _2260 = (_2254 * _1778) + _1769;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2261;
        float _2265 = _2261 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 > _2265) || ((_2259 < _2263) || ((_2258 < _2263) || (_2258 > _2265))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2260, cbModelParam._m0[9u].z, fma(_2259, cbModelParam._m0[9u].y, _2258 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2260, cbModelParam._m0[10u].z, fma(_2259, cbModelParam._m0[10u].y, _2258 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2260, cbModelParam._m0[11u].z, fma(_2259, cbModelParam._m0[11u].y, _2258 * cbModelParam._m0[11u].x))), _1713);
            frontier_phi_16_38_ladder = _2384.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2384.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2384.x * cbModelParam._m0[1u].y;
        }
        _1794 = frontier_phi_16_38_ladder_2;
        _1796 = frontier_phi_16_38_ladder_1;
        _1798 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_875, _876, _877), _1713);
        _1794 = _1782.x * cbModelParam._m0[1u].y;
        _1796 = _1782.y * cbModelParam._m0[1u].y;
        _1798 = _1782.z * cbModelParam._m0[1u].y;
    }
    float _1802 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _707);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1802 : min(cbModelParam._m0[25u].w, _1802));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1858 = fma(_936, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928)) + cbModelParam._m0[21u].w;
        float _1862 = fma(_936, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928)) + cbModelParam._m0[22u].w;
        float _1866 = fma(_936, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928)) + cbModelParam._m0[23u].w;
        float _1869 = fma(_877, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875));
        float _1872 = fma(_877, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875));
        float _1875 = fma(_877, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875));
        float _2013;
        if (_1869 > 0.0)
        {
            _2013 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2013 = frontier_phi_28_24_ladder;
        }
        float _2278;
        if (_1872 > 0.0)
        {
            _2278 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2278 = frontier_phi_40_35_ladder;
        }
        float _2483;
        if (_1875 > 0.0)
        {
            _2483 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2483 = frontier_phi_49_46_ladder;
        }
        float _2485 = isnan(_2278) ? _2013 : (isnan(_2013) ? _2278 : min(_2013, _2278));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _1869) + _1858;
        float _2491 = (_2486 * _1872) + _1862;
        float _2492 = (_2486 * _1875) + _1866;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2493;
        float _2496 = _2493 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2492 > _2496) || ((_2492 < _2494) || ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 < _2494) || (_2490 > _2496))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2492, cbModelParam._m0[17u].z, fma(_2491, cbModelParam._m0[17u].y, _2490 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2492, cbModelParam._m0[18u].z, fma(_2491, cbModelParam._m0[18u].y, _2490 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2492, cbModelParam._m0[19u].z, fma(_2491, cbModelParam._m0[19u].y, _2490 * cbModelParam._m0[19u].x))), _1803);
            frontier_phi_25_49_ladder = _2691.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2691.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2691.x * cbModelParam._m0[1u].z;
        }
        _1894 = frontier_phi_25_49_ladder_2;
        _1896 = frontier_phi_25_49_ladder_1;
        _1898 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_875, _876, _877), _1803);
        _1894 = _1878.x * cbModelParam._m0[1u].z;
        _1896 = _1878.y * cbModelParam._m0[1u].z;
        _1898 = _1878.z * cbModelParam._m0[1u].z;
    }
    float _1910 = ((((1.0 - _896) * ((_883 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_896 * _883)) * _867;
    float _1911 = _1910 * ((cbModelParam._m0[1u].w * (_1894 - _1794)) + _1794);
    float _1912 = _1910 * ((cbModelParam._m0[1u].w * (_1896 - _1796)) + _1796);
    float _1913 = _1910 * ((cbModelParam._m0[1u].w * (_1898 - _1798)) + _1798);
    float _1916 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1911 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1911 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, _1911 * cbSceneParam._m0[91u].x));
    uvec4 _1932 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1934 = _1932.x * 14u;
    uint _1935 = _1934 + 13u;
    float _1942 = _867 + (-1.0);
    float _1947 = (cbLight._m0[_1935].x * _1942) + 1.0;
    float _1948 = (cbLight._m0[_1935].y * _1942) + 1.0;
    float _1949 = (cbLight._m0[_1935].z * _1942) + 1.0;
    float _1950 = (cbLight._m0[_1935].w * _1942) + 1.0;
    uint _1951 = _1934 + 5u;
    float _1957 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1961 = _1934 + 4u;
    float _1967 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1971 = _1934 | 1u;
    float _1982 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_704, _705, _706));
    float _1985 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_704, _705, _706));
    float _4171 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _4182 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1990 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _1992 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _1999 = ((cbLight._m0[_1951].x * _1957) * _1992) + ((cbLight._m0[_1961].x * _1967) * _1990);
    float _2000 = ((_1957 * cbLight._m0[_1951].y) * _1992) + ((_1967 * cbLight._m0[_1961].y) * _1990);
    float _2001 = ((_1957 * cbLight._m0[_1951].z) * _1992) + ((_1967 * cbLight._m0[_1961].z) * _1990);
    uvec4 _2005 = floatBitsToUint(cbLight._m0[_1934 + 12u]);
    bool _2007 = _2005.x == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_2007)
    {
        _2018 = _1999;
        _2020 = _2000;
        _2022 = _2001;
    }
    else
    {
        uint _2026 = _1934 + 6u;
        float _2042 = (dot(vec3(cbLight._m0[_1934 + 2u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2043 = _2042 * _2042;
        float _4193 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2045 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2018 = (((cbLight._m0[_2026].x * 0.3183098733425140380859375) * _2044) * _2045) + _1999;
        _2020 = (((cbLight._m0[_2026].y * 0.3183098733425140380859375) * _2044) * _2045) + _2000;
        _2022 = (((cbLight._m0[_2026].z * 0.3183098733425140380859375) * _2044) * _2045) + _2001;
    }
    bool _2025 = _2005.y == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2025)
    {
        _2063 = _2018;
        _2065 = _2020;
        _2067 = _2022;
    }
    else
    {
        uint _2222 = _1934 + 7u;
        float _2238 = (dot(vec3(cbLight._m0[_1934 + 3u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2239 = _2238 * _2238;
        float _4209 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2240 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2241 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2063 = (((cbLight._m0[_2222].x * 0.3183098733425140380859375) * _2240) * _2241) + _2018;
        _2065 = (((cbLight._m0[_2222].y * 0.3183098733425140380859375) * _2240) * _2241) + _2020;
        _2067 = (((cbLight._m0[_2222].z * 0.3183098733425140380859375) * _2240) * _2241) + _2022;
    }
    uint _2070 = _1934 + 8u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _707) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_1934].x + _784;
    float _2086 = cbLight._m0[_1934].y + _785;
    float _2087 = cbLight._m0[_1934].z + _786;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_1934].xyz));
    float _4225 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2099 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2100 = dot(vec3(_704, _705, _706), vec3(_2092, _2093, _2094));
    float _4247 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2092, _2093, _2094));
    float _4258 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2084 * _2084;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2084;
    float _2135 = (0.5 / (((_2099 * ((_2098 * _2124) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2124) + _2084) * _2098))) * _2098;
    float _4269 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    uint _2148 = _1934 + 9u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _707) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_1971].x + _784;
    float _2162 = cbLight._m0[_1971].y + _785;
    float _2163 = cbLight._m0[_1971].z + _786;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_1971].xyz));
    float _4280 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2175 = dot(vec3(_704, _705, _706), vec3(_2168, _2169, _2170));
    float _4291 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2168, _2169, _2170));
    float _4302 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2160 * _2160;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2197 = 1.0 - _2160;
    float _2207 = (0.5 / (((_2099 * ((_2174 * _2197) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2197) + _2160) * _2174))) * _2174;
    float _4313 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    float _2219 = (((_2196 * cbLight._m0[_2148].x) * _2209) * _1957) + (((_2123 * cbLight._m0[_2070].x) * _2137) * _1967);
    float _2220 = (((_2196 * cbLight._m0[_2148].y) * _2209) * _1957) + (((_2123 * cbLight._m0[_2070].y) * _2137) * _1967);
    float _2221 = (((_2196 * cbLight._m0[_2148].z) * _2209) * _1957) + (((_2123 * cbLight._m0[_2070].z) * _2137) * _1967);
    float _2283;
    float _2285;
    float _2287;
    if (_2007)
    {
        _2283 = _2219;
        _2285 = _2220;
        _2287 = _2221;
    }
    else
    {
        uint _2289 = _1934 + 2u;
        uint _2293 = _1934 + 10u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _707) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _784;
        float _2310 = cbLight._m0[_2289].y + _785;
        float _2311 = cbLight._m0[_2289].z + _786;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2289].xyz));
        float _4324 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2323 = dot(vec3(_704, _705, _706), vec3(_2316, _2317, _2318));
        float _4335 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4346 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2345 = 1.0 - _2308;
        float _2355 = (0.5 / (((_2099 * ((_2322 * _2345) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2345) + _2308) * _2322))) * _2322;
        float _4357 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2283 = (((_2344 * cbLight._m0[_2293].x) * _2357) * _2358) + _2219;
        _2285 = (((_2344 * cbLight._m0[_2293].y) * _2357) * _2358) + _2220;
        _2287 = (((_2344 * cbLight._m0[_2293].z) * _2357) * _2358) + _2221;
    }
    float _2393;
    float _2395;
    float _2397;
    if (_2025)
    {
        _2393 = _2283;
        _2395 = _2285;
        _2397 = _2287;
    }
    else
    {
        uint _2404 = _1934 + 3u;
        uint _2408 = _1934 + 11u;
        float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _707) * 0.949999988079071044921875);
        float _2423 = _2422 * _2422;
        float _2424 = cbLight._m0[_2404].x + _784;
        float _2425 = cbLight._m0[_2404].y + _785;
        float _2426 = cbLight._m0[_2404].z + _786;
        float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
        float _2431 = _2430 * _2424;
        float _2432 = _2430 * _2425;
        float _2433 = _2430 * _2426;
        float _2434 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2404].xyz));
        float _4373 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2438 = dot(vec3(_704, _705, _706), vec3(_2431, _2432, _2433));
        float _4384 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2442 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2431, _2432, _2433));
        float _4395 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2446 = _2423 * _2423;
        float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
        float _2459 = (exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2460 = 1.0 - _2423;
        float _2470 = (0.5 / (((_2099 * ((_2437 * _2460) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2460) + _2423) * _2437))) * _2437;
        float _4406 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2472 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
        float _2473 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2393 = (((_2459 * cbLight._m0[_2408].x) * _2472) * _2473) + _2283;
        _2395 = (((_2459 * cbLight._m0[_2408].y) * _2472) * _2473) + _2285;
        _2397 = (((_2459 * cbLight._m0[_2408].z) * _2472) * _2473) + _2287;
    }
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    if (_1932.y == 0u)
    {
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2549 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2548;
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2548;
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2548;
        uvec4 _2563 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2564 = _2563.x;
        uint _2575 = uint((float(_2563.y) * floor(float(uint(cbSceneParam._m0[85u].y * _805) / _2564))) + floor(float(uint(cbSceneParam._m0[85u].x * _804) / _2564)));
        float _2585 = (log2(_2551 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2586 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        uint _2589 = uint(isnan(14.0) ? _2586 : (isnan(_2586) ? 14.0 : min(_2586, 14.0)));
        uvec4 _2594 = texelFetch(g_lightClusterGridBuffer, int(((_2589 << 2u) + (_2575 << 6u)) >> 2u));
        uint _2595 = _2594.x;
        uint _2596 = _2563.z;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        if (((((1u << ((_2596 >> 4u) & 15u)) + 4294967295u) & _2595) == 0u) || ((_2596 & 240u) == 0u))
        {
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
        }
        else
        {
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            uint _2855 = 0u;
            uint _2864;
            bool _2865;
            for (;;)
            {
                _2864 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                _2865 = _2864 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2865)
                {
                    frontier_phi_66_pred = _2849;
                    frontier_phi_66_pred_1 = _2854;
                    frontier_phi_66_pred_2 = _2853;
                    frontier_phi_66_pred_3 = _2852;
                    frontier_phi_66_pred_4 = _2851;
                    frontier_phi_66_pred_5 = _2850;
                }
                else
                {
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    uint _3000;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2864;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    for (;;)
                    {
                        uint _3004 = uint(findLSB(_3000)) + (_2855 << 5u);
                        uint _3001 = (_3000 + 4294967295u) & _3000;
                        uint _3006 = _3004 * 48u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3026 = (_3004 * 48u) + 4u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3045 = (_3004 * 48u) + 8u;
                        vec3 _3056 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x));
                        float _3060 = _3020.x - _2549;
                        float _3061 = _3020.y - _2550;
                        float _3062 = _3020.z - _2551;
                        float _3063 = dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062));
                        float _3066 = inversesqrt(_3063);
                        float _3067 = _3066 * _3060;
                        float _3068 = _3066 * _3061;
                        float _3069 = _3066 * _3062;
                        float _3070 = dot(vec3(_823, _826, _829), vec3(_3067, _3068, _3069));
                        float _3075 = 1.0 - (_3063 * _3020.w);
                        float _4432 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3077 = sqrt(_3063) * _3039.w;
                        float _3080 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3070) + _3081;
                        float _3087 = _3077 * _3077;
                        float _3091 = ((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3076) / ((_3087 * 0.699999988079071044921875) + 1.0);
                        float _3095 = (-0.0) - _2549;
                        float _3096 = (-0.0) - _2550;
                        float _3097 = (-0.0) - _2551;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3112 = exp2(log2(1.0 / ((_3087 * 3.5) + 5.0)) * 0.25);
                        float _3113 = 1.0 - _883;
                        float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                        float _3121 = _3120 * _3120;
                        float _3122 = _3121 * _3121;
                        float _3123 = _3102 + _3067;
                        float _3124 = _3103 + _3068;
                        float _3125 = _3104 + _3069;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3133 = dot(vec3(_823, _826, _829), vec3(_3102, _3103, _3104));
                        float _4448 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3137 = dot(vec3(_823, _826, _829), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                        float _4459 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                        float _3145 = _3080 * _3121;
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3070) + _3146;
                        float _4470 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3151 = 1.0 - _3121;
                        float _3161 = (0.5 / (((_3150 * ((_3136 * _3151) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3121) * _3136))) * _3150;
                        float _4481 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3172 = (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3144 * _3144) * ((_3087 * 2.1991131305694580078125) + 3.141590118408203125))) * _3076;
                        _2924 = (_3091 * _3039.x) + _2997;
                        _2925 = (_3091 * _3039.y) + _2998;
                        _2926 = (_3091 * _3039.z) + _2999;
                        _2921 = (_3172 * _3056.x) + _2994;
                        _2922 = (_3172 * _3056.y) + _2995;
                        _2923 = (_3172 * _3056.z) + _2996;
                        if (_3001 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _3001;
                        }
                    }
                    frontier_phi_66_pred = _2921;
                    frontier_phi_66_pred_1 = _2926;
                    frontier_phi_66_pred_2 = _2925;
                    frontier_phi_66_pred_3 = _2924;
                    frontier_phi_66_pred_4 = _2923;
                    frontier_phi_66_pred_5 = _2922;
                }
                _2697 = frontier_phi_66_pred;
                _2707 = frontier_phi_66_pred_1;
                _2705 = frontier_phi_66_pred_2;
                _2703 = frontier_phi_66_pred_3;
                _2701 = frontier_phi_66_pred_4;
                _2699 = frontier_phi_66_pred_5;
                uint _2856 = _2855 + 1u;
                if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2849 = _2697;
                    _2850 = _2699;
                    _2851 = _2701;
                    _2852 = _2703;
                    _2853 = _2705;
                    _2854 = _2707;
                    _2855 = _2856;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
        }
        uvec4 _2710 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2711 = _2710.z;
        uint _2713 = (_2711 >> 8u) & 15u;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((4294967295u << _2713) & _2595) == 0u)
        {
            _2817 = _2696;
            _2819 = _2698;
            _2821 = _2700;
            _2823 = _2702;
            _2825 = _2704;
            _2827 = _2706;
        }
        else
        {
            float _2842 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
            float _2843 = _2842 * _2549;
            float _2844 = _2842 * _2550;
            float _2845 = _2842 * _2551;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2713 < ((_2711 >> 12u) & 15u))
            {
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2977 = _2696;
                float _2978 = _2698;
                float _2979 = _2700;
                float _2980 = _2702;
                float _2981 = _2704;
                float _2982 = _2706;
                uint _2983 = _2713;
                uint _2992;
                bool _2993;
                for (;;)
                {
                    _2992 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                    _2993 = _2992 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2993)
                    {
                        frontier_phi_77_pred = _2982;
                        frontier_phi_77_pred_1 = _2981;
                        frontier_phi_77_pred_2 = _2980;
                        frontier_phi_77_pred_3 = _2979;
                        frontier_phi_77_pred_4 = _2978;
                        frontier_phi_77_pred_5 = _2977;
                    }
                    else
                    {
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3199 = _2977;
                        float _3200 = _2978;
                        float _3201 = _2979;
                        float _3202 = _2980;
                        float _3203 = _2981;
                        float _3204 = _2982;
                        uint _3205 = _2992;
                        uint _3206;
                        vec4 _3231;
                        float _3232;
                        vec4 _3247;
                        vec3 _3259;
                        vec4 _3274;
                        vec4 _3289;
                        float _3335;
                        bool _3336;
                        for (;;)
                        {
                            uint _3216 = ((_2983 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3205));
                            _3206 = (_3205 + 4294967295u) & _3205;
                            uint _3218 = _3216 * 40u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3232 = _3231.w;
                            uint _3234 = (_3216 * 40u) + 4u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3249 = (_3216 * 40u) + 8u;
                            _3259 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x));
                            uint _3261 = (_3216 * 40u) + 16u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3216 * 40u) + 20u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3216 * 40u) + 24u;
                            vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3310 = (_3216 * 40u) + 28u;
                            vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            _3335 = fma(_2551, _3323.z, fma(_2550, _3323.y, _3323.x * _2549)) + _3323.w;
                            _3336 = !((fma(_2551, _3304.z, fma(_2550, _3304.y, _3304.x * _2549)) + _3304.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3336)
                            {
                                float _3363 = _3231.x - _2549;
                                float _3364 = _3231.y - _2550;
                                float _3365 = _3231.z - _2551;
                                float _3366 = dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365));
                                float _3369 = inversesqrt(_3366);
                                float _3370 = _3369 * _3363;
                                float _3371 = _3369 * _3364;
                                float _3372 = _3369 * _3365;
                                float _3376 = 1.0 - (_3366 / (_3232 * _3232));
                                float _4492 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3381 = sqrt(_3366) * _3247.w;
                                float _3383 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                                float _3384 = _3383 * _3383;
                                float _3387 = ((1.0 - _3384) * dot(vec3(_3370, _3371, _3372), vec3(_823, _826, _829))) + _3384;
                                float _3390 = _3381 * _3381;
                                float _3394 = (fma(_2551, _3274.z, fma(_2550, _3274.y, _3274.x * _2549)) + _3274.w) / _3335;
                                float _3395 = (fma(_2551, _3289.z, fma(_2550, _3289.y, _3289.x * _2549)) + _3289.w) / _3335;
                                float _3399 = 1.0 - dot(vec2(_3394, _3395), vec2(_3394, _3395));
                                float _4508 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3401 = _3400 * (((isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0))) * _3377) / ((_3390 * 0.699999988079071044921875) + 1.0));
                                float _3413 = exp2(log2(1.0 / ((_3390 * 3.5) + 5.0)) * 0.25);
                                float _3414 = 1.0 - _883;
                                float _3421 = sqrt(1.0 - ((1.0 - (_3414 * _3414)) * (1.0 - (_3413 * _3413))));
                                float _3422 = _3421 * _3421;
                                float _3423 = _3422 * _3422;
                                float _3424 = _3370 - _2843;
                                float _3425 = _3371 - _2844;
                                float _3426 = _3372 - _2845;
                                float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                                float _3434 = dot(vec3(_823, _826, _829), vec3((-0.0) - _2843, (-0.0) - _2844, (-0.0) - _2845));
                                float _4519 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3438 = dot(vec3(_823, _826, _829), vec3(_3430 * _3424, _3430 * _3425, _3430 * _3426));
                                float _4530 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3441 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3445 = ((_3441 * _3441) * (_3423 + (-1.0))) + 1.0;
                                float _3446 = _3383 * _3422;
                                float _3447 = _3446 * _3446;
                                float _3453 = ((1.0 - _3447) * dot(vec3(_823, _826, _829), vec3(_3370, _3371, _3372))) + _3447;
                                float _4541 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3455 = 1.0 - _3422;
                                float _3465 = (0.5 / (((_3454 * ((_3437 * _3455) + _3422)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3422) * _3437))) * _3454;
                                float _4552 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3475 = (_3400 * _3377) * (((_3423 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3445 * _3445) * ((_3390 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3401 * _3247.y;
                                frontier_phi_83_pred_1 = _3401 * _3247.x;
                                frontier_phi_83_pred_2 = _3475 * _3259.z;
                                frontier_phi_83_pred_3 = _3475 * _3259.y;
                                frontier_phi_83_pred_4 = _3475 * _3259.x;
                                frontier_phi_83_pred_5 = _3401 * _3247.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3483 = frontier_phi_83_pred;
                            _3482 = frontier_phi_83_pred_1;
                            _3481 = frontier_phi_83_pred_2;
                            _3480 = frontier_phi_83_pred_3;
                            _3479 = frontier_phi_83_pred_4;
                            _3484 = frontier_phi_83_pred_5;
                            _3189 = _3482 + _3202;
                            _3190 = _3483 + _3203;
                            _3191 = _3484 + _3204;
                            _3186 = _3479 + _3199;
                            _3187 = _3480 + _3200;
                            _3188 = _3481 + _3201;
                            if (_3206 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3206;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3191;
                        frontier_phi_77_pred_1 = _3190;
                        frontier_phi_77_pred_2 = _3189;
                        frontier_phi_77_pred_3 = _3188;
                        frontier_phi_77_pred_4 = _3187;
                        frontier_phi_77_pred_5 = _3186;
                    }
                    _2828 = frontier_phi_77_pred;
                    _2826 = frontier_phi_77_pred_1;
                    _2824 = frontier_phi_77_pred_2;
                    _2822 = frontier_phi_77_pred_3;
                    _2820 = frontier_phi_77_pred_4;
                    _2818 = frontier_phi_77_pred_5;
                    uint _2984 = _2983 + 1u;
                    if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2977 = _2818;
                        _2978 = _2820;
                        _2979 = _2822;
                        _2980 = _2824;
                        _2981 = _2826;
                        _2982 = _2828;
                        _2983 = _2984;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2822;
                frontier_phi_58_59_ladder_1 = _2828;
                frontier_phi_58_59_ladder_2 = _2826;
                frontier_phi_58_59_ladder_3 = _2824;
                frontier_phi_58_59_ladder_4 = _2820;
                frontier_phi_58_59_ladder_5 = _2818;
            }
            else
            {
                frontier_phi_58_59_ladder = _2700;
                frontier_phi_58_59_ladder_1 = _2706;
                frontier_phi_58_59_ladder_2 = _2704;
                frontier_phi_58_59_ladder_3 = _2702;
                frontier_phi_58_59_ladder_4 = _2698;
                frontier_phi_58_59_ladder_5 = _2696;
            }
            _2817 = frontier_phi_58_59_ladder_5;
            _2819 = frontier_phi_58_59_ladder_4;
            _2821 = frontier_phi_58_59_ladder;
            _2823 = frontier_phi_58_59_ladder_3;
            _2825 = frontier_phi_58_59_ladder_2;
            _2827 = frontier_phi_58_59_ladder_1;
        }
        float _2832 = isnan(1.0) ? _867 : (isnan(_867) ? 1.0 : min(_867, 1.0));
        _2608 = (_2832 * _2823) + _2063;
        _2610 = (_2832 * _2825) + _2065;
        _2612 = (_2832 * _2827) + _2067;
        _2614 = ((_2817 * 0.039999999105930328369140625) * _2832) + _2393;
        _2616 = ((_2819 * 0.039999999105930328369140625) * _2832) + _2395;
        _2618 = ((_2821 * 0.039999999105930328369140625) * _2832) + _2397;
    }
    else
    {
        _2608 = _2063;
        _2610 = _2065;
        _2612 = _2067;
        _2614 = _2393;
        _2616 = _2395;
        _2618 = _2397;
    }
    float _4568 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4579 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4590 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _2635 = ((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2608 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _867))) + ((_2614 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1702)) * cbPerFrame._m0[3u].x);
    float _2636 = ((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2610 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _867))) + ((_2616 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1702)) * cbPerFrame._m0[3u].x);
    float _2637 = ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2612 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _867))) + ((_2618 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1702)) * cbPerFrame._m0[3u].x);
    uint _2638 = _240 + 6u;
    float _2646 = _804 / cbSceneParam._m0[86u].x;
    float _2647 = _805 / cbSceneParam._m0[86u].y;
    vec4 _2661 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, (log2((isnan(cbSceneParam._m0[77u].w) ? _725 : (isnan(_725) ? cbSceneParam._m0[77u].w : min(_725, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2663 = _2661.x;
    float _2664 = _2661.y;
    float _2665 = _2661.z;
    float _2666 = _2661.w;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_725 > cbSceneParam._m0[78u].w)
    {
        float _2721 = isnan(_725) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _725 : min(cbSceneParam._m0[80u].w, _725));
        float _2722 = _2721 / _725;
        float _2733 = _2722 * _777;
        float _2734 = _778 * _2722;
        float _2735 = (-0.0) - _2734;
        float _2737 = _2722 * _779;
        float _2739 = (cbSceneParam._m0[77u].w * _2735) / _2721;
        float _2740 = _2739 + cbSceneParam._m0[79u].w;
        float _2741 = cbSceneParam._m0[79u].w - _2734;
        float _2747 = sqrt(((_2733 * _2733) + (_2734 * _2734)) + (_2737 * _2737));
        float _2750 = (1.0 - (cbSceneParam._m0[77u].w / _2721)) * _2747;
        float _2755 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2757 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2934;
        if (abs((_2735 - _2739) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2934 = ((((_2740 > 0.0) ? exp2(_2755 * _2740) : (2.0 - exp2(_2757 * _2740))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2750;
        }
        else
        {
            float _2878 = 1.0 / cbSceneParam._m0[80u].x;
            float _2879 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : max(_2740, _2741));
            float _2880 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : min(_2740, _2741));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            _2934 = ((abs(_2747 / _2735) * cbSceneParam._m0[80u].y) * ((((_2889 - _2890) * 2.0) - ((exp2(_2755 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0)))) - exp2(_2755 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0))))) * _2878)) - ((exp2(_2757 * _2889) - exp2(_2757 * _2890)) * _2878))) + (_2750 * cbSceneParam._m0[80u].z);
        }
        vec4 _2936 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, 1.0), 0.0);
        float _2945 = exp2((_2934 * (-1.44269502162933349609375)) * (1.0 - _2936.w));
        float _2946 = log2(_2945);
        float _2962 = log2(_2666);
        _2759 = (exp2(_2962 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].x)) * _2936.x) / cbSceneParam._m0[78u].x)) + _2663;
        _2761 = (exp2(_2962 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].y)) * _2936.y) / cbSceneParam._m0[78u].y)) + _2664;
        _2763 = (exp2(_2962 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].z)) * _2936.z) / cbSceneParam._m0[78u].z)) + _2665;
        _2765 = _2945 * _2666;
    }
    else
    {
        _2759 = _2663;
        _2761 = _2664;
        _2763 = _2665;
        _2765 = _2666;
    }
    bool _2972;
    vec4 _2775;
    vec4 _2797;
    float _2799;
    float _2803;
    float _2804;
    float _2805;
    float _2806;
    bool _2816;
    for (;;)
    {
        _2775 = cbMatDynParam._m0[0u];
        float _2777 = roundEven(_2775.y);
        bool _2778 = _2777 == 3.0;
        float _2779 = log2(_2765);
        float _2786 = exp2(_2779 * cbSceneParam._m0[78u].x) * _2635;
        float _2787 = exp2(_2779 * cbSceneParam._m0[78u].y) * _2636;
        float _2788 = exp2(_2779 * cbSceneParam._m0[78u].z) * _2637;
        float _2795 = _793 + (-0.5);
        _2797 = cbMtdParam._m0[1u];
        _2799 = _2797.y * _2795;
        float _2802 = (_2777 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2803 = _2802 * (_2778 ? _2786 : (_2786 + (cbSceneParam._m0[72u].w * _2759)));
        _2804 = _2802 * (_2778 ? _2787 : (_2787 + (cbSceneParam._m0[72u].w * _2761)));
        _2805 = _2802 * (_2778 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2763)));
        _2806 = _2795 * 0.999000012874603271484375;
        _2816 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2816)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2806) < 0.5)
            {
                _2972 = true;
                break;
            }
        }
        uint _2913 = _842 + uint(_2775.w);
        if ((cbInstanceData._m0[_2913].w < 1.0) && ((cbInstanceData._m0[_2913].w + _2806) < 0.5))
        {
            _2972 = true;
            break;
        }
        if ((_2799 + 1.0) < _2797.x)
        {
            _2972 = true;
            break;
        }
        _2972 = false;
        break;
    }
    float _3177;
    if (_2972)
    {
        discard_state = true;
        _3177 = 0.0;
    }
    else
    {
        _3177 = cbInstanceData._m0[_2638].w;
    }
    SV_Target.x = _2803;
    SV_Target.y = _2804;
    SV_Target.z = _2805;
    SV_Target.w = _3177;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2638].w;
    discard_exit();
}


