#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1376;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _358.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].z) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3702 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _437 = (_430 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _438 = (_430 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _439 = (_430 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _358.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[24u].z) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3713 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _510 = (_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437;
    float _511 = (_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438;
    float _512 = (_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    vec4 _530 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _268) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _269) + cbTextureTilingScale._m0[24u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _549 = _547.x;
    float _559 = dot(vec4(_549, _547.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _571 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _358.z) * 2.0) - ((((_549 - _559) * cbMtdParam._m0[24u].z) + _559) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3724 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _585 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_572 * ((_530.x * cbMtdParam._m0[14u].x) - _510)) + _510);
    float _588 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_572 * ((_530.y * cbMtdParam._m0[14u].y) - _511)) + _511);
    float _591 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_572 * ((_530.z * cbMtdParam._m0[14u].z) - _512)) + _512);
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _648 = _646.x;
    float _649 = _646.y;
    float _650 = _646.z;
    float _657 = ((_629.x - _648) * _430) + _648;
    float _658 = ((_629.y - _649) * _430) + _649;
    float _659 = ((_629.z - _650) * _430) + _650;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _682 = ((_671.x - _657) * _503) + _657;
    float _683 = ((_671.y - _658) * _503) + _658;
    float _684 = ((_671.z - _659) * _503) + _659;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _268) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _269) + cbTextureTilingScale._m0[23u].w));
    float _709 = ((_696.z - _684) * _572) + _684;
    float _712 = ((((_696.x - _682) * _572) + _682) * 2.0) + (-1.0);
    float _714 = ((((_696.y - _683) * _572) + _683) * 2.0) + (-1.0);
    float _715 = dot(vec2(_712, _714), vec2(_712, _714));
    float _3735 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _720 = sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _759 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _761 = _759.x;
    float _762 = 1.0 - _761;
    float _775 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_761 - _762) * cbMtdParam._m0[24u].w) + _762) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3746 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _776 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _783 = (_776 * ((_609.x * cbMtdParam._m0[18u].x) - _585)) + _585;
    float _784 = (_776 * ((_609.y * cbMtdParam._m0[18u].y) - _588)) + _588;
    float _785 = (_776 * ((_609.z * cbMtdParam._m0[18u].z) - _591)) + _591;
    float _789 = (cbMtdParam._m0[19u].w * (_734.z - _709)) + _709;
    vec4 _802 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _809 = (_802.x * 2.0) + (-1.0);
    float _810 = (_802.y * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _3757 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _819 = (_776 * (_802.z - _789)) + _789;
    float _822 = (((_734.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _712;
    float _823 = (((_734.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _714;
    float _835 = (((_809 - _822) + (cbMtdParam._m0[21u].x * _822)) * _776) + _822;
    float _836 = (((_810 - _823) + (cbMtdParam._m0[21u].x * _823)) * _776) + _823;
    float _837 = (_776 * (sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) - _720)) + _720;
    float _841 = cbMtdParam._m0[22u].x + _734.w;
    float _844 = fma(_837, _235 * NORMAL.x, fma(_836, _242 * TANGENT.x, (_228 * _220) * _835));
    float _847 = fma(_837, _235 * NORMAL.y, fma(_836, _242 * TANGENT.y, (_228 * _221) * _835));
    float _850 = fma(_837, _235 * NORMAL.z, fma(_836, _242 * TANGENT.z, (_228 * _222) * _835));
    float _854 = inversesqrt(dot(vec3(_844, _847, _850), vec3(_844, _847, _850)));
    float _855 = _854 * _844;
    float _856 = _854 * _847;
    float _857 = _854 * _850;
    float _3768 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _858 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _3790 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _3801 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _3812 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _876 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _927 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _917);
    float _928 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _917);
    float _929 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _917);
    float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
    float _934 = _927 * _933;
    float _935 = _928 * _933;
    float _936 = _929 * _933;
    float _942 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _943 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _961 = fma(_857, cbSceneParam._m0[5u].z, fma(_856, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _855));
    float _964 = fma(_857, cbSceneParam._m0[6u].z, fma(_856, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _855));
    float _967 = fma(_857, cbSceneParam._m0[7u].z, fma(_856, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _855));
    uint _981 = (_248 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _987 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_981].x;
    float _988 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_981].y;
    float _989 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_981].z;
    float _3823 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    vec4 _1001 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _942, cbSceneParam._m0[86u].y * _943));
    float _1005 = ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * TEXCOORD_5.w) * _1001.x;
    float _1006 = dot(vec3(_855, _856, _857), vec3(_934, _935, _936));
    float _1009 = _1006 * 2.0;
    float _1013 = (_1009 * _855) - _934;
    float _1014 = (_1009 * _856) - _935;
    float _1015 = (_1009 * _857) - _936;
    float _1019 = abs(dot(vec3(_934, _935, _936), vec3(_855, _856, _857)));
    float _3856 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1021 = sqrt(_858);
    float _1034 = exp2((_1021 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1021 * 3.0));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1100 = fma(_1074, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066));
        float _1104 = fma(_1074, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066));
        float _1108 = fma(_1074, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066));
        float _1133 = _1066 + _855;
        float _1134 = _1070 + _856;
        float _1135 = _1074 + _857;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1100;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1104;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1108;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1100 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1104 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1108 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_855, _856, _857), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3904 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_855, _856, _857), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3937 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_855, _856, _857), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3970 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1413 = fma(_1074, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066));
        float _1417 = fma(_1074, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066));
        float _1421 = fma(_1074, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066));
        float _1444 = _1066 + _855;
        float _1445 = _1070 + _856;
        float _1446 = _1074 + _857;
        float _1456 = fma(_1446, cbModelParam._m0[30u].z, fma(_1445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1444)) - _1413;
        float _1457 = fma(_1446, cbModelParam._m0[31u].z, fma(_1445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1444)) - _1417;
        float _1458 = fma(_1446, cbModelParam._m0[32u].z, fma(_1445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1444)) - _1421;
        float _1462 = inversesqrt(dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458)));
        float _1475 = ((_1462 * _1456) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1413 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1462 * _1457) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1417 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1462 * _1458) / cbModelParam._m0[35u].z) + ((((((_1421 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        float _1512 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1479.x + (-0.5));
        float _1514 = _1512 * (_1479.y + (-0.5));
        float _1515 = _1512 * (_1479.z + (-0.5));
        float _1522 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1486.x + (-0.5));
        float _1524 = _1522 * (_1486.y + (-0.5));
        float _1525 = _1522 * (_1486.z + (-0.5));
        float _1532 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1493.x + (-0.5));
        float _1534 = _1532 * (_1493.y + (-0.5));
        float _1535 = _1532 * (_1493.z + (-0.5));
        float _1542 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1500.x + (-0.5));
        float _1544 = _1542 * (_1500.y + (-0.5));
        float _1545 = _1542 * (_1500.z + (-0.5));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = _1513 * 0.5;
        float _1550 = _1523 * 0.5;
        float _1551 = _1533 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_855, _856, _857), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4033 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1576 + 1.0))) + _1581) * _1546;
        float _1591 = _1514 * 0.5;
        float _1592 = _1524 * 0.5;
        float _1593 = _1534 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_855, _856, _857), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4066 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1618 + 1.0))) + _1623) * _1547;
        float _1633 = _1515 * 0.5;
        float _1634 = _1525 * 0.5;
        float _1635 = _1535 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_855, _856, _857), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4099 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1660 + 1.0))) + _1665) * _1548;
        _1682 = _1515;
        _1683 = _1514;
        _1684 = _1513;
        _1685 = _1525;
        _1686 = _1524;
        _1687 = _1523;
        _1688 = _1535;
        _1689 = _1534;
        _1690 = _1533;
        _1691 = _1548;
        _1692 = _1547;
        _1693 = _1546;
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
    }
    else
    {
        _1682 = _1376;
        _1683 = _1376;
        _1684 = _1376;
        _1685 = _1376;
        _1686 = _1376;
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = 0.0;
        _1695 = 0.0;
        _1696 = 0.0;
    }
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1388)) + _1388;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1389)) + _1389;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1390)) + _1390;
    float _1729 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1706 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1706 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1706));
    float _1750 = _1013 * 0.5;
    float _1751 = _1014 * 0.5;
    float _1752 = _1015 * 0.5;
    float _1753 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1756 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1759 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1793;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1766 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1770 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1774 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1781 = dot(vec4(cbModelParam._m0[39u]), vec4(_1750, _1751, _1752, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1804;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1795 = dot(vec4(cbModelParam._m0[40u]), vec4(_1750, _1751, _1752, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1808 = (_1804 * cbModelParam._m0[1u].x) + (_1793 * (1.0 - cbModelParam._m0[1u].x));
    float _1818 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _858);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1818 : min(cbModelParam._m0[25u].z, _1818));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1866 = fma(_1074, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066)) + cbModelParam._m0[13u].w;
        float _1870 = fma(_1074, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066)) + cbModelParam._m0[14u].w;
        float _1874 = fma(_1074, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066)) + cbModelParam._m0[15u].w;
        float _1877 = fma(_1015, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013));
        float _1880 = fma(_1015, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013));
        float _1883 = fma(_1015, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013));
        float _1911;
        if (_1877 > 0.0)
        {
            _1911 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1911 = frontier_phi_14_12_ladder;
        }
        float _2132;
        if (_1880 > 0.0)
        {
            _2132 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2132 = frontier_phi_23_19_ladder;
        }
        float _2378;
        if (_1883 > 0.0)
        {
            _2378 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2378 = frontier_phi_35_30_ladder;
        }
        float _2380 = isnan(_2132) ? _1911 : (isnan(_1911) ? _2132 : min(_1911, _2132));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1877) + _1866;
        float _2386 = (_2381 * _1880) + _1870;
        float _2387 = (_2381 * _1883) + _1874;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2388;
        float _2392 = _2388 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 > _2392) || ((_2386 < _2390) || ((_2385 < _2390) || (_2385 > _2392))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2387, cbModelParam._m0[9u].z, fma(_2386, cbModelParam._m0[9u].y, _2385 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2387, cbModelParam._m0[10u].z, fma(_2386, cbModelParam._m0[10u].y, _2385 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2387, cbModelParam._m0[11u].z, fma(_2386, cbModelParam._m0[11u].y, _2385 * cbModelParam._m0[11u].x))), _1819);
            frontier_phi_13_35_ladder = _2511.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2511.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2511.x * cbModelParam._m0[1u].y;
        }
        _1899 = frontier_phi_13_35_ladder_2;
        _1901 = frontier_phi_13_35_ladder_1;
        _1903 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1013, _1014, _1015), _1819);
        _1899 = _1887.x * cbModelParam._m0[1u].y;
        _1901 = _1887.y * cbModelParam._m0[1u].y;
        _1903 = _1887.z * cbModelParam._m0[1u].y;
    }
    float _1907 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _858);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1907 : min(cbModelParam._m0[25u].w, _1907));
    float _1997;
    float _1999;
    float _2001;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1961 = fma(_1074, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066)) + cbModelParam._m0[21u].w;
        float _1965 = fma(_1074, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066)) + cbModelParam._m0[22u].w;
        float _1969 = fma(_1074, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066)) + cbModelParam._m0[23u].w;
        float _1972 = fma(_1015, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013));
        float _1975 = fma(_1015, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013));
        float _1978 = fma(_1015, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013));
        float _2137;
        if (_1972 > 0.0)
        {
            _2137 = abs((1.0 - _1961) / _1972);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1961 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2137 = frontier_phi_25_21_ladder;
        }
        float _2405;
        if (_1975 > 0.0)
        {
            _2405 = abs((1.0 - _1965) / _1975);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1965 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2405 = frontier_phi_37_32_ladder;
        }
        float _2610;
        if (_1978 > 0.0)
        {
            _2610 = abs((1.0 - _1969) / _1978);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1969 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2610 = frontier_phi_46_43_ladder;
        }
        float _2612 = isnan(_2405) ? _2137 : (isnan(_2137) ? _2405 : min(_2137, _2405));
        float _2613 = isnan(_2610) ? _2612 : (isnan(_2612) ? _2610 : min(_2612, _2610));
        float _2617 = (_2613 * _1972) + _1961;
        float _2618 = (_2613 * _1975) + _1965;
        float _2619 = (_2613 * _1978) + _1969;
        float _2620 = _2613 * 9.9999997473787516355514526367188e-05;
        float _2621 = (-1.0) - _2620;
        float _2623 = _2620 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2619 > _2623) || ((_2619 < _2621) || ((_2618 > _2623) || ((_2618 < _2621) || ((_2617 < _2621) || (_2617 > _2623))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2619, cbModelParam._m0[17u].z, fma(_2618, cbModelParam._m0[17u].y, _2617 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2619, cbModelParam._m0[18u].z, fma(_2618, cbModelParam._m0[18u].y, _2617 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2619, cbModelParam._m0[19u].z, fma(_2618, cbModelParam._m0[19u].y, _2617 * cbModelParam._m0[19u].x))), _1908);
            frontier_phi_22_46_ladder = _2818.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2818.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2818.x * cbModelParam._m0[1u].z;
        }
        _1997 = frontier_phi_22_46_ladder_2;
        _1999 = frontier_phi_22_46_ladder_1;
        _2001 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1013, _1014, _1015), _1908);
        _1997 = _1981.x * cbModelParam._m0[1u].z;
        _1999 = _1981.y * cbModelParam._m0[1u].z;
        _2001 = _1981.z * cbModelParam._m0[1u].z;
    }
    float _2013 = ((((1.0 - _1034) * ((_1021 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1034 * _1021)) * _1005;
    float _2014 = _2013 * ((cbModelParam._m0[1u].w * (_1997 - _1899)) + _1899);
    float _2015 = _2013 * ((cbModelParam._m0[1u].w * (_1999 - _1901)) + _1901);
    float _2016 = _2013 * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2019 = fma(_2016, cbSceneParam._m0[89u].z, fma(_2015, cbSceneParam._m0[89u].y, _2014 * cbSceneParam._m0[89u].x));
    float _2022 = fma(_2016, cbSceneParam._m0[90u].z, fma(_2015, cbSceneParam._m0[90u].y, _2014 * cbSceneParam._m0[90u].x));
    float _2025 = fma(_2016, cbSceneParam._m0[91u].z, fma(_2015, cbSceneParam._m0[91u].y, _2014 * cbSceneParam._m0[91u].x));
    vec4 _2033 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_942, _943));
    float _2035 = _2033.w;
    float _2047 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2035);
    float _2048 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2035);
    float _2049 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2035);
    uvec4 _2053 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2055 = _2053.x * 14u;
    uint _2056 = _2055 + 13u;
    float _2063 = _1005 + (-1.0);
    float _2068 = (cbLight._m0[_2056].x * _2063) + 1.0;
    float _2069 = (cbLight._m0[_2056].y * _2063) + 1.0;
    float _2070 = (cbLight._m0[_2056].z * _2063) + 1.0;
    float _2071 = (cbLight._m0[_2056].w * _2063) + 1.0;
    uint _2072 = _2055 + 5u;
    float _2078 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
    uint _2082 = _2055 + 4u;
    float _2091 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
    uint _2095 = _2055 | 1u;
    float _2106 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_855, _856, _857));
    float _2109 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_855, _856, _857));
    float _4235 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _4246 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2114 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2116 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.3183098733425140380859375;
    float _2123 = ((cbLight._m0[_2072].x * _2078) * _2116) + (((cbLight._m0[_2082].x * _2047) * _2091) * _2114);
    float _2124 = ((_2078 * cbLight._m0[_2072].y) * _2116) + (((cbLight._m0[_2082].y * _2048) * _2091) * _2114);
    float _2125 = ((_2078 * cbLight._m0[_2072].z) * _2116) + (((cbLight._m0[_2082].z * _2049) * _2091) * _2114);
    uvec4 _2129 = floatBitsToUint(cbLight._m0[_2055 + 12u]);
    bool _2131 = _2129.x == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2131)
    {
        _2142 = _2123;
        _2144 = _2124;
        _2146 = _2125;
    }
    else
    {
        uint _2150 = _2055 + 6u;
        float _2166 = (dot(vec3(cbLight._m0[_2055 + 2u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2167 = _2166 * _2166;
        float _4257 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2168 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2169 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2142 = (((cbLight._m0[_2150].x * 0.3183098733425140380859375) * _2168) * _2169) + _2123;
        _2144 = (((cbLight._m0[_2150].y * 0.3183098733425140380859375) * _2168) * _2169) + _2124;
        _2146 = (((cbLight._m0[_2150].z * 0.3183098733425140380859375) * _2168) * _2169) + _2125;
    }
    bool _2149 = _2129.y == 0u;
    float _2187;
    float _2189;
    float _2191;
    if (_2149)
    {
        _2187 = _2142;
        _2189 = _2144;
        _2191 = _2146;
    }
    else
    {
        uint _2349 = _2055 + 7u;
        float _2365 = (dot(vec3(cbLight._m0[_2055 + 3u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2366 = _2365 * _2365;
        float _4273 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2367 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2368 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2187 = (((cbLight._m0[_2349].x * 0.3183098733425140380859375) * _2367) * _2368) + _2142;
        _2189 = (((cbLight._m0[_2349].y * 0.3183098733425140380859375) * _2367) * _2368) + _2144;
        _2191 = (((cbLight._m0[_2349].z * 0.3183098733425140380859375) * _2367) * _2368) + _2146;
    }
    uint _2194 = _2055 + 8u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _858) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_2055].x + _934;
    float _2210 = cbLight._m0[_2055].y + _935;
    float _2211 = cbLight._m0[_2055].z + _936;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2055].xyz));
    float _4289 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _4300 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _2223 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2224 = dot(vec3(_855, _856, _857), vec3(_2216, _2217, _2218));
    float _4311 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2216, _2217, _2218));
    float _4322 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2208 * _2208;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2247 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2248 = 1.0 - _2208;
    float _2259 = (0.5 / (((_2223 * ((_2222 * _2248) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2248) + _2208) * _2222))) * _2222;
    float _4333 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2261 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    uint _2275 = _2055 + 9u;
    float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _858) * 0.949999988079071044921875);
    float _2287 = _2286 * _2286;
    float _2288 = cbLight._m0[_2095].x + _934;
    float _2289 = cbLight._m0[_2095].y + _935;
    float _2290 = cbLight._m0[_2095].z + _936;
    float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
    float _2295 = _2294 * _2288;
    float _2296 = _2294 * _2289;
    float _2297 = _2294 * _2290;
    float _2298 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2095].xyz));
    float _4344 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2302 = dot(vec3(_855, _856, _857), vec3(_2295, _2296, _2297));
    float _4355 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2306 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2295, _2296, _2297));
    float _4366 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2310 = _2287 * _2287;
    float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
    float _2323 = (exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2324 = 1.0 - _2287;
    float _2334 = (0.5 / (((_2223 * ((_2301 * _2324) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2324) + _2287) * _2301))) * _2301;
    float _4377 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2336 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
    float _2346 = (((_2323 * cbLight._m0[_2275].x) * _2336) * _2078) + ((((cbLight._m0[_2194].x * _2047) * _2247) * _2261) * _2091);
    float _2347 = (((_2323 * cbLight._m0[_2275].y) * _2336) * _2078) + ((((cbLight._m0[_2194].y * _2048) * _2247) * _2261) * _2091);
    float _2348 = (((_2323 * cbLight._m0[_2275].z) * _2336) * _2078) + ((((cbLight._m0[_2194].z * _2049) * _2247) * _2261) * _2091);
    float _2410;
    float _2412;
    float _2414;
    if (_2131)
    {
        _2410 = _2346;
        _2412 = _2347;
        _2414 = _2348;
    }
    else
    {
        uint _2416 = _2055 + 2u;
        uint _2420 = _2055 + 10u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _858) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _934;
        float _2437 = cbLight._m0[_2416].y + _935;
        float _2438 = cbLight._m0[_2416].z + _936;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2416].xyz));
        float _4388 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2450 = dot(vec3(_855, _856, _857), vec3(_2443, _2444, _2445));
        float _4399 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4410 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2471 = (exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2472 = 1.0 - _2435;
        float _2482 = (0.5 / (((_2223 * ((_2449 * _2472) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2472) + _2435) * _2449))) * _2449;
        float _4421 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2484 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2485 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2410 = (((_2471 * cbLight._m0[_2420].x) * _2484) * _2485) + _2346;
        _2412 = (((_2471 * cbLight._m0[_2420].y) * _2484) * _2485) + _2347;
        _2414 = (((_2471 * cbLight._m0[_2420].z) * _2484) * _2485) + _2348;
    }
    float _2520;
    float _2522;
    float _2524;
    if (_2149)
    {
        _2520 = _2410;
        _2522 = _2412;
        _2524 = _2414;
    }
    else
    {
        uint _2531 = _2055 + 3u;
        uint _2535 = _2055 + 11u;
        float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2531].w)) * _858) * 0.949999988079071044921875);
        float _2550 = _2549 * _2549;
        float _2551 = cbLight._m0[_2531].x + _934;
        float _2552 = cbLight._m0[_2531].y + _935;
        float _2553 = cbLight._m0[_2531].z + _936;
        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
        float _2558 = _2557 * _2551;
        float _2559 = _2557 * _2552;
        float _2560 = _2557 * _2553;
        float _2561 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2531].xyz));
        float _4437 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2565 = dot(vec3(_855, _856, _857), vec3(_2558, _2559, _2560));
        float _4448 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2569 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_2558, _2559, _2560));
        float _4459 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2573 = _2550 * _2550;
        float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
        float _2586 = (exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2587 = 1.0 - _2550;
        float _2597 = (0.5 / (((_2223 * ((_2564 * _2587) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2587) + _2550) * _2564))) * _2564;
        float _4470 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2520 = (((_2586 * cbLight._m0[_2535].x) * _2599) * _2600) + _2410;
        _2522 = (((_2586 * cbLight._m0[_2535].y) * _2599) * _2600) + _2412;
        _2524 = (((_2586 * cbLight._m0[_2535].z) * _2599) * _2600) + _2414;
    }
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    if (_2053.y == 0u)
    {
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2675;
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2675;
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2675;
        uvec4 _2690 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2691 = _2690.x;
        uint _2702 = uint((float(_2690.y) * floor(float(uint(cbSceneParam._m0[85u].y * _943) / _2691))) + floor(float(uint(cbSceneParam._m0[85u].x * _942) / _2691)));
        float _2712 = (log2(_2678 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2713 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        uint _2716 = uint(isnan(14.0) ? _2713 : (isnan(_2713) ? 14.0 : min(_2713, 14.0)));
        uvec4 _2721 = texelFetch(g_lightClusterGridBuffer, int(((_2716 << 2u) + (_2702 << 6u)) >> 2u));
        uint _2722 = _2721.x;
        uint _2723 = _2690.z;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((((1u << ((_2723 >> 4u) & 15u)) + 4294967295u) & _2722) == 0u) || ((_2723 & 240u) == 0u))
        {
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
        }
        else
        {
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            uint _2974 = 0u;
            uint _2983;
            bool _2984;
            for (;;)
            {
                _2983 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_2974 << 2u)) >> 2u)).x;
                _2984 = _2983 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2984)
                {
                    frontier_phi_61_pred = _2968;
                    frontier_phi_61_pred_1 = _2973;
                    frontier_phi_61_pred_2 = _2972;
                    frontier_phi_61_pred_3 = _2971;
                    frontier_phi_61_pred_4 = _2970;
                    frontier_phi_61_pred_5 = _2969;
                }
                else
                {
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    uint _3098;
                    _3092 = _2968;
                    _3093 = _2969;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2983;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    for (;;)
                    {
                        uint _3102 = uint(findLSB(_3098)) + (_2974 << 5u);
                        uint _3099 = (_3098 + 4294967295u) & _3098;
                        uint _3104 = _3102 * 48u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3124 = (_3102 * 48u) + 4u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 3u)).x));
                        uint _3143 = (_3102 * 48u) + 8u;
                        vec3 _3154 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x));
                        float _3158 = _3118.x - _2676;
                        float _3159 = _3118.y - _2677;
                        float _3160 = _3118.z - _2678;
                        float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                        float _3164 = inversesqrt(_3161);
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3168 = dot(vec3(_961, _964, _967), vec3(_3165, _3166, _3167));
                        float _3173 = 1.0 - (_3161 * _3118.w);
                        float _4496 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3174 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3175 = sqrt(_3161) * _3137.w;
                        float _3178 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3168) + _3179;
                        float _3185 = _3175 * _3175;
                        float _3189 = ((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3174) / ((_3185 * 0.699999988079071044921875) + 1.0);
                        float _3193 = (-0.0) - _2676;
                        float _3194 = (-0.0) - _2677;
                        float _3195 = (-0.0) - _2678;
                        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3210 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                        float _3211 = 1.0 - _1021;
                        float _3218 = sqrt(1.0 - ((1.0 - (_3211 * _3211)) * (1.0 - (_3210 * _3210))));
                        float _3219 = _3218 * _3218;
                        float _3220 = _3219 * _3219;
                        float _3221 = _3200 + _3165;
                        float _3222 = _3201 + _3166;
                        float _3223 = _3202 + _3167;
                        float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                        float _3231 = dot(vec3(_961, _964, _967), vec3(_3200, _3201, _3202));
                        float _4512 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3234 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3235 = dot(vec3(_961, _964, _967), vec3(_3227 * _3221, _3227 * _3222, _3227 * _3223));
                        float _4523 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3238 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3242 = ((_3238 * _3238) * (_3220 + (-1.0))) + 1.0;
                        float _3243 = _3178 * _3219;
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3168) + _3244;
                        float _4534 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3249 = 1.0 - _3219;
                        float _3259 = (0.5 / (((_3248 * ((_3234 * _3249) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3219) * _3234))) * _3248;
                        float _4545 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3270 = (((_3220 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3242 * _3242) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125))) * _3174;
                        _3027 = (_3189 * _3137.x) + _3095;
                        _3028 = (_3189 * _3137.y) + _3096;
                        _3029 = (_3189 * _3137.z) + _3097;
                        _3024 = (_3270 * _3154.x) + _3092;
                        _3025 = (_3270 * _3154.y) + _3093;
                        _3026 = (_3270 * _3154.z) + _3094;
                        if (_3099 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3092 = _3024;
                            _3093 = _3025;
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3099;
                        }
                    }
                    frontier_phi_61_pred = _3024;
                    frontier_phi_61_pred_1 = _3029;
                    frontier_phi_61_pred_2 = _3028;
                    frontier_phi_61_pred_3 = _3027;
                    frontier_phi_61_pred_4 = _3026;
                    frontier_phi_61_pred_5 = _3025;
                }
                _2824 = frontier_phi_61_pred;
                _2834 = frontier_phi_61_pred_1;
                _2832 = frontier_phi_61_pred_2;
                _2830 = frontier_phi_61_pred_3;
                _2828 = frontier_phi_61_pred_4;
                _2826 = frontier_phi_61_pred_5;
                uint _2975 = _2974 + 1u;
                if (_2975 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2968 = _2824;
                    _2969 = _2826;
                    _2970 = _2828;
                    _2971 = _2830;
                    _2972 = _2832;
                    _2973 = _2834;
                    _2974 = _2975;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
        }
        uvec4 _2837 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2838 = _2837.z;
        uint _2840 = (_2838 >> 8u) & 15u;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        if (((4294967295u << _2840) & _2722) == 0u)
        {
            _2936 = _2823;
            _2938 = _2825;
            _2940 = _2827;
            _2942 = _2829;
            _2944 = _2831;
            _2946 = _2833;
        }
        else
        {
            float _2961 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
            float _2962 = _2961 * _2676;
            float _2963 = _2961 * _2677;
            float _2964 = _2961 * _2678;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2840 < ((_2838 >> 12u) & 15u))
            {
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _3075 = _2823;
                float _3076 = _2825;
                float _3077 = _2827;
                float _3078 = _2829;
                float _3079 = _2831;
                float _3080 = _2833;
                uint _3081 = _2840;
                uint _3090;
                bool _3091;
                for (;;)
                {
                    _3090 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                    _3091 = _3090 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3091)
                    {
                        frontier_phi_67_pred = _3078;
                        frontier_phi_67_pred_1 = _3079;
                        frontier_phi_67_pred_2 = _3080;
                        frontier_phi_67_pred_3 = _3077;
                        frontier_phi_67_pred_4 = _3076;
                        frontier_phi_67_pred_5 = _3075;
                    }
                    else
                    {
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3288 = _3075;
                        float _3289 = _3076;
                        float _3290 = _3077;
                        float _3291 = _3078;
                        float _3292 = _3079;
                        float _3293 = _3080;
                        uint _3294 = _3090;
                        uint _3295;
                        vec4 _3320;
                        float _3321;
                        vec4 _3336;
                        vec3 _3348;
                        vec4 _3363;
                        vec4 _3378;
                        float _3424;
                        bool _3425;
                        for (;;)
                        {
                            uint _3305 = ((_3081 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3294));
                            _3295 = (_3294 + 4294967295u) & _3294;
                            uint _3307 = _3305 * 40u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3321 = _3320.w;
                            uint _3323 = (_3305 * 40u) + 4u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3305 * 40u) + 8u;
                            _3348 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x));
                            uint _3350 = (_3305 * 40u) + 16u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3305 * 40u) + 20u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3305 * 40u) + 24u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3399 = (_3305 * 40u) + 28u;
                            vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            _3424 = fma(_2678, _3412.z, fma(_2677, _3412.y, _3412.x * _2676)) + _3412.w;
                            _3425 = !((fma(_2678, _3393.z, fma(_2677, _3393.y, _3393.x * _2676)) + _3393.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3425)
                            {
                                float _3452 = _3320.x - _2676;
                                float _3453 = _3320.y - _2677;
                                float _3454 = _3320.z - _2678;
                                float _3455 = dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454));
                                float _3458 = inversesqrt(_3455);
                                float _3459 = _3458 * _3452;
                                float _3460 = _3458 * _3453;
                                float _3461 = _3458 * _3454;
                                float _3465 = 1.0 - (_3455 / (_3321 * _3321));
                                float _4556 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3470 = sqrt(_3455) * _3336.w;
                                float _3472 = 1.39999997615814208984375 / (_3470 + 1.39999997615814208984375);
                                float _3473 = _3472 * _3472;
                                float _3476 = ((1.0 - _3473) * dot(vec3(_3459, _3460, _3461), vec3(_961, _964, _967))) + _3473;
                                float _3479 = _3470 * _3470;
                                float _3483 = (fma(_2678, _3363.z, fma(_2677, _3363.y, _3363.x * _2676)) + _3363.w) / _3424;
                                float _3484 = (fma(_2678, _3378.z, fma(_2677, _3378.y, _3378.x * _2676)) + _3378.w) / _3424;
                                float _3488 = 1.0 - dot(vec2(_3483, _3484), vec2(_3483, _3484));
                                float _4572 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3490 = _3489 * (((isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0))) * _3466) / ((_3479 * 0.699999988079071044921875) + 1.0));
                                float _3502 = exp2(log2(1.0 / ((_3479 * 3.5) + 5.0)) * 0.25);
                                float _3503 = 1.0 - _1021;
                                float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                                float _3511 = _3510 * _3510;
                                float _3512 = _3511 * _3511;
                                float _3513 = _3459 - _2962;
                                float _3514 = _3460 - _2963;
                                float _3515 = _3461 - _2964;
                                float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                                float _3523 = dot(vec3(_961, _964, _967), vec3((-0.0) - _2962, (-0.0) - _2963, (-0.0) - _2964));
                                float _4583 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3526 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3527 = dot(vec3(_961, _964, _967), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                                float _4594 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3530 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                                float _3535 = _3472 * _3511;
                                float _3536 = _3535 * _3535;
                                float _3542 = ((1.0 - _3536) * dot(vec3(_961, _964, _967), vec3(_3459, _3460, _3461))) + _3536;
                                float _4605 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3544 = 1.0 - _3511;
                                float _3554 = (0.5 / (((_3543 * ((_3526 * _3544) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3543 * _3544) + _3511) * _3526))) * _3543;
                                float _4616 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3564 = (_3489 * _3466) * (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) / ((_3534 * _3534) * ((_3479 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3564 * _3348.x;
                                frontier_phi_73_pred_1 = _3564 * _3348.y;
                                frontier_phi_73_pred_2 = _3490 * _3336.z;
                                frontier_phi_73_pred_3 = _3490 * _3336.y;
                                frontier_phi_73_pred_4 = _3490 * _3336.x;
                                frontier_phi_73_pred_5 = _3564 * _3348.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3568 = frontier_phi_73_pred;
                            _3569 = frontier_phi_73_pred_1;
                            _3573 = frontier_phi_73_pred_2;
                            _3572 = frontier_phi_73_pred_3;
                            _3571 = frontier_phi_73_pred_4;
                            _3570 = frontier_phi_73_pred_5;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            _3275 = _3568 + _3288;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            if (_3295 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3295;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3278;
                        frontier_phi_67_pred_1 = _3279;
                        frontier_phi_67_pred_2 = _3280;
                        frontier_phi_67_pred_3 = _3277;
                        frontier_phi_67_pred_4 = _3276;
                        frontier_phi_67_pred_5 = _3275;
                    }
                    _2943 = frontier_phi_67_pred;
                    _2945 = frontier_phi_67_pred_1;
                    _2947 = frontier_phi_67_pred_2;
                    _2941 = frontier_phi_67_pred_3;
                    _2939 = frontier_phi_67_pred_4;
                    _2937 = frontier_phi_67_pred_5;
                    uint _3082 = _3081 + 1u;
                    if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3075 = _2937;
                        _3076 = _2939;
                        _3077 = _2941;
                        _3078 = _2943;
                        _3079 = _2945;
                        _3080 = _2947;
                        _3081 = _3082;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2945;
                frontier_phi_55_56_ladder_1 = _2947;
                frontier_phi_55_56_ladder_2 = _2943;
                frontier_phi_55_56_ladder_3 = _2941;
                frontier_phi_55_56_ladder_4 = _2939;
                frontier_phi_55_56_ladder_5 = _2937;
            }
            else
            {
                frontier_phi_55_56_ladder = _2831;
                frontier_phi_55_56_ladder_1 = _2833;
                frontier_phi_55_56_ladder_2 = _2829;
                frontier_phi_55_56_ladder_3 = _2827;
                frontier_phi_55_56_ladder_4 = _2825;
                frontier_phi_55_56_ladder_5 = _2823;
            }
            _2936 = frontier_phi_55_56_ladder_5;
            _2938 = frontier_phi_55_56_ladder_4;
            _2940 = frontier_phi_55_56_ladder_3;
            _2942 = frontier_phi_55_56_ladder_2;
            _2944 = frontier_phi_55_56_ladder;
            _2946 = frontier_phi_55_56_ladder_1;
        }
        float _2951 = isnan(1.0) ? _1005 : (isnan(_1005) ? 1.0 : min(_1005, 1.0));
        _2735 = (_2951 * _2942) + _2187;
        _2737 = (_2951 * _2944) + _2189;
        _2739 = (_2951 * _2946) + _2191;
        _2741 = ((_2936 * 0.039999999105930328369140625) * _2951) + _2520;
        _2743 = ((_2938 * 0.039999999105930328369140625) * _2951) + _2522;
        _2745 = ((_2940 * 0.039999999105930328369140625) * _2951) + _2524;
    }
    else
    {
        _2735 = _2187;
        _2737 = _2189;
        _2739 = _2191;
        _2741 = _2520;
        _2743 = _2522;
        _2745 = _2524;
    }
    float _4632 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4643 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4654 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    uint _2765 = _248 + 6u;
    float _2773 = _942 / cbSceneParam._m0[86u].x;
    float _2774 = _943 / cbSceneParam._m0[86u].y;
    vec4 _2788 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, (log2((isnan(cbSceneParam._m0[77u].w) ? _876 : (isnan(_876) ? cbSceneParam._m0[77u].w : min(_876, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2790 = _2788.x;
    float _2791 = _2788.y;
    float _2792 = _2788.z;
    float _2793 = _2788.w;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    if (_876 > cbSceneParam._m0[78u].w)
    {
        float _2848 = isnan(_876) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _876 : min(cbSceneParam._m0[80u].w, _876));
        float _2849 = _2848 / _876;
        float _2860 = _2849 * _927;
        float _2861 = _928 * _2849;
        float _2862 = (-0.0) - _2861;
        float _2864 = _2849 * _929;
        float _2866 = (cbSceneParam._m0[77u].w * _2862) / _2848;
        float _2867 = _2866 + cbSceneParam._m0[79u].w;
        float _2868 = cbSceneParam._m0[79u].w - _2861;
        float _2874 = sqrt(((_2860 * _2860) + (_2861 * _2861)) + (_2864 * _2864));
        float _2877 = (1.0 - (cbSceneParam._m0[77u].w / _2848)) * _2874;
        float _2882 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2884 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3037;
        if (abs((_2862 - _2866) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3037 = ((((_2867 > 0.0) ? exp2(_2882 * _2867) : (2.0 - exp2(_2884 * _2867))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2877;
        }
        else
        {
            float _2997 = 1.0 / cbSceneParam._m0[80u].x;
            float _2998 = isnan(_2868) ? _2867 : (isnan(_2867) ? _2868 : max(_2867, _2868));
            float _2999 = isnan(_2868) ? _2867 : (isnan(_2867) ? _2868 : min(_2867, _2868));
            float _3008 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : min(_2998, 0.0));
            float _3009 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : min(_2999, 0.0));
            _3037 = ((abs(_2874 / _2862) * cbSceneParam._m0[80u].y) * ((((_3008 - _3009) * 2.0) - ((exp2(_2882 * (isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0)))) - exp2(_2882 * (isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))))) * _2997)) - ((exp2(_2884 * _3008) - exp2(_2884 * _3009)) * _2997))) + (_2877 * cbSceneParam._m0[80u].z);
        }
        vec4 _3039 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, 1.0), 0.0);
        float _3048 = exp2((_3037 * (-1.44269502162933349609375)) * (1.0 - _3039.w));
        float _3049 = log2(_3048);
        float _3065 = log2(_2793);
        _2886 = (exp2(_3065 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].x)) * _3039.x) / cbSceneParam._m0[78u].x)) + _2790;
        _2888 = (exp2(_3065 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].y)) * _3039.y) / cbSceneParam._m0[78u].y)) + _2791;
        _2890 = (exp2(_3065 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].z)) * _3039.z) / cbSceneParam._m0[78u].z)) + _2792;
        _2892 = _3048 * _2793;
    }
    else
    {
        _2886 = _2790;
        _2888 = _2791;
        _2890 = _2792;
        _2892 = _2793;
    }
    float _2904 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2905 = _2904 == 3.0;
    float _2906 = log2(_2892);
    float _2913 = exp2(_2906 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2735 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1005))) + ((_2741 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1808)) * cbPerFrame._m0[3u].x));
    float _2914 = exp2(_2906 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2737 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1005))) + ((_2743 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1808)) * cbPerFrame._m0[3u].x));
    float _2915 = exp2(_2906 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2739 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1005))) + ((_2745 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1808)) * cbPerFrame._m0[3u].x));
    float _2924 = (_2904 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2924 * (_2905 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2886)));
    SV_Target.y = _2924 * (_2905 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2888)));
    SV_Target.z = _2924 * (_2905 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2890)));
    SV_Target.w = cbInstanceData._m0[_2765].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2765].w;
}


