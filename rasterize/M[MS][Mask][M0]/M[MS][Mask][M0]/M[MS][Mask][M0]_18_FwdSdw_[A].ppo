#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1372;
float _4015;
float _4016;
float _4017;
float _4018;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4027 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4038 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4049 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _431 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _448 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_419 - _431) * cbMtdParam._m0[24u].z) + _431) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4060 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _456 = (_449 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _457 = (_449 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _458 = (_449 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _462 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _456;
    float _465 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _457;
    float _468 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _458;
    float _475 = ((_456 - _462) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) + _462;
    float _476 = ((_457 - _465) * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) + _465;
    float _477 = ((_458 - _468) * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) + _468;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _550 = ((_520.z - _541) * _449) + _541;
    float _553 = ((((_520.x - _539) * _449) + _539) * 2.0) + (-1.0);
    float _554 = ((((_520.y - _540) * _449) + _540) * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _4071 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _560 = sqrt(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _603 = _601.x;
    float _604 = 1.0 - _603;
    float _610 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _613 = ((isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : min(_610, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _622 = (_613 - ((((((_603 - _604) * cbMtdParam._m0[24u].w) + _604) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _613))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4092 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _630 = (_623 * (cbMtdParam._m0[17u].x - _475)) + _475;
    float _631 = (_623 * (cbMtdParam._m0[17u].y - _476)) + _476;
    float _632 = (_623 * (cbMtdParam._m0[17u].z - _477)) + _477;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _646 = _644.x;
    float _647 = 1.0 - _646;
    float _672 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_646 - _647) * cbMtdParam._m0[24u].y) + _647) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4103 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _681 = ((((cbMtdParam._m0[10u].x - _630) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _673) + _630;
    float _682 = ((((cbMtdParam._m0[10u].y - _631) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _673) + _631;
    float _683 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _632)) * _673) + _632;
    float _688 = (((_495.z - _550) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _550;
    float _692 = ((_576.z - _688) * cbMtdParam._m0[19u].w) + _688;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _713 = (_706.x * 2.0) + (-1.0);
    float _714 = (_706.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _4114 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _723 = (_623 * (_706.z - _692)) + _692;
    float _726 = ((cbMtdParam._m0[23u].y - _723) * _673) + _723;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _751 = (_745.x * 2.0) + (-1.0);
    float _752 = (_745.y * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _4125 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _767 = (_553 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_495.x * 2.0) + (-1.0)))) + (((_576.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _768 = (_554 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_495.y * 2.0) + (-1.0)))) + (((_576.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _780 = (((_713 - _767) + (cbMtdParam._m0[21u].x * _767)) * _623) + _767;
    float _781 = (((_714 - _768) + (cbMtdParam._m0[21u].x * _768)) * _623) + _768;
    float _782 = (_623 * (sqrt(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) - _560)) + _560;
    float _793 = (((_751 - _780) + (_780 * cbMtdParam._m0[22u].z)) * _673) + _780;
    float _794 = (((_752 - _781) + (_781 * cbMtdParam._m0[22u].z)) * _673) + _781;
    float _795 = ((sqrt(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) - _782) * _673) + _782;
    float _797 = cbMtdParam._m0[22u].x + _576.w;
    float _800 = fma(_795, _251 * NORMAL.x, fma(_794, _258 * TANGENT.x, (_244 * _236) * _793));
    float _803 = fma(_795, _251 * NORMAL.y, fma(_794, _258 * TANGENT.y, (_244 * _237) * _793));
    float _806 = fma(_795, _251 * NORMAL.z, fma(_794, _258 * TANGENT.z, (_244 * _238) * _793));
    float _810 = inversesqrt(dot(vec3(_800, _803, _806), vec3(_800, _803, _806)));
    float _811 = _810 * _800;
    float _812 = _810 * _803;
    float _813 = _810 * _806;
    float _4136 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _814 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4158 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4169 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4180 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _832 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _883 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _873);
    float _884 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _873);
    float _885 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _873);
    float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
    float _890 = _883 * _889;
    float _891 = _884 * _889;
    float _892 = _885 * _889;
    vec4 _897 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _899 = _897.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1053 = sqrt(((_883 * _883) + (_884 * _884)) + (_885 * _885));
        float _1059 = (cbMatDynParam._m0[5u].x * _1053) + cbMatDynParam._m0[5u].y;
        float _4191 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1064 = (cbMatDynParam._m0[5u].z * _1053) + cbMatDynParam._m0[5u].w;
        float _4202 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) - _1060)) + _1060) < ((_899 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _910 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _911 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _929 = fma(_813, cbSceneParam._m0[5u].z, fma(_812, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _811));
    float _932 = fma(_813, cbSceneParam._m0[6u].z, fma(_812, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _811));
    float _935 = fma(_813, cbSceneParam._m0[7u].z, fma(_812, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _811));
    uint _948 = _283 + 9u;
    uint _949 = _948 + uint(cbMatDynParam._m0[0u].w);
    float _955 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_949].x;
    float _956 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_949].y;
    float _957 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * cbInstanceData._m0[_949].z;
    float _4213 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    vec4 _969 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _910, cbSceneParam._m0[86u].y * _911));
    float _973 = ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * TEXCOORD_5.w) * _969.x;
    float _974 = dot(vec3(_811, _812, _813), vec3(_890, _891, _892));
    float _977 = _974 * 2.0;
    float _981 = (_977 * _811) - _890;
    float _982 = (_977 * _812) - _891;
    float _983 = (_977 * _813) - _892;
    float _987 = abs(dot(vec3(_890, _891, _892), vec3(_811, _812, _813)));
    float _4246 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _989 = sqrt(_814);
    float _1002 = exp2((_989 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_989 * 3.0));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1371;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1096 = fma(_1042, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034));
        float _1100 = fma(_1042, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034));
        float _1104 = fma(_1042, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034));
        float _1129 = _1034 + _811;
        float _1130 = _1038 + _812;
        float _1131 = _1042 + _813;
        float _1141 = fma(_1131, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129)) - _1096;
        float _1142 = fma(_1131, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129)) - _1100;
        float _1143 = fma(_1131, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129)) - _1104;
        float _1147 = inversesqrt(dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143)));
        float _1160 = ((_1147 * _1141) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1096 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1147 * _1142) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1100 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1147 * _1143) / cbModelParam._m0[34u].z) + ((((((_1104 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        float _1199 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1165.x + (-0.5));
        float _1201 = _1199 * (_1165.y + (-0.5));
        float _1202 = _1199 * (_1165.z + (-0.5));
        float _1209 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1172.x + (-0.5));
        float _1211 = _1209 * (_1172.y + (-0.5));
        float _1212 = _1209 * (_1172.z + (-0.5));
        float _1219 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1179.x + (-0.5));
        float _1221 = _1219 * (_1179.y + (-0.5));
        float _1222 = _1219 * (_1179.z + (-0.5));
        float _1229 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1186.x + (-0.5));
        float _1231 = _1229 * (_1186.y + (-0.5));
        float _1232 = _1229 * (_1186.z + (-0.5));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = _1200 * 0.5;
        float _1237 = _1210 * 0.5;
        float _1238 = _1220 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1253 = (dot(vec3(_811, _812, _813), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1263 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4294 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1265 + 1.0))) + _1270) * _1233;
        float _1280 = _1201 * 0.5;
        float _1281 = _1211 * 0.5;
        float _1282 = _1221 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_811, _812, _813), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4327 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1307 + 1.0))) + _1312) * _1234;
        float _1322 = _1202 * 0.5;
        float _1323 = _1212 * 0.5;
        float _1324 = _1222 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_811, _812, _813), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4360 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1349 + 1.0))) + _1354) * _1235;
        _1371 = _1202;
        _1373 = _1201;
        _1374 = _1200;
        _1375 = _1212;
        _1376 = _1211;
        _1377 = _1210;
        _1378 = _1222;
        _1379 = _1221;
        _1380 = _1220;
        _1381 = _1235;
        _1382 = _1234;
        _1383 = _1233;
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1372;
        _1373 = _1372;
        _1374 = _1372;
        _1375 = _1372;
        _1376 = _1372;
        _1377 = _1372;
        _1378 = _1372;
        _1379 = _1372;
        _1380 = _1372;
        _1381 = _1372;
        _1382 = _1372;
        _1383 = _1372;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1042, cbModelParam._m0[30u].z, fma(_1038, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1034));
        float _1418 = fma(_1042, cbModelParam._m0[31u].z, fma(_1038, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1034));
        float _1422 = fma(_1042, cbModelParam._m0[32u].z, fma(_1038, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1034));
        float _1445 = _1034 + _811;
        float _1446 = _1038 + _812;
        float _1447 = _1042 + _813;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_811, _812, _813), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4423 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_811, _812, _813), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4456 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_811, _812, _813), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4489 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1372;
        _1684 = _1372;
        _1685 = _1372;
        _1686 = _1372;
        _1687 = _1372;
        _1688 = _1372;
        _1689 = _1372;
        _1690 = _1372;
        _1691 = _1372;
        _1692 = _1372;
        _1693 = _1372;
        _1694 = _1372;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1384)) + _1384;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1385)) + _1385;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1386)) + _1386;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _981 * 0.5;
    float _1752 = _982 * 0.5;
    float _1753 = _983 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1371, _1375, _1378, _1381));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _814);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1868 = fma(_1042, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034)) + cbModelParam._m0[13u].w;
        float _1872 = fma(_1042, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034)) + cbModelParam._m0[14u].w;
        float _1876 = fma(_1042, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034)) + cbModelParam._m0[15u].w;
        float _1879 = fma(_983, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981));
        float _1882 = fma(_983, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981));
        float _1885 = fma(_983, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981));
        float _1913;
        if (_1879 > 0.0)
        {
            _1913 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1913 = frontier_phi_17_15_ladder;
        }
        float _2083;
        if (_1882 > 0.0)
        {
            _2083 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2083 = frontier_phi_26_22_ladder;
        }
        float _2378;
        if (_1885 > 0.0)
        {
            _2378 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2378 = frontier_phi_38_33_ladder;
        }
        float _2380 = isnan(_2083) ? _1913 : (isnan(_1913) ? _2083 : min(_1913, _2083));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1879) + _1868;
        float _2386 = (_2381 * _1882) + _1872;
        float _2387 = (_2381 * _1885) + _1876;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2388;
        float _2392 = _2388 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 > _2392) || ((_2386 < _2390) || ((_2385 < _2390) || (_2385 > _2392))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2387, cbModelParam._m0[9u].z, fma(_2386, cbModelParam._m0[9u].y, _2385 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2387, cbModelParam._m0[10u].z, fma(_2386, cbModelParam._m0[10u].y, _2385 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2387, cbModelParam._m0[11u].z, fma(_2386, cbModelParam._m0[11u].y, _2385 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_16_38_ladder = _2532.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2532.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2532.x * cbModelParam._m0[1u].y;
        }
        _1901 = frontier_phi_16_38_ladder_2;
        _1903 = frontier_phi_16_38_ladder_1;
        _1905 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_981, _982, _983), _1820);
        _1901 = _1889.x * cbModelParam._m0[1u].y;
        _1903 = _1889.y * cbModelParam._m0[1u].y;
        _1905 = _1889.z * cbModelParam._m0[1u].y;
    }
    float _1909 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _814);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1909 : min(cbModelParam._m0[25u].w, _1909));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1964 = fma(_1042, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034)) + cbModelParam._m0[21u].w;
        float _1968 = fma(_1042, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034)) + cbModelParam._m0[22u].w;
        float _1972 = fma(_1042, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034)) + cbModelParam._m0[23u].w;
        float _1975 = fma(_983, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981));
        float _1978 = fma(_983, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981));
        float _1981 = fma(_983, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981));
        float _2088;
        if (_1975 > 0.0)
        {
            _2088 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2088 = frontier_phi_28_24_ladder;
        }
        float _2405;
        if (_1978 > 0.0)
        {
            _2405 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2405 = frontier_phi_40_35_ladder;
        }
        float _2732;
        if (_1981 > 0.0)
        {
            _2732 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2732 = frontier_phi_50_47_ladder;
        }
        float _2734 = isnan(_2405) ? _2088 : (isnan(_2088) ? _2405 : min(_2088, _2405));
        float _2735 = isnan(_2732) ? _2734 : (isnan(_2734) ? _2732 : min(_2734, _2732));
        float _2739 = (_2735 * _1975) + _1964;
        float _2740 = (_2735 * _1978) + _1968;
        float _2741 = (_2735 * _1981) + _1972;
        float _2742 = _2735 * 9.9999997473787516355514526367188e-05;
        float _2743 = (-1.0) - _2742;
        float _2745 = _2742 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2741 > _2745) || ((_2741 < _2743) || ((_2740 > _2745) || ((_2740 < _2743) || ((_2739 < _2743) || (_2739 > _2745))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2741, cbModelParam._m0[17u].z, fma(_2740, cbModelParam._m0[17u].y, _2739 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2741, cbModelParam._m0[18u].z, fma(_2740, cbModelParam._m0[18u].y, _2739 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2741, cbModelParam._m0[19u].z, fma(_2740, cbModelParam._m0[19u].y, _2739 * cbModelParam._m0[19u].x))), _1910);
            frontier_phi_25_50_ladder = _2859.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2859.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2859.x * cbModelParam._m0[1u].z;
        }
        _2000 = frontier_phi_25_50_ladder_2;
        _2002 = frontier_phi_25_50_ladder_1;
        _2004 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_981, _982, _983), _1910);
        _2000 = _1984.x * cbModelParam._m0[1u].z;
        _2002 = _1984.y * cbModelParam._m0[1u].z;
        _2004 = _1984.z * cbModelParam._m0[1u].z;
    }
    float _2016 = ((((1.0 - _1002) * ((_989 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1002 * _989)) * _973;
    float _2017 = _2016 * ((cbModelParam._m0[1u].w * (_2000 - _1901)) + _1901);
    float _2018 = _2016 * ((cbModelParam._m0[1u].w * (_2002 - _1903)) + _1903);
    float _2019 = _2016 * ((cbModelParam._m0[1u].w * (_2004 - _1905)) + _1905);
    float _2022 = fma(_2019, cbSceneParam._m0[89u].z, fma(_2018, cbSceneParam._m0[89u].y, _2017 * cbSceneParam._m0[89u].x));
    float _2025 = fma(_2019, cbSceneParam._m0[90u].z, fma(_2018, cbSceneParam._m0[90u].y, _2017 * cbSceneParam._m0[90u].x));
    float _2028 = fma(_2019, cbSceneParam._m0[91u].z, fma(_2018, cbSceneParam._m0[91u].y, _2017 * cbSceneParam._m0[91u].x));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2075 = _2062 / _2074;
    float _2076 = _2066 / _2074;
    float _2077 = _2070 / _2074;
    float _2224;
    float _2225;
    float _2226;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2104 = ((uint(_2077 > cbSceneParam._m0[59u].y) + uint(_2077 > cbSceneParam._m0[59u].x)) + uint(_2077 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2105 = _2104 + 43u;
        uint _2113 = _2104 + 44u;
        uint _2121 = _2104 + 45u;
        uint _2129 = _2104 + 46u;
        float _2140 = fma(_2074, cbSceneParam._m0[_2105].w, fma(_2070, cbSceneParam._m0[_2105].z, fma(_2066, cbSceneParam._m0[_2105].y, _2062 * cbSceneParam._m0[_2105].x)));
        float _2144 = fma(_2074, cbSceneParam._m0[_2113].w, fma(_2070, cbSceneParam._m0[_2113].z, fma(_2066, cbSceneParam._m0[_2113].y, _2062 * cbSceneParam._m0[_2113].x)));
        float _2152 = fma(_2074, cbSceneParam._m0[_2129].w, fma(_2070, cbSceneParam._m0[_2129].z, fma(_2066, cbSceneParam._m0[_2129].y, _2062 * cbSceneParam._m0[_2129].x)));
        float _2157 = cbSceneParam._m0[33u].z * _2152;
        float _2159 = cbSceneParam._m0[33u].w * _2152;
        float _2162 = fma(_2074, cbSceneParam._m0[_2121].w, fma(_2070, cbSceneParam._m0[_2121].z, fma(_2066, cbSceneParam._m0[_2121].y, _2062 * cbSceneParam._m0[_2121].x))) / _2152;
        float _2210 = (cbSceneParam._m0[33u].x - sqrt(((_2076 * _2076) + (_2075 * _2075)) + (_2077 * _2077))) * cbSceneParam._m0[33u].y;
        float _4615 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2217 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 + _2140) / _2152, (_2159 + _2144) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 + _2140) / _2152, (_2144 - _2157) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 - _2157) / _2152, (_2144 - _2159) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 - _2159) / _2152, (_2157 + _2144) / _2152), _2162), 0.0)).x), vec4(0.25)));
        _2224 = 1.0 - (_2217 * cbSceneParam._m0[34u].x);
        _2225 = 1.0 - (_2217 * cbSceneParam._m0[34u].y);
        _2226 = 1.0 - (_2217 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2224 = 1.0;
        _2225 = 1.0;
        _2226 = 1.0;
    }
    float _2290;
    float _2292;
    float _2294;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2278 = fma(_2074, cbSceneParam._m0[63u].w, fma(_2070, cbSceneParam._m0[63u].z, fma(_2066, cbSceneParam._m0[63u].y, _2062 * cbSceneParam._m0[63u].x)));
        float _2279 = fma(_2074, cbSceneParam._m0[60u].w, fma(_2070, cbSceneParam._m0[60u].z, fma(_2066, cbSceneParam._m0[60u].y, _2062 * cbSceneParam._m0[60u].x))) / _2278;
        float _2280 = fma(_2074, cbSceneParam._m0[61u].w, fma(_2070, cbSceneParam._m0[61u].z, fma(_2066, cbSceneParam._m0[61u].y, _2062 * cbSceneParam._m0[61u].x))) / _2278;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2279 >= cbSceneParam._m0[64u].x) && (_2280 >= cbSceneParam._m0[64u].y)) && (_2279 <= cbSceneParam._m0[64u].z)) && (_2280 <= cbSceneParam._m0[64u].w))
        {
            float _2418 = fma(_2074, cbSceneParam._m0[62u].w, fma(_2070, cbSceneParam._m0[62u].z, fma(_2066, cbSceneParam._m0[62u].y, _2062 * cbSceneParam._m0[62u].x))) / _2278;
            float _2422 = isnan(cbSceneParam._m0[41u].w) ? _2418 : (isnan(_2418) ? cbSceneParam._m0[41u].w : max(_2418, cbSceneParam._m0[41u].w));
            float _2465 = (cbSceneParam._m0[33u].x - sqrt(((_2076 * _2076) + (_2075 * _2075)) + (_2077 * _2077))) * cbSceneParam._m0[33u].y;
            float _4631 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
            float _2472 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2279, cbSceneParam._m0[33u].w + _2280), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2279, _2280 - cbSceneParam._m0[33u].z), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2279 - cbSceneParam._m0[33u].z, _2280 - cbSceneParam._m0[33u].w), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2279 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2280), _2422), 0.0)).x), vec4(0.25)));
            float _2476 = 1.0 - (_2472 * cbSceneParam._m0[34u].x);
            float _2477 = 1.0 - (_2472 * cbSceneParam._m0[34u].y);
            float _2478 = 1.0 - (_2472 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
            frontier_phi_37_36_ladder_1 = isnan(_2477) ? _2225 : (isnan(_2225) ? _2477 : min(_2225, _2477));
            frontier_phi_37_36_ladder_2 = isnan(_2476) ? _2224 : (isnan(_2224) ? _2476 : min(_2224, _2476));
        }
        else
        {
            frontier_phi_37_36_ladder = _2226;
            frontier_phi_37_36_ladder_1 = _2225;
            frontier_phi_37_36_ladder_2 = _2224;
        }
        _2290 = frontier_phi_37_36_ladder_2;
        _2292 = frontier_phi_37_36_ladder_1;
        _2294 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2290 = _2224;
        _2292 = _2225;
        _2294 = _2226;
    }
    uvec4 _2299 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2301 = _2299.x * 14u;
    uint _2302 = _2301 + 13u;
    float _2309 = _973 + (-1.0);
    float _2314 = (cbLight._m0[_2302].x * _2309) + 1.0;
    float _2315 = (cbLight._m0[_2302].y * _2309) + 1.0;
    float _2316 = (cbLight._m0[_2302].z * _2309) + 1.0;
    float _2317 = (cbLight._m0[_2302].w * _2309) + 1.0;
    uint _2318 = _2301 + 5u;
    float _2324 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
    uint _2328 = _2301 + 4u;
    float _2337 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
    uint _2341 = _2301 | 1u;
    float _2352 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_811, _812, _813));
    float _2355 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_811, _812, _813));
    float _4667 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _4678 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2360 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2362 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * 0.3183098733425140380859375;
    float _2369 = ((cbLight._m0[_2318].x * _2324) * _2362) + (((cbLight._m0[_2328].x * _2290) * _2337) * _2360);
    float _2370 = ((_2324 * cbLight._m0[_2318].y) * _2362) + (((cbLight._m0[_2328].y * _2292) * _2337) * _2360);
    float _2371 = ((_2324 * cbLight._m0[_2318].z) * _2362) + (((cbLight._m0[_2328].z * _2294) * _2337) * _2360);
    uvec4 _2375 = floatBitsToUint(cbLight._m0[_2301 + 12u]);
    bool _2377 = _2375.x == 0u;
    float _2479;
    float _2481;
    float _2483;
    if (_2377)
    {
        _2479 = _2369;
        _2481 = _2370;
        _2483 = _2371;
    }
    else
    {
        uint _2487 = _2301 + 6u;
        float _2503 = (dot(vec3(cbLight._m0[_2301 + 2u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2504 = _2503 * _2503;
        float _4689 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2505 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2506 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2479 = (((cbLight._m0[_2487].x * 0.3183098733425140380859375) * _2505) * _2506) + _2369;
        _2481 = (((cbLight._m0[_2487].y * 0.3183098733425140380859375) * _2505) * _2506) + _2370;
        _2483 = (((cbLight._m0[_2487].z * 0.3183098733425140380859375) * _2505) * _2506) + _2371;
    }
    bool _2486 = _2375.y == 0u;
    float _2541;
    float _2543;
    float _2545;
    if (_2486)
    {
        _2541 = _2479;
        _2543 = _2481;
        _2545 = _2483;
    }
    else
    {
        uint _2703 = _2301 + 7u;
        float _2719 = (dot(vec3(cbLight._m0[_2301 + 3u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2720 = _2719 * _2719;
        float _4705 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2721 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2722 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2541 = (((cbLight._m0[_2703].x * 0.3183098733425140380859375) * _2721) * _2722) + _2479;
        _2543 = (((cbLight._m0[_2703].y * 0.3183098733425140380859375) * _2721) * _2722) + _2481;
        _2545 = (((cbLight._m0[_2703].z * 0.3183098733425140380859375) * _2721) * _2722) + _2483;
    }
    uint _2548 = _2301 + 8u;
    float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _814) * 0.949999988079071044921875);
    float _2562 = _2561 * _2561;
    float _2563 = cbLight._m0[_2301].x + _890;
    float _2564 = cbLight._m0[_2301].y + _891;
    float _2565 = cbLight._m0[_2301].z + _892;
    float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
    float _2570 = _2569 * _2563;
    float _2571 = _2569 * _2564;
    float _2572 = _2569 * _2565;
    float _2573 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2301].xyz));
    float _4721 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _4732 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2577 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2578 = dot(vec3(_811, _812, _813), vec3(_2570, _2571, _2572));
    float _4743 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2582 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2570, _2571, _2572));
    float _4754 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2586 = _2562 * _2562;
    float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
    float _2601 = (exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2602 = 1.0 - _2562;
    float _2613 = (0.5 / (((_2577 * ((_2576 * _2602) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2602) + _2562) * _2576))) * _2576;
    float _4765 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2615 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
    uint _2629 = _2301 + 9u;
    float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _814) * 0.949999988079071044921875);
    float _2641 = _2640 * _2640;
    float _2642 = cbLight._m0[_2341].x + _890;
    float _2643 = cbLight._m0[_2341].y + _891;
    float _2644 = cbLight._m0[_2341].z + _892;
    float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
    float _2649 = _2648 * _2642;
    float _2650 = _2648 * _2643;
    float _2651 = _2648 * _2644;
    float _2652 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2341].xyz));
    float _4776 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2656 = dot(vec3(_811, _812, _813), vec3(_2649, _2650, _2651));
    float _4787 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2659 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2660 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2649, _2650, _2651));
    float _4798 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2664 = _2641 * _2641;
    float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
    float _2677 = (exp2(log2(1.0 - (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2678 = 1.0 - _2641;
    float _2688 = (0.5 / (((_2577 * ((_2655 * _2678) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2678) + _2641) * _2655))) * _2655;
    float _4809 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2690 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
    float _2700 = (((_2677 * cbLight._m0[_2629].x) * _2690) * _2324) + ((((cbLight._m0[_2548].x * _2290) * _2601) * _2615) * _2337);
    float _2701 = (((_2677 * cbLight._m0[_2629].y) * _2690) * _2324) + ((((cbLight._m0[_2548].y * _2292) * _2601) * _2615) * _2337);
    float _2702 = (((_2677 * cbLight._m0[_2629].z) * _2690) * _2324) + ((((cbLight._m0[_2548].z * _2294) * _2601) * _2615) * _2337);
    float _2758;
    float _2760;
    float _2762;
    if (_2377)
    {
        _2758 = _2700;
        _2760 = _2701;
        _2762 = _2702;
    }
    else
    {
        uint _2764 = _2301 + 2u;
        uint _2768 = _2301 + 10u;
        float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2764].w)) * _814) * 0.949999988079071044921875);
        float _2783 = _2782 * _2782;
        float _2784 = cbLight._m0[_2764].x + _890;
        float _2785 = cbLight._m0[_2764].y + _891;
        float _2786 = cbLight._m0[_2764].z + _892;
        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
        float _2791 = _2790 * _2784;
        float _2792 = _2790 * _2785;
        float _2793 = _2790 * _2786;
        float _2794 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2764].xyz));
        float _4820 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2798 = dot(vec3(_811, _812, _813), vec3(_2791, _2792, _2793));
        float _4831 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2801 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2802 = dot(vec3(cbLight._m0[_2764].xyz), vec3(_2791, _2792, _2793));
        float _4842 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2806 = _2783 * _2783;
        float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
        float _2819 = (exp2(log2(1.0 - (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2820 = 1.0 - _2783;
        float _2830 = (0.5 / (((_2577 * ((_2797 * _2820) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2820) + _2783) * _2797))) * _2797;
        float _4853 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2832 = (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
        float _2833 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2758 = (((_2819 * cbLight._m0[_2768].x) * _2832) * _2833) + _2700;
        _2760 = (((_2819 * cbLight._m0[_2768].y) * _2832) * _2833) + _2701;
        _2762 = (((_2819 * cbLight._m0[_2768].z) * _2832) * _2833) + _2702;
    }
    float _2864;
    float _2866;
    float _2868;
    if (_2486)
    {
        _2864 = _2758;
        _2866 = _2760;
        _2868 = _2762;
    }
    else
    {
        uint _2875 = _2301 + 3u;
        uint _2879 = _2301 + 11u;
        float _2893 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2875].w)) * _814) * 0.949999988079071044921875);
        float _2894 = _2893 * _2893;
        float _2895 = cbLight._m0[_2875].x + _890;
        float _2896 = cbLight._m0[_2875].y + _891;
        float _2897 = cbLight._m0[_2875].z + _892;
        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
        float _2902 = _2901 * _2895;
        float _2903 = _2901 * _2896;
        float _2904 = _2901 * _2897;
        float _2905 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2875].xyz));
        float _4869 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2908 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2909 = dot(vec3(_811, _812, _813), vec3(_2902, _2903, _2904));
        float _4880 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2912 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
        float _2913 = dot(vec3(cbLight._m0[_2875].xyz), vec3(_2902, _2903, _2904));
        float _4891 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2917 = _2894 * _2894;
        float _2921 = ((_2912 * _2912) * (_2917 + (-1.0))) + 1.0;
        float _2930 = (exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2931 = 1.0 - _2894;
        float _2941 = (0.5 / (((_2577 * ((_2908 * _2931) + _2894)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2931) + _2894) * _2908))) * _2908;
        float _4902 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2943 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2917 / ((_2921 * _2921) * 3.141590118408203125));
        float _2944 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2864 = (((_2930 * cbLight._m0[_2879].x) * _2943) * _2944) + _2758;
        _2866 = (((_2930 * cbLight._m0[_2879].y) * _2943) * _2944) + _2760;
        _2868 = (((_2930 * cbLight._m0[_2879].z) * _2943) * _2944) + _2762;
    }
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_2299.y == 0u)
    {
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.x;
        uint _2977 = uint((float(_2965.y) * floor(float(uint(cbSceneParam._m0[85u].y * _911) / _2966))) + floor(float(uint(cbSceneParam._m0[85u].x * _910) / _2966)));
        float _2987 = (log2(_2077 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2988 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        uint _2991 = uint(isnan(14.0) ? _2988 : (isnan(_2988) ? 14.0 : min(_2988, 14.0)));
        uvec4 _2996 = texelFetch(g_lightClusterGridBuffer, int(((_2991 << 2u) + (_2977 << 6u)) >> 2u));
        uint _2997 = _2996.x;
        uint _2998 = _2965.z;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        if (((((1u << ((_2998 >> 4u) & 15u)) + 4294967295u) & _2997) == 0u) || ((_2998 & 240u) == 0u))
        {
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
        }
        else
        {
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            uint _3236 = 0u;
            uint _3245;
            bool _3246;
            for (;;)
            {
                _3245 = texelFetch(g_lightClassification, int((((_2991 << 5u) + (_2977 << 9u)) + (_3236 << 2u)) >> 2u)).x;
                _3246 = _3245 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3246)
                {
                    frontier_phi_71_pred = _3235;
                    frontier_phi_71_pred_1 = _3234;
                    frontier_phi_71_pred_2 = _3233;
                    frontier_phi_71_pred_3 = _3232;
                    frontier_phi_71_pred_4 = _3231;
                    frontier_phi_71_pred_5 = _3230;
                }
                else
                {
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    uint _3381;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3245;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    for (;;)
                    {
                        uint _3385 = uint(findLSB(_3381)) + (_3236 << 5u);
                        uint _3382 = (_3381 + 4294967295u) & _3381;
                        uint _3387 = _3385 * 48u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 3u)).x));
                        uint _3407 = (_3385 * 48u) + 4u;
                        vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 3u)).x));
                        uint _3426 = (_3385 * 48u) + 8u;
                        vec3 _3437 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3426)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 2u)).x));
                        float _3441 = _3401.x - _2075;
                        float _3442 = _3401.y - _2076;
                        float _3443 = _3401.z - _2077;
                        float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                        float _3447 = inversesqrt(_3444);
                        float _3448 = _3447 * _3441;
                        float _3449 = _3447 * _3442;
                        float _3450 = _3447 * _3443;
                        float _3451 = dot(vec3(_929, _932, _935), vec3(_3448, _3449, _3450));
                        float _3456 = 1.0 - (_3444 * _3401.w);
                        float _4928 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3457 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3458 = sqrt(_3444) * _3420.w;
                        float _3461 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3451) + _3462;
                        float _3468 = _3458 * _3458;
                        float _3472 = ((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3457) / ((_3468 * 0.699999988079071044921875) + 1.0);
                        float _3476 = (-0.0) - _2075;
                        float _3477 = (-0.0) - _2076;
                        float _3478 = (-0.0) - _2077;
                        float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                        float _3483 = _3482 * _3476;
                        float _3484 = _3482 * _3477;
                        float _3485 = _3482 * _3478;
                        float _3492 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                        float _3493 = 1.0 - _989;
                        float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                        float _3501 = _3500 * _3500;
                        float _3502 = _3501 * _3501;
                        float _3503 = _3483 + _3448;
                        float _3504 = _3484 + _3449;
                        float _3505 = _3485 + _3450;
                        float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                        float _3513 = dot(vec3(_929, _932, _935), vec3(_3483, _3484, _3485));
                        float _4944 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3516 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3517 = dot(vec3(_929, _932, _935), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                        float _4955 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3520 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                        float _3525 = _3461 * _3501;
                        float _3526 = _3525 * _3525;
                        float _3529 = ((1.0 - _3526) * _3451) + _3526;
                        float _4966 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3530 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                        float _3531 = 1.0 - _3501;
                        float _3541 = (0.5 / (((_3530 * ((_3516 * _3531) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3530 * _3531) + _3501) * _3516))) * _3530;
                        float _4977 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3552 = (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) / ((_3524 * _3524) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125))) * _3457;
                        _3305 = (_3472 * _3420.x) + _3378;
                        _3306 = (_3472 * _3420.y) + _3379;
                        _3307 = (_3472 * _3420.z) + _3380;
                        _3302 = (_3552 * _3437.x) + _3375;
                        _3303 = (_3552 * _3437.y) + _3376;
                        _3304 = (_3552 * _3437.z) + _3377;
                        if (_3382 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3382;
                        }
                    }
                    frontier_phi_71_pred = _3307;
                    frontier_phi_71_pred_1 = _3306;
                    frontier_phi_71_pred_2 = _3305;
                    frontier_phi_71_pred_3 = _3304;
                    frontier_phi_71_pred_4 = _3303;
                    frontier_phi_71_pred_5 = _3302;
                }
                _3088 = frontier_phi_71_pred;
                _3086 = frontier_phi_71_pred_1;
                _3084 = frontier_phi_71_pred_2;
                _3082 = frontier_phi_71_pred_3;
                _3080 = frontier_phi_71_pred_4;
                _3078 = frontier_phi_71_pred_5;
                uint _3237 = _3236 + 1u;
                if (_3237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3230 = _3078;
                    _3231 = _3080;
                    _3232 = _3082;
                    _3233 = _3084;
                    _3234 = _3086;
                    _3235 = _3088;
                    _3236 = _3237;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
        }
        uvec4 _3091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3092 = _3091.z;
        uint _3094 = (_3092 >> 8u) & 15u;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        if (((4294967295u << _3094) & _2997) == 0u)
        {
            _3198 = _3077;
            _3200 = _3079;
            _3202 = _3081;
            _3204 = _3083;
            _3206 = _3085;
            _3208 = _3087;
        }
        else
        {
            float _3223 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
            float _3224 = _3223 * _2075;
            float _3225 = _3223 * _2076;
            float _3226 = _3223 * _2077;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3094 < ((_3092 >> 12u) & 15u))
            {
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3358 = _3077;
                float _3359 = _3079;
                float _3360 = _3081;
                float _3361 = _3083;
                float _3362 = _3085;
                float _3363 = _3087;
                uint _3364 = _3094;
                uint _3373;
                bool _3374;
                for (;;)
                {
                    _3373 = texelFetch(g_lightClassification, int((((_2991 << 5u) + (_2977 << 9u)) + (_3364 << 2u)) >> 2u)).x;
                    _3374 = _3373 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3374)
                    {
                        frontier_phi_82_pred = _3363;
                        frontier_phi_82_pred_1 = _3362;
                        frontier_phi_82_pred_2 = _3361;
                        frontier_phi_82_pred_3 = _3360;
                        frontier_phi_82_pred_4 = _3359;
                        frontier_phi_82_pred_5 = _3358;
                    }
                    else
                    {
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3579 = _3358;
                        float _3580 = _3359;
                        float _3581 = _3360;
                        float _3582 = _3361;
                        float _3583 = _3362;
                        float _3584 = _3363;
                        uint _3585 = _3373;
                        uint _3586;
                        vec4 _3611;
                        float _3612;
                        vec4 _3627;
                        vec3 _3639;
                        vec4 _3654;
                        vec4 _3669;
                        float _3715;
                        bool _3716;
                        for (;;)
                        {
                            uint _3596 = ((_3364 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3585));
                            _3586 = (_3585 + 4294967295u) & _3585;
                            uint _3598 = _3596 * 40u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3612 = _3611.w;
                            uint _3614 = (_3596 * 40u) + 4u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3629 = (_3596 * 40u) + 8u;
                            _3639 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x));
                            uint _3641 = (_3596 * 40u) + 16u;
                            _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3656 = (_3596 * 40u) + 20u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            uint _3671 = (_3596 * 40u) + 24u;
                            vec4 _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3690 = (_3596 * 40u) + 28u;
                            vec4 _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            _3715 = fma(_2077, _3703.z, fma(_2076, _3703.y, _3703.x * _2075)) + _3703.w;
                            _3716 = !((fma(_2077, _3684.z, fma(_2076, _3684.y, _3684.x * _2075)) + _3684.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3716)
                            {
                                float _3743 = _3611.x - _2075;
                                float _3744 = _3611.y - _2076;
                                float _3745 = _3611.z - _2077;
                                float _3746 = dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745));
                                float _3749 = inversesqrt(_3746);
                                float _3750 = _3749 * _3743;
                                float _3751 = _3749 * _3744;
                                float _3752 = _3749 * _3745;
                                float _3756 = 1.0 - (_3746 / (_3612 * _3612));
                                float _4988 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3757 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3761 = sqrt(_3746) * _3627.w;
                                float _3763 = 1.39999997615814208984375 / (_3761 + 1.39999997615814208984375);
                                float _3764 = _3763 * _3763;
                                float _3767 = ((1.0 - _3764) * dot(vec3(_3750, _3751, _3752), vec3(_929, _932, _935))) + _3764;
                                float _3770 = _3761 * _3761;
                                float _3774 = (fma(_2077, _3654.z, fma(_2076, _3654.y, _3654.x * _2075)) + _3654.w) / _3715;
                                float _3775 = (fma(_2077, _3669.z, fma(_2076, _3669.y, _3669.x * _2075)) + _3669.w) / _3715;
                                float _3779 = 1.0 - dot(vec2(_3774, _3775), vec2(_3774, _3775));
                                float _5004 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3781 = _3780 * (((isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0))) * _3757) / ((_3770 * 0.699999988079071044921875) + 1.0));
                                float _3793 = exp2(log2(1.0 / ((_3770 * 3.5) + 5.0)) * 0.25);
                                float _3794 = 1.0 - _989;
                                float _3801 = sqrt(1.0 - ((1.0 - (_3794 * _3794)) * (1.0 - (_3793 * _3793))));
                                float _3802 = _3801 * _3801;
                                float _3803 = _3802 * _3802;
                                float _3804 = _3750 - _3224;
                                float _3805 = _3751 - _3225;
                                float _3806 = _3752 - _3226;
                                float _3810 = inversesqrt(dot(vec3(_3804, _3805, _3806), vec3(_3804, _3805, _3806)));
                                float _3814 = dot(vec3(_929, _932, _935), vec3((-0.0) - _3224, (-0.0) - _3225, (-0.0) - _3226));
                                float _5015 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3817 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3818 = dot(vec3(_929, _932, _935), vec3(_3810 * _3804, _3810 * _3805, _3810 * _3806));
                                float _5026 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3821 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3825 = ((_3821 * _3821) * (_3803 + (-1.0))) + 1.0;
                                float _3826 = _3763 * _3802;
                                float _3827 = _3826 * _3826;
                                float _3833 = ((1.0 - _3827) * dot(vec3(_929, _932, _935), vec3(_3750, _3751, _3752))) + _3827;
                                float _5037 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3834 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3835 = 1.0 - _3802;
                                float _3845 = (0.5 / (((_3834 * ((_3817 * _3835) + _3802)) + 9.9999999392252902907785028219223e-09) + (((_3834 * _3835) + _3802) * _3817))) * _3834;
                                float _5048 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3855 = (_3780 * _3757) * (((_3803 * 3.1415927410125732421875) * (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0)))) / ((_3825 * _3825) * ((_3770 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3781 * _3627.z;
                                frontier_phi_88_pred_1 = _3781 * _3627.y;
                                frontier_phi_88_pred_2 = _3781 * _3627.x;
                                frontier_phi_88_pred_3 = _3855 * _3639.z;
                                frontier_phi_88_pred_4 = _3855 * _3639.y;
                                frontier_phi_88_pred_5 = _3855 * _3639.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3864 = frontier_phi_88_pred;
                            _3863 = frontier_phi_88_pred_1;
                            _3862 = frontier_phi_88_pred_2;
                            _3861 = frontier_phi_88_pred_3;
                            _3860 = frontier_phi_88_pred_4;
                            _3859 = frontier_phi_88_pred_5;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            _3566 = _3859 + _3579;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            if (_3586 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3586;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3571;
                        frontier_phi_82_pred_1 = _3570;
                        frontier_phi_82_pred_2 = _3569;
                        frontier_phi_82_pred_3 = _3568;
                        frontier_phi_82_pred_4 = _3567;
                        frontier_phi_82_pred_5 = _3566;
                    }
                    _3209 = frontier_phi_82_pred;
                    _3207 = frontier_phi_82_pred_1;
                    _3205 = frontier_phi_82_pred_2;
                    _3203 = frontier_phi_82_pred_3;
                    _3201 = frontier_phi_82_pred_4;
                    _3199 = frontier_phi_82_pred_5;
                    uint _3365 = _3364 + 1u;
                    if (_3365 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3358 = _3199;
                        _3359 = _3201;
                        _3360 = _3203;
                        _3361 = _3205;
                        _3362 = _3207;
                        _3363 = _3209;
                        _3364 = _3365;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3205;
                frontier_phi_63_64_ladder_1 = _3209;
                frontier_phi_63_64_ladder_2 = _3207;
                frontier_phi_63_64_ladder_3 = _3203;
                frontier_phi_63_64_ladder_4 = _3201;
                frontier_phi_63_64_ladder_5 = _3199;
            }
            else
            {
                frontier_phi_63_64_ladder = _3083;
                frontier_phi_63_64_ladder_1 = _3087;
                frontier_phi_63_64_ladder_2 = _3085;
                frontier_phi_63_64_ladder_3 = _3081;
                frontier_phi_63_64_ladder_4 = _3079;
                frontier_phi_63_64_ladder_5 = _3077;
            }
            _3198 = frontier_phi_63_64_ladder_5;
            _3200 = frontier_phi_63_64_ladder_4;
            _3202 = frontier_phi_63_64_ladder_3;
            _3204 = frontier_phi_63_64_ladder;
            _3206 = frontier_phi_63_64_ladder_2;
            _3208 = frontier_phi_63_64_ladder_1;
        }
        float _3213 = isnan(1.0) ? _973 : (isnan(_973) ? 1.0 : min(_973, 1.0));
        _3010 = (_3213 * _3204) + _2541;
        _3012 = (_3213 * _3206) + _2543;
        _3014 = (_3213 * _3208) + _2545;
        _3016 = ((_3198 * 0.039999999105930328369140625) * _3213) + _2864;
        _3018 = ((_3200 * 0.039999999105930328369140625) * _3213) + _2866;
        _3020 = ((_3202 * 0.039999999105930328369140625) * _3213) + _2868;
    }
    else
    {
        _3010 = _2541;
        _3012 = _2543;
        _3014 = _2545;
        _3016 = _2864;
        _3018 = _2866;
        _3020 = _2868;
    }
    float _5064 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _5075 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _5086 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _3037 = ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3010 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _973))) + ((_3016 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _3038 = ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3012 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _973))) + ((_3018 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _3039 = ((isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_3014 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _973))) + ((_3020 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    uint _3040 = _283 + 6u;
    float _3048 = _910 / cbSceneParam._m0[86u].x;
    float _3049 = _911 / cbSceneParam._m0[86u].y;
    vec4 _3063 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3048, _3049, (log2((isnan(cbSceneParam._m0[77u].w) ? _832 : (isnan(_832) ? cbSceneParam._m0[77u].w : min(_832, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3065 = _3063.x;
    float _3066 = _3063.y;
    float _3067 = _3063.z;
    float _3068 = _3063.w;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    if (_832 > cbSceneParam._m0[78u].w)
    {
        float _3102 = isnan(_832) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _832 : min(cbSceneParam._m0[80u].w, _832));
        float _3103 = _3102 / _832;
        float _3114 = _3103 * _883;
        float _3115 = _884 * _3103;
        float _3116 = (-0.0) - _3115;
        float _3118 = _3103 * _885;
        float _3120 = (cbSceneParam._m0[77u].w * _3116) / _3102;
        float _3121 = _3120 + cbSceneParam._m0[79u].w;
        float _3122 = cbSceneParam._m0[79u].w - _3115;
        float _3128 = sqrt(((_3114 * _3114) + (_3115 * _3115)) + (_3118 * _3118));
        float _3131 = (1.0 - (cbSceneParam._m0[77u].w / _3102)) * _3128;
        float _3136 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3138 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3315;
        if (abs((_3116 - _3120) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3315 = ((((_3121 > 0.0) ? exp2(_3136 * _3121) : (2.0 - exp2(_3138 * _3121))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3131;
        }
        else
        {
            float _3259 = 1.0 / cbSceneParam._m0[80u].x;
            float _3260 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : max(_3121, _3122));
            float _3261 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : min(_3121, _3122));
            float _3270 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : min(_3260, 0.0));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            _3315 = ((abs(_3128 / _3116) * cbSceneParam._m0[80u].y) * ((((_3270 - _3271) * 2.0) - ((exp2(_3136 * (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0)))) - exp2(_3136 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))))) * _3259)) - ((exp2(_3138 * _3270) - exp2(_3138 * _3271)) * _3259))) + (_3131 * cbSceneParam._m0[80u].z);
        }
        vec4 _3317 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3048, _3049, 1.0), 0.0);
        float _3326 = exp2((_3315 * (-1.44269502162933349609375)) * (1.0 - _3317.w));
        float _3327 = log2(_3326);
        float _3343 = log2(_3068);
        _3140 = (exp2(_3343 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].x)) * _3317.x) / cbSceneParam._m0[78u].x)) + _3065;
        _3142 = (exp2(_3343 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].y)) * _3317.y) / cbSceneParam._m0[78u].y)) + _3066;
        _3144 = (exp2(_3343 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].z)) * _3317.z) / cbSceneParam._m0[78u].z)) + _3067;
        _3146 = _3326 * _3068;
    }
    else
    {
        _3140 = _3065;
        _3142 = _3066;
        _3144 = _3067;
        _3146 = _3068;
    }
    bool _3353;
    vec4 _3156;
    vec4 _3178;
    float _3180;
    float _3184;
    float _3185;
    float _3186;
    float _3187;
    bool _3197;
    for (;;)
    {
        _3156 = cbMatDynParam._m0[0u];
        float _3158 = roundEven(_3156.y);
        bool _3159 = _3158 == 3.0;
        float _3160 = log2(_3146);
        float _3167 = exp2(_3160 * cbSceneParam._m0[78u].x) * _3037;
        float _3168 = exp2(_3160 * cbSceneParam._m0[78u].y) * _3038;
        float _3169 = exp2(_3160 * cbSceneParam._m0[78u].z) * _3039;
        float _3176 = _899 + (-0.5);
        _3178 = cbMtdParam._m0[1u];
        _3180 = _3178.y * _3176;
        float _3183 = (_3158 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3184 = _3183 * (_3159 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3140)));
        _3185 = _3183 * (_3159 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3142)));
        _3186 = _3183 * (_3159 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3144)));
        _3187 = _3176 * 0.999000012874603271484375;
        _3197 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3197)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3187) < 0.5)
            {
                _3353 = true;
                break;
            }
        }
        uint _3294 = _948 + uint(_3156.w);
        if ((cbInstanceData._m0[_3294].w < 1.0) && ((cbInstanceData._m0[_3294].w + _3187) < 0.5))
        {
            _3353 = true;
            break;
        }
        if ((_3180 + 1.0) < _3178.x)
        {
            _3353 = true;
            break;
        }
        _3353 = false;
        break;
    }
    float _3557;
    if (_3353)
    {
        discard_state = true;
        _3557 = 0.0;
    }
    else
    {
        _3557 = cbInstanceData._m0[_3040].w;
    }
    SV_Target.x = _3184;
    SV_Target.y = _3185;
    SV_Target.z = _3186;
    SV_Target.w = _3557;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3040].w;
    discard_exit();
}


