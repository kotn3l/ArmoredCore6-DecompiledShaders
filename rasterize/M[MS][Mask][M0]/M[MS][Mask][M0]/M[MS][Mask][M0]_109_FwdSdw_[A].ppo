#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1510;
float _4152;
float _4153;
float _4154;
float _4155;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4164 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4175 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4186 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _418.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[24u].z) + _470) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4197 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _495 = (_488 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378;
    float _496 = (_488 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _497 = (_488 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _418.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[24u].z) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4208 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _568 = (_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495;
    float _569 = (_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496;
    float _570 = (_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497;
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _310) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _311) + cbTextureTilingScale._m0[24u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _607 = _605.x;
    float _617 = dot(vec4(_607, _605.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _629 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _418.z) * 2.0) - ((((_607 - _617) * cbMtdParam._m0[24u].z) + _617) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4219 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _640 = (_347.x * cbMtdParam._m0[9u].x) * ((_630 * ((_588.x * cbMtdParam._m0[14u].x) - _568)) + _568);
    float _641 = (_347.y * cbMtdParam._m0[9u].y) * ((_630 * ((_588.y * cbMtdParam._m0[14u].y) - _569)) + _569);
    float _642 = (_347.z * cbMtdParam._m0[9u].z) * ((_630 * ((_588.z * cbMtdParam._m0[14u].z) - _570)) + _570);
    float _646 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _640;
    float _649 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _641;
    float _652 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _642;
    float _660 = (((_640 - _646) * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) + _646) * 4.55000019073486328125;
    float _662 = (((_641 - _649) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) + _649) * 4.55000019073486328125;
    float _664 = (((_642 - _652) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) + _652) * 4.55000019073486328125;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _718 = _716.x;
    float _719 = _716.y;
    float _720 = _716.z;
    float _727 = ((_699.x - _718) * _488) + _718;
    float _728 = ((_699.y - _719) * _488) + _719;
    float _729 = ((_699.z - _720) * _488) + _720;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _752 = ((_741.x - _727) * _561) + _727;
    float _753 = ((_741.y - _728) * _561) + _728;
    float _754 = ((_741.z - _729) * _561) + _729;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _310) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _311) + cbTextureTilingScale._m0[23u].w));
    float _779 = ((_766.z - _754) * _630) + _754;
    float _782 = ((((_766.x - _752) * _630) + _752) * 2.0) + (-1.0);
    float _783 = ((((_766.y - _753) * _630) + _753) * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _4230 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))));
    vec4 _809 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _821 = (_782 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_676.x * 2.0) + (-1.0)))) + (((_809.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _822 = (_783 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_676.y * 2.0) + (-1.0)))) + (((_809.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _834 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _836 = _834.x;
    float _837 = 1.0 - _836;
    float _865 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_836 - _837) * cbMtdParam._m0[24u].y) + _837) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4241 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _866 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _874 = ((((cbMtdParam._m0[10u].x - _660) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _866) + _660;
    float _875 = ((((cbMtdParam._m0[10u].y - _662) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _866) + _662;
    float _876 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _664)) * _866) + _664;
    float _881 = (((_676.z - _779) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _779;
    float _885 = ((_809.z - _881) * cbMtdParam._m0[19u].w) + _881;
    float _889 = ((cbMtdParam._m0[23u].y - _885) * _866) + _885;
    vec4 _908 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _914 = (_908.x * 2.0) + (-1.0);
    float _915 = (_908.y * 2.0) + (-1.0);
    float _916 = dot(vec2(_914, _915), vec2(_914, _915));
    float _4252 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _932 = (_866 * (((cbMtdParam._m0[22u].z * _821) - _821) + _914)) + _821;
    float _933 = (_866 * (((cbMtdParam._m0[22u].z * _822) - _822) + _915)) + _822;
    float _934 = (_866 * (sqrt(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) - _789)) + _789;
    float _936 = cbMtdParam._m0[22u].x + _809.w;
    float _939 = fma(_934, _259 * NORMAL.x, fma(_933, _266 * TANGENT.x, (_252 * _244) * _932));
    float _942 = fma(_934, _259 * NORMAL.y, fma(_933, _266 * TANGENT.y, (_252 * _245) * _932));
    float _945 = fma(_934, _259 * NORMAL.z, fma(_933, _266 * TANGENT.z, (_252 * _246) * _932));
    float _949 = inversesqrt(dot(vec3(_939, _942, _945), vec3(_939, _942, _945)));
    float _950 = _949 * _939;
    float _951 = _949 * _942;
    float _952 = _949 * _945;
    float _4263 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _953 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4285 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4296 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4307 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _971 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1021 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1011);
    float _1022 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1011);
    float _1023 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1011);
    float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
    float _1028 = _1021 * _1027;
    float _1029 = _1022 * _1027;
    float _1030 = _1023 * _1027;
    vec4 _1035 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1037 = _1035.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1191 = sqrt(((_1021 * _1021) + (_1022 * _1022)) + (_1023 * _1023));
        float _1197 = (cbMatDynParam._m0[5u].x * _1191) + cbMatDynParam._m0[5u].y;
        float _4318 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1202 = (cbMatDynParam._m0[5u].z * _1191) + cbMatDynParam._m0[5u].w;
        float _4329 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) - _1198)) + _1198) < ((_1037 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1048 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1049 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1067 = fma(_952, cbSceneParam._m0[5u].z, fma(_951, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _950));
    float _1070 = fma(_952, cbSceneParam._m0[6u].z, fma(_951, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _950));
    float _1073 = fma(_952, cbSceneParam._m0[7u].z, fma(_951, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _950));
    uint _1086 = _291 + 9u;
    uint _1087 = _1086 + uint(cbMatDynParam._m0[0u].w);
    float _1093 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * cbInstanceData._m0[_1087].x;
    float _1094 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * cbInstanceData._m0[_1087].y;
    float _1095 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * cbInstanceData._m0[_1087].z;
    float _4340 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _4351 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _4362 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    vec4 _1107 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1048, cbSceneParam._m0[86u].y * _1049));
    float _1111 = ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * TEXCOORD_5.w) * _1107.x;
    float _1112 = dot(vec3(_950, _951, _952), vec3(_1028, _1029, _1030));
    float _1115 = _1112 * 2.0;
    float _1119 = (_1115 * _950) - _1028;
    float _1120 = (_1115 * _951) - _1029;
    float _1121 = (_1115 * _952) - _1030;
    float _1125 = abs(dot(vec3(_1028, _1029, _1030), vec3(_950, _951, _952)));
    float _4373 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1127 = sqrt(_953);
    float _1140 = exp2((_1127 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1127 * 3.0));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1509;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1234 = fma(_1180, cbModelParam._m0[26u].z, fma(_1176, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1172));
        float _1238 = fma(_1180, cbModelParam._m0[27u].z, fma(_1176, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1172));
        float _1242 = fma(_1180, cbModelParam._m0[28u].z, fma(_1176, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1172));
        float _1267 = _1172 + _950;
        float _1268 = _1176 + _951;
        float _1269 = _1180 + _952;
        float _1279 = fma(_1269, cbModelParam._m0[26u].z, fma(_1268, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1267)) - _1234;
        float _1280 = fma(_1269, cbModelParam._m0[27u].z, fma(_1268, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1267)) - _1238;
        float _1281 = fma(_1269, cbModelParam._m0[28u].z, fma(_1268, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1267)) - _1242;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1234 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1238 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[34u].z) + ((((((_1242 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1337 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1303.x + (-0.5));
        float _1339 = _1337 * (_1303.y + (-0.5));
        float _1340 = _1337 * (_1303.z + (-0.5));
        float _1347 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1310.x + (-0.5));
        float _1349 = _1347 * (_1310.y + (-0.5));
        float _1350 = _1347 * (_1310.z + (-0.5));
        float _1357 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1317.x + (-0.5));
        float _1359 = _1357 * (_1317.y + (-0.5));
        float _1360 = _1357 * (_1317.z + (-0.5));
        float _1367 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1324.x + (-0.5));
        float _1369 = _1367 * (_1324.y + (-0.5));
        float _1370 = _1367 * (_1324.z + (-0.5));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = _1338 * 0.5;
        float _1375 = _1348 * 0.5;
        float _1376 = _1358 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1391 = (dot(vec3(_950, _951, _952), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1401 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4421 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1403 + 1.0))) + _1408) * _1371;
        float _1418 = _1339 * 0.5;
        float _1419 = _1349 * 0.5;
        float _1420 = _1359 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_950, _951, _952), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4454 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1445 + 1.0))) + _1450) * _1372;
        float _1460 = _1340 * 0.5;
        float _1461 = _1350 * 0.5;
        float _1462 = _1360 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_950, _951, _952), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4487 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1487 + 1.0))) + _1492) * _1373;
        _1509 = _1340;
        _1511 = _1339;
        _1512 = _1338;
        _1513 = _1350;
        _1514 = _1349;
        _1515 = _1348;
        _1516 = _1360;
        _1517 = _1359;
        _1518 = _1358;
        _1519 = _1373;
        _1520 = _1372;
        _1521 = _1371;
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1510;
        _1511 = _1510;
        _1512 = _1510;
        _1513 = _1510;
        _1514 = _1510;
        _1515 = _1510;
        _1516 = _1510;
        _1517 = _1510;
        _1518 = _1510;
        _1519 = _1510;
        _1520 = _1510;
        _1521 = _1510;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1550 = fma(_1180, cbModelParam._m0[30u].z, fma(_1176, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1172));
        float _1554 = fma(_1180, cbModelParam._m0[31u].z, fma(_1176, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1172));
        float _1558 = fma(_1180, cbModelParam._m0[32u].z, fma(_1176, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1172));
        float _1581 = _1172 + _950;
        float _1582 = _1176 + _951;
        float _1583 = _1180 + _952;
        float _1593 = fma(_1583, cbModelParam._m0[30u].z, fma(_1582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1581)) - _1550;
        float _1594 = fma(_1583, cbModelParam._m0[31u].z, fma(_1582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1581)) - _1554;
        float _1595 = fma(_1583, cbModelParam._m0[32u].z, fma(_1582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1581)) - _1558;
        float _1599 = inversesqrt(dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595)));
        float _1612 = ((_1599 * _1593) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1550 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1599 * _1594) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1554 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1614 = ((_1599 * _1595) / cbModelParam._m0[35u].z) + ((((((_1558 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        float _1649 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1616.x + (-0.5));
        float _1651 = _1649 * (_1616.y + (-0.5));
        float _1652 = _1649 * (_1616.z + (-0.5));
        float _1659 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1623.x + (-0.5));
        float _1661 = _1659 * (_1623.y + (-0.5));
        float _1662 = _1659 * (_1623.z + (-0.5));
        float _1669 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1630.x + (-0.5));
        float _1671 = _1669 * (_1630.y + (-0.5));
        float _1672 = _1669 * (_1630.z + (-0.5));
        float _1679 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1637.x + (-0.5));
        float _1681 = _1679 * (_1637.y + (-0.5));
        float _1682 = _1679 * (_1637.z + (-0.5));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = _1650 * 0.5;
        float _1687 = _1660 * 0.5;
        float _1688 = _1670 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_950, _951, _952), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4528 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4539 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4550 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_1713 + 1.0))) + _1718) * _1683;
        float _1728 = _1651 * 0.5;
        float _1729 = _1661 * 0.5;
        float _1730 = _1671 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_950, _951, _952), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4561 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4572 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4583 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_1755 + 1.0))) + _1760) * _1684;
        float _1770 = _1652 * 0.5;
        float _1771 = _1662 * 0.5;
        float _1772 = _1672 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_950, _951, _952), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4594 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4605 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4616 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_1797 + 1.0))) + _1802) * _1685;
        _1819 = _1652;
        _1820 = _1651;
        _1821 = _1650;
        _1822 = _1662;
        _1823 = _1661;
        _1824 = _1660;
        _1825 = _1672;
        _1826 = _1671;
        _1827 = _1670;
        _1828 = _1685;
        _1829 = _1684;
        _1830 = _1683;
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
    }
    else
    {
        _1819 = _1510;
        _1820 = _1510;
        _1821 = _1510;
        _1822 = _1510;
        _1823 = _1510;
        _1824 = _1510;
        _1825 = _1510;
        _1826 = _1510;
        _1827 = _1510;
        _1828 = _1510;
        _1829 = _1510;
        _1830 = _1510;
        _1831 = 0.0;
        _1832 = 0.0;
        _1833 = 0.0;
    }
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1522)) + _1522;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1523)) + _1523;
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1524)) + _1524;
    float _1866 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1844, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1844, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1844, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1843));
    float _1887 = _1119 * 0.5;
    float _1888 = _1120 * 0.5;
    float _1889 = _1121 * 0.5;
    float _1890 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1893 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1896 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1930;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1903 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1509, _1513, _1516, _1519));
        float _1907 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1911 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1512, _1515, _1518, _1521));
        float _1918 = dot(vec4(cbModelParam._m0[39u]), vec4(_1887, _1888, _1889, 1.0));
        _1930 = dot(vec3(isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1918) ? 0.0 : (isnan(0.0) ? _1918 : max(0.0, _1918))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1930 = 1.0;
    }
    float _1941;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1932 = dot(vec4(cbModelParam._m0[40u]), vec4(_1887, _1888, _1889, 1.0));
        _1941 = dot(vec3(isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1932) ? 0.0 : (isnan(0.0) ? _1932 : max(0.0, _1932))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1941 = 1.0;
    }
    float _1945 = (_1941 * cbModelParam._m0[1u].x) + (_1930 * (1.0 - cbModelParam._m0[1u].x));
    float _1955 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _953);
    float _1956 = isnan(_1955) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1955 : min(cbModelParam._m0[25u].z, _1955));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2004 = fma(_1180, cbModelParam._m0[13u].z, fma(_1176, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1172)) + cbModelParam._m0[13u].w;
        float _2008 = fma(_1180, cbModelParam._m0[14u].z, fma(_1176, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1172)) + cbModelParam._m0[14u].w;
        float _2012 = fma(_1180, cbModelParam._m0[15u].z, fma(_1176, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1172)) + cbModelParam._m0[15u].w;
        float _2015 = fma(_1121, cbModelParam._m0[13u].z, fma(_1120, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1119));
        float _2018 = fma(_1121, cbModelParam._m0[14u].z, fma(_1120, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1119));
        float _2021 = fma(_1121, cbModelParam._m0[15u].z, fma(_1120, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1119));
        float _2049;
        if (_2015 > 0.0)
        {
            _2049 = abs((1.0 - _2004) / _2015);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2004 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2049 = frontier_phi_17_15_ladder;
        }
        float _2220;
        if (_2018 > 0.0)
        {
            _2220 = abs((1.0 - _2008) / _2018);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2008 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2220 = frontier_phi_26_22_ladder;
        }
        float _2515;
        if (_2021 > 0.0)
        {
            _2515 = abs((1.0 - _2012) / _2021);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2012 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2515 = frontier_phi_38_33_ladder;
        }
        float _2517 = isnan(_2220) ? _2049 : (isnan(_2049) ? _2220 : min(_2049, _2220));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _2015) + _2004;
        float _2523 = (_2518 * _2018) + _2008;
        float _2524 = (_2518 * _2021) + _2012;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2527 = (-1.0) - _2525;
        float _2529 = _2525 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2524 > _2529) || ((_2524 < _2527) || ((_2523 > _2529) || ((_2523 < _2527) || ((_2522 < _2527) || (_2522 > _2529))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2669 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2524, cbModelParam._m0[9u].z, fma(_2523, cbModelParam._m0[9u].y, _2522 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2524, cbModelParam._m0[10u].z, fma(_2523, cbModelParam._m0[10u].y, _2522 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2524, cbModelParam._m0[11u].z, fma(_2523, cbModelParam._m0[11u].y, _2522 * cbModelParam._m0[11u].x))), _1956);
            frontier_phi_16_38_ladder = _2669.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2669.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2669.x * cbModelParam._m0[1u].y;
        }
        _2037 = frontier_phi_16_38_ladder_2;
        _2039 = frontier_phi_16_38_ladder_1;
        _2041 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2025 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1119, _1120, _1121), _1956);
        _2037 = _2025.x * cbModelParam._m0[1u].y;
        _2039 = _2025.y * cbModelParam._m0[1u].y;
        _2041 = _2025.z * cbModelParam._m0[1u].y;
    }
    float _2045 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _953);
    float _2046 = isnan(_2045) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2045 : min(cbModelParam._m0[25u].w, _2045));
    float _2137;
    float _2139;
    float _2141;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2101 = fma(_1180, cbModelParam._m0[21u].z, fma(_1176, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1172)) + cbModelParam._m0[21u].w;
        float _2105 = fma(_1180, cbModelParam._m0[22u].z, fma(_1176, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1172)) + cbModelParam._m0[22u].w;
        float _2109 = fma(_1180, cbModelParam._m0[23u].z, fma(_1176, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1172)) + cbModelParam._m0[23u].w;
        float _2112 = fma(_1121, cbModelParam._m0[21u].z, fma(_1120, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1119));
        float _2115 = fma(_1121, cbModelParam._m0[22u].z, fma(_1120, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1119));
        float _2118 = fma(_1121, cbModelParam._m0[23u].z, fma(_1120, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1119));
        float _2225;
        if (_2112 > 0.0)
        {
            _2225 = abs((1.0 - _2101) / _2112);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2101 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2225 = frontier_phi_28_24_ladder;
        }
        float _2542;
        if (_2115 > 0.0)
        {
            _2542 = abs((1.0 - _2105) / _2115);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2105 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2542 = frontier_phi_40_35_ladder;
        }
        float _2869;
        if (_2118 > 0.0)
        {
            _2869 = abs((1.0 - _2109) / _2118);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2109 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2869 = frontier_phi_50_47_ladder;
        }
        float _2871 = isnan(_2542) ? _2225 : (isnan(_2225) ? _2542 : min(_2225, _2542));
        float _2872 = isnan(_2869) ? _2871 : (isnan(_2871) ? _2869 : min(_2871, _2869));
        float _2876 = (_2872 * _2112) + _2101;
        float _2877 = (_2872 * _2115) + _2105;
        float _2878 = (_2872 * _2118) + _2109;
        float _2879 = _2872 * 9.9999997473787516355514526367188e-05;
        float _2880 = (-1.0) - _2879;
        float _2882 = _2879 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2878 > _2882) || ((_2878 < _2880) || ((_2877 > _2882) || ((_2877 < _2880) || ((_2876 < _2880) || (_2876 > _2882))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2996 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2878, cbModelParam._m0[17u].z, fma(_2877, cbModelParam._m0[17u].y, _2876 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2878, cbModelParam._m0[18u].z, fma(_2877, cbModelParam._m0[18u].y, _2876 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2878, cbModelParam._m0[19u].z, fma(_2877, cbModelParam._m0[19u].y, _2876 * cbModelParam._m0[19u].x))), _2046);
            frontier_phi_25_50_ladder = _2996.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2996.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2996.x * cbModelParam._m0[1u].z;
        }
        _2137 = frontier_phi_25_50_ladder_2;
        _2139 = frontier_phi_25_50_ladder_1;
        _2141 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2121 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1119, _1120, _1121), _2046);
        _2137 = _2121.x * cbModelParam._m0[1u].z;
        _2139 = _2121.y * cbModelParam._m0[1u].z;
        _2141 = _2121.z * cbModelParam._m0[1u].z;
    }
    float _2153 = ((((1.0 - _1140) * ((_1127 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1140 * _1127)) * _1111;
    float _2154 = _2153 * ((cbModelParam._m0[1u].w * (_2137 - _2037)) + _2037);
    float _2155 = _2153 * ((cbModelParam._m0[1u].w * (_2139 - _2039)) + _2039);
    float _2156 = _2153 * ((cbModelParam._m0[1u].w * (_2141 - _2041)) + _2041);
    float _2159 = fma(_2156, cbSceneParam._m0[89u].z, fma(_2155, cbSceneParam._m0[89u].y, _2154 * cbSceneParam._m0[89u].x));
    float _2162 = fma(_2156, cbSceneParam._m0[90u].z, fma(_2155, cbSceneParam._m0[90u].y, _2154 * cbSceneParam._m0[90u].x));
    float _2165 = fma(_2156, cbSceneParam._m0[91u].z, fma(_2155, cbSceneParam._m0[91u].y, _2154 * cbSceneParam._m0[91u].x));
    float _2199 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2203 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2207 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2211 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2212 = _2199 / _2211;
    float _2213 = _2203 / _2211;
    float _2214 = _2207 / _2211;
    float _2361;
    float _2362;
    float _2363;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2241 = ((uint(_2214 > cbSceneParam._m0[59u].y) + uint(_2214 > cbSceneParam._m0[59u].x)) + uint(_2214 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2242 = _2241 + 43u;
        uint _2250 = _2241 + 44u;
        uint _2258 = _2241 + 45u;
        uint _2266 = _2241 + 46u;
        float _2277 = fma(_2211, cbSceneParam._m0[_2242].w, fma(_2207, cbSceneParam._m0[_2242].z, fma(_2203, cbSceneParam._m0[_2242].y, _2199 * cbSceneParam._m0[_2242].x)));
        float _2281 = fma(_2211, cbSceneParam._m0[_2250].w, fma(_2207, cbSceneParam._m0[_2250].z, fma(_2203, cbSceneParam._m0[_2250].y, _2199 * cbSceneParam._m0[_2250].x)));
        float _2289 = fma(_2211, cbSceneParam._m0[_2266].w, fma(_2207, cbSceneParam._m0[_2266].z, fma(_2203, cbSceneParam._m0[_2266].y, _2199 * cbSceneParam._m0[_2266].x)));
        float _2294 = cbSceneParam._m0[33u].z * _2289;
        float _2296 = cbSceneParam._m0[33u].w * _2289;
        float _2299 = fma(_2211, cbSceneParam._m0[_2258].w, fma(_2207, cbSceneParam._m0[_2258].z, fma(_2203, cbSceneParam._m0[_2258].y, _2199 * cbSceneParam._m0[_2258].x))) / _2289;
        float _2347 = (cbSceneParam._m0[33u].x - sqrt(((_2213 * _2213) + (_2212 * _2212)) + (_2214 * _2214))) * cbSceneParam._m0[33u].y;
        float _4742 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2354 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2294 + _2277) / _2289, (_2296 + _2281) / _2289), _2299), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2296 + _2277) / _2289, (_2281 - _2294) / _2289), _2299), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2277 - _2294) / _2289, (_2281 - _2296) / _2289), _2299), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2277 - _2296) / _2289, (_2294 + _2281) / _2289), _2299), 0.0)).x), vec4(0.25)));
        _2361 = 1.0 - (_2354 * cbSceneParam._m0[34u].x);
        _2362 = 1.0 - (_2354 * cbSceneParam._m0[34u].y);
        _2363 = 1.0 - (_2354 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2361 = 1.0;
        _2362 = 1.0;
        _2363 = 1.0;
    }
    float _2427;
    float _2429;
    float _2431;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2415 = fma(_2211, cbSceneParam._m0[63u].w, fma(_2207, cbSceneParam._m0[63u].z, fma(_2203, cbSceneParam._m0[63u].y, _2199 * cbSceneParam._m0[63u].x)));
        float _2416 = fma(_2211, cbSceneParam._m0[60u].w, fma(_2207, cbSceneParam._m0[60u].z, fma(_2203, cbSceneParam._m0[60u].y, _2199 * cbSceneParam._m0[60u].x))) / _2415;
        float _2417 = fma(_2211, cbSceneParam._m0[61u].w, fma(_2207, cbSceneParam._m0[61u].z, fma(_2203, cbSceneParam._m0[61u].y, _2199 * cbSceneParam._m0[61u].x))) / _2415;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2416 >= cbSceneParam._m0[64u].x) && (_2417 >= cbSceneParam._m0[64u].y)) && (_2416 <= cbSceneParam._m0[64u].z)) && (_2417 <= cbSceneParam._m0[64u].w))
        {
            float _2555 = fma(_2211, cbSceneParam._m0[62u].w, fma(_2207, cbSceneParam._m0[62u].z, fma(_2203, cbSceneParam._m0[62u].y, _2199 * cbSceneParam._m0[62u].x))) / _2415;
            float _2559 = isnan(cbSceneParam._m0[41u].w) ? _2555 : (isnan(_2555) ? cbSceneParam._m0[41u].w : max(_2555, cbSceneParam._m0[41u].w));
            float _2602 = (cbSceneParam._m0[33u].x - sqrt(((_2213 * _2213) + (_2212 * _2212)) + (_2214 * _2214))) * cbSceneParam._m0[33u].y;
            float _4758 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
            float _2609 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2416, cbSceneParam._m0[33u].w + _2417), _2559), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2416, _2417 - cbSceneParam._m0[33u].z), _2559), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2416 - cbSceneParam._m0[33u].z, _2417 - cbSceneParam._m0[33u].w), _2559), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2416 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2417), _2559), 0.0)).x), vec4(0.25)));
            float _2613 = 1.0 - (_2609 * cbSceneParam._m0[34u].x);
            float _2614 = 1.0 - (_2609 * cbSceneParam._m0[34u].y);
            float _2615 = 1.0 - (_2609 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2615) ? _2363 : (isnan(_2363) ? _2615 : min(_2363, _2615));
            frontier_phi_37_36_ladder_1 = isnan(_2614) ? _2362 : (isnan(_2362) ? _2614 : min(_2362, _2614));
            frontier_phi_37_36_ladder_2 = isnan(_2613) ? _2361 : (isnan(_2361) ? _2613 : min(_2361, _2613));
        }
        else
        {
            frontier_phi_37_36_ladder = _2363;
            frontier_phi_37_36_ladder_1 = _2362;
            frontier_phi_37_36_ladder_2 = _2361;
        }
        _2427 = frontier_phi_37_36_ladder_2;
        _2429 = frontier_phi_37_36_ladder_1;
        _2431 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2427 = _2361;
        _2429 = _2362;
        _2431 = _2363;
    }
    uvec4 _2436 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2438 = _2436.x * 14u;
    uint _2439 = _2438 + 13u;
    float _2446 = _1111 + (-1.0);
    float _2451 = (cbLight._m0[_2439].x * _2446) + 1.0;
    float _2452 = (cbLight._m0[_2439].y * _2446) + 1.0;
    float _2453 = (cbLight._m0[_2439].z * _2446) + 1.0;
    float _2454 = (cbLight._m0[_2439].w * _2446) + 1.0;
    uint _2455 = _2438 + 5u;
    float _2461 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
    uint _2465 = _2438 + 4u;
    float _2474 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
    uint _2478 = _2438 | 1u;
    float _2489 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_950, _951, _952));
    float _2492 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_950, _951, _952));
    float _4794 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _4805 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2497 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * 0.3183098733425140380859375;
    float _2499 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * 0.3183098733425140380859375;
    float _2506 = ((cbLight._m0[_2455].x * _2461) * _2499) + (((cbLight._m0[_2465].x * _2427) * _2474) * _2497);
    float _2507 = ((_2461 * cbLight._m0[_2455].y) * _2499) + (((cbLight._m0[_2465].y * _2429) * _2474) * _2497);
    float _2508 = ((_2461 * cbLight._m0[_2455].z) * _2499) + (((cbLight._m0[_2465].z * _2431) * _2474) * _2497);
    uvec4 _2512 = floatBitsToUint(cbLight._m0[_2438 + 12u]);
    bool _2514 = _2512.x == 0u;
    float _2616;
    float _2618;
    float _2620;
    if (_2514)
    {
        _2616 = _2506;
        _2618 = _2507;
        _2620 = _2508;
    }
    else
    {
        uint _2624 = _2438 + 6u;
        float _2640 = (dot(vec3(cbLight._m0[_2438 + 2u].xyz), vec3(_950, _951, _952)) * 0.5) + 0.5;
        float _2641 = _2640 * _2640;
        float _4816 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2642 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2643 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        _2616 = (((cbLight._m0[_2624].x * 0.3183098733425140380859375) * _2642) * _2643) + _2506;
        _2618 = (((cbLight._m0[_2624].y * 0.3183098733425140380859375) * _2642) * _2643) + _2507;
        _2620 = (((cbLight._m0[_2624].z * 0.3183098733425140380859375) * _2642) * _2643) + _2508;
    }
    bool _2623 = _2512.y == 0u;
    float _2678;
    float _2680;
    float _2682;
    if (_2623)
    {
        _2678 = _2616;
        _2680 = _2618;
        _2682 = _2620;
    }
    else
    {
        uint _2840 = _2438 + 7u;
        float _2856 = (dot(vec3(cbLight._m0[_2438 + 3u].xyz), vec3(_950, _951, _952)) * 0.5) + 0.5;
        float _2857 = _2856 * _2856;
        float _4832 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2858 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2859 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
        _2678 = (((cbLight._m0[_2840].x * 0.3183098733425140380859375) * _2858) * _2859) + _2616;
        _2680 = (((cbLight._m0[_2840].y * 0.3183098733425140380859375) * _2858) * _2859) + _2618;
        _2682 = (((cbLight._m0[_2840].z * 0.3183098733425140380859375) * _2858) * _2859) + _2620;
    }
    uint _2685 = _2438 + 8u;
    float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _953) * 0.949999988079071044921875);
    float _2699 = _2698 * _2698;
    float _2700 = cbLight._m0[_2438].x + _1028;
    float _2701 = cbLight._m0[_2438].y + _1029;
    float _2702 = cbLight._m0[_2438].z + _1030;
    float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
    float _2707 = _2706 * _2700;
    float _2708 = _2706 * _2701;
    float _2709 = _2706 * _2702;
    float _2710 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2438].xyz));
    float _4848 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2713 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
    float _4859 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _2714 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
    float _2715 = dot(vec3(_950, _951, _952), vec3(_2707, _2708, _2709));
    float _4870 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2718 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
    float _2719 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2707, _2708, _2709));
    float _4881 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2723 = _2699 * _2699;
    float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
    float _2738 = (exp2(log2(1.0 - (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2739 = 1.0 - _2699;
    float _2750 = (0.5 / (((_2714 * ((_2713 * _2739) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _2739) + _2699) * _2713))) * _2713;
    float _4892 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2752 = (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
    uint _2766 = _2438 + 9u;
    float _2777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _953) * 0.949999988079071044921875);
    float _2778 = _2777 * _2777;
    float _2779 = cbLight._m0[_2478].x + _1028;
    float _2780 = cbLight._m0[_2478].y + _1029;
    float _2781 = cbLight._m0[_2478].z + _1030;
    float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
    float _2786 = _2785 * _2779;
    float _2787 = _2785 * _2780;
    float _2788 = _2785 * _2781;
    float _2789 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2478].xyz));
    float _4903 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
    float _2792 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
    float _2793 = dot(vec3(_950, _951, _952), vec3(_2786, _2787, _2788));
    float _4914 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2796 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
    float _2797 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2786, _2787, _2788));
    float _4925 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2801 = _2778 * _2778;
    float _2805 = ((_2796 * _2796) * (_2801 + (-1.0))) + 1.0;
    float _2814 = (exp2(log2(1.0 - (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2815 = 1.0 - _2778;
    float _2825 = (0.5 / (((_2714 * ((_2792 * _2815) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _2815) + _2778) * _2792))) * _2792;
    float _4936 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
    float _2827 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2801 / ((_2805 * _2805) * 3.141590118408203125));
    float _2837 = (((_2814 * cbLight._m0[_2766].x) * _2827) * _2461) + ((((cbLight._m0[_2685].x * _2427) * _2738) * _2752) * _2474);
    float _2838 = (((_2814 * cbLight._m0[_2766].y) * _2827) * _2461) + ((((cbLight._m0[_2685].y * _2429) * _2738) * _2752) * _2474);
    float _2839 = (((_2814 * cbLight._m0[_2766].z) * _2827) * _2461) + ((((cbLight._m0[_2685].z * _2431) * _2738) * _2752) * _2474);
    float _2895;
    float _2897;
    float _2899;
    if (_2514)
    {
        _2895 = _2837;
        _2897 = _2838;
        _2899 = _2839;
    }
    else
    {
        uint _2901 = _2438 + 2u;
        uint _2905 = _2438 + 10u;
        float _2919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2901].w)) * _953) * 0.949999988079071044921875);
        float _2920 = _2919 * _2919;
        float _2921 = cbLight._m0[_2901].x + _1028;
        float _2922 = cbLight._m0[_2901].y + _1029;
        float _2923 = cbLight._m0[_2901].z + _1030;
        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
        float _2928 = _2927 * _2921;
        float _2929 = _2927 * _2922;
        float _2930 = _2927 * _2923;
        float _2931 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2901].xyz));
        float _4947 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2934 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
        float _2935 = dot(vec3(_950, _951, _952), vec3(_2928, _2929, _2930));
        float _4958 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2938 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
        float _2939 = dot(vec3(cbLight._m0[_2901].xyz), vec3(_2928, _2929, _2930));
        float _4969 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2943 = _2920 * _2920;
        float _2947 = ((_2938 * _2938) * (_2943 + (-1.0))) + 1.0;
        float _2956 = (exp2(log2(1.0 - (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2957 = 1.0 - _2920;
        float _2967 = (0.5 / (((_2714 * ((_2934 * _2957) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _2957) + _2920) * _2934))) * _2934;
        float _4980 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2969 = (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_2943 / ((_2947 * _2947) * 3.141590118408203125));
        float _2970 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        _2895 = (((_2956 * cbLight._m0[_2905].x) * _2969) * _2970) + _2837;
        _2897 = (((_2956 * cbLight._m0[_2905].y) * _2969) * _2970) + _2838;
        _2899 = (((_2956 * cbLight._m0[_2905].z) * _2969) * _2970) + _2839;
    }
    float _3001;
    float _3003;
    float _3005;
    if (_2623)
    {
        _3001 = _2895;
        _3003 = _2897;
        _3005 = _2899;
    }
    else
    {
        uint _3012 = _2438 + 3u;
        uint _3016 = _2438 + 11u;
        float _3030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3012].w)) * _953) * 0.949999988079071044921875);
        float _3031 = _3030 * _3030;
        float _3032 = cbLight._m0[_3012].x + _1028;
        float _3033 = cbLight._m0[_3012].y + _1029;
        float _3034 = cbLight._m0[_3012].z + _1030;
        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
        float _3039 = _3038 * _3032;
        float _3040 = _3038 * _3033;
        float _3041 = _3038 * _3034;
        float _3042 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_3012].xyz));
        float _4996 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        float _3045 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
        float _3046 = dot(vec3(_950, _951, _952), vec3(_3039, _3040, _3041));
        float _5007 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3049 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
        float _3050 = dot(vec3(cbLight._m0[_3012].xyz), vec3(_3039, _3040, _3041));
        float _5018 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3054 = _3031 * _3031;
        float _3058 = ((_3049 * _3049) * (_3054 + (-1.0))) + 1.0;
        float _3067 = (exp2(log2(1.0 - (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3068 = 1.0 - _3031;
        float _3078 = (0.5 / (((_2714 * ((_3045 * _3068) + _3031)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _3068) + _3031) * _3045))) * _3045;
        float _5029 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
        float _3080 = (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_3054 / ((_3058 * _3058) * 3.141590118408203125));
        float _3081 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
        _3001 = (((_3067 * cbLight._m0[_3016].x) * _3080) * _3081) + _2895;
        _3003 = (((_3067 * cbLight._m0[_3016].y) * _3080) * _3081) + _2897;
        _3005 = (((_3067 * cbLight._m0[_3016].z) * _3080) * _3081) + _2899;
    }
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    float _3157;
    if (_2436.y == 0u)
    {
        uvec4 _3102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3103 = _3102.x;
        uint _3114 = uint((float(_3102.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1049) / _3103))) + floor(float(uint(cbSceneParam._m0[85u].x * _1048) / _3103)));
        float _3124 = (log2(_2214 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3125 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
        uint _3128 = uint(isnan(14.0) ? _3125 : (isnan(_3125) ? 14.0 : min(_3125, 14.0)));
        uvec4 _3133 = texelFetch(g_lightClusterGridBuffer, int(((_3128 << 2u) + (_3114 << 6u)) >> 2u));
        uint _3134 = _3133.x;
        uint _3135 = _3102.z;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        if (((((1u << ((_3135 >> 4u) & 15u)) + 4294967295u) & _3134) == 0u) || ((_3135 & 240u) == 0u))
        {
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
            _3222 = 0.0;
            _3224 = 0.0;
        }
        else
        {
            float _3215;
            float _3217;
            float _3219;
            float _3221;
            float _3223;
            float _3225;
            float _3367 = 0.0;
            float _3368 = 0.0;
            float _3369 = 0.0;
            float _3370 = 0.0;
            float _3371 = 0.0;
            float _3372 = 0.0;
            uint _3373 = 0u;
            uint _3382;
            bool _3383;
            for (;;)
            {
                _3382 = texelFetch(g_lightClassification, int((((_3128 << 5u) + (_3114 << 9u)) + (_3373 << 2u)) >> 2u)).x;
                _3383 = _3382 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3383)
                {
                    frontier_phi_71_pred = _3372;
                    frontier_phi_71_pred_1 = _3371;
                    frontier_phi_71_pred_2 = _3370;
                    frontier_phi_71_pred_3 = _3369;
                    frontier_phi_71_pred_4 = _3368;
                    frontier_phi_71_pred_5 = _3367;
                }
                else
                {
                    float _3512;
                    float _3513;
                    float _3514;
                    float _3515;
                    float _3516;
                    float _3517;
                    uint _3518;
                    _3512 = _3367;
                    _3513 = _3368;
                    _3514 = _3369;
                    _3515 = _3370;
                    _3516 = _3371;
                    _3517 = _3372;
                    _3518 = _3382;
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    for (;;)
                    {
                        uint _3522 = uint(findLSB(_3518)) + (_3373 << 5u);
                        uint _3519 = (_3518 + 4294967295u) & _3518;
                        uint _3524 = _3522 * 48u;
                        vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3524)).x, texelFetch(g_PointLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3524 + 3u)).x));
                        uint _3544 = (_3522 * 48u) + 4u;
                        vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3544)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 3u)).x));
                        uint _3563 = (_3522 * 48u) + 8u;
                        vec3 _3574 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3563)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 2u)).x));
                        float _3578 = _3538.x - _2212;
                        float _3579 = _3538.y - _2213;
                        float _3580 = _3538.z - _2214;
                        float _3581 = dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580));
                        float _3584 = inversesqrt(_3581);
                        float _3585 = _3584 * _3578;
                        float _3586 = _3584 * _3579;
                        float _3587 = _3584 * _3580;
                        float _3588 = dot(vec3(_1067, _1070, _1073), vec3(_3585, _3586, _3587));
                        float _3593 = 1.0 - (_3581 * _3538.w);
                        float _5055 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                        float _3594 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                        float _3595 = sqrt(_3581) * _3557.w;
                        float _3598 = 1.39999997615814208984375 / (_3595 + 1.39999997615814208984375);
                        float _3599 = _3598 * _3598;
                        float _3602 = ((1.0 - _3599) * _3588) + _3599;
                        float _3605 = _3595 * _3595;
                        float _3609 = ((isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0))) * _3594) / ((_3605 * 0.699999988079071044921875) + 1.0);
                        float _3613 = (-0.0) - _2212;
                        float _3614 = (-0.0) - _2213;
                        float _3615 = (-0.0) - _2214;
                        float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                        float _3620 = _3619 * _3613;
                        float _3621 = _3619 * _3614;
                        float _3622 = _3619 * _3615;
                        float _3629 = exp2(log2(1.0 / ((_3605 * 3.5) + 5.0)) * 0.25);
                        float _3630 = 1.0 - _1127;
                        float _3637 = sqrt(1.0 - ((1.0 - (_3630 * _3630)) * (1.0 - (_3629 * _3629))));
                        float _3638 = _3637 * _3637;
                        float _3639 = _3638 * _3638;
                        float _3640 = _3620 + _3585;
                        float _3641 = _3621 + _3586;
                        float _3642 = _3622 + _3587;
                        float _3646 = inversesqrt(dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642)));
                        float _3650 = dot(vec3(_1067, _1070, _1073), vec3(_3620, _3621, _3622));
                        float _5071 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                        float _3653 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                        float _3654 = dot(vec3(_1067, _1070, _1073), vec3(_3646 * _3640, _3646 * _3641, _3646 * _3642));
                        float _5082 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                        float _3657 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                        float _3661 = ((_3657 * _3657) * (_3639 + (-1.0))) + 1.0;
                        float _3662 = _3598 * _3638;
                        float _3663 = _3662 * _3662;
                        float _3666 = ((1.0 - _3663) * _3588) + _3663;
                        float _5093 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                        float _3667 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                        float _3668 = 1.0 - _3638;
                        float _3678 = (0.5 / (((_3667 * ((_3653 * _3668) + _3638)) + 9.9999999392252902907785028219223e-09) + (((_3667 * _3668) + _3638) * _3653))) * _3667;
                        float _5104 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                        float _3689 = (((_3639 * 3.1415927410125732421875) * (isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0)))) / ((_3661 * _3661) * ((_3605 * 2.1991131305694580078125) + 3.141590118408203125))) * _3594;
                        _3442 = (_3609 * _3557.x) + _3515;
                        _3443 = (_3609 * _3557.y) + _3516;
                        _3444 = (_3609 * _3557.z) + _3517;
                        _3439 = (_3689 * _3574.x) + _3512;
                        _3440 = (_3689 * _3574.y) + _3513;
                        _3441 = (_3689 * _3574.z) + _3514;
                        if (_3519 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3512 = _3439;
                            _3513 = _3440;
                            _3514 = _3441;
                            _3515 = _3442;
                            _3516 = _3443;
                            _3517 = _3444;
                            _3518 = _3519;
                        }
                    }
                    frontier_phi_71_pred = _3444;
                    frontier_phi_71_pred_1 = _3443;
                    frontier_phi_71_pred_2 = _3442;
                    frontier_phi_71_pred_3 = _3441;
                    frontier_phi_71_pred_4 = _3440;
                    frontier_phi_71_pred_5 = _3439;
                }
                _3225 = frontier_phi_71_pred;
                _3223 = frontier_phi_71_pred_1;
                _3221 = frontier_phi_71_pred_2;
                _3219 = frontier_phi_71_pred_3;
                _3217 = frontier_phi_71_pred_4;
                _3215 = frontier_phi_71_pred_5;
                uint _3374 = _3373 + 1u;
                if (_3374 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3367 = _3215;
                    _3368 = _3217;
                    _3369 = _3219;
                    _3370 = _3221;
                    _3371 = _3223;
                    _3372 = _3225;
                    _3373 = _3374;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
            _3222 = _3223;
            _3224 = _3225;
        }
        uvec4 _3228 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3229 = _3228.z;
        uint _3231 = (_3229 >> 8u) & 15u;
        float _3335;
        float _3337;
        float _3339;
        float _3341;
        float _3343;
        float _3345;
        if (((4294967295u << _3231) & _3134) == 0u)
        {
            _3335 = _3214;
            _3337 = _3216;
            _3339 = _3218;
            _3341 = _3220;
            _3343 = _3222;
            _3345 = _3224;
        }
        else
        {
            float _3360 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
            float _3361 = _3360 * _2212;
            float _3362 = _3360 * _2213;
            float _3363 = _3360 * _2214;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3231 < ((_3229 >> 12u) & 15u))
            {
                float _3336;
                float _3338;
                float _3340;
                float _3342;
                float _3344;
                float _3346;
                float _3495 = _3214;
                float _3496 = _3216;
                float _3497 = _3218;
                float _3498 = _3220;
                float _3499 = _3222;
                float _3500 = _3224;
                uint _3501 = _3231;
                uint _3510;
                bool _3511;
                for (;;)
                {
                    _3510 = texelFetch(g_lightClassification, int((((_3128 << 5u) + (_3114 << 9u)) + (_3501 << 2u)) >> 2u)).x;
                    _3511 = _3510 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3511)
                    {
                        frontier_phi_82_pred = _3500;
                        frontier_phi_82_pred_1 = _3499;
                        frontier_phi_82_pred_2 = _3498;
                        frontier_phi_82_pred_3 = _3497;
                        frontier_phi_82_pred_4 = _3496;
                        frontier_phi_82_pred_5 = _3495;
                    }
                    else
                    {
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3996;
                        float _3997;
                        float _3998;
                        float _3999;
                        float _4000;
                        float _4001;
                        float _3716 = _3495;
                        float _3717 = _3496;
                        float _3718 = _3497;
                        float _3719 = _3498;
                        float _3720 = _3499;
                        float _3721 = _3500;
                        uint _3722 = _3510;
                        uint _3723;
                        vec4 _3748;
                        float _3749;
                        vec4 _3764;
                        vec3 _3776;
                        vec4 _3791;
                        vec4 _3806;
                        float _3852;
                        bool _3853;
                        for (;;)
                        {
                            uint _3733 = ((_3501 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3722));
                            _3723 = (_3722 + 4294967295u) & _3722;
                            uint _3735 = _3733 * 40u;
                            _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            _3749 = _3748.w;
                            uint _3751 = (_3733 * 40u) + 4u;
                            _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3766 = (_3733 * 40u) + 8u;
                            _3776 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x));
                            uint _3778 = (_3733 * 40u) + 16u;
                            _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            uint _3793 = (_3733 * 40u) + 20u;
                            _3806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 3u)).x));
                            uint _3808 = (_3733 * 40u) + 24u;
                            vec4 _3821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 3u)).x));
                            uint _3827 = (_3733 * 40u) + 28u;
                            vec4 _3840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 3u)).x));
                            _3852 = fma(_2214, _3840.z, fma(_2213, _3840.y, _3840.x * _2212)) + _3840.w;
                            _3853 = !((fma(_2214, _3821.z, fma(_2213, _3821.y, _3821.x * _2212)) + _3821.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3853)
                            {
                                float _3880 = _3748.x - _2212;
                                float _3881 = _3748.y - _2213;
                                float _3882 = _3748.z - _2214;
                                float _3883 = dot(vec3(_3880, _3881, _3882), vec3(_3880, _3881, _3882));
                                float _3886 = inversesqrt(_3883);
                                float _3887 = _3886 * _3880;
                                float _3888 = _3886 * _3881;
                                float _3889 = _3886 * _3882;
                                float _3893 = 1.0 - (_3883 / (_3749 * _3749));
                                float _5115 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3894 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                                float _3898 = sqrt(_3883) * _3764.w;
                                float _3900 = 1.39999997615814208984375 / (_3898 + 1.39999997615814208984375);
                                float _3901 = _3900 * _3900;
                                float _3904 = ((1.0 - _3901) * dot(vec3(_3887, _3888, _3889), vec3(_1067, _1070, _1073))) + _3901;
                                float _3907 = _3898 * _3898;
                                float _3911 = (fma(_2214, _3791.z, fma(_2213, _3791.y, _3791.x * _2212)) + _3791.w) / _3852;
                                float _3912 = (fma(_2214, _3806.z, fma(_2213, _3806.y, _3806.x * _2212)) + _3806.w) / _3852;
                                float _3916 = 1.0 - dot(vec2(_3911, _3912), vec2(_3911, _3912));
                                float _5131 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3917 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                                float _3918 = _3917 * (((isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0))) * _3894) / ((_3907 * 0.699999988079071044921875) + 1.0));
                                float _3930 = exp2(log2(1.0 / ((_3907 * 3.5) + 5.0)) * 0.25);
                                float _3931 = 1.0 - _1127;
                                float _3938 = sqrt(1.0 - ((1.0 - (_3931 * _3931)) * (1.0 - (_3930 * _3930))));
                                float _3939 = _3938 * _3938;
                                float _3940 = _3939 * _3939;
                                float _3941 = _3887 - _3361;
                                float _3942 = _3888 - _3362;
                                float _3943 = _3889 - _3363;
                                float _3947 = inversesqrt(dot(vec3(_3941, _3942, _3943), vec3(_3941, _3942, _3943)));
                                float _3951 = dot(vec3(_1067, _1070, _1073), vec3((-0.0) - _3361, (-0.0) - _3362, (-0.0) - _3363));
                                float _5142 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3954 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                                float _3955 = dot(vec3(_1067, _1070, _1073), vec3(_3947 * _3941, _3947 * _3942, _3947 * _3943));
                                float _5153 = isnan(0.0) ? _3955 : (isnan(_3955) ? 0.0 : max(_3955, 0.0));
                                float _3958 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
                                float _3962 = ((_3958 * _3958) * (_3940 + (-1.0))) + 1.0;
                                float _3963 = _3900 * _3939;
                                float _3964 = _3963 * _3963;
                                float _3970 = ((1.0 - _3964) * dot(vec3(_1067, _1070, _1073), vec3(_3887, _3888, _3889))) + _3964;
                                float _5164 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3971 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                                float _3972 = 1.0 - _3939;
                                float _3982 = (0.5 / (((_3971 * ((_3954 * _3972) + _3939)) + 9.9999999392252902907785028219223e-09) + (((_3971 * _3972) + _3939) * _3954))) * _3971;
                                float _5175 = isnan(0.0) ? _3982 : (isnan(_3982) ? 0.0 : max(_3982, 0.0));
                                float _3992 = (_3917 * _3894) * (((_3940 * 3.1415927410125732421875) * (isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0)))) / ((_3962 * _3962) * ((_3907 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3918 * _3764.z;
                                frontier_phi_88_pred_1 = _3918 * _3764.y;
                                frontier_phi_88_pred_2 = _3918 * _3764.x;
                                frontier_phi_88_pred_3 = _3992 * _3776.z;
                                frontier_phi_88_pred_4 = _3992 * _3776.y;
                                frontier_phi_88_pred_5 = _3992 * _3776.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4001 = frontier_phi_88_pred;
                            _4000 = frontier_phi_88_pred_1;
                            _3999 = frontier_phi_88_pred_2;
                            _3998 = frontier_phi_88_pred_3;
                            _3997 = frontier_phi_88_pred_4;
                            _3996 = frontier_phi_88_pred_5;
                            _3706 = _3999 + _3719;
                            _3707 = _4000 + _3720;
                            _3708 = _4001 + _3721;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            _3705 = _3998 + _3718;
                            if (_3723 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3705;
                                _3719 = _3706;
                                _3720 = _3707;
                                _3721 = _3708;
                                _3722 = _3723;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3708;
                        frontier_phi_82_pred_1 = _3707;
                        frontier_phi_82_pred_2 = _3706;
                        frontier_phi_82_pred_3 = _3705;
                        frontier_phi_82_pred_4 = _3704;
                        frontier_phi_82_pred_5 = _3703;
                    }
                    _3346 = frontier_phi_82_pred;
                    _3344 = frontier_phi_82_pred_1;
                    _3342 = frontier_phi_82_pred_2;
                    _3340 = frontier_phi_82_pred_3;
                    _3338 = frontier_phi_82_pred_4;
                    _3336 = frontier_phi_82_pred_5;
                    uint _3502 = _3501 + 1u;
                    if (_3502 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3495 = _3336;
                        _3496 = _3338;
                        _3497 = _3340;
                        _3498 = _3342;
                        _3499 = _3344;
                        _3500 = _3346;
                        _3501 = _3502;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3342;
                frontier_phi_63_64_ladder_1 = _3346;
                frontier_phi_63_64_ladder_2 = _3344;
                frontier_phi_63_64_ladder_3 = _3340;
                frontier_phi_63_64_ladder_4 = _3338;
                frontier_phi_63_64_ladder_5 = _3336;
            }
            else
            {
                frontier_phi_63_64_ladder = _3220;
                frontier_phi_63_64_ladder_1 = _3224;
                frontier_phi_63_64_ladder_2 = _3222;
                frontier_phi_63_64_ladder_3 = _3218;
                frontier_phi_63_64_ladder_4 = _3216;
                frontier_phi_63_64_ladder_5 = _3214;
            }
            _3335 = frontier_phi_63_64_ladder_5;
            _3337 = frontier_phi_63_64_ladder_4;
            _3339 = frontier_phi_63_64_ladder_3;
            _3341 = frontier_phi_63_64_ladder;
            _3343 = frontier_phi_63_64_ladder_2;
            _3345 = frontier_phi_63_64_ladder_1;
        }
        float _3350 = isnan(1.0) ? _1111 : (isnan(_1111) ? 1.0 : min(_1111, 1.0));
        _3147 = (_3350 * _3341) + _2678;
        _3149 = (_3350 * _3343) + _2680;
        _3151 = (_3350 * _3345) + _2682;
        _3153 = ((_3335 * 0.039999999105930328369140625) * _3350) + _3001;
        _3155 = ((_3337 * 0.039999999105930328369140625) * _3350) + _3003;
        _3157 = ((_3339 * 0.039999999105930328369140625) * _3350) + _3005;
    }
    else
    {
        _3147 = _2678;
        _3149 = _2680;
        _3151 = _2682;
        _3153 = _3001;
        _3155 = _3003;
        _3157 = _3005;
    }
    float _5191 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _5202 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _5213 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _3174 = ((isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0))) * (_3147 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1111))) + ((_3153 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1945)) * cbPerFrame._m0[3u].x);
    float _3175 = ((isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0))) * (_3149 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1111))) + ((_3155 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1945)) * cbPerFrame._m0[3u].x);
    float _3176 = ((isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0))) * (_3151 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1111))) + ((_3157 + ((isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))) * _1945)) * cbPerFrame._m0[3u].x);
    uint _3177 = _291 + 6u;
    float _3185 = _1048 / cbSceneParam._m0[86u].x;
    float _3186 = _1049 / cbSceneParam._m0[86u].y;
    vec4 _3200 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3185, _3186, (log2((isnan(cbSceneParam._m0[77u].w) ? _971 : (isnan(_971) ? cbSceneParam._m0[77u].w : min(_971, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3202 = _3200.x;
    float _3203 = _3200.y;
    float _3204 = _3200.z;
    float _3205 = _3200.w;
    float _3277;
    float _3279;
    float _3281;
    float _3283;
    if (_971 > cbSceneParam._m0[78u].w)
    {
        float _3239 = isnan(_971) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _971 : min(cbSceneParam._m0[80u].w, _971));
        float _3240 = _3239 / _971;
        float _3251 = _3240 * _1021;
        float _3252 = _1022 * _3240;
        float _3253 = (-0.0) - _3252;
        float _3255 = _3240 * _1023;
        float _3257 = (cbSceneParam._m0[77u].w * _3253) / _3239;
        float _3258 = _3257 + cbSceneParam._m0[79u].w;
        float _3259 = cbSceneParam._m0[79u].w - _3252;
        float _3265 = sqrt(((_3251 * _3251) + (_3252 * _3252)) + (_3255 * _3255));
        float _3268 = (1.0 - (cbSceneParam._m0[77u].w / _3239)) * _3265;
        float _3273 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3275 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3452;
        if (abs((_3253 - _3257) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3452 = ((((_3258 > 0.0) ? exp2(_3273 * _3258) : (2.0 - exp2(_3275 * _3258))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3268;
        }
        else
        {
            float _3396 = 1.0 / cbSceneParam._m0[80u].x;
            float _3397 = isnan(_3259) ? _3258 : (isnan(_3258) ? _3259 : max(_3258, _3259));
            float _3398 = isnan(_3259) ? _3258 : (isnan(_3258) ? _3259 : min(_3258, _3259));
            float _3407 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : min(_3397, 0.0));
            float _3408 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : min(_3398, 0.0));
            _3452 = ((abs(_3265 / _3253) * cbSceneParam._m0[80u].y) * ((((_3407 - _3408) * 2.0) - ((exp2(_3273 * (isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0)))) - exp2(_3273 * (isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))))) * _3396)) - ((exp2(_3275 * _3407) - exp2(_3275 * _3408)) * _3396))) + (_3268 * cbSceneParam._m0[80u].z);
        }
        vec4 _3454 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3185, _3186, 1.0), 0.0);
        float _3463 = exp2((_3452 * (-1.44269502162933349609375)) * (1.0 - _3454.w));
        float _3464 = log2(_3463);
        float _3480 = log2(_3205);
        _3277 = (exp2(_3480 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3464 * cbSceneParam._m0[78u].x)) * _3454.x) / cbSceneParam._m0[78u].x)) + _3202;
        _3279 = (exp2(_3480 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3464 * cbSceneParam._m0[78u].y)) * _3454.y) / cbSceneParam._m0[78u].y)) + _3203;
        _3281 = (exp2(_3480 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3464 * cbSceneParam._m0[78u].z)) * _3454.z) / cbSceneParam._m0[78u].z)) + _3204;
        _3283 = _3463 * _3205;
    }
    else
    {
        _3277 = _3202;
        _3279 = _3203;
        _3281 = _3204;
        _3283 = _3205;
    }
    bool _3490;
    vec4 _3293;
    vec4 _3315;
    float _3317;
    float _3321;
    float _3322;
    float _3323;
    float _3324;
    bool _3334;
    for (;;)
    {
        _3293 = cbMatDynParam._m0[0u];
        float _3295 = roundEven(_3293.y);
        bool _3296 = _3295 == 3.0;
        float _3297 = log2(_3283);
        float _3304 = exp2(_3297 * cbSceneParam._m0[78u].x) * _3174;
        float _3305 = exp2(_3297 * cbSceneParam._m0[78u].y) * _3175;
        float _3306 = exp2(_3297 * cbSceneParam._m0[78u].z) * _3176;
        float _3313 = _1037 + (-0.5);
        _3315 = cbMtdParam._m0[1u];
        _3317 = _3315.y * _3313;
        float _3320 = (_3295 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3321 = _3320 * (_3296 ? _3304 : (_3304 + (cbSceneParam._m0[72u].w * _3277)));
        _3322 = _3320 * (_3296 ? _3305 : (_3305 + (cbSceneParam._m0[72u].w * _3279)));
        _3323 = _3320 * (_3296 ? _3306 : (_3306 + (cbSceneParam._m0[72u].w * _3281)));
        _3324 = _3313 * 0.999000012874603271484375;
        _3334 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3334)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3324) < 0.5)
            {
                _3490 = true;
                break;
            }
        }
        uint _3431 = _1086 + uint(_3293.w);
        if ((cbInstanceData._m0[_3431].w < 1.0) && ((cbInstanceData._m0[_3431].w + _3324) < 0.5))
        {
            _3490 = true;
            break;
        }
        if ((_3317 + 1.0) < _3315.x)
        {
            _3490 = true;
            break;
        }
        _3490 = false;
        break;
    }
    float _3694;
    if (_3490)
    {
        discard_state = true;
        _3694 = 0.0;
    }
    else
    {
        _3694 = cbInstanceData._m0[_3177].w;
    }
    SV_Target.x = _3321;
    SV_Target.y = _3322;
    SV_Target.z = _3323;
    SV_Target.w = _3694;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3177].w;
    discard_exit();
}


