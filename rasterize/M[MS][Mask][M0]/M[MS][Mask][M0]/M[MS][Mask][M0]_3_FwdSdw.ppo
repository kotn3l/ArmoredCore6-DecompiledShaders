#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1114;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3705 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3716 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3727 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[24u].z) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3738 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _433 = (_426 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _434 = (_426 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _435 = (_426 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) + _445;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _426) + _513;
    float _525 = ((((_492.x - _511) * _426) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _426) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3749 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _566 = (_525 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_467.x * 2.0) + (-1.0)))) + (((_554.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _567 = (_526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_467.y * 2.0) + (-1.0)))) + (((_554.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _572 = (((_467.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    float _576 = ((_554.z - _572) * cbMtdParam._m0[19u].w) + _572;
    float _578 = cbMtdParam._m0[22u].x + _554.w;
    float _581 = fma(_532, _226 * NORMAL.x, fma(_567, _233 * TANGENT.x, (_219 * _211) * _566));
    float _584 = fma(_532, _226 * NORMAL.y, fma(_567, _233 * TANGENT.y, (_219 * _212) * _566));
    float _587 = fma(_532, _226 * NORMAL.z, fma(_567, _233 * TANGENT.z, (_219 * _213) * _566));
    float _591 = inversesqrt(dot(vec3(_581, _584, _587), vec3(_581, _584, _587)));
    float _592 = _591 * _581;
    float _593 = _591 * _584;
    float _594 = _591 * _587;
    float _3760 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _595 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3782 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3793 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3804 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _613 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _665 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _655);
    float _666 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _655);
    float _667 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _655);
    float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
    float _672 = _665 * _671;
    float _673 = _666 * _671;
    float _674 = _667 * _671;
    float _680 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _681 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _699 = fma(_594, cbSceneParam._m0[5u].z, fma(_593, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _592));
    float _702 = fma(_594, cbSceneParam._m0[6u].z, fma(_593, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _592));
    float _705 = fma(_594, cbSceneParam._m0[7u].z, fma(_593, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _592));
    uint _719 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _725 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_719].x;
    float _726 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_719].y;
    float _727 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_719].z;
    float _3815 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    vec4 _739 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _680, cbSceneParam._m0[86u].y * _681));
    float _743 = ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * TEXCOORD_5.w) * _739.x;
    float _744 = dot(vec3(_592, _593, _594), vec3(_672, _673, _674));
    float _747 = _744 * 2.0;
    float _751 = (_747 * _592) - _672;
    float _752 = (_747 * _593) - _673;
    float _753 = (_747 * _594) - _674;
    float _757 = abs(dot(vec3(_672, _673, _674), vec3(_592, _593, _594)));
    float _3848 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _759 = sqrt(_595);
    float _772 = exp2((_759 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_759 * 3.0));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1113;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _838 = fma(_812, cbModelParam._m0[26u].z, fma(_808, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804));
        float _842 = fma(_812, cbModelParam._m0[27u].z, fma(_808, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804));
        float _846 = fma(_812, cbModelParam._m0[28u].z, fma(_808, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804));
        float _871 = _804 + _592;
        float _872 = _808 + _593;
        float _873 = _812 + _594;
        float _883 = fma(_873, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871)) - _838;
        float _884 = fma(_873, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871)) - _842;
        float _885 = fma(_873, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871)) - _846;
        float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
        float _902 = ((_889 * _883) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_838 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_889 * _884) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_842 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_889 * _885) / cbModelParam._m0[34u].z) + ((((((_846 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _941 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_907.x + (-0.5));
        float _943 = _941 * (_907.y + (-0.5));
        float _944 = _941 * (_907.z + (-0.5));
        float _951 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_914.x + (-0.5));
        float _953 = _951 * (_914.y + (-0.5));
        float _954 = _951 * (_914.z + (-0.5));
        float _961 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_921.x + (-0.5));
        float _963 = _961 * (_921.y + (-0.5));
        float _964 = _961 * (_921.z + (-0.5));
        float _971 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_928.x + (-0.5));
        float _973 = _971 * (_928.y + (-0.5));
        float _974 = _971 * (_928.z + (-0.5));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = _942 * 0.5;
        float _979 = _952 * 0.5;
        float _980 = _962 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _995 = (dot(vec3(_592, _593, _594), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1005 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3896 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1007 + 1.0))) + _1012) * _975;
        float _1022 = _943 * 0.5;
        float _1023 = _953 * 0.5;
        float _1024 = _963 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_592, _593, _594), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3929 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1049 + 1.0))) + _1054) * _976;
        float _1064 = _944 * 0.5;
        float _1065 = _954 * 0.5;
        float _1066 = _964 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_592, _593, _594), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3962 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1091 + 1.0))) + _1096) * _977;
        _1113 = _944;
        _1115 = _943;
        _1116 = _942;
        _1117 = _954;
        _1118 = _953;
        _1119 = _952;
        _1120 = _964;
        _1121 = _963;
        _1122 = _962;
        _1123 = _977;
        _1124 = _976;
        _1125 = _975;
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
    }
    else
    {
        _1113 = _1114;
        _1115 = _1114;
        _1116 = _1114;
        _1117 = _1114;
        _1118 = _1114;
        _1119 = _1114;
        _1120 = _1114;
        _1121 = _1114;
        _1122 = _1114;
        _1123 = _1114;
        _1124 = _1114;
        _1125 = _1114;
        _1126 = 0.0;
        _1127 = 0.0;
        _1128 = 0.0;
    }
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1153 = fma(_812, cbModelParam._m0[30u].z, fma(_808, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _804));
        float _1157 = fma(_812, cbModelParam._m0[31u].z, fma(_808, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _804));
        float _1161 = fma(_812, cbModelParam._m0[32u].z, fma(_808, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _804));
        float _1184 = _804 + _592;
        float _1185 = _808 + _593;
        float _1186 = _812 + _594;
        float _1196 = fma(_1186, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184)) - _1153;
        float _1197 = fma(_1186, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184)) - _1157;
        float _1198 = fma(_1186, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184)) - _1161;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1153 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1157 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[35u].z) + ((((((_1161 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1252 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1219.x + (-0.5));
        float _1254 = _1252 * (_1219.y + (-0.5));
        float _1255 = _1252 * (_1219.z + (-0.5));
        float _1262 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1226.x + (-0.5));
        float _1264 = _1262 * (_1226.y + (-0.5));
        float _1265 = _1262 * (_1226.z + (-0.5));
        float _1272 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1233.x + (-0.5));
        float _1274 = _1272 * (_1233.y + (-0.5));
        float _1275 = _1272 * (_1233.z + (-0.5));
        float _1282 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1240.x + (-0.5));
        float _1284 = _1282 * (_1240.y + (-0.5));
        float _1285 = _1282 * (_1240.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_592, _593, _594), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4025 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1316 + 1.0))) + _1321) * _1286;
        float _1331 = _1254 * 0.5;
        float _1332 = _1264 * 0.5;
        float _1333 = _1274 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_592, _593, _594), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4058 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1358 + 1.0))) + _1363) * _1287;
        float _1373 = _1255 * 0.5;
        float _1374 = _1265 * 0.5;
        float _1375 = _1275 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_592, _593, _594), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4091 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1400 + 1.0))) + _1405) * _1288;
        _1422 = _1255;
        _1423 = _1254;
        _1424 = _1253;
        _1425 = _1265;
        _1426 = _1264;
        _1427 = _1263;
        _1428 = _1275;
        _1429 = _1274;
        _1430 = _1273;
        _1431 = _1288;
        _1432 = _1287;
        _1433 = _1286;
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1114;
        _1423 = _1114;
        _1424 = _1114;
        _1425 = _1114;
        _1426 = _1114;
        _1427 = _1114;
        _1428 = _1114;
        _1429 = _1114;
        _1430 = _1114;
        _1431 = _1114;
        _1432 = _1114;
        _1433 = _1114;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1126)) + _1126;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1128)) + _1128;
    float _1469 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1472 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1475 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1446));
    float _1490 = _751 * 0.5;
    float _1491 = _752 * 0.5;
    float _1492 = _753 * 0.5;
    float _1493 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1496 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1499 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1533;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1506 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1113, _1117, _1120, _1123));
        float _1510 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1514 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1521 = dot(vec4(cbModelParam._m0[39u]), vec4(_1490, _1491, _1492, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1544;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1535 = dot(vec4(cbModelParam._m0[40u]), vec4(_1490, _1491, _1492, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1548 = (_1544 * cbModelParam._m0[1u].x) + (_1533 * (1.0 - cbModelParam._m0[1u].x));
    float _1558 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _595);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1558 : min(cbModelParam._m0[25u].z, _1558));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_812, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_812, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_812, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_753, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751));
        float _1622 = fma(_753, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751));
        float _1625 = fma(_753, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1653 = frontier_phi_14_12_ladder;
        }
        float _1824;
        if (_1622 > 0.0)
        {
            _1824 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1824 = frontier_phi_23_19_ladder;
        }
        float _2119;
        if (_1625 > 0.0)
        {
            _2119 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2119 = frontier_phi_35_30_ladder;
        }
        float _2121 = isnan(_1824) ? _1653 : (isnan(_1653) ? _1824 : min(_1653, _1824));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1619) + _1608;
        float _2127 = (_2122 * _1622) + _1612;
        float _2128 = (_2122 * _1625) + _1616;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2129;
        float _2133 = _2129 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 > _2133) || ((_2127 < _2131) || ((_2126 < _2131) || (_2126 > _2133))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2273 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2128, cbModelParam._m0[9u].z, fma(_2127, cbModelParam._m0[9u].y, _2126 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2128, cbModelParam._m0[10u].z, fma(_2127, cbModelParam._m0[10u].y, _2126 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2128, cbModelParam._m0[11u].z, fma(_2127, cbModelParam._m0[11u].y, _2126 * cbModelParam._m0[11u].x))), _1559);
            frontier_phi_13_35_ladder = _2273.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2273.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2273.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_13_35_ladder_2;
        _1643 = frontier_phi_13_35_ladder_1;
        _1645 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_751, _752, _753), _1559);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _595);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1705 = fma(_812, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804)) + cbModelParam._m0[21u].w;
        float _1709 = fma(_812, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804)) + cbModelParam._m0[22u].w;
        float _1713 = fma(_812, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804)) + cbModelParam._m0[23u].w;
        float _1716 = fma(_753, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751));
        float _1719 = fma(_753, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751));
        float _1722 = fma(_753, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751));
        float _1829;
        if (_1716 > 0.0)
        {
            _1829 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1829 = frontier_phi_25_21_ladder;
        }
        float _2146;
        if (_1719 > 0.0)
        {
            _2146 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2146 = frontier_phi_37_32_ladder;
        }
        float _2473;
        if (_1722 > 0.0)
        {
            _2473 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2473 = frontier_phi_47_44_ladder;
        }
        float _2475 = isnan(_2146) ? _1829 : (isnan(_1829) ? _2146 : min(_1829, _2146));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1716) + _1705;
        float _2481 = (_2476 * _1719) + _1709;
        float _2482 = (_2476 * _1722) + _1713;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_22_47_ladder = _2600.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2600.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2600.x * cbModelParam._m0[1u].z;
        }
        _1741 = frontier_phi_22_47_ladder_2;
        _1743 = frontier_phi_22_47_ladder_1;
        _1745 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_751, _752, _753), _1650);
        _1741 = _1725.x * cbModelParam._m0[1u].z;
        _1743 = _1725.y * cbModelParam._m0[1u].z;
        _1745 = _1725.z * cbModelParam._m0[1u].z;
    }
    float _1757 = ((((1.0 - _772) * ((_759 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_772 * _759)) * _743;
    float _1758 = _1757 * ((cbModelParam._m0[1u].w * (_1741 - _1641)) + _1641);
    float _1759 = _1757 * ((cbModelParam._m0[1u].w * (_1743 - _1643)) + _1643);
    float _1760 = _1757 * ((cbModelParam._m0[1u].w * (_1745 - _1645)) + _1645);
    float _1763 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, _1758 * cbSceneParam._m0[91u].x));
    float _1803 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1807 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1811 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1815 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1816 = _1803 / _1815;
    float _1817 = _1807 / _1815;
    float _1818 = _1811 / _1815;
    float _1965;
    float _1966;
    float _1967;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1845 = ((uint(_1818 > cbSceneParam._m0[59u].y) + uint(_1818 > cbSceneParam._m0[59u].x)) + uint(_1818 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1846 = _1845 + 43u;
        uint _1854 = _1845 + 44u;
        uint _1862 = _1845 + 45u;
        uint _1870 = _1845 + 46u;
        float _1881 = fma(_1815, cbSceneParam._m0[_1846].w, fma(_1811, cbSceneParam._m0[_1846].z, fma(_1807, cbSceneParam._m0[_1846].y, _1803 * cbSceneParam._m0[_1846].x)));
        float _1885 = fma(_1815, cbSceneParam._m0[_1854].w, fma(_1811, cbSceneParam._m0[_1854].z, fma(_1807, cbSceneParam._m0[_1854].y, _1803 * cbSceneParam._m0[_1854].x)));
        float _1893 = fma(_1815, cbSceneParam._m0[_1870].w, fma(_1811, cbSceneParam._m0[_1870].z, fma(_1807, cbSceneParam._m0[_1870].y, _1803 * cbSceneParam._m0[_1870].x)));
        float _1898 = cbSceneParam._m0[33u].z * _1893;
        float _1900 = cbSceneParam._m0[33u].w * _1893;
        float _1903 = fma(_1815, cbSceneParam._m0[_1862].w, fma(_1811, cbSceneParam._m0[_1862].z, fma(_1807, cbSceneParam._m0[_1862].y, _1803 * cbSceneParam._m0[_1862].x))) / _1893;
        float _1951 = (cbSceneParam._m0[33u].x - sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818))) * cbSceneParam._m0[33u].y;
        float _4217 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1958 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1898 + _1881) / _1893, (_1900 + _1885) / _1893), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1900 + _1881) / _1893, (_1885 - _1898) / _1893), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 - _1898) / _1893, (_1885 - _1900) / _1893), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 - _1900) / _1893, (_1898 + _1885) / _1893), _1903), 0.0)).x), vec4(0.25)));
        _1965 = 1.0 - (_1958 * cbSceneParam._m0[34u].x);
        _1966 = 1.0 - (_1958 * cbSceneParam._m0[34u].y);
        _1967 = 1.0 - (_1958 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1965 = 1.0;
        _1966 = 1.0;
        _1967 = 1.0;
    }
    float _2031;
    float _2033;
    float _2035;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2019 = fma(_1815, cbSceneParam._m0[63u].w, fma(_1811, cbSceneParam._m0[63u].z, fma(_1807, cbSceneParam._m0[63u].y, _1803 * cbSceneParam._m0[63u].x)));
        float _2020 = fma(_1815, cbSceneParam._m0[60u].w, fma(_1811, cbSceneParam._m0[60u].z, fma(_1807, cbSceneParam._m0[60u].y, _1803 * cbSceneParam._m0[60u].x))) / _2019;
        float _2021 = fma(_1815, cbSceneParam._m0[61u].w, fma(_1811, cbSceneParam._m0[61u].z, fma(_1807, cbSceneParam._m0[61u].y, _1803 * cbSceneParam._m0[61u].x))) / _2019;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2020 >= cbSceneParam._m0[64u].x) && (_2021 >= cbSceneParam._m0[64u].y)) && (_2020 <= cbSceneParam._m0[64u].z)) && (_2021 <= cbSceneParam._m0[64u].w))
        {
            float _2159 = fma(_1815, cbSceneParam._m0[62u].w, fma(_1811, cbSceneParam._m0[62u].z, fma(_1807, cbSceneParam._m0[62u].y, _1803 * cbSceneParam._m0[62u].x))) / _2019;
            float _2163 = isnan(cbSceneParam._m0[41u].w) ? _2159 : (isnan(_2159) ? cbSceneParam._m0[41u].w : max(_2159, cbSceneParam._m0[41u].w));
            float _2206 = (cbSceneParam._m0[33u].x - sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818))) * cbSceneParam._m0[33u].y;
            float _4233 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
            float _2213 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2020, cbSceneParam._m0[33u].w + _2021), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2020, _2021 - cbSceneParam._m0[33u].z), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2020 - cbSceneParam._m0[33u].z, _2021 - cbSceneParam._m0[33u].w), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2020 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2021), _2163), 0.0)).x), vec4(0.25)));
            float _2217 = 1.0 - (_2213 * cbSceneParam._m0[34u].x);
            float _2218 = 1.0 - (_2213 * cbSceneParam._m0[34u].y);
            float _2219 = 1.0 - (_2213 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2219) ? _1967 : (isnan(_1967) ? _2219 : min(_1967, _2219));
            frontier_phi_34_33_ladder_1 = isnan(_2218) ? _1966 : (isnan(_1966) ? _2218 : min(_1966, _2218));
            frontier_phi_34_33_ladder_2 = isnan(_2217) ? _1965 : (isnan(_1965) ? _2217 : min(_1965, _2217));
        }
        else
        {
            frontier_phi_34_33_ladder = _1967;
            frontier_phi_34_33_ladder_1 = _1966;
            frontier_phi_34_33_ladder_2 = _1965;
        }
        _2031 = frontier_phi_34_33_ladder_2;
        _2033 = frontier_phi_34_33_ladder_1;
        _2035 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2031 = _1965;
        _2033 = _1966;
        _2035 = _1967;
    }
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2050 = _743 + (-1.0);
    float _2055 = (cbLight._m0[_2043].x * _2050) + 1.0;
    float _2056 = (cbLight._m0[_2043].y * _2050) + 1.0;
    float _2057 = (cbLight._m0[_2043].z * _2050) + 1.0;
    float _2058 = (cbLight._m0[_2043].w * _2050) + 1.0;
    uint _2059 = _2042 + 5u;
    float _2065 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2069 = _2042 + 4u;
    float _2078 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2082 = _2042 | 1u;
    float _2093 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_592, _593, _594));
    float _2096 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_592, _593, _594));
    float _4269 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _4280 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2101 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2103 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2110 = ((cbLight._m0[_2059].x * _2065) * _2103) + (((cbLight._m0[_2069].x * _2031) * _2078) * _2101);
    float _2111 = ((_2065 * cbLight._m0[_2059].y) * _2103) + (((cbLight._m0[_2069].y * _2033) * _2078) * _2101);
    float _2112 = ((_2065 * cbLight._m0[_2059].z) * _2103) + (((cbLight._m0[_2069].z * _2035) * _2078) * _2101);
    uvec4 _2116 = floatBitsToUint(cbLight._m0[_2042 + 12u]);
    bool _2118 = _2116.x == 0u;
    float _2220;
    float _2222;
    float _2224;
    if (_2118)
    {
        _2220 = _2110;
        _2222 = _2111;
        _2224 = _2112;
    }
    else
    {
        uint _2228 = _2042 + 6u;
        float _2244 = (dot(vec3(cbLight._m0[_2042 + 2u].xyz), vec3(_592, _593, _594)) * 0.5) + 0.5;
        float _2245 = _2244 * _2244;
        float _4291 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2246 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2247 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2220 = (((cbLight._m0[_2228].x * 0.3183098733425140380859375) * _2246) * _2247) + _2110;
        _2222 = (((cbLight._m0[_2228].y * 0.3183098733425140380859375) * _2246) * _2247) + _2111;
        _2224 = (((cbLight._m0[_2228].z * 0.3183098733425140380859375) * _2246) * _2247) + _2112;
    }
    bool _2227 = _2116.y == 0u;
    float _2282;
    float _2284;
    float _2286;
    if (_2227)
    {
        _2282 = _2220;
        _2284 = _2222;
        _2286 = _2224;
    }
    else
    {
        uint _2444 = _2042 + 7u;
        float _2460 = (dot(vec3(cbLight._m0[_2042 + 3u].xyz), vec3(_592, _593, _594)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4307 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2463 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2282 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2220;
        _2284 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2222;
        _2286 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2224;
    }
    uint _2289 = _2042 + 8u;
    float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _595) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_2042].x + _672;
    float _2305 = cbLight._m0[_2042].y + _673;
    float _2306 = cbLight._m0[_2042].z + _674;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2042].xyz));
    float _4323 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _4334 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _2318 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2319 = dot(vec3(_592, _593, _594), vec3(_2311, _2312, _2313));
    float _4345 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2323 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2311, _2312, _2313));
    float _4356 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2327 = _2303 * _2303;
    float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
    float _2342 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2343 = 1.0 - _2303;
    float _2354 = (0.5 / (((_2318 * ((_2317 * _2343) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2343) + _2303) * _2317))) * _2317;
    float _4367 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
    uint _2370 = _2042 + 9u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _595) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2082].x + _672;
    float _2384 = cbLight._m0[_2082].y + _673;
    float _2385 = cbLight._m0[_2082].z + _674;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2082].xyz));
    float _4378 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2397 = dot(vec3(_592, _593, _594), vec3(_2390, _2391, _2392));
    float _4389 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2390, _2391, _2392));
    float _4400 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2382 * _2382;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2418 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2419 = 1.0 - _2382;
    float _2429 = (0.5 / (((_2318 * ((_2396 * _2419) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2419) + _2382) * _2396))) * _2396;
    float _4411 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    float _2441 = (((_2418 * cbLight._m0[_2370].x) * _2431) * _2065) + ((((cbLight._m0[_2289].x * _2031) * _2342) * _2356) * _2078);
    float _2442 = (((_2418 * cbLight._m0[_2370].y) * _2431) * _2065) + ((((cbLight._m0[_2289].y * _2033) * _2342) * _2356) * _2078);
    float _2443 = (((_2418 * cbLight._m0[_2370].z) * _2431) * _2065) + ((((cbLight._m0[_2289].z * _2035) * _2342) * _2356) * _2078);
    float _2499;
    float _2501;
    float _2503;
    if (_2118)
    {
        _2499 = _2441;
        _2501 = _2442;
        _2503 = _2443;
    }
    else
    {
        uint _2505 = _2042 + 2u;
        uint _2509 = _2042 + 10u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _595) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _672;
        float _2526 = cbLight._m0[_2505].y + _673;
        float _2527 = cbLight._m0[_2505].z + _674;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2505].xyz));
        float _4422 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2539 = dot(vec3(_592, _593, _594), vec3(_2532, _2533, _2534));
        float _4433 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4444 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2560 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2561 = 1.0 - _2524;
        float _2571 = (0.5 / (((_2318 * ((_2538 * _2561) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2561) + _2524) * _2538))) * _2538;
        float _4455 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2573 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2574 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2499 = (((_2560 * cbLight._m0[_2509].x) * _2573) * _2574) + _2441;
        _2501 = (((_2560 * cbLight._m0[_2509].y) * _2573) * _2574) + _2442;
        _2503 = (((_2560 * cbLight._m0[_2509].z) * _2573) * _2574) + _2443;
    }
    float _2605;
    float _2607;
    float _2609;
    if (_2227)
    {
        _2605 = _2499;
        _2607 = _2501;
        _2609 = _2503;
    }
    else
    {
        uint _2616 = _2042 + 3u;
        uint _2620 = _2042 + 11u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _595) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _672;
        float _2637 = cbLight._m0[_2616].y + _673;
        float _2638 = cbLight._m0[_2616].z + _674;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2616].xyz));
        float _4471 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2650 = dot(vec3(_592, _593, _594), vec3(_2643, _2644, _2645));
        float _4482 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4493 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2671 = (exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2672 = 1.0 - _2635;
        float _2682 = (0.5 / (((_2318 * ((_2649 * _2672) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2672) + _2635) * _2649))) * _2649;
        float _4504 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2684 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2685 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2605 = (((_2671 * cbLight._m0[_2620].x) * _2684) * _2685) + _2499;
        _2607 = (((_2671 * cbLight._m0[_2620].y) * _2684) * _2685) + _2501;
        _2609 = (((_2671 * cbLight._m0[_2620].z) * _2684) * _2685) + _2503;
    }
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_2040.y == 0u)
    {
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.x;
        uint _2718 = uint((float(_2706.y) * floor(float(uint(cbSceneParam._m0[85u].y * _681) / _2707))) + floor(float(uint(cbSceneParam._m0[85u].x * _680) / _2707)));
        float _2728 = (log2(_1818 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2729 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        uint _2732 = uint(isnan(14.0) ? _2729 : (isnan(_2729) ? 14.0 : min(_2729, 14.0)));
        uvec4 _2737 = texelFetch(g_lightClusterGridBuffer, int(((_2732 << 2u) + (_2718 << 6u)) >> 2u));
        uint _2738 = _2737.x;
        uint _2739 = _2706.z;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((((1u << ((_2739 >> 4u) & 15u)) + 4294967295u) & _2738) == 0u) || ((_2739 & 240u) == 0u))
        {
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
        }
        else
        {
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            uint _2969 = 0u;
            uint _2978;
            bool _2979;
            for (;;)
            {
                _2978 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_2969 << 2u)) >> 2u)).x;
                _2979 = _2978 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2979)
                {
                    frontier_phi_66_pred = _2968;
                    frontier_phi_66_pred_1 = _2967;
                    frontier_phi_66_pred_2 = _2966;
                    frontier_phi_66_pred_3 = _2965;
                    frontier_phi_66_pred_4 = _2964;
                    frontier_phi_66_pred_5 = _2963;
                }
                else
                {
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    uint _3093;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2968;
                    _3093 = _2978;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    for (;;)
                    {
                        uint _3097 = uint(findLSB(_3093)) + (_2969 << 5u);
                        uint _3094 = (_3093 + 4294967295u) & _3093;
                        uint _3099 = _3097 * 48u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 3u)).x));
                        uint _3119 = (_3097 * 48u) + 4u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3138 = (_3097 * 48u) + 8u;
                        vec3 _3149 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x));
                        float _3153 = _3113.x - _1816;
                        float _3154 = _3113.y - _1817;
                        float _3155 = _3113.z - _1818;
                        float _3156 = dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155));
                        float _3159 = inversesqrt(_3156);
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3163 = dot(vec3(_699, _702, _705), vec3(_3160, _3161, _3162));
                        float _3168 = 1.0 - (_3156 * _3113.w);
                        float _4530 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3169 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3170 = sqrt(_3156) * _3132.w;
                        float _3173 = 1.39999997615814208984375 / (_3170 + 1.39999997615814208984375);
                        float _3174 = _3173 * _3173;
                        float _3177 = ((1.0 - _3174) * _3163) + _3174;
                        float _3180 = _3170 * _3170;
                        float _3184 = ((isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))) * _3169) / ((_3180 * 0.699999988079071044921875) + 1.0);
                        float _3188 = (-0.0) - _1816;
                        float _3189 = (-0.0) - _1817;
                        float _3190 = (-0.0) - _1818;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3204 = exp2(log2(1.0 / ((_3180 * 3.5) + 5.0)) * 0.25);
                        float _3205 = 1.0 - _759;
                        float _3212 = sqrt(1.0 - ((1.0 - (_3205 * _3205)) * (1.0 - (_3204 * _3204))));
                        float _3213 = _3212 * _3212;
                        float _3214 = _3213 * _3213;
                        float _3215 = _3195 + _3160;
                        float _3216 = _3196 + _3161;
                        float _3217 = _3197 + _3162;
                        float _3221 = inversesqrt(dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217)));
                        float _3225 = dot(vec3(_699, _702, _705), vec3(_3195, _3196, _3197));
                        float _4546 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3229 = dot(vec3(_699, _702, _705), vec3(_3221 * _3215, _3221 * _3216, _3221 * _3217));
                        float _4557 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3236 = ((_3232 * _3232) * (_3214 + (-1.0))) + 1.0;
                        float _3237 = _3173 * _3213;
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3163) + _3238;
                        float _4568 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3243 = 1.0 - _3213;
                        float _3253 = (0.5 / (((_3242 * ((_3228 * _3243) + _3213)) + 9.9999999392252902907785028219223e-09) + (((_3242 * _3243) + _3213) * _3228))) * _3242;
                        float _4579 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3264 = (((_3214 * 3.1415927410125732421875) * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) / ((_3236 * _3236) * ((_3180 * 2.1991131305694580078125) + 3.141590118408203125))) * _3169;
                        _3022 = (_3184 * _3132.x) + _3090;
                        _3023 = (_3184 * _3132.y) + _3091;
                        _3024 = (_3184 * _3132.z) + _3092;
                        _3019 = (_3264 * _3149.x) + _3087;
                        _3020 = (_3264 * _3149.y) + _3088;
                        _3021 = (_3264 * _3149.z) + _3089;
                        if (_3094 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3024;
                            _3093 = _3094;
                        }
                    }
                    frontier_phi_66_pred = _3024;
                    frontier_phi_66_pred_1 = _3023;
                    frontier_phi_66_pred_2 = _3022;
                    frontier_phi_66_pred_3 = _3021;
                    frontier_phi_66_pred_4 = _3020;
                    frontier_phi_66_pred_5 = _3019;
                }
                _2829 = frontier_phi_66_pred;
                _2827 = frontier_phi_66_pred_1;
                _2825 = frontier_phi_66_pred_2;
                _2823 = frontier_phi_66_pred_3;
                _2821 = frontier_phi_66_pred_4;
                _2819 = frontier_phi_66_pred_5;
                uint _2970 = _2969 + 1u;
                if (_2970 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2963 = _2819;
                    _2964 = _2821;
                    _2965 = _2823;
                    _2966 = _2825;
                    _2967 = _2827;
                    _2968 = _2829;
                    _2969 = _2970;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
        }
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.z;
        uint _2835 = (_2833 >> 8u) & 15u;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        if (((4294967295u << _2835) & _2738) == 0u)
        {
            _2931 = _2818;
            _2933 = _2820;
            _2935 = _2822;
            _2937 = _2824;
            _2939 = _2826;
            _2941 = _2828;
        }
        else
        {
            float _2956 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
            float _2957 = _2956 * _1816;
            float _2958 = _2956 * _1817;
            float _2959 = _2956 * _1818;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2835 < ((_2833 >> 12u) & 15u))
            {
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _3070 = _2818;
                float _3071 = _2820;
                float _3072 = _2822;
                float _3073 = _2824;
                float _3074 = _2826;
                float _3075 = _2828;
                uint _3076 = _2835;
                uint _3085;
                bool _3086;
                for (;;)
                {
                    _3085 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_3076 << 2u)) >> 2u)).x;
                    _3086 = _3085 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3086)
                    {
                        frontier_phi_72_pred = _3075;
                        frontier_phi_72_pred_1 = _3074;
                        frontier_phi_72_pred_2 = _3073;
                        frontier_phi_72_pred_3 = _3072;
                        frontier_phi_72_pred_4 = _3071;
                        frontier_phi_72_pred_5 = _3070;
                    }
                    else
                    {
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3282 = _3070;
                        float _3283 = _3071;
                        float _3284 = _3072;
                        float _3285 = _3073;
                        float _3286 = _3074;
                        float _3287 = _3075;
                        uint _3288 = _3085;
                        uint _3289;
                        vec4 _3314;
                        float _3315;
                        vec4 _3330;
                        vec3 _3342;
                        vec4 _3357;
                        vec4 _3372;
                        float _3418;
                        bool _3419;
                        for (;;)
                        {
                            uint _3299 = ((_3076 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3288));
                            _3289 = (_3288 + 4294967295u) & _3288;
                            uint _3301 = _3299 * 40u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3315 = _3314.w;
                            uint _3317 = (_3299 * 40u) + 4u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3299 * 40u) + 8u;
                            _3342 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x));
                            uint _3344 = (_3299 * 40u) + 16u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3299 * 40u) + 20u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3299 * 40u) + 24u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3393 = (_3299 * 40u) + 28u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3418 = fma(_1818, _3406.z, fma(_1817, _3406.y, _3406.x * _1816)) + _3406.w;
                            _3419 = !((fma(_1818, _3387.z, fma(_1817, _3387.y, _3387.x * _1816)) + _3387.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3419)
                            {
                                float _3446 = _3314.x - _1816;
                                float _3447 = _3314.y - _1817;
                                float _3448 = _3314.z - _1818;
                                float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                                float _3452 = inversesqrt(_3449);
                                float _3453 = _3452 * _3446;
                                float _3454 = _3452 * _3447;
                                float _3455 = _3452 * _3448;
                                float _3459 = 1.0 - (_3449 / (_3315 * _3315));
                                float _4590 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3464 = sqrt(_3449) * _3330.w;
                                float _3466 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                                float _3467 = _3466 * _3466;
                                float _3470 = ((1.0 - _3467) * dot(vec3(_3453, _3454, _3455), vec3(_699, _702, _705))) + _3467;
                                float _3473 = _3464 * _3464;
                                float _3477 = (fma(_1818, _3357.z, fma(_1817, _3357.y, _3357.x * _1816)) + _3357.w) / _3418;
                                float _3478 = (fma(_1818, _3372.z, fma(_1817, _3372.y, _3372.x * _1816)) + _3372.w) / _3418;
                                float _3482 = 1.0 - dot(vec2(_3477, _3478), vec2(_3477, _3478));
                                float _4606 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3484 = _3483 * (((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3460) / ((_3473 * 0.699999988079071044921875) + 1.0));
                                float _3496 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                                float _3497 = 1.0 - _759;
                                float _3504 = sqrt(1.0 - ((1.0 - (_3497 * _3497)) * (1.0 - (_3496 * _3496))));
                                float _3505 = _3504 * _3504;
                                float _3506 = _3505 * _3505;
                                float _3507 = _3453 - _2957;
                                float _3508 = _3454 - _2958;
                                float _3509 = _3455 - _2959;
                                float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                                float _3517 = dot(vec3(_699, _702, _705), vec3((-0.0) - _2957, (-0.0) - _2958, (-0.0) - _2959));
                                float _4617 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3521 = dot(vec3(_699, _702, _705), vec3(_3513 * _3507, _3513 * _3508, _3513 * _3509));
                                float _4628 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3528 = ((_3524 * _3524) * (_3506 + (-1.0))) + 1.0;
                                float _3529 = _3466 * _3505;
                                float _3530 = _3529 * _3529;
                                float _3536 = ((1.0 - _3530) * dot(vec3(_699, _702, _705), vec3(_3453, _3454, _3455))) + _3530;
                                float _4639 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3538 = 1.0 - _3505;
                                float _3548 = (0.5 / (((_3537 * ((_3520 * _3538) + _3505)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3505) * _3520))) * _3537;
                                float _4650 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3558 = (_3483 * _3460) * (((_3506 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3528 * _3528) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3484 * _3330.y;
                                frontier_phi_78_pred_1 = _3484 * _3330.x;
                                frontier_phi_78_pred_2 = _3558 * _3342.z;
                                frontier_phi_78_pred_3 = _3558 * _3342.y;
                                frontier_phi_78_pred_4 = _3558 * _3342.x;
                                frontier_phi_78_pred_5 = _3484 * _3330.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3566 = frontier_phi_78_pred;
                            _3565 = frontier_phi_78_pred_1;
                            _3564 = frontier_phi_78_pred_2;
                            _3563 = frontier_phi_78_pred_3;
                            _3562 = frontier_phi_78_pred_4;
                            _3567 = frontier_phi_78_pred_5;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            _3271 = _3564 + _3284;
                            if (_3289 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3289;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3274;
                        frontier_phi_72_pred_1 = _3273;
                        frontier_phi_72_pred_2 = _3272;
                        frontier_phi_72_pred_3 = _3271;
                        frontier_phi_72_pred_4 = _3270;
                        frontier_phi_72_pred_5 = _3269;
                    }
                    _2942 = frontier_phi_72_pred;
                    _2940 = frontier_phi_72_pred_1;
                    _2938 = frontier_phi_72_pred_2;
                    _2936 = frontier_phi_72_pred_3;
                    _2934 = frontier_phi_72_pred_4;
                    _2932 = frontier_phi_72_pred_5;
                    uint _3077 = _3076 + 1u;
                    if (_3077 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3070 = _2932;
                        _3071 = _2934;
                        _3072 = _2936;
                        _3073 = _2938;
                        _3074 = _2940;
                        _3075 = _2942;
                        _3076 = _3077;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2942;
                frontier_phi_60_61_ladder_1 = _2940;
                frontier_phi_60_61_ladder_2 = _2936;
                frontier_phi_60_61_ladder_3 = _2934;
                frontier_phi_60_61_ladder_4 = _2932;
                frontier_phi_60_61_ladder_5 = _2938;
            }
            else
            {
                frontier_phi_60_61_ladder = _2828;
                frontier_phi_60_61_ladder_1 = _2826;
                frontier_phi_60_61_ladder_2 = _2822;
                frontier_phi_60_61_ladder_3 = _2820;
                frontier_phi_60_61_ladder_4 = _2818;
                frontier_phi_60_61_ladder_5 = _2824;
            }
            _2931 = frontier_phi_60_61_ladder_4;
            _2933 = frontier_phi_60_61_ladder_3;
            _2935 = frontier_phi_60_61_ladder_2;
            _2937 = frontier_phi_60_61_ladder_5;
            _2939 = frontier_phi_60_61_ladder_1;
            _2941 = frontier_phi_60_61_ladder;
        }
        float _2946 = isnan(1.0) ? _743 : (isnan(_743) ? 1.0 : min(_743, 1.0));
        _2751 = (_2946 * _2937) + _2282;
        _2753 = (_2946 * _2939) + _2284;
        _2755 = (_2946 * _2941) + _2286;
        _2757 = ((_2931 * 0.039999999105930328369140625) * _2946) + _2605;
        _2759 = ((_2933 * 0.039999999105930328369140625) * _2946) + _2607;
        _2761 = ((_2935 * 0.039999999105930328369140625) * _2946) + _2609;
    }
    else
    {
        _2751 = _2282;
        _2753 = _2284;
        _2755 = _2286;
        _2757 = _2605;
        _2759 = _2607;
        _2761 = _2609;
    }
    float _4666 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4677 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4688 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    uint _2781 = _260 + 6u;
    float _2789 = _680 / cbSceneParam._m0[86u].x;
    float _2790 = _681 / cbSceneParam._m0[86u].y;
    vec4 _2804 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, (log2((isnan(cbSceneParam._m0[77u].w) ? _613 : (isnan(_613) ? cbSceneParam._m0[77u].w : min(_613, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2806 = _2804.x;
    float _2807 = _2804.y;
    float _2808 = _2804.z;
    float _2809 = _2804.w;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    if (_613 > cbSceneParam._m0[78u].w)
    {
        float _2843 = isnan(_613) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _613 : min(cbSceneParam._m0[80u].w, _613));
        float _2844 = _2843 / _613;
        float _2855 = _2844 * _665;
        float _2856 = _666 * _2844;
        float _2857 = (-0.0) - _2856;
        float _2859 = _2844 * _667;
        float _2861 = (cbSceneParam._m0[77u].w * _2857) / _2843;
        float _2862 = _2861 + cbSceneParam._m0[79u].w;
        float _2863 = cbSceneParam._m0[79u].w - _2856;
        float _2869 = sqrt(((_2855 * _2855) + (_2856 * _2856)) + (_2859 * _2859));
        float _2872 = (1.0 - (cbSceneParam._m0[77u].w / _2843)) * _2869;
        float _2877 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2879 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3032;
        if (abs((_2857 - _2861) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3032 = ((((_2862 > 0.0) ? exp2(_2877 * _2862) : (2.0 - exp2(_2879 * _2862))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2872;
        }
        else
        {
            float _2992 = 1.0 / cbSceneParam._m0[80u].x;
            float _2993 = isnan(_2863) ? _2862 : (isnan(_2862) ? _2863 : max(_2862, _2863));
            float _2994 = isnan(_2863) ? _2862 : (isnan(_2862) ? _2863 : min(_2862, _2863));
            float _3003 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : min(_2993, 0.0));
            float _3004 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : min(_2994, 0.0));
            _3032 = ((abs(_2869 / _2857) * cbSceneParam._m0[80u].y) * ((((_3003 - _3004) * 2.0) - ((exp2(_2877 * (isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0)))) - exp2(_2877 * (isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))))) * _2992)) - ((exp2(_2879 * _3003) - exp2(_2879 * _3004)) * _2992))) + (_2872 * cbSceneParam._m0[80u].z);
        }
        vec4 _3034 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, 1.0), 0.0);
        float _3043 = exp2((_3032 * (-1.44269502162933349609375)) * (1.0 - _3034.w));
        float _3044 = log2(_3043);
        float _3060 = log2(_2809);
        _2881 = (exp2(_3060 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].x)) * _3034.x) / cbSceneParam._m0[78u].x)) + _2806;
        _2883 = (exp2(_3060 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].y)) * _3034.y) / cbSceneParam._m0[78u].y)) + _2807;
        _2885 = (exp2(_3060 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].z)) * _3034.z) / cbSceneParam._m0[78u].z)) + _2808;
        _2887 = _3043 * _2809;
    }
    else
    {
        _2881 = _2806;
        _2883 = _2807;
        _2885 = _2808;
        _2887 = _2809;
    }
    float _2899 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2900 = _2899 == 3.0;
    float _2901 = log2(_2887);
    float _2908 = exp2(_2901 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2751 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _743))) + ((_2757 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2909 = exp2(_2901 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2753 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _743))) + ((_2759 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2910 = exp2(_2901 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2755 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _743))) + ((_2761 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2919 = (_2899 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2919 * (_2900 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.y = _2919 * (_2900 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.z = _2919 * (_2900 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2885)));
    SV_Target.w = cbInstanceData._m0[_2781].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2781].w;
}


