#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1281;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3868 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3879 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3890 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[24u].z) + _441) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3901 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _469 = (_324.x * cbMtdParam._m0[9u].x) * ((_459 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355);
    float _470 = (_324.y * cbMtdParam._m0[9u].y) * ((_459 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356);
    float _471 = (_324.z * cbMtdParam._m0[9u].z) * ((_459 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357);
    float _475 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _469;
    float _478 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _470;
    float _481 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _471;
    float _489 = (((_469 - _475) * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) + _475) * 4.55000019073486328125;
    float _491 = (((_470 - _478) * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) + _478) * 4.55000019073486328125;
    float _493 = (((_471 - _481) * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) + _481) * 4.55000019073486328125;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _287) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _288) + cbTextureTilingScale._m0[14u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _578 = _576.x;
    float _579 = _576.y;
    float _580 = _576.z;
    float _589 = ((_559.z - _580) * _459) + _580;
    float _592 = ((((_559.x - _578) * _459) + _578) * 2.0) + (-1.0);
    float _593 = ((((_559.y - _579) * _459) + _579) * 2.0) + (-1.0);
    float _594 = dot(vec2(_592, _593), vec2(_592, _593));
    float _3912 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _599 = sqrt(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _631 = (_592 + ((((_532.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_619.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _632 = (_593 + ((((_532.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_619.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _635 = fma(_599, _235, fma(_632, _242, _631 * _228));
    float _638 = fma(_599, _236, fma(_632, _243, _631 * _229));
    float _641 = fma(_599, _237, fma(_632, _244, _631 * _230));
    float _645 = inversesqrt(dot(vec3(_635, _638, _641), vec3(_635, _638, _641)));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _674 = _672.x;
    float _675 = 1.0 - _674;
    float _681 = (cbMtdParam._m0[19u].x + dot(vec4(_645 * _635, _645 * _638, _645 * _641, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_674 - _675) * cbMtdParam._m0[24u].w) + _675) * cbMtdParam._m0[21u].z);
    float _3923 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _689 = (_682 * ((_512.x * cbMtdParam._m0[18u].x) - _489)) + _489;
    float _690 = (_682 * ((_512.y * cbMtdParam._m0[18u].y) - _491)) + _491;
    float _691 = (_682 * ((_512.z * cbMtdParam._m0[18u].z) - _493)) + _493;
    float _696 = (((_532.z - _589) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _589;
    float _700 = ((_619.z - _696) * cbMtdParam._m0[19u].w) + _696;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _720 = (_713.x * 2.0) + (-1.0);
    float _721 = (_713.y * 2.0) + (-1.0);
    float _722 = dot(vec2(_720, _721), vec2(_720, _721));
    float _3934 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _730 = ((_713.z - _700) * _682) + _700;
    float _740 = ((sqrt(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) - _599) * _682) + _599;
    float _743 = (((_720 - _631) * _682) + _631) + (cbMtdParam._m0[21u].x * _631);
    float _744 = (((_721 - _632) * _682) + _632) + (cbMtdParam._m0[21u].x * _632);
    float _746 = cbMtdParam._m0[22u].x + _619.w;
    float _749 = fma(_740, _235, fma(_744, _242, _743 * _228));
    float _752 = fma(_740, _236, fma(_744, _243, _743 * _229));
    float _755 = fma(_740, _237, fma(_744, _244, _743 * _230));
    float _759 = inversesqrt(dot(vec3(_749, _752, _755), vec3(_749, _752, _755)));
    float _760 = _759 * _749;
    float _761 = _759 * _752;
    float _762 = _759 * _755;
    float _3945 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _763 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _3967 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3978 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3989 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _781 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _832 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _822);
    float _833 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _822);
    float _834 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _822);
    float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
    float _839 = _832 * _838;
    float _840 = _833 * _838;
    float _841 = _834 * _838;
    float _847 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _848 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _866 = fma(_762, cbSceneParam._m0[5u].z, fma(_761, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _760));
    float _869 = fma(_762, cbSceneParam._m0[6u].z, fma(_761, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _760));
    float _872 = fma(_762, cbSceneParam._m0[7u].z, fma(_761, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _760));
    uint _886 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _892 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * cbInstanceData._m0[_886].x;
    float _893 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * cbInstanceData._m0[_886].y;
    float _894 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * cbInstanceData._m0[_886].z;
    float _4000 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    vec4 _906 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _847, cbSceneParam._m0[86u].y * _848));
    float _910 = ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * TEXCOORD_5.w) * _906.x;
    float _911 = dot(vec3(_760, _761, _762), vec3(_839, _840, _841));
    float _914 = _911 * 2.0;
    float _918 = (_914 * _760) - _839;
    float _919 = (_914 * _761) - _840;
    float _920 = (_914 * _762) - _841;
    float _924 = abs(dot(vec3(_839, _840, _841), vec3(_760, _761, _762)));
    float _4033 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _926 = sqrt(_763);
    float _939 = exp2((_926 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_926 * 3.0));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1280;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1005 = fma(_979, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971));
        float _1009 = fma(_979, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971));
        float _1013 = fma(_979, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971));
        float _1038 = _971 + _760;
        float _1039 = _975 + _761;
        float _1040 = _979 + _762;
        float _1050 = fma(_1040, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038)) - _1005;
        float _1051 = fma(_1040, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038)) - _1009;
        float _1052 = fma(_1040, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038)) - _1013;
        float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
        float _1069 = ((_1056 * _1050) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1005 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1056 * _1051) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1009 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1056 * _1052) / cbModelParam._m0[34u].z) + ((((((_1013 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        float _1108 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1074.x + (-0.5));
        float _1110 = _1108 * (_1074.y + (-0.5));
        float _1111 = _1108 * (_1074.z + (-0.5));
        float _1118 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1081.x + (-0.5));
        float _1120 = _1118 * (_1081.y + (-0.5));
        float _1121 = _1118 * (_1081.z + (-0.5));
        float _1128 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1088.x + (-0.5));
        float _1130 = _1128 * (_1088.y + (-0.5));
        float _1131 = _1128 * (_1088.z + (-0.5));
        float _1138 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1095.x + (-0.5));
        float _1140 = _1138 * (_1095.y + (-0.5));
        float _1141 = _1138 * (_1095.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1162 = (dot(vec3(_760, _761, _762), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1172 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _4081 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1174 + 1.0))) + _1179) * _1142;
        float _1189 = _1110 * 0.5;
        float _1190 = _1120 * 0.5;
        float _1191 = _1130 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_760, _761, _762), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4114 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1216 + 1.0))) + _1221) * _1143;
        float _1231 = _1111 * 0.5;
        float _1232 = _1121 * 0.5;
        float _1233 = _1131 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_760, _761, _762), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4147 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1258 + 1.0))) + _1263) * _1144;
        _1280 = _1111;
        _1282 = _1110;
        _1283 = _1109;
        _1284 = _1121;
        _1285 = _1120;
        _1286 = _1119;
        _1287 = _1131;
        _1288 = _1130;
        _1289 = _1129;
        _1290 = _1144;
        _1291 = _1143;
        _1292 = _1142;
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _1281;
        _1282 = _1281;
        _1283 = _1281;
        _1284 = _1281;
        _1285 = _1281;
        _1286 = _1281;
        _1287 = _1281;
        _1288 = _1281;
        _1289 = _1281;
        _1290 = _1281;
        _1291 = _1281;
        _1292 = _1281;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1320 = fma(_979, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971));
        float _1324 = fma(_979, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971));
        float _1328 = fma(_979, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971));
        float _1351 = _971 + _760;
        float _1352 = _975 + _761;
        float _1353 = _979 + _762;
        float _1363 = fma(_1353, cbModelParam._m0[30u].z, fma(_1352, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1351)) - _1320;
        float _1364 = fma(_1353, cbModelParam._m0[31u].z, fma(_1352, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1351)) - _1324;
        float _1365 = fma(_1353, cbModelParam._m0[32u].z, fma(_1352, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1351)) - _1328;
        float _1369 = inversesqrt(dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365)));
        float _1382 = ((_1369 * _1363) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1320 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1369 * _1364) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1324 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1369 * _1365) / cbModelParam._m0[35u].z) + ((((((_1328 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        float _1419 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1386.x + (-0.5));
        float _1421 = _1419 * (_1386.y + (-0.5));
        float _1422 = _1419 * (_1386.z + (-0.5));
        float _1429 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1393.x + (-0.5));
        float _1431 = _1429 * (_1393.y + (-0.5));
        float _1432 = _1429 * (_1393.z + (-0.5));
        float _1439 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1400.x + (-0.5));
        float _1441 = _1439 * (_1400.y + (-0.5));
        float _1442 = _1439 * (_1400.z + (-0.5));
        float _1449 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1407.x + (-0.5));
        float _1451 = _1449 * (_1407.y + (-0.5));
        float _1452 = _1449 * (_1407.z + (-0.5));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = _1420 * 0.5;
        float _1457 = _1430 * 0.5;
        float _1458 = _1440 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_760, _761, _762), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4210 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1483 + 1.0))) + _1488) * _1453;
        float _1498 = _1421 * 0.5;
        float _1499 = _1431 * 0.5;
        float _1500 = _1441 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_760, _761, _762), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4243 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1525 + 1.0))) + _1530) * _1454;
        float _1540 = _1422 * 0.5;
        float _1541 = _1432 * 0.5;
        float _1542 = _1442 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_760, _761, _762), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4276 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1567 + 1.0))) + _1572) * _1455;
        _1589 = _1422;
        _1590 = _1421;
        _1591 = _1420;
        _1592 = _1432;
        _1593 = _1431;
        _1594 = _1430;
        _1595 = _1442;
        _1596 = _1441;
        _1597 = _1440;
        _1598 = _1455;
        _1599 = _1454;
        _1600 = _1453;
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
    }
    else
    {
        _1589 = _1281;
        _1590 = _1281;
        _1591 = _1281;
        _1592 = _1281;
        _1593 = _1281;
        _1594 = _1281;
        _1595 = _1281;
        _1596 = _1281;
        _1597 = _1281;
        _1598 = _1281;
        _1599 = _1281;
        _1600 = _1281;
        _1601 = 0.0;
        _1602 = 0.0;
        _1603 = 0.0;
    }
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1293)) + _1293;
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1294)) + _1294;
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1295)) + _1295;
    float _1636 = fma(_1615, cbSceneParam._m0[89u].z, fma(_1614, cbSceneParam._m0[89u].y, _1613 * cbSceneParam._m0[89u].x));
    float _1639 = fma(_1615, cbSceneParam._m0[90u].z, fma(_1614, cbSceneParam._m0[90u].y, _1613 * cbSceneParam._m0[90u].x));
    float _1642 = fma(_1615, cbSceneParam._m0[91u].z, fma(_1614, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1613));
    float _1657 = _918 * 0.5;
    float _1658 = _919 * 0.5;
    float _1659 = _920 * 0.5;
    float _1660 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1663 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1666 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1700;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1673 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1280, _1284, _1287, _1290));
        float _1677 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1681 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1688 = dot(vec4(cbModelParam._m0[39u]), vec4(_1657, _1658, _1659, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1711;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1702 = dot(vec4(cbModelParam._m0[40u]), vec4(_1657, _1658, _1659, 1.0));
        _1711 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1711 = 1.0;
    }
    float _1715 = (_1711 * cbModelParam._m0[1u].x) + (_1700 * (1.0 - cbModelParam._m0[1u].x));
    float _1725 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _763);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1725 : min(cbModelParam._m0[25u].z, _1725));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1773 = fma(_979, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971)) + cbModelParam._m0[13u].w;
        float _1777 = fma(_979, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971)) + cbModelParam._m0[14u].w;
        float _1781 = fma(_979, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971)) + cbModelParam._m0[15u].w;
        float _1784 = fma(_920, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918));
        float _1787 = fma(_920, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918));
        float _1790 = fma(_920, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918));
        float _1818;
        if (_1784 > 0.0)
        {
            _1818 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1818 = frontier_phi_14_12_ladder;
        }
        float _1987;
        if (_1787 > 0.0)
        {
            _1987 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1987 = frontier_phi_23_19_ladder;
        }
        float _2282;
        if (_1790 > 0.0)
        {
            _2282 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2282 = frontier_phi_35_30_ladder;
        }
        float _2284 = isnan(_1987) ? _1818 : (isnan(_1818) ? _1987 : min(_1818, _1987));
        float _2285 = isnan(_2282) ? _2284 : (isnan(_2284) ? _2282 : min(_2284, _2282));
        float _2289 = (_2285 * _1784) + _1773;
        float _2290 = (_2285 * _1787) + _1777;
        float _2291 = (_2285 * _1790) + _1781;
        float _2292 = _2285 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2292;
        float _2296 = _2292 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 > _2296) || ((_2290 < _2294) || ((_2289 < _2294) || (_2289 > _2296))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2291, cbModelParam._m0[9u].z, fma(_2290, cbModelParam._m0[9u].y, _2289 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2291, cbModelParam._m0[10u].z, fma(_2290, cbModelParam._m0[10u].y, _2289 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2291, cbModelParam._m0[11u].z, fma(_2290, cbModelParam._m0[11u].y, _2289 * cbModelParam._m0[11u].x))), _1726);
            frontier_phi_13_35_ladder = _2436.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2436.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2436.x * cbModelParam._m0[1u].y;
        }
        _1806 = frontier_phi_13_35_ladder_2;
        _1808 = frontier_phi_13_35_ladder_1;
        _1810 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_918, _919, _920), _1726);
        _1806 = _1794.x * cbModelParam._m0[1u].y;
        _1808 = _1794.y * cbModelParam._m0[1u].y;
        _1810 = _1794.z * cbModelParam._m0[1u].y;
    }
    float _1814 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _763);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1814 : min(cbModelParam._m0[25u].w, _1814));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1868 = fma(_979, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971)) + cbModelParam._m0[21u].w;
        float _1872 = fma(_979, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971)) + cbModelParam._m0[22u].w;
        float _1876 = fma(_979, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971)) + cbModelParam._m0[23u].w;
        float _1879 = fma(_920, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918));
        float _1882 = fma(_920, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918));
        float _1885 = fma(_920, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918));
        float _1992;
        if (_1879 > 0.0)
        {
            _1992 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1992 = frontier_phi_25_21_ladder;
        }
        float _2309;
        if (_1882 > 0.0)
        {
            _2309 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2309 = frontier_phi_37_32_ladder;
        }
        float _2636;
        if (_1885 > 0.0)
        {
            _2636 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2636 = frontier_phi_47_44_ladder;
        }
        float _2638 = isnan(_2309) ? _1992 : (isnan(_1992) ? _2309 : min(_1992, _2309));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _1879) + _1868;
        float _2644 = (_2639 * _1882) + _1872;
        float _2645 = (_2639 * _1885) + _1876;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2647 = (-1.0) - _2646;
        float _2649 = _2646 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2645 > _2649) || ((_2645 < _2647) || ((_2644 > _2649) || ((_2644 < _2647) || ((_2643 < _2647) || (_2643 > _2649))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2645, cbModelParam._m0[17u].z, fma(_2644, cbModelParam._m0[17u].y, _2643 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2645, cbModelParam._m0[18u].z, fma(_2644, cbModelParam._m0[18u].y, _2643 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2645, cbModelParam._m0[19u].z, fma(_2644, cbModelParam._m0[19u].y, _2643 * cbModelParam._m0[19u].x))), _1815);
            frontier_phi_22_47_ladder = _2763.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2763.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2763.x * cbModelParam._m0[1u].z;
        }
        _1904 = frontier_phi_22_47_ladder_2;
        _1906 = frontier_phi_22_47_ladder_1;
        _1908 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_918, _919, _920), _1815);
        _1904 = _1888.x * cbModelParam._m0[1u].z;
        _1906 = _1888.y * cbModelParam._m0[1u].z;
        _1908 = _1888.z * cbModelParam._m0[1u].z;
    }
    float _1920 = ((((1.0 - _939) * ((_926 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_939 * _926)) * _910;
    float _1921 = _1920 * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1922 = _1920 * ((cbModelParam._m0[1u].w * (_1906 - _1808)) + _1808);
    float _1923 = _1920 * ((cbModelParam._m0[1u].w * (_1908 - _1810)) + _1810);
    float _1926 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1921 * cbSceneParam._m0[89u].x));
    float _1929 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1921 * cbSceneParam._m0[90u].x));
    float _1932 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, _1921 * cbSceneParam._m0[91u].x));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1979 = _1966 / _1978;
    float _1980 = _1970 / _1978;
    float _1981 = _1974 / _1978;
    float _2128;
    float _2129;
    float _2130;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2008 = ((uint(_1981 > cbSceneParam._m0[59u].y) + uint(_1981 > cbSceneParam._m0[59u].x)) + uint(_1981 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2009 = _2008 + 43u;
        uint _2017 = _2008 + 44u;
        uint _2025 = _2008 + 45u;
        uint _2033 = _2008 + 46u;
        float _2044 = fma(_1978, cbSceneParam._m0[_2009].w, fma(_1974, cbSceneParam._m0[_2009].z, fma(_1970, cbSceneParam._m0[_2009].y, _1966 * cbSceneParam._m0[_2009].x)));
        float _2048 = fma(_1978, cbSceneParam._m0[_2017].w, fma(_1974, cbSceneParam._m0[_2017].z, fma(_1970, cbSceneParam._m0[_2017].y, _1966 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1978, cbSceneParam._m0[_2033].w, fma(_1974, cbSceneParam._m0[_2033].z, fma(_1970, cbSceneParam._m0[_2033].y, _1966 * cbSceneParam._m0[_2033].x)));
        float _2061 = cbSceneParam._m0[33u].z * _2056;
        float _2063 = cbSceneParam._m0[33u].w * _2056;
        float _2066 = fma(_1978, cbSceneParam._m0[_2025].w, fma(_1974, cbSceneParam._m0[_2025].z, fma(_1970, cbSceneParam._m0[_2025].y, _1966 * cbSceneParam._m0[_2025].x))) / _2056;
        float _2114 = (cbSceneParam._m0[33u].x - sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981))) * cbSceneParam._m0[33u].y;
        float _4402 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2121 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 + _2044) / _2056, (_2063 + _2048) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 + _2044) / _2056, (_2048 - _2061) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 - _2061) / _2056, (_2048 - _2063) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 - _2063) / _2056, (_2061 + _2048) / _2056), _2066), 0.0)).x), vec4(0.25)));
        _2128 = 1.0 - (_2121 * cbSceneParam._m0[34u].x);
        _2129 = 1.0 - (_2121 * cbSceneParam._m0[34u].y);
        _2130 = 1.0 - (_2121 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2128 = 1.0;
        _2129 = 1.0;
        _2130 = 1.0;
    }
    float _2194;
    float _2196;
    float _2198;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2182 = fma(_1978, cbSceneParam._m0[63u].w, fma(_1974, cbSceneParam._m0[63u].z, fma(_1970, cbSceneParam._m0[63u].y, _1966 * cbSceneParam._m0[63u].x)));
        float _2183 = fma(_1978, cbSceneParam._m0[60u].w, fma(_1974, cbSceneParam._m0[60u].z, fma(_1970, cbSceneParam._m0[60u].y, _1966 * cbSceneParam._m0[60u].x))) / _2182;
        float _2184 = fma(_1978, cbSceneParam._m0[61u].w, fma(_1974, cbSceneParam._m0[61u].z, fma(_1970, cbSceneParam._m0[61u].y, _1966 * cbSceneParam._m0[61u].x))) / _2182;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2183 >= cbSceneParam._m0[64u].x) && (_2184 >= cbSceneParam._m0[64u].y)) && (_2183 <= cbSceneParam._m0[64u].z)) && (_2184 <= cbSceneParam._m0[64u].w))
        {
            float _2322 = fma(_1978, cbSceneParam._m0[62u].w, fma(_1974, cbSceneParam._m0[62u].z, fma(_1970, cbSceneParam._m0[62u].y, _1966 * cbSceneParam._m0[62u].x))) / _2182;
            float _2326 = isnan(cbSceneParam._m0[41u].w) ? _2322 : (isnan(_2322) ? cbSceneParam._m0[41u].w : max(_2322, cbSceneParam._m0[41u].w));
            float _2369 = (cbSceneParam._m0[33u].x - sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981))) * cbSceneParam._m0[33u].y;
            float _4418 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
            float _2376 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2183, cbSceneParam._m0[33u].w + _2184), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2183, _2184 - cbSceneParam._m0[33u].z), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2183 - cbSceneParam._m0[33u].z, _2184 - cbSceneParam._m0[33u].w), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2183 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2184), _2326), 0.0)).x), vec4(0.25)));
            float _2380 = 1.0 - (_2376 * cbSceneParam._m0[34u].x);
            float _2381 = 1.0 - (_2376 * cbSceneParam._m0[34u].y);
            float _2382 = 1.0 - (_2376 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2382) ? _2130 : (isnan(_2130) ? _2382 : min(_2130, _2382));
            frontier_phi_34_33_ladder_1 = isnan(_2381) ? _2129 : (isnan(_2129) ? _2381 : min(_2129, _2381));
            frontier_phi_34_33_ladder_2 = isnan(_2380) ? _2128 : (isnan(_2128) ? _2380 : min(_2128, _2380));
        }
        else
        {
            frontier_phi_34_33_ladder = _2130;
            frontier_phi_34_33_ladder_1 = _2129;
            frontier_phi_34_33_ladder_2 = _2128;
        }
        _2194 = frontier_phi_34_33_ladder_2;
        _2196 = frontier_phi_34_33_ladder_1;
        _2198 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2194 = _2128;
        _2196 = _2129;
        _2198 = _2130;
    }
    uvec4 _2203 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2205 = _2203.x * 14u;
    uint _2206 = _2205 + 13u;
    float _2213 = _910 + (-1.0);
    float _2218 = (cbLight._m0[_2206].x * _2213) + 1.0;
    float _2219 = (cbLight._m0[_2206].y * _2213) + 1.0;
    float _2220 = (cbLight._m0[_2206].z * _2213) + 1.0;
    float _2221 = (cbLight._m0[_2206].w * _2213) + 1.0;
    uint _2222 = _2205 + 5u;
    float _2228 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2232 = _2205 + 4u;
    float _2241 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
    uint _2245 = _2205 | 1u;
    float _2256 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_760, _761, _762));
    float _2259 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_760, _761, _762));
    float _4454 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _4465 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2264 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * 0.3183098733425140380859375;
    float _2266 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * 0.3183098733425140380859375;
    float _2273 = ((cbLight._m0[_2222].x * _2228) * _2266) + (((cbLight._m0[_2232].x * _2194) * _2241) * _2264);
    float _2274 = ((_2228 * cbLight._m0[_2222].y) * _2266) + (((cbLight._m0[_2232].y * _2196) * _2241) * _2264);
    float _2275 = ((_2228 * cbLight._m0[_2222].z) * _2266) + (((cbLight._m0[_2232].z * _2198) * _2241) * _2264);
    uvec4 _2279 = floatBitsToUint(cbLight._m0[_2205 + 12u]);
    bool _2281 = _2279.x == 0u;
    float _2383;
    float _2385;
    float _2387;
    if (_2281)
    {
        _2383 = _2273;
        _2385 = _2274;
        _2387 = _2275;
    }
    else
    {
        uint _2391 = _2205 + 6u;
        float _2407 = (dot(vec3(cbLight._m0[_2205 + 2u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4476 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _2410 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2383 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2273;
        _2385 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2274;
        _2387 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2275;
    }
    bool _2390 = _2279.y == 0u;
    float _2445;
    float _2447;
    float _2449;
    if (_2390)
    {
        _2445 = _2383;
        _2447 = _2385;
        _2449 = _2387;
    }
    else
    {
        uint _2607 = _2205 + 7u;
        float _2623 = (dot(vec3(cbLight._m0[_2205 + 3u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2624 = _2623 * _2623;
        float _4492 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2625 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2626 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2445 = (((cbLight._m0[_2607].x * 0.3183098733425140380859375) * _2625) * _2626) + _2383;
        _2447 = (((cbLight._m0[_2607].y * 0.3183098733425140380859375) * _2625) * _2626) + _2385;
        _2449 = (((cbLight._m0[_2607].z * 0.3183098733425140380859375) * _2625) * _2626) + _2387;
    }
    uint _2452 = _2205 + 8u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _763) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2205].x + _839;
    float _2468 = cbLight._m0[_2205].y + _840;
    float _2469 = cbLight._m0[_2205].z + _841;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2205].xyz));
    float _4508 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _4519 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _2481 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2482 = dot(vec3(_760, _761, _762), vec3(_2474, _2475, _2476));
    float _4530 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2486 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2474, _2475, _2476));
    float _4541 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2490 = _2466 * _2466;
    float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
    float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2506 = 1.0 - _2466;
    float _2517 = (0.5 / (((_2481 * ((_2480 * _2506) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2506) + _2466) * _2480))) * _2480;
    float _4552 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
    uint _2533 = _2205 + 9u;
    float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _763) * 0.949999988079071044921875);
    float _2545 = _2544 * _2544;
    float _2546 = cbLight._m0[_2245].x + _839;
    float _2547 = cbLight._m0[_2245].y + _840;
    float _2548 = cbLight._m0[_2245].z + _841;
    float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
    float _2553 = _2552 * _2546;
    float _2554 = _2552 * _2547;
    float _2555 = _2552 * _2548;
    float _2556 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2245].xyz));
    float _4563 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2560 = dot(vec3(_760, _761, _762), vec3(_2553, _2554, _2555));
    float _4574 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2564 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2553, _2554, _2555));
    float _4585 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2568 = _2545 * _2545;
    float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
    float _2581 = (exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2582 = 1.0 - _2545;
    float _2592 = (0.5 / (((_2481 * ((_2559 * _2582) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2582) + _2545) * _2559))) * _2559;
    float _4596 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2594 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
    float _2604 = (((_2581 * cbLight._m0[_2533].x) * _2594) * _2228) + ((((cbLight._m0[_2452].x * _2194) * _2505) * _2519) * _2241);
    float _2605 = (((_2581 * cbLight._m0[_2533].y) * _2594) * _2228) + ((((cbLight._m0[_2452].y * _2196) * _2505) * _2519) * _2241);
    float _2606 = (((_2581 * cbLight._m0[_2533].z) * _2594) * _2228) + ((((cbLight._m0[_2452].z * _2198) * _2505) * _2519) * _2241);
    float _2662;
    float _2664;
    float _2666;
    if (_2281)
    {
        _2662 = _2604;
        _2664 = _2605;
        _2666 = _2606;
    }
    else
    {
        uint _2668 = _2205 + 2u;
        uint _2672 = _2205 + 10u;
        float _2686 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2668].w)) * _763) * 0.949999988079071044921875);
        float _2687 = _2686 * _2686;
        float _2688 = cbLight._m0[_2668].x + _839;
        float _2689 = cbLight._m0[_2668].y + _840;
        float _2690 = cbLight._m0[_2668].z + _841;
        float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
        float _2695 = _2694 * _2688;
        float _2696 = _2694 * _2689;
        float _2697 = _2694 * _2690;
        float _2698 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2668].xyz));
        float _4607 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2701 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2702 = dot(vec3(_760, _761, _762), vec3(_2695, _2696, _2697));
        float _4618 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2706 = dot(vec3(cbLight._m0[_2668].xyz), vec3(_2695, _2696, _2697));
        float _4629 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2710 = _2687 * _2687;
        float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
        float _2723 = (exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2724 = 1.0 - _2687;
        float _2734 = (0.5 / (((_2481 * ((_2701 * _2724) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2724) + _2687) * _2701))) * _2701;
        float _4640 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2736 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
        float _2737 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2662 = (((_2723 * cbLight._m0[_2672].x) * _2736) * _2737) + _2604;
        _2664 = (((_2723 * cbLight._m0[_2672].y) * _2736) * _2737) + _2605;
        _2666 = (((_2723 * cbLight._m0[_2672].z) * _2736) * _2737) + _2606;
    }
    float _2768;
    float _2770;
    float _2772;
    if (_2390)
    {
        _2768 = _2662;
        _2770 = _2664;
        _2772 = _2666;
    }
    else
    {
        uint _2779 = _2205 + 3u;
        uint _2783 = _2205 + 11u;
        float _2797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2779].w)) * _763) * 0.949999988079071044921875);
        float _2798 = _2797 * _2797;
        float _2799 = cbLight._m0[_2779].x + _839;
        float _2800 = cbLight._m0[_2779].y + _840;
        float _2801 = cbLight._m0[_2779].z + _841;
        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
        float _2806 = _2805 * _2799;
        float _2807 = _2805 * _2800;
        float _2808 = _2805 * _2801;
        float _2809 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2779].xyz));
        float _4656 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2813 = dot(vec3(_760, _761, _762), vec3(_2806, _2807, _2808));
        float _4667 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2817 = dot(vec3(cbLight._m0[_2779].xyz), vec3(_2806, _2807, _2808));
        float _4678 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2821 = _2798 * _2798;
        float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
        float _2834 = (exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2835 = 1.0 - _2798;
        float _2845 = (0.5 / (((_2481 * ((_2812 * _2835) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2835) + _2798) * _2812))) * _2812;
        float _4689 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2847 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
        float _2848 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2768 = (((_2834 * cbLight._m0[_2783].x) * _2847) * _2848) + _2662;
        _2770 = (((_2834 * cbLight._m0[_2783].y) * _2847) * _2848) + _2664;
        _2772 = (((_2834 * cbLight._m0[_2783].z) * _2847) * _2848) + _2666;
    }
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_2203.y == 0u)
    {
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.x;
        uint _2881 = uint((float(_2869.y) * floor(float(uint(cbSceneParam._m0[85u].y * _848) / _2870))) + floor(float(uint(cbSceneParam._m0[85u].x * _847) / _2870)));
        float _2891 = (log2(_1981 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2892 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        uint _2895 = uint(isnan(14.0) ? _2892 : (isnan(_2892) ? 14.0 : min(_2892, 14.0)));
        uvec4 _2900 = texelFetch(g_lightClusterGridBuffer, int(((_2895 << 2u) + (_2881 << 6u)) >> 2u));
        uint _2901 = _2900.x;
        uint _2902 = _2869.z;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((((1u << ((_2902 >> 4u) & 15u)) + 4294967295u) & _2901) == 0u) || ((_2902 & 240u) == 0u))
        {
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
        }
        else
        {
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            uint _3132 = 0u;
            uint _3141;
            bool _3142;
            for (;;)
            {
                _3141 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3132 << 2u)) >> 2u)).x;
                _3142 = _3141 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3142)
                {
                    frontier_phi_66_pred = _3131;
                    frontier_phi_66_pred_1 = _3130;
                    frontier_phi_66_pred_2 = _3129;
                    frontier_phi_66_pred_3 = _3128;
                    frontier_phi_66_pred_4 = _3127;
                    frontier_phi_66_pred_5 = _3126;
                }
                else
                {
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    uint _3256;
                    _3250 = _3126;
                    _3251 = _3127;
                    _3252 = _3128;
                    _3253 = _3129;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3141;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    for (;;)
                    {
                        uint _3260 = uint(findLSB(_3256)) + (_3132 << 5u);
                        uint _3257 = (_3256 + 4294967295u) & _3256;
                        uint _3262 = _3260 * 48u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 3u)).x));
                        uint _3282 = (_3260 * 48u) + 4u;
                        vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 3u)).x));
                        uint _3301 = (_3260 * 48u) + 8u;
                        vec3 _3312 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x));
                        float _3316 = _3276.x - _1979;
                        float _3317 = _3276.y - _1980;
                        float _3318 = _3276.z - _1981;
                        float _3319 = dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318));
                        float _3322 = inversesqrt(_3319);
                        float _3323 = _3322 * _3316;
                        float _3324 = _3322 * _3317;
                        float _3325 = _3322 * _3318;
                        float _3326 = dot(vec3(_866, _869, _872), vec3(_3323, _3324, _3325));
                        float _3331 = 1.0 - (_3319 * _3276.w);
                        float _4715 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3332 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3333 = sqrt(_3319) * _3295.w;
                        float _3336 = 1.39999997615814208984375 / (_3333 + 1.39999997615814208984375);
                        float _3337 = _3336 * _3336;
                        float _3340 = ((1.0 - _3337) * _3326) + _3337;
                        float _3343 = _3333 * _3333;
                        float _3347 = ((isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))) * _3332) / ((_3343 * 0.699999988079071044921875) + 1.0);
                        float _3351 = (-0.0) - _1979;
                        float _3352 = (-0.0) - _1980;
                        float _3353 = (-0.0) - _1981;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3358 = _3357 * _3351;
                        float _3359 = _3357 * _3352;
                        float _3360 = _3357 * _3353;
                        float _3367 = exp2(log2(1.0 / ((_3343 * 3.5) + 5.0)) * 0.25);
                        float _3368 = 1.0 - _926;
                        float _3375 = sqrt(1.0 - ((1.0 - (_3368 * _3368)) * (1.0 - (_3367 * _3367))));
                        float _3376 = _3375 * _3375;
                        float _3377 = _3376 * _3376;
                        float _3378 = _3358 + _3323;
                        float _3379 = _3359 + _3324;
                        float _3380 = _3360 + _3325;
                        float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                        float _3388 = dot(vec3(_866, _869, _872), vec3(_3358, _3359, _3360));
                        float _4731 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3391 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3392 = dot(vec3(_866, _869, _872), vec3(_3384 * _3378, _3384 * _3379, _3384 * _3380));
                        float _4742 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3395 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3399 = ((_3395 * _3395) * (_3377 + (-1.0))) + 1.0;
                        float _3400 = _3336 * _3376;
                        float _3401 = _3400 * _3400;
                        float _3404 = ((1.0 - _3401) * _3326) + _3401;
                        float _4753 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3405 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3406 = 1.0 - _3376;
                        float _3416 = (0.5 / (((_3405 * ((_3391 * _3406) + _3376)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3376) * _3391))) * _3405;
                        float _4764 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3427 = (((_3377 * 3.1415927410125732421875) * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) / ((_3399 * _3399) * ((_3343 * 2.1991131305694580078125) + 3.141590118408203125))) * _3332;
                        _3185 = (_3347 * _3295.x) + _3253;
                        _3186 = (_3347 * _3295.y) + _3254;
                        _3187 = (_3347 * _3295.z) + _3255;
                        _3182 = (_3427 * _3312.x) + _3250;
                        _3183 = (_3427 * _3312.y) + _3251;
                        _3184 = (_3427 * _3312.z) + _3252;
                        if (_3257 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3250 = _3182;
                            _3251 = _3183;
                            _3252 = _3184;
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3257;
                        }
                    }
                    frontier_phi_66_pred = _3187;
                    frontier_phi_66_pred_1 = _3186;
                    frontier_phi_66_pred_2 = _3185;
                    frontier_phi_66_pred_3 = _3184;
                    frontier_phi_66_pred_4 = _3183;
                    frontier_phi_66_pred_5 = _3182;
                }
                _2992 = frontier_phi_66_pred;
                _2990 = frontier_phi_66_pred_1;
                _2988 = frontier_phi_66_pred_2;
                _2986 = frontier_phi_66_pred_3;
                _2984 = frontier_phi_66_pred_4;
                _2982 = frontier_phi_66_pred_5;
                uint _3133 = _3132 + 1u;
                if (_3133 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3126 = _2982;
                    _3127 = _2984;
                    _3128 = _2986;
                    _3129 = _2988;
                    _3130 = _2990;
                    _3131 = _2992;
                    _3132 = _3133;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
        }
        uvec4 _2995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2996 = _2995.z;
        uint _2998 = (_2996 >> 8u) & 15u;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        if (((4294967295u << _2998) & _2901) == 0u)
        {
            _3094 = _2981;
            _3096 = _2983;
            _3098 = _2985;
            _3100 = _2987;
            _3102 = _2989;
            _3104 = _2991;
        }
        else
        {
            float _3119 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
            float _3120 = _3119 * _1979;
            float _3121 = _3119 * _1980;
            float _3122 = _3119 * _1981;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2998 < ((_2996 >> 12u) & 15u))
            {
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3103;
                float _3105;
                float _3233 = _2981;
                float _3234 = _2983;
                float _3235 = _2985;
                float _3236 = _2987;
                float _3237 = _2989;
                float _3238 = _2991;
                uint _3239 = _2998;
                uint _3248;
                bool _3249;
                for (;;)
                {
                    _3248 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3239 << 2u)) >> 2u)).x;
                    _3249 = _3248 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3249)
                    {
                        frontier_phi_72_pred = _3238;
                        frontier_phi_72_pred_1 = _3237;
                        frontier_phi_72_pred_2 = _3236;
                        frontier_phi_72_pred_3 = _3235;
                        frontier_phi_72_pred_4 = _3234;
                        frontier_phi_72_pred_5 = _3233;
                    }
                    else
                    {
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3445 = _3233;
                        float _3446 = _3234;
                        float _3447 = _3235;
                        float _3448 = _3236;
                        float _3449 = _3237;
                        float _3450 = _3238;
                        uint _3451 = _3248;
                        uint _3452;
                        vec4 _3477;
                        float _3478;
                        vec4 _3493;
                        vec3 _3505;
                        vec4 _3520;
                        vec4 _3535;
                        float _3581;
                        bool _3582;
                        for (;;)
                        {
                            uint _3462 = ((_3239 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3451));
                            _3452 = (_3451 + 4294967295u) & _3451;
                            uint _3464 = _3462 * 40u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3478 = _3477.w;
                            uint _3480 = (_3462 * 40u) + 4u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3495 = (_3462 * 40u) + 8u;
                            _3505 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x));
                            uint _3507 = (_3462 * 40u) + 16u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3462 * 40u) + 20u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3462 * 40u) + 24u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3556 = (_3462 * 40u) + 28u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            _3581 = fma(_1981, _3569.z, fma(_1980, _3569.y, _3569.x * _1979)) + _3569.w;
                            _3582 = !((fma(_1981, _3550.z, fma(_1980, _3550.y, _3550.x * _1979)) + _3550.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3582)
                            {
                                float _3609 = _3477.x - _1979;
                                float _3610 = _3477.y - _1980;
                                float _3611 = _3477.z - _1981;
                                float _3612 = dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611));
                                float _3615 = inversesqrt(_3612);
                                float _3616 = _3615 * _3609;
                                float _3617 = _3615 * _3610;
                                float _3618 = _3615 * _3611;
                                float _3622 = 1.0 - (_3612 / (_3478 * _3478));
                                float _4775 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3627 = sqrt(_3612) * _3493.w;
                                float _3629 = 1.39999997615814208984375 / (_3627 + 1.39999997615814208984375);
                                float _3630 = _3629 * _3629;
                                float _3633 = ((1.0 - _3630) * dot(vec3(_3616, _3617, _3618), vec3(_866, _869, _872))) + _3630;
                                float _3636 = _3627 * _3627;
                                float _3640 = (fma(_1981, _3520.z, fma(_1980, _3520.y, _3520.x * _1979)) + _3520.w) / _3581;
                                float _3641 = (fma(_1981, _3535.z, fma(_1980, _3535.y, _3535.x * _1979)) + _3535.w) / _3581;
                                float _3645 = 1.0 - dot(vec2(_3640, _3641), vec2(_3640, _3641));
                                float _4791 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3647 = _3646 * (((isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0))) * _3623) / ((_3636 * 0.699999988079071044921875) + 1.0));
                                float _3659 = exp2(log2(1.0 / ((_3636 * 3.5) + 5.0)) * 0.25);
                                float _3660 = 1.0 - _926;
                                float _3667 = sqrt(1.0 - ((1.0 - (_3660 * _3660)) * (1.0 - (_3659 * _3659))));
                                float _3668 = _3667 * _3667;
                                float _3669 = _3668 * _3668;
                                float _3670 = _3616 - _3120;
                                float _3671 = _3617 - _3121;
                                float _3672 = _3618 - _3122;
                                float _3676 = inversesqrt(dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672)));
                                float _3680 = dot(vec3(_866, _869, _872), vec3((-0.0) - _3120, (-0.0) - _3121, (-0.0) - _3122));
                                float _4802 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3684 = dot(vec3(_866, _869, _872), vec3(_3676 * _3670, _3676 * _3671, _3676 * _3672));
                                float _4813 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3691 = ((_3687 * _3687) * (_3669 + (-1.0))) + 1.0;
                                float _3692 = _3629 * _3668;
                                float _3693 = _3692 * _3692;
                                float _3699 = ((1.0 - _3693) * dot(vec3(_866, _869, _872), vec3(_3616, _3617, _3618))) + _3693;
                                float _4824 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3701 = 1.0 - _3668;
                                float _3711 = (0.5 / (((_3700 * ((_3683 * _3701) + _3668)) + 9.9999999392252902907785028219223e-09) + (((_3700 * _3701) + _3668) * _3683))) * _3700;
                                float _4835 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3721 = (_3646 * _3623) * (((_3669 * 3.1415927410125732421875) * (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) / ((_3691 * _3691) * ((_3636 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3647 * _3493.y;
                                frontier_phi_78_pred_1 = _3647 * _3493.x;
                                frontier_phi_78_pred_2 = _3721 * _3505.z;
                                frontier_phi_78_pred_3 = _3721 * _3505.y;
                                frontier_phi_78_pred_4 = _3721 * _3505.x;
                                frontier_phi_78_pred_5 = _3647 * _3493.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3729 = frontier_phi_78_pred;
                            _3728 = frontier_phi_78_pred_1;
                            _3727 = frontier_phi_78_pred_2;
                            _3726 = frontier_phi_78_pred_3;
                            _3725 = frontier_phi_78_pred_4;
                            _3730 = frontier_phi_78_pred_5;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            if (_3452 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3452;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3437;
                        frontier_phi_72_pred_1 = _3436;
                        frontier_phi_72_pred_2 = _3435;
                        frontier_phi_72_pred_3 = _3434;
                        frontier_phi_72_pred_4 = _3433;
                        frontier_phi_72_pred_5 = _3432;
                    }
                    _3105 = frontier_phi_72_pred;
                    _3103 = frontier_phi_72_pred_1;
                    _3101 = frontier_phi_72_pred_2;
                    _3099 = frontier_phi_72_pred_3;
                    _3097 = frontier_phi_72_pred_4;
                    _3095 = frontier_phi_72_pred_5;
                    uint _3240 = _3239 + 1u;
                    if (_3240 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3233 = _3095;
                        _3234 = _3097;
                        _3235 = _3099;
                        _3236 = _3101;
                        _3237 = _3103;
                        _3238 = _3105;
                        _3239 = _3240;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3105;
                frontier_phi_60_61_ladder_1 = _3103;
                frontier_phi_60_61_ladder_2 = _3099;
                frontier_phi_60_61_ladder_3 = _3097;
                frontier_phi_60_61_ladder_4 = _3095;
                frontier_phi_60_61_ladder_5 = _3101;
            }
            else
            {
                frontier_phi_60_61_ladder = _2991;
                frontier_phi_60_61_ladder_1 = _2989;
                frontier_phi_60_61_ladder_2 = _2985;
                frontier_phi_60_61_ladder_3 = _2983;
                frontier_phi_60_61_ladder_4 = _2981;
                frontier_phi_60_61_ladder_5 = _2987;
            }
            _3094 = frontier_phi_60_61_ladder_4;
            _3096 = frontier_phi_60_61_ladder_3;
            _3098 = frontier_phi_60_61_ladder_2;
            _3100 = frontier_phi_60_61_ladder_5;
            _3102 = frontier_phi_60_61_ladder_1;
            _3104 = frontier_phi_60_61_ladder;
        }
        float _3109 = isnan(1.0) ? _910 : (isnan(_910) ? 1.0 : min(_910, 1.0));
        _2914 = (_3109 * _3100) + _2445;
        _2916 = (_3109 * _3102) + _2447;
        _2918 = (_3109 * _3104) + _2449;
        _2920 = ((_3094 * 0.039999999105930328369140625) * _3109) + _2768;
        _2922 = ((_3096 * 0.039999999105930328369140625) * _3109) + _2770;
        _2924 = ((_3098 * 0.039999999105930328369140625) * _3109) + _2772;
    }
    else
    {
        _2914 = _2445;
        _2916 = _2447;
        _2918 = _2449;
        _2920 = _2768;
        _2922 = _2770;
        _2924 = _2772;
    }
    float _4851 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4862 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4873 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    uint _2944 = _268 + 6u;
    float _2952 = _847 / cbSceneParam._m0[86u].x;
    float _2953 = _848 / cbSceneParam._m0[86u].y;
    vec4 _2967 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, (log2((isnan(cbSceneParam._m0[77u].w) ? _781 : (isnan(_781) ? cbSceneParam._m0[77u].w : min(_781, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2969 = _2967.x;
    float _2970 = _2967.y;
    float _2971 = _2967.z;
    float _2972 = _2967.w;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    if (_781 > cbSceneParam._m0[78u].w)
    {
        float _3006 = isnan(_781) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _781 : min(cbSceneParam._m0[80u].w, _781));
        float _3007 = _3006 / _781;
        float _3018 = _3007 * _832;
        float _3019 = _833 * _3007;
        float _3020 = (-0.0) - _3019;
        float _3022 = _3007 * _834;
        float _3024 = (cbSceneParam._m0[77u].w * _3020) / _3006;
        float _3025 = _3024 + cbSceneParam._m0[79u].w;
        float _3026 = cbSceneParam._m0[79u].w - _3019;
        float _3032 = sqrt(((_3018 * _3018) + (_3019 * _3019)) + (_3022 * _3022));
        float _3035 = (1.0 - (cbSceneParam._m0[77u].w / _3006)) * _3032;
        float _3040 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3042 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3195;
        if (abs((_3020 - _3024) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3195 = ((((_3025 > 0.0) ? exp2(_3040 * _3025) : (2.0 - exp2(_3042 * _3025))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3035;
        }
        else
        {
            float _3155 = 1.0 / cbSceneParam._m0[80u].x;
            float _3156 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : max(_3025, _3026));
            float _3157 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : min(_3025, _3026));
            float _3166 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : min(_3156, 0.0));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            _3195 = ((abs(_3032 / _3020) * cbSceneParam._m0[80u].y) * ((((_3166 - _3167) * 2.0) - ((exp2(_3040 * (isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0)))) - exp2(_3040 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0))))) * _3155)) - ((exp2(_3042 * _3166) - exp2(_3042 * _3167)) * _3155))) + (_3035 * cbSceneParam._m0[80u].z);
        }
        vec4 _3197 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, 1.0), 0.0);
        float _3206 = exp2((_3195 * (-1.44269502162933349609375)) * (1.0 - _3197.w));
        float _3207 = log2(_3206);
        float _3223 = log2(_2972);
        _3044 = (exp2(_3223 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].x)) * _3197.x) / cbSceneParam._m0[78u].x)) + _2969;
        _3046 = (exp2(_3223 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].y)) * _3197.y) / cbSceneParam._m0[78u].y)) + _2970;
        _3048 = (exp2(_3223 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].z)) * _3197.z) / cbSceneParam._m0[78u].z)) + _2971;
        _3050 = _3206 * _2972;
    }
    else
    {
        _3044 = _2969;
        _3046 = _2970;
        _3048 = _2971;
        _3050 = _2972;
    }
    float _3062 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3063 = _3062 == 3.0;
    float _3064 = log2(_3050);
    float _3071 = exp2(_3064 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2914 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _910))) + ((_2920 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1715)) * cbPerFrame._m0[3u].x));
    float _3072 = exp2(_3064 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2916 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _910))) + ((_2922 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1715)) * cbPerFrame._m0[3u].x));
    float _3073 = exp2(_3064 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2918 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _910))) + ((_2924 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1715)) * cbPerFrame._m0[3u].x));
    float _3082 = (_3062 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3082 * (_3063 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3044)));
    SV_Target.y = _3082 * (_3063 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3046)));
    SV_Target.z = _3082 * (_3063 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3048)));
    SV_Target.w = cbInstanceData._m0[_2944].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2944].w;
}


