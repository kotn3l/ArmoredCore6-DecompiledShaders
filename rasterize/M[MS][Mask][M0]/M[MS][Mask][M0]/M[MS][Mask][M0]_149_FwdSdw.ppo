#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1635;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4219 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4230 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4241 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _472 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _489 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_460 - _472) * cbMtdParam._m0[24u].z) + _472) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4252 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _497 = (_490 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _498 = (_490 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _499 = (_490 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _562 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[24u].z) + _548) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4263 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _570 = (_563 * ((_516.x * cbMtdParam._m0[13u].x) - _497)) + _497;
    float _571 = (_563 * ((_516.y * cbMtdParam._m0[13u].y) - _498)) + _498;
    float _572 = (_563 * ((_516.z * cbMtdParam._m0[13u].z) - _499)) + _499;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _609 = _607.x;
    float _619 = dot(vec4(_609, _607.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _631 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _420.z) * 2.0) - ((((_609 - _619) * cbMtdParam._m0[24u].z) + _619) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4274 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _642 = (_349.x * cbMtdParam._m0[9u].x) * ((_632 * ((_590.x * cbMtdParam._m0[14u].x) - _570)) + _570);
    float _643 = (_349.y * cbMtdParam._m0[9u].y) * ((_632 * ((_590.y * cbMtdParam._m0[14u].y) - _571)) + _571);
    float _644 = (_349.z * cbMtdParam._m0[9u].z) * ((_632 * ((_590.z * cbMtdParam._m0[14u].z) - _572)) + _572);
    float _648 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _642;
    float _651 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _643;
    float _654 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _644;
    float _662 = (((_642 - _648) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) + _648) * 4.55000019073486328125;
    float _664 = (((_643 - _651) * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) + _651) * 4.55000019073486328125;
    float _666 = (((_644 - _654) * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) + _654) * 4.55000019073486328125;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _747 = _745.x;
    float _748 = _745.y;
    float _749 = _745.z;
    float _756 = ((_728.x - _747) * _490) + _747;
    float _757 = ((_728.y - _748) * _490) + _748;
    float _758 = ((_728.z - _749) * _490) + _749;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _781 = ((_770.x - _756) * _563) + _756;
    float _782 = ((_770.y - _757) * _563) + _757;
    float _783 = ((_770.z - _758) * _563) + _758;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _808 = ((_795.z - _783) * _632) + _783;
    float _811 = ((((_795.x - _781) * _632) + _781) * 2.0) + (-1.0);
    float _812 = ((((_795.y - _782) * _632) + _782) * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _4285 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _818 = sqrt(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))));
    vec4 _836 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _848 = (_811 + ((((_703.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_836.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _849 = (_812 + ((((_703.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_836.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _852 = fma(_818, _262, fma(_849, _269, _848 * _255));
    float _855 = fma(_818, _263, fma(_849, _270, _848 * _256));
    float _858 = fma(_818, _264, fma(_849, _271, _848 * _257));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    vec4 _889 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _891 = _889.x;
    float _892 = 1.0 - _891;
    float _898 = (cbMtdParam._m0[19u].x + dot(vec4(_862 * _852, _862 * _855, _862 * _858, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_891 - _892) * cbMtdParam._m0[24u].w) + _892) * cbMtdParam._m0[21u].z);
    float _4296 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _899 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _901 = (-0.0) - cbMtdParam._m0[24u].x;
    float _903 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0));
    float _911 = _899 - ((_899 * TEXCOORD_8.x) * _904);
    float _912 = _899 - ((_899 * TEXCOORD_8.y) * _904);
    float _913 = _899 - ((_899 * TEXCOORD_8.z) * _904);
    float _920 = (_911 * ((_684.x * cbMtdParam._m0[18u].x) - _662)) + _662;
    float _921 = (_912 * ((_684.y * cbMtdParam._m0[18u].y) - _664)) + _664;
    float _922 = (_913 * ((_684.z * cbMtdParam._m0[18u].z) - _666)) + _666;
    float _937 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _938 = _937 * TEXCOORD.z;
    float _939 = _937 * TEXCOORD.w;
    vec4 _951 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _938) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _939) + cbTextureTilingScale._m0[19u].w));
    float _953 = _951.x;
    float _954 = 1.0 - _953;
    float _982 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_953 - _954) * cbMtdParam._m0[24u].y) + _954) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4317 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _983 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _991 = ((((cbMtdParam._m0[10u].x - _920) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _983) + _920;
    float _992 = ((((cbMtdParam._m0[10u].y - _921) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _983) + _921;
    float _993 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _922)) * _983) + _922;
    float _998 = (((_703.z - _808) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _808;
    float _1002 = ((_836.z - _998) * cbMtdParam._m0[19u].w) + _998;
    vec4 _1018 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _1025 = (_1018.x * 2.0) + (-1.0);
    float _1026 = (_1018.y * 2.0) + (-1.0);
    float _1027 = dot(vec2(_1025, _1026), vec2(_1025, _1026));
    float _4328 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1035 = ((_1018.z - _1002) * _911) + _1002;
    float _1038 = ((cbMtdParam._m0[23u].y - _1035) * _983) + _1035;
    vec4 _1059 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _938) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _939) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1065 = (_1059.x * 2.0) + (-1.0);
    float _1066 = (_1059.y * 2.0) + (-1.0);
    float _1067 = dot(vec2(_1065, _1066), vec2(_1065, _1066));
    float _4339 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1082 = ((sqrt(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) - _818) * _913) + _818;
    float _1085 = (((_1025 - _848) * _911) + _848) + (cbMtdParam._m0[21u].x * _848);
    float _1086 = (((_1026 - _849) * _912) + _849) + (cbMtdParam._m0[21u].x * _849);
    float _1097 = (((_1065 - _1085) + (_1085 * cbMtdParam._m0[22u].z)) * _983) + _1085;
    float _1098 = (((_1066 - _1086) + (_1086 * cbMtdParam._m0[22u].z)) * _983) + _1086;
    float _1099 = (_983 * (sqrt(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) - _1082)) + _1082;
    float _1101 = cbMtdParam._m0[22u].x + _836.w;
    float _1104 = fma(_1099, _262, fma(_1098, _269, _1097 * _255));
    float _1107 = fma(_1099, _263, fma(_1098, _270, _1097 * _256));
    float _1110 = fma(_1099, _264, fma(_1098, _271, _1097 * _257));
    float _1114 = inversesqrt(dot(vec3(_1104, _1107, _1110), vec3(_1104, _1107, _1110)));
    float _1115 = _1114 * _1104;
    float _1116 = _1114 * _1107;
    float _1117 = _1114 * _1110;
    float _4350 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1118 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _4361 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _4372 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4383 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _4394 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1136 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1186 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1176);
    float _1187 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1176);
    float _1188 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1176);
    float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
    float _1193 = _1186 * _1192;
    float _1194 = _1187 * _1192;
    float _1195 = _1188 * _1192;
    float _1201 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1202 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1220 = fma(_1117, cbSceneParam._m0[5u].z, fma(_1116, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1115));
    float _1223 = fma(_1117, cbSceneParam._m0[6u].z, fma(_1116, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1115));
    float _1226 = fma(_1117, cbSceneParam._m0[7u].z, fma(_1116, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1115));
    uint _1240 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1246 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * cbInstanceData._m0[_1240].x;
    float _1247 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * cbInstanceData._m0[_1240].y;
    float _1248 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) * cbInstanceData._m0[_1240].z;
    float _4405 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
    float _1249 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _4416 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _1250 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _4427 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
    float _1251 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    vec4 _1260 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1201, cbSceneParam._m0[86u].y * _1202));
    float _1264 = ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * TEXCOORD_5.w) * _1260.x;
    float _1265 = dot(vec3(_1115, _1116, _1117), vec3(_1193, _1194, _1195));
    float _1268 = _1265 * 2.0;
    float _1272 = (_1268 * _1115) - _1193;
    float _1273 = (_1268 * _1116) - _1194;
    float _1274 = (_1268 * _1117) - _1195;
    float _1278 = abs(dot(vec3(_1193, _1194, _1195), vec3(_1115, _1116, _1117)));
    float _4438 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
    float _1280 = sqrt(_1118);
    float _1293 = exp2((_1280 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1280 * 3.0));
    float _1325 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1329 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1333 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1634;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1359 = fma(_1333, cbModelParam._m0[26u].z, fma(_1329, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1325));
        float _1363 = fma(_1333, cbModelParam._m0[27u].z, fma(_1329, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1325));
        float _1367 = fma(_1333, cbModelParam._m0[28u].z, fma(_1329, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1325));
        float _1392 = _1325 + _1115;
        float _1393 = _1329 + _1116;
        float _1394 = _1333 + _1117;
        float _1404 = fma(_1394, cbModelParam._m0[26u].z, fma(_1393, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1392)) - _1359;
        float _1405 = fma(_1394, cbModelParam._m0[27u].z, fma(_1393, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1392)) - _1363;
        float _1406 = fma(_1394, cbModelParam._m0[28u].z, fma(_1393, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1392)) - _1367;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1359 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1363 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[34u].z) + ((((((_1367 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1462 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1428.x + (-0.5));
        float _1464 = _1462 * (_1428.y + (-0.5));
        float _1465 = _1462 * (_1428.z + (-0.5));
        float _1472 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1435.x + (-0.5));
        float _1474 = _1472 * (_1435.y + (-0.5));
        float _1475 = _1472 * (_1435.z + (-0.5));
        float _1482 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1442.x + (-0.5));
        float _1484 = _1482 * (_1442.y + (-0.5));
        float _1485 = _1482 * (_1442.z + (-0.5));
        float _1492 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1449.x + (-0.5));
        float _1494 = _1492 * (_1449.y + (-0.5));
        float _1495 = _1492 * (_1449.z + (-0.5));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = _1463 * 0.5;
        float _1500 = _1473 * 0.5;
        float _1501 = _1483 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1516 = (dot(vec3(_1115, _1116, _1117), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1526 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4486 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1528 + 1.0))) + _1533) * _1496;
        float _1543 = _1464 * 0.5;
        float _1544 = _1474 * 0.5;
        float _1545 = _1484 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_1115, _1116, _1117), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4497 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4508 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4519 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_1570 + 1.0))) + _1575) * _1497;
        float _1585 = _1465 * 0.5;
        float _1586 = _1475 * 0.5;
        float _1587 = _1485 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_1115, _1116, _1117), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4530 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4541 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4552 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_1612 + 1.0))) + _1617) * _1498;
        _1634 = _1465;
        _1636 = _1464;
        _1637 = _1463;
        _1638 = _1475;
        _1639 = _1474;
        _1640 = _1473;
        _1641 = _1485;
        _1642 = _1484;
        _1643 = _1483;
        _1644 = _1498;
        _1645 = _1497;
        _1646 = _1496;
        _1647 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1648 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1649 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
    }
    else
    {
        _1634 = _1635;
        _1636 = _1635;
        _1637 = _1635;
        _1638 = _1635;
        _1639 = _1635;
        _1640 = _1635;
        _1641 = _1635;
        _1642 = _1635;
        _1643 = _1635;
        _1644 = _1635;
        _1645 = _1635;
        _1646 = _1635;
        _1647 = 0.0;
        _1648 = 0.0;
        _1649 = 0.0;
    }
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1672 = fma(_1333, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1325));
        float _1676 = fma(_1333, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1325));
        float _1680 = fma(_1333, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1325));
        float _1703 = _1325 + _1115;
        float _1704 = _1329 + _1116;
        float _1705 = _1333 + _1117;
        float _1715 = fma(_1705, cbModelParam._m0[30u].z, fma(_1704, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1703)) - _1672;
        float _1716 = fma(_1705, cbModelParam._m0[31u].z, fma(_1704, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1703)) - _1676;
        float _1717 = fma(_1705, cbModelParam._m0[32u].z, fma(_1704, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1703)) - _1680;
        float _1721 = inversesqrt(dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717)));
        float _1734 = ((_1721 * _1715) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1672 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1735 = ((_1721 * _1716) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1676 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1736 = ((_1721 * _1717) / cbModelParam._m0[35u].z) + ((((((_1680 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1738 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1734, _1735, _1736), 0.0);
        vec4 _1745 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1734, _1735, _1736), 0.0);
        vec4 _1752 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1734, _1735, _1736), 0.0);
        vec4 _1759 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1734, _1735, _1736), 0.0);
        float _1771 = exp2((_1738.w + (-0.5)) * 20.0) * 2.0;
        float _1772 = _1771 * (_1738.x + (-0.5));
        float _1773 = _1771 * (_1738.y + (-0.5));
        float _1774 = _1771 * (_1738.z + (-0.5));
        float _1781 = exp2((_1745.w + (-0.5)) * 20.0) * 2.0;
        float _1782 = _1781 * (_1745.x + (-0.5));
        float _1783 = _1781 * (_1745.y + (-0.5));
        float _1784 = _1781 * (_1745.z + (-0.5));
        float _1791 = exp2((_1752.w + (-0.5)) * 20.0) * 2.0;
        float _1792 = _1791 * (_1752.x + (-0.5));
        float _1793 = _1791 * (_1752.y + (-0.5));
        float _1794 = _1791 * (_1752.z + (-0.5));
        float _1801 = exp2((_1759.w + (-0.5)) * 20.0) * 2.0;
        float _1802 = _1801 * (_1759.x + (-0.5));
        float _1803 = _1801 * (_1759.y + (-0.5));
        float _1804 = _1801 * (_1759.z + (-0.5));
        float _1805 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1806 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1807 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1808 = _1772 * 0.5;
        float _1809 = _1782 * 0.5;
        float _1810 = _1792 * 0.5;
        float _1811 = dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810));
        float _1816 = (_1811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1811);
        float _1824 = (dot(vec3(_1115, _1116, _1117), vec3(_1816 * _1808, _1816 * _1809, _1816 * _1810)) + 1.0) * 0.5;
        float _4593 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1833 = sqrt(((_1809 * _1809) + (_1808 * _1808)) + (_1810 * _1810)) / (_1805 + 9.9999997473787516355514526367188e-06);
        float _4604 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1835 = _1834 * 2.0;
        float _1839 = (1.0 - _1834) / (_1834 + 1.0);
        float _4615 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1849 = ((((1.0 - _1840) * (_1835 + 2.0)) * exp2(log2(isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_1835 + 1.0))) + _1840) * _1805;
        float _1850 = _1773 * 0.5;
        float _1851 = _1783 * 0.5;
        float _1852 = _1793 * 0.5;
        float _1853 = dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852));
        float _1858 = (_1853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1853);
        float _1866 = (dot(vec3(_1115, _1116, _1117), vec3(_1858 * _1850, _1858 * _1851, _1858 * _1852)) + 1.0) * 0.5;
        float _4626 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1875 = sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852)) / (_1806 + 9.9999997473787516355514526367188e-06);
        float _4637 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _1877 = _1876 * 2.0;
        float _1881 = (1.0 - _1876) / (_1876 + 1.0);
        float _4648 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _1891 = ((((1.0 - _1882) * (_1877 + 2.0)) * exp2(log2(isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_1877 + 1.0))) + _1882) * _1806;
        float _1892 = _1774 * 0.5;
        float _1893 = _1784 * 0.5;
        float _1894 = _1794 * 0.5;
        float _1895 = dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894));
        float _1900 = (_1895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1895);
        float _1908 = (dot(vec3(_1115, _1116, _1117), vec3(_1900 * _1892, _1900 * _1893, _1900 * _1894)) + 1.0) * 0.5;
        float _4659 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1917 = sqrt(((_1893 * _1893) + (_1892 * _1892)) + (_1894 * _1894)) / (_1807 + 9.9999997473787516355514526367188e-06);
        float _4670 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _1919 = _1918 * 2.0;
        float _1923 = (1.0 - _1918) / (_1918 + 1.0);
        float _4681 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _1933 = ((((1.0 - _1924) * (_1919 + 2.0)) * exp2(log2(isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_1919 + 1.0))) + _1924) * _1807;
        _1941 = _1774;
        _1942 = _1773;
        _1943 = _1772;
        _1944 = _1784;
        _1945 = _1783;
        _1946 = _1782;
        _1947 = _1794;
        _1948 = _1793;
        _1949 = _1792;
        _1950 = _1807;
        _1951 = _1806;
        _1952 = _1805;
        _1953 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)));
        _1954 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)));
        _1955 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)));
    }
    else
    {
        _1941 = _1635;
        _1942 = _1635;
        _1943 = _1635;
        _1944 = _1635;
        _1945 = _1635;
        _1946 = _1635;
        _1947 = _1635;
        _1948 = _1635;
        _1949 = _1635;
        _1950 = _1635;
        _1951 = _1635;
        _1952 = _1635;
        _1953 = 0.0;
        _1954 = 0.0;
        _1955 = 0.0;
    }
    float _1965 = (cbModelParam._m0[1u].x * (_1953 - _1647)) + _1647;
    float _1966 = (cbModelParam._m0[1u].x * (_1954 - _1648)) + _1648;
    float _1967 = (cbModelParam._m0[1u].x * (_1955 - _1649)) + _1649;
    float _1988 = fma(_1967, cbSceneParam._m0[89u].z, fma(_1966, cbSceneParam._m0[89u].y, _1965 * cbSceneParam._m0[89u].x));
    float _1991 = fma(_1967, cbSceneParam._m0[90u].z, fma(_1966, cbSceneParam._m0[90u].y, _1965 * cbSceneParam._m0[90u].x));
    float _1994 = fma(_1967, cbSceneParam._m0[91u].z, fma(_1966, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1965));
    float _2009 = _1272 * 0.5;
    float _2010 = _1273 * 0.5;
    float _2011 = _1274 * 0.5;
    float _2012 = dot(vec4(_2009, _2010, _2011, 1.0), vec4(_1943, _1946, _1949, _1952));
    float _2015 = dot(vec4(_2009, _2010, _2011, 1.0), vec4(_1942, _1945, _1948, _1951));
    float _2018 = dot(vec4(_2009, _2010, _2011, 1.0), vec4(_1941, _1944, _1947, _1950));
    float _2052;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2025 = dot(vec4(_2009, _2010, _2011, 1.0), vec4(_1634, _1638, _1641, _1644));
        float _2029 = dot(vec4(_2009, _2010, _2011, 1.0), vec4(_1636, _1639, _1642, _1645));
        float _2033 = dot(vec4(_2009, _2010, _2011, 1.0), vec4(_1637, _1640, _1643, _1646));
        float _2040 = dot(vec4(cbModelParam._m0[39u]), vec4(_2009, _2010, _2011, 1.0));
        _2052 = dot(vec3(isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0)), isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)), isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2040) ? 0.0 : (isnan(0.0) ? _2040 : max(0.0, _2040))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2052 = 1.0;
    }
    float _2063;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2054 = dot(vec4(cbModelParam._m0[40u]), vec4(_2009, _2010, _2011, 1.0));
        _2063 = dot(vec3(isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)), isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0)), isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2054) ? 0.0 : (isnan(0.0) ? _2054 : max(0.0, _2054))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2063 = 1.0;
    }
    float _2067 = (_2063 * cbModelParam._m0[1u].x) + (_2052 * (1.0 - cbModelParam._m0[1u].x));
    float _2077 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1118);
    float _2078 = isnan(_2077) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2077 : min(cbModelParam._m0[25u].z, _2077));
    float _2158;
    float _2160;
    float _2162;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2125 = fma(_1333, cbModelParam._m0[13u].z, fma(_1329, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1325)) + cbModelParam._m0[13u].w;
        float _2129 = fma(_1333, cbModelParam._m0[14u].z, fma(_1329, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1325)) + cbModelParam._m0[14u].w;
        float _2133 = fma(_1333, cbModelParam._m0[15u].z, fma(_1329, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1325)) + cbModelParam._m0[15u].w;
        float _2136 = fma(_1274, cbModelParam._m0[13u].z, fma(_1273, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1272));
        float _2139 = fma(_1274, cbModelParam._m0[14u].z, fma(_1273, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1272));
        float _2142 = fma(_1274, cbModelParam._m0[15u].z, fma(_1273, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1272));
        float _2170;
        if (_2136 > 0.0)
        {
            _2170 = abs((1.0 - _2125) / _2136);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2125 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2170 = frontier_phi_14_12_ladder;
        }
        float _2339;
        if (_2139 > 0.0)
        {
            _2339 = abs((1.0 - _2129) / _2139);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2129 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2339 = frontier_phi_23_19_ladder;
        }
        float _2634;
        if (_2142 > 0.0)
        {
            _2634 = abs((1.0 - _2133) / _2142);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2133 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2634 = frontier_phi_35_30_ladder;
        }
        float _2636 = isnan(_2339) ? _2170 : (isnan(_2170) ? _2339 : min(_2170, _2339));
        float _2637 = isnan(_2634) ? _2636 : (isnan(_2636) ? _2634 : min(_2636, _2634));
        float _2641 = (_2637 * _2136) + _2125;
        float _2642 = (_2637 * _2139) + _2129;
        float _2643 = (_2637 * _2142) + _2133;
        float _2644 = _2637 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2644;
        float _2648 = _2644 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 > _2648) || ((_2642 < _2646) || ((_2641 < _2646) || (_2641 > _2648))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2643, cbModelParam._m0[9u].z, fma(_2642, cbModelParam._m0[9u].y, _2641 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2643, cbModelParam._m0[10u].z, fma(_2642, cbModelParam._m0[10u].y, _2641 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2643, cbModelParam._m0[11u].z, fma(_2642, cbModelParam._m0[11u].y, _2641 * cbModelParam._m0[11u].x))), _2078);
            frontier_phi_13_35_ladder = _2788.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2788.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2788.x * cbModelParam._m0[1u].y;
        }
        _2158 = frontier_phi_13_35_ladder_2;
        _2160 = frontier_phi_13_35_ladder_1;
        _2162 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2146 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1272, _1273, _1274), _2078);
        _2158 = _2146.x * cbModelParam._m0[1u].y;
        _2160 = _2146.y * cbModelParam._m0[1u].y;
        _2162 = _2146.z * cbModelParam._m0[1u].y;
    }
    float _2166 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1118);
    float _2167 = isnan(_2166) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2166 : min(cbModelParam._m0[25u].w, _2166));
    float _2256;
    float _2258;
    float _2260;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2220 = fma(_1333, cbModelParam._m0[21u].z, fma(_1329, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1325)) + cbModelParam._m0[21u].w;
        float _2224 = fma(_1333, cbModelParam._m0[22u].z, fma(_1329, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1325)) + cbModelParam._m0[22u].w;
        float _2228 = fma(_1333, cbModelParam._m0[23u].z, fma(_1329, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1325)) + cbModelParam._m0[23u].w;
        float _2231 = fma(_1274, cbModelParam._m0[21u].z, fma(_1273, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1272));
        float _2234 = fma(_1274, cbModelParam._m0[22u].z, fma(_1273, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1272));
        float _2237 = fma(_1274, cbModelParam._m0[23u].z, fma(_1273, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1272));
        float _2344;
        if (_2231 > 0.0)
        {
            _2344 = abs((1.0 - _2220) / _2231);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2231 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2220 + 1.0) / _2231);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2344 = frontier_phi_25_21_ladder;
        }
        float _2661;
        if (_2234 > 0.0)
        {
            _2661 = abs((1.0 - _2224) / _2234);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2234 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2224 + 1.0) / _2234);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2661 = frontier_phi_37_32_ladder;
        }
        float _2988;
        if (_2237 > 0.0)
        {
            _2988 = abs((1.0 - _2228) / _2237);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2237 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2228 + 1.0) / _2237);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2988 = frontier_phi_47_44_ladder;
        }
        float _2990 = isnan(_2661) ? _2344 : (isnan(_2344) ? _2661 : min(_2344, _2661));
        float _2991 = isnan(_2988) ? _2990 : (isnan(_2990) ? _2988 : min(_2990, _2988));
        float _2995 = (_2991 * _2231) + _2220;
        float _2996 = (_2991 * _2234) + _2224;
        float _2997 = (_2991 * _2237) + _2228;
        float _2998 = _2991 * 9.9999997473787516355514526367188e-05;
        float _2999 = (-1.0) - _2998;
        float _3001 = _2998 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2997 > _3001) || ((_2997 < _2999) || ((_2996 > _3001) || ((_2996 < _2999) || ((_2995 < _2999) || (_2995 > _3001))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2997, cbModelParam._m0[17u].z, fma(_2996, cbModelParam._m0[17u].y, _2995 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2997, cbModelParam._m0[18u].z, fma(_2996, cbModelParam._m0[18u].y, _2995 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2997, cbModelParam._m0[19u].z, fma(_2996, cbModelParam._m0[19u].y, _2995 * cbModelParam._m0[19u].x))), _2167);
            frontier_phi_22_47_ladder = _3115.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3115.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3115.x * cbModelParam._m0[1u].z;
        }
        _2256 = frontier_phi_22_47_ladder_2;
        _2258 = frontier_phi_22_47_ladder_1;
        _2260 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2240 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1272, _1273, _1274), _2167);
        _2256 = _2240.x * cbModelParam._m0[1u].z;
        _2258 = _2240.y * cbModelParam._m0[1u].z;
        _2260 = _2240.z * cbModelParam._m0[1u].z;
    }
    float _2272 = ((((1.0 - _1293) * ((_1280 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1293 * _1280)) * _1264;
    float _2273 = _2272 * ((cbModelParam._m0[1u].w * (_2256 - _2158)) + _2158);
    float _2274 = _2272 * ((cbModelParam._m0[1u].w * (_2258 - _2160)) + _2160);
    float _2275 = _2272 * ((cbModelParam._m0[1u].w * (_2260 - _2162)) + _2162);
    float _2278 = fma(_2275, cbSceneParam._m0[89u].z, fma(_2274, cbSceneParam._m0[89u].y, _2273 * cbSceneParam._m0[89u].x));
    float _2281 = fma(_2275, cbSceneParam._m0[90u].z, fma(_2274, cbSceneParam._m0[90u].y, _2273 * cbSceneParam._m0[90u].x));
    float _2284 = fma(_2275, cbSceneParam._m0[91u].z, fma(_2274, cbSceneParam._m0[91u].y, _2273 * cbSceneParam._m0[91u].x));
    float _2318 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2322 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2326 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2330 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2331 = _2318 / _2330;
    float _2332 = _2322 / _2330;
    float _2333 = _2326 / _2330;
    float _2480;
    float _2481;
    float _2482;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2360 = ((uint(_2333 > cbSceneParam._m0[59u].y) + uint(_2333 > cbSceneParam._m0[59u].x)) + uint(_2333 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2361 = _2360 + 43u;
        uint _2369 = _2360 + 44u;
        uint _2377 = _2360 + 45u;
        uint _2385 = _2360 + 46u;
        float _2396 = fma(_2330, cbSceneParam._m0[_2361].w, fma(_2326, cbSceneParam._m0[_2361].z, fma(_2322, cbSceneParam._m0[_2361].y, _2318 * cbSceneParam._m0[_2361].x)));
        float _2400 = fma(_2330, cbSceneParam._m0[_2369].w, fma(_2326, cbSceneParam._m0[_2369].z, fma(_2322, cbSceneParam._m0[_2369].y, _2318 * cbSceneParam._m0[_2369].x)));
        float _2408 = fma(_2330, cbSceneParam._m0[_2385].w, fma(_2326, cbSceneParam._m0[_2385].z, fma(_2322, cbSceneParam._m0[_2385].y, _2318 * cbSceneParam._m0[_2385].x)));
        float _2413 = cbSceneParam._m0[33u].z * _2408;
        float _2415 = cbSceneParam._m0[33u].w * _2408;
        float _2418 = fma(_2330, cbSceneParam._m0[_2377].w, fma(_2326, cbSceneParam._m0[_2377].z, fma(_2322, cbSceneParam._m0[_2377].y, _2318 * cbSceneParam._m0[_2377].x))) / _2408;
        float _2466 = (cbSceneParam._m0[33u].x - sqrt(((_2332 * _2332) + (_2331 * _2331)) + (_2333 * _2333))) * cbSceneParam._m0[33u].y;
        float _4807 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2473 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2413 + _2396) / _2408, (_2415 + _2400) / _2408), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2415 + _2396) / _2408, (_2400 - _2413) / _2408), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2396 - _2413) / _2408, (_2400 - _2415) / _2408), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2396 - _2415) / _2408, (_2413 + _2400) / _2408), _2418), 0.0)).x), vec4(0.25)));
        _2480 = 1.0 - (_2473 * cbSceneParam._m0[34u].x);
        _2481 = 1.0 - (_2473 * cbSceneParam._m0[34u].y);
        _2482 = 1.0 - (_2473 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2480 = 1.0;
        _2481 = 1.0;
        _2482 = 1.0;
    }
    float _2546;
    float _2548;
    float _2550;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2534 = fma(_2330, cbSceneParam._m0[63u].w, fma(_2326, cbSceneParam._m0[63u].z, fma(_2322, cbSceneParam._m0[63u].y, _2318 * cbSceneParam._m0[63u].x)));
        float _2535 = fma(_2330, cbSceneParam._m0[60u].w, fma(_2326, cbSceneParam._m0[60u].z, fma(_2322, cbSceneParam._m0[60u].y, _2318 * cbSceneParam._m0[60u].x))) / _2534;
        float _2536 = fma(_2330, cbSceneParam._m0[61u].w, fma(_2326, cbSceneParam._m0[61u].z, fma(_2322, cbSceneParam._m0[61u].y, _2318 * cbSceneParam._m0[61u].x))) / _2534;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2535 >= cbSceneParam._m0[64u].x) && (_2536 >= cbSceneParam._m0[64u].y)) && (_2535 <= cbSceneParam._m0[64u].z)) && (_2536 <= cbSceneParam._m0[64u].w))
        {
            float _2674 = fma(_2330, cbSceneParam._m0[62u].w, fma(_2326, cbSceneParam._m0[62u].z, fma(_2322, cbSceneParam._m0[62u].y, _2318 * cbSceneParam._m0[62u].x))) / _2534;
            float _2678 = isnan(cbSceneParam._m0[41u].w) ? _2674 : (isnan(_2674) ? cbSceneParam._m0[41u].w : max(_2674, cbSceneParam._m0[41u].w));
            float _2721 = (cbSceneParam._m0[33u].x - sqrt(((_2332 * _2332) + (_2331 * _2331)) + (_2333 * _2333))) * cbSceneParam._m0[33u].y;
            float _4823 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
            float _2728 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2535, cbSceneParam._m0[33u].w + _2536), _2678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2535, _2536 - cbSceneParam._m0[33u].z), _2678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2535 - cbSceneParam._m0[33u].z, _2536 - cbSceneParam._m0[33u].w), _2678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2535 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2536), _2678), 0.0)).x), vec4(0.25)));
            float _2732 = 1.0 - (_2728 * cbSceneParam._m0[34u].x);
            float _2733 = 1.0 - (_2728 * cbSceneParam._m0[34u].y);
            float _2734 = 1.0 - (_2728 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2734) ? _2482 : (isnan(_2482) ? _2734 : min(_2482, _2734));
            frontier_phi_34_33_ladder_1 = isnan(_2733) ? _2481 : (isnan(_2481) ? _2733 : min(_2481, _2733));
            frontier_phi_34_33_ladder_2 = isnan(_2732) ? _2480 : (isnan(_2480) ? _2732 : min(_2480, _2732));
        }
        else
        {
            frontier_phi_34_33_ladder = _2482;
            frontier_phi_34_33_ladder_1 = _2481;
            frontier_phi_34_33_ladder_2 = _2480;
        }
        _2546 = frontier_phi_34_33_ladder_2;
        _2548 = frontier_phi_34_33_ladder_1;
        _2550 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2546 = _2480;
        _2548 = _2481;
        _2550 = _2482;
    }
    uvec4 _2555 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2557 = _2555.x * 14u;
    uint _2558 = _2557 + 13u;
    float _2565 = _1264 + (-1.0);
    float _2570 = (cbLight._m0[_2558].x * _2565) + 1.0;
    float _2571 = (cbLight._m0[_2558].y * _2565) + 1.0;
    float _2572 = (cbLight._m0[_2558].z * _2565) + 1.0;
    float _2573 = (cbLight._m0[_2558].w * _2565) + 1.0;
    uint _2574 = _2557 + 5u;
    float _2580 = isnan(1.0) ? _2571 : (isnan(_2571) ? 1.0 : min(_2571, 1.0));
    uint _2584 = _2557 + 4u;
    float _2593 = isnan(1.0) ? _2570 : (isnan(_2570) ? 1.0 : min(_2570, 1.0));
    uint _2597 = _2557 | 1u;
    float _2608 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_1115, _1116, _1117));
    float _2611 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_1115, _1116, _1117));
    float _4859 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _4870 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2616 = (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * 0.3183098733425140380859375;
    float _2618 = (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * 0.3183098733425140380859375;
    float _2625 = ((cbLight._m0[_2574].x * _2580) * _2618) + (((cbLight._m0[_2584].x * _2546) * _2593) * _2616);
    float _2626 = ((_2580 * cbLight._m0[_2574].y) * _2618) + (((cbLight._m0[_2584].y * _2548) * _2593) * _2616);
    float _2627 = ((_2580 * cbLight._m0[_2574].z) * _2618) + (((cbLight._m0[_2584].z * _2550) * _2593) * _2616);
    uvec4 _2631 = floatBitsToUint(cbLight._m0[_2557 + 12u]);
    bool _2633 = _2631.x == 0u;
    float _2735;
    float _2737;
    float _2739;
    if (_2633)
    {
        _2735 = _2625;
        _2737 = _2626;
        _2739 = _2627;
    }
    else
    {
        uint _2743 = _2557 + 6u;
        float _2759 = (dot(vec3(cbLight._m0[_2557 + 2u].xyz), vec3(_1115, _1116, _1117)) * 0.5) + 0.5;
        float _2760 = _2759 * _2759;
        float _4881 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2761 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
        float _2762 = isnan(1.0) ? _2572 : (isnan(_2572) ? 1.0 : min(_2572, 1.0));
        _2735 = (((cbLight._m0[_2743].x * 0.3183098733425140380859375) * _2761) * _2762) + _2625;
        _2737 = (((cbLight._m0[_2743].y * 0.3183098733425140380859375) * _2761) * _2762) + _2626;
        _2739 = (((cbLight._m0[_2743].z * 0.3183098733425140380859375) * _2761) * _2762) + _2627;
    }
    bool _2742 = _2631.y == 0u;
    float _2797;
    float _2799;
    float _2801;
    if (_2742)
    {
        _2797 = _2735;
        _2799 = _2737;
        _2801 = _2739;
    }
    else
    {
        uint _2959 = _2557 + 7u;
        float _2975 = (dot(vec3(cbLight._m0[_2557 + 3u].xyz), vec3(_1115, _1116, _1117)) * 0.5) + 0.5;
        float _2976 = _2975 * _2975;
        float _4897 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2977 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
        float _2978 = isnan(1.0) ? _2573 : (isnan(_2573) ? 1.0 : min(_2573, 1.0));
        _2797 = (((cbLight._m0[_2959].x * 0.3183098733425140380859375) * _2977) * _2978) + _2735;
        _2799 = (((cbLight._m0[_2959].y * 0.3183098733425140380859375) * _2977) * _2978) + _2737;
        _2801 = (((cbLight._m0[_2959].z * 0.3183098733425140380859375) * _2977) * _2978) + _2739;
    }
    uint _2804 = _2557 + 8u;
    float _2817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _1118) * 0.949999988079071044921875);
    float _2818 = _2817 * _2817;
    float _2819 = cbLight._m0[_2557].x + _1193;
    float _2820 = cbLight._m0[_2557].y + _1194;
    float _2821 = cbLight._m0[_2557].z + _1195;
    float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
    float _2826 = _2825 * _2819;
    float _2827 = _2825 * _2820;
    float _2828 = _2825 * _2821;
    float _2829 = dot(vec3(_1115, _1116, _1117), vec3(cbLight._m0[_2557].xyz));
    float _4913 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2832 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
    float _4924 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _2833 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
    float _2834 = dot(vec3(_1115, _1116, _1117), vec3(_2826, _2827, _2828));
    float _4935 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
    float _2837 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
    float _2838 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2826, _2827, _2828));
    float _4946 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
    float _2842 = _2818 * _2818;
    float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
    float _2857 = (exp2(log2(1.0 - (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2858 = 1.0 - _2818;
    float _2869 = (0.5 / (((_2833 * ((_2832 * _2858) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _2858) + _2818) * _2832))) * _2832;
    float _4957 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
    float _2871 = (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
    uint _2885 = _2557 + 9u;
    float _2896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _1118) * 0.949999988079071044921875);
    float _2897 = _2896 * _2896;
    float _2898 = cbLight._m0[_2597].x + _1193;
    float _2899 = cbLight._m0[_2597].y + _1194;
    float _2900 = cbLight._m0[_2597].z + _1195;
    float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
    float _2905 = _2904 * _2898;
    float _2906 = _2904 * _2899;
    float _2907 = _2904 * _2900;
    float _2908 = dot(vec3(_1115, _1116, _1117), vec3(cbLight._m0[_2597].xyz));
    float _4968 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
    float _2911 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
    float _2912 = dot(vec3(_1115, _1116, _1117), vec3(_2905, _2906, _2907));
    float _4979 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
    float _2915 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
    float _2916 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2905, _2906, _2907));
    float _4990 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
    float _2920 = _2897 * _2897;
    float _2924 = ((_2915 * _2915) * (_2920 + (-1.0))) + 1.0;
    float _2933 = (exp2(log2(1.0 - (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2934 = 1.0 - _2897;
    float _2944 = (0.5 / (((_2833 * ((_2911 * _2934) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _2934) + _2897) * _2911))) * _2911;
    float _5001 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
    float _2946 = (isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2920 / ((_2924 * _2924) * 3.141590118408203125));
    float _2956 = (((_2933 * cbLight._m0[_2885].x) * _2946) * _2580) + ((((cbLight._m0[_2804].x * _2546) * _2857) * _2871) * _2593);
    float _2957 = (((_2933 * cbLight._m0[_2885].y) * _2946) * _2580) + ((((cbLight._m0[_2804].y * _2548) * _2857) * _2871) * _2593);
    float _2958 = (((_2933 * cbLight._m0[_2885].z) * _2946) * _2580) + ((((cbLight._m0[_2804].z * _2550) * _2857) * _2871) * _2593);
    float _3014;
    float _3016;
    float _3018;
    if (_2633)
    {
        _3014 = _2956;
        _3016 = _2957;
        _3018 = _2958;
    }
    else
    {
        uint _3020 = _2557 + 2u;
        uint _3024 = _2557 + 10u;
        float _3038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3020].w)) * _1118) * 0.949999988079071044921875);
        float _3039 = _3038 * _3038;
        float _3040 = cbLight._m0[_3020].x + _1193;
        float _3041 = cbLight._m0[_3020].y + _1194;
        float _3042 = cbLight._m0[_3020].z + _1195;
        float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
        float _3047 = _3046 * _3040;
        float _3048 = _3046 * _3041;
        float _3049 = _3046 * _3042;
        float _3050 = dot(vec3(_1115, _1116, _1117), vec3(cbLight._m0[_3020].xyz));
        float _5012 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3053 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
        float _3054 = dot(vec3(_1115, _1116, _1117), vec3(_3047, _3048, _3049));
        float _5023 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3057 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
        float _3058 = dot(vec3(cbLight._m0[_3020].xyz), vec3(_3047, _3048, _3049));
        float _5034 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
        float _3062 = _3039 * _3039;
        float _3066 = ((_3057 * _3057) * (_3062 + (-1.0))) + 1.0;
        float _3075 = (exp2(log2(1.0 - (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3076 = 1.0 - _3039;
        float _3086 = (0.5 / (((_2833 * ((_3053 * _3076) + _3039)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _3076) + _3039) * _3053))) * _3053;
        float _5045 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
        float _3088 = (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3062 / ((_3066 * _3066) * 3.141590118408203125));
        float _3089 = isnan(1.0) ? _2572 : (isnan(_2572) ? 1.0 : min(_2572, 1.0));
        _3014 = (((_3075 * cbLight._m0[_3024].x) * _3088) * _3089) + _2956;
        _3016 = (((_3075 * cbLight._m0[_3024].y) * _3088) * _3089) + _2957;
        _3018 = (((_3075 * cbLight._m0[_3024].z) * _3088) * _3089) + _2958;
    }
    float _3120;
    float _3122;
    float _3124;
    if (_2742)
    {
        _3120 = _3014;
        _3122 = _3016;
        _3124 = _3018;
    }
    else
    {
        uint _3131 = _2557 + 3u;
        uint _3135 = _2557 + 11u;
        float _3149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3131].w)) * _1118) * 0.949999988079071044921875);
        float _3150 = _3149 * _3149;
        float _3151 = cbLight._m0[_3131].x + _1193;
        float _3152 = cbLight._m0[_3131].y + _1194;
        float _3153 = cbLight._m0[_3131].z + _1195;
        float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
        float _3158 = _3157 * _3151;
        float _3159 = _3157 * _3152;
        float _3160 = _3157 * _3153;
        float _3161 = dot(vec3(_1115, _1116, _1117), vec3(cbLight._m0[_3131].xyz));
        float _5061 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
        float _3164 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
        float _3165 = dot(vec3(_1115, _1116, _1117), vec3(_3158, _3159, _3160));
        float _5072 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
        float _3168 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
        float _3169 = dot(vec3(cbLight._m0[_3131].xyz), vec3(_3158, _3159, _3160));
        float _5083 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
        float _3173 = _3150 * _3150;
        float _3177 = ((_3168 * _3168) * (_3173 + (-1.0))) + 1.0;
        float _3186 = (exp2(log2(1.0 - (isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3187 = 1.0 - _3150;
        float _3197 = (0.5 / (((_2833 * ((_3164 * _3187) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _3187) + _3150) * _3164))) * _3164;
        float _5094 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
        float _3199 = (isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3173 / ((_3177 * _3177) * 3.141590118408203125));
        float _3200 = isnan(1.0) ? _2573 : (isnan(_2573) ? 1.0 : min(_2573, 1.0));
        _3120 = (((_3186 * cbLight._m0[_3135].x) * _3199) * _3200) + _3014;
        _3122 = (((_3186 * cbLight._m0[_3135].y) * _3199) * _3200) + _3016;
        _3124 = (((_3186 * cbLight._m0[_3135].z) * _3199) * _3200) + _3018;
    }
    float _3266;
    float _3268;
    float _3270;
    float _3272;
    float _3274;
    float _3276;
    if (_2555.y == 0u)
    {
        uvec4 _3221 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3222 = _3221.x;
        uint _3233 = uint((float(_3221.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1202) / _3222))) + floor(float(uint(cbSceneParam._m0[85u].x * _1201) / _3222)));
        float _3243 = (log2(_2333 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3244 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
        uint _3247 = uint(isnan(14.0) ? _3244 : (isnan(_3244) ? 14.0 : min(_3244, 14.0)));
        uvec4 _3252 = texelFetch(g_lightClusterGridBuffer, int(((_3247 << 2u) + (_3233 << 6u)) >> 2u));
        uint _3253 = _3252.x;
        uint _3254 = _3221.z;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        float _3341;
        float _3343;
        if (((((1u << ((_3254 >> 4u) & 15u)) + 4294967295u) & _3253) == 0u) || ((_3254 & 240u) == 0u))
        {
            _3333 = 0.0;
            _3335 = 0.0;
            _3337 = 0.0;
            _3339 = 0.0;
            _3341 = 0.0;
            _3343 = 0.0;
        }
        else
        {
            float _3334;
            float _3336;
            float _3338;
            float _3340;
            float _3342;
            float _3344;
            float _3477 = 0.0;
            float _3478 = 0.0;
            float _3479 = 0.0;
            float _3480 = 0.0;
            float _3481 = 0.0;
            float _3482 = 0.0;
            uint _3483 = 0u;
            uint _3492;
            bool _3493;
            for (;;)
            {
                _3492 = texelFetch(g_lightClassification, int((((_3247 << 5u) + (_3233 << 9u)) + (_3483 << 2u)) >> 2u)).x;
                _3493 = _3492 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3493)
                {
                    frontier_phi_66_pred = _3482;
                    frontier_phi_66_pred_1 = _3481;
                    frontier_phi_66_pred_2 = _3480;
                    frontier_phi_66_pred_3 = _3479;
                    frontier_phi_66_pred_4 = _3478;
                    frontier_phi_66_pred_5 = _3477;
                }
                else
                {
                    float _3601;
                    float _3602;
                    float _3603;
                    float _3604;
                    float _3605;
                    float _3606;
                    uint _3607;
                    _3601 = _3477;
                    _3602 = _3478;
                    _3603 = _3479;
                    _3604 = _3480;
                    _3605 = _3481;
                    _3606 = _3482;
                    _3607 = _3492;
                    float _3533;
                    float _3534;
                    float _3535;
                    float _3536;
                    float _3537;
                    float _3538;
                    for (;;)
                    {
                        uint _3611 = uint(findLSB(_3607)) + (_3483 << 5u);
                        uint _3608 = (_3607 + 4294967295u) & _3607;
                        uint _3613 = _3611 * 48u;
                        vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3613)).x, texelFetch(g_PointLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3613 + 3u)).x));
                        uint _3633 = (_3611 * 48u) + 4u;
                        vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3633)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 3u)).x));
                        uint _3652 = (_3611 * 48u) + 8u;
                        vec3 _3663 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3652)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 2u)).x));
                        float _3667 = _3627.x - _2331;
                        float _3668 = _3627.y - _2332;
                        float _3669 = _3627.z - _2333;
                        float _3670 = dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669));
                        float _3673 = inversesqrt(_3670);
                        float _3674 = _3673 * _3667;
                        float _3675 = _3673 * _3668;
                        float _3676 = _3673 * _3669;
                        float _3677 = dot(vec3(_1220, _1223, _1226), vec3(_3674, _3675, _3676));
                        float _3682 = 1.0 - (_3670 * _3627.w);
                        float _5120 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                        float _3683 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                        float _3684 = sqrt(_3670) * _3646.w;
                        float _3687 = 1.39999997615814208984375 / (_3684 + 1.39999997615814208984375);
                        float _3688 = _3687 * _3687;
                        float _3691 = ((1.0 - _3688) * _3677) + _3688;
                        float _3694 = _3684 * _3684;
                        float _3698 = ((isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0))) * _3683) / ((_3694 * 0.699999988079071044921875) + 1.0);
                        float _3702 = (-0.0) - _2331;
                        float _3703 = (-0.0) - _2332;
                        float _3704 = (-0.0) - _2333;
                        float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                        float _3709 = _3708 * _3702;
                        float _3710 = _3708 * _3703;
                        float _3711 = _3708 * _3704;
                        float _3718 = exp2(log2(1.0 / ((_3694 * 3.5) + 5.0)) * 0.25);
                        float _3719 = 1.0 - _1280;
                        float _3726 = sqrt(1.0 - ((1.0 - (_3719 * _3719)) * (1.0 - (_3718 * _3718))));
                        float _3727 = _3726 * _3726;
                        float _3728 = _3727 * _3727;
                        float _3729 = _3709 + _3674;
                        float _3730 = _3710 + _3675;
                        float _3731 = _3711 + _3676;
                        float _3735 = inversesqrt(dot(vec3(_3729, _3730, _3731), vec3(_3729, _3730, _3731)));
                        float _3739 = dot(vec3(_1220, _1223, _1226), vec3(_3709, _3710, _3711));
                        float _5136 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                        float _3742 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
                        float _3743 = dot(vec3(_1220, _1223, _1226), vec3(_3735 * _3729, _3735 * _3730, _3735 * _3731));
                        float _5147 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                        float _3746 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
                        float _3750 = ((_3746 * _3746) * (_3728 + (-1.0))) + 1.0;
                        float _3751 = _3687 * _3727;
                        float _3752 = _3751 * _3751;
                        float _3755 = ((1.0 - _3752) * _3677) + _3752;
                        float _5158 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                        float _3756 = isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0));
                        float _3757 = 1.0 - _3727;
                        float _3767 = (0.5 / (((_3756 * ((_3742 * _3757) + _3727)) + 9.9999999392252902907785028219223e-09) + (((_3756 * _3757) + _3727) * _3742))) * _3756;
                        float _5169 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                        float _3778 = (((_3728 * 3.1415927410125732421875) * (isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0)))) / ((_3750 * _3750) * ((_3694 * 2.1991131305694580078125) + 3.141590118408203125))) * _3683;
                        _3536 = (_3698 * _3646.x) + _3604;
                        _3537 = (_3698 * _3646.y) + _3605;
                        _3538 = (_3698 * _3646.z) + _3606;
                        _3533 = (_3778 * _3663.x) + _3601;
                        _3534 = (_3778 * _3663.y) + _3602;
                        _3535 = (_3778 * _3663.z) + _3603;
                        if (_3608 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3601 = _3533;
                            _3602 = _3534;
                            _3603 = _3535;
                            _3604 = _3536;
                            _3605 = _3537;
                            _3606 = _3538;
                            _3607 = _3608;
                        }
                    }
                    frontier_phi_66_pred = _3538;
                    frontier_phi_66_pred_1 = _3537;
                    frontier_phi_66_pred_2 = _3536;
                    frontier_phi_66_pred_3 = _3535;
                    frontier_phi_66_pred_4 = _3534;
                    frontier_phi_66_pred_5 = _3533;
                }
                _3344 = frontier_phi_66_pred;
                _3342 = frontier_phi_66_pred_1;
                _3340 = frontier_phi_66_pred_2;
                _3338 = frontier_phi_66_pred_3;
                _3336 = frontier_phi_66_pred_4;
                _3334 = frontier_phi_66_pred_5;
                uint _3484 = _3483 + 1u;
                if (_3484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3477 = _3334;
                    _3478 = _3336;
                    _3479 = _3338;
                    _3480 = _3340;
                    _3481 = _3342;
                    _3482 = _3344;
                    _3483 = _3484;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3333 = _3334;
            _3335 = _3336;
            _3337 = _3338;
            _3339 = _3340;
            _3341 = _3342;
            _3343 = _3344;
        }
        uvec4 _3347 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3348 = _3347.z;
        uint _3350 = (_3348 >> 8u) & 15u;
        float _3445;
        float _3447;
        float _3449;
        float _3451;
        float _3453;
        float _3455;
        if (((4294967295u << _3350) & _3253) == 0u)
        {
            _3445 = _3333;
            _3447 = _3335;
            _3449 = _3337;
            _3451 = _3339;
            _3453 = _3341;
            _3455 = _3343;
        }
        else
        {
            float _3470 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
            float _3471 = _3470 * _2331;
            float _3472 = _3470 * _2332;
            float _3473 = _3470 * _2333;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3350 < ((_3348 >> 12u) & 15u))
            {
                float _3446;
                float _3448;
                float _3450;
                float _3452;
                float _3454;
                float _3456;
                float _3584 = _3333;
                float _3585 = _3335;
                float _3586 = _3337;
                float _3587 = _3339;
                float _3588 = _3341;
                float _3589 = _3343;
                uint _3590 = _3350;
                uint _3599;
                bool _3600;
                for (;;)
                {
                    _3599 = texelFetch(g_lightClassification, int((((_3247 << 5u) + (_3233 << 9u)) + (_3590 << 2u)) >> 2u)).x;
                    _3600 = _3599 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3600)
                    {
                        frontier_phi_72_pred = _3589;
                        frontier_phi_72_pred_1 = _3588;
                        frontier_phi_72_pred_2 = _3587;
                        frontier_phi_72_pred_3 = _3586;
                        frontier_phi_72_pred_4 = _3585;
                        frontier_phi_72_pred_5 = _3584;
                    }
                    else
                    {
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _4076;
                        float _4077;
                        float _4078;
                        float _4079;
                        float _4080;
                        float _4081;
                        float _3796 = _3584;
                        float _3797 = _3585;
                        float _3798 = _3586;
                        float _3799 = _3587;
                        float _3800 = _3588;
                        float _3801 = _3589;
                        uint _3802 = _3599;
                        uint _3803;
                        vec4 _3828;
                        float _3829;
                        vec4 _3844;
                        vec3 _3856;
                        vec4 _3871;
                        vec4 _3886;
                        float _3932;
                        bool _3933;
                        for (;;)
                        {
                            uint _3813 = ((_3590 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3802));
                            _3803 = (_3802 + 4294967295u) & _3802;
                            uint _3815 = _3813 * 40u;
                            _3828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 3u)).x));
                            _3829 = _3828.w;
                            uint _3831 = (_3813 * 40u) + 4u;
                            _3844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 3u)).x));
                            uint _3846 = (_3813 * 40u) + 8u;
                            _3856 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 2u)).x));
                            uint _3858 = (_3813 * 40u) + 16u;
                            _3871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 3u)).x));
                            uint _3873 = (_3813 * 40u) + 20u;
                            _3886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 3u)).x));
                            uint _3888 = (_3813 * 40u) + 24u;
                            vec4 _3901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 3u)).x));
                            uint _3907 = (_3813 * 40u) + 28u;
                            vec4 _3920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3907 + 3u)).x));
                            _3932 = fma(_2333, _3920.z, fma(_2332, _3920.y, _3920.x * _2331)) + _3920.w;
                            _3933 = !((fma(_2333, _3901.z, fma(_2332, _3901.y, _3901.x * _2331)) + _3901.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3933)
                            {
                                float _3960 = _3828.x - _2331;
                                float _3961 = _3828.y - _2332;
                                float _3962 = _3828.z - _2333;
                                float _3963 = dot(vec3(_3960, _3961, _3962), vec3(_3960, _3961, _3962));
                                float _3966 = inversesqrt(_3963);
                                float _3967 = _3966 * _3960;
                                float _3968 = _3966 * _3961;
                                float _3969 = _3966 * _3962;
                                float _3973 = 1.0 - (_3963 / (_3829 * _3829));
                                float _5180 = isnan(0.0) ? _3973 : (isnan(_3973) ? 0.0 : max(_3973, 0.0));
                                float _3974 = isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0));
                                float _3978 = sqrt(_3963) * _3844.w;
                                float _3980 = 1.39999997615814208984375 / (_3978 + 1.39999997615814208984375);
                                float _3981 = _3980 * _3980;
                                float _3984 = ((1.0 - _3981) * dot(vec3(_3967, _3968, _3969), vec3(_1220, _1223, _1226))) + _3981;
                                float _3987 = _3978 * _3978;
                                float _3991 = (fma(_2333, _3871.z, fma(_2332, _3871.y, _3871.x * _2331)) + _3871.w) / _3932;
                                float _3992 = (fma(_2333, _3886.z, fma(_2332, _3886.y, _3886.x * _2331)) + _3886.w) / _3932;
                                float _3996 = 1.0 - dot(vec2(_3991, _3992), vec2(_3991, _3992));
                                float _5196 = isnan(0.0) ? _3996 : (isnan(_3996) ? 0.0 : max(_3996, 0.0));
                                float _3997 = isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0));
                                float _3998 = _3997 * (((isnan(0.0) ? _3984 : (isnan(_3984) ? 0.0 : max(_3984, 0.0))) * _3974) / ((_3987 * 0.699999988079071044921875) + 1.0));
                                float _4010 = exp2(log2(1.0 / ((_3987 * 3.5) + 5.0)) * 0.25);
                                float _4011 = 1.0 - _1280;
                                float _4018 = sqrt(1.0 - ((1.0 - (_4011 * _4011)) * (1.0 - (_4010 * _4010))));
                                float _4019 = _4018 * _4018;
                                float _4020 = _4019 * _4019;
                                float _4021 = _3967 - _3471;
                                float _4022 = _3968 - _3472;
                                float _4023 = _3969 - _3473;
                                float _4027 = inversesqrt(dot(vec3(_4021, _4022, _4023), vec3(_4021, _4022, _4023)));
                                float _4031 = dot(vec3(_1220, _1223, _1226), vec3((-0.0) - _3471, (-0.0) - _3472, (-0.0) - _3473));
                                float _5207 = isnan(0.0) ? _4031 : (isnan(_4031) ? 0.0 : max(_4031, 0.0));
                                float _4034 = isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0));
                                float _4035 = dot(vec3(_1220, _1223, _1226), vec3(_4027 * _4021, _4027 * _4022, _4027 * _4023));
                                float _5218 = isnan(0.0) ? _4035 : (isnan(_4035) ? 0.0 : max(_4035, 0.0));
                                float _4038 = isnan(1.0) ? _5218 : (isnan(_5218) ? 1.0 : min(_5218, 1.0));
                                float _4042 = ((_4038 * _4038) * (_4020 + (-1.0))) + 1.0;
                                float _4043 = _3980 * _4019;
                                float _4044 = _4043 * _4043;
                                float _4050 = ((1.0 - _4044) * dot(vec3(_1220, _1223, _1226), vec3(_3967, _3968, _3969))) + _4044;
                                float _5229 = isnan(0.0) ? _4050 : (isnan(_4050) ? 0.0 : max(_4050, 0.0));
                                float _4051 = isnan(1.0) ? _5229 : (isnan(_5229) ? 1.0 : min(_5229, 1.0));
                                float _4052 = 1.0 - _4019;
                                float _4062 = (0.5 / (((_4051 * ((_4034 * _4052) + _4019)) + 9.9999999392252902907785028219223e-09) + (((_4051 * _4052) + _4019) * _4034))) * _4051;
                                float _5240 = isnan(0.0) ? _4062 : (isnan(_4062) ? 0.0 : max(_4062, 0.0));
                                float _4072 = (_3997 * _3974) * (((_4020 * 3.1415927410125732421875) * (isnan(1.0) ? _5240 : (isnan(_5240) ? 1.0 : min(_5240, 1.0)))) / ((_4042 * _4042) * ((_3987 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3998 * _3844.y;
                                frontier_phi_78_pred_1 = _3998 * _3844.x;
                                frontier_phi_78_pred_2 = _4072 * _3856.z;
                                frontier_phi_78_pred_3 = _4072 * _3856.y;
                                frontier_phi_78_pred_4 = _4072 * _3856.x;
                                frontier_phi_78_pred_5 = _3998 * _3844.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4080 = frontier_phi_78_pred;
                            _4079 = frontier_phi_78_pred_1;
                            _4078 = frontier_phi_78_pred_2;
                            _4077 = frontier_phi_78_pred_3;
                            _4076 = frontier_phi_78_pred_4;
                            _4081 = frontier_phi_78_pred_5;
                            _3786 = _4079 + _3799;
                            _3787 = _4080 + _3800;
                            _3788 = _4081 + _3801;
                            _3783 = _4076 + _3796;
                            _3784 = _4077 + _3797;
                            _3785 = _4078 + _3798;
                            if (_3803 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3796 = _3783;
                                _3797 = _3784;
                                _3798 = _3785;
                                _3799 = _3786;
                                _3800 = _3787;
                                _3801 = _3788;
                                _3802 = _3803;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3788;
                        frontier_phi_72_pred_1 = _3787;
                        frontier_phi_72_pred_2 = _3786;
                        frontier_phi_72_pred_3 = _3785;
                        frontier_phi_72_pred_4 = _3784;
                        frontier_phi_72_pred_5 = _3783;
                    }
                    _3456 = frontier_phi_72_pred;
                    _3454 = frontier_phi_72_pred_1;
                    _3452 = frontier_phi_72_pred_2;
                    _3450 = frontier_phi_72_pred_3;
                    _3448 = frontier_phi_72_pred_4;
                    _3446 = frontier_phi_72_pred_5;
                    uint _3591 = _3590 + 1u;
                    if (_3591 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3584 = _3446;
                        _3585 = _3448;
                        _3586 = _3450;
                        _3587 = _3452;
                        _3588 = _3454;
                        _3589 = _3456;
                        _3590 = _3591;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3456;
                frontier_phi_60_61_ladder_1 = _3454;
                frontier_phi_60_61_ladder_2 = _3450;
                frontier_phi_60_61_ladder_3 = _3448;
                frontier_phi_60_61_ladder_4 = _3446;
                frontier_phi_60_61_ladder_5 = _3452;
            }
            else
            {
                frontier_phi_60_61_ladder = _3343;
                frontier_phi_60_61_ladder_1 = _3341;
                frontier_phi_60_61_ladder_2 = _3337;
                frontier_phi_60_61_ladder_3 = _3335;
                frontier_phi_60_61_ladder_4 = _3333;
                frontier_phi_60_61_ladder_5 = _3339;
            }
            _3445 = frontier_phi_60_61_ladder_4;
            _3447 = frontier_phi_60_61_ladder_3;
            _3449 = frontier_phi_60_61_ladder_2;
            _3451 = frontier_phi_60_61_ladder_5;
            _3453 = frontier_phi_60_61_ladder_1;
            _3455 = frontier_phi_60_61_ladder;
        }
        float _3460 = isnan(1.0) ? _1264 : (isnan(_1264) ? 1.0 : min(_1264, 1.0));
        _3266 = (_3460 * _3451) + _2797;
        _3268 = (_3460 * _3453) + _2799;
        _3270 = (_3460 * _3455) + _2801;
        _3272 = ((_3445 * 0.039999999105930328369140625) * _3460) + _3120;
        _3274 = ((_3447 * 0.039999999105930328369140625) * _3460) + _3122;
        _3276 = ((_3449 * 0.039999999105930328369140625) * _3460) + _3124;
    }
    else
    {
        _3266 = _2797;
        _3268 = _2799;
        _3270 = _2801;
        _3272 = _3120;
        _3274 = _3122;
        _3276 = _3124;
    }
    float _5256 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
    float _5267 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
    float _5278 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
    uint _3296 = _293 + 6u;
    float _3304 = _1201 / cbSceneParam._m0[86u].x;
    float _3305 = _1202 / cbSceneParam._m0[86u].y;
    vec4 _3319 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3304, _3305, (log2((isnan(cbSceneParam._m0[77u].w) ? _1136 : (isnan(_1136) ? cbSceneParam._m0[77u].w : min(_1136, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3321 = _3319.x;
    float _3322 = _3319.y;
    float _3323 = _3319.z;
    float _3324 = _3319.w;
    float _3395;
    float _3397;
    float _3399;
    float _3401;
    if (_1136 > cbSceneParam._m0[78u].w)
    {
        float _3358 = isnan(_1136) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1136 : min(cbSceneParam._m0[80u].w, _1136));
        float _3359 = _3358 / _1136;
        float _3370 = _3359 * _1186;
        float _3371 = _1187 * _3359;
        float _3372 = (-0.0) - _3371;
        float _3373 = _3359 * _1188;
        float _3375 = (cbSceneParam._m0[77u].w * _3372) / _3358;
        float _3376 = _3375 + cbSceneParam._m0[79u].w;
        float _3377 = cbSceneParam._m0[79u].w - _3371;
        float _3383 = sqrt(((_3370 * _3370) + (_3371 * _3371)) + (_3373 * _3373));
        float _3386 = (1.0 - (cbSceneParam._m0[77u].w / _3358)) * _3383;
        float _3391 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3393 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3546;
        if (abs((_3372 - _3375) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3546 = ((((_3376 > 0.0) ? exp2(_3391 * _3376) : (2.0 - exp2(_3393 * _3376))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3386;
        }
        else
        {
            float _3506 = 1.0 / cbSceneParam._m0[80u].x;
            float _3507 = isnan(_3377) ? _3376 : (isnan(_3376) ? _3377 : max(_3376, _3377));
            float _3508 = isnan(_3377) ? _3376 : (isnan(_3376) ? _3377 : min(_3376, _3377));
            float _3517 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : min(_3507, 0.0));
            float _3518 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : min(_3508, 0.0));
            _3546 = ((abs(_3383 / _3372) * cbSceneParam._m0[80u].y) * ((((_3517 - _3518) * 2.0) - ((exp2(_3391 * (isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0)))) - exp2(_3391 * (isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))))) * _3506)) - ((exp2(_3393 * _3517) - exp2(_3393 * _3518)) * _3506))) + (_3386 * cbSceneParam._m0[80u].z);
        }
        vec4 _3548 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3304, _3305, 1.0), 0.0);
        float _3557 = exp2((_3546 * (-1.44269502162933349609375)) * (1.0 - _3548.w));
        float _3558 = log2(_3557);
        float _3574 = log2(_3324);
        _3395 = (exp2(_3574 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3558 * cbSceneParam._m0[78u].x)) * _3548.x) / cbSceneParam._m0[78u].x)) + _3321;
        _3397 = (exp2(_3574 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3558 * cbSceneParam._m0[78u].y)) * _3548.y) / cbSceneParam._m0[78u].y)) + _3322;
        _3399 = (exp2(_3574 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3558 * cbSceneParam._m0[78u].z)) * _3548.z) / cbSceneParam._m0[78u].z)) + _3323;
        _3401 = _3557 * _3324;
    }
    else
    {
        _3395 = _3321;
        _3397 = _3322;
        _3399 = _3323;
        _3401 = _3324;
    }
    float _3413 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3414 = _3413 == 3.0;
    float _3415 = log2(_3401);
    float _3422 = exp2(_3415 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5256 : (isnan(_5256) ? 1.0 : min(_5256, 1.0))) * (_3266 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1264))) + ((_3272 + ((isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0))) * _2067)) * cbPerFrame._m0[3u].x));
    float _3423 = exp2(_3415 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5267 : (isnan(_5267) ? 1.0 : min(_5267, 1.0))) * (_3268 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1264))) + ((_3274 + ((isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))) * _2067)) * cbPerFrame._m0[3u].x));
    float _3424 = exp2(_3415 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5278 : (isnan(_5278) ? 1.0 : min(_5278, 1.0))) * (_3270 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1264))) + ((_3276 + ((isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0))) * _2067)) * cbPerFrame._m0[3u].x));
    float _3433 = (_3413 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3433 * (_3414 ? _3422 : (_3422 + (cbSceneParam._m0[72u].w * _3395)));
    SV_Target.y = _3433 * (_3414 ? _3423 : (_3423 + (cbSceneParam._m0[72u].w * _3397)));
    SV_Target.z = _3433 * (_3414 ? _3424 : (_3424 + (cbSceneParam._m0[72u].w * _3399)));
    SV_Target.w = cbInstanceData._m0[_3296].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3296].w;
}


