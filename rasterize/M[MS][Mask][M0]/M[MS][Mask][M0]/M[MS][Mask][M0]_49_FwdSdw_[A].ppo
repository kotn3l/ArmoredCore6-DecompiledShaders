#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1454;
float _4094;
float _4095;
float _4096;
float _4097;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4106 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4117 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4128 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _444 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _446 = _444.x;
    float _458 = dot(vec4(_446, _444.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _475 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_446 - _458) * cbMtdParam._m0[24u].z) + _458) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4139 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _486 = (_341.x * cbMtdParam._m0[9u].x) * ((_476 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372);
    float _487 = (_341.y * cbMtdParam._m0[9u].y) * ((_476 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373);
    float _488 = (_341.z * cbMtdParam._m0[9u].z) * ((_476 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374);
    float _492 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _486;
    float _495 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _487;
    float _498 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _488;
    float _506 = (((_486 - _492) * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) + _492) * 4.55000019073486328125;
    float _508 = (((_487 - _495) * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) + _495) * 4.55000019073486328125;
    float _510 = (((_488 - _498) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) + _498) * 4.55000019073486328125;
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _595 = _593.x;
    float _596 = _593.y;
    float _597 = _593.z;
    float _606 = ((_576.z - _597) * _476) + _597;
    float _609 = ((((_576.x - _595) * _476) + _595) * 2.0) + (-1.0);
    float _610 = ((((_576.y - _596) * _476) + _596) * 2.0) + (-1.0);
    float _611 = dot(vec2(_609, _610), vec2(_609, _610));
    float _4150 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _616 = sqrt(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _648 = (_609 + ((((_549.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_636.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _649 = (_610 + ((((_549.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_636.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _652 = fma(_616, _254, fma(_649, _261, _648 * _247));
    float _655 = fma(_616, _255, fma(_649, _262, _648 * _248));
    float _658 = fma(_616, _256, fma(_649, _263, _648 * _249));
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _691 = _689.x;
    float _692 = 1.0 - _691;
    float _698 = (cbMtdParam._m0[19u].x + dot(vec4(_662 * _652, _662 * _655, _662 * _658, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_691 - _692) * cbMtdParam._m0[24u].w) + _692) * cbMtdParam._m0[21u].z);
    float _4161 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _701 = (-0.0) - cbMtdParam._m0[24u].x;
    float _703 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _703 : (isnan(_703) ? 1.0 : min(_703, 1.0));
    float _711 = _699 - ((_699 * TEXCOORD_8.x) * _704);
    float _712 = _699 - ((_699 * TEXCOORD_8.y) * _704);
    float _713 = _699 - ((_699 * TEXCOORD_8.z) * _704);
    float _720 = (_711 * ((_529.x * cbMtdParam._m0[18u].x) - _506)) + _506;
    float _721 = (_712 * ((_529.y * cbMtdParam._m0[18u].y) - _508)) + _508;
    float _722 = (_713 * ((_529.z * cbMtdParam._m0[18u].z) - _510)) + _510;
    vec4 _734 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _736 = _734.x;
    float _737 = 1.0 - _736;
    float _763 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_736 - _737) * cbMtdParam._m0[24u].y) + _737) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4182 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _764 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _772 = ((((cbMtdParam._m0[10u].x - _720) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _764) + _720;
    float _773 = ((((cbMtdParam._m0[10u].y - _721) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _764) + _721;
    float _774 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _722)) * _764) + _722;
    float _779 = (((_549.z - _606) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _606;
    float _783 = ((_636.z - _779) * cbMtdParam._m0[19u].w) + _779;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _804 = (_797.x * 2.0) + (-1.0);
    float _805 = (_797.y * 2.0) + (-1.0);
    float _806 = dot(vec2(_804, _805), vec2(_804, _805));
    float _4193 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _814 = ((_797.z - _783) * _711) + _783;
    float _817 = ((cbMtdParam._m0[23u].y - _814) * _764) + _814;
    vec4 _836 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _842 = (_836.x * 2.0) + (-1.0);
    float _843 = (_836.y * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _4204 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _859 = ((sqrt(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) - _616) * _713) + _616;
    float _862 = (((_804 - _648) * _711) + _648) + (cbMtdParam._m0[21u].x * _648);
    float _863 = (((_805 - _649) * _712) + _649) + (cbMtdParam._m0[21u].x * _649);
    float _874 = (((_842 - _862) + (_862 * cbMtdParam._m0[22u].z)) * _764) + _862;
    float _875 = (((_843 - _863) + (_863 * cbMtdParam._m0[22u].z)) * _764) + _863;
    float _876 = (_764 * (sqrt(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) - _859)) + _859;
    float _880 = cbMtdParam._m0[22u].x + _636.w;
    float _883 = fma(_876, _254, fma(_875, _261, _874 * _247));
    float _886 = fma(_876, _255, fma(_875, _262, _874 * _248));
    float _889 = fma(_876, _256, fma(_875, _263, _874 * _249));
    float _893 = inversesqrt(dot(vec3(_883, _886, _889), vec3(_883, _886, _889)));
    float _894 = _893 * _883;
    float _895 = _893 * _886;
    float _896 = _893 * _889;
    float _4215 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _897 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _4226 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4237 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4248 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4259 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _915 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _965 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _955);
    float _966 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _955);
    float _967 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _955);
    float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
    float _972 = _965 * _971;
    float _973 = _966 * _971;
    float _974 = _967 * _971;
    vec4 _979 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _981 = _979.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1135 = sqrt(((_965 * _965) + (_966 * _966)) + (_967 * _967));
        float _1141 = (cbMatDynParam._m0[5u].x * _1135) + cbMatDynParam._m0[5u].y;
        float _4270 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1146 = (cbMatDynParam._m0[5u].z * _1135) + cbMatDynParam._m0[5u].w;
        float _4281 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) - _1142)) + _1142) < ((_981 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _992 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _993 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1011 = fma(_896, cbSceneParam._m0[5u].z, fma(_895, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _894));
    float _1014 = fma(_896, cbSceneParam._m0[6u].z, fma(_895, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _894));
    float _1017 = fma(_896, cbSceneParam._m0[7u].z, fma(_895, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _894));
    uint _1030 = _285 + 9u;
    uint _1031 = _1030 + uint(cbMatDynParam._m0[0u].w);
    float _1037 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * cbInstanceData._m0[_1031].x;
    float _1038 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * cbInstanceData._m0[_1031].y;
    float _1039 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * cbInstanceData._m0[_1031].z;
    float _4292 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _4303 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _4314 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    vec4 _1051 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _992, cbSceneParam._m0[86u].y * _993));
    float _1055 = ((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * TEXCOORD_5.w) * _1051.x;
    float _1056 = dot(vec3(_894, _895, _896), vec3(_972, _973, _974));
    float _1059 = _1056 * 2.0;
    float _1063 = (_1059 * _894) - _972;
    float _1064 = (_1059 * _895) - _973;
    float _1065 = (_1059 * _896) - _974;
    float _1069 = abs(dot(vec3(_972, _973, _974), vec3(_894, _895, _896)));
    float _4325 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1071 = sqrt(_897);
    float _1084 = exp2((_1071 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1071 * 3.0));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1453;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1178 = fma(_1124, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116));
        float _1182 = fma(_1124, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116));
        float _1186 = fma(_1124, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116));
        float _1211 = _1116 + _894;
        float _1212 = _1120 + _895;
        float _1213 = _1124 + _896;
        float _1223 = fma(_1213, cbModelParam._m0[26u].z, fma(_1212, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211)) - _1178;
        float _1224 = fma(_1213, cbModelParam._m0[27u].z, fma(_1212, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211)) - _1182;
        float _1225 = fma(_1213, cbModelParam._m0[28u].z, fma(_1212, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211)) - _1186;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1178 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1182 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[34u].z) + ((((((_1186 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1281 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1247.x + (-0.5));
        float _1283 = _1281 * (_1247.y + (-0.5));
        float _1284 = _1281 * (_1247.z + (-0.5));
        float _1291 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1254.x + (-0.5));
        float _1293 = _1291 * (_1254.y + (-0.5));
        float _1294 = _1291 * (_1254.z + (-0.5));
        float _1301 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1261.x + (-0.5));
        float _1303 = _1301 * (_1261.y + (-0.5));
        float _1304 = _1301 * (_1261.z + (-0.5));
        float _1311 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1268.x + (-0.5));
        float _1313 = _1311 * (_1268.y + (-0.5));
        float _1314 = _1311 * (_1268.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1335 = (dot(vec3(_894, _895, _896), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1345 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4373 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1347 + 1.0))) + _1352) * _1315;
        float _1362 = _1283 * 0.5;
        float _1363 = _1293 * 0.5;
        float _1364 = _1303 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_894, _895, _896), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4406 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1389 + 1.0))) + _1394) * _1316;
        float _1404 = _1284 * 0.5;
        float _1405 = _1294 * 0.5;
        float _1406 = _1304 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_894, _895, _896), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4439 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1431 + 1.0))) + _1436) * _1317;
        _1453 = _1284;
        _1455 = _1283;
        _1456 = _1282;
        _1457 = _1294;
        _1458 = _1293;
        _1459 = _1292;
        _1460 = _1304;
        _1461 = _1303;
        _1462 = _1302;
        _1463 = _1317;
        _1464 = _1316;
        _1465 = _1315;
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _1454;
        _1455 = _1454;
        _1456 = _1454;
        _1457 = _1454;
        _1458 = _1454;
        _1459 = _1454;
        _1460 = _1454;
        _1461 = _1454;
        _1462 = _1454;
        _1463 = _1454;
        _1464 = _1454;
        _1465 = _1454;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1496 = fma(_1124, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116));
        float _1500 = fma(_1124, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116));
        float _1504 = fma(_1124, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116));
        float _1527 = _1116 + _894;
        float _1528 = _1120 + _895;
        float _1529 = _1124 + _896;
        float _1539 = fma(_1529, cbModelParam._m0[30u].z, fma(_1528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1527)) - _1496;
        float _1540 = fma(_1529, cbModelParam._m0[31u].z, fma(_1528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1527)) - _1500;
        float _1541 = fma(_1529, cbModelParam._m0[32u].z, fma(_1528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1527)) - _1504;
        float _1545 = inversesqrt(dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541)));
        float _1558 = ((_1545 * _1539) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1496 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1545 * _1540) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1500 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1545 * _1541) / cbModelParam._m0[35u].z) + ((((((_1504 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        float _1595 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1562.x + (-0.5));
        float _1597 = _1595 * (_1562.y + (-0.5));
        float _1598 = _1595 * (_1562.z + (-0.5));
        float _1605 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1569.x + (-0.5));
        float _1607 = _1605 * (_1569.y + (-0.5));
        float _1608 = _1605 * (_1569.z + (-0.5));
        float _1615 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1576.x + (-0.5));
        float _1617 = _1615 * (_1576.y + (-0.5));
        float _1618 = _1615 * (_1576.z + (-0.5));
        float _1625 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1583.x + (-0.5));
        float _1627 = _1625 * (_1583.y + (-0.5));
        float _1628 = _1625 * (_1583.z + (-0.5));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = _1596 * 0.5;
        float _1633 = _1606 * 0.5;
        float _1634 = _1616 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_894, _895, _896), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4480 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4491 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4502 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_1659 + 1.0))) + _1664) * _1629;
        float _1674 = _1597 * 0.5;
        float _1675 = _1607 * 0.5;
        float _1676 = _1617 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_894, _895, _896), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4513 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4524 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4535 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_1701 + 1.0))) + _1706) * _1630;
        float _1716 = _1598 * 0.5;
        float _1717 = _1608 * 0.5;
        float _1718 = _1618 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_894, _895, _896), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4546 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4557 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4568 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_1743 + 1.0))) + _1748) * _1631;
        _1765 = _1598;
        _1766 = _1597;
        _1767 = _1596;
        _1768 = _1608;
        _1769 = _1607;
        _1770 = _1606;
        _1771 = _1618;
        _1772 = _1617;
        _1773 = _1616;
        _1774 = _1631;
        _1775 = _1630;
        _1776 = _1629;
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
    }
    else
    {
        _1765 = _1454;
        _1766 = _1454;
        _1767 = _1454;
        _1768 = _1454;
        _1769 = _1454;
        _1770 = _1454;
        _1771 = _1454;
        _1772 = _1454;
        _1773 = _1454;
        _1774 = _1454;
        _1775 = _1454;
        _1776 = _1454;
        _1777 = 0.0;
        _1778 = 0.0;
        _1779 = 0.0;
    }
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1466)) + _1466;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1467)) + _1467;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1468)) + _1468;
    float _1812 = fma(_1791, cbSceneParam._m0[89u].z, fma(_1790, cbSceneParam._m0[89u].y, _1789 * cbSceneParam._m0[89u].x));
    float _1815 = fma(_1791, cbSceneParam._m0[90u].z, fma(_1790, cbSceneParam._m0[90u].y, _1789 * cbSceneParam._m0[90u].x));
    float _1818 = fma(_1791, cbSceneParam._m0[91u].z, fma(_1790, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1789));
    float _1833 = _1063 * 0.5;
    float _1834 = _1064 * 0.5;
    float _1835 = _1065 * 0.5;
    float _1836 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1839 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1842 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1876;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1849 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1453, _1457, _1460, _1463));
        float _1853 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1455, _1458, _1461, _1464));
        float _1857 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1864 = dot(vec4(cbModelParam._m0[39u]), vec4(_1833, _1834, _1835, 1.0));
        _1876 = dot(vec3(isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1864) ? 0.0 : (isnan(0.0) ? _1864 : max(0.0, _1864))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1876 = 1.0;
    }
    float _1887;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1878 = dot(vec4(cbModelParam._m0[40u]), vec4(_1833, _1834, _1835, 1.0));
        _1887 = dot(vec3(isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1878) ? 0.0 : (isnan(0.0) ? _1878 : max(0.0, _1878))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1887 = 1.0;
    }
    float _1891 = (_1887 * cbModelParam._m0[1u].x) + (_1876 * (1.0 - cbModelParam._m0[1u].x));
    float _1901 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _897);
    float _1902 = isnan(_1901) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1901 : min(cbModelParam._m0[25u].z, _1901));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1949 = fma(_1124, cbModelParam._m0[13u].z, fma(_1120, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1116)) + cbModelParam._m0[13u].w;
        float _1953 = fma(_1124, cbModelParam._m0[14u].z, fma(_1120, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1116)) + cbModelParam._m0[14u].w;
        float _1957 = fma(_1124, cbModelParam._m0[15u].z, fma(_1120, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1116)) + cbModelParam._m0[15u].w;
        float _1960 = fma(_1065, cbModelParam._m0[13u].z, fma(_1064, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063));
        float _1963 = fma(_1065, cbModelParam._m0[14u].z, fma(_1064, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063));
        float _1966 = fma(_1065, cbModelParam._m0[15u].z, fma(_1064, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063));
        float _1994;
        if (_1960 > 0.0)
        {
            _1994 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1994 = frontier_phi_17_15_ladder;
        }
        float _2163;
        if (_1963 > 0.0)
        {
            _2163 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2163 = frontier_phi_26_22_ladder;
        }
        float _2458;
        if (_1966 > 0.0)
        {
            _2458 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2458 = frontier_phi_38_33_ladder;
        }
        float _2460 = isnan(_2163) ? _1994 : (isnan(_1994) ? _2163 : min(_1994, _2163));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1960) + _1949;
        float _2466 = (_2461 * _1963) + _1953;
        float _2467 = (_2461 * _1966) + _1957;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2468;
        float _2472 = _2468 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 > _2472) || ((_2466 < _2470) || ((_2465 < _2470) || (_2465 > _2472))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2467, cbModelParam._m0[9u].z, fma(_2466, cbModelParam._m0[9u].y, _2465 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2467, cbModelParam._m0[10u].z, fma(_2466, cbModelParam._m0[10u].y, _2465 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2467, cbModelParam._m0[11u].z, fma(_2466, cbModelParam._m0[11u].y, _2465 * cbModelParam._m0[11u].x))), _1902);
            frontier_phi_16_38_ladder = _2612.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2612.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2612.x * cbModelParam._m0[1u].y;
        }
        _1982 = frontier_phi_16_38_ladder_2;
        _1984 = frontier_phi_16_38_ladder_1;
        _1986 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1063, _1064, _1065), _1902);
        _1982 = _1970.x * cbModelParam._m0[1u].y;
        _1984 = _1970.y * cbModelParam._m0[1u].y;
        _1986 = _1970.z * cbModelParam._m0[1u].y;
    }
    float _1990 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _897);
    float _1991 = isnan(_1990) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1990 : min(cbModelParam._m0[25u].w, _1990));
    float _2080;
    float _2082;
    float _2084;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2044 = fma(_1124, cbModelParam._m0[21u].z, fma(_1120, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1116)) + cbModelParam._m0[21u].w;
        float _2048 = fma(_1124, cbModelParam._m0[22u].z, fma(_1120, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1116)) + cbModelParam._m0[22u].w;
        float _2052 = fma(_1124, cbModelParam._m0[23u].z, fma(_1120, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1116)) + cbModelParam._m0[23u].w;
        float _2055 = fma(_1065, cbModelParam._m0[21u].z, fma(_1064, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063));
        float _2058 = fma(_1065, cbModelParam._m0[22u].z, fma(_1064, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063));
        float _2061 = fma(_1065, cbModelParam._m0[23u].z, fma(_1064, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063));
        float _2168;
        if (_2055 > 0.0)
        {
            _2168 = abs((1.0 - _2044) / _2055);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2044 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2168 = frontier_phi_28_24_ladder;
        }
        float _2485;
        if (_2058 > 0.0)
        {
            _2485 = abs((1.0 - _2048) / _2058);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2048 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2485 = frontier_phi_40_35_ladder;
        }
        float _2812;
        if (_2061 > 0.0)
        {
            _2812 = abs((1.0 - _2052) / _2061);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2052 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2812 = frontier_phi_50_47_ladder;
        }
        float _2814 = isnan(_2485) ? _2168 : (isnan(_2168) ? _2485 : min(_2168, _2485));
        float _2815 = isnan(_2812) ? _2814 : (isnan(_2814) ? _2812 : min(_2814, _2812));
        float _2819 = (_2815 * _2055) + _2044;
        float _2820 = (_2815 * _2058) + _2048;
        float _2821 = (_2815 * _2061) + _2052;
        float _2822 = _2815 * 9.9999997473787516355514526367188e-05;
        float _2823 = (-1.0) - _2822;
        float _2825 = _2822 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2821 > _2825) || ((_2821 < _2823) || ((_2820 > _2825) || ((_2820 < _2823) || ((_2819 < _2823) || (_2819 > _2825))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2821, cbModelParam._m0[17u].z, fma(_2820, cbModelParam._m0[17u].y, _2819 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2821, cbModelParam._m0[18u].z, fma(_2820, cbModelParam._m0[18u].y, _2819 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2821, cbModelParam._m0[19u].z, fma(_2820, cbModelParam._m0[19u].y, _2819 * cbModelParam._m0[19u].x))), _1991);
            frontier_phi_25_50_ladder = _2939.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2939.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2939.x * cbModelParam._m0[1u].z;
        }
        _2080 = frontier_phi_25_50_ladder_2;
        _2082 = frontier_phi_25_50_ladder_1;
        _2084 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2064 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1063, _1064, _1065), _1991);
        _2080 = _2064.x * cbModelParam._m0[1u].z;
        _2082 = _2064.y * cbModelParam._m0[1u].z;
        _2084 = _2064.z * cbModelParam._m0[1u].z;
    }
    float _2096 = ((((1.0 - _1084) * ((_1071 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1084 * _1071)) * _1055;
    float _2097 = _2096 * ((cbModelParam._m0[1u].w * (_2080 - _1982)) + _1982);
    float _2098 = _2096 * ((cbModelParam._m0[1u].w * (_2082 - _1984)) + _1984);
    float _2099 = _2096 * ((cbModelParam._m0[1u].w * (_2084 - _1986)) + _1986);
    float _2102 = fma(_2099, cbSceneParam._m0[89u].z, fma(_2098, cbSceneParam._m0[89u].y, _2097 * cbSceneParam._m0[89u].x));
    float _2105 = fma(_2099, cbSceneParam._m0[90u].z, fma(_2098, cbSceneParam._m0[90u].y, _2097 * cbSceneParam._m0[90u].x));
    float _2108 = fma(_2099, cbSceneParam._m0[91u].z, fma(_2098, cbSceneParam._m0[91u].y, _2097 * cbSceneParam._m0[91u].x));
    float _2142 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2146 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2150 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2154 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2155 = _2142 / _2154;
    float _2156 = _2146 / _2154;
    float _2157 = _2150 / _2154;
    float _2304;
    float _2305;
    float _2306;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2184 = ((uint(_2157 > cbSceneParam._m0[59u].y) + uint(_2157 > cbSceneParam._m0[59u].x)) + uint(_2157 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2185 = _2184 + 43u;
        uint _2193 = _2184 + 44u;
        uint _2201 = _2184 + 45u;
        uint _2209 = _2184 + 46u;
        float _2220 = fma(_2154, cbSceneParam._m0[_2185].w, fma(_2150, cbSceneParam._m0[_2185].z, fma(_2146, cbSceneParam._m0[_2185].y, _2142 * cbSceneParam._m0[_2185].x)));
        float _2224 = fma(_2154, cbSceneParam._m0[_2193].w, fma(_2150, cbSceneParam._m0[_2193].z, fma(_2146, cbSceneParam._m0[_2193].y, _2142 * cbSceneParam._m0[_2193].x)));
        float _2232 = fma(_2154, cbSceneParam._m0[_2209].w, fma(_2150, cbSceneParam._m0[_2209].z, fma(_2146, cbSceneParam._m0[_2209].y, _2142 * cbSceneParam._m0[_2209].x)));
        float _2237 = cbSceneParam._m0[33u].z * _2232;
        float _2239 = cbSceneParam._m0[33u].w * _2232;
        float _2242 = fma(_2154, cbSceneParam._m0[_2201].w, fma(_2150, cbSceneParam._m0[_2201].z, fma(_2146, cbSceneParam._m0[_2201].y, _2142 * cbSceneParam._m0[_2201].x))) / _2232;
        float _2290 = (cbSceneParam._m0[33u].x - sqrt(((_2156 * _2156) + (_2155 * _2155)) + (_2157 * _2157))) * cbSceneParam._m0[33u].y;
        float _4694 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2297 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2237 + _2220) / _2232, (_2239 + _2224) / _2232), _2242), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2239 + _2220) / _2232, (_2224 - _2237) / _2232), _2242), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2220 - _2237) / _2232, (_2224 - _2239) / _2232), _2242), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2220 - _2239) / _2232, (_2237 + _2224) / _2232), _2242), 0.0)).x), vec4(0.25)));
        _2304 = 1.0 - (_2297 * cbSceneParam._m0[34u].x);
        _2305 = 1.0 - (_2297 * cbSceneParam._m0[34u].y);
        _2306 = 1.0 - (_2297 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2304 = 1.0;
        _2305 = 1.0;
        _2306 = 1.0;
    }
    float _2370;
    float _2372;
    float _2374;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2358 = fma(_2154, cbSceneParam._m0[63u].w, fma(_2150, cbSceneParam._m0[63u].z, fma(_2146, cbSceneParam._m0[63u].y, _2142 * cbSceneParam._m0[63u].x)));
        float _2359 = fma(_2154, cbSceneParam._m0[60u].w, fma(_2150, cbSceneParam._m0[60u].z, fma(_2146, cbSceneParam._m0[60u].y, _2142 * cbSceneParam._m0[60u].x))) / _2358;
        float _2360 = fma(_2154, cbSceneParam._m0[61u].w, fma(_2150, cbSceneParam._m0[61u].z, fma(_2146, cbSceneParam._m0[61u].y, _2142 * cbSceneParam._m0[61u].x))) / _2358;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2359 >= cbSceneParam._m0[64u].x) && (_2360 >= cbSceneParam._m0[64u].y)) && (_2359 <= cbSceneParam._m0[64u].z)) && (_2360 <= cbSceneParam._m0[64u].w))
        {
            float _2498 = fma(_2154, cbSceneParam._m0[62u].w, fma(_2150, cbSceneParam._m0[62u].z, fma(_2146, cbSceneParam._m0[62u].y, _2142 * cbSceneParam._m0[62u].x))) / _2358;
            float _2502 = isnan(cbSceneParam._m0[41u].w) ? _2498 : (isnan(_2498) ? cbSceneParam._m0[41u].w : max(_2498, cbSceneParam._m0[41u].w));
            float _2545 = (cbSceneParam._m0[33u].x - sqrt(((_2156 * _2156) + (_2155 * _2155)) + (_2157 * _2157))) * cbSceneParam._m0[33u].y;
            float _4710 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
            float _2552 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2359, cbSceneParam._m0[33u].w + _2360), _2502), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2359, _2360 - cbSceneParam._m0[33u].z), _2502), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2359 - cbSceneParam._m0[33u].z, _2360 - cbSceneParam._m0[33u].w), _2502), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2359 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2360), _2502), 0.0)).x), vec4(0.25)));
            float _2556 = 1.0 - (_2552 * cbSceneParam._m0[34u].x);
            float _2557 = 1.0 - (_2552 * cbSceneParam._m0[34u].y);
            float _2558 = 1.0 - (_2552 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2558) ? _2306 : (isnan(_2306) ? _2558 : min(_2306, _2558));
            frontier_phi_37_36_ladder_1 = isnan(_2557) ? _2305 : (isnan(_2305) ? _2557 : min(_2305, _2557));
            frontier_phi_37_36_ladder_2 = isnan(_2556) ? _2304 : (isnan(_2304) ? _2556 : min(_2304, _2556));
        }
        else
        {
            frontier_phi_37_36_ladder = _2306;
            frontier_phi_37_36_ladder_1 = _2305;
            frontier_phi_37_36_ladder_2 = _2304;
        }
        _2370 = frontier_phi_37_36_ladder_2;
        _2372 = frontier_phi_37_36_ladder_1;
        _2374 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2370 = _2304;
        _2372 = _2305;
        _2374 = _2306;
    }
    uvec4 _2379 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2381 = _2379.x * 14u;
    uint _2382 = _2381 + 13u;
    float _2389 = _1055 + (-1.0);
    float _2394 = (cbLight._m0[_2382].x * _2389) + 1.0;
    float _2395 = (cbLight._m0[_2382].y * _2389) + 1.0;
    float _2396 = (cbLight._m0[_2382].z * _2389) + 1.0;
    float _2397 = (cbLight._m0[_2382].w * _2389) + 1.0;
    uint _2398 = _2381 + 5u;
    float _2404 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
    uint _2408 = _2381 + 4u;
    float _2417 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
    uint _2421 = _2381 | 1u;
    float _2432 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_894, _895, _896));
    float _2435 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_894, _895, _896));
    float _4746 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _4757 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2440 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * 0.3183098733425140380859375;
    float _2442 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * 0.3183098733425140380859375;
    float _2449 = ((cbLight._m0[_2398].x * _2404) * _2442) + (((cbLight._m0[_2408].x * _2370) * _2417) * _2440);
    float _2450 = ((_2404 * cbLight._m0[_2398].y) * _2442) + (((cbLight._m0[_2408].y * _2372) * _2417) * _2440);
    float _2451 = ((_2404 * cbLight._m0[_2398].z) * _2442) + (((cbLight._m0[_2408].z * _2374) * _2417) * _2440);
    uvec4 _2455 = floatBitsToUint(cbLight._m0[_2381 + 12u]);
    bool _2457 = _2455.x == 0u;
    float _2559;
    float _2561;
    float _2563;
    if (_2457)
    {
        _2559 = _2449;
        _2561 = _2450;
        _2563 = _2451;
    }
    else
    {
        uint _2567 = _2381 + 6u;
        float _2583 = (dot(vec3(cbLight._m0[_2381 + 2u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2584 = _2583 * _2583;
        float _4768 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2585 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
        float _2586 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
        _2559 = (((cbLight._m0[_2567].x * 0.3183098733425140380859375) * _2585) * _2586) + _2449;
        _2561 = (((cbLight._m0[_2567].y * 0.3183098733425140380859375) * _2585) * _2586) + _2450;
        _2563 = (((cbLight._m0[_2567].z * 0.3183098733425140380859375) * _2585) * _2586) + _2451;
    }
    bool _2566 = _2455.y == 0u;
    float _2621;
    float _2623;
    float _2625;
    if (_2566)
    {
        _2621 = _2559;
        _2623 = _2561;
        _2625 = _2563;
    }
    else
    {
        uint _2783 = _2381 + 7u;
        float _2799 = (dot(vec3(cbLight._m0[_2381 + 3u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2800 = _2799 * _2799;
        float _4784 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2801 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2802 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        _2621 = (((cbLight._m0[_2783].x * 0.3183098733425140380859375) * _2801) * _2802) + _2559;
        _2623 = (((cbLight._m0[_2783].y * 0.3183098733425140380859375) * _2801) * _2802) + _2561;
        _2625 = (((cbLight._m0[_2783].z * 0.3183098733425140380859375) * _2801) * _2802) + _2563;
    }
    uint _2628 = _2381 + 8u;
    float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _897) * 0.949999988079071044921875);
    float _2642 = _2641 * _2641;
    float _2643 = cbLight._m0[_2381].x + _972;
    float _2644 = cbLight._m0[_2381].y + _973;
    float _2645 = cbLight._m0[_2381].z + _974;
    float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
    float _2650 = _2649 * _2643;
    float _2651 = _2649 * _2644;
    float _2652 = _2649 * _2645;
    float _2653 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2381].xyz));
    float _4800 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2656 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
    float _4811 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _2657 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
    float _2658 = dot(vec3(_894, _895, _896), vec3(_2650, _2651, _2652));
    float _4822 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
    float _2662 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2650, _2651, _2652));
    float _4833 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2666 = _2642 * _2642;
    float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
    float _2681 = (exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2682 = 1.0 - _2642;
    float _2693 = (0.5 / (((_2657 * ((_2656 * _2682) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2657 * _2682) + _2642) * _2656))) * _2656;
    float _4844 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2695 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
    uint _2709 = _2381 + 9u;
    float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2421].w)) * _897) * 0.949999988079071044921875);
    float _2721 = _2720 * _2720;
    float _2722 = cbLight._m0[_2421].x + _972;
    float _2723 = cbLight._m0[_2421].y + _973;
    float _2724 = cbLight._m0[_2421].z + _974;
    float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
    float _2729 = _2728 * _2722;
    float _2730 = _2728 * _2723;
    float _2731 = _2728 * _2724;
    float _2732 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2421].xyz));
    float _4855 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2735 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
    float _2736 = dot(vec3(_894, _895, _896), vec3(_2729, _2730, _2731));
    float _4866 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2739 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    float _2740 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_2729, _2730, _2731));
    float _4877 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2744 = _2721 * _2721;
    float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
    float _2757 = (exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2758 = 1.0 - _2721;
    float _2768 = (0.5 / (((_2657 * ((_2735 * _2758) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2657 * _2758) + _2721) * _2735))) * _2735;
    float _4888 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2770 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
    float _2780 = (((_2757 * cbLight._m0[_2709].x) * _2770) * _2404) + ((((cbLight._m0[_2628].x * _2370) * _2681) * _2695) * _2417);
    float _2781 = (((_2757 * cbLight._m0[_2709].y) * _2770) * _2404) + ((((cbLight._m0[_2628].y * _2372) * _2681) * _2695) * _2417);
    float _2782 = (((_2757 * cbLight._m0[_2709].z) * _2770) * _2404) + ((((cbLight._m0[_2628].z * _2374) * _2681) * _2695) * _2417);
    float _2838;
    float _2840;
    float _2842;
    if (_2457)
    {
        _2838 = _2780;
        _2840 = _2781;
        _2842 = _2782;
    }
    else
    {
        uint _2844 = _2381 + 2u;
        uint _2848 = _2381 + 10u;
        float _2862 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2844].w)) * _897) * 0.949999988079071044921875);
        float _2863 = _2862 * _2862;
        float _2864 = cbLight._m0[_2844].x + _972;
        float _2865 = cbLight._m0[_2844].y + _973;
        float _2866 = cbLight._m0[_2844].z + _974;
        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
        float _2871 = _2870 * _2864;
        float _2872 = _2870 * _2865;
        float _2873 = _2870 * _2866;
        float _2874 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2844].xyz));
        float _4899 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
        float _2878 = dot(vec3(_894, _895, _896), vec3(_2871, _2872, _2873));
        float _4910 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2881 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
        float _2882 = dot(vec3(cbLight._m0[_2844].xyz), vec3(_2871, _2872, _2873));
        float _4921 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2886 = _2863 * _2863;
        float _2890 = ((_2881 * _2881) * (_2886 + (-1.0))) + 1.0;
        float _2899 = (exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2900 = 1.0 - _2863;
        float _2910 = (0.5 / (((_2657 * ((_2877 * _2900) + _2863)) + 9.9999999392252902907785028219223e-09) + (((_2657 * _2900) + _2863) * _2877))) * _2877;
        float _4932 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2912 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2886 / ((_2890 * _2890) * 3.141590118408203125));
        float _2913 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
        _2838 = (((_2899 * cbLight._m0[_2848].x) * _2912) * _2913) + _2780;
        _2840 = (((_2899 * cbLight._m0[_2848].y) * _2912) * _2913) + _2781;
        _2842 = (((_2899 * cbLight._m0[_2848].z) * _2912) * _2913) + _2782;
    }
    float _2944;
    float _2946;
    float _2948;
    if (_2566)
    {
        _2944 = _2838;
        _2946 = _2840;
        _2948 = _2842;
    }
    else
    {
        uint _2955 = _2381 + 3u;
        uint _2959 = _2381 + 11u;
        float _2973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2955].w)) * _897) * 0.949999988079071044921875);
        float _2974 = _2973 * _2973;
        float _2975 = cbLight._m0[_2955].x + _972;
        float _2976 = cbLight._m0[_2955].y + _973;
        float _2977 = cbLight._m0[_2955].z + _974;
        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
        float _2982 = _2981 * _2975;
        float _2983 = _2981 * _2976;
        float _2984 = _2981 * _2977;
        float _2985 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2955].xyz));
        float _4948 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2988 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
        float _2989 = dot(vec3(_894, _895, _896), vec3(_2982, _2983, _2984));
        float _4959 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2992 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
        float _2993 = dot(vec3(cbLight._m0[_2955].xyz), vec3(_2982, _2983, _2984));
        float _4970 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2997 = _2974 * _2974;
        float _3001 = ((_2992 * _2992) * (_2997 + (-1.0))) + 1.0;
        float _3010 = (exp2(log2(1.0 - (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3011 = 1.0 - _2974;
        float _3021 = (0.5 / (((_2657 * ((_2988 * _3011) + _2974)) + 9.9999999392252902907785028219223e-09) + (((_2657 * _3011) + _2974) * _2988))) * _2988;
        float _4981 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3023 = (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_2997 / ((_3001 * _3001) * 3.141590118408203125));
        float _3024 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        _2944 = (((_3010 * cbLight._m0[_2959].x) * _3023) * _3024) + _2838;
        _2946 = (((_3010 * cbLight._m0[_2959].y) * _3023) * _3024) + _2840;
        _2948 = (((_3010 * cbLight._m0[_2959].z) * _3023) * _3024) + _2842;
    }
    float _3090;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    if (_2379.y == 0u)
    {
        uvec4 _3045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3046 = _3045.x;
        uint _3057 = uint((float(_3045.y) * floor(float(uint(cbSceneParam._m0[85u].y * _993) / _3046))) + floor(float(uint(cbSceneParam._m0[85u].x * _992) / _3046)));
        float _3067 = (log2(_2157 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3068 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        uint _3071 = uint(isnan(14.0) ? _3068 : (isnan(_3068) ? 14.0 : min(_3068, 14.0)));
        uvec4 _3076 = texelFetch(g_lightClusterGridBuffer, int(((_3071 << 2u) + (_3057 << 6u)) >> 2u));
        uint _3077 = _3076.x;
        uint _3078 = _3045.z;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        if (((((1u << ((_3078 >> 4u) & 15u)) + 4294967295u) & _3077) == 0u) || ((_3078 & 240u) == 0u))
        {
            _3157 = 0.0;
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
            _3165 = 0.0;
            _3167 = 0.0;
        }
        else
        {
            float _3158;
            float _3160;
            float _3162;
            float _3164;
            float _3166;
            float _3168;
            float _3309 = 0.0;
            float _3310 = 0.0;
            float _3311 = 0.0;
            float _3312 = 0.0;
            float _3313 = 0.0;
            float _3314 = 0.0;
            uint _3315 = 0u;
            uint _3324;
            bool _3325;
            for (;;)
            {
                _3324 = texelFetch(g_lightClassification, int((((_3071 << 5u) + (_3057 << 9u)) + (_3315 << 2u)) >> 2u)).x;
                _3325 = _3324 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3325)
                {
                    frontier_phi_71_pred = _3314;
                    frontier_phi_71_pred_1 = _3313;
                    frontier_phi_71_pred_2 = _3312;
                    frontier_phi_71_pred_3 = _3311;
                    frontier_phi_71_pred_4 = _3310;
                    frontier_phi_71_pred_5 = _3309;
                }
                else
                {
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    uint _3460;
                    _3454 = _3309;
                    _3455 = _3310;
                    _3456 = _3311;
                    _3457 = _3312;
                    _3458 = _3313;
                    _3459 = _3314;
                    _3460 = _3324;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    for (;;)
                    {
                        uint _3464 = uint(findLSB(_3460)) + (_3315 << 5u);
                        uint _3461 = (_3460 + 4294967295u) & _3460;
                        uint _3466 = _3464 * 48u;
                        vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3466)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 3u)).x));
                        uint _3486 = (_3464 * 48u) + 4u;
                        vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3486)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 3u)).x));
                        uint _3505 = (_3464 * 48u) + 8u;
                        vec3 _3516 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3505)).x, texelFetch(g_PointLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3505 + 2u)).x));
                        float _3520 = _3480.x - _2155;
                        float _3521 = _3480.y - _2156;
                        float _3522 = _3480.z - _2157;
                        float _3523 = dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522));
                        float _3526 = inversesqrt(_3523);
                        float _3527 = _3526 * _3520;
                        float _3528 = _3526 * _3521;
                        float _3529 = _3526 * _3522;
                        float _3530 = dot(vec3(_1011, _1014, _1017), vec3(_3527, _3528, _3529));
                        float _3535 = 1.0 - (_3523 * _3480.w);
                        float _5007 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3536 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                        float _3537 = sqrt(_3523) * _3499.w;
                        float _3540 = 1.39999997615814208984375 / (_3537 + 1.39999997615814208984375);
                        float _3541 = _3540 * _3540;
                        float _3544 = ((1.0 - _3541) * _3530) + _3541;
                        float _3547 = _3537 * _3537;
                        float _3551 = ((isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0))) * _3536) / ((_3547 * 0.699999988079071044921875) + 1.0);
                        float _3555 = (-0.0) - _2155;
                        float _3556 = (-0.0) - _2156;
                        float _3557 = (-0.0) - _2157;
                        float _3561 = inversesqrt(dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557)));
                        float _3562 = _3561 * _3555;
                        float _3563 = _3561 * _3556;
                        float _3564 = _3561 * _3557;
                        float _3571 = exp2(log2(1.0 / ((_3547 * 3.5) + 5.0)) * 0.25);
                        float _3572 = 1.0 - _1071;
                        float _3579 = sqrt(1.0 - ((1.0 - (_3572 * _3572)) * (1.0 - (_3571 * _3571))));
                        float _3580 = _3579 * _3579;
                        float _3581 = _3580 * _3580;
                        float _3582 = _3562 + _3527;
                        float _3583 = _3563 + _3528;
                        float _3584 = _3564 + _3529;
                        float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                        float _3592 = dot(vec3(_1011, _1014, _1017), vec3(_3562, _3563, _3564));
                        float _5023 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                        float _3595 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                        float _3596 = dot(vec3(_1011, _1014, _1017), vec3(_3588 * _3582, _3588 * _3583, _3588 * _3584));
                        float _5034 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3599 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                        float _3603 = ((_3599 * _3599) * (_3581 + (-1.0))) + 1.0;
                        float _3604 = _3540 * _3580;
                        float _3605 = _3604 * _3604;
                        float _3608 = ((1.0 - _3605) * _3530) + _3605;
                        float _5045 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3609 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                        float _3610 = 1.0 - _3580;
                        float _3620 = (0.5 / (((_3609 * ((_3595 * _3610) + _3580)) + 9.9999999392252902907785028219223e-09) + (((_3609 * _3610) + _3580) * _3595))) * _3609;
                        float _5056 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3631 = (((_3581 * 3.1415927410125732421875) * (isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0)))) / ((_3603 * _3603) * ((_3547 * 2.1991131305694580078125) + 3.141590118408203125))) * _3536;
                        _3384 = (_3551 * _3499.x) + _3457;
                        _3385 = (_3551 * _3499.y) + _3458;
                        _3386 = (_3551 * _3499.z) + _3459;
                        _3381 = (_3631 * _3516.x) + _3454;
                        _3382 = (_3631 * _3516.y) + _3455;
                        _3383 = (_3631 * _3516.z) + _3456;
                        if (_3461 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3454 = _3381;
                            _3455 = _3382;
                            _3456 = _3383;
                            _3457 = _3384;
                            _3458 = _3385;
                            _3459 = _3386;
                            _3460 = _3461;
                        }
                    }
                    frontier_phi_71_pred = _3386;
                    frontier_phi_71_pred_1 = _3385;
                    frontier_phi_71_pred_2 = _3384;
                    frontier_phi_71_pred_3 = _3383;
                    frontier_phi_71_pred_4 = _3382;
                    frontier_phi_71_pred_5 = _3381;
                }
                _3168 = frontier_phi_71_pred;
                _3166 = frontier_phi_71_pred_1;
                _3164 = frontier_phi_71_pred_2;
                _3162 = frontier_phi_71_pred_3;
                _3160 = frontier_phi_71_pred_4;
                _3158 = frontier_phi_71_pred_5;
                uint _3316 = _3315 + 1u;
                if (_3316 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3309 = _3158;
                    _3310 = _3160;
                    _3311 = _3162;
                    _3312 = _3164;
                    _3313 = _3166;
                    _3314 = _3168;
                    _3315 = _3316;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3157 = _3158;
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
            _3165 = _3166;
            _3167 = _3168;
        }
        uvec4 _3171 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3172 = _3171.z;
        uint _3174 = (_3172 >> 8u) & 15u;
        float _3277;
        float _3279;
        float _3281;
        float _3283;
        float _3285;
        float _3287;
        if (((4294967295u << _3174) & _3077) == 0u)
        {
            _3277 = _3157;
            _3279 = _3159;
            _3281 = _3161;
            _3283 = _3163;
            _3285 = _3165;
            _3287 = _3167;
        }
        else
        {
            float _3302 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
            float _3303 = _3302 * _2155;
            float _3304 = _3302 * _2156;
            float _3305 = _3302 * _2157;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3174 < ((_3172 >> 12u) & 15u))
            {
                float _3278;
                float _3280;
                float _3282;
                float _3284;
                float _3286;
                float _3288;
                float _3437 = _3157;
                float _3438 = _3159;
                float _3439 = _3161;
                float _3440 = _3163;
                float _3441 = _3165;
                float _3442 = _3167;
                uint _3443 = _3174;
                uint _3452;
                bool _3453;
                for (;;)
                {
                    _3452 = texelFetch(g_lightClassification, int((((_3071 << 5u) + (_3057 << 9u)) + (_3443 << 2u)) >> 2u)).x;
                    _3453 = _3452 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3453)
                    {
                        frontier_phi_82_pred = _3442;
                        frontier_phi_82_pred_1 = _3441;
                        frontier_phi_82_pred_2 = _3440;
                        frontier_phi_82_pred_3 = _3439;
                        frontier_phi_82_pred_4 = _3438;
                        frontier_phi_82_pred_5 = _3437;
                    }
                    else
                    {
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3938;
                        float _3939;
                        float _3940;
                        float _3941;
                        float _3942;
                        float _3943;
                        float _3658 = _3437;
                        float _3659 = _3438;
                        float _3660 = _3439;
                        float _3661 = _3440;
                        float _3662 = _3441;
                        float _3663 = _3442;
                        uint _3664 = _3452;
                        uint _3665;
                        vec4 _3690;
                        float _3691;
                        vec4 _3706;
                        vec3 _3718;
                        vec4 _3733;
                        vec4 _3748;
                        float _3794;
                        bool _3795;
                        for (;;)
                        {
                            uint _3675 = ((_3443 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3664));
                            _3665 = (_3664 + 4294967295u) & _3664;
                            uint _3677 = _3675 * 40u;
                            _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            _3691 = _3690.w;
                            uint _3693 = (_3675 * 40u) + 4u;
                            _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            uint _3708 = (_3675 * 40u) + 8u;
                            _3718 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x));
                            uint _3720 = (_3675 * 40u) + 16u;
                            _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            uint _3735 = (_3675 * 40u) + 20u;
                            _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            uint _3750 = (_3675 * 40u) + 24u;
                            vec4 _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            uint _3769 = (_3675 * 40u) + 28u;
                            vec4 _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            _3794 = fma(_2157, _3782.z, fma(_2156, _3782.y, _3782.x * _2155)) + _3782.w;
                            _3795 = !((fma(_2157, _3763.z, fma(_2156, _3763.y, _3763.x * _2155)) + _3763.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3795)
                            {
                                float _3822 = _3690.x - _2155;
                                float _3823 = _3690.y - _2156;
                                float _3824 = _3690.z - _2157;
                                float _3825 = dot(vec3(_3822, _3823, _3824), vec3(_3822, _3823, _3824));
                                float _3828 = inversesqrt(_3825);
                                float _3829 = _3828 * _3822;
                                float _3830 = _3828 * _3823;
                                float _3831 = _3828 * _3824;
                                float _3835 = 1.0 - (_3825 / (_3691 * _3691));
                                float _5067 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                                float _3840 = sqrt(_3825) * _3706.w;
                                float _3842 = 1.39999997615814208984375 / (_3840 + 1.39999997615814208984375);
                                float _3843 = _3842 * _3842;
                                float _3846 = ((1.0 - _3843) * dot(vec3(_3829, _3830, _3831), vec3(_1011, _1014, _1017))) + _3843;
                                float _3849 = _3840 * _3840;
                                float _3853 = (fma(_2157, _3733.z, fma(_2156, _3733.y, _3733.x * _2155)) + _3733.w) / _3794;
                                float _3854 = (fma(_2157, _3748.z, fma(_2156, _3748.y, _3748.x * _2155)) + _3748.w) / _3794;
                                float _3858 = 1.0 - dot(vec2(_3853, _3854), vec2(_3853, _3854));
                                float _5083 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3859 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                                float _3860 = _3859 * (((isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0))) * _3836) / ((_3849 * 0.699999988079071044921875) + 1.0));
                                float _3872 = exp2(log2(1.0 / ((_3849 * 3.5) + 5.0)) * 0.25);
                                float _3873 = 1.0 - _1071;
                                float _3880 = sqrt(1.0 - ((1.0 - (_3873 * _3873)) * (1.0 - (_3872 * _3872))));
                                float _3881 = _3880 * _3880;
                                float _3882 = _3881 * _3881;
                                float _3883 = _3829 - _3303;
                                float _3884 = _3830 - _3304;
                                float _3885 = _3831 - _3305;
                                float _3889 = inversesqrt(dot(vec3(_3883, _3884, _3885), vec3(_3883, _3884, _3885)));
                                float _3893 = dot(vec3(_1011, _1014, _1017), vec3((-0.0) - _3303, (-0.0) - _3304, (-0.0) - _3305));
                                float _5094 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3896 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                                float _3897 = dot(vec3(_1011, _1014, _1017), vec3(_3889 * _3883, _3889 * _3884, _3889 * _3885));
                                float _5105 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3900 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
                                float _3904 = ((_3900 * _3900) * (_3882 + (-1.0))) + 1.0;
                                float _3905 = _3842 * _3881;
                                float _3906 = _3905 * _3905;
                                float _3912 = ((1.0 - _3906) * dot(vec3(_1011, _1014, _1017), vec3(_3829, _3830, _3831))) + _3906;
                                float _5116 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3913 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                                float _3914 = 1.0 - _3881;
                                float _3924 = (0.5 / (((_3913 * ((_3896 * _3914) + _3881)) + 9.9999999392252902907785028219223e-09) + (((_3913 * _3914) + _3881) * _3896))) * _3913;
                                float _5127 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3934 = (_3859 * _3836) * (((_3882 * 3.1415927410125732421875) * (isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0)))) / ((_3904 * _3904) * ((_3849 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3860 * _3706.z;
                                frontier_phi_88_pred_1 = _3860 * _3706.y;
                                frontier_phi_88_pred_2 = _3860 * _3706.x;
                                frontier_phi_88_pred_3 = _3934 * _3718.z;
                                frontier_phi_88_pred_4 = _3934 * _3718.y;
                                frontier_phi_88_pred_5 = _3934 * _3718.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3943 = frontier_phi_88_pred;
                            _3942 = frontier_phi_88_pred_1;
                            _3941 = frontier_phi_88_pred_2;
                            _3940 = frontier_phi_88_pred_3;
                            _3939 = frontier_phi_88_pred_4;
                            _3938 = frontier_phi_88_pred_5;
                            _3648 = _3941 + _3661;
                            _3649 = _3942 + _3662;
                            _3650 = _3943 + _3663;
                            _3645 = _3938 + _3658;
                            _3646 = _3939 + _3659;
                            _3647 = _3940 + _3660;
                            if (_3665 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3658 = _3645;
                                _3659 = _3646;
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3649;
                                _3663 = _3650;
                                _3664 = _3665;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3650;
                        frontier_phi_82_pred_1 = _3649;
                        frontier_phi_82_pred_2 = _3648;
                        frontier_phi_82_pred_3 = _3647;
                        frontier_phi_82_pred_4 = _3646;
                        frontier_phi_82_pred_5 = _3645;
                    }
                    _3288 = frontier_phi_82_pred;
                    _3286 = frontier_phi_82_pred_1;
                    _3284 = frontier_phi_82_pred_2;
                    _3282 = frontier_phi_82_pred_3;
                    _3280 = frontier_phi_82_pred_4;
                    _3278 = frontier_phi_82_pred_5;
                    uint _3444 = _3443 + 1u;
                    if (_3444 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3437 = _3278;
                        _3438 = _3280;
                        _3439 = _3282;
                        _3440 = _3284;
                        _3441 = _3286;
                        _3442 = _3288;
                        _3443 = _3444;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3284;
                frontier_phi_63_64_ladder_1 = _3288;
                frontier_phi_63_64_ladder_2 = _3286;
                frontier_phi_63_64_ladder_3 = _3282;
                frontier_phi_63_64_ladder_4 = _3280;
                frontier_phi_63_64_ladder_5 = _3278;
            }
            else
            {
                frontier_phi_63_64_ladder = _3163;
                frontier_phi_63_64_ladder_1 = _3167;
                frontier_phi_63_64_ladder_2 = _3165;
                frontier_phi_63_64_ladder_3 = _3161;
                frontier_phi_63_64_ladder_4 = _3159;
                frontier_phi_63_64_ladder_5 = _3157;
            }
            _3277 = frontier_phi_63_64_ladder_5;
            _3279 = frontier_phi_63_64_ladder_4;
            _3281 = frontier_phi_63_64_ladder_3;
            _3283 = frontier_phi_63_64_ladder;
            _3285 = frontier_phi_63_64_ladder_2;
            _3287 = frontier_phi_63_64_ladder_1;
        }
        float _3292 = isnan(1.0) ? _1055 : (isnan(_1055) ? 1.0 : min(_1055, 1.0));
        _3090 = (_3292 * _3283) + _2621;
        _3092 = (_3292 * _3285) + _2623;
        _3094 = (_3292 * _3287) + _2625;
        _3096 = ((_3277 * 0.039999999105930328369140625) * _3292) + _2944;
        _3098 = ((_3279 * 0.039999999105930328369140625) * _3292) + _2946;
        _3100 = ((_3281 * 0.039999999105930328369140625) * _3292) + _2948;
    }
    else
    {
        _3090 = _2621;
        _3092 = _2623;
        _3094 = _2625;
        _3096 = _2944;
        _3098 = _2946;
        _3100 = _2948;
    }
    float _5143 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _5154 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _5165 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _3117 = ((isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0))) * (_3090 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1055))) + ((_3096 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    float _3118 = ((isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0))) * (_3092 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1055))) + ((_3098 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    float _3119 = ((isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0))) * (_3094 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1055))) + ((_3100 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    uint _3120 = _285 + 6u;
    float _3128 = _992 / cbSceneParam._m0[86u].x;
    float _3129 = _993 / cbSceneParam._m0[86u].y;
    vec4 _3143 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3128, _3129, (log2((isnan(cbSceneParam._m0[77u].w) ? _915 : (isnan(_915) ? cbSceneParam._m0[77u].w : min(_915, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3145 = _3143.x;
    float _3146 = _3143.y;
    float _3147 = _3143.z;
    float _3148 = _3143.w;
    float _3219;
    float _3221;
    float _3223;
    float _3225;
    if (_915 > cbSceneParam._m0[78u].w)
    {
        float _3182 = isnan(_915) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _915 : min(cbSceneParam._m0[80u].w, _915));
        float _3183 = _3182 / _915;
        float _3194 = _3183 * _965;
        float _3195 = _966 * _3183;
        float _3196 = (-0.0) - _3195;
        float _3197 = _3183 * _967;
        float _3199 = (cbSceneParam._m0[77u].w * _3196) / _3182;
        float _3200 = _3199 + cbSceneParam._m0[79u].w;
        float _3201 = cbSceneParam._m0[79u].w - _3195;
        float _3207 = sqrt(((_3194 * _3194) + (_3195 * _3195)) + (_3197 * _3197));
        float _3210 = (1.0 - (cbSceneParam._m0[77u].w / _3182)) * _3207;
        float _3215 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3217 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3394;
        if (abs((_3196 - _3199) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3394 = ((((_3200 > 0.0) ? exp2(_3215 * _3200) : (2.0 - exp2(_3217 * _3200))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3210;
        }
        else
        {
            float _3338 = 1.0 / cbSceneParam._m0[80u].x;
            float _3339 = isnan(_3201) ? _3200 : (isnan(_3200) ? _3201 : max(_3200, _3201));
            float _3340 = isnan(_3201) ? _3200 : (isnan(_3200) ? _3201 : min(_3200, _3201));
            float _3349 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : min(_3339, 0.0));
            float _3350 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : min(_3340, 0.0));
            _3394 = ((abs(_3207 / _3196) * cbSceneParam._m0[80u].y) * ((((_3349 - _3350) * 2.0) - ((exp2(_3215 * (isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0)))) - exp2(_3215 * (isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))))) * _3338)) - ((exp2(_3217 * _3349) - exp2(_3217 * _3350)) * _3338))) + (_3210 * cbSceneParam._m0[80u].z);
        }
        vec4 _3396 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3128, _3129, 1.0), 0.0);
        float _3405 = exp2((_3394 * (-1.44269502162933349609375)) * (1.0 - _3396.w));
        float _3406 = log2(_3405);
        float _3422 = log2(_3148);
        _3219 = (exp2(_3422 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3406 * cbSceneParam._m0[78u].x)) * _3396.x) / cbSceneParam._m0[78u].x)) + _3145;
        _3221 = (exp2(_3422 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3406 * cbSceneParam._m0[78u].y)) * _3396.y) / cbSceneParam._m0[78u].y)) + _3146;
        _3223 = (exp2(_3422 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3406 * cbSceneParam._m0[78u].z)) * _3396.z) / cbSceneParam._m0[78u].z)) + _3147;
        _3225 = _3405 * _3148;
    }
    else
    {
        _3219 = _3145;
        _3221 = _3146;
        _3223 = _3147;
        _3225 = _3148;
    }
    bool _3432;
    vec4 _3235;
    vec4 _3257;
    float _3259;
    float _3263;
    float _3264;
    float _3265;
    float _3266;
    bool _3276;
    for (;;)
    {
        _3235 = cbMatDynParam._m0[0u];
        float _3237 = roundEven(_3235.y);
        bool _3238 = _3237 == 3.0;
        float _3239 = log2(_3225);
        float _3246 = exp2(_3239 * cbSceneParam._m0[78u].x) * _3117;
        float _3247 = exp2(_3239 * cbSceneParam._m0[78u].y) * _3118;
        float _3248 = exp2(_3239 * cbSceneParam._m0[78u].z) * _3119;
        float _3255 = _981 + (-0.5);
        _3257 = cbMtdParam._m0[1u];
        _3259 = _3257.y * _3255;
        float _3262 = (_3237 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3263 = _3262 * (_3238 ? _3246 : (_3246 + (cbSceneParam._m0[72u].w * _3219)));
        _3264 = _3262 * (_3238 ? _3247 : (_3247 + (cbSceneParam._m0[72u].w * _3221)));
        _3265 = _3262 * (_3238 ? _3248 : (_3248 + (cbSceneParam._m0[72u].w * _3223)));
        _3266 = _3255 * 0.999000012874603271484375;
        _3276 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3276)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3266) < 0.5)
            {
                _3432 = true;
                break;
            }
        }
        uint _3373 = _1030 + uint(_3235.w);
        if ((cbInstanceData._m0[_3373].w < 1.0) && ((cbInstanceData._m0[_3373].w + _3266) < 0.5))
        {
            _3432 = true;
            break;
        }
        if ((_3259 + 1.0) < _3257.x)
        {
            _3432 = true;
            break;
        }
        _3432 = false;
        break;
    }
    float _3636;
    if (_3432)
    {
        discard_state = true;
        _3636 = 0.0;
    }
    else
    {
        _3636 = cbInstanceData._m0[_3120].w;
    }
    SV_Target.x = _3263;
    SV_Target.y = _3264;
    SV_Target.z = _3265;
    SV_Target.w = _3636;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3120].w;
    discard_exit();
}


