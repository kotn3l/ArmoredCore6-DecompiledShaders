#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1478;
float _4118;
float _4119;
float _4120;
float _4121;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4130 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4141 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4152 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[24u].z) + _434) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4163 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _459 = (_452 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _460 = (_452 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _461 = (_452 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4174 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _299) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _300) + cbTextureTilingScale._m0[24u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _581 = dot(vec4(_571, _569.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _593 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _382.z) * 2.0) - ((((_571 - _581) * cbMtdParam._m0[24u].z) + _581) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4185 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _601 = (_594 * ((_552.x * cbMtdParam._m0[14u].x) - _532)) + _532;
    float _602 = (_594 * ((_552.y * cbMtdParam._m0[14u].y) - _533)) + _533;
    float _603 = (_594 * ((_552.z * cbMtdParam._m0[14u].z) - _534)) + _534;
    float _607 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _601;
    float _610 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _602;
    float _613 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _603;
    float _620 = ((_601 - _607) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) + _607;
    float _621 = ((_602 - _610) * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) + _610;
    float _622 = ((_603 - _613) * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) + _613;
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _683 = _681.x;
    float _684 = _681.y;
    float _685 = _681.z;
    float _692 = ((_664.x - _683) * _452) + _683;
    float _693 = ((_664.y - _684) * _452) + _684;
    float _694 = ((_664.z - _685) * _452) + _685;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _717 = ((_706.x - _692) * _525) + _692;
    float _718 = ((_706.y - _693) * _525) + _693;
    float _719 = ((_706.z - _694) * _525) + _694;
    vec4 _731 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _299) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _300) + cbTextureTilingScale._m0[23u].w));
    float _744 = ((_731.z - _719) * _594) + _719;
    float _747 = ((((_731.x - _717) * _594) + _717) * 2.0) + (-1.0);
    float _748 = ((((_731.y - _718) * _594) + _718) * 2.0) + (-1.0);
    float _749 = dot(vec2(_747, _748), vec2(_747, _748));
    float _4196 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _754 = sqrt(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))));
    vec4 _772 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _784 = (_747 + ((((_639.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_772.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _785 = (_748 + ((((_639.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_772.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _788 = fma(_754, _247, fma(_785, _254, _784 * _240));
    float _791 = fma(_754, _248, fma(_785, _255, _784 * _241));
    float _794 = fma(_754, _249, fma(_785, _256, _784 * _242));
    float _798 = inversesqrt(dot(vec3(_788, _791, _794), vec3(_788, _791, _794)));
    vec4 _825 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _827 = _825.x;
    float _828 = 1.0 - _827;
    float _834 = (cbMtdParam._m0[19u].x + dot(vec4(_798 * _788, _798 * _791, _798 * _794, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_827 - _828) * cbMtdParam._m0[24u].w) + _828) * cbMtdParam._m0[21u].z);
    float _4207 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _835 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _842 = (_835 * (cbMtdParam._m0[17u].x - _620)) + _620;
    float _843 = (_835 * (cbMtdParam._m0[17u].y - _621)) + _621;
    float _844 = (_835 * (cbMtdParam._m0[17u].z - _622)) + _622;
    float _849 = (((_639.z - _744) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _744;
    float _853 = ((_772.z - _849) * cbMtdParam._m0[19u].w) + _849;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _873 = (_866.x * 2.0) + (-1.0);
    float _874 = (_866.y * 2.0) + (-1.0);
    float _875 = dot(vec2(_873, _874), vec2(_873, _874));
    float _4218 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _883 = ((_866.z - _853) * _835) + _853;
    float _893 = ((sqrt(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) - _754) * _835) + _754;
    float _896 = (((_873 - _784) * _835) + _784) + (cbMtdParam._m0[21u].x * _784);
    float _897 = (((_874 - _785) * _835) + _785) + (cbMtdParam._m0[21u].x * _785);
    float _901 = cbMtdParam._m0[22u].x + _772.w;
    float _904 = fma(_893, _247, fma(_897, _254, _896 * _240));
    float _907 = fma(_893, _248, fma(_897, _255, _896 * _241));
    float _910 = fma(_893, _249, fma(_897, _256, _896 * _242));
    float _914 = inversesqrt(dot(vec3(_904, _907, _910), vec3(_904, _907, _910)));
    float _915 = _914 * _904;
    float _916 = _914 * _907;
    float _917 = _914 * _910;
    float _4229 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _918 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4251 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4262 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4273 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _936 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _988 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _978);
    float _989 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _978);
    float _990 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _978);
    float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
    float _995 = _988 * _994;
    float _996 = _989 * _994;
    float _997 = _990 * _994;
    vec4 _1002 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1004 = _1002.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1158 = sqrt(((_988 * _988) + (_989 * _989)) + (_990 * _990));
        float _1164 = (cbMatDynParam._m0[5u].x * _1158) + cbMatDynParam._m0[5u].y;
        float _4284 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1169 = (cbMatDynParam._m0[5u].z * _1158) + cbMatDynParam._m0[5u].w;
        float _4295 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) - _1165)) + _1165) < ((_1004 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1015 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1016 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1034 = fma(_917, cbSceneParam._m0[5u].z, fma(_916, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _915));
    float _1037 = fma(_917, cbSceneParam._m0[6u].z, fma(_916, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _915));
    float _1040 = fma(_917, cbSceneParam._m0[7u].z, fma(_916, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _915));
    uint _1053 = _280 + 9u;
    uint _1054 = _1053 + uint(cbMatDynParam._m0[0u].w);
    float _1060 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * cbInstanceData._m0[_1054].x;
    float _1061 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * cbInstanceData._m0[_1054].y;
    float _1062 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * cbInstanceData._m0[_1054].z;
    float _4306 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _4328 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    vec4 _1074 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1015, cbSceneParam._m0[86u].y * _1016));
    float _1078 = ((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * TEXCOORD_5.w) * _1074.x;
    float _1079 = dot(vec3(_915, _916, _917), vec3(_995, _996, _997));
    float _1082 = _1079 * 2.0;
    float _1086 = (_1082 * _915) - _995;
    float _1087 = (_1082 * _916) - _996;
    float _1088 = (_1082 * _917) - _997;
    float _1092 = abs(dot(vec3(_995, _996, _997), vec3(_915, _916, _917)));
    float _4339 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1094 = sqrt(_918);
    float _1107 = exp2((_1094 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1094 * 3.0));
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1477;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1202 = fma(_1147, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139));
        float _1206 = fma(_1147, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139));
        float _1210 = fma(_1147, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139));
        float _1235 = _1139 + _915;
        float _1236 = _1143 + _916;
        float _1237 = _1147 + _917;
        float _1247 = fma(_1237, cbModelParam._m0[26u].z, fma(_1236, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1235)) - _1202;
        float _1248 = fma(_1237, cbModelParam._m0[27u].z, fma(_1236, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1235)) - _1206;
        float _1249 = fma(_1237, cbModelParam._m0[28u].z, fma(_1236, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1235)) - _1210;
        float _1253 = inversesqrt(dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249)));
        float _1266 = ((_1253 * _1247) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1202 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1253 * _1248) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1206 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1253 * _1249) / cbModelParam._m0[34u].z) + ((((((_1210 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        float _1305 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1271.x + (-0.5));
        float _1307 = _1305 * (_1271.y + (-0.5));
        float _1308 = _1305 * (_1271.z + (-0.5));
        float _1315 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1278.x + (-0.5));
        float _1317 = _1315 * (_1278.y + (-0.5));
        float _1318 = _1315 * (_1278.z + (-0.5));
        float _1325 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1285.x + (-0.5));
        float _1327 = _1325 * (_1285.y + (-0.5));
        float _1328 = _1325 * (_1285.z + (-0.5));
        float _1335 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1292.x + (-0.5));
        float _1337 = _1335 * (_1292.y + (-0.5));
        float _1338 = _1335 * (_1292.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1359 = (dot(vec3(_915, _916, _917), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1369 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4387 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1371 + 1.0))) + _1376) * _1339;
        float _1386 = _1307 * 0.5;
        float _1387 = _1317 * 0.5;
        float _1388 = _1327 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_915, _916, _917), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1413 + 1.0))) + _1418) * _1340;
        float _1428 = _1308 * 0.5;
        float _1429 = _1318 * 0.5;
        float _1430 = _1328 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_915, _916, _917), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4453 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1455 + 1.0))) + _1460) * _1341;
        _1477 = _1308;
        _1479 = _1307;
        _1480 = _1306;
        _1481 = _1318;
        _1482 = _1317;
        _1483 = _1316;
        _1484 = _1328;
        _1485 = _1327;
        _1486 = _1326;
        _1487 = _1341;
        _1488 = _1340;
        _1489 = _1339;
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1478;
        _1479 = _1478;
        _1480 = _1478;
        _1481 = _1478;
        _1482 = _1478;
        _1483 = _1478;
        _1484 = _1478;
        _1485 = _1478;
        _1486 = _1478;
        _1487 = _1478;
        _1488 = _1478;
        _1489 = _1478;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1518 = fma(_1147, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139));
        float _1522 = fma(_1147, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139));
        float _1526 = fma(_1147, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139));
        float _1549 = _1139 + _915;
        float _1550 = _1143 + _916;
        float _1551 = _1147 + _917;
        float _1561 = fma(_1551, cbModelParam._m0[30u].z, fma(_1550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1549)) - _1518;
        float _1562 = fma(_1551, cbModelParam._m0[31u].z, fma(_1550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1549)) - _1522;
        float _1563 = fma(_1551, cbModelParam._m0[32u].z, fma(_1550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1549)) - _1526;
        float _1567 = inversesqrt(dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563)));
        float _1580 = ((_1567 * _1561) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1518 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1567 * _1562) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1522 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1567 * _1563) / cbModelParam._m0[35u].z) + ((((((_1526 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        float _1617 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1584.x + (-0.5));
        float _1619 = _1617 * (_1584.y + (-0.5));
        float _1620 = _1617 * (_1584.z + (-0.5));
        float _1627 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1591.x + (-0.5));
        float _1629 = _1627 * (_1591.y + (-0.5));
        float _1630 = _1627 * (_1591.z + (-0.5));
        float _1637 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1598.x + (-0.5));
        float _1639 = _1637 * (_1598.y + (-0.5));
        float _1640 = _1637 * (_1598.z + (-0.5));
        float _1647 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1605.x + (-0.5));
        float _1649 = _1647 * (_1605.y + (-0.5));
        float _1650 = _1647 * (_1605.z + (-0.5));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = _1618 * 0.5;
        float _1655 = _1628 * 0.5;
        float _1656 = _1638 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_915, _916, _917), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4516 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1681 + 1.0))) + _1686) * _1651;
        float _1696 = _1619 * 0.5;
        float _1697 = _1629 * 0.5;
        float _1698 = _1639 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_915, _916, _917), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4549 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1723 + 1.0))) + _1728) * _1652;
        float _1738 = _1620 * 0.5;
        float _1739 = _1630 * 0.5;
        float _1740 = _1640 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_915, _916, _917), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4582 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1765 + 1.0))) + _1770) * _1653;
        _1787 = _1620;
        _1788 = _1619;
        _1789 = _1618;
        _1790 = _1630;
        _1791 = _1629;
        _1792 = _1628;
        _1793 = _1640;
        _1794 = _1639;
        _1795 = _1638;
        _1796 = _1653;
        _1797 = _1652;
        _1798 = _1651;
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
    }
    else
    {
        _1787 = _1478;
        _1788 = _1478;
        _1789 = _1478;
        _1790 = _1478;
        _1791 = _1478;
        _1792 = _1478;
        _1793 = _1478;
        _1794 = _1478;
        _1795 = _1478;
        _1796 = _1478;
        _1797 = _1478;
        _1798 = _1478;
        _1799 = 0.0;
        _1800 = 0.0;
        _1801 = 0.0;
    }
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1490)) + _1490;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1491)) + _1491;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1492)) + _1492;
    float _1834 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1811));
    float _1855 = _1086 * 0.5;
    float _1856 = _1087 * 0.5;
    float _1857 = _1088 * 0.5;
    float _1858 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1861 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1864 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1898;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1871 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1477, _1481, _1484, _1487));
        float _1875 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1879 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1886 = dot(vec4(cbModelParam._m0[39u]), vec4(_1855, _1856, _1857, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1909;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1900 = dot(vec4(cbModelParam._m0[40u]), vec4(_1855, _1856, _1857, 1.0));
        _1909 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1909 = 1.0;
    }
    float _1913 = (_1909 * cbModelParam._m0[1u].x) + (_1898 * (1.0 - cbModelParam._m0[1u].x));
    float _1923 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1924 = isnan(_1923) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1923 : min(cbModelParam._m0[25u].z, _1923));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1971 = fma(_1147, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1139)) + cbModelParam._m0[13u].w;
        float _1975 = fma(_1147, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1139)) + cbModelParam._m0[14u].w;
        float _1979 = fma(_1147, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1139)) + cbModelParam._m0[15u].w;
        float _1982 = fma(_1088, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1086));
        float _1985 = fma(_1088, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1086));
        float _1988 = fma(_1088, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1086));
        float _2016;
        if (_1982 > 0.0)
        {
            _2016 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2016 = frontier_phi_17_15_ladder;
        }
        float _2186;
        if (_1985 > 0.0)
        {
            _2186 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2186 = frontier_phi_26_22_ladder;
        }
        float _2481;
        if (_1988 > 0.0)
        {
            _2481 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2481 = frontier_phi_38_33_ladder;
        }
        float _2483 = isnan(_2186) ? _2016 : (isnan(_2016) ? _2186 : min(_2016, _2186));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _1982) + _1971;
        float _2489 = (_2484 * _1985) + _1975;
        float _2490 = (_2484 * _1988) + _1979;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2491;
        float _2495 = _2491 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 > _2495) || ((_2489 < _2493) || ((_2488 < _2493) || (_2488 > _2495))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2490, cbModelParam._m0[9u].z, fma(_2489, cbModelParam._m0[9u].y, _2488 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2490, cbModelParam._m0[10u].z, fma(_2489, cbModelParam._m0[10u].y, _2488 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2490, cbModelParam._m0[11u].z, fma(_2489, cbModelParam._m0[11u].y, _2488 * cbModelParam._m0[11u].x))), _1924);
            frontier_phi_16_38_ladder = _2635.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2635.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2635.x * cbModelParam._m0[1u].y;
        }
        _2004 = frontier_phi_16_38_ladder_2;
        _2006 = frontier_phi_16_38_ladder_1;
        _2008 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1086, _1087, _1088), _1924);
        _2004 = _1992.x * cbModelParam._m0[1u].y;
        _2006 = _1992.y * cbModelParam._m0[1u].y;
        _2008 = _1992.z * cbModelParam._m0[1u].y;
    }
    float _2012 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2012 : min(cbModelParam._m0[25u].w, _2012));
    float _2103;
    float _2105;
    float _2107;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2067 = fma(_1147, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1139)) + cbModelParam._m0[21u].w;
        float _2071 = fma(_1147, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1139)) + cbModelParam._m0[22u].w;
        float _2075 = fma(_1147, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1139)) + cbModelParam._m0[23u].w;
        float _2078 = fma(_1088, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1086));
        float _2081 = fma(_1088, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1086));
        float _2084 = fma(_1088, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1086));
        float _2191;
        if (_2078 > 0.0)
        {
            _2191 = abs((1.0 - _2067) / _2078);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2067 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2191 = frontier_phi_28_24_ladder;
        }
        float _2508;
        if (_2081 > 0.0)
        {
            _2508 = abs((1.0 - _2071) / _2081);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2071 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2508 = frontier_phi_40_35_ladder;
        }
        float _2835;
        if (_2084 > 0.0)
        {
            _2835 = abs((1.0 - _2075) / _2084);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2075 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2835 = frontier_phi_50_47_ladder;
        }
        float _2837 = isnan(_2508) ? _2191 : (isnan(_2191) ? _2508 : min(_2191, _2508));
        float _2838 = isnan(_2835) ? _2837 : (isnan(_2837) ? _2835 : min(_2837, _2835));
        float _2842 = (_2838 * _2078) + _2067;
        float _2843 = (_2838 * _2081) + _2071;
        float _2844 = (_2838 * _2084) + _2075;
        float _2845 = _2838 * 9.9999997473787516355514526367188e-05;
        float _2846 = (-1.0) - _2845;
        float _2848 = _2845 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2844 > _2848) || ((_2844 < _2846) || ((_2843 > _2848) || ((_2843 < _2846) || ((_2842 < _2846) || (_2842 > _2848))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2844, cbModelParam._m0[17u].z, fma(_2843, cbModelParam._m0[17u].y, _2842 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2844, cbModelParam._m0[18u].z, fma(_2843, cbModelParam._m0[18u].y, _2842 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2844, cbModelParam._m0[19u].z, fma(_2843, cbModelParam._m0[19u].y, _2842 * cbModelParam._m0[19u].x))), _2013);
            frontier_phi_25_50_ladder = _2962.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2962.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2962.x * cbModelParam._m0[1u].z;
        }
        _2103 = frontier_phi_25_50_ladder_2;
        _2105 = frontier_phi_25_50_ladder_1;
        _2107 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2087 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1086, _1087, _1088), _2013);
        _2103 = _2087.x * cbModelParam._m0[1u].z;
        _2105 = _2087.y * cbModelParam._m0[1u].z;
        _2107 = _2087.z * cbModelParam._m0[1u].z;
    }
    float _2119 = ((((1.0 - _1107) * ((_1094 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1107 * _1094)) * _1078;
    float _2120 = _2119 * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2121 = _2119 * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2122 = _2119 * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2125 = fma(_2122, cbSceneParam._m0[89u].z, fma(_2121, cbSceneParam._m0[89u].y, _2120 * cbSceneParam._m0[89u].x));
    float _2128 = fma(_2122, cbSceneParam._m0[90u].z, fma(_2121, cbSceneParam._m0[90u].y, _2120 * cbSceneParam._m0[90u].x));
    float _2131 = fma(_2122, cbSceneParam._m0[91u].z, fma(_2121, cbSceneParam._m0[91u].y, _2120 * cbSceneParam._m0[91u].x));
    float _2165 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2169 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2173 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2177 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2178 = _2165 / _2177;
    float _2179 = _2169 / _2177;
    float _2180 = _2173 / _2177;
    float _2327;
    float _2328;
    float _2329;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2207 = ((uint(_2180 > cbSceneParam._m0[59u].y) + uint(_2180 > cbSceneParam._m0[59u].x)) + uint(_2180 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2208 = _2207 + 43u;
        uint _2216 = _2207 + 44u;
        uint _2224 = _2207 + 45u;
        uint _2232 = _2207 + 46u;
        float _2243 = fma(_2177, cbSceneParam._m0[_2208].w, fma(_2173, cbSceneParam._m0[_2208].z, fma(_2169, cbSceneParam._m0[_2208].y, _2165 * cbSceneParam._m0[_2208].x)));
        float _2247 = fma(_2177, cbSceneParam._m0[_2216].w, fma(_2173, cbSceneParam._m0[_2216].z, fma(_2169, cbSceneParam._m0[_2216].y, _2165 * cbSceneParam._m0[_2216].x)));
        float _2255 = fma(_2177, cbSceneParam._m0[_2232].w, fma(_2173, cbSceneParam._m0[_2232].z, fma(_2169, cbSceneParam._m0[_2232].y, _2165 * cbSceneParam._m0[_2232].x)));
        float _2260 = cbSceneParam._m0[33u].z * _2255;
        float _2262 = cbSceneParam._m0[33u].w * _2255;
        float _2265 = fma(_2177, cbSceneParam._m0[_2224].w, fma(_2173, cbSceneParam._m0[_2224].z, fma(_2169, cbSceneParam._m0[_2224].y, _2165 * cbSceneParam._m0[_2224].x))) / _2255;
        float _2313 = (cbSceneParam._m0[33u].x - sqrt(((_2179 * _2179) + (_2178 * _2178)) + (_2180 * _2180))) * cbSceneParam._m0[33u].y;
        float _4708 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2320 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2260 + _2243) / _2255, (_2262 + _2247) / _2255), _2265), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2262 + _2243) / _2255, (_2247 - _2260) / _2255), _2265), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2243 - _2260) / _2255, (_2247 - _2262) / _2255), _2265), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2243 - _2262) / _2255, (_2260 + _2247) / _2255), _2265), 0.0)).x), vec4(0.25)));
        _2327 = 1.0 - (_2320 * cbSceneParam._m0[34u].x);
        _2328 = 1.0 - (_2320 * cbSceneParam._m0[34u].y);
        _2329 = 1.0 - (_2320 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2327 = 1.0;
        _2328 = 1.0;
        _2329 = 1.0;
    }
    float _2393;
    float _2395;
    float _2397;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2381 = fma(_2177, cbSceneParam._m0[63u].w, fma(_2173, cbSceneParam._m0[63u].z, fma(_2169, cbSceneParam._m0[63u].y, _2165 * cbSceneParam._m0[63u].x)));
        float _2382 = fma(_2177, cbSceneParam._m0[60u].w, fma(_2173, cbSceneParam._m0[60u].z, fma(_2169, cbSceneParam._m0[60u].y, _2165 * cbSceneParam._m0[60u].x))) / _2381;
        float _2383 = fma(_2177, cbSceneParam._m0[61u].w, fma(_2173, cbSceneParam._m0[61u].z, fma(_2169, cbSceneParam._m0[61u].y, _2165 * cbSceneParam._m0[61u].x))) / _2381;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2382 >= cbSceneParam._m0[64u].x) && (_2383 >= cbSceneParam._m0[64u].y)) && (_2382 <= cbSceneParam._m0[64u].z)) && (_2383 <= cbSceneParam._m0[64u].w))
        {
            float _2521 = fma(_2177, cbSceneParam._m0[62u].w, fma(_2173, cbSceneParam._m0[62u].z, fma(_2169, cbSceneParam._m0[62u].y, _2165 * cbSceneParam._m0[62u].x))) / _2381;
            float _2525 = isnan(cbSceneParam._m0[41u].w) ? _2521 : (isnan(_2521) ? cbSceneParam._m0[41u].w : max(_2521, cbSceneParam._m0[41u].w));
            float _2568 = (cbSceneParam._m0[33u].x - sqrt(((_2179 * _2179) + (_2178 * _2178)) + (_2180 * _2180))) * cbSceneParam._m0[33u].y;
            float _4724 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
            float _2575 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2382, cbSceneParam._m0[33u].w + _2383), _2525), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2382, _2383 - cbSceneParam._m0[33u].z), _2525), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2382 - cbSceneParam._m0[33u].z, _2383 - cbSceneParam._m0[33u].w), _2525), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2382 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2383), _2525), 0.0)).x), vec4(0.25)));
            float _2579 = 1.0 - (_2575 * cbSceneParam._m0[34u].x);
            float _2580 = 1.0 - (_2575 * cbSceneParam._m0[34u].y);
            float _2581 = 1.0 - (_2575 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2581) ? _2329 : (isnan(_2329) ? _2581 : min(_2329, _2581));
            frontier_phi_37_36_ladder_1 = isnan(_2580) ? _2328 : (isnan(_2328) ? _2580 : min(_2328, _2580));
            frontier_phi_37_36_ladder_2 = isnan(_2579) ? _2327 : (isnan(_2327) ? _2579 : min(_2327, _2579));
        }
        else
        {
            frontier_phi_37_36_ladder = _2329;
            frontier_phi_37_36_ladder_1 = _2328;
            frontier_phi_37_36_ladder_2 = _2327;
        }
        _2393 = frontier_phi_37_36_ladder_2;
        _2395 = frontier_phi_37_36_ladder_1;
        _2397 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2393 = _2327;
        _2395 = _2328;
        _2397 = _2329;
    }
    uvec4 _2402 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2404 = _2402.x * 14u;
    uint _2405 = _2404 + 13u;
    float _2412 = _1078 + (-1.0);
    float _2417 = (cbLight._m0[_2405].x * _2412) + 1.0;
    float _2418 = (cbLight._m0[_2405].y * _2412) + 1.0;
    float _2419 = (cbLight._m0[_2405].z * _2412) + 1.0;
    float _2420 = (cbLight._m0[_2405].w * _2412) + 1.0;
    uint _2421 = _2404 + 5u;
    float _2427 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
    uint _2431 = _2404 + 4u;
    float _2440 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
    uint _2444 = _2404 | 1u;
    float _2455 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_915, _916, _917));
    float _2458 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_915, _916, _917));
    float _4760 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _4771 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2463 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * 0.3183098733425140380859375;
    float _2465 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * 0.3183098733425140380859375;
    float _2472 = ((cbLight._m0[_2421].x * _2427) * _2465) + (((cbLight._m0[_2431].x * _2393) * _2440) * _2463);
    float _2473 = ((_2427 * cbLight._m0[_2421].y) * _2465) + (((cbLight._m0[_2431].y * _2395) * _2440) * _2463);
    float _2474 = ((_2427 * cbLight._m0[_2421].z) * _2465) + (((cbLight._m0[_2431].z * _2397) * _2440) * _2463);
    uvec4 _2478 = floatBitsToUint(cbLight._m0[_2404 + 12u]);
    bool _2480 = _2478.x == 0u;
    float _2582;
    float _2584;
    float _2586;
    if (_2480)
    {
        _2582 = _2472;
        _2584 = _2473;
        _2586 = _2474;
    }
    else
    {
        uint _2590 = _2404 + 6u;
        float _2606 = (dot(vec3(cbLight._m0[_2404 + 2u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2607 = _2606 * _2606;
        float _4782 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2608 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2609 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
        _2582 = (((cbLight._m0[_2590].x * 0.3183098733425140380859375) * _2608) * _2609) + _2472;
        _2584 = (((cbLight._m0[_2590].y * 0.3183098733425140380859375) * _2608) * _2609) + _2473;
        _2586 = (((cbLight._m0[_2590].z * 0.3183098733425140380859375) * _2608) * _2609) + _2474;
    }
    bool _2589 = _2478.y == 0u;
    float _2644;
    float _2646;
    float _2648;
    if (_2589)
    {
        _2644 = _2582;
        _2646 = _2584;
        _2648 = _2586;
    }
    else
    {
        uint _2806 = _2404 + 7u;
        float _2822 = (dot(vec3(cbLight._m0[_2404 + 3u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2823 = _2822 * _2822;
        float _4798 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2824 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2825 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        _2644 = (((cbLight._m0[_2806].x * 0.3183098733425140380859375) * _2824) * _2825) + _2582;
        _2646 = (((cbLight._m0[_2806].y * 0.3183098733425140380859375) * _2824) * _2825) + _2584;
        _2648 = (((cbLight._m0[_2806].z * 0.3183098733425140380859375) * _2824) * _2825) + _2586;
    }
    uint _2651 = _2404 + 8u;
    float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _918) * 0.949999988079071044921875);
    float _2665 = _2664 * _2664;
    float _2666 = cbLight._m0[_2404].x + _995;
    float _2667 = cbLight._m0[_2404].y + _996;
    float _2668 = cbLight._m0[_2404].z + _997;
    float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
    float _2673 = _2672 * _2666;
    float _2674 = _2672 * _2667;
    float _2675 = _2672 * _2668;
    float _2676 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2404].xyz));
    float _4814 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2679 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
    float _4825 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _2680 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
    float _2681 = dot(vec3(_915, _916, _917), vec3(_2673, _2674, _2675));
    float _4836 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _2685 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2673, _2674, _2675));
    float _4847 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2689 = _2665 * _2665;
    float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
    float _2704 = (exp2(log2(1.0 - (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2705 = 1.0 - _2665;
    float _2716 = (0.5 / (((_2680 * ((_2679 * _2705) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2680 * _2705) + _2665) * _2679))) * _2679;
    float _4858 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2718 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
    uint _2732 = _2404 + 9u;
    float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _918) * 0.949999988079071044921875);
    float _2744 = _2743 * _2743;
    float _2745 = cbLight._m0[_2444].x + _995;
    float _2746 = cbLight._m0[_2444].y + _996;
    float _2747 = cbLight._m0[_2444].z + _997;
    float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
    float _2752 = _2751 * _2745;
    float _2753 = _2751 * _2746;
    float _2754 = _2751 * _2747;
    float _2755 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2444].xyz));
    float _4869 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2758 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
    float _2759 = dot(vec3(_915, _916, _917), vec3(_2752, _2753, _2754));
    float _4880 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2762 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
    float _2763 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2752, _2753, _2754));
    float _4891 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2767 = _2744 * _2744;
    float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
    float _2780 = (exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2781 = 1.0 - _2744;
    float _2791 = (0.5 / (((_2680 * ((_2758 * _2781) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2680 * _2781) + _2744) * _2758))) * _2758;
    float _4902 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2793 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
    float _2803 = (((_2780 * cbLight._m0[_2732].x) * _2793) * _2427) + ((((cbLight._m0[_2651].x * _2393) * _2704) * _2718) * _2440);
    float _2804 = (((_2780 * cbLight._m0[_2732].y) * _2793) * _2427) + ((((cbLight._m0[_2651].y * _2395) * _2704) * _2718) * _2440);
    float _2805 = (((_2780 * cbLight._m0[_2732].z) * _2793) * _2427) + ((((cbLight._m0[_2651].z * _2397) * _2704) * _2718) * _2440);
    float _2861;
    float _2863;
    float _2865;
    if (_2480)
    {
        _2861 = _2803;
        _2863 = _2804;
        _2865 = _2805;
    }
    else
    {
        uint _2867 = _2404 + 2u;
        uint _2871 = _2404 + 10u;
        float _2885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2867].w)) * _918) * 0.949999988079071044921875);
        float _2886 = _2885 * _2885;
        float _2887 = cbLight._m0[_2867].x + _995;
        float _2888 = cbLight._m0[_2867].y + _996;
        float _2889 = cbLight._m0[_2867].z + _997;
        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
        float _2894 = _2893 * _2887;
        float _2895 = _2893 * _2888;
        float _2896 = _2893 * _2889;
        float _2897 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2867].xyz));
        float _4913 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _2901 = dot(vec3(_915, _916, _917), vec3(_2894, _2895, _2896));
        float _4924 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
        float _2905 = dot(vec3(cbLight._m0[_2867].xyz), vec3(_2894, _2895, _2896));
        float _4935 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2909 = _2886 * _2886;
        float _2913 = ((_2904 * _2904) * (_2909 + (-1.0))) + 1.0;
        float _2922 = (exp2(log2(1.0 - (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2923 = 1.0 - _2886;
        float _2933 = (0.5 / (((_2680 * ((_2900 * _2923) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2680 * _2923) + _2886) * _2900))) * _2900;
        float _4946 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2935 = (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2909 / ((_2913 * _2913) * 3.141590118408203125));
        float _2936 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
        _2861 = (((_2922 * cbLight._m0[_2871].x) * _2935) * _2936) + _2803;
        _2863 = (((_2922 * cbLight._m0[_2871].y) * _2935) * _2936) + _2804;
        _2865 = (((_2922 * cbLight._m0[_2871].z) * _2935) * _2936) + _2805;
    }
    float _2967;
    float _2969;
    float _2971;
    if (_2589)
    {
        _2967 = _2861;
        _2969 = _2863;
        _2971 = _2865;
    }
    else
    {
        uint _2978 = _2404 + 3u;
        uint _2982 = _2404 + 11u;
        float _2996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2978].w)) * _918) * 0.949999988079071044921875);
        float _2997 = _2996 * _2996;
        float _2998 = cbLight._m0[_2978].x + _995;
        float _2999 = cbLight._m0[_2978].y + _996;
        float _3000 = cbLight._m0[_2978].z + _997;
        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
        float _3005 = _3004 * _2998;
        float _3006 = _3004 * _2999;
        float _3007 = _3004 * _3000;
        float _3008 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2978].xyz));
        float _4962 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        float _3011 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
        float _3012 = dot(vec3(_915, _916, _917), vec3(_3005, _3006, _3007));
        float _4973 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        float _3015 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
        float _3016 = dot(vec3(cbLight._m0[_2978].xyz), vec3(_3005, _3006, _3007));
        float _4984 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3020 = _2997 * _2997;
        float _3024 = ((_3015 * _3015) * (_3020 + (-1.0))) + 1.0;
        float _3033 = (exp2(log2(1.0 - (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3034 = 1.0 - _2997;
        float _3044 = (0.5 / (((_2680 * ((_3011 * _3034) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_2680 * _3034) + _2997) * _3011))) * _3011;
        float _4995 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3046 = (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_3020 / ((_3024 * _3024) * 3.141590118408203125));
        float _3047 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        _2967 = (((_3033 * cbLight._m0[_2982].x) * _3046) * _3047) + _2861;
        _2969 = (((_3033 * cbLight._m0[_2982].y) * _3046) * _3047) + _2863;
        _2971 = (((_3033 * cbLight._m0[_2982].z) * _3046) * _3047) + _2865;
    }
    float _3113;
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    if (_2402.y == 0u)
    {
        uvec4 _3068 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3069 = _3068.x;
        uint _3080 = uint((float(_3068.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1016) / _3069))) + floor(float(uint(cbSceneParam._m0[85u].x * _1015) / _3069)));
        float _3090 = (log2(_2180 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3091 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
        uint _3094 = uint(isnan(14.0) ? _3091 : (isnan(_3091) ? 14.0 : min(_3091, 14.0)));
        uvec4 _3099 = texelFetch(g_lightClusterGridBuffer, int(((_3094 << 2u) + (_3080 << 6u)) >> 2u));
        uint _3100 = _3099.x;
        uint _3101 = _3068.z;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        if (((((1u << ((_3101 >> 4u) & 15u)) + 4294967295u) & _3100) == 0u) || ((_3101 & 240u) == 0u))
        {
            _3180 = 0.0;
            _3182 = 0.0;
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
        }
        else
        {
            float _3181;
            float _3183;
            float _3185;
            float _3187;
            float _3189;
            float _3191;
            float _3333 = 0.0;
            float _3334 = 0.0;
            float _3335 = 0.0;
            float _3336 = 0.0;
            float _3337 = 0.0;
            float _3338 = 0.0;
            uint _3339 = 0u;
            uint _3348;
            bool _3349;
            for (;;)
            {
                _3348 = texelFetch(g_lightClassification, int((((_3094 << 5u) + (_3080 << 9u)) + (_3339 << 2u)) >> 2u)).x;
                _3349 = _3348 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3349)
                {
                    frontier_phi_71_pred = _3338;
                    frontier_phi_71_pred_1 = _3337;
                    frontier_phi_71_pred_2 = _3336;
                    frontier_phi_71_pred_3 = _3335;
                    frontier_phi_71_pred_4 = _3334;
                    frontier_phi_71_pred_5 = _3333;
                }
                else
                {
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    uint _3484;
                    _3478 = _3333;
                    _3479 = _3334;
                    _3480 = _3335;
                    _3481 = _3336;
                    _3482 = _3337;
                    _3483 = _3338;
                    _3484 = _3348;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    for (;;)
                    {
                        uint _3488 = uint(findLSB(_3484)) + (_3339 << 5u);
                        uint _3485 = (_3484 + 4294967295u) & _3484;
                        uint _3490 = _3488 * 48u;
                        vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3490)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 3u)).x));
                        uint _3510 = (_3488 * 48u) + 4u;
                        vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3510)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 3u)).x));
                        uint _3529 = (_3488 * 48u) + 8u;
                        vec3 _3540 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3529)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 2u)).x));
                        float _3544 = _3504.x - _2178;
                        float _3545 = _3504.y - _2179;
                        float _3546 = _3504.z - _2180;
                        float _3547 = dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546));
                        float _3550 = inversesqrt(_3547);
                        float _3551 = _3550 * _3544;
                        float _3552 = _3550 * _3545;
                        float _3553 = _3550 * _3546;
                        float _3554 = dot(vec3(_1034, _1037, _1040), vec3(_3551, _3552, _3553));
                        float _3559 = 1.0 - (_3547 * _3504.w);
                        float _5021 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3560 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                        float _3561 = sqrt(_3547) * _3523.w;
                        float _3564 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                        float _3565 = _3564 * _3564;
                        float _3568 = ((1.0 - _3565) * _3554) + _3565;
                        float _3571 = _3561 * _3561;
                        float _3575 = ((isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0))) * _3560) / ((_3571 * 0.699999988079071044921875) + 1.0);
                        float _3579 = (-0.0) - _2178;
                        float _3580 = (-0.0) - _2179;
                        float _3581 = (-0.0) - _2180;
                        float _3585 = inversesqrt(dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581)));
                        float _3586 = _3585 * _3579;
                        float _3587 = _3585 * _3580;
                        float _3588 = _3585 * _3581;
                        float _3595 = exp2(log2(1.0 / ((_3571 * 3.5) + 5.0)) * 0.25);
                        float _3596 = 1.0 - _1094;
                        float _3603 = sqrt(1.0 - ((1.0 - (_3596 * _3596)) * (1.0 - (_3595 * _3595))));
                        float _3604 = _3603 * _3603;
                        float _3605 = _3604 * _3604;
                        float _3606 = _3586 + _3551;
                        float _3607 = _3587 + _3552;
                        float _3608 = _3588 + _3553;
                        float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                        float _3616 = dot(vec3(_1034, _1037, _1040), vec3(_3586, _3587, _3588));
                        float _5037 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3619 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                        float _3620 = dot(vec3(_1034, _1037, _1040), vec3(_3612 * _3606, _3612 * _3607, _3612 * _3608));
                        float _5048 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3623 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                        float _3627 = ((_3623 * _3623) * (_3605 + (-1.0))) + 1.0;
                        float _3628 = _3564 * _3604;
                        float _3629 = _3628 * _3628;
                        float _3632 = ((1.0 - _3629) * _3554) + _3629;
                        float _5059 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                        float _3633 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3634 = 1.0 - _3604;
                        float _3644 = (0.5 / (((_3633 * ((_3619 * _3634) + _3604)) + 9.9999999392252902907785028219223e-09) + (((_3633 * _3634) + _3604) * _3619))) * _3633;
                        float _5070 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                        float _3655 = (((_3605 * 3.1415927410125732421875) * (isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0)))) / ((_3627 * _3627) * ((_3571 * 2.1991131305694580078125) + 3.141590118408203125))) * _3560;
                        _3408 = (_3575 * _3523.x) + _3481;
                        _3409 = (_3575 * _3523.y) + _3482;
                        _3410 = (_3575 * _3523.z) + _3483;
                        _3405 = (_3655 * _3540.x) + _3478;
                        _3406 = (_3655 * _3540.y) + _3479;
                        _3407 = (_3655 * _3540.z) + _3480;
                        if (_3485 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3478 = _3405;
                            _3479 = _3406;
                            _3480 = _3407;
                            _3481 = _3408;
                            _3482 = _3409;
                            _3483 = _3410;
                            _3484 = _3485;
                        }
                    }
                    frontier_phi_71_pred = _3410;
                    frontier_phi_71_pred_1 = _3409;
                    frontier_phi_71_pred_2 = _3408;
                    frontier_phi_71_pred_3 = _3407;
                    frontier_phi_71_pred_4 = _3406;
                    frontier_phi_71_pred_5 = _3405;
                }
                _3191 = frontier_phi_71_pred;
                _3189 = frontier_phi_71_pred_1;
                _3187 = frontier_phi_71_pred_2;
                _3185 = frontier_phi_71_pred_3;
                _3183 = frontier_phi_71_pred_4;
                _3181 = frontier_phi_71_pred_5;
                uint _3340 = _3339 + 1u;
                if (_3340 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3333 = _3181;
                    _3334 = _3183;
                    _3335 = _3185;
                    _3336 = _3187;
                    _3337 = _3189;
                    _3338 = _3191;
                    _3339 = _3340;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3180 = _3181;
            _3182 = _3183;
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
        }
        uvec4 _3194 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3195 = _3194.z;
        uint _3197 = (_3195 >> 8u) & 15u;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        float _3311;
        if (((4294967295u << _3197) & _3100) == 0u)
        {
            _3301 = _3180;
            _3303 = _3182;
            _3305 = _3184;
            _3307 = _3186;
            _3309 = _3188;
            _3311 = _3190;
        }
        else
        {
            float _3326 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
            float _3327 = _3326 * _2178;
            float _3328 = _3326 * _2179;
            float _3329 = _3326 * _2180;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3197 < ((_3195 >> 12u) & 15u))
            {
                float _3302;
                float _3304;
                float _3306;
                float _3308;
                float _3310;
                float _3312;
                float _3461 = _3180;
                float _3462 = _3182;
                float _3463 = _3184;
                float _3464 = _3186;
                float _3465 = _3188;
                float _3466 = _3190;
                uint _3467 = _3197;
                uint _3476;
                bool _3477;
                for (;;)
                {
                    _3476 = texelFetch(g_lightClassification, int((((_3094 << 5u) + (_3080 << 9u)) + (_3467 << 2u)) >> 2u)).x;
                    _3477 = _3476 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3477)
                    {
                        frontier_phi_82_pred = _3466;
                        frontier_phi_82_pred_1 = _3465;
                        frontier_phi_82_pred_2 = _3464;
                        frontier_phi_82_pred_3 = _3463;
                        frontier_phi_82_pred_4 = _3462;
                        frontier_phi_82_pred_5 = _3461;
                    }
                    else
                    {
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3962;
                        float _3963;
                        float _3964;
                        float _3965;
                        float _3966;
                        float _3967;
                        float _3682 = _3461;
                        float _3683 = _3462;
                        float _3684 = _3463;
                        float _3685 = _3464;
                        float _3686 = _3465;
                        float _3687 = _3466;
                        uint _3688 = _3476;
                        uint _3689;
                        vec4 _3714;
                        float _3715;
                        vec4 _3730;
                        vec3 _3742;
                        vec4 _3757;
                        vec4 _3772;
                        float _3818;
                        bool _3819;
                        for (;;)
                        {
                            uint _3699 = ((_3467 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3688));
                            _3689 = (_3688 + 4294967295u) & _3688;
                            uint _3701 = _3699 * 40u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            _3715 = _3714.w;
                            uint _3717 = (_3699 * 40u) + 4u;
                            _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            uint _3732 = (_3699 * 40u) + 8u;
                            _3742 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x));
                            uint _3744 = (_3699 * 40u) + 16u;
                            _3757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 3u)).x));
                            uint _3759 = (_3699 * 40u) + 20u;
                            _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            uint _3774 = (_3699 * 40u) + 24u;
                            vec4 _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3793 = (_3699 * 40u) + 28u;
                            vec4 _3806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 3u)).x));
                            _3818 = fma(_2180, _3806.z, fma(_2179, _3806.y, _3806.x * _2178)) + _3806.w;
                            _3819 = !((fma(_2180, _3787.z, fma(_2179, _3787.y, _3787.x * _2178)) + _3787.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3819)
                            {
                                float _3846 = _3714.x - _2178;
                                float _3847 = _3714.y - _2179;
                                float _3848 = _3714.z - _2180;
                                float _3849 = dot(vec3(_3846, _3847, _3848), vec3(_3846, _3847, _3848));
                                float _3852 = inversesqrt(_3849);
                                float _3853 = _3852 * _3846;
                                float _3854 = _3852 * _3847;
                                float _3855 = _3852 * _3848;
                                float _3859 = 1.0 - (_3849 / (_3715 * _3715));
                                float _5081 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3860 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                                float _3864 = sqrt(_3849) * _3730.w;
                                float _3866 = 1.39999997615814208984375 / (_3864 + 1.39999997615814208984375);
                                float _3867 = _3866 * _3866;
                                float _3870 = ((1.0 - _3867) * dot(vec3(_3853, _3854, _3855), vec3(_1034, _1037, _1040))) + _3867;
                                float _3873 = _3864 * _3864;
                                float _3877 = (fma(_2180, _3757.z, fma(_2179, _3757.y, _3757.x * _2178)) + _3757.w) / _3818;
                                float _3878 = (fma(_2180, _3772.z, fma(_2179, _3772.y, _3772.x * _2178)) + _3772.w) / _3818;
                                float _3882 = 1.0 - dot(vec2(_3877, _3878), vec2(_3877, _3878));
                                float _5097 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3883 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                                float _3884 = _3883 * (((isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0))) * _3860) / ((_3873 * 0.699999988079071044921875) + 1.0));
                                float _3896 = exp2(log2(1.0 / ((_3873 * 3.5) + 5.0)) * 0.25);
                                float _3897 = 1.0 - _1094;
                                float _3904 = sqrt(1.0 - ((1.0 - (_3897 * _3897)) * (1.0 - (_3896 * _3896))));
                                float _3905 = _3904 * _3904;
                                float _3906 = _3905 * _3905;
                                float _3907 = _3853 - _3327;
                                float _3908 = _3854 - _3328;
                                float _3909 = _3855 - _3329;
                                float _3913 = inversesqrt(dot(vec3(_3907, _3908, _3909), vec3(_3907, _3908, _3909)));
                                float _3917 = dot(vec3(_1034, _1037, _1040), vec3((-0.0) - _3327, (-0.0) - _3328, (-0.0) - _3329));
                                float _5108 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3920 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
                                float _3921 = dot(vec3(_1034, _1037, _1040), vec3(_3913 * _3907, _3913 * _3908, _3913 * _3909));
                                float _5119 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3924 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3928 = ((_3924 * _3924) * (_3906 + (-1.0))) + 1.0;
                                float _3929 = _3866 * _3905;
                                float _3930 = _3929 * _3929;
                                float _3936 = ((1.0 - _3930) * dot(vec3(_1034, _1037, _1040), vec3(_3853, _3854, _3855))) + _3930;
                                float _5130 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3937 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3938 = 1.0 - _3905;
                                float _3948 = (0.5 / (((_3937 * ((_3920 * _3938) + _3905)) + 9.9999999392252902907785028219223e-09) + (((_3937 * _3938) + _3905) * _3920))) * _3937;
                                float _5141 = isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0));
                                float _3958 = (_3883 * _3860) * (((_3906 * 3.1415927410125732421875) * (isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0)))) / ((_3928 * _3928) * ((_3873 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3884 * _3730.z;
                                frontier_phi_88_pred_1 = _3884 * _3730.y;
                                frontier_phi_88_pred_2 = _3884 * _3730.x;
                                frontier_phi_88_pred_3 = _3958 * _3742.z;
                                frontier_phi_88_pred_4 = _3958 * _3742.y;
                                frontier_phi_88_pred_5 = _3958 * _3742.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3967 = frontier_phi_88_pred;
                            _3966 = frontier_phi_88_pred_1;
                            _3965 = frontier_phi_88_pred_2;
                            _3964 = frontier_phi_88_pred_3;
                            _3963 = frontier_phi_88_pred_4;
                            _3962 = frontier_phi_88_pred_5;
                            _3672 = _3965 + _3685;
                            _3673 = _3966 + _3686;
                            _3674 = _3967 + _3687;
                            _3669 = _3962 + _3682;
                            _3670 = _3963 + _3683;
                            _3671 = _3964 + _3684;
                            if (_3689 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3682 = _3669;
                                _3683 = _3670;
                                _3684 = _3671;
                                _3685 = _3672;
                                _3686 = _3673;
                                _3687 = _3674;
                                _3688 = _3689;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3674;
                        frontier_phi_82_pred_1 = _3673;
                        frontier_phi_82_pred_2 = _3672;
                        frontier_phi_82_pred_3 = _3671;
                        frontier_phi_82_pred_4 = _3670;
                        frontier_phi_82_pred_5 = _3669;
                    }
                    _3312 = frontier_phi_82_pred;
                    _3310 = frontier_phi_82_pred_1;
                    _3308 = frontier_phi_82_pred_2;
                    _3306 = frontier_phi_82_pred_3;
                    _3304 = frontier_phi_82_pred_4;
                    _3302 = frontier_phi_82_pred_5;
                    uint _3468 = _3467 + 1u;
                    if (_3468 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3461 = _3302;
                        _3462 = _3304;
                        _3463 = _3306;
                        _3464 = _3308;
                        _3465 = _3310;
                        _3466 = _3312;
                        _3467 = _3468;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3308;
                frontier_phi_63_64_ladder_1 = _3312;
                frontier_phi_63_64_ladder_2 = _3310;
                frontier_phi_63_64_ladder_3 = _3306;
                frontier_phi_63_64_ladder_4 = _3304;
                frontier_phi_63_64_ladder_5 = _3302;
            }
            else
            {
                frontier_phi_63_64_ladder = _3186;
                frontier_phi_63_64_ladder_1 = _3190;
                frontier_phi_63_64_ladder_2 = _3188;
                frontier_phi_63_64_ladder_3 = _3184;
                frontier_phi_63_64_ladder_4 = _3182;
                frontier_phi_63_64_ladder_5 = _3180;
            }
            _3301 = frontier_phi_63_64_ladder_5;
            _3303 = frontier_phi_63_64_ladder_4;
            _3305 = frontier_phi_63_64_ladder_3;
            _3307 = frontier_phi_63_64_ladder;
            _3309 = frontier_phi_63_64_ladder_2;
            _3311 = frontier_phi_63_64_ladder_1;
        }
        float _3316 = isnan(1.0) ? _1078 : (isnan(_1078) ? 1.0 : min(_1078, 1.0));
        _3113 = (_3316 * _3307) + _2644;
        _3115 = (_3316 * _3309) + _2646;
        _3117 = (_3316 * _3311) + _2648;
        _3119 = ((_3301 * 0.039999999105930328369140625) * _3316) + _2967;
        _3121 = ((_3303 * 0.039999999105930328369140625) * _3316) + _2969;
        _3123 = ((_3305 * 0.039999999105930328369140625) * _3316) + _2971;
    }
    else
    {
        _3113 = _2644;
        _3115 = _2646;
        _3117 = _2648;
        _3119 = _2967;
        _3121 = _2969;
        _3123 = _2971;
    }
    float _5157 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _5168 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _5179 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _3140 = ((isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0))) * (_3113 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1078))) + ((_3119 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    float _3141 = ((isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0))) * (_3115 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1078))) + ((_3121 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    float _3142 = ((isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_3117 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1078))) + ((_3123 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    uint _3143 = _280 + 6u;
    float _3151 = _1015 / cbSceneParam._m0[86u].x;
    float _3152 = _1016 / cbSceneParam._m0[86u].y;
    vec4 _3166 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3151, _3152, (log2((isnan(cbSceneParam._m0[77u].w) ? _936 : (isnan(_936) ? cbSceneParam._m0[77u].w : min(_936, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3168 = _3166.x;
    float _3169 = _3166.y;
    float _3170 = _3166.z;
    float _3171 = _3166.w;
    float _3243;
    float _3245;
    float _3247;
    float _3249;
    if (_936 > cbSceneParam._m0[78u].w)
    {
        float _3205 = isnan(_936) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _936 : min(cbSceneParam._m0[80u].w, _936));
        float _3206 = _3205 / _936;
        float _3217 = _3206 * _988;
        float _3218 = _989 * _3206;
        float _3219 = (-0.0) - _3218;
        float _3221 = _3206 * _990;
        float _3223 = (cbSceneParam._m0[77u].w * _3219) / _3205;
        float _3224 = _3223 + cbSceneParam._m0[79u].w;
        float _3225 = cbSceneParam._m0[79u].w - _3218;
        float _3231 = sqrt(((_3217 * _3217) + (_3218 * _3218)) + (_3221 * _3221));
        float _3234 = (1.0 - (cbSceneParam._m0[77u].w / _3205)) * _3231;
        float _3239 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3241 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3418;
        if (abs((_3219 - _3223) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3418 = ((((_3224 > 0.0) ? exp2(_3239 * _3224) : (2.0 - exp2(_3241 * _3224))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3234;
        }
        else
        {
            float _3362 = 1.0 / cbSceneParam._m0[80u].x;
            float _3363 = isnan(_3225) ? _3224 : (isnan(_3224) ? _3225 : max(_3224, _3225));
            float _3364 = isnan(_3225) ? _3224 : (isnan(_3224) ? _3225 : min(_3224, _3225));
            float _3373 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : min(_3363, 0.0));
            float _3374 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : min(_3364, 0.0));
            _3418 = ((abs(_3231 / _3219) * cbSceneParam._m0[80u].y) * ((((_3373 - _3374) * 2.0) - ((exp2(_3239 * (isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0)))) - exp2(_3239 * (isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))))) * _3362)) - ((exp2(_3241 * _3373) - exp2(_3241 * _3374)) * _3362))) + (_3234 * cbSceneParam._m0[80u].z);
        }
        vec4 _3420 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3151, _3152, 1.0), 0.0);
        float _3429 = exp2((_3418 * (-1.44269502162933349609375)) * (1.0 - _3420.w));
        float _3430 = log2(_3429);
        float _3446 = log2(_3171);
        _3243 = (exp2(_3446 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3430 * cbSceneParam._m0[78u].x)) * _3420.x) / cbSceneParam._m0[78u].x)) + _3168;
        _3245 = (exp2(_3446 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3430 * cbSceneParam._m0[78u].y)) * _3420.y) / cbSceneParam._m0[78u].y)) + _3169;
        _3247 = (exp2(_3446 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3430 * cbSceneParam._m0[78u].z)) * _3420.z) / cbSceneParam._m0[78u].z)) + _3170;
        _3249 = _3429 * _3171;
    }
    else
    {
        _3243 = _3168;
        _3245 = _3169;
        _3247 = _3170;
        _3249 = _3171;
    }
    bool _3456;
    vec4 _3259;
    vec4 _3281;
    float _3283;
    float _3287;
    float _3288;
    float _3289;
    float _3290;
    bool _3300;
    for (;;)
    {
        _3259 = cbMatDynParam._m0[0u];
        float _3261 = roundEven(_3259.y);
        bool _3262 = _3261 == 3.0;
        float _3263 = log2(_3249);
        float _3270 = exp2(_3263 * cbSceneParam._m0[78u].x) * _3140;
        float _3271 = exp2(_3263 * cbSceneParam._m0[78u].y) * _3141;
        float _3272 = exp2(_3263 * cbSceneParam._m0[78u].z) * _3142;
        float _3279 = _1004 + (-0.5);
        _3281 = cbMtdParam._m0[1u];
        _3283 = _3281.y * _3279;
        float _3286 = (_3261 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3287 = _3286 * (_3262 ? _3270 : (_3270 + (cbSceneParam._m0[72u].w * _3243)));
        _3288 = _3286 * (_3262 ? _3271 : (_3271 + (cbSceneParam._m0[72u].w * _3245)));
        _3289 = _3286 * (_3262 ? _3272 : (_3272 + (cbSceneParam._m0[72u].w * _3247)));
        _3290 = _3279 * 0.999000012874603271484375;
        _3300 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3300)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3290) < 0.5)
            {
                _3456 = true;
                break;
            }
        }
        uint _3397 = _1053 + uint(_3259.w);
        if ((cbInstanceData._m0[_3397].w < 1.0) && ((cbInstanceData._m0[_3397].w + _3290) < 0.5))
        {
            _3456 = true;
            break;
        }
        if ((_3283 + 1.0) < _3281.x)
        {
            _3456 = true;
            break;
        }
        _3456 = false;
        break;
    }
    float _3660;
    if (_3456)
    {
        discard_state = true;
        _3660 = 0.0;
    }
    else
    {
        _3660 = cbInstanceData._m0[_3143].w;
    }
    SV_Target.x = _3287;
    SV_Target.y = _3288;
    SV_Target.z = _3289;
    SV_Target.w = _3660;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3143].w;
    discard_exit();
}


