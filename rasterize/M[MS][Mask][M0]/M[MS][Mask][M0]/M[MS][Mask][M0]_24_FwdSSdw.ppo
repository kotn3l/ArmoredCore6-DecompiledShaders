#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1256;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3586 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3597 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3608 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[24u].z) + _437) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3619 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _465 = (_320.x * cbMtdParam._m0[9u].x) * ((_455 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351);
    float _466 = (_320.y * cbMtdParam._m0[9u].y) * ((_455 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352);
    float _467 = (_320.z * cbMtdParam._m0[9u].z) * ((_455 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353);
    float _471 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _465;
    float _474 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _466;
    float _477 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _467;
    float _485 = (((_465 - _471) * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) + _471) * 4.55000019073486328125;
    float _487 = (((_466 - _474) * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) + _474) * 4.55000019073486328125;
    float _489 = (((_467 - _477) * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) + _477) * 4.55000019073486328125;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _555 = _551.z;
    float _564 = ((_534.z - _555) * _455) + _555;
    float _567 = ((((_534.x - _553) * _455) + _553) * 2.0) + (-1.0);
    float _568 = ((((_534.y - _554) * _455) + _554) * 2.0) + (-1.0);
    float _569 = dot(vec2(_567, _568), vec2(_567, _568));
    float _3630 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _606 = (_567 + ((((_507.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_594.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _607 = (_568 + ((((_507.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_594.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _610 = fma(_574, _231, fma(_607, _238, _606 * _224));
    float _613 = fma(_574, _232, fma(_607, _239, _606 * _225));
    float _616 = fma(_574, _233, fma(_607, _240, _606 * _226));
    float _620 = inversesqrt(dot(vec3(_610, _613, _616), vec3(_610, _613, _616)));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _283) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _284) + cbTextureTilingScale._m0[11u].w));
    float _649 = _647.x;
    float _650 = 1.0 - _649;
    float _656 = (cbMtdParam._m0[19u].x + dot(vec4(_620 * _610, _620 * _613, _620 * _616, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_649 - _650) * cbMtdParam._m0[24u].w) + _650) * cbMtdParam._m0[21u].z);
    float _3641 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _664 = (_657 * (cbMtdParam._m0[17u].x - _485)) + _485;
    float _665 = (_657 * (cbMtdParam._m0[17u].y - _487)) + _487;
    float _666 = (_657 * (cbMtdParam._m0[17u].z - _489)) + _489;
    float _671 = (((_507.z - _564) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _564;
    float _675 = ((_594.z - _671) * cbMtdParam._m0[19u].w) + _671;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _283) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _284) + cbTextureTilingScale._m0[15u].w));
    float _695 = (_688.x * 2.0) + (-1.0);
    float _696 = (_688.y * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _3652 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _705 = ((_688.z - _675) * _657) + _675;
    float _715 = ((sqrt(1.0 - (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) - _574) * _657) + _574;
    float _718 = (((_695 - _606) * _657) + _606) + (cbMtdParam._m0[21u].x * _606);
    float _719 = (((_696 - _607) * _657) + _607) + (cbMtdParam._m0[21u].x * _607);
    float _721 = cbMtdParam._m0[22u].x + _594.w;
    float _724 = fma(_715, _231, fma(_719, _238, _718 * _224));
    float _727 = fma(_715, _232, fma(_719, _239, _718 * _225));
    float _730 = fma(_715, _233, fma(_719, _240, _718 * _226));
    float _734 = inversesqrt(dot(vec3(_724, _727, _730), vec3(_724, _727, _730)));
    float _735 = _734 * _724;
    float _736 = _734 * _727;
    float _737 = _734 * _730;
    float _3663 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _738 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _3685 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3696 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3707 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _756 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _807 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _797);
    float _808 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _797);
    float _809 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _797);
    float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
    float _814 = _807 * _813;
    float _815 = _808 * _813;
    float _816 = _809 * _813;
    float _822 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _823 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _841 = fma(_737, cbSceneParam._m0[5u].z, fma(_736, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _735));
    float _844 = fma(_737, cbSceneParam._m0[6u].z, fma(_736, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _735));
    float _847 = fma(_737, cbSceneParam._m0[7u].z, fma(_736, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _735));
    uint _861 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _867 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) * cbInstanceData._m0[_861].x;
    float _868 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * cbInstanceData._m0[_861].y;
    float _869 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) * cbInstanceData._m0[_861].z;
    float _3718 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    vec4 _881 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _822, cbSceneParam._m0[86u].y * _823));
    float _885 = ((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * TEXCOORD_5.w) * _881.x;
    float _886 = dot(vec3(_735, _736, _737), vec3(_814, _815, _816));
    float _889 = _886 * 2.0;
    float _893 = (_889 * _735) - _814;
    float _894 = (_889 * _736) - _815;
    float _895 = (_889 * _737) - _816;
    float _899 = abs(dot(vec3(_814, _815, _816), vec3(_735, _736, _737)));
    float _3751 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _901 = sqrt(_738);
    float _914 = exp2((_901 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_901 * 3.0));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1255;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _980 = fma(_954, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946));
        float _984 = fma(_954, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946));
        float _988 = fma(_954, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946));
        float _1013 = _946 + _735;
        float _1014 = _950 + _736;
        float _1015 = _954 + _737;
        float _1025 = fma(_1015, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013)) - _980;
        float _1026 = fma(_1015, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013)) - _984;
        float _1027 = fma(_1015, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013)) - _988;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_980 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_984 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[34u].z) + ((((((_988 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1083 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1049.x + (-0.5));
        float _1085 = _1083 * (_1049.y + (-0.5));
        float _1086 = _1083 * (_1049.z + (-0.5));
        float _1093 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1056.x + (-0.5));
        float _1095 = _1093 * (_1056.y + (-0.5));
        float _1096 = _1093 * (_1056.z + (-0.5));
        float _1103 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1063.x + (-0.5));
        float _1105 = _1103 * (_1063.y + (-0.5));
        float _1106 = _1103 * (_1063.z + (-0.5));
        float _1113 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1070.x + (-0.5));
        float _1115 = _1113 * (_1070.y + (-0.5));
        float _1116 = _1113 * (_1070.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1137 = (dot(vec3(_735, _736, _737), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1147 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3799 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1149 + 1.0))) + _1154) * _1117;
        float _1164 = _1085 * 0.5;
        float _1165 = _1095 * 0.5;
        float _1166 = _1105 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_735, _736, _737), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3832 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1191 + 1.0))) + _1196) * _1118;
        float _1206 = _1086 * 0.5;
        float _1207 = _1096 * 0.5;
        float _1208 = _1106 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_735, _736, _737), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3865 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1233 + 1.0))) + _1238) * _1119;
        _1255 = _1086;
        _1257 = _1085;
        _1258 = _1084;
        _1259 = _1096;
        _1260 = _1095;
        _1261 = _1094;
        _1262 = _1106;
        _1263 = _1105;
        _1264 = _1104;
        _1265 = _1119;
        _1266 = _1118;
        _1267 = _1117;
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _1256;
        _1257 = _1256;
        _1258 = _1256;
        _1259 = _1256;
        _1260 = _1256;
        _1261 = _1256;
        _1262 = _1256;
        _1263 = _1256;
        _1264 = _1256;
        _1265 = _1256;
        _1266 = _1256;
        _1267 = _1256;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1295 = fma(_954, cbModelParam._m0[30u].z, fma(_950, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _946));
        float _1299 = fma(_954, cbModelParam._m0[31u].z, fma(_950, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _946));
        float _1303 = fma(_954, cbModelParam._m0[32u].z, fma(_950, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _946));
        float _1326 = _946 + _735;
        float _1327 = _950 + _736;
        float _1328 = _954 + _737;
        float _1338 = fma(_1328, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326)) - _1295;
        float _1339 = fma(_1328, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326)) - _1299;
        float _1340 = fma(_1328, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326)) - _1303;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1295 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1299 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[35u].z) + ((((((_1303 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1394 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1361.x + (-0.5));
        float _1396 = _1394 * (_1361.y + (-0.5));
        float _1397 = _1394 * (_1361.z + (-0.5));
        float _1404 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1368.x + (-0.5));
        float _1406 = _1404 * (_1368.y + (-0.5));
        float _1407 = _1404 * (_1368.z + (-0.5));
        float _1414 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1375.x + (-0.5));
        float _1416 = _1414 * (_1375.y + (-0.5));
        float _1417 = _1414 * (_1375.z + (-0.5));
        float _1424 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1382.x + (-0.5));
        float _1426 = _1424 * (_1382.y + (-0.5));
        float _1427 = _1424 * (_1382.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_735, _736, _737), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3928 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1458 + 1.0))) + _1463) * _1428;
        float _1473 = _1396 * 0.5;
        float _1474 = _1406 * 0.5;
        float _1475 = _1416 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_735, _736, _737), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _3961 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1500 + 1.0))) + _1505) * _1429;
        float _1515 = _1397 * 0.5;
        float _1516 = _1407 * 0.5;
        float _1517 = _1417 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_735, _736, _737), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _3994 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1542 + 1.0))) + _1547) * _1430;
        _1564 = _1397;
        _1565 = _1396;
        _1566 = _1395;
        _1567 = _1407;
        _1568 = _1406;
        _1569 = _1405;
        _1570 = _1417;
        _1571 = _1416;
        _1572 = _1415;
        _1573 = _1430;
        _1574 = _1429;
        _1575 = _1428;
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1256;
        _1565 = _1256;
        _1566 = _1256;
        _1567 = _1256;
        _1568 = _1256;
        _1569 = _1256;
        _1570 = _1256;
        _1571 = _1256;
        _1572 = _1256;
        _1573 = _1256;
        _1574 = _1256;
        _1575 = _1256;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1268)) + _1268;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1269)) + _1269;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1270)) + _1270;
    float _1611 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1588));
    float _1632 = _893 * 0.5;
    float _1633 = _894 * 0.5;
    float _1634 = _895 * 0.5;
    float _1635 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1638 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1641 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1675;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1648 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1255, _1259, _1262, _1265));
        float _1652 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1656 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1663 = dot(vec4(cbModelParam._m0[39u]), vec4(_1632, _1633, _1634, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1686;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1677 = dot(vec4(cbModelParam._m0[40u]), vec4(_1632, _1633, _1634, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1690 = (_1686 * cbModelParam._m0[1u].x) + (_1675 * (1.0 - cbModelParam._m0[1u].x));
    float _1700 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _738);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1700 : min(cbModelParam._m0[25u].z, _1700));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1749 = fma(_954, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _946)) + cbModelParam._m0[13u].w;
        float _1753 = fma(_954, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _946)) + cbModelParam._m0[14u].w;
        float _1757 = fma(_954, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _946)) + cbModelParam._m0[15u].w;
        float _1760 = fma(_895, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893));
        float _1763 = fma(_895, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893));
        float _1766 = fma(_895, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893));
        float _1794;
        if (_1760 > 0.0)
        {
            _1794 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1794 = frontier_phi_14_12_ladder;
        }
        float _2016;
        if (_1763 > 0.0)
        {
            _2016 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2016 = frontier_phi_23_19_ladder;
        }
        float _2262;
        if (_1766 > 0.0)
        {
            _2262 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2262 = frontier_phi_35_30_ladder;
        }
        float _2264 = isnan(_2016) ? _1794 : (isnan(_1794) ? _2016 : min(_1794, _2016));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1760) + _1749;
        float _2270 = (_2265 * _1763) + _1753;
        float _2271 = (_2265 * _1766) + _1757;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2272;
        float _2276 = _2272 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 > _2276) || ((_2270 < _2274) || ((_2269 < _2274) || (_2269 > _2276))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2271, cbModelParam._m0[9u].z, fma(_2270, cbModelParam._m0[9u].y, _2269 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2271, cbModelParam._m0[10u].z, fma(_2270, cbModelParam._m0[10u].y, _2269 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2271, cbModelParam._m0[11u].z, fma(_2270, cbModelParam._m0[11u].y, _2269 * cbModelParam._m0[11u].x))), _1701);
            frontier_phi_13_35_ladder = _2395.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2395.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2395.x * cbModelParam._m0[1u].y;
        }
        _1782 = frontier_phi_13_35_ladder_2;
        _1784 = frontier_phi_13_35_ladder_1;
        _1786 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_893, _894, _895), _1701);
        _1782 = _1770.x * cbModelParam._m0[1u].y;
        _1784 = _1770.y * cbModelParam._m0[1u].y;
        _1786 = _1770.z * cbModelParam._m0[1u].y;
    }
    float _1790 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _738);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1790 : min(cbModelParam._m0[25u].w, _1790));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1845 = fma(_954, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _946)) + cbModelParam._m0[21u].w;
        float _1849 = fma(_954, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _946)) + cbModelParam._m0[22u].w;
        float _1853 = fma(_954, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _946)) + cbModelParam._m0[23u].w;
        float _1856 = fma(_895, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893));
        float _1859 = fma(_895, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893));
        float _1862 = fma(_895, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893));
        float _2021;
        if (_1856 > 0.0)
        {
            _2021 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2021 = frontier_phi_25_21_ladder;
        }
        float _2289;
        if (_1859 > 0.0)
        {
            _2289 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2289 = frontier_phi_37_32_ladder;
        }
        float _2494;
        if (_1862 > 0.0)
        {
            _2494 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2494 = frontier_phi_46_43_ladder;
        }
        float _2496 = isnan(_2289) ? _2021 : (isnan(_2021) ? _2289 : min(_2021, _2289));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1856) + _1845;
        float _2502 = (_2497 * _1859) + _1849;
        float _2503 = (_2497 * _1862) + _1853;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2702 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1791);
            frontier_phi_22_46_ladder = _2702.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2702.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2702.x * cbModelParam._m0[1u].z;
        }
        _1881 = frontier_phi_22_46_ladder_2;
        _1883 = frontier_phi_22_46_ladder_1;
        _1885 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_893, _894, _895), _1791);
        _1881 = _1865.x * cbModelParam._m0[1u].z;
        _1883 = _1865.y * cbModelParam._m0[1u].z;
        _1885 = _1865.z * cbModelParam._m0[1u].z;
    }
    float _1897 = ((((1.0 - _914) * ((_901 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_914 * _901)) * _885;
    float _1898 = _1897 * ((cbModelParam._m0[1u].w * (_1881 - _1782)) + _1782);
    float _1899 = _1897 * ((cbModelParam._m0[1u].w * (_1883 - _1784)) + _1784);
    float _1900 = _1897 * ((cbModelParam._m0[1u].w * (_1885 - _1786)) + _1786);
    float _1903 = fma(_1900, cbSceneParam._m0[89u].z, fma(_1899, cbSceneParam._m0[89u].y, _1898 * cbSceneParam._m0[89u].x));
    float _1906 = fma(_1900, cbSceneParam._m0[90u].z, fma(_1899, cbSceneParam._m0[90u].y, _1898 * cbSceneParam._m0[90u].x));
    float _1909 = fma(_1900, cbSceneParam._m0[91u].z, fma(_1899, cbSceneParam._m0[91u].y, _1898 * cbSceneParam._m0[91u].x));
    vec4 _1917 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_822, _823));
    float _1919 = _1917.w;
    float _1931 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1919);
    float _1932 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1919);
    float _1933 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1919);
    uvec4 _1937 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1939 = _1937.x * 14u;
    uint _1940 = _1939 + 13u;
    float _1947 = _885 + (-1.0);
    float _1952 = (cbLight._m0[_1940].x * _1947) + 1.0;
    float _1953 = (cbLight._m0[_1940].y * _1947) + 1.0;
    float _1954 = (cbLight._m0[_1940].z * _1947) + 1.0;
    float _1955 = (cbLight._m0[_1940].w * _1947) + 1.0;
    uint _1956 = _1939 + 5u;
    float _1962 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1966 = _1939 + 4u;
    float _1975 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1979 = _1939 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_735, _736, _737));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_735, _736, _737));
    float _4130 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4141 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1956].x * _1962) * _2000) + (((cbLight._m0[_1966].x * _1931) * _1975) * _1998);
    float _2008 = ((_1962 * cbLight._m0[_1956].y) * _2000) + (((cbLight._m0[_1966].y * _1932) * _1975) * _1998);
    float _2009 = ((_1962 * cbLight._m0[_1956].z) * _2000) + (((cbLight._m0[_1966].z * _1933) * _1975) * _1998);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1939 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_2015)
    {
        _2026 = _2007;
        _2028 = _2008;
        _2030 = _2009;
    }
    else
    {
        uint _2034 = _1939 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1939 + 2u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4152 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2053 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _2007;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _2008;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _2009;
    }
    bool _2033 = _2013.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2033)
    {
        _2071 = _2026;
        _2073 = _2028;
        _2075 = _2030;
    }
    else
    {
        uint _2233 = _1939 + 7u;
        float _2249 = (dot(vec3(cbLight._m0[_1939 + 3u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4168 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2252 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2071 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2026;
        _2073 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2028;
        _2075 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2030;
    }
    uint _2078 = _1939 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _738) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1939].x + _814;
    float _2094 = cbLight._m0[_1939].y + _815;
    float _2095 = cbLight._m0[_1939].z + _816;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_1939].xyz));
    float _4184 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2107 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2108 = dot(vec3(_735, _736, _737), vec3(_2100, _2101, _2102));
    float _4206 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2100, _2101, _2102));
    float _4217 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2132 = 1.0 - _2092;
    float _2143 = (0.5 / (((_2107 * ((_2106 * _2132) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2132) + _2092) * _2106))) * _2106;
    float _4228 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2159 = _1939 + 9u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _738) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_1979].x + _814;
    float _2173 = cbLight._m0[_1979].y + _815;
    float _2174 = cbLight._m0[_1979].z + _816;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_1979].xyz));
    float _4239 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2186 = dot(vec3(_735, _736, _737), vec3(_2179, _2180, _2181));
    float _4250 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2179, _2180, _2181));
    float _4261 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2171 * _2171;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2208 = 1.0 - _2171;
    float _2218 = (0.5 / (((_2107 * ((_2185 * _2208) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2208) + _2171) * _2185))) * _2185;
    float _4272 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    float _2230 = (((_2207 * cbLight._m0[_2159].x) * _2220) * _1962) + ((((cbLight._m0[_2078].x * _1931) * _2131) * _2145) * _1975);
    float _2231 = (((_2207 * cbLight._m0[_2159].y) * _2220) * _1962) + ((((cbLight._m0[_2078].y * _1932) * _2131) * _2145) * _1975);
    float _2232 = (((_2207 * cbLight._m0[_2159].z) * _2220) * _1962) + ((((cbLight._m0[_2078].z * _1933) * _2131) * _2145) * _1975);
    float _2294;
    float _2296;
    float _2298;
    if (_2015)
    {
        _2294 = _2230;
        _2296 = _2231;
        _2298 = _2232;
    }
    else
    {
        uint _2300 = _1939 + 2u;
        uint _2304 = _1939 + 10u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _738) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _814;
        float _2321 = cbLight._m0[_2300].y + _815;
        float _2322 = cbLight._m0[_2300].z + _816;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2300].xyz));
        float _4283 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2334 = dot(vec3(_735, _736, _737), vec3(_2327, _2328, _2329));
        float _4294 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4305 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2356 = 1.0 - _2319;
        float _2366 = (0.5 / (((_2107 * ((_2333 * _2356) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2356) + _2319) * _2333))) * _2333;
        float _4316 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2294 = (((_2355 * cbLight._m0[_2304].x) * _2368) * _2369) + _2230;
        _2296 = (((_2355 * cbLight._m0[_2304].y) * _2368) * _2369) + _2231;
        _2298 = (((_2355 * cbLight._m0[_2304].z) * _2368) * _2369) + _2232;
    }
    float _2404;
    float _2406;
    float _2408;
    if (_2033)
    {
        _2404 = _2294;
        _2406 = _2296;
        _2408 = _2298;
    }
    else
    {
        uint _2415 = _1939 + 3u;
        uint _2419 = _1939 + 11u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _738) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _814;
        float _2436 = cbLight._m0[_2415].y + _815;
        float _2437 = cbLight._m0[_2415].z + _816;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2415].xyz));
        float _4332 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2449 = dot(vec3(_735, _736, _737), vec3(_2442, _2443, _2444));
        float _4343 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4354 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2470 = (exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2471 = 1.0 - _2434;
        float _2481 = (0.5 / (((_2107 * ((_2448 * _2471) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2471) + _2434) * _2448))) * _2448;
        float _4365 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2483 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2484 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2404 = (((_2470 * cbLight._m0[_2419].x) * _2483) * _2484) + _2294;
        _2406 = (((_2470 * cbLight._m0[_2419].y) * _2483) * _2484) + _2296;
        _2408 = (((_2470 * cbLight._m0[_2419].z) * _2483) * _2484) + _2298;
    }
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_1937.y == 0u)
    {
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2559;
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2559;
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2559;
        uvec4 _2574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2575 = _2574.x;
        uint _2586 = uint((float(_2574.y) * floor(float(uint(cbSceneParam._m0[85u].y * _823) / _2575))) + floor(float(uint(cbSceneParam._m0[85u].x * _822) / _2575)));
        float _2596 = (log2(_2562 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2597 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        uint _2600 = uint(isnan(14.0) ? _2597 : (isnan(_2597) ? 14.0 : min(_2597, 14.0)));
        uvec4 _2605 = texelFetch(g_lightClusterGridBuffer, int(((_2600 << 2u) + (_2586 << 6u)) >> 2u));
        uint _2606 = _2605.x;
        uint _2607 = _2574.z;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((((1u << ((_2607 >> 4u) & 15u)) + 4294967295u) & _2606) == 0u) || ((_2607 & 240u) == 0u))
        {
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
        }
        else
        {
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            uint _2858 = 0u;
            uint _2867;
            bool _2868;
            for (;;)
            {
                _2867 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                _2868 = _2867 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2868)
                {
                    frontier_phi_61_pred = _2852;
                    frontier_phi_61_pred_1 = _2857;
                    frontier_phi_61_pred_2 = _2856;
                    frontier_phi_61_pred_3 = _2855;
                    frontier_phi_61_pred_4 = _2854;
                    frontier_phi_61_pred_5 = _2853;
                }
                else
                {
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    uint _2982;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2867;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2986 = uint(findLSB(_2982)) + (_2858 << 5u);
                        uint _2983 = (_2982 + 4294967295u) & _2982;
                        uint _2988 = _2986 * 48u;
                        vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 3u)).x));
                        uint _3008 = (_2986 * 48u) + 4u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 3u)).x));
                        uint _3027 = (_2986 * 48u) + 8u;
                        vec3 _3038 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x));
                        float _3042 = _3002.x - _2560;
                        float _3043 = _3002.y - _2561;
                        float _3044 = _3002.z - _2562;
                        float _3045 = dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044));
                        float _3048 = inversesqrt(_3045);
                        float _3049 = _3048 * _3042;
                        float _3050 = _3048 * _3043;
                        float _3051 = _3048 * _3044;
                        float _3052 = dot(vec3(_841, _844, _847), vec3(_3049, _3050, _3051));
                        float _3057 = 1.0 - (_3045 * _3002.w);
                        float _4391 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3058 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3059 = sqrt(_3045) * _3021.w;
                        float _3062 = 1.39999997615814208984375 / (_3059 + 1.39999997615814208984375);
                        float _3063 = _3062 * _3062;
                        float _3066 = ((1.0 - _3063) * _3052) + _3063;
                        float _3069 = _3059 * _3059;
                        float _3073 = ((isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))) * _3058) / ((_3069 * 0.699999988079071044921875) + 1.0);
                        float _3077 = (-0.0) - _2560;
                        float _3078 = (-0.0) - _2561;
                        float _3079 = (-0.0) - _2562;
                        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                        float _3084 = _3083 * _3077;
                        float _3085 = _3083 * _3078;
                        float _3086 = _3083 * _3079;
                        float _3094 = exp2(log2(1.0 / ((_3069 * 3.5) + 5.0)) * 0.25);
                        float _3095 = 1.0 - _901;
                        float _3102 = sqrt(1.0 - ((1.0 - (_3095 * _3095)) * (1.0 - (_3094 * _3094))));
                        float _3103 = _3102 * _3102;
                        float _3104 = _3103 * _3103;
                        float _3105 = _3084 + _3049;
                        float _3106 = _3085 + _3050;
                        float _3107 = _3086 + _3051;
                        float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                        float _3115 = dot(vec3(_841, _844, _847), vec3(_3084, _3085, _3086));
                        float _4407 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3119 = dot(vec3(_841, _844, _847), vec3(_3111 * _3105, _3111 * _3106, _3111 * _3107));
                        float _4418 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3126 = ((_3122 * _3122) * (_3104 + (-1.0))) + 1.0;
                        float _3127 = _3062 * _3103;
                        float _3128 = _3127 * _3127;
                        float _3131 = ((1.0 - _3128) * _3052) + _3128;
                        float _4429 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3132 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3133 = 1.0 - _3103;
                        float _3143 = (0.5 / (((_3132 * ((_3118 * _3133) + _3103)) + 9.9999999392252902907785028219223e-09) + (((_3132 * _3133) + _3103) * _3118))) * _3132;
                        float _4440 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3154 = (((_3104 * 3.1415927410125732421875) * (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) / ((_3126 * _3126) * ((_3069 * 2.1991131305694580078125) + 3.141590118408203125))) * _3058;
                        _2911 = (_3073 * _3021.x) + _2979;
                        _2912 = (_3073 * _3021.y) + _2980;
                        _2913 = (_3073 * _3021.z) + _2981;
                        _2908 = (_3154 * _3038.x) + _2976;
                        _2909 = (_3154 * _3038.y) + _2977;
                        _2910 = (_3154 * _3038.z) + _2978;
                        if (_2983 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2983;
                        }
                    }
                    frontier_phi_61_pred = _2908;
                    frontier_phi_61_pred_1 = _2913;
                    frontier_phi_61_pred_2 = _2912;
                    frontier_phi_61_pred_3 = _2911;
                    frontier_phi_61_pred_4 = _2910;
                    frontier_phi_61_pred_5 = _2909;
                }
                _2708 = frontier_phi_61_pred;
                _2718 = frontier_phi_61_pred_1;
                _2716 = frontier_phi_61_pred_2;
                _2714 = frontier_phi_61_pred_3;
                _2712 = frontier_phi_61_pred_4;
                _2710 = frontier_phi_61_pred_5;
                uint _2859 = _2858 + 1u;
                if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2852 = _2708;
                    _2853 = _2710;
                    _2854 = _2712;
                    _2855 = _2714;
                    _2856 = _2716;
                    _2857 = _2718;
                    _2858 = _2859;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
        }
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.z;
        uint _2724 = (_2722 >> 8u) & 15u;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((4294967295u << _2724) & _2606) == 0u)
        {
            _2820 = _2707;
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
            _2828 = _2715;
            _2830 = _2717;
        }
        else
        {
            float _2845 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
            float _2846 = _2845 * _2560;
            float _2847 = _2845 * _2561;
            float _2848 = _2845 * _2562;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2724 < ((_2722 >> 12u) & 15u))
            {
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2959 = _2707;
                float _2960 = _2709;
                float _2961 = _2711;
                float _2962 = _2713;
                float _2963 = _2715;
                float _2964 = _2717;
                uint _2965 = _2724;
                uint _2974;
                bool _2975;
                for (;;)
                {
                    _2974 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2965 << 2u)) >> 2u)).x;
                    _2975 = _2974 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2975)
                    {
                        frontier_phi_67_pred = _2962;
                        frontier_phi_67_pred_1 = _2963;
                        frontier_phi_67_pred_2 = _2964;
                        frontier_phi_67_pred_3 = _2961;
                        frontier_phi_67_pred_4 = _2960;
                        frontier_phi_67_pred_5 = _2959;
                    }
                    else
                    {
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3172 = _2959;
                        float _3173 = _2960;
                        float _3174 = _2961;
                        float _3175 = _2962;
                        float _3176 = _2963;
                        float _3177 = _2964;
                        uint _3178 = _2974;
                        uint _3179;
                        vec4 _3204;
                        float _3205;
                        vec4 _3220;
                        vec3 _3232;
                        vec4 _3247;
                        vec4 _3262;
                        float _3308;
                        bool _3309;
                        for (;;)
                        {
                            uint _3189 = ((_2965 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3178));
                            _3179 = (_3178 + 4294967295u) & _3178;
                            uint _3191 = _3189 * 40u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            _3205 = _3204.w;
                            uint _3207 = (_3189 * 40u) + 4u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3222 = (_3189 * 40u) + 8u;
                            _3232 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x));
                            uint _3234 = (_3189 * 40u) + 16u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3249 = (_3189 * 40u) + 20u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3189 * 40u) + 24u;
                            vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3283 = (_3189 * 40u) + 28u;
                            vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3308 = fma(_2562, _3296.z, fma(_2561, _3296.y, _3296.x * _2560)) + _3296.w;
                            _3309 = !((fma(_2562, _3277.z, fma(_2561, _3277.y, _3277.x * _2560)) + _3277.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3309)
                            {
                                float _3336 = _3204.x - _2560;
                                float _3337 = _3204.y - _2561;
                                float _3338 = _3204.z - _2562;
                                float _3339 = dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338));
                                float _3342 = inversesqrt(_3339);
                                float _3343 = _3342 * _3336;
                                float _3344 = _3342 * _3337;
                                float _3345 = _3342 * _3338;
                                float _3349 = 1.0 - (_3339 / (_3205 * _3205));
                                float _4451 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3354 = sqrt(_3339) * _3220.w;
                                float _3356 = 1.39999997615814208984375 / (_3354 + 1.39999997615814208984375);
                                float _3357 = _3356 * _3356;
                                float _3360 = ((1.0 - _3357) * dot(vec3(_3343, _3344, _3345), vec3(_841, _844, _847))) + _3357;
                                float _3363 = _3354 * _3354;
                                float _3367 = (fma(_2562, _3247.z, fma(_2561, _3247.y, _3247.x * _2560)) + _3247.w) / _3308;
                                float _3368 = (fma(_2562, _3262.z, fma(_2561, _3262.y, _3262.x * _2560)) + _3262.w) / _3308;
                                float _3372 = 1.0 - dot(vec2(_3367, _3368), vec2(_3367, _3368));
                                float _4467 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3374 = _3373 * (((isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))) * _3350) / ((_3363 * 0.699999988079071044921875) + 1.0));
                                float _3386 = exp2(log2(1.0 / ((_3363 * 3.5) + 5.0)) * 0.25);
                                float _3387 = 1.0 - _901;
                                float _3394 = sqrt(1.0 - ((1.0 - (_3387 * _3387)) * (1.0 - (_3386 * _3386))));
                                float _3395 = _3394 * _3394;
                                float _3396 = _3395 * _3395;
                                float _3397 = _3343 - _2846;
                                float _3398 = _3344 - _2847;
                                float _3399 = _3345 - _2848;
                                float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                                float _3407 = dot(vec3(_841, _844, _847), vec3((-0.0) - _2846, (-0.0) - _2847, (-0.0) - _2848));
                                float _4478 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3411 = dot(vec3(_841, _844, _847), vec3(_3403 * _3397, _3403 * _3398, _3403 * _3399));
                                float _4489 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3414 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3418 = ((_3414 * _3414) * (_3396 + (-1.0))) + 1.0;
                                float _3419 = _3356 * _3395;
                                float _3420 = _3419 * _3419;
                                float _3426 = ((1.0 - _3420) * dot(vec3(_841, _844, _847), vec3(_3343, _3344, _3345))) + _3420;
                                float _4500 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3427 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3428 = 1.0 - _3395;
                                float _3438 = (0.5 / (((_3427 * ((_3410 * _3428) + _3395)) + 9.9999999392252902907785028219223e-09) + (((_3427 * _3428) + _3395) * _3410))) * _3427;
                                float _4511 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3448 = (_3373 * _3350) * (((_3396 * 3.1415927410125732421875) * (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) / ((_3418 * _3418) * ((_3363 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3448 * _3232.x;
                                frontier_phi_73_pred_1 = _3448 * _3232.y;
                                frontier_phi_73_pred_2 = _3374 * _3220.z;
                                frontier_phi_73_pred_3 = _3374 * _3220.y;
                                frontier_phi_73_pred_4 = _3374 * _3220.x;
                                frontier_phi_73_pred_5 = _3448 * _3232.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3452 = frontier_phi_73_pred;
                            _3453 = frontier_phi_73_pred_1;
                            _3457 = frontier_phi_73_pred_2;
                            _3456 = frontier_phi_73_pred_3;
                            _3455 = frontier_phi_73_pred_4;
                            _3454 = frontier_phi_73_pred_5;
                            _3162 = _3455 + _3175;
                            _3163 = _3456 + _3176;
                            _3164 = _3457 + _3177;
                            _3159 = _3452 + _3172;
                            _3160 = _3453 + _3173;
                            _3161 = _3454 + _3174;
                            if (_3179 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3179;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3162;
                        frontier_phi_67_pred_1 = _3163;
                        frontier_phi_67_pred_2 = _3164;
                        frontier_phi_67_pred_3 = _3161;
                        frontier_phi_67_pred_4 = _3160;
                        frontier_phi_67_pred_5 = _3159;
                    }
                    _2827 = frontier_phi_67_pred;
                    _2829 = frontier_phi_67_pred_1;
                    _2831 = frontier_phi_67_pred_2;
                    _2825 = frontier_phi_67_pred_3;
                    _2823 = frontier_phi_67_pred_4;
                    _2821 = frontier_phi_67_pred_5;
                    uint _2966 = _2965 + 1u;
                    if (_2966 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2959 = _2821;
                        _2960 = _2823;
                        _2961 = _2825;
                        _2962 = _2827;
                        _2963 = _2829;
                        _2964 = _2831;
                        _2965 = _2966;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2829;
                frontier_phi_55_56_ladder_1 = _2831;
                frontier_phi_55_56_ladder_2 = _2827;
                frontier_phi_55_56_ladder_3 = _2825;
                frontier_phi_55_56_ladder_4 = _2823;
                frontier_phi_55_56_ladder_5 = _2821;
            }
            else
            {
                frontier_phi_55_56_ladder = _2715;
                frontier_phi_55_56_ladder_1 = _2717;
                frontier_phi_55_56_ladder_2 = _2713;
                frontier_phi_55_56_ladder_3 = _2711;
                frontier_phi_55_56_ladder_4 = _2709;
                frontier_phi_55_56_ladder_5 = _2707;
            }
            _2820 = frontier_phi_55_56_ladder_5;
            _2822 = frontier_phi_55_56_ladder_4;
            _2824 = frontier_phi_55_56_ladder_3;
            _2826 = frontier_phi_55_56_ladder_2;
            _2828 = frontier_phi_55_56_ladder;
            _2830 = frontier_phi_55_56_ladder_1;
        }
        float _2835 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
        _2619 = (_2835 * _2826) + _2071;
        _2621 = (_2835 * _2828) + _2073;
        _2623 = (_2835 * _2830) + _2075;
        _2625 = ((_2820 * 0.039999999105930328369140625) * _2835) + _2404;
        _2627 = ((_2822 * 0.039999999105930328369140625) * _2835) + _2406;
        _2629 = ((_2824 * 0.039999999105930328369140625) * _2835) + _2408;
    }
    else
    {
        _2619 = _2071;
        _2621 = _2073;
        _2623 = _2075;
        _2625 = _2404;
        _2627 = _2406;
        _2629 = _2408;
    }
    float _4527 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4538 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4549 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    uint _2649 = _264 + 6u;
    float _2657 = _822 / cbSceneParam._m0[86u].x;
    float _2658 = _823 / cbSceneParam._m0[86u].y;
    vec4 _2672 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, (log2((isnan(cbSceneParam._m0[77u].w) ? _756 : (isnan(_756) ? cbSceneParam._m0[77u].w : min(_756, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2674 = _2672.x;
    float _2675 = _2672.y;
    float _2676 = _2672.z;
    float _2677 = _2672.w;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_756 > cbSceneParam._m0[78u].w)
    {
        float _2732 = isnan(_756) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _756 : min(cbSceneParam._m0[80u].w, _756));
        float _2733 = _2732 / _756;
        float _2744 = _2733 * _807;
        float _2745 = _808 * _2733;
        float _2746 = (-0.0) - _2745;
        float _2748 = _2733 * _809;
        float _2750 = (cbSceneParam._m0[77u].w * _2746) / _2732;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2745;
        float _2758 = sqrt(((_2744 * _2744) + (_2745 * _2745)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2732)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2768 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2746 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2768 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2881 = 1.0 / cbSceneParam._m0[80u].x;
            float _2882 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2883 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            _2921 = ((abs(_2758 / _2746) * cbSceneParam._m0[80u].y) * ((((_2892 - _2893) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))))) * _2881)) - ((exp2(_2768 * _2892) - exp2(_2768 * _2893)) * _2881))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2677);
        _2770 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2674;
        _2772 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2675;
        _2774 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2676;
        _2776 = _2932 * _2677;
    }
    else
    {
        _2770 = _2674;
        _2772 = _2675;
        _2774 = _2676;
        _2776 = _2677;
    }
    float _2788 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2789 = _2788 == 3.0;
    float _2790 = log2(_2776);
    float _2797 = exp2(_2790 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2619 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _885))) + ((_2625 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1690)) * cbPerFrame._m0[3u].x));
    float _2798 = exp2(_2790 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2621 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _885))) + ((_2627 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1690)) * cbPerFrame._m0[3u].x));
    float _2799 = exp2(_2790 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2623 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _885))) + ((_2629 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1690)) * cbPerFrame._m0[3u].x));
    float _2808 = (_2788 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2808 * (_2789 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.y = _2808 * (_2789 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
    SV_Target.z = _2808 * (_2789 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
    SV_Target.w = cbInstanceData._m0[_2649].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2649].w;
}


