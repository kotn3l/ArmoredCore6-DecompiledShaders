#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1387;
float _3767;
float _3768;
float _3769;
float _3770;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _338.x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3779 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _417 = (_410 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _418 = (_410 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _419 = (_410 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _468 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _482 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _338.y) * 2.0) - ((((_458 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3790 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _490 = (_483 * ((_436.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _491 = (_483 * ((_436.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _492 = (_483 * ((_436.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _270) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _271) + cbTextureTilingScale._m0[24u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _551 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _338.z) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[24u].z) + _539) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3801 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _559 = (_552 * ((_510.x * cbMtdParam._m0[14u].x) - _490)) + _490;
    float _560 = (_552 * ((_510.y * cbMtdParam._m0[14u].y) - _491)) + _491;
    float _561 = (_552 * ((_510.z * cbMtdParam._m0[14u].z) - _492)) + _492;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _618 = _616.x;
    float _619 = _616.y;
    float _620 = _616.z;
    float _627 = ((_599.x - _618) * _410) + _618;
    float _628 = ((_599.y - _619) * _410) + _619;
    float _629 = ((_599.z - _620) * _410) + _620;
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _652 = ((_641.x - _627) * _483) + _627;
    float _653 = ((_641.y - _628) * _483) + _628;
    float _654 = ((_641.z - _629) * _483) + _629;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _270) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _271) + cbTextureTilingScale._m0[23u].w));
    float _679 = ((_666.z - _654) * _552) + _654;
    float _682 = ((((_666.x - _652) * _552) + _652) * 2.0) + (-1.0);
    float _684 = ((((_666.y - _653) * _552) + _653) * 2.0) + (-1.0);
    float _685 = dot(vec2(_682, _684), vec2(_682, _684));
    float _3812 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _690 = sqrt(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))));
    vec4 _704 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _729 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _731 = _729.x;
    float _732 = 1.0 - _731;
    float _745 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_731 - _732) * cbMtdParam._m0[24u].w) + _732) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3823 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _746 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _753 = (_746 * ((_579.x * cbMtdParam._m0[18u].x) - _559)) + _559;
    float _754 = (_746 * ((_579.y * cbMtdParam._m0[18u].y) - _560)) + _560;
    float _755 = (_746 * ((_579.z * cbMtdParam._m0[18u].z) - _561)) + _561;
    float _759 = (cbMtdParam._m0[19u].w * (_704.z - _679)) + _679;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _779 = (_772.x * 2.0) + (-1.0);
    float _780 = (_772.y * 2.0) + (-1.0);
    float _781 = dot(vec2(_779, _780), vec2(_779, _780));
    float _3834 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _789 = (_746 * (_772.z - _759)) + _759;
    float _792 = (((_704.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _682;
    float _793 = (((_704.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _684;
    float _805 = (((_779 - _792) + (cbMtdParam._m0[21u].x * _792)) * _746) + _792;
    float _806 = (((_780 - _793) + (cbMtdParam._m0[21u].x * _793)) * _746) + _793;
    float _807 = (_746 * (sqrt(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) - _690)) + _690;
    float _811 = cbMtdParam._m0[22u].x + _704.w;
    float _814 = fma(_807, _237 * NORMAL.x, fma(_806, _244 * TANGENT.x, (_230 * _222) * _805));
    float _817 = fma(_807, _237 * NORMAL.y, fma(_806, _244 * TANGENT.y, (_230 * _223) * _805));
    float _820 = fma(_807, _237 * NORMAL.z, fma(_806, _244 * TANGENT.z, (_230 * _224) * _805));
    float _824 = inversesqrt(dot(vec3(_814, _817, _820), vec3(_814, _817, _820)));
    float _825 = _824 * _814;
    float _826 = _824 * _817;
    float _827 = _824 * _820;
    float _3845 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _828 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _3867 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _3878 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _3889 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _846 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _898 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _888);
    float _899 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _888);
    float _900 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _888);
    float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
    float _905 = _898 * _904;
    float _906 = _899 * _904;
    float _907 = _900 * _904;
    vec4 _912 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _914 = _912.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1068 = sqrt(((_898 * _898) + (_899 * _899)) + (_900 * _900));
        float _1074 = (cbMatDynParam._m0[5u].x * _1068) + cbMatDynParam._m0[5u].y;
        float _3900 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1079 = (cbMatDynParam._m0[5u].z * _1068) + cbMatDynParam._m0[5u].w;
        float _3911 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) - _1075)) + _1075) < ((_914 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _925 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _926 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _944 = fma(_827, cbSceneParam._m0[5u].z, fma(_826, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _825));
    float _947 = fma(_827, cbSceneParam._m0[6u].z, fma(_826, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _825));
    float _950 = fma(_827, cbSceneParam._m0[7u].z, fma(_826, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _825));
    uint _963 = _250 + 9u;
    uint _964 = _963 + uint(cbMatDynParam._m0[0u].w);
    float _970 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * cbInstanceData._m0[_964].x;
    float _971 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_964].y;
    float _972 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_964].z;
    float _3922 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    vec4 _984 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _925, cbSceneParam._m0[86u].y * _926));
    float _988 = ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * TEXCOORD_5.w) * _984.x;
    float _989 = dot(vec3(_825, _826, _827), vec3(_905, _906, _907));
    float _992 = _989 * 2.0;
    float _996 = (_992 * _825) - _905;
    float _997 = (_992 * _826) - _906;
    float _998 = (_992 * _827) - _907;
    float _1002 = abs(dot(vec3(_905, _906, _907), vec3(_825, _826, _827)));
    float _3955 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1004 = sqrt(_828);
    float _1017 = exp2((_1004 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1004 * 3.0));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1386;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1111 = fma(_1057, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049));
        float _1115 = fma(_1057, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049));
        float _1119 = fma(_1057, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049));
        float _1144 = _1049 + _825;
        float _1145 = _1053 + _826;
        float _1146 = _1057 + _827;
        float _1156 = fma(_1146, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144)) - _1111;
        float _1157 = fma(_1146, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144)) - _1115;
        float _1158 = fma(_1146, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144)) - _1119;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1111 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1115 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[34u].z) + ((((((_1119 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1214 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1180.x + (-0.5));
        float _1216 = _1214 * (_1180.y + (-0.5));
        float _1217 = _1214 * (_1180.z + (-0.5));
        float _1224 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1187.x + (-0.5));
        float _1226 = _1224 * (_1187.y + (-0.5));
        float _1227 = _1224 * (_1187.z + (-0.5));
        float _1234 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1194.x + (-0.5));
        float _1236 = _1234 * (_1194.y + (-0.5));
        float _1237 = _1234 * (_1194.z + (-0.5));
        float _1244 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1201.x + (-0.5));
        float _1246 = _1244 * (_1201.y + (-0.5));
        float _1247 = _1244 * (_1201.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1268 = (dot(vec3(_825, _826, _827), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1278 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4003 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1280 + 1.0))) + _1285) * _1248;
        float _1295 = _1216 * 0.5;
        float _1296 = _1226 * 0.5;
        float _1297 = _1236 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_825, _826, _827), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4036 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1322 + 1.0))) + _1327) * _1249;
        float _1337 = _1217 * 0.5;
        float _1338 = _1227 * 0.5;
        float _1339 = _1237 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_825, _826, _827), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4069 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1364 + 1.0))) + _1369) * _1250;
        _1386 = _1217;
        _1388 = _1216;
        _1389 = _1215;
        _1390 = _1227;
        _1391 = _1226;
        _1392 = _1225;
        _1393 = _1237;
        _1394 = _1236;
        _1395 = _1235;
        _1396 = _1250;
        _1397 = _1249;
        _1398 = _1248;
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
    }
    else
    {
        _1386 = _1387;
        _1388 = _1387;
        _1389 = _1387;
        _1390 = _1387;
        _1391 = _1387;
        _1392 = _1387;
        _1393 = _1387;
        _1394 = _1387;
        _1395 = _1387;
        _1396 = _1387;
        _1397 = _1387;
        _1398 = _1387;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1427 = fma(_1057, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049));
        float _1431 = fma(_1057, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049));
        float _1435 = fma(_1057, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049));
        float _1458 = _1049 + _825;
        float _1459 = _1053 + _826;
        float _1460 = _1057 + _827;
        float _1470 = fma(_1460, cbModelParam._m0[30u].z, fma(_1459, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1458)) - _1427;
        float _1471 = fma(_1460, cbModelParam._m0[31u].z, fma(_1459, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1458)) - _1431;
        float _1472 = fma(_1460, cbModelParam._m0[32u].z, fma(_1459, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1458)) - _1435;
        float _1476 = inversesqrt(dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472)));
        float _1489 = ((_1476 * _1470) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1427 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1476 * _1471) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1431 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1491 = ((_1476 * _1472) / cbModelParam._m0[35u].z) + ((((((_1435 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        float _1526 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1493.x + (-0.5));
        float _1528 = _1526 * (_1493.y + (-0.5));
        float _1529 = _1526 * (_1493.z + (-0.5));
        float _1536 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1500.x + (-0.5));
        float _1538 = _1536 * (_1500.y + (-0.5));
        float _1539 = _1536 * (_1500.z + (-0.5));
        float _1546 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1507.x + (-0.5));
        float _1548 = _1546 * (_1507.y + (-0.5));
        float _1549 = _1546 * (_1507.z + (-0.5));
        float _1556 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1514.x + (-0.5));
        float _1558 = _1556 * (_1514.y + (-0.5));
        float _1559 = _1556 * (_1514.z + (-0.5));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = _1527 * 0.5;
        float _1564 = _1537 * 0.5;
        float _1565 = _1547 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_825, _826, _827), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4132 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1590 + 1.0))) + _1595) * _1560;
        float _1605 = _1528 * 0.5;
        float _1606 = _1538 * 0.5;
        float _1607 = _1548 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_825, _826, _827), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4165 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1632 + 1.0))) + _1637) * _1561;
        float _1647 = _1529 * 0.5;
        float _1648 = _1539 * 0.5;
        float _1649 = _1549 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_825, _826, _827), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4198 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1674 + 1.0))) + _1679) * _1562;
        _1696 = _1529;
        _1697 = _1528;
        _1698 = _1527;
        _1699 = _1539;
        _1700 = _1538;
        _1701 = _1537;
        _1702 = _1549;
        _1703 = _1548;
        _1704 = _1547;
        _1705 = _1562;
        _1706 = _1561;
        _1707 = _1560;
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
    }
    else
    {
        _1696 = _1387;
        _1697 = _1387;
        _1698 = _1387;
        _1699 = _1387;
        _1700 = _1387;
        _1701 = _1387;
        _1702 = _1387;
        _1703 = _1387;
        _1704 = _1387;
        _1705 = _1387;
        _1706 = _1387;
        _1707 = _1387;
        _1708 = 0.0;
        _1709 = 0.0;
        _1710 = 0.0;
    }
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1399)) + _1399;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1400)) + _1400;
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1401)) + _1401;
    float _1743 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1746 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1749 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1720));
    float _1764 = _996 * 0.5;
    float _1765 = _997 * 0.5;
    float _1766 = _998 * 0.5;
    float _1767 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1770 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1773 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1807;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1780 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1386, _1390, _1393, _1396));
        float _1784 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1388, _1391, _1394, _1397));
        float _1788 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1795 = dot(vec4(cbModelParam._m0[39u]), vec4(_1764, _1765, _1766, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1818;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1809 = dot(vec4(cbModelParam._m0[40u]), vec4(_1764, _1765, _1766, 1.0));
        _1818 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1809) ? 0.0 : (isnan(0.0) ? _1809 : max(0.0, _1809))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1818 = 1.0;
    }
    float _1822 = (_1818 * cbModelParam._m0[1u].x) + (_1807 * (1.0 - cbModelParam._m0[1u].x));
    float _1832 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _828);
    float _1833 = isnan(_1832) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1832 : min(cbModelParam._m0[25u].z, _1832));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1880 = fma(_1057, cbModelParam._m0[13u].z, fma(_1053, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049)) + cbModelParam._m0[13u].w;
        float _1884 = fma(_1057, cbModelParam._m0[14u].z, fma(_1053, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049)) + cbModelParam._m0[14u].w;
        float _1888 = fma(_1057, cbModelParam._m0[15u].z, fma(_1053, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049)) + cbModelParam._m0[15u].w;
        float _1891 = fma(_998, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996));
        float _1894 = fma(_998, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996));
        float _1897 = fma(_998, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996));
        float _1925;
        if (_1891 > 0.0)
        {
            _1925 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1925 = frontier_phi_17_15_ladder;
        }
        float _2146;
        if (_1894 > 0.0)
        {
            _2146 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2146 = frontier_phi_26_22_ladder;
        }
        float _2392;
        if (_1897 > 0.0)
        {
            _2392 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2392 = frontier_phi_38_33_ladder;
        }
        float _2394 = isnan(_2146) ? _1925 : (isnan(_1925) ? _2146 : min(_1925, _2146));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1891) + _1880;
        float _2400 = (_2395 * _1894) + _1884;
        float _2401 = (_2395 * _1897) + _1888;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2402;
        float _2406 = _2402 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 > _2406) || ((_2400 < _2404) || ((_2399 < _2404) || (_2399 > _2406))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2401, cbModelParam._m0[9u].z, fma(_2400, cbModelParam._m0[9u].y, _2399 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2401, cbModelParam._m0[10u].z, fma(_2400, cbModelParam._m0[10u].y, _2399 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2401, cbModelParam._m0[11u].z, fma(_2400, cbModelParam._m0[11u].y, _2399 * cbModelParam._m0[11u].x))), _1833);
            frontier_phi_16_38_ladder = _2525.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2525.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2525.x * cbModelParam._m0[1u].y;
        }
        _1913 = frontier_phi_16_38_ladder_2;
        _1915 = frontier_phi_16_38_ladder_1;
        _1917 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_996, _997, _998), _1833);
        _1913 = _1901.x * cbModelParam._m0[1u].y;
        _1915 = _1901.y * cbModelParam._m0[1u].y;
        _1917 = _1901.z * cbModelParam._m0[1u].y;
    }
    float _1921 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _828);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1921 : min(cbModelParam._m0[25u].w, _1921));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1975 = fma(_1057, cbModelParam._m0[21u].z, fma(_1053, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049)) + cbModelParam._m0[21u].w;
        float _1979 = fma(_1057, cbModelParam._m0[22u].z, fma(_1053, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049)) + cbModelParam._m0[22u].w;
        float _1983 = fma(_1057, cbModelParam._m0[23u].z, fma(_1053, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049)) + cbModelParam._m0[23u].w;
        float _1986 = fma(_998, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996));
        float _1989 = fma(_998, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996));
        float _1992 = fma(_998, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996));
        float _2151;
        if (_1986 > 0.0)
        {
            _2151 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2151 = frontier_phi_28_24_ladder;
        }
        float _2419;
        if (_1989 > 0.0)
        {
            _2419 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2419 = frontier_phi_40_35_ladder;
        }
        float _2624;
        if (_1992 > 0.0)
        {
            _2624 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2624 = frontier_phi_49_46_ladder;
        }
        float _2626 = isnan(_2419) ? _2151 : (isnan(_2151) ? _2419 : min(_2151, _2419));
        float _2627 = isnan(_2624) ? _2626 : (isnan(_2626) ? _2624 : min(_2626, _2624));
        float _2631 = (_2627 * _1986) + _1975;
        float _2632 = (_2627 * _1989) + _1979;
        float _2633 = (_2627 * _1992) + _1983;
        float _2634 = _2627 * 9.9999997473787516355514526367188e-05;
        float _2635 = (-1.0) - _2634;
        float _2637 = _2634 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2633 > _2637) || ((_2633 < _2635) || ((_2632 > _2637) || ((_2632 < _2635) || ((_2631 < _2635) || (_2631 > _2637))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2633, cbModelParam._m0[17u].z, fma(_2632, cbModelParam._m0[17u].y, _2631 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2633, cbModelParam._m0[18u].z, fma(_2632, cbModelParam._m0[18u].y, _2631 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2633, cbModelParam._m0[19u].z, fma(_2632, cbModelParam._m0[19u].y, _2631 * cbModelParam._m0[19u].x))), _1922);
            frontier_phi_25_49_ladder = _2832.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2832.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2832.x * cbModelParam._m0[1u].z;
        }
        _2011 = frontier_phi_25_49_ladder_2;
        _2013 = frontier_phi_25_49_ladder_1;
        _2015 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_996, _997, _998), _1922);
        _2011 = _1995.x * cbModelParam._m0[1u].z;
        _2013 = _1995.y * cbModelParam._m0[1u].z;
        _2015 = _1995.z * cbModelParam._m0[1u].z;
    }
    float _2027 = ((((1.0 - _1017) * ((_1004 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1017 * _1004)) * _988;
    float _2028 = _2027 * ((cbModelParam._m0[1u].w * (_2011 - _1913)) + _1913);
    float _2029 = _2027 * ((cbModelParam._m0[1u].w * (_2013 - _1915)) + _1915);
    float _2030 = _2027 * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2033 = fma(_2030, cbSceneParam._m0[89u].z, fma(_2029, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2036 = fma(_2030, cbSceneParam._m0[90u].z, fma(_2029, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2039 = fma(_2030, cbSceneParam._m0[91u].z, fma(_2029, cbSceneParam._m0[91u].y, _2028 * cbSceneParam._m0[91u].x));
    vec4 _2047 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_925, _926));
    float _2049 = _2047.w;
    float _2061 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2049);
    float _2062 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2049);
    float _2063 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2049);
    uvec4 _2067 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2069 = _2067.x * 14u;
    uint _2070 = _2069 + 13u;
    float _2077 = _988 + (-1.0);
    float _2082 = (cbLight._m0[_2070].x * _2077) + 1.0;
    float _2083 = (cbLight._m0[_2070].y * _2077) + 1.0;
    float _2084 = (cbLight._m0[_2070].z * _2077) + 1.0;
    float _2085 = (cbLight._m0[_2070].w * _2077) + 1.0;
    uint _2086 = _2069 + 5u;
    float _2092 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    uint _2096 = _2069 + 4u;
    float _2105 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
    uint _2109 = _2069 | 1u;
    float _2120 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_825, _826, _827));
    float _2123 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_825, _826, _827));
    float _4334 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _4345 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2128 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * 0.3183098733425140380859375;
    float _2130 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2137 = ((cbLight._m0[_2086].x * _2092) * _2130) + (((cbLight._m0[_2096].x * _2061) * _2105) * _2128);
    float _2138 = ((_2092 * cbLight._m0[_2086].y) * _2130) + (((cbLight._m0[_2096].y * _2062) * _2105) * _2128);
    float _2139 = ((_2092 * cbLight._m0[_2086].z) * _2130) + (((cbLight._m0[_2096].z * _2063) * _2105) * _2128);
    uvec4 _2143 = floatBitsToUint(cbLight._m0[_2069 + 12u]);
    bool _2145 = _2143.x == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2145)
    {
        _2156 = _2137;
        _2158 = _2138;
        _2160 = _2139;
    }
    else
    {
        uint _2164 = _2069 + 6u;
        float _2180 = (dot(vec3(cbLight._m0[_2069 + 2u].xyz), vec3(_825, _826, _827)) * 0.5) + 0.5;
        float _2181 = _2180 * _2180;
        float _4356 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2183 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2156 = (((cbLight._m0[_2164].x * 0.3183098733425140380859375) * _2182) * _2183) + _2137;
        _2158 = (((cbLight._m0[_2164].y * 0.3183098733425140380859375) * _2182) * _2183) + _2138;
        _2160 = (((cbLight._m0[_2164].z * 0.3183098733425140380859375) * _2182) * _2183) + _2139;
    }
    bool _2163 = _2143.y == 0u;
    float _2201;
    float _2203;
    float _2205;
    if (_2163)
    {
        _2201 = _2156;
        _2203 = _2158;
        _2205 = _2160;
    }
    else
    {
        uint _2363 = _2069 + 7u;
        float _2379 = (dot(vec3(cbLight._m0[_2069 + 3u].xyz), vec3(_825, _826, _827)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4372 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2382 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2201 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2156;
        _2203 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2158;
        _2205 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2160;
    }
    uint _2208 = _2069 + 8u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _828) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_2069].x + _905;
    float _2224 = cbLight._m0[_2069].y + _906;
    float _2225 = cbLight._m0[_2069].z + _907;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2069].xyz));
    float _4388 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _4399 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _2237 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2238 = dot(vec3(_825, _826, _827), vec3(_2230, _2231, _2232));
    float _4410 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2230, _2231, _2232));
    float _4421 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2222 * _2222;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2261 = (exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2262 = 1.0 - _2222;
    float _2273 = (0.5 / (((_2237 * ((_2236 * _2262) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2262) + _2222) * _2236))) * _2236;
    float _4432 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    uint _2289 = _2069 + 9u;
    float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _828) * 0.949999988079071044921875);
    float _2301 = _2300 * _2300;
    float _2302 = cbLight._m0[_2109].x + _905;
    float _2303 = cbLight._m0[_2109].y + _906;
    float _2304 = cbLight._m0[_2109].z + _907;
    float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
    float _2309 = _2308 * _2302;
    float _2310 = _2308 * _2303;
    float _2311 = _2308 * _2304;
    float _2312 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2109].xyz));
    float _4443 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2316 = dot(vec3(_825, _826, _827), vec3(_2309, _2310, _2311));
    float _4454 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2320 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2309, _2310, _2311));
    float _4465 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2324 = _2301 * _2301;
    float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
    float _2337 = (exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2338 = 1.0 - _2301;
    float _2348 = (0.5 / (((_2237 * ((_2315 * _2338) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2338) + _2301) * _2315))) * _2315;
    float _4476 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
    float _2360 = (((_2337 * cbLight._m0[_2289].x) * _2350) * _2092) + ((((cbLight._m0[_2208].x * _2061) * _2261) * _2275) * _2105);
    float _2361 = (((_2337 * cbLight._m0[_2289].y) * _2350) * _2092) + ((((cbLight._m0[_2208].y * _2062) * _2261) * _2275) * _2105);
    float _2362 = (((_2337 * cbLight._m0[_2289].z) * _2350) * _2092) + ((((cbLight._m0[_2208].z * _2063) * _2261) * _2275) * _2105);
    float _2424;
    float _2426;
    float _2428;
    if (_2145)
    {
        _2424 = _2360;
        _2426 = _2361;
        _2428 = _2362;
    }
    else
    {
        uint _2430 = _2069 + 2u;
        uint _2434 = _2069 + 10u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _828) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _905;
        float _2451 = cbLight._m0[_2430].y + _906;
        float _2452 = cbLight._m0[_2430].z + _907;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2430].xyz));
        float _4487 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2464 = dot(vec3(_825, _826, _827), vec3(_2457, _2458, _2459));
        float _4498 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4509 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2485 = (exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2486 = 1.0 - _2449;
        float _2496 = (0.5 / (((_2237 * ((_2463 * _2486) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2486) + _2449) * _2463))) * _2463;
        float _4520 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2424 = (((_2485 * cbLight._m0[_2434].x) * _2498) * _2499) + _2360;
        _2426 = (((_2485 * cbLight._m0[_2434].y) * _2498) * _2499) + _2361;
        _2428 = (((_2485 * cbLight._m0[_2434].z) * _2498) * _2499) + _2362;
    }
    float _2534;
    float _2536;
    float _2538;
    if (_2163)
    {
        _2534 = _2424;
        _2536 = _2426;
        _2538 = _2428;
    }
    else
    {
        uint _2545 = _2069 + 3u;
        uint _2549 = _2069 + 11u;
        float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2545].w)) * _828) * 0.949999988079071044921875);
        float _2564 = _2563 * _2563;
        float _2565 = cbLight._m0[_2545].x + _905;
        float _2566 = cbLight._m0[_2545].y + _906;
        float _2567 = cbLight._m0[_2545].z + _907;
        float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
        float _2572 = _2571 * _2565;
        float _2573 = _2571 * _2566;
        float _2574 = _2571 * _2567;
        float _2575 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2545].xyz));
        float _4536 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2579 = dot(vec3(_825, _826, _827), vec3(_2572, _2573, _2574));
        float _4547 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2583 = dot(vec3(cbLight._m0[_2545].xyz), vec3(_2572, _2573, _2574));
        float _4558 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2587 = _2564 * _2564;
        float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
        float _2600 = (exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2601 = 1.0 - _2564;
        float _2611 = (0.5 / (((_2237 * ((_2578 * _2601) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2601) + _2564) * _2578))) * _2578;
        float _4569 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2613 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
        float _2614 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2534 = (((_2600 * cbLight._m0[_2549].x) * _2613) * _2614) + _2424;
        _2536 = (((_2600 * cbLight._m0[_2549].y) * _2613) * _2614) + _2426;
        _2538 = (((_2600 * cbLight._m0[_2549].z) * _2613) * _2614) + _2428;
    }
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_2067.y == 0u)
    {
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2689;
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2689;
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2689;
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.x;
        uint _2716 = uint((float(_2704.y) * floor(float(uint(cbSceneParam._m0[85u].y * _926) / _2705))) + floor(float(uint(cbSceneParam._m0[85u].x * _925) / _2705)));
        float _2726 = (log2(_2692 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2727 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        uint _2730 = uint(isnan(14.0) ? _2727 : (isnan(_2727) ? 14.0 : min(_2727, 14.0)));
        uvec4 _2735 = texelFetch(g_lightClusterGridBuffer, int(((_2730 << 2u) + (_2716 << 6u)) >> 2u));
        uint _2736 = _2735.x;
        uint _2737 = _2704.z;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        if (((((1u << ((_2737 >> 4u) & 15u)) + 4294967295u) & _2736) == 0u) || ((_2737 & 240u) == 0u))
        {
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
        }
        else
        {
            float _2838;
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            uint _2996 = 0u;
            uint _3005;
            bool _3006;
            for (;;)
            {
                _3005 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_2996 << 2u)) >> 2u)).x;
                _3006 = _3005 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3006)
                {
                    frontier_phi_66_pred = _2990;
                    frontier_phi_66_pred_1 = _2995;
                    frontier_phi_66_pred_2 = _2994;
                    frontier_phi_66_pred_3 = _2993;
                    frontier_phi_66_pred_4 = _2992;
                    frontier_phi_66_pred_5 = _2991;
                }
                else
                {
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    uint _3141;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _3005;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    for (;;)
                    {
                        uint _3145 = uint(findLSB(_3141)) + (_2996 << 5u);
                        uint _3142 = (_3141 + 4294967295u) & _3141;
                        uint _3147 = _3145 * 48u;
                        vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 3u)).x));
                        uint _3167 = (_3145 * 48u) + 4u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3186 = (_3145 * 48u) + 8u;
                        vec3 _3197 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x));
                        float _3201 = _3161.x - _2690;
                        float _3202 = _3161.y - _2691;
                        float _3203 = _3161.z - _2692;
                        float _3204 = dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203));
                        float _3207 = inversesqrt(_3204);
                        float _3208 = _3207 * _3201;
                        float _3209 = _3207 * _3202;
                        float _3210 = _3207 * _3203;
                        float _3211 = dot(vec3(_944, _947, _950), vec3(_3208, _3209, _3210));
                        float _3216 = 1.0 - (_3204 * _3161.w);
                        float _4595 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3217 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3218 = sqrt(_3204) * _3180.w;
                        float _3221 = 1.39999997615814208984375 / (_3218 + 1.39999997615814208984375);
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3211) + _3222;
                        float _3228 = _3218 * _3218;
                        float _3232 = ((isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))) * _3217) / ((_3228 * 0.699999988079071044921875) + 1.0);
                        float _3236 = (-0.0) - _2690;
                        float _3237 = (-0.0) - _2691;
                        float _3238 = (-0.0) - _2692;
                        float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                        float _3243 = _3242 * _3236;
                        float _3244 = _3242 * _3237;
                        float _3245 = _3242 * _3238;
                        float _3253 = exp2(log2(1.0 / ((_3228 * 3.5) + 5.0)) * 0.25);
                        float _3254 = 1.0 - _1004;
                        float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                        float _3262 = _3261 * _3261;
                        float _3263 = _3262 * _3262;
                        float _3264 = _3243 + _3208;
                        float _3265 = _3244 + _3209;
                        float _3266 = _3245 + _3210;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3274 = dot(vec3(_944, _947, _950), vec3(_3243, _3244, _3245));
                        float _4611 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3277 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3278 = dot(vec3(_944, _947, _950), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                        float _4622 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                        float _3286 = _3221 * _3262;
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3211) + _3287;
                        float _4633 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3292 = 1.0 - _3262;
                        float _3302 = (0.5 / (((_3291 * ((_3277 * _3292) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3291 * _3292) + _3262) * _3277))) * _3291;
                        float _4644 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3313 = (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) / ((_3285 * _3285) * ((_3228 * 2.1991131305694580078125) + 3.141590118408203125))) * _3217;
                        _3065 = (_3232 * _3180.x) + _3138;
                        _3066 = (_3232 * _3180.y) + _3139;
                        _3067 = (_3232 * _3180.z) + _3140;
                        _3062 = (_3313 * _3197.x) + _3135;
                        _3063 = (_3313 * _3197.y) + _3136;
                        _3064 = (_3313 * _3197.z) + _3137;
                        if (_3142 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3142;
                        }
                    }
                    frontier_phi_66_pred = _3062;
                    frontier_phi_66_pred_1 = _3067;
                    frontier_phi_66_pred_2 = _3066;
                    frontier_phi_66_pred_3 = _3065;
                    frontier_phi_66_pred_4 = _3064;
                    frontier_phi_66_pred_5 = _3063;
                }
                _2838 = frontier_phi_66_pred;
                _2848 = frontier_phi_66_pred_1;
                _2846 = frontier_phi_66_pred_2;
                _2844 = frontier_phi_66_pred_3;
                _2842 = frontier_phi_66_pred_4;
                _2840 = frontier_phi_66_pred_5;
                uint _2997 = _2996 + 1u;
                if (_2997 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2990 = _2838;
                    _2991 = _2840;
                    _2992 = _2842;
                    _2993 = _2844;
                    _2994 = _2846;
                    _2995 = _2848;
                    _2996 = _2997;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
        }
        uvec4 _2851 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2852 = _2851.z;
        uint _2854 = (_2852 >> 8u) & 15u;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((4294967295u << _2854) & _2736) == 0u)
        {
            _2958 = _2837;
            _2960 = _2839;
            _2962 = _2841;
            _2964 = _2843;
            _2966 = _2845;
            _2968 = _2847;
        }
        else
        {
            float _2983 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
            float _2984 = _2983 * _2690;
            float _2985 = _2983 * _2691;
            float _2986 = _2983 * _2692;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2854 < ((_2852 >> 12u) & 15u))
            {
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _3118 = _2837;
                float _3119 = _2839;
                float _3120 = _2841;
                float _3121 = _2843;
                float _3122 = _2845;
                float _3123 = _2847;
                uint _3124 = _2854;
                uint _3133;
                bool _3134;
                for (;;)
                {
                    _3133 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_3124 << 2u)) >> 2u)).x;
                    _3134 = _3133 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3134)
                    {
                        frontier_phi_77_pred = _3123;
                        frontier_phi_77_pred_1 = _3122;
                        frontier_phi_77_pred_2 = _3121;
                        frontier_phi_77_pred_3 = _3120;
                        frontier_phi_77_pred_4 = _3119;
                        frontier_phi_77_pred_5 = _3118;
                    }
                    else
                    {
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3340 = _3118;
                        float _3341 = _3119;
                        float _3342 = _3120;
                        float _3343 = _3121;
                        float _3344 = _3122;
                        float _3345 = _3123;
                        uint _3346 = _3133;
                        uint _3347;
                        vec4 _3372;
                        float _3373;
                        vec4 _3388;
                        vec3 _3400;
                        vec4 _3415;
                        vec4 _3430;
                        float _3476;
                        bool _3477;
                        for (;;)
                        {
                            uint _3357 = ((_3124 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3346));
                            _3347 = (_3346 + 4294967295u) & _3346;
                            uint _3359 = _3357 * 40u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3373 = _3372.w;
                            uint _3375 = (_3357 * 40u) + 4u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3357 * 40u) + 8u;
                            _3400 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x));
                            uint _3402 = (_3357 * 40u) + 16u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3417 = (_3357 * 40u) + 20u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3357 * 40u) + 24u;
                            vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3451 = (_3357 * 40u) + 28u;
                            vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3476 = fma(_2692, _3464.z, fma(_2691, _3464.y, _3464.x * _2690)) + _3464.w;
                            _3477 = !((fma(_2692, _3445.z, fma(_2691, _3445.y, _3445.x * _2690)) + _3445.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3477)
                            {
                                float _3504 = _3372.x - _2690;
                                float _3505 = _3372.y - _2691;
                                float _3506 = _3372.z - _2692;
                                float _3507 = dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506));
                                float _3510 = inversesqrt(_3507);
                                float _3511 = _3510 * _3504;
                                float _3512 = _3510 * _3505;
                                float _3513 = _3510 * _3506;
                                float _3517 = 1.0 - (_3507 / (_3373 * _3373));
                                float _4655 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3522 = sqrt(_3507) * _3388.w;
                                float _3524 = 1.39999997615814208984375 / (_3522 + 1.39999997615814208984375);
                                float _3525 = _3524 * _3524;
                                float _3528 = ((1.0 - _3525) * dot(vec3(_3511, _3512, _3513), vec3(_944, _947, _950))) + _3525;
                                float _3531 = _3522 * _3522;
                                float _3535 = (fma(_2692, _3415.z, fma(_2691, _3415.y, _3415.x * _2690)) + _3415.w) / _3476;
                                float _3536 = (fma(_2692, _3430.z, fma(_2691, _3430.y, _3430.x * _2690)) + _3430.w) / _3476;
                                float _3540 = 1.0 - dot(vec2(_3535, _3536), vec2(_3535, _3536));
                                float _4671 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3542 = _3541 * (((isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0))) * _3518) / ((_3531 * 0.699999988079071044921875) + 1.0));
                                float _3554 = exp2(log2(1.0 / ((_3531 * 3.5) + 5.0)) * 0.25);
                                float _3555 = 1.0 - _1004;
                                float _3562 = sqrt(1.0 - ((1.0 - (_3555 * _3555)) * (1.0 - (_3554 * _3554))));
                                float _3563 = _3562 * _3562;
                                float _3564 = _3563 * _3563;
                                float _3565 = _3511 - _2984;
                                float _3566 = _3512 - _2985;
                                float _3567 = _3513 - _2986;
                                float _3571 = inversesqrt(dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567)));
                                float _3575 = dot(vec3(_944, _947, _950), vec3((-0.0) - _2984, (-0.0) - _2985, (-0.0) - _2986));
                                float _4682 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3578 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3579 = dot(vec3(_944, _947, _950), vec3(_3571 * _3565, _3571 * _3566, _3571 * _3567));
                                float _4693 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3586 = ((_3582 * _3582) * (_3564 + (-1.0))) + 1.0;
                                float _3587 = _3524 * _3563;
                                float _3588 = _3587 * _3587;
                                float _3594 = ((1.0 - _3588) * dot(vec3(_944, _947, _950), vec3(_3511, _3512, _3513))) + _3588;
                                float _4704 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3596 = 1.0 - _3563;
                                float _3606 = (0.5 / (((_3595 * ((_3578 * _3596) + _3563)) + 9.9999999392252902907785028219223e-09) + (((_3595 * _3596) + _3563) * _3578))) * _3595;
                                float _4715 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3616 = (_3541 * _3518) * (((_3564 * 3.1415927410125732421875) * (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) / ((_3586 * _3586) * ((_3531 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3542 * _3388.y;
                                frontier_phi_83_pred_1 = _3542 * _3388.x;
                                frontier_phi_83_pred_2 = _3616 * _3400.z;
                                frontier_phi_83_pred_3 = _3616 * _3400.y;
                                frontier_phi_83_pred_4 = _3616 * _3400.x;
                                frontier_phi_83_pred_5 = _3542 * _3388.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3624 = frontier_phi_83_pred;
                            _3623 = frontier_phi_83_pred_1;
                            _3622 = frontier_phi_83_pred_2;
                            _3621 = frontier_phi_83_pred_3;
                            _3620 = frontier_phi_83_pred_4;
                            _3625 = frontier_phi_83_pred_5;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            if (_3347 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3347;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3332;
                        frontier_phi_77_pred_1 = _3331;
                        frontier_phi_77_pred_2 = _3330;
                        frontier_phi_77_pred_3 = _3329;
                        frontier_phi_77_pred_4 = _3328;
                        frontier_phi_77_pred_5 = _3327;
                    }
                    _2969 = frontier_phi_77_pred;
                    _2967 = frontier_phi_77_pred_1;
                    _2965 = frontier_phi_77_pred_2;
                    _2963 = frontier_phi_77_pred_3;
                    _2961 = frontier_phi_77_pred_4;
                    _2959 = frontier_phi_77_pred_5;
                    uint _3125 = _3124 + 1u;
                    if (_3125 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3118 = _2959;
                        _3119 = _2961;
                        _3120 = _2963;
                        _3121 = _2965;
                        _3122 = _2967;
                        _3123 = _2969;
                        _3124 = _3125;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2963;
                frontier_phi_58_59_ladder_1 = _2969;
                frontier_phi_58_59_ladder_2 = _2967;
                frontier_phi_58_59_ladder_3 = _2965;
                frontier_phi_58_59_ladder_4 = _2961;
                frontier_phi_58_59_ladder_5 = _2959;
            }
            else
            {
                frontier_phi_58_59_ladder = _2841;
                frontier_phi_58_59_ladder_1 = _2847;
                frontier_phi_58_59_ladder_2 = _2845;
                frontier_phi_58_59_ladder_3 = _2843;
                frontier_phi_58_59_ladder_4 = _2839;
                frontier_phi_58_59_ladder_5 = _2837;
            }
            _2958 = frontier_phi_58_59_ladder_5;
            _2960 = frontier_phi_58_59_ladder_4;
            _2962 = frontier_phi_58_59_ladder;
            _2964 = frontier_phi_58_59_ladder_3;
            _2966 = frontier_phi_58_59_ladder_2;
            _2968 = frontier_phi_58_59_ladder_1;
        }
        float _2973 = isnan(1.0) ? _988 : (isnan(_988) ? 1.0 : min(_988, 1.0));
        _2749 = (_2973 * _2964) + _2201;
        _2751 = (_2973 * _2966) + _2203;
        _2753 = (_2973 * _2968) + _2205;
        _2755 = ((_2958 * 0.039999999105930328369140625) * _2973) + _2534;
        _2757 = ((_2960 * 0.039999999105930328369140625) * _2973) + _2536;
        _2759 = ((_2962 * 0.039999999105930328369140625) * _2973) + _2538;
    }
    else
    {
        _2749 = _2201;
        _2751 = _2203;
        _2753 = _2205;
        _2755 = _2534;
        _2757 = _2536;
        _2759 = _2538;
    }
    float _4731 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4742 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4753 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2776 = ((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2749 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _988))) + ((_2755 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    float _2777 = ((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2751 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _988))) + ((_2757 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    float _2778 = ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2753 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _988))) + ((_2759 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    uint _2779 = _250 + 6u;
    float _2787 = _925 / cbSceneParam._m0[86u].x;
    float _2788 = _926 / cbSceneParam._m0[86u].y;
    vec4 _2802 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, (log2((isnan(cbSceneParam._m0[77u].w) ? _846 : (isnan(_846) ? cbSceneParam._m0[77u].w : min(_846, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2804 = _2802.x;
    float _2805 = _2802.y;
    float _2806 = _2802.z;
    float _2807 = _2802.w;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_846 > cbSceneParam._m0[78u].w)
    {
        float _2862 = isnan(_846) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _846 : min(cbSceneParam._m0[80u].w, _846));
        float _2863 = _2862 / _846;
        float _2874 = _2863 * _898;
        float _2875 = _899 * _2863;
        float _2876 = (-0.0) - _2875;
        float _2878 = _2863 * _900;
        float _2880 = (cbSceneParam._m0[77u].w * _2876) / _2862;
        float _2881 = _2880 + cbSceneParam._m0[79u].w;
        float _2882 = cbSceneParam._m0[79u].w - _2875;
        float _2888 = sqrt(((_2874 * _2874) + (_2875 * _2875)) + (_2878 * _2878));
        float _2891 = (1.0 - (cbSceneParam._m0[77u].w / _2862)) * _2888;
        float _2896 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2898 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3075;
        if (abs((_2876 - _2880) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3075 = ((((_2881 > 0.0) ? exp2(_2896 * _2881) : (2.0 - exp2(_2898 * _2881))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2891;
        }
        else
        {
            float _3019 = 1.0 / cbSceneParam._m0[80u].x;
            float _3020 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : max(_2881, _2882));
            float _3021 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : min(_2881, _2882));
            float _3030 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : min(_3020, 0.0));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            _3075 = ((abs(_2888 / _2876) * cbSceneParam._m0[80u].y) * ((((_3030 - _3031) * 2.0) - ((exp2(_2896 * (isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0)))) - exp2(_2896 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))))) * _3019)) - ((exp2(_2898 * _3030) - exp2(_2898 * _3031)) * _3019))) + (_2891 * cbSceneParam._m0[80u].z);
        }
        vec4 _3077 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, 1.0), 0.0);
        float _3086 = exp2((_3075 * (-1.44269502162933349609375)) * (1.0 - _3077.w));
        float _3087 = log2(_3086);
        float _3103 = log2(_2807);
        _2900 = (exp2(_3103 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].x)) * _3077.x) / cbSceneParam._m0[78u].x)) + _2804;
        _2902 = (exp2(_3103 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].y)) * _3077.y) / cbSceneParam._m0[78u].y)) + _2805;
        _2904 = (exp2(_3103 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].z)) * _3077.z) / cbSceneParam._m0[78u].z)) + _2806;
        _2906 = _3086 * _2807;
    }
    else
    {
        _2900 = _2804;
        _2902 = _2805;
        _2904 = _2806;
        _2906 = _2807;
    }
    bool _3113;
    vec4 _2916;
    vec4 _2938;
    float _2940;
    float _2944;
    float _2945;
    float _2946;
    float _2947;
    bool _2957;
    for (;;)
    {
        _2916 = cbMatDynParam._m0[0u];
        float _2918 = roundEven(_2916.y);
        bool _2919 = _2918 == 3.0;
        float _2920 = log2(_2906);
        float _2927 = exp2(_2920 * cbSceneParam._m0[78u].x) * _2776;
        float _2928 = exp2(_2920 * cbSceneParam._m0[78u].y) * _2777;
        float _2929 = exp2(_2920 * cbSceneParam._m0[78u].z) * _2778;
        float _2936 = _914 + (-0.5);
        _2938 = cbMtdParam._m0[1u];
        _2940 = _2938.y * _2936;
        float _2943 = (_2918 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2944 = _2943 * (_2919 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2900)));
        _2945 = _2943 * (_2919 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2902)));
        _2946 = _2943 * (_2919 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2904)));
        _2947 = _2936 * 0.999000012874603271484375;
        _2957 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2957)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2947) < 0.5)
            {
                _3113 = true;
                break;
            }
        }
        uint _3054 = _963 + uint(_2916.w);
        if ((cbInstanceData._m0[_3054].w < 1.0) && ((cbInstanceData._m0[_3054].w + _2947) < 0.5))
        {
            _3113 = true;
            break;
        }
        if ((_2940 + 1.0) < _2938.x)
        {
            _3113 = true;
            break;
        }
        _3113 = false;
        break;
    }
    float _3318;
    if (_3113)
    {
        discard_state = true;
        _3318 = 0.0;
    }
    else
    {
        _3318 = cbInstanceData._m0[_2779].w;
    }
    SV_Target.x = _2944;
    SV_Target.y = _2945;
    SV_Target.z = _2946;
    SV_Target.w = _3318;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2779].w;
    discard_exit();
}


