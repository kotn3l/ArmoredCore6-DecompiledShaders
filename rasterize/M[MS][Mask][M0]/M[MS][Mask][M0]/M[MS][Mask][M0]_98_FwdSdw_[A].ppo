#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1524;
float _4163;
float _4164;
float _4165;
float _4166;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4175 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4186 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4197 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _428 = _426.x;
    float _440 = dot(vec4(_428, _426.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _457 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_428 - _440) * cbMtdParam._m0[24u].z) + _440) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4208 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _465 = (_458 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _466 = (_458 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _467 = (_458 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _484 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _506 = _504.x;
    float _516 = dot(vec4(_506, _504.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _530 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_506 - _516) * cbMtdParam._m0[24u].z) + _516) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4219 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _538 = (_531 * ((_484.x * cbMtdParam._m0[13u].x) - _465)) + _465;
    float _539 = (_531 * ((_484.y * cbMtdParam._m0[13u].y) - _466)) + _466;
    float _540 = (_531 * ((_484.z * cbMtdParam._m0[13u].z) - _467)) + _467;
    float _544 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _538;
    float _547 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _539;
    float _550 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _540;
    float _557 = ((_538 - _544) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) + _544;
    float _558 = ((_539 - _547) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) + _547;
    float _559 = ((_540 - _550) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) + _550;
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _641 = _639.x;
    float _642 = _639.y;
    float _643 = _639.z;
    float _650 = ((_622.x - _641) * _458) + _641;
    float _651 = ((_622.y - _642) * _458) + _642;
    float _652 = ((_622.z - _643) * _458) + _643;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _677 = ((_664.z - _652) * _531) + _652;
    float _680 = ((((_664.x - _650) * _531) + _650) * 2.0) + (-1.0);
    float _681 = ((((_664.y - _651) * _531) + _651) * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _4230 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _717 = (_680 + ((((_597.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_705.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _718 = (_681 + ((((_597.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_705.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _721 = fma(_687, _258, fma(_718, _265, _717 * _251));
    float _724 = fma(_687, _259, fma(_718, _266, _717 * _252));
    float _727 = fma(_687, _260, fma(_718, _267, _717 * _253));
    float _731 = inversesqrt(dot(vec3(_721, _724, _727), vec3(_721, _724, _727)));
    vec4 _758 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _760 = _758.x;
    float _761 = 1.0 - _760;
    float _767 = (cbMtdParam._m0[19u].x + dot(vec4(_731 * _721, _731 * _724, _731 * _727, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_760 - _761) * cbMtdParam._m0[24u].w) + _761) * cbMtdParam._m0[21u].z);
    float _4241 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _768 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _770 = (-0.0) - cbMtdParam._m0[24u].x;
    float _772 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _772 : (isnan(_772) ? 1.0 : min(_772, 1.0));
    float _780 = _768 - ((_768 * TEXCOORD_8.x) * _773);
    float _781 = _768 - ((_768 * TEXCOORD_8.y) * _773);
    float _782 = _768 - ((_768 * TEXCOORD_8.z) * _773);
    float _789 = (_780 * ((_578.x * cbMtdParam._m0[18u].x) - _557)) + _557;
    float _790 = (_781 * ((_578.y * cbMtdParam._m0[18u].y) - _558)) + _558;
    float _791 = (_782 * ((_578.z * cbMtdParam._m0[18u].z) - _559)) + _559;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _805 = _803.x;
    float _806 = 1.0 - _805;
    float _832 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_805 - _806) * cbMtdParam._m0[24u].y) + _806) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4262 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _833 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _841 = ((((cbMtdParam._m0[10u].x - _789) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _833) + _789;
    float _842 = ((((cbMtdParam._m0[10u].y - _790) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _833) + _790;
    float _843 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _791)) * _833) + _791;
    float _848 = (((_597.z - _677) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _677;
    float _852 = ((_705.z - _848) * cbMtdParam._m0[19u].w) + _848;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _873 = (_866.x * 2.0) + (-1.0);
    float _874 = (_866.y * 2.0) + (-1.0);
    float _875 = dot(vec2(_873, _874), vec2(_873, _874));
    float _4273 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _883 = ((_866.z - _852) * _780) + _852;
    float _886 = ((cbMtdParam._m0[23u].y - _883) * _833) + _883;
    vec4 _907 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _913 = (_907.x * 2.0) + (-1.0);
    float _914 = (_907.y * 2.0) + (-1.0);
    float _915 = dot(vec2(_913, _914), vec2(_913, _914));
    float _4284 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _930 = ((sqrt(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) - _687) * _782) + _687;
    float _933 = (((_873 - _717) * _780) + _717) + (cbMtdParam._m0[21u].x * _717);
    float _934 = (((_874 - _718) * _781) + _718) + (cbMtdParam._m0[21u].x * _718);
    float _945 = (((_913 - _933) + (_933 * cbMtdParam._m0[22u].z)) * _833) + _933;
    float _946 = (((_914 - _934) + (_934 * cbMtdParam._m0[22u].z)) * _833) + _934;
    float _947 = (_833 * (sqrt(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) - _930)) + _930;
    float _949 = cbMtdParam._m0[22u].x + _705.w;
    float _952 = fma(_947, _258, fma(_946, _265, _945 * _251));
    float _955 = fma(_947, _259, fma(_946, _266, _945 * _252));
    float _958 = fma(_947, _260, fma(_946, _267, _945 * _253));
    float _962 = inversesqrt(dot(vec3(_952, _955, _958), vec3(_952, _955, _958)));
    float _963 = _962 * _952;
    float _964 = _962 * _955;
    float _965 = _962 * _958;
    float _4295 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _966 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4317 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4328 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4339 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _984 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1035 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1025);
    float _1036 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1025);
    float _1037 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1025);
    float _1041 = inversesqrt(dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037)));
    float _1042 = _1035 * _1041;
    float _1043 = _1036 * _1041;
    float _1044 = _1037 * _1041;
    vec4 _1049 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1051 = _1049.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1205 = sqrt(((_1035 * _1035) + (_1036 * _1036)) + (_1037 * _1037));
        float _1211 = (cbMatDynParam._m0[5u].x * _1205) + cbMatDynParam._m0[5u].y;
        float _4350 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1216 = (cbMatDynParam._m0[5u].z * _1205) + cbMatDynParam._m0[5u].w;
        float _4361 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) - _1212)) + _1212) < ((_1051 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1062 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1063 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1081 = fma(_965, cbSceneParam._m0[5u].z, fma(_964, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _963));
    float _1084 = fma(_965, cbSceneParam._m0[6u].z, fma(_964, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _963));
    float _1087 = fma(_965, cbSceneParam._m0[7u].z, fma(_964, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _963));
    uint _1100 = _289 + 9u;
    uint _1101 = _1100 + uint(cbMatDynParam._m0[0u].w);
    float _1107 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * cbInstanceData._m0[_1101].x;
    float _1108 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * cbInstanceData._m0[_1101].y;
    float _1109 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * cbInstanceData._m0[_1101].z;
    float _4372 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1110 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _4383 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1111 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1112 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    vec4 _1121 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1062, cbSceneParam._m0[86u].y * _1063));
    float _1125 = ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * TEXCOORD_5.w) * _1121.x;
    float _1126 = dot(vec3(_963, _964, _965), vec3(_1042, _1043, _1044));
    float _1129 = _1126 * 2.0;
    float _1133 = (_1129 * _963) - _1042;
    float _1134 = (_1129 * _964) - _1043;
    float _1135 = (_1129 * _965) - _1044;
    float _1139 = abs(dot(vec3(_1042, _1043, _1044), vec3(_963, _964, _965)));
    float _4405 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1141 = sqrt(_966);
    float _1154 = exp2((_1141 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1141 * 3.0));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1523;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1248 = fma(_1194, cbModelParam._m0[26u].z, fma(_1190, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186));
        float _1252 = fma(_1194, cbModelParam._m0[27u].z, fma(_1190, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186));
        float _1256 = fma(_1194, cbModelParam._m0[28u].z, fma(_1190, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186));
        float _1281 = _1186 + _963;
        float _1282 = _1190 + _964;
        float _1283 = _1194 + _965;
        float _1293 = fma(_1283, cbModelParam._m0[26u].z, fma(_1282, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1281)) - _1248;
        float _1294 = fma(_1283, cbModelParam._m0[27u].z, fma(_1282, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1281)) - _1252;
        float _1295 = fma(_1283, cbModelParam._m0[28u].z, fma(_1282, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1281)) - _1256;
        float _1299 = inversesqrt(dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295)));
        float _1312 = ((_1299 * _1293) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1248 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1299 * _1294) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1252 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1299 * _1295) / cbModelParam._m0[34u].z) + ((((((_1256 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        float _1351 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1317.x + (-0.5));
        float _1353 = _1351 * (_1317.y + (-0.5));
        float _1354 = _1351 * (_1317.z + (-0.5));
        float _1361 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1324.x + (-0.5));
        float _1363 = _1361 * (_1324.y + (-0.5));
        float _1364 = _1361 * (_1324.z + (-0.5));
        float _1371 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1331.x + (-0.5));
        float _1373 = _1371 * (_1331.y + (-0.5));
        float _1374 = _1371 * (_1331.z + (-0.5));
        float _1381 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1338.x + (-0.5));
        float _1383 = _1381 * (_1338.y + (-0.5));
        float _1384 = _1381 * (_1338.z + (-0.5));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = _1352 * 0.5;
        float _1389 = _1362 * 0.5;
        float _1390 = _1372 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1405 = (dot(vec3(_963, _964, _965), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1415 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4453 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1417 + 1.0))) + _1422) * _1385;
        float _1432 = _1353 * 0.5;
        float _1433 = _1363 * 0.5;
        float _1434 = _1373 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_963, _964, _965), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4486 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1459 + 1.0))) + _1464) * _1386;
        float _1474 = _1354 * 0.5;
        float _1475 = _1364 * 0.5;
        float _1476 = _1374 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_963, _964, _965), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4497 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4508 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4519 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_1501 + 1.0))) + _1506) * _1387;
        _1523 = _1354;
        _1525 = _1353;
        _1526 = _1352;
        _1527 = _1364;
        _1528 = _1363;
        _1529 = _1362;
        _1530 = _1374;
        _1531 = _1373;
        _1532 = _1372;
        _1533 = _1387;
        _1534 = _1386;
        _1535 = _1385;
        _1536 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1537 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1538 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
    }
    else
    {
        _1523 = _1524;
        _1525 = _1524;
        _1526 = _1524;
        _1527 = _1524;
        _1528 = _1524;
        _1529 = _1524;
        _1530 = _1524;
        _1531 = _1524;
        _1532 = _1524;
        _1533 = _1524;
        _1534 = _1524;
        _1535 = _1524;
        _1536 = 0.0;
        _1537 = 0.0;
        _1538 = 0.0;
    }
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1565 = fma(_1194, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186));
        float _1569 = fma(_1194, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186));
        float _1573 = fma(_1194, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186));
        float _1596 = _1186 + _963;
        float _1597 = _1190 + _964;
        float _1598 = _1194 + _965;
        float _1608 = fma(_1598, cbModelParam._m0[30u].z, fma(_1597, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1596)) - _1565;
        float _1609 = fma(_1598, cbModelParam._m0[31u].z, fma(_1597, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1596)) - _1569;
        float _1610 = fma(_1598, cbModelParam._m0[32u].z, fma(_1597, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1596)) - _1573;
        float _1614 = inversesqrt(dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610)));
        float _1627 = ((_1614 * _1608) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1565 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1628 = ((_1614 * _1609) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1569 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1629 = ((_1614 * _1610) / cbModelParam._m0[35u].z) + ((((((_1573 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        float _1664 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1631.x + (-0.5));
        float _1666 = _1664 * (_1631.y + (-0.5));
        float _1667 = _1664 * (_1631.z + (-0.5));
        float _1674 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1638.x + (-0.5));
        float _1676 = _1674 * (_1638.y + (-0.5));
        float _1677 = _1674 * (_1638.z + (-0.5));
        float _1684 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1645.x + (-0.5));
        float _1686 = _1684 * (_1645.y + (-0.5));
        float _1687 = _1684 * (_1645.z + (-0.5));
        float _1694 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1652.x + (-0.5));
        float _1696 = _1694 * (_1652.y + (-0.5));
        float _1697 = _1694 * (_1652.z + (-0.5));
        float _1698 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1699 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = _1665 * 0.5;
        float _1702 = _1675 * 0.5;
        float _1703 = _1685 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_963, _964, _965), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1698 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4582 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1728 + 1.0))) + _1733) * _1698;
        float _1743 = _1666 * 0.5;
        float _1744 = _1676 * 0.5;
        float _1745 = _1686 * 0.5;
        float _1746 = dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745));
        float _1751 = (_1746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1746);
        float _1759 = (dot(vec3(_963, _964, _965), vec3(_1751 * _1743, _1751 * _1744, _1751 * _1745)) + 1.0) * 0.5;
        float _4593 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1768 = sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745)) / (_1699 + 9.9999997473787516355514526367188e-06);
        float _4604 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1770 = _1769 * 2.0;
        float _1774 = (1.0 - _1769) / (_1769 + 1.0);
        float _4615 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1784 = ((((1.0 - _1775) * (_1770 + 2.0)) * exp2(log2(isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_1770 + 1.0))) + _1775) * _1699;
        float _1785 = _1667 * 0.5;
        float _1786 = _1677 * 0.5;
        float _1787 = _1687 * 0.5;
        float _1788 = dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787));
        float _1793 = (_1788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1788);
        float _1801 = (dot(vec3(_963, _964, _965), vec3(_1793 * _1785, _1793 * _1786, _1793 * _1787)) + 1.0) * 0.5;
        float _4626 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1810 = sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4637 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _1812 = _1811 * 2.0;
        float _1816 = (1.0 - _1811) / (_1811 + 1.0);
        float _4648 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _1826 = ((((1.0 - _1817) * (_1812 + 2.0)) * exp2(log2(isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_1812 + 1.0))) + _1817) * _1700;
        _1834 = _1667;
        _1835 = _1666;
        _1836 = _1665;
        _1837 = _1677;
        _1838 = _1676;
        _1839 = _1675;
        _1840 = _1687;
        _1841 = _1686;
        _1842 = _1685;
        _1843 = _1700;
        _1844 = _1699;
        _1845 = _1698;
        _1846 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
        _1847 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)));
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)));
    }
    else
    {
        _1834 = _1524;
        _1835 = _1524;
        _1836 = _1524;
        _1837 = _1524;
        _1838 = _1524;
        _1839 = _1524;
        _1840 = _1524;
        _1841 = _1524;
        _1842 = _1524;
        _1843 = _1524;
        _1844 = _1524;
        _1845 = _1524;
        _1846 = 0.0;
        _1847 = 0.0;
        _1848 = 0.0;
    }
    float _1858 = (cbModelParam._m0[1u].x * (_1846 - _1536)) + _1536;
    float _1859 = (cbModelParam._m0[1u].x * (_1847 - _1537)) + _1537;
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1538)) + _1538;
    float _1881 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1858 * cbSceneParam._m0[89u].x));
    float _1884 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1858 * cbSceneParam._m0[90u].x));
    float _1887 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1858));
    float _1902 = _1133 * 0.5;
    float _1903 = _1134 * 0.5;
    float _1904 = _1135 * 0.5;
    float _1905 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1908 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1835, _1838, _1841, _1844));
    float _1911 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1834, _1837, _1840, _1843));
    float _1945;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1918 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1523, _1527, _1530, _1533));
        float _1922 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1525, _1528, _1531, _1534));
        float _1926 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1526, _1529, _1532, _1535));
        float _1933 = dot(vec4(cbModelParam._m0[39u]), vec4(_1902, _1903, _1904, 1.0));
        _1945 = dot(vec3(isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1933) ? 0.0 : (isnan(0.0) ? _1933 : max(0.0, _1933))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1945 = 1.0;
    }
    float _1956;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1947 = dot(vec4(cbModelParam._m0[40u]), vec4(_1902, _1903, _1904, 1.0));
        _1956 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1947) ? 0.0 : (isnan(0.0) ? _1947 : max(0.0, _1947))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1956 = 1.0;
    }
    float _1960 = (_1956 * cbModelParam._m0[1u].x) + (_1945 * (1.0 - cbModelParam._m0[1u].x));
    float _1970 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _966);
    float _1971 = isnan(_1970) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1970 : min(cbModelParam._m0[25u].z, _1970));
    float _2051;
    float _2053;
    float _2055;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2018 = fma(_1194, cbModelParam._m0[13u].z, fma(_1190, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1186)) + cbModelParam._m0[13u].w;
        float _2022 = fma(_1194, cbModelParam._m0[14u].z, fma(_1190, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1186)) + cbModelParam._m0[14u].w;
        float _2026 = fma(_1194, cbModelParam._m0[15u].z, fma(_1190, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1186)) + cbModelParam._m0[15u].w;
        float _2029 = fma(_1135, cbModelParam._m0[13u].z, fma(_1134, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1133));
        float _2032 = fma(_1135, cbModelParam._m0[14u].z, fma(_1134, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1133));
        float _2035 = fma(_1135, cbModelParam._m0[15u].z, fma(_1134, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1133));
        float _2063;
        if (_2029 > 0.0)
        {
            _2063 = abs((1.0 - _2018) / _2029);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2018 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2063 = frontier_phi_17_15_ladder;
        }
        float _2232;
        if (_2032 > 0.0)
        {
            _2232 = abs((1.0 - _2022) / _2032);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2022 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2232 = frontier_phi_26_22_ladder;
        }
        float _2527;
        if (_2035 > 0.0)
        {
            _2527 = abs((1.0 - _2026) / _2035);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2026 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2527 = frontier_phi_38_33_ladder;
        }
        float _2529 = isnan(_2232) ? _2063 : (isnan(_2063) ? _2232 : min(_2063, _2232));
        float _2530 = isnan(_2527) ? _2529 : (isnan(_2529) ? _2527 : min(_2529, _2527));
        float _2534 = (_2530 * _2029) + _2018;
        float _2535 = (_2530 * _2032) + _2022;
        float _2536 = (_2530 * _2035) + _2026;
        float _2537 = _2530 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2537;
        float _2541 = _2537 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 > _2541) || ((_2535 < _2539) || ((_2534 < _2539) || (_2534 > _2541))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2536, cbModelParam._m0[9u].z, fma(_2535, cbModelParam._m0[9u].y, _2534 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2536, cbModelParam._m0[10u].z, fma(_2535, cbModelParam._m0[10u].y, _2534 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2536, cbModelParam._m0[11u].z, fma(_2535, cbModelParam._m0[11u].y, _2534 * cbModelParam._m0[11u].x))), _1971);
            frontier_phi_16_38_ladder = _2681.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2681.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2681.x * cbModelParam._m0[1u].y;
        }
        _2051 = frontier_phi_16_38_ladder_2;
        _2053 = frontier_phi_16_38_ladder_1;
        _2055 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1133, _1134, _1135), _1971);
        _2051 = _2039.x * cbModelParam._m0[1u].y;
        _2053 = _2039.y * cbModelParam._m0[1u].y;
        _2055 = _2039.z * cbModelParam._m0[1u].y;
    }
    float _2059 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _966);
    float _2060 = isnan(_2059) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2059 : min(cbModelParam._m0[25u].w, _2059));
    float _2149;
    float _2151;
    float _2153;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2113 = fma(_1194, cbModelParam._m0[21u].z, fma(_1190, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1186)) + cbModelParam._m0[21u].w;
        float _2117 = fma(_1194, cbModelParam._m0[22u].z, fma(_1190, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1186)) + cbModelParam._m0[22u].w;
        float _2121 = fma(_1194, cbModelParam._m0[23u].z, fma(_1190, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1186)) + cbModelParam._m0[23u].w;
        float _2124 = fma(_1135, cbModelParam._m0[21u].z, fma(_1134, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1133));
        float _2127 = fma(_1135, cbModelParam._m0[22u].z, fma(_1134, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1133));
        float _2130 = fma(_1135, cbModelParam._m0[23u].z, fma(_1134, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1133));
        float _2237;
        if (_2124 > 0.0)
        {
            _2237 = abs((1.0 - _2113) / _2124);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2113 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2237 = frontier_phi_28_24_ladder;
        }
        float _2554;
        if (_2127 > 0.0)
        {
            _2554 = abs((1.0 - _2117) / _2127);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2117 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2554 = frontier_phi_40_35_ladder;
        }
        float _2881;
        if (_2130 > 0.0)
        {
            _2881 = abs((1.0 - _2121) / _2130);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2121 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2881 = frontier_phi_50_47_ladder;
        }
        float _2883 = isnan(_2554) ? _2237 : (isnan(_2237) ? _2554 : min(_2237, _2554));
        float _2884 = isnan(_2881) ? _2883 : (isnan(_2883) ? _2881 : min(_2883, _2881));
        float _2888 = (_2884 * _2124) + _2113;
        float _2889 = (_2884 * _2127) + _2117;
        float _2890 = (_2884 * _2130) + _2121;
        float _2891 = _2884 * 9.9999997473787516355514526367188e-05;
        float _2892 = (-1.0) - _2891;
        float _2894 = _2891 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2890 > _2894) || ((_2890 < _2892) || ((_2889 > _2894) || ((_2889 < _2892) || ((_2888 < _2892) || (_2888 > _2894))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3008 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2890, cbModelParam._m0[17u].z, fma(_2889, cbModelParam._m0[17u].y, _2888 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2890, cbModelParam._m0[18u].z, fma(_2889, cbModelParam._m0[18u].y, _2888 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2890, cbModelParam._m0[19u].z, fma(_2889, cbModelParam._m0[19u].y, _2888 * cbModelParam._m0[19u].x))), _2060);
            frontier_phi_25_50_ladder = _3008.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3008.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3008.x * cbModelParam._m0[1u].z;
        }
        _2149 = frontier_phi_25_50_ladder_2;
        _2151 = frontier_phi_25_50_ladder_1;
        _2153 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2133 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1133, _1134, _1135), _2060);
        _2149 = _2133.x * cbModelParam._m0[1u].z;
        _2151 = _2133.y * cbModelParam._m0[1u].z;
        _2153 = _2133.z * cbModelParam._m0[1u].z;
    }
    float _2165 = ((((1.0 - _1154) * ((_1141 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1154 * _1141)) * _1125;
    float _2166 = _2165 * ((cbModelParam._m0[1u].w * (_2149 - _2051)) + _2051);
    float _2167 = _2165 * ((cbModelParam._m0[1u].w * (_2151 - _2053)) + _2053);
    float _2168 = _2165 * ((cbModelParam._m0[1u].w * (_2153 - _2055)) + _2055);
    float _2171 = fma(_2168, cbSceneParam._m0[89u].z, fma(_2167, cbSceneParam._m0[89u].y, _2166 * cbSceneParam._m0[89u].x));
    float _2174 = fma(_2168, cbSceneParam._m0[90u].z, fma(_2167, cbSceneParam._m0[90u].y, _2166 * cbSceneParam._m0[90u].x));
    float _2177 = fma(_2168, cbSceneParam._m0[91u].z, fma(_2167, cbSceneParam._m0[91u].y, _2166 * cbSceneParam._m0[91u].x));
    float _2211 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2215 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2219 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2223 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2224 = _2211 / _2223;
    float _2225 = _2215 / _2223;
    float _2226 = _2219 / _2223;
    float _2373;
    float _2374;
    float _2375;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2253 = ((uint(_2226 > cbSceneParam._m0[59u].y) + uint(_2226 > cbSceneParam._m0[59u].x)) + uint(_2226 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2254 = _2253 + 43u;
        uint _2262 = _2253 + 44u;
        uint _2270 = _2253 + 45u;
        uint _2278 = _2253 + 46u;
        float _2289 = fma(_2223, cbSceneParam._m0[_2254].w, fma(_2219, cbSceneParam._m0[_2254].z, fma(_2215, cbSceneParam._m0[_2254].y, _2211 * cbSceneParam._m0[_2254].x)));
        float _2293 = fma(_2223, cbSceneParam._m0[_2262].w, fma(_2219, cbSceneParam._m0[_2262].z, fma(_2215, cbSceneParam._m0[_2262].y, _2211 * cbSceneParam._m0[_2262].x)));
        float _2301 = fma(_2223, cbSceneParam._m0[_2278].w, fma(_2219, cbSceneParam._m0[_2278].z, fma(_2215, cbSceneParam._m0[_2278].y, _2211 * cbSceneParam._m0[_2278].x)));
        float _2306 = cbSceneParam._m0[33u].z * _2301;
        float _2308 = cbSceneParam._m0[33u].w * _2301;
        float _2311 = fma(_2223, cbSceneParam._m0[_2270].w, fma(_2219, cbSceneParam._m0[_2270].z, fma(_2215, cbSceneParam._m0[_2270].y, _2211 * cbSceneParam._m0[_2270].x))) / _2301;
        float _2359 = (cbSceneParam._m0[33u].x - sqrt(((_2225 * _2225) + (_2224 * _2224)) + (_2226 * _2226))) * cbSceneParam._m0[33u].y;
        float _4774 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2366 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2306 + _2289) / _2301, (_2308 + _2293) / _2301), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2308 + _2289) / _2301, (_2293 - _2306) / _2301), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2289 - _2306) / _2301, (_2293 - _2308) / _2301), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2289 - _2308) / _2301, (_2306 + _2293) / _2301), _2311), 0.0)).x), vec4(0.25)));
        _2373 = 1.0 - (_2366 * cbSceneParam._m0[34u].x);
        _2374 = 1.0 - (_2366 * cbSceneParam._m0[34u].y);
        _2375 = 1.0 - (_2366 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2373 = 1.0;
        _2374 = 1.0;
        _2375 = 1.0;
    }
    float _2439;
    float _2441;
    float _2443;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2427 = fma(_2223, cbSceneParam._m0[63u].w, fma(_2219, cbSceneParam._m0[63u].z, fma(_2215, cbSceneParam._m0[63u].y, _2211 * cbSceneParam._m0[63u].x)));
        float _2428 = fma(_2223, cbSceneParam._m0[60u].w, fma(_2219, cbSceneParam._m0[60u].z, fma(_2215, cbSceneParam._m0[60u].y, _2211 * cbSceneParam._m0[60u].x))) / _2427;
        float _2429 = fma(_2223, cbSceneParam._m0[61u].w, fma(_2219, cbSceneParam._m0[61u].z, fma(_2215, cbSceneParam._m0[61u].y, _2211 * cbSceneParam._m0[61u].x))) / _2427;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2428 >= cbSceneParam._m0[64u].x) && (_2429 >= cbSceneParam._m0[64u].y)) && (_2428 <= cbSceneParam._m0[64u].z)) && (_2429 <= cbSceneParam._m0[64u].w))
        {
            float _2567 = fma(_2223, cbSceneParam._m0[62u].w, fma(_2219, cbSceneParam._m0[62u].z, fma(_2215, cbSceneParam._m0[62u].y, _2211 * cbSceneParam._m0[62u].x))) / _2427;
            float _2571 = isnan(cbSceneParam._m0[41u].w) ? _2567 : (isnan(_2567) ? cbSceneParam._m0[41u].w : max(_2567, cbSceneParam._m0[41u].w));
            float _2614 = (cbSceneParam._m0[33u].x - sqrt(((_2225 * _2225) + (_2224 * _2224)) + (_2226 * _2226))) * cbSceneParam._m0[33u].y;
            float _4790 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
            float _2621 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2428, cbSceneParam._m0[33u].w + _2429), _2571), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2428, _2429 - cbSceneParam._m0[33u].z), _2571), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2428 - cbSceneParam._m0[33u].z, _2429 - cbSceneParam._m0[33u].w), _2571), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2428 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2429), _2571), 0.0)).x), vec4(0.25)));
            float _2625 = 1.0 - (_2621 * cbSceneParam._m0[34u].x);
            float _2626 = 1.0 - (_2621 * cbSceneParam._m0[34u].y);
            float _2627 = 1.0 - (_2621 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2627) ? _2375 : (isnan(_2375) ? _2627 : min(_2375, _2627));
            frontier_phi_37_36_ladder_1 = isnan(_2626) ? _2374 : (isnan(_2374) ? _2626 : min(_2374, _2626));
            frontier_phi_37_36_ladder_2 = isnan(_2625) ? _2373 : (isnan(_2373) ? _2625 : min(_2373, _2625));
        }
        else
        {
            frontier_phi_37_36_ladder = _2375;
            frontier_phi_37_36_ladder_1 = _2374;
            frontier_phi_37_36_ladder_2 = _2373;
        }
        _2439 = frontier_phi_37_36_ladder_2;
        _2441 = frontier_phi_37_36_ladder_1;
        _2443 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2439 = _2373;
        _2441 = _2374;
        _2443 = _2375;
    }
    uvec4 _2448 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2450 = _2448.x * 14u;
    uint _2451 = _2450 + 13u;
    float _2458 = _1125 + (-1.0);
    float _2463 = (cbLight._m0[_2451].x * _2458) + 1.0;
    float _2464 = (cbLight._m0[_2451].y * _2458) + 1.0;
    float _2465 = (cbLight._m0[_2451].z * _2458) + 1.0;
    float _2466 = (cbLight._m0[_2451].w * _2458) + 1.0;
    uint _2467 = _2450 + 5u;
    float _2473 = isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0));
    uint _2477 = _2450 + 4u;
    float _2486 = isnan(1.0) ? _2463 : (isnan(_2463) ? 1.0 : min(_2463, 1.0));
    uint _2490 = _2450 | 1u;
    float _2501 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_963, _964, _965));
    float _2504 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_963, _964, _965));
    float _4826 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _4837 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2509 = (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * 0.3183098733425140380859375;
    float _2511 = (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * 0.3183098733425140380859375;
    float _2518 = ((cbLight._m0[_2467].x * _2473) * _2511) + (((cbLight._m0[_2477].x * _2439) * _2486) * _2509);
    float _2519 = ((_2473 * cbLight._m0[_2467].y) * _2511) + (((cbLight._m0[_2477].y * _2441) * _2486) * _2509);
    float _2520 = ((_2473 * cbLight._m0[_2467].z) * _2511) + (((cbLight._m0[_2477].z * _2443) * _2486) * _2509);
    uvec4 _2524 = floatBitsToUint(cbLight._m0[_2450 + 12u]);
    bool _2526 = _2524.x == 0u;
    float _2628;
    float _2630;
    float _2632;
    if (_2526)
    {
        _2628 = _2518;
        _2630 = _2519;
        _2632 = _2520;
    }
    else
    {
        uint _2636 = _2450 + 6u;
        float _2652 = (dot(vec3(cbLight._m0[_2450 + 2u].xyz), vec3(_963, _964, _965)) * 0.5) + 0.5;
        float _2653 = _2652 * _2652;
        float _4848 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2654 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2655 = isnan(1.0) ? _2465 : (isnan(_2465) ? 1.0 : min(_2465, 1.0));
        _2628 = (((cbLight._m0[_2636].x * 0.3183098733425140380859375) * _2654) * _2655) + _2518;
        _2630 = (((cbLight._m0[_2636].y * 0.3183098733425140380859375) * _2654) * _2655) + _2519;
        _2632 = (((cbLight._m0[_2636].z * 0.3183098733425140380859375) * _2654) * _2655) + _2520;
    }
    bool _2635 = _2524.y == 0u;
    float _2690;
    float _2692;
    float _2694;
    if (_2635)
    {
        _2690 = _2628;
        _2692 = _2630;
        _2694 = _2632;
    }
    else
    {
        uint _2852 = _2450 + 7u;
        float _2868 = (dot(vec3(cbLight._m0[_2450 + 3u].xyz), vec3(_963, _964, _965)) * 0.5) + 0.5;
        float _2869 = _2868 * _2868;
        float _4864 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2870 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2871 = isnan(1.0) ? _2466 : (isnan(_2466) ? 1.0 : min(_2466, 1.0));
        _2690 = (((cbLight._m0[_2852].x * 0.3183098733425140380859375) * _2870) * _2871) + _2628;
        _2692 = (((cbLight._m0[_2852].y * 0.3183098733425140380859375) * _2870) * _2871) + _2630;
        _2694 = (((cbLight._m0[_2852].z * 0.3183098733425140380859375) * _2870) * _2871) + _2632;
    }
    uint _2697 = _2450 + 8u;
    float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _966) * 0.949999988079071044921875);
    float _2711 = _2710 * _2710;
    float _2712 = cbLight._m0[_2450].x + _1042;
    float _2713 = cbLight._m0[_2450].y + _1043;
    float _2714 = cbLight._m0[_2450].z + _1044;
    float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
    float _2719 = _2718 * _2712;
    float _2720 = _2718 * _2713;
    float _2721 = _2718 * _2714;
    float _2722 = dot(vec3(_963, _964, _965), vec3(cbLight._m0[_2450].xyz));
    float _4880 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2725 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
    float _4891 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _2726 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
    float _2727 = dot(vec3(_963, _964, _965), vec3(_2719, _2720, _2721));
    float _4902 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2730 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
    float _2731 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2719, _2720, _2721));
    float _4913 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2735 = _2711 * _2711;
    float _2739 = ((_2730 * _2730) * (_2735 + (-1.0))) + 1.0;
    float _2750 = (exp2(log2(1.0 - (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2751 = 1.0 - _2711;
    float _2762 = (0.5 / (((_2726 * ((_2725 * _2751) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2751) + _2711) * _2725))) * _2725;
    float _4924 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2764 = (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2735 / ((_2739 * _2739) * 3.141590118408203125));
    uint _2778 = _2450 + 9u;
    float _2789 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _966) * 0.949999988079071044921875);
    float _2790 = _2789 * _2789;
    float _2791 = cbLight._m0[_2490].x + _1042;
    float _2792 = cbLight._m0[_2490].y + _1043;
    float _2793 = cbLight._m0[_2490].z + _1044;
    float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
    float _2798 = _2797 * _2791;
    float _2799 = _2797 * _2792;
    float _2800 = _2797 * _2793;
    float _2801 = dot(vec3(_963, _964, _965), vec3(cbLight._m0[_2490].xyz));
    float _4935 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2804 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
    float _2805 = dot(vec3(_963, _964, _965), vec3(_2798, _2799, _2800));
    float _4946 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
    float _2808 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
    float _2809 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2798, _2799, _2800));
    float _4957 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    float _2813 = _2790 * _2790;
    float _2817 = ((_2808 * _2808) * (_2813 + (-1.0))) + 1.0;
    float _2826 = (exp2(log2(1.0 - (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2827 = 1.0 - _2790;
    float _2837 = (0.5 / (((_2726 * ((_2804 * _2827) + _2790)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2827) + _2790) * _2804))) * _2804;
    float _4968 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
    float _2839 = (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2813 / ((_2817 * _2817) * 3.141590118408203125));
    float _2849 = (((_2826 * cbLight._m0[_2778].x) * _2839) * _2473) + ((((cbLight._m0[_2697].x * _2439) * _2750) * _2764) * _2486);
    float _2850 = (((_2826 * cbLight._m0[_2778].y) * _2839) * _2473) + ((((cbLight._m0[_2697].y * _2441) * _2750) * _2764) * _2486);
    float _2851 = (((_2826 * cbLight._m0[_2778].z) * _2839) * _2473) + ((((cbLight._m0[_2697].z * _2443) * _2750) * _2764) * _2486);
    float _2907;
    float _2909;
    float _2911;
    if (_2526)
    {
        _2907 = _2849;
        _2909 = _2850;
        _2911 = _2851;
    }
    else
    {
        uint _2913 = _2450 + 2u;
        uint _2917 = _2450 + 10u;
        float _2931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2913].w)) * _966) * 0.949999988079071044921875);
        float _2932 = _2931 * _2931;
        float _2933 = cbLight._m0[_2913].x + _1042;
        float _2934 = cbLight._m0[_2913].y + _1043;
        float _2935 = cbLight._m0[_2913].z + _1044;
        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
        float _2940 = _2939 * _2933;
        float _2941 = _2939 * _2934;
        float _2942 = _2939 * _2935;
        float _2943 = dot(vec3(_963, _964, _965), vec3(cbLight._m0[_2913].xyz));
        float _4979 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2946 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
        float _2947 = dot(vec3(_963, _964, _965), vec3(_2940, _2941, _2942));
        float _4990 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2950 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
        float _2951 = dot(vec3(cbLight._m0[_2913].xyz), vec3(_2940, _2941, _2942));
        float _5001 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2955 = _2932 * _2932;
        float _2959 = ((_2950 * _2950) * (_2955 + (-1.0))) + 1.0;
        float _2968 = (exp2(log2(1.0 - (isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2969 = 1.0 - _2932;
        float _2979 = (0.5 / (((_2726 * ((_2946 * _2969) + _2932)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2969) + _2932) * _2946))) * _2946;
        float _5012 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2981 = (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_2955 / ((_2959 * _2959) * 3.141590118408203125));
        float _2982 = isnan(1.0) ? _2465 : (isnan(_2465) ? 1.0 : min(_2465, 1.0));
        _2907 = (((_2968 * cbLight._m0[_2917].x) * _2981) * _2982) + _2849;
        _2909 = (((_2968 * cbLight._m0[_2917].y) * _2981) * _2982) + _2850;
        _2911 = (((_2968 * cbLight._m0[_2917].z) * _2981) * _2982) + _2851;
    }
    float _3013;
    float _3015;
    float _3017;
    if (_2635)
    {
        _3013 = _2907;
        _3015 = _2909;
        _3017 = _2911;
    }
    else
    {
        uint _3024 = _2450 + 3u;
        uint _3028 = _2450 + 11u;
        float _3042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3024].w)) * _966) * 0.949999988079071044921875);
        float _3043 = _3042 * _3042;
        float _3044 = cbLight._m0[_3024].x + _1042;
        float _3045 = cbLight._m0[_3024].y + _1043;
        float _3046 = cbLight._m0[_3024].z + _1044;
        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
        float _3051 = _3050 * _3044;
        float _3052 = _3050 * _3045;
        float _3053 = _3050 * _3046;
        float _3054 = dot(vec3(_963, _964, _965), vec3(cbLight._m0[_3024].xyz));
        float _5028 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3057 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
        float _3058 = dot(vec3(_963, _964, _965), vec3(_3051, _3052, _3053));
        float _5039 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
        float _3061 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
        float _3062 = dot(vec3(cbLight._m0[_3024].xyz), vec3(_3051, _3052, _3053));
        float _5050 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
        float _3066 = _3043 * _3043;
        float _3070 = ((_3061 * _3061) * (_3066 + (-1.0))) + 1.0;
        float _3079 = (exp2(log2(1.0 - (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3080 = 1.0 - _3043;
        float _3090 = (0.5 / (((_2726 * ((_3057 * _3080) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _3080) + _3043) * _3057))) * _3057;
        float _5061 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
        float _3092 = (isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3066 / ((_3070 * _3070) * 3.141590118408203125));
        float _3093 = isnan(1.0) ? _2466 : (isnan(_2466) ? 1.0 : min(_2466, 1.0));
        _3013 = (((_3079 * cbLight._m0[_3028].x) * _3092) * _3093) + _2907;
        _3015 = (((_3079 * cbLight._m0[_3028].y) * _3092) * _3093) + _2909;
        _3017 = (((_3079 * cbLight._m0[_3028].z) * _3092) * _3093) + _2911;
    }
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    if (_2448.y == 0u)
    {
        uvec4 _3114 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3115 = _3114.x;
        uint _3126 = uint((float(_3114.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1063) / _3115))) + floor(float(uint(cbSceneParam._m0[85u].x * _1062) / _3115)));
        float _3136 = (log2(_2226 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3137 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
        uint _3140 = uint(isnan(14.0) ? _3137 : (isnan(_3137) ? 14.0 : min(_3137, 14.0)));
        uvec4 _3145 = texelFetch(g_lightClusterGridBuffer, int(((_3140 << 2u) + (_3126 << 6u)) >> 2u));
        uint _3146 = _3145.x;
        uint _3147 = _3114.z;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        if (((((1u << ((_3147 >> 4u) & 15u)) + 4294967295u) & _3146) == 0u) || ((_3147 & 240u) == 0u))
        {
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
            _3236 = 0.0;
        }
        else
        {
            float _3227;
            float _3229;
            float _3231;
            float _3233;
            float _3235;
            float _3237;
            float _3378 = 0.0;
            float _3379 = 0.0;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            float _3383 = 0.0;
            uint _3384 = 0u;
            uint _3393;
            bool _3394;
            for (;;)
            {
                _3393 = texelFetch(g_lightClassification, int((((_3140 << 5u) + (_3126 << 9u)) + (_3384 << 2u)) >> 2u)).x;
                _3394 = _3393 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3394)
                {
                    frontier_phi_71_pred = _3383;
                    frontier_phi_71_pred_1 = _3382;
                    frontier_phi_71_pred_2 = _3381;
                    frontier_phi_71_pred_3 = _3380;
                    frontier_phi_71_pred_4 = _3379;
                    frontier_phi_71_pred_5 = _3378;
                }
                else
                {
                    float _3523;
                    float _3524;
                    float _3525;
                    float _3526;
                    float _3527;
                    float _3528;
                    uint _3529;
                    _3523 = _3378;
                    _3524 = _3379;
                    _3525 = _3380;
                    _3526 = _3381;
                    _3527 = _3382;
                    _3528 = _3383;
                    _3529 = _3393;
                    float _3450;
                    float _3451;
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    for (;;)
                    {
                        uint _3533 = uint(findLSB(_3529)) + (_3384 << 5u);
                        uint _3530 = (_3529 + 4294967295u) & _3529;
                        uint _3535 = _3533 * 48u;
                        vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3535)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 3u)).x));
                        uint _3555 = (_3533 * 48u) + 4u;
                        vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3555)).x, texelFetch(g_PointLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3555 + 3u)).x));
                        uint _3574 = (_3533 * 48u) + 8u;
                        vec3 _3585 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3574)).x, texelFetch(g_PointLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3574 + 2u)).x));
                        float _3589 = _3549.x - _2224;
                        float _3590 = _3549.y - _2225;
                        float _3591 = _3549.z - _2226;
                        float _3592 = dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591));
                        float _3595 = inversesqrt(_3592);
                        float _3596 = _3595 * _3589;
                        float _3597 = _3595 * _3590;
                        float _3598 = _3595 * _3591;
                        float _3599 = dot(vec3(_1081, _1084, _1087), vec3(_3596, _3597, _3598));
                        float _3604 = 1.0 - (_3592 * _3549.w);
                        float _5087 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3605 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
                        float _3606 = sqrt(_3592) * _3568.w;
                        float _3609 = 1.39999997615814208984375 / (_3606 + 1.39999997615814208984375);
                        float _3610 = _3609 * _3609;
                        float _3613 = ((1.0 - _3610) * _3599) + _3610;
                        float _3616 = _3606 * _3606;
                        float _3620 = ((isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0))) * _3605) / ((_3616 * 0.699999988079071044921875) + 1.0);
                        float _3624 = (-0.0) - _2224;
                        float _3625 = (-0.0) - _2225;
                        float _3626 = (-0.0) - _2226;
                        float _3630 = inversesqrt(dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626)));
                        float _3631 = _3630 * _3624;
                        float _3632 = _3630 * _3625;
                        float _3633 = _3630 * _3626;
                        float _3640 = exp2(log2(1.0 / ((_3616 * 3.5) + 5.0)) * 0.25);
                        float _3641 = 1.0 - _1141;
                        float _3648 = sqrt(1.0 - ((1.0 - (_3641 * _3641)) * (1.0 - (_3640 * _3640))));
                        float _3649 = _3648 * _3648;
                        float _3650 = _3649 * _3649;
                        float _3651 = _3631 + _3596;
                        float _3652 = _3632 + _3597;
                        float _3653 = _3633 + _3598;
                        float _3657 = inversesqrt(dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653)));
                        float _3661 = dot(vec3(_1081, _1084, _1087), vec3(_3631, _3632, _3633));
                        float _5103 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                        float _3664 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                        float _3665 = dot(vec3(_1081, _1084, _1087), vec3(_3657 * _3651, _3657 * _3652, _3657 * _3653));
                        float _5114 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                        float _3668 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
                        float _3672 = ((_3668 * _3668) * (_3650 + (-1.0))) + 1.0;
                        float _3673 = _3609 * _3649;
                        float _3674 = _3673 * _3673;
                        float _3677 = ((1.0 - _3674) * _3599) + _3674;
                        float _5125 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                        float _3678 = isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0));
                        float _3679 = 1.0 - _3649;
                        float _3689 = (0.5 / (((_3678 * ((_3664 * _3679) + _3649)) + 9.9999999392252902907785028219223e-09) + (((_3678 * _3679) + _3649) * _3664))) * _3678;
                        float _5136 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                        float _3700 = (((_3650 * 3.1415927410125732421875) * (isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0)))) / ((_3672 * _3672) * ((_3616 * 2.1991131305694580078125) + 3.141590118408203125))) * _3605;
                        _3453 = (_3620 * _3568.x) + _3526;
                        _3454 = (_3620 * _3568.y) + _3527;
                        _3455 = (_3620 * _3568.z) + _3528;
                        _3450 = (_3700 * _3585.x) + _3523;
                        _3451 = (_3700 * _3585.y) + _3524;
                        _3452 = (_3700 * _3585.z) + _3525;
                        if (_3530 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3523 = _3450;
                            _3524 = _3451;
                            _3525 = _3452;
                            _3526 = _3453;
                            _3527 = _3454;
                            _3528 = _3455;
                            _3529 = _3530;
                        }
                    }
                    frontier_phi_71_pred = _3455;
                    frontier_phi_71_pred_1 = _3454;
                    frontier_phi_71_pred_2 = _3453;
                    frontier_phi_71_pred_3 = _3452;
                    frontier_phi_71_pred_4 = _3451;
                    frontier_phi_71_pred_5 = _3450;
                }
                _3237 = frontier_phi_71_pred;
                _3235 = frontier_phi_71_pred_1;
                _3233 = frontier_phi_71_pred_2;
                _3231 = frontier_phi_71_pred_3;
                _3229 = frontier_phi_71_pred_4;
                _3227 = frontier_phi_71_pred_5;
                uint _3385 = _3384 + 1u;
                if (_3385 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3378 = _3227;
                    _3379 = _3229;
                    _3380 = _3231;
                    _3381 = _3233;
                    _3382 = _3235;
                    _3383 = _3237;
                    _3384 = _3385;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
            _3236 = _3237;
        }
        uvec4 _3240 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3241 = _3240.z;
        uint _3243 = (_3241 >> 8u) & 15u;
        float _3346;
        float _3348;
        float _3350;
        float _3352;
        float _3354;
        float _3356;
        if (((4294967295u << _3243) & _3146) == 0u)
        {
            _3346 = _3226;
            _3348 = _3228;
            _3350 = _3230;
            _3352 = _3232;
            _3354 = _3234;
            _3356 = _3236;
        }
        else
        {
            float _3371 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
            float _3372 = _3371 * _2224;
            float _3373 = _3371 * _2225;
            float _3374 = _3371 * _2226;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3243 < ((_3241 >> 12u) & 15u))
            {
                float _3347;
                float _3349;
                float _3351;
                float _3353;
                float _3355;
                float _3357;
                float _3506 = _3226;
                float _3507 = _3228;
                float _3508 = _3230;
                float _3509 = _3232;
                float _3510 = _3234;
                float _3511 = _3236;
                uint _3512 = _3243;
                uint _3521;
                bool _3522;
                for (;;)
                {
                    _3521 = texelFetch(g_lightClassification, int((((_3140 << 5u) + (_3126 << 9u)) + (_3512 << 2u)) >> 2u)).x;
                    _3522 = _3521 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3522)
                    {
                        frontier_phi_82_pred = _3511;
                        frontier_phi_82_pred_1 = _3510;
                        frontier_phi_82_pred_2 = _3509;
                        frontier_phi_82_pred_3 = _3508;
                        frontier_phi_82_pred_4 = _3507;
                        frontier_phi_82_pred_5 = _3506;
                    }
                    else
                    {
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _4007;
                        float _4008;
                        float _4009;
                        float _4010;
                        float _4011;
                        float _4012;
                        float _3727 = _3506;
                        float _3728 = _3507;
                        float _3729 = _3508;
                        float _3730 = _3509;
                        float _3731 = _3510;
                        float _3732 = _3511;
                        uint _3733 = _3521;
                        uint _3734;
                        vec4 _3759;
                        float _3760;
                        vec4 _3775;
                        vec3 _3787;
                        vec4 _3802;
                        vec4 _3817;
                        float _3863;
                        bool _3864;
                        for (;;)
                        {
                            uint _3744 = ((_3512 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3733));
                            _3734 = (_3733 + 4294967295u) & _3733;
                            uint _3746 = _3744 * 40u;
                            _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            _3760 = _3759.w;
                            uint _3762 = (_3744 * 40u) + 4u;
                            _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            uint _3777 = (_3744 * 40u) + 8u;
                            _3787 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x));
                            uint _3789 = (_3744 * 40u) + 16u;
                            _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            uint _3804 = (_3744 * 40u) + 20u;
                            _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            uint _3819 = (_3744 * 40u) + 24u;
                            vec4 _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            uint _3838 = (_3744 * 40u) + 28u;
                            vec4 _3851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 3u)).x));
                            _3863 = fma(_2226, _3851.z, fma(_2225, _3851.y, _3851.x * _2224)) + _3851.w;
                            _3864 = !((fma(_2226, _3832.z, fma(_2225, _3832.y, _3832.x * _2224)) + _3832.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3864)
                            {
                                float _3891 = _3759.x - _2224;
                                float _3892 = _3759.y - _2225;
                                float _3893 = _3759.z - _2226;
                                float _3894 = dot(vec3(_3891, _3892, _3893), vec3(_3891, _3892, _3893));
                                float _3897 = inversesqrt(_3894);
                                float _3898 = _3897 * _3891;
                                float _3899 = _3897 * _3892;
                                float _3900 = _3897 * _3893;
                                float _3904 = 1.0 - (_3894 / (_3760 * _3760));
                                float _5147 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3905 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
                                float _3909 = sqrt(_3894) * _3775.w;
                                float _3911 = 1.39999997615814208984375 / (_3909 + 1.39999997615814208984375);
                                float _3912 = _3911 * _3911;
                                float _3915 = ((1.0 - _3912) * dot(vec3(_3898, _3899, _3900), vec3(_1081, _1084, _1087))) + _3912;
                                float _3918 = _3909 * _3909;
                                float _3922 = (fma(_2226, _3802.z, fma(_2225, _3802.y, _3802.x * _2224)) + _3802.w) / _3863;
                                float _3923 = (fma(_2226, _3817.z, fma(_2225, _3817.y, _3817.x * _2224)) + _3817.w) / _3863;
                                float _3927 = 1.0 - dot(vec2(_3922, _3923), vec2(_3922, _3923));
                                float _5163 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3928 = isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0));
                                float _3929 = _3928 * (((isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0))) * _3905) / ((_3918 * 0.699999988079071044921875) + 1.0));
                                float _3941 = exp2(log2(1.0 / ((_3918 * 3.5) + 5.0)) * 0.25);
                                float _3942 = 1.0 - _1141;
                                float _3949 = sqrt(1.0 - ((1.0 - (_3942 * _3942)) * (1.0 - (_3941 * _3941))));
                                float _3950 = _3949 * _3949;
                                float _3951 = _3950 * _3950;
                                float _3952 = _3898 - _3372;
                                float _3953 = _3899 - _3373;
                                float _3954 = _3900 - _3374;
                                float _3958 = inversesqrt(dot(vec3(_3952, _3953, _3954), vec3(_3952, _3953, _3954)));
                                float _3962 = dot(vec3(_1081, _1084, _1087), vec3((-0.0) - _3372, (-0.0) - _3373, (-0.0) - _3374));
                                float _5174 = isnan(0.0) ? _3962 : (isnan(_3962) ? 0.0 : max(_3962, 0.0));
                                float _3965 = isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0));
                                float _3966 = dot(vec3(_1081, _1084, _1087), vec3(_3958 * _3952, _3958 * _3953, _3958 * _3954));
                                float _5185 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3969 = isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0));
                                float _3973 = ((_3969 * _3969) * (_3951 + (-1.0))) + 1.0;
                                float _3974 = _3911 * _3950;
                                float _3975 = _3974 * _3974;
                                float _3981 = ((1.0 - _3975) * dot(vec3(_1081, _1084, _1087), vec3(_3898, _3899, _3900))) + _3975;
                                float _5196 = isnan(0.0) ? _3981 : (isnan(_3981) ? 0.0 : max(_3981, 0.0));
                                float _3982 = isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0));
                                float _3983 = 1.0 - _3950;
                                float _3993 = (0.5 / (((_3982 * ((_3965 * _3983) + _3950)) + 9.9999999392252902907785028219223e-09) + (((_3982 * _3983) + _3950) * _3965))) * _3982;
                                float _5207 = isnan(0.0) ? _3993 : (isnan(_3993) ? 0.0 : max(_3993, 0.0));
                                float _4003 = (_3928 * _3905) * (((_3951 * 3.1415927410125732421875) * (isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0)))) / ((_3973 * _3973) * ((_3918 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3929 * _3775.z;
                                frontier_phi_88_pred_1 = _3929 * _3775.y;
                                frontier_phi_88_pred_2 = _3929 * _3775.x;
                                frontier_phi_88_pred_3 = _4003 * _3787.z;
                                frontier_phi_88_pred_4 = _4003 * _3787.y;
                                frontier_phi_88_pred_5 = _4003 * _3787.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4012 = frontier_phi_88_pred;
                            _4011 = frontier_phi_88_pred_1;
                            _4010 = frontier_phi_88_pred_2;
                            _4009 = frontier_phi_88_pred_3;
                            _4008 = frontier_phi_88_pred_4;
                            _4007 = frontier_phi_88_pred_5;
                            _3717 = _4010 + _3730;
                            _3718 = _4011 + _3731;
                            _3719 = _4012 + _3732;
                            _3714 = _4007 + _3727;
                            _3715 = _4008 + _3728;
                            _3716 = _4009 + _3729;
                            if (_3734 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3727 = _3714;
                                _3728 = _3715;
                                _3729 = _3716;
                                _3730 = _3717;
                                _3731 = _3718;
                                _3732 = _3719;
                                _3733 = _3734;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3719;
                        frontier_phi_82_pred_1 = _3718;
                        frontier_phi_82_pred_2 = _3717;
                        frontier_phi_82_pred_3 = _3716;
                        frontier_phi_82_pred_4 = _3715;
                        frontier_phi_82_pred_5 = _3714;
                    }
                    _3357 = frontier_phi_82_pred;
                    _3355 = frontier_phi_82_pred_1;
                    _3353 = frontier_phi_82_pred_2;
                    _3351 = frontier_phi_82_pred_3;
                    _3349 = frontier_phi_82_pred_4;
                    _3347 = frontier_phi_82_pred_5;
                    uint _3513 = _3512 + 1u;
                    if (_3513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3506 = _3347;
                        _3507 = _3349;
                        _3508 = _3351;
                        _3509 = _3353;
                        _3510 = _3355;
                        _3511 = _3357;
                        _3512 = _3513;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3353;
                frontier_phi_63_64_ladder_1 = _3357;
                frontier_phi_63_64_ladder_2 = _3355;
                frontier_phi_63_64_ladder_3 = _3351;
                frontier_phi_63_64_ladder_4 = _3349;
                frontier_phi_63_64_ladder_5 = _3347;
            }
            else
            {
                frontier_phi_63_64_ladder = _3232;
                frontier_phi_63_64_ladder_1 = _3236;
                frontier_phi_63_64_ladder_2 = _3234;
                frontier_phi_63_64_ladder_3 = _3230;
                frontier_phi_63_64_ladder_4 = _3228;
                frontier_phi_63_64_ladder_5 = _3226;
            }
            _3346 = frontier_phi_63_64_ladder_5;
            _3348 = frontier_phi_63_64_ladder_4;
            _3350 = frontier_phi_63_64_ladder_3;
            _3352 = frontier_phi_63_64_ladder;
            _3354 = frontier_phi_63_64_ladder_2;
            _3356 = frontier_phi_63_64_ladder_1;
        }
        float _3361 = isnan(1.0) ? _1125 : (isnan(_1125) ? 1.0 : min(_1125, 1.0));
        _3159 = (_3361 * _3352) + _2690;
        _3161 = (_3361 * _3354) + _2692;
        _3163 = (_3361 * _3356) + _2694;
        _3165 = ((_3346 * 0.039999999105930328369140625) * _3361) + _3013;
        _3167 = ((_3348 * 0.039999999105930328369140625) * _3361) + _3015;
        _3169 = ((_3350 * 0.039999999105930328369140625) * _3361) + _3017;
    }
    else
    {
        _3159 = _2690;
        _3161 = _2692;
        _3163 = _2694;
        _3165 = _3013;
        _3167 = _3015;
        _3169 = _3017;
    }
    float _5223 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _5234 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _5245 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _3186 = ((isnan(1.0) ? _5223 : (isnan(_5223) ? 1.0 : min(_5223, 1.0))) * (_3159 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1125))) + ((_3165 + ((isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0))) * _1960)) * cbPerFrame._m0[3u].x);
    float _3187 = ((isnan(1.0) ? _5234 : (isnan(_5234) ? 1.0 : min(_5234, 1.0))) * (_3161 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1125))) + ((_3167 + ((isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0))) * _1960)) * cbPerFrame._m0[3u].x);
    float _3188 = ((isnan(1.0) ? _5245 : (isnan(_5245) ? 1.0 : min(_5245, 1.0))) * (_3163 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1125))) + ((_3169 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1960)) * cbPerFrame._m0[3u].x);
    uint _3189 = _289 + 6u;
    float _3197 = _1062 / cbSceneParam._m0[86u].x;
    float _3198 = _1063 / cbSceneParam._m0[86u].y;
    vec4 _3212 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3197, _3198, (log2((isnan(cbSceneParam._m0[77u].w) ? _984 : (isnan(_984) ? cbSceneParam._m0[77u].w : min(_984, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3214 = _3212.x;
    float _3215 = _3212.y;
    float _3216 = _3212.z;
    float _3217 = _3212.w;
    float _3288;
    float _3290;
    float _3292;
    float _3294;
    if (_984 > cbSceneParam._m0[78u].w)
    {
        float _3251 = isnan(_984) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _984 : min(cbSceneParam._m0[80u].w, _984));
        float _3252 = _3251 / _984;
        float _3263 = _3252 * _1035;
        float _3264 = _1036 * _3252;
        float _3265 = (-0.0) - _3264;
        float _3266 = _3252 * _1037;
        float _3268 = (cbSceneParam._m0[77u].w * _3265) / _3251;
        float _3269 = _3268 + cbSceneParam._m0[79u].w;
        float _3270 = cbSceneParam._m0[79u].w - _3264;
        float _3276 = sqrt(((_3263 * _3263) + (_3264 * _3264)) + (_3266 * _3266));
        float _3279 = (1.0 - (cbSceneParam._m0[77u].w / _3251)) * _3276;
        float _3284 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3286 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3463;
        if (abs((_3265 - _3268) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3463 = ((((_3269 > 0.0) ? exp2(_3284 * _3269) : (2.0 - exp2(_3286 * _3269))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3279;
        }
        else
        {
            float _3407 = 1.0 / cbSceneParam._m0[80u].x;
            float _3408 = isnan(_3270) ? _3269 : (isnan(_3269) ? _3270 : max(_3269, _3270));
            float _3409 = isnan(_3270) ? _3269 : (isnan(_3269) ? _3270 : min(_3269, _3270));
            float _3418 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : min(_3408, 0.0));
            float _3419 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : min(_3409, 0.0));
            _3463 = ((abs(_3276 / _3265) * cbSceneParam._m0[80u].y) * ((((_3418 - _3419) * 2.0) - ((exp2(_3284 * (isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0)))) - exp2(_3284 * (isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))))) * _3407)) - ((exp2(_3286 * _3418) - exp2(_3286 * _3419)) * _3407))) + (_3279 * cbSceneParam._m0[80u].z);
        }
        vec4 _3465 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3197, _3198, 1.0), 0.0);
        float _3474 = exp2((_3463 * (-1.44269502162933349609375)) * (1.0 - _3465.w));
        float _3475 = log2(_3474);
        float _3491 = log2(_3217);
        _3288 = (exp2(_3491 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3475 * cbSceneParam._m0[78u].x)) * _3465.x) / cbSceneParam._m0[78u].x)) + _3214;
        _3290 = (exp2(_3491 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3475 * cbSceneParam._m0[78u].y)) * _3465.y) / cbSceneParam._m0[78u].y)) + _3215;
        _3292 = (exp2(_3491 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3475 * cbSceneParam._m0[78u].z)) * _3465.z) / cbSceneParam._m0[78u].z)) + _3216;
        _3294 = _3474 * _3217;
    }
    else
    {
        _3288 = _3214;
        _3290 = _3215;
        _3292 = _3216;
        _3294 = _3217;
    }
    bool _3501;
    vec4 _3304;
    vec4 _3326;
    float _3328;
    float _3332;
    float _3333;
    float _3334;
    float _3335;
    bool _3345;
    for (;;)
    {
        _3304 = cbMatDynParam._m0[0u];
        float _3306 = roundEven(_3304.y);
        bool _3307 = _3306 == 3.0;
        float _3308 = log2(_3294);
        float _3315 = exp2(_3308 * cbSceneParam._m0[78u].x) * _3186;
        float _3316 = exp2(_3308 * cbSceneParam._m0[78u].y) * _3187;
        float _3317 = exp2(_3308 * cbSceneParam._m0[78u].z) * _3188;
        float _3324 = _1051 + (-0.5);
        _3326 = cbMtdParam._m0[1u];
        _3328 = _3326.y * _3324;
        float _3331 = (_3306 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3332 = _3331 * (_3307 ? _3315 : (_3315 + (cbSceneParam._m0[72u].w * _3288)));
        _3333 = _3331 * (_3307 ? _3316 : (_3316 + (cbSceneParam._m0[72u].w * _3290)));
        _3334 = _3331 * (_3307 ? _3317 : (_3317 + (cbSceneParam._m0[72u].w * _3292)));
        _3335 = _3324 * 0.999000012874603271484375;
        _3345 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3345)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3335) < 0.5)
            {
                _3501 = true;
                break;
            }
        }
        uint _3442 = _1100 + uint(_3304.w);
        if ((cbInstanceData._m0[_3442].w < 1.0) && ((cbInstanceData._m0[_3442].w + _3335) < 0.5))
        {
            _3501 = true;
            break;
        }
        if ((_3328 + 1.0) < _3326.x)
        {
            _3501 = true;
            break;
        }
        _3501 = false;
        break;
    }
    float _3705;
    if (_3501)
    {
        discard_state = true;
        _3705 = 0.0;
    }
    else
    {
        _3705 = cbInstanceData._m0[_3189].w;
    }
    SV_Target.x = _3332;
    SV_Target.y = _3333;
    SV_Target.z = _3334;
    SV_Target.w = _3705;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3189].w;
    discard_exit();
}


