#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1229;
float _3612;
float _3613;
float _3614;
float _3615;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _302.x * cbMtdParam._m0[11u].x;
    float _308 = _302.y * cbMtdParam._m0[11u].y;
    float _309 = _302.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _384 = _382.x;
    float _396 = dot(vec4(_384, _382.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _413 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_384 - _396) * cbMtdParam._m0[24u].z) + _396) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3624 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _427 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _278.x) * ((_414 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307);
    float _430 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _278.y) * ((_414 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308);
    float _433 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _278.z) * ((_414 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309);
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _491 = _489.x;
    float _492 = _489.y;
    float _493 = _489.z;
    float _502 = ((_472.z - _493) * _414) + _493;
    float _505 = ((((_472.x - _491) * _414) + _491) * 2.0) + (-1.0);
    float _507 = ((((_472.y - _492) * _414) + _492) * 2.0) + (-1.0);
    float _508 = dot(vec2(_505, _507), vec2(_505, _507));
    float _3635 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _513 = sqrt(1.0 - (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _541 = (((_529.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _505;
    float _542 = (((_529.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _507;
    float _545 = fma(_513, _226, fma(_542, _233, _541 * _219));
    float _548 = fma(_513, _227, fma(_542, _234, _541 * _220));
    float _551 = fma(_513, _228, fma(_542, _235, _541 * _221));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _584 = _582.x;
    float _585 = 1.0 - _584;
    float _591 = (cbMtdParam._m0[19u].x + dot(vec4(_555 * _545, _555 * _548, _555 * _551, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_584 - _585) * cbMtdParam._m0[24u].w) + _585) * cbMtdParam._m0[21u].z);
    float _3646 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _599 = (_592 * ((_452.x * cbMtdParam._m0[18u].x) - _427)) + _427;
    float _600 = (_592 * ((_452.y * cbMtdParam._m0[18u].y) - _430)) + _430;
    float _601 = (_592 * ((_452.z * cbMtdParam._m0[18u].z) - _433)) + _433;
    float _605 = (cbMtdParam._m0[19u].w * (_529.z - _502)) + _502;
    vec4 _618 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _625 = (_618.x * 2.0) + (-1.0);
    float _626 = (_618.y * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _3657 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _635 = ((_618.z - _605) * _592) + _605;
    float _645 = ((sqrt(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) - _513) * _592) + _513;
    float _648 = (((_625 - _541) * _592) + _541) + (cbMtdParam._m0[21u].x * _541);
    float _649 = (((_626 - _542) * _592) + _542) + (cbMtdParam._m0[21u].x * _542);
    float _653 = cbMtdParam._m0[22u].x + _529.w;
    float _656 = fma(_645, _226, fma(_649, _233, _648 * _219));
    float _659 = fma(_645, _227, fma(_649, _234, _648 * _220));
    float _662 = fma(_645, _228, fma(_649, _235, _648 * _221));
    float _666 = inversesqrt(dot(vec3(_656, _659, _662), vec3(_656, _659, _662)));
    float _667 = _666 * _656;
    float _668 = _666 * _659;
    float _669 = _666 * _662;
    float _3668 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _670 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _3690 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3701 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3712 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _739 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _729);
    float _740 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _729);
    float _741 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _729);
    float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
    float _746 = _739 * _745;
    float _747 = _740 * _745;
    float _748 = _741 * _745;
    vec4 _753 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _755 = _753.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _909 = sqrt(((_739 * _739) + (_740 * _740)) + (_741 * _741));
        float _915 = (cbMatDynParam._m0[5u].x * _909) + cbMatDynParam._m0[5u].y;
        float _3723 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _920 = (cbMatDynParam._m0[5u].z * _909) + cbMatDynParam._m0[5u].w;
        float _3734 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) - _916)) + _916) < ((_755 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _766 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _767 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _785 = fma(_669, cbSceneParam._m0[5u].z, fma(_668, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _667));
    float _788 = fma(_669, cbSceneParam._m0[6u].z, fma(_668, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _667));
    float _791 = fma(_669, cbSceneParam._m0[7u].z, fma(_668, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _667));
    uint _804 = _238 + 9u;
    uint _805 = _804 + uint(cbMatDynParam._m0[0u].w);
    float _811 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_805].x;
    float _812 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_805].y;
    float _813 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_805].z;
    float _3745 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    vec4 _825 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _766, cbSceneParam._m0[86u].y * _767));
    float _829 = ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * TEXCOORD_5.w) * _825.x;
    float _830 = dot(vec3(_667, _668, _669), vec3(_746, _747, _748));
    float _833 = _830 * 2.0;
    float _837 = (_833 * _667) - _746;
    float _838 = (_833 * _668) - _747;
    float _839 = (_833 * _669) - _748;
    float _843 = abs(dot(vec3(_746, _747, _748), vec3(_667, _668, _669)));
    float _3778 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _845 = sqrt(_670);
    float _858 = exp2((_845 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_845 * 3.0));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1228;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _953 = fma(_898, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890));
        float _957 = fma(_898, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890));
        float _961 = fma(_898, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890));
        float _986 = _890 + _667;
        float _987 = _894 + _668;
        float _988 = _898 + _669;
        float _998 = fma(_988, cbModelParam._m0[26u].z, fma(_987, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _986)) - _953;
        float _999 = fma(_988, cbModelParam._m0[27u].z, fma(_987, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _986)) - _957;
        float _1000 = fma(_988, cbModelParam._m0[28u].z, fma(_987, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _986)) - _961;
        float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
        float _1017 = ((_1004 * _998) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_953 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1004 * _999) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_957 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1004 * _1000) / cbModelParam._m0[34u].z) + ((((((_961 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        float _1056 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1022.x + (-0.5));
        float _1058 = _1056 * (_1022.y + (-0.5));
        float _1059 = _1056 * (_1022.z + (-0.5));
        float _1066 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1029.x + (-0.5));
        float _1068 = _1066 * (_1029.y + (-0.5));
        float _1069 = _1066 * (_1029.z + (-0.5));
        float _1076 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1036.x + (-0.5));
        float _1078 = _1076 * (_1036.y + (-0.5));
        float _1079 = _1076 * (_1036.z + (-0.5));
        float _1086 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1043.x + (-0.5));
        float _1088 = _1086 * (_1043.y + (-0.5));
        float _1089 = _1086 * (_1043.z + (-0.5));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = _1057 * 0.5;
        float _1094 = _1067 * 0.5;
        float _1095 = _1077 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1110 = (dot(vec3(_667, _668, _669), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1120 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3826 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1122 + 1.0))) + _1127) * _1090;
        float _1137 = _1058 * 0.5;
        float _1138 = _1068 * 0.5;
        float _1139 = _1078 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_667, _668, _669), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3859 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1164 + 1.0))) + _1169) * _1091;
        float _1179 = _1059 * 0.5;
        float _1180 = _1069 * 0.5;
        float _1181 = _1079 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_667, _668, _669), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3892 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1206 + 1.0))) + _1211) * _1092;
        _1228 = _1059;
        _1230 = _1058;
        _1231 = _1057;
        _1232 = _1069;
        _1233 = _1068;
        _1234 = _1067;
        _1235 = _1079;
        _1236 = _1078;
        _1237 = _1077;
        _1238 = _1092;
        _1239 = _1091;
        _1240 = _1090;
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
    }
    else
    {
        _1228 = _1229;
        _1230 = _1229;
        _1231 = _1229;
        _1232 = _1229;
        _1233 = _1229;
        _1234 = _1229;
        _1235 = _1229;
        _1236 = _1229;
        _1237 = _1229;
        _1238 = _1229;
        _1239 = _1229;
        _1240 = _1229;
        _1241 = 0.0;
        _1242 = 0.0;
        _1243 = 0.0;
    }
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1271 = fma(_898, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890));
        float _1275 = fma(_898, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890));
        float _1279 = fma(_898, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890));
        float _1302 = _890 + _667;
        float _1303 = _894 + _668;
        float _1304 = _898 + _669;
        float _1314 = fma(_1304, cbModelParam._m0[30u].z, fma(_1303, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1302)) - _1271;
        float _1315 = fma(_1304, cbModelParam._m0[31u].z, fma(_1303, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1302)) - _1275;
        float _1316 = fma(_1304, cbModelParam._m0[32u].z, fma(_1303, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1302)) - _1279;
        float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
        float _1333 = ((_1320 * _1314) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1271 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1320 * _1315) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1275 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1320 * _1316) / cbModelParam._m0[35u].z) + ((((((_1279 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        float _1370 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1337.x + (-0.5));
        float _1372 = _1370 * (_1337.y + (-0.5));
        float _1373 = _1370 * (_1337.z + (-0.5));
        float _1380 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1344.x + (-0.5));
        float _1382 = _1380 * (_1344.y + (-0.5));
        float _1383 = _1380 * (_1344.z + (-0.5));
        float _1390 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1351.x + (-0.5));
        float _1392 = _1390 * (_1351.y + (-0.5));
        float _1393 = _1390 * (_1351.z + (-0.5));
        float _1400 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1358.x + (-0.5));
        float _1402 = _1400 * (_1358.y + (-0.5));
        float _1403 = _1400 * (_1358.z + (-0.5));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = _1371 * 0.5;
        float _1408 = _1381 * 0.5;
        float _1409 = _1391 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_667, _668, _669), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _3955 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1434 + 1.0))) + _1439) * _1404;
        float _1449 = _1372 * 0.5;
        float _1450 = _1382 * 0.5;
        float _1451 = _1392 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_667, _668, _669), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _3988 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1476 + 1.0))) + _1481) * _1405;
        float _1491 = _1373 * 0.5;
        float _1492 = _1383 * 0.5;
        float _1493 = _1393 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_667, _668, _669), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4021 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1518 + 1.0))) + _1523) * _1406;
        _1540 = _1373;
        _1541 = _1372;
        _1542 = _1371;
        _1543 = _1383;
        _1544 = _1382;
        _1545 = _1381;
        _1546 = _1393;
        _1547 = _1392;
        _1548 = _1391;
        _1549 = _1406;
        _1550 = _1405;
        _1551 = _1404;
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
    }
    else
    {
        _1540 = _1229;
        _1541 = _1229;
        _1542 = _1229;
        _1543 = _1229;
        _1544 = _1229;
        _1545 = _1229;
        _1546 = _1229;
        _1547 = _1229;
        _1548 = _1229;
        _1549 = _1229;
        _1550 = _1229;
        _1551 = _1229;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1241)) + _1241;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1242)) + _1242;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1243)) + _1243;
    float _1587 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1564));
    float _1608 = _837 * 0.5;
    float _1609 = _838 * 0.5;
    float _1610 = _839 * 0.5;
    float _1611 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1614 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1617 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1651;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1624 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1228, _1232, _1235, _1238));
        float _1628 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1632 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1639 = dot(vec4(cbModelParam._m0[39u]), vec4(_1608, _1609, _1610, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1662;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1653 = dot(vec4(cbModelParam._m0[40u]), vec4(_1608, _1609, _1610, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1666 = (_1662 * cbModelParam._m0[1u].x) + (_1651 * (1.0 - cbModelParam._m0[1u].x));
    float _1676 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _670);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1676 : min(cbModelParam._m0[25u].z, _1676));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1724 = fma(_898, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890)) + cbModelParam._m0[13u].w;
        float _1728 = fma(_898, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890)) + cbModelParam._m0[14u].w;
        float _1732 = fma(_898, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890)) + cbModelParam._m0[15u].w;
        float _1735 = fma(_839, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837));
        float _1738 = fma(_839, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837));
        float _1741 = fma(_839, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837));
        float _1769;
        if (_1735 > 0.0)
        {
            _1769 = abs((1.0 - _1724) / _1735);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1724 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1769 = frontier_phi_17_15_ladder;
        }
        float _1990;
        if (_1738 > 0.0)
        {
            _1990 = abs((1.0 - _1728) / _1738);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1728 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1990 = frontier_phi_26_22_ladder;
        }
        float _2236;
        if (_1741 > 0.0)
        {
            _2236 = abs((1.0 - _1732) / _1741);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1732 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2236 = frontier_phi_38_33_ladder;
        }
        float _2238 = isnan(_1990) ? _1769 : (isnan(_1769) ? _1990 : min(_1769, _1990));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1735) + _1724;
        float _2244 = (_2239 * _1738) + _1728;
        float _2245 = (_2239 * _1741) + _1732;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2246;
        float _2250 = _2246 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 > _2250) || ((_2244 < _2248) || ((_2243 < _2248) || (_2243 > _2250))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2245, cbModelParam._m0[9u].z, fma(_2244, cbModelParam._m0[9u].y, _2243 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2245, cbModelParam._m0[10u].z, fma(_2244, cbModelParam._m0[10u].y, _2243 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2245, cbModelParam._m0[11u].z, fma(_2244, cbModelParam._m0[11u].y, _2243 * cbModelParam._m0[11u].x))), _1677);
            frontier_phi_16_38_ladder = _2369.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2369.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2369.x * cbModelParam._m0[1u].y;
        }
        _1757 = frontier_phi_16_38_ladder_2;
        _1759 = frontier_phi_16_38_ladder_1;
        _1761 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_837, _838, _839), _1677);
        _1757 = _1745.x * cbModelParam._m0[1u].y;
        _1759 = _1745.y * cbModelParam._m0[1u].y;
        _1761 = _1745.z * cbModelParam._m0[1u].y;
    }
    float _1765 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _670);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1765 : min(cbModelParam._m0[25u].w, _1765));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1819 = fma(_898, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890)) + cbModelParam._m0[21u].w;
        float _1823 = fma(_898, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890)) + cbModelParam._m0[22u].w;
        float _1827 = fma(_898, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890)) + cbModelParam._m0[23u].w;
        float _1830 = fma(_839, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837));
        float _1833 = fma(_839, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837));
        float _1836 = fma(_839, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837));
        float _1995;
        if (_1830 > 0.0)
        {
            _1995 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1995 = frontier_phi_28_24_ladder;
        }
        float _2263;
        if (_1833 > 0.0)
        {
            _2263 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2263 = frontier_phi_40_35_ladder;
        }
        float _2468;
        if (_1836 > 0.0)
        {
            _2468 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2468 = frontier_phi_49_46_ladder;
        }
        float _2470 = isnan(_2263) ? _1995 : (isnan(_1995) ? _2263 : min(_1995, _2263));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1830) + _1819;
        float _2476 = (_2471 * _1833) + _1823;
        float _2477 = (_2471 * _1836) + _1827;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2478;
        float _2481 = _2478 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2477 > _2481) || ((_2477 < _2479) || ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 < _2479) || (_2475 > _2481))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2477, cbModelParam._m0[17u].z, fma(_2476, cbModelParam._m0[17u].y, _2475 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2477, cbModelParam._m0[18u].z, fma(_2476, cbModelParam._m0[18u].y, _2475 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2477, cbModelParam._m0[19u].z, fma(_2476, cbModelParam._m0[19u].y, _2475 * cbModelParam._m0[19u].x))), _1766);
            frontier_phi_25_49_ladder = _2676.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2676.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2676.x * cbModelParam._m0[1u].z;
        }
        _1855 = frontier_phi_25_49_ladder_2;
        _1857 = frontier_phi_25_49_ladder_1;
        _1859 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_837, _838, _839), _1766);
        _1855 = _1839.x * cbModelParam._m0[1u].z;
        _1857 = _1839.y * cbModelParam._m0[1u].z;
        _1859 = _1839.z * cbModelParam._m0[1u].z;
    }
    float _1871 = ((((1.0 - _858) * ((_845 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_858 * _845)) * _829;
    float _1872 = _1871 * ((cbModelParam._m0[1u].w * (_1855 - _1757)) + _1757);
    float _1873 = _1871 * ((cbModelParam._m0[1u].w * (_1857 - _1759)) + _1759);
    float _1874 = _1871 * ((cbModelParam._m0[1u].w * (_1859 - _1761)) + _1761);
    float _1877 = fma(_1874, cbSceneParam._m0[89u].z, fma(_1873, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1874, cbSceneParam._m0[90u].z, fma(_1873, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1874, cbSceneParam._m0[91u].z, fma(_1873, cbSceneParam._m0[91u].y, _1872 * cbSceneParam._m0[91u].x));
    vec4 _1891 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_766, _767));
    float _1893 = _1891.w;
    float _1905 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1893);
    float _1906 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1893);
    float _1907 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1893);
    uvec4 _1911 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1913 = _1911.x * 14u;
    uint _1914 = _1913 + 13u;
    float _1921 = _829 + (-1.0);
    float _1926 = (cbLight._m0[_1914].x * _1921) + 1.0;
    float _1927 = (cbLight._m0[_1914].y * _1921) + 1.0;
    float _1928 = (cbLight._m0[_1914].z * _1921) + 1.0;
    float _1929 = (cbLight._m0[_1914].w * _1921) + 1.0;
    uint _1930 = _1913 + 5u;
    float _1936 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    uint _1940 = _1913 + 4u;
    float _1949 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1953 = _1913 | 1u;
    float _1964 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_667, _668, _669));
    float _1967 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_667, _668, _669));
    float _4157 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _4168 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1972 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _1974 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.3183098733425140380859375;
    float _1981 = ((cbLight._m0[_1930].x * _1936) * _1974) + (((cbLight._m0[_1940].x * _1905) * _1949) * _1972);
    float _1982 = ((_1936 * cbLight._m0[_1930].y) * _1974) + (((cbLight._m0[_1940].y * _1906) * _1949) * _1972);
    float _1983 = ((_1936 * cbLight._m0[_1930].z) * _1974) + (((cbLight._m0[_1940].z * _1907) * _1949) * _1972);
    uvec4 _1987 = floatBitsToUint(cbLight._m0[_1913 + 12u]);
    bool _1989 = _1987.x == 0u;
    float _2000;
    float _2002;
    float _2004;
    if (_1989)
    {
        _2000 = _1981;
        _2002 = _1982;
        _2004 = _1983;
    }
    else
    {
        uint _2008 = _1913 + 6u;
        float _2024 = (dot(vec3(cbLight._m0[_1913 + 2u].xyz), vec3(_667, _668, _669)) * 0.5) + 0.5;
        float _2025 = _2024 * _2024;
        float _4179 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2026 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2027 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2000 = (((cbLight._m0[_2008].x * 0.3183098733425140380859375) * _2026) * _2027) + _1981;
        _2002 = (((cbLight._m0[_2008].y * 0.3183098733425140380859375) * _2026) * _2027) + _1982;
        _2004 = (((cbLight._m0[_2008].z * 0.3183098733425140380859375) * _2026) * _2027) + _1983;
    }
    bool _2007 = _1987.y == 0u;
    float _2045;
    float _2047;
    float _2049;
    if (_2007)
    {
        _2045 = _2000;
        _2047 = _2002;
        _2049 = _2004;
    }
    else
    {
        uint _2207 = _1913 + 7u;
        float _2223 = (dot(vec3(cbLight._m0[_1913 + 3u].xyz), vec3(_667, _668, _669)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4195 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2226 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2045 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2000;
        _2047 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2002;
        _2049 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2004;
    }
    uint _2052 = _1913 + 8u;
    float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _670) * 0.949999988079071044921875);
    float _2066 = _2065 * _2065;
    float _2067 = cbLight._m0[_1913].x + _746;
    float _2068 = cbLight._m0[_1913].y + _747;
    float _2069 = cbLight._m0[_1913].z + _748;
    float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
    float _2074 = _2073 * _2067;
    float _2075 = _2073 * _2068;
    float _2076 = _2073 * _2069;
    float _2077 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_1913].xyz));
    float _4211 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _4222 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _2081 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2082 = dot(vec3(_667, _668, _669), vec3(_2074, _2075, _2076));
    float _4233 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2086 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_2074, _2075, _2076));
    float _4244 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2090 = _2066 * _2066;
    float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
    float _2105 = (exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2106 = 1.0 - _2066;
    float _2117 = (0.5 / (((_2081 * ((_2080 * _2106) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2106) + _2066) * _2080))) * _2080;
    float _4255 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
    uint _2133 = _1913 + 9u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _670) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1953].x + _746;
    float _2147 = cbLight._m0[_1953].y + _747;
    float _2148 = cbLight._m0[_1953].z + _748;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_1953].xyz));
    float _4266 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2160 = dot(vec3(_667, _668, _669), vec3(_2153, _2154, _2155));
    float _4277 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_2153, _2154, _2155));
    float _4288 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2145 * _2145;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2181 = (exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2182 = 1.0 - _2145;
    float _2192 = (0.5 / (((_2081 * ((_2159 * _2182) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2182) + _2145) * _2159))) * _2159;
    float _4299 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    float _2204 = (((_2181 * cbLight._m0[_2133].x) * _2194) * _1936) + ((((cbLight._m0[_2052].x * _1905) * _2105) * _2119) * _1949);
    float _2205 = (((_2181 * cbLight._m0[_2133].y) * _2194) * _1936) + ((((cbLight._m0[_2052].y * _1906) * _2105) * _2119) * _1949);
    float _2206 = (((_2181 * cbLight._m0[_2133].z) * _2194) * _1936) + ((((cbLight._m0[_2052].z * _1907) * _2105) * _2119) * _1949);
    float _2268;
    float _2270;
    float _2272;
    if (_1989)
    {
        _2268 = _2204;
        _2270 = _2205;
        _2272 = _2206;
    }
    else
    {
        uint _2274 = _1913 + 2u;
        uint _2278 = _1913 + 10u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _670) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _746;
        float _2295 = cbLight._m0[_2274].y + _747;
        float _2296 = cbLight._m0[_2274].z + _748;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_2274].xyz));
        float _4310 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2308 = dot(vec3(_667, _668, _669), vec3(_2301, _2302, _2303));
        float _4321 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4332 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2329 = (exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2330 = 1.0 - _2293;
        float _2340 = (0.5 / (((_2081 * ((_2307 * _2330) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2330) + _2293) * _2307))) * _2307;
        float _4343 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2268 = (((_2329 * cbLight._m0[_2278].x) * _2342) * _2343) + _2204;
        _2270 = (((_2329 * cbLight._m0[_2278].y) * _2342) * _2343) + _2205;
        _2272 = (((_2329 * cbLight._m0[_2278].z) * _2342) * _2343) + _2206;
    }
    float _2378;
    float _2380;
    float _2382;
    if (_2007)
    {
        _2378 = _2268;
        _2380 = _2270;
        _2382 = _2272;
    }
    else
    {
        uint _2389 = _1913 + 3u;
        uint _2393 = _1913 + 11u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _670) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _746;
        float _2410 = cbLight._m0[_2389].y + _747;
        float _2411 = cbLight._m0[_2389].z + _748;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_2389].xyz));
        float _4359 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2423 = dot(vec3(_667, _668, _669), vec3(_2416, _2417, _2418));
        float _4370 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4381 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2444 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2445 = 1.0 - _2408;
        float _2455 = (0.5 / (((_2081 * ((_2422 * _2445) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2445) + _2408) * _2422))) * _2422;
        float _4392 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2378 = (((_2444 * cbLight._m0[_2393].x) * _2457) * _2458) + _2268;
        _2380 = (((_2444 * cbLight._m0[_2393].y) * _2457) * _2458) + _2270;
        _2382 = (((_2444 * cbLight._m0[_2393].z) * _2457) * _2458) + _2272;
    }
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_1911.y == 0u)
    {
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2533;
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2533;
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2533;
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.x;
        uint _2560 = uint((float(_2548.y) * floor(float(uint(cbSceneParam._m0[85u].y * _767) / _2549))) + floor(float(uint(cbSceneParam._m0[85u].x * _766) / _2549)));
        float _2570 = (log2(_2536 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2571 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        uint _2574 = uint(isnan(14.0) ? _2571 : (isnan(_2571) ? 14.0 : min(_2571, 14.0)));
        uvec4 _2579 = texelFetch(g_lightClusterGridBuffer, int(((_2574 << 2u) + (_2560 << 6u)) >> 2u));
        uint _2580 = _2579.x;
        uint _2581 = _2548.z;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((((1u << ((_2581 >> 4u) & 15u)) + 4294967295u) & _2580) == 0u) || ((_2581 & 240u) == 0u))
        {
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
        }
        else
        {
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            uint _2840 = 0u;
            uint _2849;
            bool _2850;
            for (;;)
            {
                _2849 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                _2850 = _2849 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2850)
                {
                    frontier_phi_66_pred = _2834;
                    frontier_phi_66_pred_1 = _2839;
                    frontier_phi_66_pred_2 = _2838;
                    frontier_phi_66_pred_3 = _2837;
                    frontier_phi_66_pred_4 = _2836;
                    frontier_phi_66_pred_5 = _2835;
                }
                else
                {
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    uint _2985;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2849;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    for (;;)
                    {
                        uint _2989 = uint(findLSB(_2985)) + (_2840 << 5u);
                        uint _2986 = (_2985 + 4294967295u) & _2985;
                        uint _2991 = _2989 * 48u;
                        vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3011 = (_2989 * 48u) + 4u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3030 = (_2989 * 48u) + 8u;
                        vec3 _3041 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x));
                        float _3045 = _3005.x - _2534;
                        float _3046 = _3005.y - _2535;
                        float _3047 = _3005.z - _2536;
                        float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                        float _3051 = inversesqrt(_3048);
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3055 = dot(vec3(_785, _788, _791), vec3(_3052, _3053, _3054));
                        float _3060 = 1.0 - (_3048 * _3005.w);
                        float _4418 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3062 = sqrt(_3048) * _3024.w;
                        float _3065 = 1.39999997615814208984375 / (_3062 + 1.39999997615814208984375);
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _3055) + _3066;
                        float _3072 = _3062 * _3062;
                        float _3076 = ((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3061) / ((_3072 * 0.699999988079071044921875) + 1.0);
                        float _3080 = (-0.0) - _2534;
                        float _3081 = (-0.0) - _2535;
                        float _3082 = (-0.0) - _2536;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3097 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                        float _3098 = 1.0 - _845;
                        float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                        float _3106 = _3105 * _3105;
                        float _3107 = _3106 * _3106;
                        float _3108 = _3087 + _3052;
                        float _3109 = _3088 + _3053;
                        float _3110 = _3089 + _3054;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3118 = dot(vec3(_785, _788, _791), vec3(_3087, _3088, _3089));
                        float _4434 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3122 = dot(vec3(_785, _788, _791), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                        float _4445 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                        float _3130 = _3065 * _3106;
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3055) + _3131;
                        float _4456 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3136 = 1.0 - _3106;
                        float _3146 = (0.5 / (((_3135 * ((_3121 * _3136) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3106) * _3121))) * _3135;
                        float _4467 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3157 = (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3129 * _3129) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125))) * _3061;
                        _2909 = (_3076 * _3024.x) + _2982;
                        _2910 = (_3076 * _3024.y) + _2983;
                        _2911 = (_3076 * _3024.z) + _2984;
                        _2906 = (_3157 * _3041.x) + _2979;
                        _2907 = (_3157 * _3041.y) + _2980;
                        _2908 = (_3157 * _3041.z) + _2981;
                        if (_2986 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2979 = _2906;
                            _2980 = _2907;
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2986;
                        }
                    }
                    frontier_phi_66_pred = _2906;
                    frontier_phi_66_pred_1 = _2911;
                    frontier_phi_66_pred_2 = _2910;
                    frontier_phi_66_pred_3 = _2909;
                    frontier_phi_66_pred_4 = _2908;
                    frontier_phi_66_pred_5 = _2907;
                }
                _2682 = frontier_phi_66_pred;
                _2692 = frontier_phi_66_pred_1;
                _2690 = frontier_phi_66_pred_2;
                _2688 = frontier_phi_66_pred_3;
                _2686 = frontier_phi_66_pred_4;
                _2684 = frontier_phi_66_pred_5;
                uint _2841 = _2840 + 1u;
                if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2834 = _2682;
                    _2835 = _2684;
                    _2836 = _2686;
                    _2837 = _2688;
                    _2838 = _2690;
                    _2839 = _2692;
                    _2840 = _2841;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
        }
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.z;
        uint _2698 = (_2696 >> 8u) & 15u;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((4294967295u << _2698) & _2580) == 0u)
        {
            _2802 = _2681;
            _2804 = _2683;
            _2806 = _2685;
            _2808 = _2687;
            _2810 = _2689;
            _2812 = _2691;
        }
        else
        {
            float _2827 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
            float _2828 = _2827 * _2534;
            float _2829 = _2827 * _2535;
            float _2830 = _2827 * _2536;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2698 < ((_2696 >> 12u) & 15u))
            {
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2962 = _2681;
                float _2963 = _2683;
                float _2964 = _2685;
                float _2965 = _2687;
                float _2966 = _2689;
                float _2967 = _2691;
                uint _2968 = _2698;
                uint _2977;
                bool _2978;
                for (;;)
                {
                    _2977 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                    _2978 = _2977 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2978)
                    {
                        frontier_phi_77_pred = _2967;
                        frontier_phi_77_pred_1 = _2966;
                        frontier_phi_77_pred_2 = _2965;
                        frontier_phi_77_pred_3 = _2964;
                        frontier_phi_77_pred_4 = _2963;
                        frontier_phi_77_pred_5 = _2962;
                    }
                    else
                    {
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3184 = _2962;
                        float _3185 = _2963;
                        float _3186 = _2964;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        float _3189 = _2967;
                        uint _3190 = _2977;
                        uint _3191;
                        vec4 _3216;
                        float _3217;
                        vec4 _3232;
                        vec3 _3244;
                        vec4 _3259;
                        vec4 _3275;
                        float _3321;
                        bool _3322;
                        for (;;)
                        {
                            uint _3201 = ((_2968 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3190));
                            _3191 = (_3190 + 4294967295u) & _3190;
                            uint _3203 = _3201 * 40u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3217 = _3216.w;
                            uint _3219 = (_3201 * 40u) + 4u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3201 * 40u) + 8u;
                            _3244 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x));
                            uint _3246 = (_3201 * 40u) + 16u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3262 = (_3201 * 40u) + 20u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3277 = (_3201 * 40u) + 24u;
                            vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3296 = (_3201 * 40u) + 28u;
                            vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3321 = fma(_2536, _3309.z, fma(_2535, _3309.y, _3309.x * _2534)) + _3309.w;
                            _3322 = !((fma(_2536, _3290.z, fma(_2535, _3290.y, _3290.x * _2534)) + _3290.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3322)
                            {
                                float _3349 = _3216.x - _2534;
                                float _3350 = _3216.y - _2535;
                                float _3351 = _3216.z - _2536;
                                float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                                float _3355 = inversesqrt(_3352);
                                float _3356 = _3355 * _3349;
                                float _3357 = _3355 * _3350;
                                float _3358 = _3355 * _3351;
                                float _3362 = 1.0 - (_3352 / (_3217 * _3217));
                                float _4478 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3367 = sqrt(_3352) * _3232.w;
                                float _3369 = 1.39999997615814208984375 / (_3367 + 1.39999997615814208984375);
                                float _3370 = _3369 * _3369;
                                float _3373 = ((1.0 - _3370) * dot(vec3(_3356, _3357, _3358), vec3(_785, _788, _791))) + _3370;
                                float _3376 = _3367 * _3367;
                                float _3380 = (fma(_2536, _3259.z, fma(_2535, _3259.y, _3259.x * _2534)) + _3259.w) / _3321;
                                float _3381 = (fma(_2536, _3275.z, fma(_2535, _3275.y, _3275.x * _2534)) + _3275.w) / _3321;
                                float _3385 = 1.0 - dot(vec2(_3380, _3381), vec2(_3380, _3381));
                                float _4494 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3387 = _3386 * (((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3363) / ((_3376 * 0.699999988079071044921875) + 1.0));
                                float _3399 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                                float _3400 = 1.0 - _845;
                                float _3407 = sqrt(1.0 - ((1.0 - (_3400 * _3400)) * (1.0 - (_3399 * _3399))));
                                float _3408 = _3407 * _3407;
                                float _3409 = _3408 * _3408;
                                float _3410 = _3356 - _2828;
                                float _3411 = _3357 - _2829;
                                float _3412 = _3358 - _2830;
                                float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                                float _3420 = dot(vec3(_785, _788, _791), vec3((-0.0) - _2828, (-0.0) - _2829, (-0.0) - _2830));
                                float _4505 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3424 = dot(vec3(_785, _788, _791), vec3(_3416 * _3410, _3416 * _3411, _3416 * _3412));
                                float _4516 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3427 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3431 = ((_3427 * _3427) * (_3409 + (-1.0))) + 1.0;
                                float _3432 = _3369 * _3408;
                                float _3433 = _3432 * _3432;
                                float _3439 = ((1.0 - _3433) * dot(vec3(_785, _788, _791), vec3(_3356, _3357, _3358))) + _3433;
                                float _4527 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3441 = 1.0 - _3408;
                                float _3451 = (0.5 / (((_3440 * ((_3423 * _3441) + _3408)) + 9.9999999392252902907785028219223e-09) + (((_3440 * _3441) + _3408) * _3423))) * _3440;
                                float _4538 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3461 = (_3386 * _3363) * (((_3409 * 3.1415927410125732421875) * (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) / ((_3431 * _3431) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3387 * _3232.y;
                                frontier_phi_83_pred_1 = _3387 * _3232.x;
                                frontier_phi_83_pred_2 = _3461 * _3244.z;
                                frontier_phi_83_pred_3 = _3461 * _3244.y;
                                frontier_phi_83_pred_4 = _3461 * _3244.x;
                                frontier_phi_83_pred_5 = _3387 * _3232.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3469 = frontier_phi_83_pred;
                            _3468 = frontier_phi_83_pred_1;
                            _3467 = frontier_phi_83_pred_2;
                            _3466 = frontier_phi_83_pred_3;
                            _3465 = frontier_phi_83_pred_4;
                            _3470 = frontier_phi_83_pred_5;
                            _3174 = _3468 + _3187;
                            _3175 = _3469 + _3188;
                            _3176 = _3470 + _3189;
                            _3171 = _3465 + _3184;
                            _3172 = _3466 + _3185;
                            _3173 = _3467 + _3186;
                            if (_3191 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3191;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3176;
                        frontier_phi_77_pred_1 = _3175;
                        frontier_phi_77_pred_2 = _3174;
                        frontier_phi_77_pred_3 = _3173;
                        frontier_phi_77_pred_4 = _3172;
                        frontier_phi_77_pred_5 = _3171;
                    }
                    _2813 = frontier_phi_77_pred;
                    _2811 = frontier_phi_77_pred_1;
                    _2809 = frontier_phi_77_pred_2;
                    _2807 = frontier_phi_77_pred_3;
                    _2805 = frontier_phi_77_pred_4;
                    _2803 = frontier_phi_77_pred_5;
                    uint _2969 = _2968 + 1u;
                    if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2962 = _2803;
                        _2963 = _2805;
                        _2964 = _2807;
                        _2965 = _2809;
                        _2966 = _2811;
                        _2967 = _2813;
                        _2968 = _2969;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2807;
                frontier_phi_58_59_ladder_1 = _2813;
                frontier_phi_58_59_ladder_2 = _2811;
                frontier_phi_58_59_ladder_3 = _2809;
                frontier_phi_58_59_ladder_4 = _2805;
                frontier_phi_58_59_ladder_5 = _2803;
            }
            else
            {
                frontier_phi_58_59_ladder = _2685;
                frontier_phi_58_59_ladder_1 = _2691;
                frontier_phi_58_59_ladder_2 = _2689;
                frontier_phi_58_59_ladder_3 = _2687;
                frontier_phi_58_59_ladder_4 = _2683;
                frontier_phi_58_59_ladder_5 = _2681;
            }
            _2802 = frontier_phi_58_59_ladder_5;
            _2804 = frontier_phi_58_59_ladder_4;
            _2806 = frontier_phi_58_59_ladder;
            _2808 = frontier_phi_58_59_ladder_3;
            _2810 = frontier_phi_58_59_ladder_2;
            _2812 = frontier_phi_58_59_ladder_1;
        }
        float _2817 = isnan(1.0) ? _829 : (isnan(_829) ? 1.0 : min(_829, 1.0));
        _2593 = (_2817 * _2808) + _2045;
        _2595 = (_2817 * _2810) + _2047;
        _2597 = (_2817 * _2812) + _2049;
        _2599 = ((_2802 * 0.039999999105930328369140625) * _2817) + _2378;
        _2601 = ((_2804 * 0.039999999105930328369140625) * _2817) + _2380;
        _2603 = ((_2806 * 0.039999999105930328369140625) * _2817) + _2382;
    }
    else
    {
        _2593 = _2045;
        _2595 = _2047;
        _2597 = _2049;
        _2599 = _2378;
        _2601 = _2380;
        _2603 = _2382;
    }
    float _4554 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4565 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4576 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2620 = ((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2593 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _829))) + ((_2599 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1666)) * cbPerFrame._m0[3u].x);
    float _2621 = ((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2595 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _829))) + ((_2601 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1666)) * cbPerFrame._m0[3u].x);
    float _2622 = ((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2597 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _829))) + ((_2603 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1666)) * cbPerFrame._m0[3u].x);
    uint _2623 = _238 + 6u;
    float _2631 = _766 / cbSceneParam._m0[86u].x;
    float _2632 = _767 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _2706 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _2707 = _2706 / _688;
        float _2718 = _2707 * _739;
        float _2719 = _740 * _2707;
        float _2720 = (-0.0) - _2719;
        float _2722 = _2707 * _741;
        float _2724 = (cbSceneParam._m0[77u].w * _2720) / _2706;
        float _2725 = _2724 + cbSceneParam._m0[79u].w;
        float _2726 = cbSceneParam._m0[79u].w - _2719;
        float _2732 = sqrt(((_2718 * _2718) + (_2719 * _2719)) + (_2722 * _2722));
        float _2735 = (1.0 - (cbSceneParam._m0[77u].w / _2706)) * _2732;
        float _2740 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2742 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2919;
        if (abs((_2720 - _2724) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2919 = ((((_2725 > 0.0) ? exp2(_2740 * _2725) : (2.0 - exp2(_2742 * _2725))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2735;
        }
        else
        {
            float _2863 = 1.0 / cbSceneParam._m0[80u].x;
            float _2864 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : max(_2725, _2726));
            float _2865 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : min(_2725, _2726));
            float _2874 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : min(_2864, 0.0));
            float _2875 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : min(_2865, 0.0));
            _2919 = ((abs(_2732 / _2720) * cbSceneParam._m0[80u].y) * ((((_2874 - _2875) * 2.0) - ((exp2(_2740 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0)))) - exp2(_2740 * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))))) * _2863)) - ((exp2(_2742 * _2874) - exp2(_2742 * _2875)) * _2863))) + (_2735 * cbSceneParam._m0[80u].z);
        }
        vec4 _2921 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2930 = exp2((_2919 * (-1.44269502162933349609375)) * (1.0 - _2921.w));
        float _2931 = log2(_2930);
        float _2947 = log2(_2651);
        _2744 = (exp2(_2947 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].x)) * _2921.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2746 = (exp2(_2947 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].y)) * _2921.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2748 = (exp2(_2947 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].z)) * _2921.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2750 = _2930 * _2651;
    }
    else
    {
        _2744 = _2648;
        _2746 = _2649;
        _2748 = _2650;
        _2750 = _2651;
    }
    bool _2957;
    vec4 _2760;
    vec4 _2782;
    float _2784;
    float _2788;
    float _2789;
    float _2790;
    float _2791;
    bool _2801;
    for (;;)
    {
        _2760 = cbMatDynParam._m0[0u];
        float _2762 = roundEven(_2760.y);
        bool _2763 = _2762 == 3.0;
        float _2764 = log2(_2750);
        float _2771 = exp2(_2764 * cbSceneParam._m0[78u].x) * _2620;
        float _2772 = exp2(_2764 * cbSceneParam._m0[78u].y) * _2621;
        float _2773 = exp2(_2764 * cbSceneParam._m0[78u].z) * _2622;
        float _2780 = _755 + (-0.5);
        _2782 = cbMtdParam._m0[1u];
        _2784 = _2782.y * _2780;
        float _2787 = (_2762 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2788 = _2787 * (_2763 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2744)));
        _2789 = _2787 * (_2763 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2746)));
        _2790 = _2787 * (_2763 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2748)));
        _2791 = _2780 * 0.999000012874603271484375;
        _2801 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2801)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2791) < 0.5)
            {
                _2957 = true;
                break;
            }
        }
        uint _2898 = _804 + uint(_2760.w);
        if ((cbInstanceData._m0[_2898].w < 1.0) && ((cbInstanceData._m0[_2898].w + _2791) < 0.5))
        {
            _2957 = true;
            break;
        }
        if ((_2784 + 1.0) < _2782.x)
        {
            _2957 = true;
            break;
        }
        _2957 = false;
        break;
    }
    float _3162;
    if (_2957)
    {
        discard_state = true;
        _3162 = 0.0;
    }
    else
    {
        _3162 = cbInstanceData._m0[_2623].w;
    }
    SV_Target.x = _2788;
    SV_Target.y = _2789;
    SV_Target.z = _2790;
    SV_Target.w = _3162;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2623].w;
    discard_exit();
}


