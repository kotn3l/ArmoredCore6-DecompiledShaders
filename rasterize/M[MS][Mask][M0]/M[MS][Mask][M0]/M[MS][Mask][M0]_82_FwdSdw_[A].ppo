#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1320;
float _3960;
float _3961;
float _3962;
float _3963;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _397 = _395.x;
    float _409 = dot(vec4(_397, _395.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _426 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _358.x) * 2.0) - ((((_397 - _409) * cbMtdParam._m0[24u].z) + _409) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3972 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _434 = (_427 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _435 = (_427 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _436 = (_427 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _453 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _473 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _475 = _473.x;
    float _485 = dot(vec4(_475, _473.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _499 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _358.y) * 2.0) - ((((_475 - _485) * cbMtdParam._m0[24u].z) + _485) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3983 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _500 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _513 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_500 * ((_453.x * cbMtdParam._m0[13u].x) - _434)) + _434);
    float _516 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_500 * ((_453.y * cbMtdParam._m0[13u].y) - _435)) + _435);
    float _519 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_500 * ((_453.z * cbMtdParam._m0[13u].z) - _436)) + _436);
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _577 = _575.x;
    float _578 = _575.y;
    float _579 = _575.z;
    float _586 = ((_558.x - _577) * _427) + _577;
    float _587 = ((_558.y - _578) * _427) + _578;
    float _588 = ((_558.z - _579) * _427) + _579;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _613 = ((_600.z - _588) * _500) + _588;
    float _616 = ((((_600.x - _586) * _500) + _586) * 2.0) + (-1.0);
    float _618 = ((((_600.y - _587) * _500) + _587) * 2.0) + (-1.0);
    float _619 = dot(vec2(_616, _618), vec2(_616, _618));
    float _3994 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _624 = sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))));
    vec4 _638 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _663 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _665 = _663.x;
    float _666 = 1.0 - _665;
    float _679 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_665 - _666) * cbMtdParam._m0[24u].w) + _666) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4005 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _687 = (_680 * ((_538.x * cbMtdParam._m0[18u].x) - _513)) + _513;
    float _688 = (_680 * ((_538.y * cbMtdParam._m0[18u].y) - _516)) + _516;
    float _689 = (_680 * ((_538.z * cbMtdParam._m0[18u].z) - _519)) + _519;
    float _693 = (cbMtdParam._m0[19u].w * (_638.z - _613)) + _613;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _713 = (_706.x * 2.0) + (-1.0);
    float _714 = (_706.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _4016 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _723 = (_680 * (_706.z - _693)) + _693;
    float _726 = (((_638.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _616;
    float _727 = (((_638.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _618;
    float _739 = (((_713 - _726) + (cbMtdParam._m0[21u].x * _726)) * _680) + _726;
    float _740 = (((_714 - _727) + (cbMtdParam._m0[21u].x * _727)) * _680) + _727;
    float _741 = (_680 * (sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) - _624)) + _624;
    float _745 = cbMtdParam._m0[22u].x + _638.w;
    float _748 = fma(_741, _235 * NORMAL.x, fma(_740, _242 * TANGENT.x, (_228 * _220) * _739));
    float _751 = fma(_741, _235 * NORMAL.y, fma(_740, _242 * TANGENT.y, (_228 * _221) * _739));
    float _754 = fma(_741, _235 * NORMAL.z, fma(_740, _242 * TANGENT.z, (_228 * _222) * _739));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    float _759 = _758 * _748;
    float _760 = _758 * _751;
    float _761 = _758 * _754;
    float _4027 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _762 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4049 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4060 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4071 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _780 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _831 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _821);
    float _832 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _821);
    float _833 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _821);
    float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
    float _838 = _831 * _837;
    float _839 = _832 * _837;
    float _840 = _833 * _837;
    vec4 _845 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _847 = _845.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1001 = sqrt(((_831 * _831) + (_832 * _832)) + (_833 * _833));
        float _1007 = (cbMatDynParam._m0[5u].x * _1001) + cbMatDynParam._m0[5u].y;
        float _4082 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1012 = (cbMatDynParam._m0[5u].z * _1001) + cbMatDynParam._m0[5u].w;
        float _4093 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) - _1008)) + _1008) < ((_847 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _858 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _859 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _877 = fma(_761, cbSceneParam._m0[5u].z, fma(_760, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _759));
    float _880 = fma(_761, cbSceneParam._m0[6u].z, fma(_760, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _759));
    float _883 = fma(_761, cbSceneParam._m0[7u].z, fma(_760, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _759));
    uint _896 = _248 + 9u;
    uint _897 = _896 + uint(cbMatDynParam._m0[0u].w);
    float _903 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_897].x;
    float _904 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_897].y;
    float _905 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_897].z;
    float _4104 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    vec4 _917 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _858, cbSceneParam._m0[86u].y * _859));
    float _921 = ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * TEXCOORD_5.w) * _917.x;
    float _922 = dot(vec3(_759, _760, _761), vec3(_838, _839, _840));
    float _925 = _922 * 2.0;
    float _929 = (_925 * _759) - _838;
    float _930 = (_925 * _760) - _839;
    float _931 = (_925 * _761) - _840;
    float _935 = abs(dot(vec3(_838, _839, _840), vec3(_759, _760, _761)));
    float _4137 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _937 = sqrt(_762);
    float _950 = exp2((_937 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_937 * 3.0));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1319;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1044 = fma(_990, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982));
        float _1048 = fma(_990, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982));
        float _1052 = fma(_990, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982));
        float _1077 = _982 + _759;
        float _1078 = _986 + _760;
        float _1079 = _990 + _761;
        float _1089 = fma(_1079, cbModelParam._m0[26u].z, fma(_1078, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077)) - _1044;
        float _1090 = fma(_1079, cbModelParam._m0[27u].z, fma(_1078, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077)) - _1048;
        float _1091 = fma(_1079, cbModelParam._m0[28u].z, fma(_1078, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077)) - _1052;
        float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
        float _1108 = ((_1095 * _1089) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1044 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1095 * _1090) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1048 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1095 * _1091) / cbModelParam._m0[34u].z) + ((((((_1052 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1147 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1113.x + (-0.5));
        float _1149 = _1147 * (_1113.y + (-0.5));
        float _1150 = _1147 * (_1113.z + (-0.5));
        float _1157 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1120.x + (-0.5));
        float _1159 = _1157 * (_1120.y + (-0.5));
        float _1160 = _1157 * (_1120.z + (-0.5));
        float _1167 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1127.x + (-0.5));
        float _1169 = _1167 * (_1127.y + (-0.5));
        float _1170 = _1167 * (_1127.z + (-0.5));
        float _1177 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1134.x + (-0.5));
        float _1179 = _1177 * (_1134.y + (-0.5));
        float _1180 = _1177 * (_1134.z + (-0.5));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = _1148 * 0.5;
        float _1185 = _1158 * 0.5;
        float _1186 = _1168 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1201 = (dot(vec3(_759, _760, _761), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1211 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _4185 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1213 + 1.0))) + _1218) * _1181;
        float _1228 = _1149 * 0.5;
        float _1229 = _1159 * 0.5;
        float _1230 = _1169 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_759, _760, _761), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4218 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1255 + 1.0))) + _1260) * _1182;
        float _1270 = _1150 * 0.5;
        float _1271 = _1160 * 0.5;
        float _1272 = _1170 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_759, _760, _761), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4251 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1297 + 1.0))) + _1302) * _1183;
        _1319 = _1150;
        _1321 = _1149;
        _1322 = _1148;
        _1323 = _1160;
        _1324 = _1159;
        _1325 = _1158;
        _1326 = _1170;
        _1327 = _1169;
        _1328 = _1168;
        _1329 = _1183;
        _1330 = _1182;
        _1331 = _1181;
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
    }
    else
    {
        _1319 = _1320;
        _1321 = _1320;
        _1322 = _1320;
        _1323 = _1320;
        _1324 = _1320;
        _1325 = _1320;
        _1326 = _1320;
        _1327 = _1320;
        _1328 = _1320;
        _1329 = _1320;
        _1330 = _1320;
        _1331 = _1320;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1361 = fma(_990, cbModelParam._m0[30u].z, fma(_986, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982));
        float _1365 = fma(_990, cbModelParam._m0[31u].z, fma(_986, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982));
        float _1369 = fma(_990, cbModelParam._m0[32u].z, fma(_986, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982));
        float _1392 = _982 + _759;
        float _1393 = _986 + _760;
        float _1394 = _990 + _761;
        float _1404 = fma(_1394, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1392)) - _1361;
        float _1405 = fma(_1394, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1392)) - _1365;
        float _1406 = fma(_1394, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1392)) - _1369;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1361 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1365 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[35u].z) + ((((((_1369 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1460 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1427.x + (-0.5));
        float _1462 = _1460 * (_1427.y + (-0.5));
        float _1463 = _1460 * (_1427.z + (-0.5));
        float _1470 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1434.x + (-0.5));
        float _1472 = _1470 * (_1434.y + (-0.5));
        float _1473 = _1470 * (_1434.z + (-0.5));
        float _1480 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1441.x + (-0.5));
        float _1482 = _1480 * (_1441.y + (-0.5));
        float _1483 = _1480 * (_1441.z + (-0.5));
        float _1490 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1448.x + (-0.5));
        float _1492 = _1490 * (_1448.y + (-0.5));
        float _1493 = _1490 * (_1448.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_759, _760, _761), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4314 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1524 + 1.0))) + _1529) * _1494;
        float _1539 = _1462 * 0.5;
        float _1540 = _1472 * 0.5;
        float _1541 = _1482 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_759, _760, _761), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4347 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1566 + 1.0))) + _1571) * _1495;
        float _1581 = _1463 * 0.5;
        float _1582 = _1473 * 0.5;
        float _1583 = _1483 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_759, _760, _761), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4380 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1608 + 1.0))) + _1613) * _1496;
        _1630 = _1463;
        _1631 = _1462;
        _1632 = _1461;
        _1633 = _1473;
        _1634 = _1472;
        _1635 = _1471;
        _1636 = _1483;
        _1637 = _1482;
        _1638 = _1481;
        _1639 = _1496;
        _1640 = _1495;
        _1641 = _1494;
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1320;
        _1631 = _1320;
        _1632 = _1320;
        _1633 = _1320;
        _1634 = _1320;
        _1635 = _1320;
        _1636 = _1320;
        _1637 = _1320;
        _1638 = _1320;
        _1639 = _1320;
        _1640 = _1320;
        _1641 = _1320;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1332)) + _1332;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1333)) + _1333;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1334)) + _1334;
    float _1677 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1654));
    float _1698 = _929 * 0.5;
    float _1699 = _930 * 0.5;
    float _1700 = _931 * 0.5;
    float _1701 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1704 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1707 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1741;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1714 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1319, _1323, _1326, _1329));
        float _1718 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1722 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1729 = dot(vec4(cbModelParam._m0[39u]), vec4(_1698, _1699, _1700, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1752;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1743 = dot(vec4(cbModelParam._m0[40u]), vec4(_1698, _1699, _1700, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1756 = (_1752 * cbModelParam._m0[1u].x) + (_1741 * (1.0 - cbModelParam._m0[1u].x));
    float _1766 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _762);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1766 : min(cbModelParam._m0[25u].z, _1766));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1814 = fma(_990, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982)) + cbModelParam._m0[13u].w;
        float _1818 = fma(_990, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982)) + cbModelParam._m0[14u].w;
        float _1822 = fma(_990, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982)) + cbModelParam._m0[15u].w;
        float _1825 = fma(_931, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _929));
        float _1828 = fma(_931, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _929));
        float _1831 = fma(_931, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _929));
        float _1859;
        if (_1825 > 0.0)
        {
            _1859 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1859 = frontier_phi_17_15_ladder;
        }
        float _2028;
        if (_1828 > 0.0)
        {
            _2028 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2028 = frontier_phi_26_22_ladder;
        }
        float _2323;
        if (_1831 > 0.0)
        {
            _2323 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2323 = frontier_phi_38_33_ladder;
        }
        float _2325 = isnan(_2028) ? _1859 : (isnan(_1859) ? _2028 : min(_1859, _2028));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1825) + _1814;
        float _2331 = (_2326 * _1828) + _1818;
        float _2332 = (_2326 * _1831) + _1822;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2333;
        float _2337 = _2333 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 > _2337) || ((_2331 < _2335) || ((_2330 < _2335) || (_2330 > _2337))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2332, cbModelParam._m0[9u].z, fma(_2331, cbModelParam._m0[9u].y, _2330 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2332, cbModelParam._m0[10u].z, fma(_2331, cbModelParam._m0[10u].y, _2330 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2332, cbModelParam._m0[11u].z, fma(_2331, cbModelParam._m0[11u].y, _2330 * cbModelParam._m0[11u].x))), _1767);
            frontier_phi_16_38_ladder = _2477.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2477.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2477.x * cbModelParam._m0[1u].y;
        }
        _1847 = frontier_phi_16_38_ladder_2;
        _1849 = frontier_phi_16_38_ladder_1;
        _1851 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_929, _930, _931), _1767);
        _1847 = _1835.x * cbModelParam._m0[1u].y;
        _1849 = _1835.y * cbModelParam._m0[1u].y;
        _1851 = _1835.z * cbModelParam._m0[1u].y;
    }
    float _1855 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _762);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1855 : min(cbModelParam._m0[25u].w, _1855));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1909 = fma(_990, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982)) + cbModelParam._m0[21u].w;
        float _1913 = fma(_990, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982)) + cbModelParam._m0[22u].w;
        float _1917 = fma(_990, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982)) + cbModelParam._m0[23u].w;
        float _1920 = fma(_931, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _929));
        float _1923 = fma(_931, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _929));
        float _1926 = fma(_931, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _929));
        float _2033;
        if (_1920 > 0.0)
        {
            _2033 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2033 = frontier_phi_28_24_ladder;
        }
        float _2350;
        if (_1923 > 0.0)
        {
            _2350 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2350 = frontier_phi_40_35_ladder;
        }
        float _2677;
        if (_1926 > 0.0)
        {
            _2677 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2677 = frontier_phi_50_47_ladder;
        }
        float _2679 = isnan(_2350) ? _2033 : (isnan(_2033) ? _2350 : min(_2033, _2350));
        float _2680 = isnan(_2677) ? _2679 : (isnan(_2679) ? _2677 : min(_2679, _2677));
        float _2684 = (_2680 * _1920) + _1909;
        float _2685 = (_2680 * _1923) + _1913;
        float _2686 = (_2680 * _1926) + _1917;
        float _2687 = _2680 * 9.9999997473787516355514526367188e-05;
        float _2688 = (-1.0) - _2687;
        float _2690 = _2687 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2686 > _2690) || ((_2686 < _2688) || ((_2685 > _2690) || ((_2685 < _2688) || ((_2684 < _2688) || (_2684 > _2690))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2686, cbModelParam._m0[17u].z, fma(_2685, cbModelParam._m0[17u].y, _2684 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2686, cbModelParam._m0[18u].z, fma(_2685, cbModelParam._m0[18u].y, _2684 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2686, cbModelParam._m0[19u].z, fma(_2685, cbModelParam._m0[19u].y, _2684 * cbModelParam._m0[19u].x))), _1856);
            frontier_phi_25_50_ladder = _2804.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2804.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2804.x * cbModelParam._m0[1u].z;
        }
        _1945 = frontier_phi_25_50_ladder_2;
        _1947 = frontier_phi_25_50_ladder_1;
        _1949 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_929, _930, _931), _1856);
        _1945 = _1929.x * cbModelParam._m0[1u].z;
        _1947 = _1929.y * cbModelParam._m0[1u].z;
        _1949 = _1929.z * cbModelParam._m0[1u].z;
    }
    float _1961 = ((((1.0 - _950) * ((_937 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_950 * _937)) * _921;
    float _1962 = _1961 * ((cbModelParam._m0[1u].w * (_1945 - _1847)) + _1847);
    float _1963 = _1961 * ((cbModelParam._m0[1u].w * (_1947 - _1849)) + _1849);
    float _1964 = _1961 * ((cbModelParam._m0[1u].w * (_1949 - _1851)) + _1851);
    float _1967 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, _1962 * cbSceneParam._m0[91u].x));
    float _2007 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2011 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2020 = _2007 / _2019;
    float _2021 = _2011 / _2019;
    float _2022 = _2015 / _2019;
    float _2169;
    float _2170;
    float _2171;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2049 = ((uint(_2022 > cbSceneParam._m0[59u].y) + uint(_2022 > cbSceneParam._m0[59u].x)) + uint(_2022 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2050 = _2049 + 43u;
        uint _2058 = _2049 + 44u;
        uint _2066 = _2049 + 45u;
        uint _2074 = _2049 + 46u;
        float _2085 = fma(_2019, cbSceneParam._m0[_2050].w, fma(_2015, cbSceneParam._m0[_2050].z, fma(_2011, cbSceneParam._m0[_2050].y, _2007 * cbSceneParam._m0[_2050].x)));
        float _2089 = fma(_2019, cbSceneParam._m0[_2058].w, fma(_2015, cbSceneParam._m0[_2058].z, fma(_2011, cbSceneParam._m0[_2058].y, _2007 * cbSceneParam._m0[_2058].x)));
        float _2097 = fma(_2019, cbSceneParam._m0[_2074].w, fma(_2015, cbSceneParam._m0[_2074].z, fma(_2011, cbSceneParam._m0[_2074].y, _2007 * cbSceneParam._m0[_2074].x)));
        float _2102 = cbSceneParam._m0[33u].z * _2097;
        float _2104 = cbSceneParam._m0[33u].w * _2097;
        float _2107 = fma(_2019, cbSceneParam._m0[_2066].w, fma(_2015, cbSceneParam._m0[_2066].z, fma(_2011, cbSceneParam._m0[_2066].y, _2007 * cbSceneParam._m0[_2066].x))) / _2097;
        float _2155 = (cbSceneParam._m0[33u].x - sqrt(((_2021 * _2021) + (_2020 * _2020)) + (_2022 * _2022))) * cbSceneParam._m0[33u].y;
        float _4506 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2162 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 + _2085) / _2097, (_2104 + _2089) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 + _2085) / _2097, (_2089 - _2102) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 - _2102) / _2097, (_2089 - _2104) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 - _2104) / _2097, (_2102 + _2089) / _2097), _2107), 0.0)).x), vec4(0.25)));
        _2169 = 1.0 - (_2162 * cbSceneParam._m0[34u].x);
        _2170 = 1.0 - (_2162 * cbSceneParam._m0[34u].y);
        _2171 = 1.0 - (_2162 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2169 = 1.0;
        _2170 = 1.0;
        _2171 = 1.0;
    }
    float _2235;
    float _2237;
    float _2239;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2223 = fma(_2019, cbSceneParam._m0[63u].w, fma(_2015, cbSceneParam._m0[63u].z, fma(_2011, cbSceneParam._m0[63u].y, _2007 * cbSceneParam._m0[63u].x)));
        float _2224 = fma(_2019, cbSceneParam._m0[60u].w, fma(_2015, cbSceneParam._m0[60u].z, fma(_2011, cbSceneParam._m0[60u].y, _2007 * cbSceneParam._m0[60u].x))) / _2223;
        float _2225 = fma(_2019, cbSceneParam._m0[61u].w, fma(_2015, cbSceneParam._m0[61u].z, fma(_2011, cbSceneParam._m0[61u].y, _2007 * cbSceneParam._m0[61u].x))) / _2223;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2224 >= cbSceneParam._m0[64u].x) && (_2225 >= cbSceneParam._m0[64u].y)) && (_2224 <= cbSceneParam._m0[64u].z)) && (_2225 <= cbSceneParam._m0[64u].w))
        {
            float _2363 = fma(_2019, cbSceneParam._m0[62u].w, fma(_2015, cbSceneParam._m0[62u].z, fma(_2011, cbSceneParam._m0[62u].y, _2007 * cbSceneParam._m0[62u].x))) / _2223;
            float _2367 = isnan(cbSceneParam._m0[41u].w) ? _2363 : (isnan(_2363) ? cbSceneParam._m0[41u].w : max(_2363, cbSceneParam._m0[41u].w));
            float _2410 = (cbSceneParam._m0[33u].x - sqrt(((_2021 * _2021) + (_2020 * _2020)) + (_2022 * _2022))) * cbSceneParam._m0[33u].y;
            float _4522 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
            float _2417 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2224, cbSceneParam._m0[33u].w + _2225), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2224, _2225 - cbSceneParam._m0[33u].z), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2224 - cbSceneParam._m0[33u].z, _2225 - cbSceneParam._m0[33u].w), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2224 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2225), _2367), 0.0)).x), vec4(0.25)));
            float _2421 = 1.0 - (_2417 * cbSceneParam._m0[34u].x);
            float _2422 = 1.0 - (_2417 * cbSceneParam._m0[34u].y);
            float _2423 = 1.0 - (_2417 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2423) ? _2171 : (isnan(_2171) ? _2423 : min(_2171, _2423));
            frontier_phi_37_36_ladder_1 = isnan(_2422) ? _2170 : (isnan(_2170) ? _2422 : min(_2170, _2422));
            frontier_phi_37_36_ladder_2 = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
        }
        else
        {
            frontier_phi_37_36_ladder = _2171;
            frontier_phi_37_36_ladder_1 = _2170;
            frontier_phi_37_36_ladder_2 = _2169;
        }
        _2235 = frontier_phi_37_36_ladder_2;
        _2237 = frontier_phi_37_36_ladder_1;
        _2239 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2235 = _2169;
        _2237 = _2170;
        _2239 = _2171;
    }
    uvec4 _2244 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2246 = _2244.x * 14u;
    uint _2247 = _2246 + 13u;
    float _2254 = _921 + (-1.0);
    float _2259 = (cbLight._m0[_2247].x * _2254) + 1.0;
    float _2260 = (cbLight._m0[_2247].y * _2254) + 1.0;
    float _2261 = (cbLight._m0[_2247].z * _2254) + 1.0;
    float _2262 = (cbLight._m0[_2247].w * _2254) + 1.0;
    uint _2263 = _2246 + 5u;
    float _2269 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
    uint _2273 = _2246 + 4u;
    float _2282 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
    uint _2286 = _2246 | 1u;
    float _2297 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_759, _760, _761));
    float _2300 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_759, _760, _761));
    float _4558 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _4569 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2305 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * 0.3183098733425140380859375;
    float _2307 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * 0.3183098733425140380859375;
    float _2314 = ((cbLight._m0[_2263].x * _2269) * _2307) + (((cbLight._m0[_2273].x * _2235) * _2282) * _2305);
    float _2315 = ((_2269 * cbLight._m0[_2263].y) * _2307) + (((cbLight._m0[_2273].y * _2237) * _2282) * _2305);
    float _2316 = ((_2269 * cbLight._m0[_2263].z) * _2307) + (((cbLight._m0[_2273].z * _2239) * _2282) * _2305);
    uvec4 _2320 = floatBitsToUint(cbLight._m0[_2246 + 12u]);
    bool _2322 = _2320.x == 0u;
    float _2424;
    float _2426;
    float _2428;
    if (_2322)
    {
        _2424 = _2314;
        _2426 = _2315;
        _2428 = _2316;
    }
    else
    {
        uint _2432 = _2246 + 6u;
        float _2448 = (dot(vec3(cbLight._m0[_2246 + 2u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2449 = _2448 * _2448;
        float _4580 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2450 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2451 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2424 = (((cbLight._m0[_2432].x * 0.3183098733425140380859375) * _2450) * _2451) + _2314;
        _2426 = (((cbLight._m0[_2432].y * 0.3183098733425140380859375) * _2450) * _2451) + _2315;
        _2428 = (((cbLight._m0[_2432].z * 0.3183098733425140380859375) * _2450) * _2451) + _2316;
    }
    bool _2431 = _2320.y == 0u;
    float _2486;
    float _2488;
    float _2490;
    if (_2431)
    {
        _2486 = _2424;
        _2488 = _2426;
        _2490 = _2428;
    }
    else
    {
        uint _2648 = _2246 + 7u;
        float _2664 = (dot(vec3(cbLight._m0[_2246 + 3u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2665 = _2664 * _2664;
        float _4596 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2666 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2667 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2486 = (((cbLight._m0[_2648].x * 0.3183098733425140380859375) * _2666) * _2667) + _2424;
        _2488 = (((cbLight._m0[_2648].y * 0.3183098733425140380859375) * _2666) * _2667) + _2426;
        _2490 = (((cbLight._m0[_2648].z * 0.3183098733425140380859375) * _2666) * _2667) + _2428;
    }
    uint _2493 = _2246 + 8u;
    float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _762) * 0.949999988079071044921875);
    float _2507 = _2506 * _2506;
    float _2508 = cbLight._m0[_2246].x + _838;
    float _2509 = cbLight._m0[_2246].y + _839;
    float _2510 = cbLight._m0[_2246].z + _840;
    float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
    float _2515 = _2514 * _2508;
    float _2516 = _2514 * _2509;
    float _2517 = _2514 * _2510;
    float _2518 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2246].xyz));
    float _4612 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _4623 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _2522 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2523 = dot(vec3(_759, _760, _761), vec3(_2515, _2516, _2517));
    float _4634 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2527 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2515, _2516, _2517));
    float _4645 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2531 = _2507 * _2507;
    float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
    float _2546 = (exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2547 = 1.0 - _2507;
    float _2558 = (0.5 / (((_2522 * ((_2521 * _2547) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2547) + _2507) * _2521))) * _2521;
    float _4656 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2560 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
    uint _2574 = _2246 + 9u;
    float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _762) * 0.949999988079071044921875);
    float _2586 = _2585 * _2585;
    float _2587 = cbLight._m0[_2286].x + _838;
    float _2588 = cbLight._m0[_2286].y + _839;
    float _2589 = cbLight._m0[_2286].z + _840;
    float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
    float _2594 = _2593 * _2587;
    float _2595 = _2593 * _2588;
    float _2596 = _2593 * _2589;
    float _2597 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2286].xyz));
    float _4667 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2601 = dot(vec3(_759, _760, _761), vec3(_2594, _2595, _2596));
    float _4678 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2605 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2594, _2595, _2596));
    float _4689 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2609 = _2586 * _2586;
    float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
    float _2622 = (exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2623 = 1.0 - _2586;
    float _2633 = (0.5 / (((_2522 * ((_2600 * _2623) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2623) + _2586) * _2600))) * _2600;
    float _4700 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2635 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
    float _2645 = (((_2622 * cbLight._m0[_2574].x) * _2635) * _2269) + ((((cbLight._m0[_2493].x * _2235) * _2546) * _2560) * _2282);
    float _2646 = (((_2622 * cbLight._m0[_2574].y) * _2635) * _2269) + ((((cbLight._m0[_2493].y * _2237) * _2546) * _2560) * _2282);
    float _2647 = (((_2622 * cbLight._m0[_2574].z) * _2635) * _2269) + ((((cbLight._m0[_2493].z * _2239) * _2546) * _2560) * _2282);
    float _2703;
    float _2705;
    float _2707;
    if (_2322)
    {
        _2703 = _2645;
        _2705 = _2646;
        _2707 = _2647;
    }
    else
    {
        uint _2709 = _2246 + 2u;
        uint _2713 = _2246 + 10u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _762) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _838;
        float _2730 = cbLight._m0[_2709].y + _839;
        float _2731 = cbLight._m0[_2709].z + _840;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2709].xyz));
        float _4711 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2743 = dot(vec3(_759, _760, _761), vec3(_2736, _2737, _2738));
        float _4722 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4733 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2764 = (exp2(log2(1.0 - (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2765 = 1.0 - _2728;
        float _2775 = (0.5 / (((_2522 * ((_2742 * _2765) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2765) + _2728) * _2742))) * _2742;
        float _4744 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2777 = (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2778 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2703 = (((_2764 * cbLight._m0[_2713].x) * _2777) * _2778) + _2645;
        _2705 = (((_2764 * cbLight._m0[_2713].y) * _2777) * _2778) + _2646;
        _2707 = (((_2764 * cbLight._m0[_2713].z) * _2777) * _2778) + _2647;
    }
    float _2809;
    float _2811;
    float _2813;
    if (_2431)
    {
        _2809 = _2703;
        _2811 = _2705;
        _2813 = _2707;
    }
    else
    {
        uint _2820 = _2246 + 3u;
        uint _2824 = _2246 + 11u;
        float _2838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2820].w)) * _762) * 0.949999988079071044921875);
        float _2839 = _2838 * _2838;
        float _2840 = cbLight._m0[_2820].x + _838;
        float _2841 = cbLight._m0[_2820].y + _839;
        float _2842 = cbLight._m0[_2820].z + _840;
        float _2846 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
        float _2847 = _2846 * _2840;
        float _2848 = _2846 * _2841;
        float _2849 = _2846 * _2842;
        float _2850 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2820].xyz));
        float _4760 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2853 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2854 = dot(vec3(_759, _760, _761), vec3(_2847, _2848, _2849));
        float _4771 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2857 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2858 = dot(vec3(cbLight._m0[_2820].xyz), vec3(_2847, _2848, _2849));
        float _4782 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2862 = _2839 * _2839;
        float _2866 = ((_2857 * _2857) * (_2862 + (-1.0))) + 1.0;
        float _2875 = (exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2876 = 1.0 - _2839;
        float _2886 = (0.5 / (((_2522 * ((_2853 * _2876) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2876) + _2839) * _2853))) * _2853;
        float _4793 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2888 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2862 / ((_2866 * _2866) * 3.141590118408203125));
        float _2889 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2809 = (((_2875 * cbLight._m0[_2824].x) * _2888) * _2889) + _2703;
        _2811 = (((_2875 * cbLight._m0[_2824].y) * _2888) * _2889) + _2705;
        _2813 = (((_2875 * cbLight._m0[_2824].z) * _2888) * _2889) + _2707;
    }
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_2244.y == 0u)
    {
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.x;
        uint _2922 = uint((float(_2910.y) * floor(float(uint(cbSceneParam._m0[85u].y * _859) / _2911))) + floor(float(uint(cbSceneParam._m0[85u].x * _858) / _2911)));
        float _2932 = (log2(_2022 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2933 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        uint _2936 = uint(isnan(14.0) ? _2933 : (isnan(_2933) ? 14.0 : min(_2933, 14.0)));
        uvec4 _2941 = texelFetch(g_lightClusterGridBuffer, int(((_2936 << 2u) + (_2922 << 6u)) >> 2u));
        uint _2942 = _2941.x;
        uint _2943 = _2910.z;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((((1u << ((_2943 >> 4u) & 15u)) + 4294967295u) & _2942) == 0u) || ((_2943 & 240u) == 0u))
        {
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
        }
        else
        {
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            uint _3181 = 0u;
            uint _3190;
            bool _3191;
            for (;;)
            {
                _3190 = texelFetch(g_lightClassification, int((((_2936 << 5u) + (_2922 << 9u)) + (_3181 << 2u)) >> 2u)).x;
                _3191 = _3190 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3191)
                {
                    frontier_phi_71_pred = _3180;
                    frontier_phi_71_pred_1 = _3179;
                    frontier_phi_71_pred_2 = _3178;
                    frontier_phi_71_pred_3 = _3177;
                    frontier_phi_71_pred_4 = _3176;
                    frontier_phi_71_pred_5 = _3175;
                }
                else
                {
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    uint _3326;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3178;
                    _3324 = _3179;
                    _3325 = _3180;
                    _3326 = _3190;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    for (;;)
                    {
                        uint _3330 = uint(findLSB(_3326)) + (_3181 << 5u);
                        uint _3327 = (_3326 + 4294967295u) & _3326;
                        uint _3332 = _3330 * 48u;
                        vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3352 = (_3330 * 48u) + 4u;
                        vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 3u)).x));
                        uint _3371 = (_3330 * 48u) + 8u;
                        vec3 _3382 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x));
                        float _3386 = _3346.x - _2020;
                        float _3387 = _3346.y - _2021;
                        float _3388 = _3346.z - _2022;
                        float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                        float _3392 = inversesqrt(_3389);
                        float _3393 = _3392 * _3386;
                        float _3394 = _3392 * _3387;
                        float _3395 = _3392 * _3388;
                        float _3396 = dot(vec3(_877, _880, _883), vec3(_3393, _3394, _3395));
                        float _3401 = 1.0 - (_3389 * _3346.w);
                        float _4819 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3402 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3403 = sqrt(_3389) * _3365.w;
                        float _3406 = 1.39999997615814208984375 / (_3403 + 1.39999997615814208984375);
                        float _3407 = _3406 * _3406;
                        float _3410 = ((1.0 - _3407) * _3396) + _3407;
                        float _3413 = _3403 * _3403;
                        float _3417 = ((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3402) / ((_3413 * 0.699999988079071044921875) + 1.0);
                        float _3421 = (-0.0) - _2020;
                        float _3422 = (-0.0) - _2021;
                        float _3423 = (-0.0) - _2022;
                        float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                        float _3428 = _3427 * _3421;
                        float _3429 = _3427 * _3422;
                        float _3430 = _3427 * _3423;
                        float _3437 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                        float _3438 = 1.0 - _937;
                        float _3445 = sqrt(1.0 - ((1.0 - (_3438 * _3438)) * (1.0 - (_3437 * _3437))));
                        float _3446 = _3445 * _3445;
                        float _3447 = _3446 * _3446;
                        float _3448 = _3428 + _3393;
                        float _3449 = _3429 + _3394;
                        float _3450 = _3430 + _3395;
                        float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                        float _3458 = dot(vec3(_877, _880, _883), vec3(_3428, _3429, _3430));
                        float _4835 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3461 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3462 = dot(vec3(_877, _880, _883), vec3(_3454 * _3448, _3454 * _3449, _3454 * _3450));
                        float _4846 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3465 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3469 = ((_3465 * _3465) * (_3447 + (-1.0))) + 1.0;
                        float _3470 = _3406 * _3446;
                        float _3471 = _3470 * _3470;
                        float _3474 = ((1.0 - _3471) * _3396) + _3471;
                        float _4857 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3475 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                        float _3476 = 1.0 - _3446;
                        float _3486 = (0.5 / (((_3475 * ((_3461 * _3476) + _3446)) + 9.9999999392252902907785028219223e-09) + (((_3475 * _3476) + _3446) * _3461))) * _3475;
                        float _4868 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3497 = (((_3447 * 3.1415927410125732421875) * (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) / ((_3469 * _3469) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125))) * _3402;
                        _3250 = (_3417 * _3365.x) + _3323;
                        _3251 = (_3417 * _3365.y) + _3324;
                        _3252 = (_3417 * _3365.z) + _3325;
                        _3247 = (_3497 * _3382.x) + _3320;
                        _3248 = (_3497 * _3382.y) + _3321;
                        _3249 = (_3497 * _3382.z) + _3322;
                        if (_3327 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3250;
                            _3324 = _3251;
                            _3325 = _3252;
                            _3326 = _3327;
                        }
                    }
                    frontier_phi_71_pred = _3252;
                    frontier_phi_71_pred_1 = _3251;
                    frontier_phi_71_pred_2 = _3250;
                    frontier_phi_71_pred_3 = _3249;
                    frontier_phi_71_pred_4 = _3248;
                    frontier_phi_71_pred_5 = _3247;
                }
                _3033 = frontier_phi_71_pred;
                _3031 = frontier_phi_71_pred_1;
                _3029 = frontier_phi_71_pred_2;
                _3027 = frontier_phi_71_pred_3;
                _3025 = frontier_phi_71_pred_4;
                _3023 = frontier_phi_71_pred_5;
                uint _3182 = _3181 + 1u;
                if (_3182 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3175 = _3023;
                    _3176 = _3025;
                    _3177 = _3027;
                    _3178 = _3029;
                    _3179 = _3031;
                    _3180 = _3033;
                    _3181 = _3182;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
        }
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.z;
        uint _3039 = (_3037 >> 8u) & 15u;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        if (((4294967295u << _3039) & _2942) == 0u)
        {
            _3143 = _3022;
            _3145 = _3024;
            _3147 = _3026;
            _3149 = _3028;
            _3151 = _3030;
            _3153 = _3032;
        }
        else
        {
            float _3168 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
            float _3169 = _3168 * _2020;
            float _3170 = _3168 * _2021;
            float _3171 = _3168 * _2022;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3039 < ((_3037 >> 12u) & 15u))
            {
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3303 = _3022;
                float _3304 = _3024;
                float _3305 = _3026;
                float _3306 = _3028;
                float _3307 = _3030;
                float _3308 = _3032;
                uint _3309 = _3039;
                uint _3318;
                bool _3319;
                for (;;)
                {
                    _3318 = texelFetch(g_lightClassification, int((((_2936 << 5u) + (_2922 << 9u)) + (_3309 << 2u)) >> 2u)).x;
                    _3319 = _3318 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3319)
                    {
                        frontier_phi_82_pred = _3308;
                        frontier_phi_82_pred_1 = _3307;
                        frontier_phi_82_pred_2 = _3306;
                        frontier_phi_82_pred_3 = _3305;
                        frontier_phi_82_pred_4 = _3304;
                        frontier_phi_82_pred_5 = _3303;
                    }
                    else
                    {
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3524 = _3303;
                        float _3525 = _3304;
                        float _3526 = _3305;
                        float _3527 = _3306;
                        float _3528 = _3307;
                        float _3529 = _3308;
                        uint _3530 = _3318;
                        uint _3531;
                        vec4 _3556;
                        float _3557;
                        vec4 _3572;
                        vec3 _3584;
                        vec4 _3599;
                        vec4 _3614;
                        float _3660;
                        bool _3661;
                        for (;;)
                        {
                            uint _3541 = ((_3309 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3530));
                            _3531 = (_3530 + 4294967295u) & _3530;
                            uint _3543 = _3541 * 40u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            _3557 = _3556.w;
                            uint _3559 = (_3541 * 40u) + 4u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3541 * 40u) + 8u;
                            _3584 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x));
                            uint _3586 = (_3541 * 40u) + 16u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3601 = (_3541 * 40u) + 20u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3616 = (_3541 * 40u) + 24u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3635 = (_3541 * 40u) + 28u;
                            vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            _3660 = fma(_2022, _3648.z, fma(_2021, _3648.y, _3648.x * _2020)) + _3648.w;
                            _3661 = !((fma(_2022, _3629.z, fma(_2021, _3629.y, _3629.x * _2020)) + _3629.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3661)
                            {
                                float _3688 = _3556.x - _2020;
                                float _3689 = _3556.y - _2021;
                                float _3690 = _3556.z - _2022;
                                float _3691 = dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690));
                                float _3694 = inversesqrt(_3691);
                                float _3695 = _3694 * _3688;
                                float _3696 = _3694 * _3689;
                                float _3697 = _3694 * _3690;
                                float _3701 = 1.0 - (_3691 / (_3557 * _3557));
                                float _4879 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3706 = sqrt(_3691) * _3572.w;
                                float _3708 = 1.39999997615814208984375 / (_3706 + 1.39999997615814208984375);
                                float _3709 = _3708 * _3708;
                                float _3712 = ((1.0 - _3709) * dot(vec3(_3695, _3696, _3697), vec3(_877, _880, _883))) + _3709;
                                float _3715 = _3706 * _3706;
                                float _3719 = (fma(_2022, _3599.z, fma(_2021, _3599.y, _3599.x * _2020)) + _3599.w) / _3660;
                                float _3720 = (fma(_2022, _3614.z, fma(_2021, _3614.y, _3614.x * _2020)) + _3614.w) / _3660;
                                float _3724 = 1.0 - dot(vec2(_3719, _3720), vec2(_3719, _3720));
                                float _4895 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3726 = _3725 * (((isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0))) * _3702) / ((_3715 * 0.699999988079071044921875) + 1.0));
                                float _3738 = exp2(log2(1.0 / ((_3715 * 3.5) + 5.0)) * 0.25);
                                float _3739 = 1.0 - _937;
                                float _3746 = sqrt(1.0 - ((1.0 - (_3739 * _3739)) * (1.0 - (_3738 * _3738))));
                                float _3747 = _3746 * _3746;
                                float _3748 = _3747 * _3747;
                                float _3749 = _3695 - _3169;
                                float _3750 = _3696 - _3170;
                                float _3751 = _3697 - _3171;
                                float _3755 = inversesqrt(dot(vec3(_3749, _3750, _3751), vec3(_3749, _3750, _3751)));
                                float _3759 = dot(vec3(_877, _880, _883), vec3((-0.0) - _3169, (-0.0) - _3170, (-0.0) - _3171));
                                float _4906 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3762 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3763 = dot(vec3(_877, _880, _883), vec3(_3755 * _3749, _3755 * _3750, _3755 * _3751));
                                float _4917 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3770 = ((_3766 * _3766) * (_3748 + (-1.0))) + 1.0;
                                float _3771 = _3708 * _3747;
                                float _3772 = _3771 * _3771;
                                float _3778 = ((1.0 - _3772) * dot(vec3(_877, _880, _883), vec3(_3695, _3696, _3697))) + _3772;
                                float _4928 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3780 = 1.0 - _3747;
                                float _3790 = (0.5 / (((_3779 * ((_3762 * _3780) + _3747)) + 9.9999999392252902907785028219223e-09) + (((_3779 * _3780) + _3747) * _3762))) * _3779;
                                float _4939 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3800 = (_3725 * _3702) * (((_3748 * 3.1415927410125732421875) * (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0)))) / ((_3770 * _3770) * ((_3715 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3726 * _3572.z;
                                frontier_phi_88_pred_1 = _3726 * _3572.y;
                                frontier_phi_88_pred_2 = _3726 * _3572.x;
                                frontier_phi_88_pred_3 = _3800 * _3584.z;
                                frontier_phi_88_pred_4 = _3800 * _3584.y;
                                frontier_phi_88_pred_5 = _3800 * _3584.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3809 = frontier_phi_88_pred;
                            _3808 = frontier_phi_88_pred_1;
                            _3807 = frontier_phi_88_pred_2;
                            _3806 = frontier_phi_88_pred_3;
                            _3805 = frontier_phi_88_pred_4;
                            _3804 = frontier_phi_88_pred_5;
                            _3514 = _3807 + _3527;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3511 = _3804 + _3524;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            if (_3531 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3531;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3516;
                        frontier_phi_82_pred_1 = _3515;
                        frontier_phi_82_pred_2 = _3514;
                        frontier_phi_82_pred_3 = _3513;
                        frontier_phi_82_pred_4 = _3512;
                        frontier_phi_82_pred_5 = _3511;
                    }
                    _3154 = frontier_phi_82_pred;
                    _3152 = frontier_phi_82_pred_1;
                    _3150 = frontier_phi_82_pred_2;
                    _3148 = frontier_phi_82_pred_3;
                    _3146 = frontier_phi_82_pred_4;
                    _3144 = frontier_phi_82_pred_5;
                    uint _3310 = _3309 + 1u;
                    if (_3310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3303 = _3144;
                        _3304 = _3146;
                        _3305 = _3148;
                        _3306 = _3150;
                        _3307 = _3152;
                        _3308 = _3154;
                        _3309 = _3310;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3150;
                frontier_phi_63_64_ladder_1 = _3154;
                frontier_phi_63_64_ladder_2 = _3152;
                frontier_phi_63_64_ladder_3 = _3148;
                frontier_phi_63_64_ladder_4 = _3146;
                frontier_phi_63_64_ladder_5 = _3144;
            }
            else
            {
                frontier_phi_63_64_ladder = _3028;
                frontier_phi_63_64_ladder_1 = _3032;
                frontier_phi_63_64_ladder_2 = _3030;
                frontier_phi_63_64_ladder_3 = _3026;
                frontier_phi_63_64_ladder_4 = _3024;
                frontier_phi_63_64_ladder_5 = _3022;
            }
            _3143 = frontier_phi_63_64_ladder_5;
            _3145 = frontier_phi_63_64_ladder_4;
            _3147 = frontier_phi_63_64_ladder_3;
            _3149 = frontier_phi_63_64_ladder;
            _3151 = frontier_phi_63_64_ladder_2;
            _3153 = frontier_phi_63_64_ladder_1;
        }
        float _3158 = isnan(1.0) ? _921 : (isnan(_921) ? 1.0 : min(_921, 1.0));
        _2955 = (_3158 * _3149) + _2486;
        _2957 = (_3158 * _3151) + _2488;
        _2959 = (_3158 * _3153) + _2490;
        _2961 = ((_3143 * 0.039999999105930328369140625) * _3158) + _2809;
        _2963 = ((_3145 * 0.039999999105930328369140625) * _3158) + _2811;
        _2965 = ((_3147 * 0.039999999105930328369140625) * _3158) + _2813;
    }
    else
    {
        _2955 = _2486;
        _2957 = _2488;
        _2959 = _2490;
        _2961 = _2809;
        _2963 = _2811;
        _2965 = _2813;
    }
    float _4955 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4966 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4977 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2982 = ((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2955 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _921))) + ((_2961 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _2983 = ((isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_2957 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _921))) + ((_2963 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _2984 = ((isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2959 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _921))) + ((_2965 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    uint _2985 = _248 + 6u;
    float _2993 = _858 / cbSceneParam._m0[86u].x;
    float _2994 = _859 / cbSceneParam._m0[86u].y;
    vec4 _3008 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, (log2((isnan(cbSceneParam._m0[77u].w) ? _780 : (isnan(_780) ? cbSceneParam._m0[77u].w : min(_780, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3010 = _3008.x;
    float _3011 = _3008.y;
    float _3012 = _3008.z;
    float _3013 = _3008.w;
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    if (_780 > cbSceneParam._m0[78u].w)
    {
        float _3047 = isnan(_780) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _780 : min(cbSceneParam._m0[80u].w, _780));
        float _3048 = _3047 / _780;
        float _3059 = _3048 * _831;
        float _3060 = _832 * _3048;
        float _3061 = (-0.0) - _3060;
        float _3063 = _3048 * _833;
        float _3065 = (cbSceneParam._m0[77u].w * _3061) / _3047;
        float _3066 = _3065 + cbSceneParam._m0[79u].w;
        float _3067 = cbSceneParam._m0[79u].w - _3060;
        float _3073 = sqrt(((_3059 * _3059) + (_3060 * _3060)) + (_3063 * _3063));
        float _3076 = (1.0 - (cbSceneParam._m0[77u].w / _3047)) * _3073;
        float _3081 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3083 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3260;
        if (abs((_3061 - _3065) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3260 = ((((_3066 > 0.0) ? exp2(_3081 * _3066) : (2.0 - exp2(_3083 * _3066))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3076;
        }
        else
        {
            float _3204 = 1.0 / cbSceneParam._m0[80u].x;
            float _3205 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : max(_3066, _3067));
            float _3206 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : min(_3066, _3067));
            float _3215 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : min(_3205, 0.0));
            float _3216 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : min(_3206, 0.0));
            _3260 = ((abs(_3073 / _3061) * cbSceneParam._m0[80u].y) * ((((_3215 - _3216) * 2.0) - ((exp2(_3081 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0)))) - exp2(_3081 * (isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))))) * _3204)) - ((exp2(_3083 * _3215) - exp2(_3083 * _3216)) * _3204))) + (_3076 * cbSceneParam._m0[80u].z);
        }
        vec4 _3262 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, 1.0), 0.0);
        float _3271 = exp2((_3260 * (-1.44269502162933349609375)) * (1.0 - _3262.w));
        float _3272 = log2(_3271);
        float _3288 = log2(_3013);
        _3085 = (exp2(_3288 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].x)) * _3262.x) / cbSceneParam._m0[78u].x)) + _3010;
        _3087 = (exp2(_3288 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].y)) * _3262.y) / cbSceneParam._m0[78u].y)) + _3011;
        _3089 = (exp2(_3288 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].z)) * _3262.z) / cbSceneParam._m0[78u].z)) + _3012;
        _3091 = _3271 * _3013;
    }
    else
    {
        _3085 = _3010;
        _3087 = _3011;
        _3089 = _3012;
        _3091 = _3013;
    }
    bool _3298;
    vec4 _3101;
    vec4 _3123;
    float _3125;
    float _3129;
    float _3130;
    float _3131;
    float _3132;
    bool _3142;
    for (;;)
    {
        _3101 = cbMatDynParam._m0[0u];
        float _3103 = roundEven(_3101.y);
        bool _3104 = _3103 == 3.0;
        float _3105 = log2(_3091);
        float _3112 = exp2(_3105 * cbSceneParam._m0[78u].x) * _2982;
        float _3113 = exp2(_3105 * cbSceneParam._m0[78u].y) * _2983;
        float _3114 = exp2(_3105 * cbSceneParam._m0[78u].z) * _2984;
        float _3121 = _847 + (-0.5);
        _3123 = cbMtdParam._m0[1u];
        _3125 = _3123.y * _3121;
        float _3128 = (_3103 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3129 = _3128 * (_3104 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3085)));
        _3130 = _3128 * (_3104 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3087)));
        _3131 = _3128 * (_3104 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3089)));
        _3132 = _3121 * 0.999000012874603271484375;
        _3142 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3142)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _3132) < 0.5)
            {
                _3298 = true;
                break;
            }
        }
        uint _3239 = _896 + uint(_3101.w);
        if ((cbInstanceData._m0[_3239].w < 1.0) && ((cbInstanceData._m0[_3239].w + _3132) < 0.5))
        {
            _3298 = true;
            break;
        }
        if ((_3125 + 1.0) < _3123.x)
        {
            _3298 = true;
            break;
        }
        _3298 = false;
        break;
    }
    float _3502;
    if (_3298)
    {
        discard_state = true;
        _3502 = 0.0;
    }
    else
    {
        _3502 = cbInstanceData._m0[_2985].w;
    }
    SV_Target.x = _3129;
    SV_Target.y = _3130;
    SV_Target.z = _3131;
    SV_Target.w = _3502;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2985].w;
    discard_exit();
}


