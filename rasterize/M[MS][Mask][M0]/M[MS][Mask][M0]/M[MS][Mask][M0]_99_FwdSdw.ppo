#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1512;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4097 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4108 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4119 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _374 = _369.x * cbMtdParam._m0[11u].x;
    float _375 = _369.y * cbMtdParam._m0[11u].y;
    float _376 = _369.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _463 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _480 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _414.x) * 2.0) - ((((_451 - _463) * cbMtdParam._m0[24u].z) + _463) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4130 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _488 = (_481 * ((_395.x * cbMtdParam._m0[12u].x) - _374)) + _374;
    float _489 = (_481 * ((_395.y * cbMtdParam._m0[12u].y) - _375)) + _375;
    float _490 = (_481 * ((_395.z * cbMtdParam._m0[12u].z) - _376)) + _376;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _553 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _414.y) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[24u].z) + _539) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4141 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _564 = (_343.x * cbMtdParam._m0[9u].x) * ((_554 * ((_507.x * cbMtdParam._m0[13u].x) - _488)) + _488);
    float _565 = (_343.y * cbMtdParam._m0[9u].y) * ((_554 * ((_507.y * cbMtdParam._m0[13u].y) - _489)) + _489);
    float _566 = (_343.z * cbMtdParam._m0[9u].z) * ((_554 * ((_507.z * cbMtdParam._m0[13u].z) - _490)) + _490);
    float _570 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _564;
    float _573 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _565;
    float _576 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _566;
    float _584 = (((_564 - _570) * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) + _570) * 4.55000019073486328125;
    float _586 = (((_565 - _573) * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) + _573) * 4.55000019073486328125;
    float _588 = (((_566 - _576) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) + _576) * 4.55000019073486328125;
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _670 = _668.x;
    float _671 = _668.y;
    float _672 = _668.z;
    float _679 = ((_651.x - _670) * _481) + _670;
    float _680 = ((_651.y - _671) * _481) + _671;
    float _681 = ((_651.z - _672) * _481) + _672;
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _706 = ((_693.z - _681) * _554) + _681;
    float _709 = ((((_693.x - _679) * _554) + _679) * 2.0) + (-1.0);
    float _710 = ((((_693.y - _680) * _554) + _680) * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _4152 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _716 = sqrt(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _746 = (_709 + ((((_626.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_734.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _747 = (_710 + ((((_626.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_734.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _750 = fma(_716, _256, fma(_747, _263, _746 * _249));
    float _753 = fma(_716, _257, fma(_747, _264, _746 * _250));
    float _756 = fma(_716, _258, fma(_747, _265, _746 * _251));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    vec4 _787 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _789 = _787.x;
    float _790 = 1.0 - _789;
    float _796 = (cbMtdParam._m0[19u].x + dot(vec4(_760 * _750, _760 * _753, _760 * _756, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_789 - _790) * cbMtdParam._m0[24u].w) + _790) * cbMtdParam._m0[21u].z);
    float _4163 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _797 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _799 = (-0.0) - cbMtdParam._m0[24u].x;
    float _801 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _801 : (isnan(_801) ? 1.0 : min(_801, 1.0));
    float _809 = _797 - ((_797 * TEXCOORD_8.x) * _802);
    float _810 = _797 - ((_797 * TEXCOORD_8.y) * _802);
    float _811 = _797 - ((_797 * TEXCOORD_8.z) * _802);
    float _818 = (_809 * ((_607.x * cbMtdParam._m0[18u].x) - _584)) + _584;
    float _819 = (_810 * ((_607.y * cbMtdParam._m0[18u].y) - _586)) + _586;
    float _820 = (_811 * ((_607.z * cbMtdParam._m0[18u].z) - _588)) + _588;
    vec4 _832 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _834 = _832.x;
    float _835 = 1.0 - _834;
    float _863 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_834 - _835) * cbMtdParam._m0[24u].y) + _835) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4184 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _864 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _872 = ((((cbMtdParam._m0[10u].x - _818) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _864) + _818;
    float _873 = ((((cbMtdParam._m0[10u].y - _819) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _864) + _819;
    float _874 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _820)) * _864) + _820;
    float _879 = (((_626.z - _706) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _706;
    float _883 = ((_734.z - _879) * cbMtdParam._m0[19u].w) + _879;
    vec4 _897 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _904 = (_897.x * 2.0) + (-1.0);
    float _905 = (_897.y * 2.0) + (-1.0);
    float _906 = dot(vec2(_904, _905), vec2(_904, _905));
    float _4195 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _914 = ((_897.z - _883) * _809) + _883;
    float _917 = ((cbMtdParam._m0[23u].y - _914) * _864) + _914;
    vec4 _936 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _942 = (_936.x * 2.0) + (-1.0);
    float _943 = (_936.y * 2.0) + (-1.0);
    float _944 = dot(vec2(_942, _943), vec2(_942, _943));
    float _4206 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _959 = ((sqrt(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) - _716) * _811) + _716;
    float _962 = (((_904 - _746) * _809) + _746) + (cbMtdParam._m0[21u].x * _746);
    float _963 = (((_905 - _747) * _810) + _747) + (cbMtdParam._m0[21u].x * _747);
    float _974 = (((_942 - _962) + (_962 * cbMtdParam._m0[22u].z)) * _864) + _962;
    float _975 = (((_943 - _963) + (_963 * cbMtdParam._m0[22u].z)) * _864) + _963;
    float _976 = (_864 * (sqrt(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) - _959)) + _959;
    float _978 = cbMtdParam._m0[22u].x + _734.w;
    float _981 = fma(_976, _256, fma(_975, _263, _974 * _249));
    float _984 = fma(_976, _257, fma(_975, _264, _974 * _250));
    float _987 = fma(_976, _258, fma(_975, _265, _974 * _251));
    float _991 = inversesqrt(dot(vec3(_981, _984, _987), vec3(_981, _984, _987)));
    float _992 = _991 * _981;
    float _993 = _991 * _984;
    float _994 = _991 * _987;
    float _4217 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _995 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _4228 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4239 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4250 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4261 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _1013 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1063 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1053);
    float _1064 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1053);
    float _1065 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1053);
    float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
    float _1070 = _1063 * _1069;
    float _1071 = _1064 * _1069;
    float _1072 = _1065 * _1069;
    float _1078 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1079 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1097 = fma(_994, cbSceneParam._m0[5u].z, fma(_993, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _992));
    float _1100 = fma(_994, cbSceneParam._m0[6u].z, fma(_993, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _992));
    float _1103 = fma(_994, cbSceneParam._m0[7u].z, fma(_993, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _992));
    uint _1117 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1123 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * cbInstanceData._m0[_1117].x;
    float _1124 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * cbInstanceData._m0[_1117].y;
    float _1125 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * cbInstanceData._m0[_1117].z;
    float _4272 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1127 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _4294 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1128 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    vec4 _1137 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1078, cbSceneParam._m0[86u].y * _1079));
    float _1141 = ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * TEXCOORD_5.w) * _1137.x;
    float _1142 = dot(vec3(_992, _993, _994), vec3(_1070, _1071, _1072));
    float _1145 = _1142 * 2.0;
    float _1149 = (_1145 * _992) - _1070;
    float _1150 = (_1145 * _993) - _1071;
    float _1151 = (_1145 * _994) - _1072;
    float _1155 = abs(dot(vec3(_1070, _1071, _1072), vec3(_992, _993, _994)));
    float _4305 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1157 = sqrt(_995);
    float _1170 = exp2((_1157 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1157 * 3.0));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1206 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1210 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1511;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1236 = fma(_1210, cbModelParam._m0[26u].z, fma(_1206, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1202));
        float _1240 = fma(_1210, cbModelParam._m0[27u].z, fma(_1206, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1202));
        float _1244 = fma(_1210, cbModelParam._m0[28u].z, fma(_1206, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1202));
        float _1269 = _1202 + _992;
        float _1270 = _1206 + _993;
        float _1271 = _1210 + _994;
        float _1281 = fma(_1271, cbModelParam._m0[26u].z, fma(_1270, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1269)) - _1236;
        float _1282 = fma(_1271, cbModelParam._m0[27u].z, fma(_1270, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1269)) - _1240;
        float _1283 = fma(_1271, cbModelParam._m0[28u].z, fma(_1270, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1269)) - _1244;
        float _1287 = inversesqrt(dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283)));
        float _1300 = ((_1287 * _1281) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1236 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1287 * _1282) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1240 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1287 * _1283) / cbModelParam._m0[34u].z) + ((((((_1244 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        float _1339 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1305.x + (-0.5));
        float _1341 = _1339 * (_1305.y + (-0.5));
        float _1342 = _1339 * (_1305.z + (-0.5));
        float _1349 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1312.x + (-0.5));
        float _1351 = _1349 * (_1312.y + (-0.5));
        float _1352 = _1349 * (_1312.z + (-0.5));
        float _1359 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1319.x + (-0.5));
        float _1361 = _1359 * (_1319.y + (-0.5));
        float _1362 = _1359 * (_1319.z + (-0.5));
        float _1369 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1326.x + (-0.5));
        float _1371 = _1369 * (_1326.y + (-0.5));
        float _1372 = _1369 * (_1326.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1393 = (dot(vec3(_992, _993, _994), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1403 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4353 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1405 + 1.0))) + _1410) * _1373;
        float _1420 = _1341 * 0.5;
        float _1421 = _1351 * 0.5;
        float _1422 = _1361 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_992, _993, _994), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4386 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1447 + 1.0))) + _1452) * _1374;
        float _1462 = _1342 * 0.5;
        float _1463 = _1352 * 0.5;
        float _1464 = _1362 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_992, _993, _994), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4419 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1489 + 1.0))) + _1494) * _1375;
        _1511 = _1342;
        _1513 = _1341;
        _1514 = _1340;
        _1515 = _1352;
        _1516 = _1351;
        _1517 = _1350;
        _1518 = _1362;
        _1519 = _1361;
        _1520 = _1360;
        _1521 = _1375;
        _1522 = _1374;
        _1523 = _1373;
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1525 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1526 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
    }
    else
    {
        _1511 = _1512;
        _1513 = _1512;
        _1514 = _1512;
        _1515 = _1512;
        _1516 = _1512;
        _1517 = _1512;
        _1518 = _1512;
        _1519 = _1512;
        _1520 = _1512;
        _1521 = _1512;
        _1522 = _1512;
        _1523 = _1512;
        _1524 = 0.0;
        _1525 = 0.0;
        _1526 = 0.0;
    }
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1550 = fma(_1210, cbModelParam._m0[30u].z, fma(_1206, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202));
        float _1554 = fma(_1210, cbModelParam._m0[31u].z, fma(_1206, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202));
        float _1558 = fma(_1210, cbModelParam._m0[32u].z, fma(_1206, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202));
        float _1581 = _1202 + _992;
        float _1582 = _1206 + _993;
        float _1583 = _1210 + _994;
        float _1593 = fma(_1583, cbModelParam._m0[30u].z, fma(_1582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1581)) - _1550;
        float _1594 = fma(_1583, cbModelParam._m0[31u].z, fma(_1582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1581)) - _1554;
        float _1595 = fma(_1583, cbModelParam._m0[32u].z, fma(_1582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1581)) - _1558;
        float _1599 = inversesqrt(dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595)));
        float _1612 = ((_1599 * _1593) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1550 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1599 * _1594) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1554 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1614 = ((_1599 * _1595) / cbModelParam._m0[35u].z) + ((((((_1558 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        float _1649 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1616.x + (-0.5));
        float _1651 = _1649 * (_1616.y + (-0.5));
        float _1652 = _1649 * (_1616.z + (-0.5));
        float _1659 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1623.x + (-0.5));
        float _1661 = _1659 * (_1623.y + (-0.5));
        float _1662 = _1659 * (_1623.z + (-0.5));
        float _1669 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1630.x + (-0.5));
        float _1671 = _1669 * (_1630.y + (-0.5));
        float _1672 = _1669 * (_1630.z + (-0.5));
        float _1679 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1637.x + (-0.5));
        float _1681 = _1679 * (_1637.y + (-0.5));
        float _1682 = _1679 * (_1637.z + (-0.5));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = _1650 * 0.5;
        float _1687 = _1660 * 0.5;
        float _1688 = _1670 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_992, _993, _994), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4460 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4471 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4482 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_1713 + 1.0))) + _1718) * _1683;
        float _1728 = _1651 * 0.5;
        float _1729 = _1661 * 0.5;
        float _1730 = _1671 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_992, _993, _994), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4493 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4504 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4515 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_1755 + 1.0))) + _1760) * _1684;
        float _1770 = _1652 * 0.5;
        float _1771 = _1662 * 0.5;
        float _1772 = _1672 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_992, _993, _994), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4526 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4537 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4548 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_1797 + 1.0))) + _1802) * _1685;
        _1819 = _1652;
        _1820 = _1651;
        _1821 = _1650;
        _1822 = _1662;
        _1823 = _1661;
        _1824 = _1660;
        _1825 = _1672;
        _1826 = _1671;
        _1827 = _1670;
        _1828 = _1685;
        _1829 = _1684;
        _1830 = _1683;
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
    }
    else
    {
        _1819 = _1512;
        _1820 = _1512;
        _1821 = _1512;
        _1822 = _1512;
        _1823 = _1512;
        _1824 = _1512;
        _1825 = _1512;
        _1826 = _1512;
        _1827 = _1512;
        _1828 = _1512;
        _1829 = _1512;
        _1830 = _1512;
        _1831 = 0.0;
        _1832 = 0.0;
        _1833 = 0.0;
    }
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1524)) + _1524;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1525)) + _1525;
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1526)) + _1526;
    float _1866 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1844, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1844, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1844, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1843));
    float _1887 = _1149 * 0.5;
    float _1888 = _1150 * 0.5;
    float _1889 = _1151 * 0.5;
    float _1890 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1893 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1896 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1930;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1903 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1511, _1515, _1518, _1521));
        float _1907 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1513, _1516, _1519, _1522));
        float _1911 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1514, _1517, _1520, _1523));
        float _1918 = dot(vec4(cbModelParam._m0[39u]), vec4(_1887, _1888, _1889, 1.0));
        _1930 = dot(vec3(isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1918) ? 0.0 : (isnan(0.0) ? _1918 : max(0.0, _1918))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1930 = 1.0;
    }
    float _1941;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1932 = dot(vec4(cbModelParam._m0[40u]), vec4(_1887, _1888, _1889, 1.0));
        _1941 = dot(vec3(isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1932) ? 0.0 : (isnan(0.0) ? _1932 : max(0.0, _1932))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1941 = 1.0;
    }
    float _1945 = (_1941 * cbModelParam._m0[1u].x) + (_1930 * (1.0 - cbModelParam._m0[1u].x));
    float _1955 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _995);
    float _1956 = isnan(_1955) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1955 : min(cbModelParam._m0[25u].z, _1955));
    float _2036;
    float _2038;
    float _2040;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2003 = fma(_1210, cbModelParam._m0[13u].z, fma(_1206, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1202)) + cbModelParam._m0[13u].w;
        float _2007 = fma(_1210, cbModelParam._m0[14u].z, fma(_1206, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1202)) + cbModelParam._m0[14u].w;
        float _2011 = fma(_1210, cbModelParam._m0[15u].z, fma(_1206, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1202)) + cbModelParam._m0[15u].w;
        float _2014 = fma(_1151, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1149));
        float _2017 = fma(_1151, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1149));
        float _2020 = fma(_1151, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1149));
        float _2048;
        if (_2014 > 0.0)
        {
            _2048 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2048 = frontier_phi_14_12_ladder;
        }
        float _2217;
        if (_2017 > 0.0)
        {
            _2217 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2217 = frontier_phi_23_19_ladder;
        }
        float _2512;
        if (_2020 > 0.0)
        {
            _2512 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2512 = frontier_phi_35_30_ladder;
        }
        float _2514 = isnan(_2217) ? _2048 : (isnan(_2048) ? _2217 : min(_2048, _2217));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _2014) + _2003;
        float _2520 = (_2515 * _2017) + _2007;
        float _2521 = (_2515 * _2020) + _2011;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2522;
        float _2526 = _2522 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 > _2526) || ((_2520 < _2524) || ((_2519 < _2524) || (_2519 > _2526))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2521, cbModelParam._m0[9u].z, fma(_2520, cbModelParam._m0[9u].y, _2519 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2521, cbModelParam._m0[10u].z, fma(_2520, cbModelParam._m0[10u].y, _2519 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2521, cbModelParam._m0[11u].z, fma(_2520, cbModelParam._m0[11u].y, _2519 * cbModelParam._m0[11u].x))), _1956);
            frontier_phi_13_35_ladder = _2666.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2666.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2666.x * cbModelParam._m0[1u].y;
        }
        _2036 = frontier_phi_13_35_ladder_2;
        _2038 = frontier_phi_13_35_ladder_1;
        _2040 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1149, _1150, _1151), _1956);
        _2036 = _2024.x * cbModelParam._m0[1u].y;
        _2038 = _2024.y * cbModelParam._m0[1u].y;
        _2040 = _2024.z * cbModelParam._m0[1u].y;
    }
    float _2044 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _995);
    float _2045 = isnan(_2044) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2044 : min(cbModelParam._m0[25u].w, _2044));
    float _2134;
    float _2136;
    float _2138;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2098 = fma(_1210, cbModelParam._m0[21u].z, fma(_1206, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1202)) + cbModelParam._m0[21u].w;
        float _2102 = fma(_1210, cbModelParam._m0[22u].z, fma(_1206, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1202)) + cbModelParam._m0[22u].w;
        float _2106 = fma(_1210, cbModelParam._m0[23u].z, fma(_1206, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1202)) + cbModelParam._m0[23u].w;
        float _2109 = fma(_1151, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1149));
        float _2112 = fma(_1151, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1149));
        float _2115 = fma(_1151, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1149));
        float _2222;
        if (_2109 > 0.0)
        {
            _2222 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2222 = frontier_phi_25_21_ladder;
        }
        float _2539;
        if (_2112 > 0.0)
        {
            _2539 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2539 = frontier_phi_37_32_ladder;
        }
        float _2866;
        if (_2115 > 0.0)
        {
            _2866 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2866 = frontier_phi_47_44_ladder;
        }
        float _2868 = isnan(_2539) ? _2222 : (isnan(_2222) ? _2539 : min(_2222, _2539));
        float _2869 = isnan(_2866) ? _2868 : (isnan(_2868) ? _2866 : min(_2868, _2866));
        float _2873 = (_2869 * _2109) + _2098;
        float _2874 = (_2869 * _2112) + _2102;
        float _2875 = (_2869 * _2115) + _2106;
        float _2876 = _2869 * 9.9999997473787516355514526367188e-05;
        float _2877 = (-1.0) - _2876;
        float _2879 = _2876 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2875 > _2879) || ((_2875 < _2877) || ((_2874 > _2879) || ((_2874 < _2877) || ((_2873 < _2877) || (_2873 > _2879))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2875, cbModelParam._m0[17u].z, fma(_2874, cbModelParam._m0[17u].y, _2873 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2875, cbModelParam._m0[18u].z, fma(_2874, cbModelParam._m0[18u].y, _2873 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2875, cbModelParam._m0[19u].z, fma(_2874, cbModelParam._m0[19u].y, _2873 * cbModelParam._m0[19u].x))), _2045);
            frontier_phi_22_47_ladder = _2993.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2993.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2993.x * cbModelParam._m0[1u].z;
        }
        _2134 = frontier_phi_22_47_ladder_2;
        _2136 = frontier_phi_22_47_ladder_1;
        _2138 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2118 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1149, _1150, _1151), _2045);
        _2134 = _2118.x * cbModelParam._m0[1u].z;
        _2136 = _2118.y * cbModelParam._m0[1u].z;
        _2138 = _2118.z * cbModelParam._m0[1u].z;
    }
    float _2150 = ((((1.0 - _1170) * ((_1157 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1170 * _1157)) * _1141;
    float _2151 = _2150 * ((cbModelParam._m0[1u].w * (_2134 - _2036)) + _2036);
    float _2152 = _2150 * ((cbModelParam._m0[1u].w * (_2136 - _2038)) + _2038);
    float _2153 = _2150 * ((cbModelParam._m0[1u].w * (_2138 - _2040)) + _2040);
    float _2156 = fma(_2153, cbSceneParam._m0[89u].z, fma(_2152, cbSceneParam._m0[89u].y, _2151 * cbSceneParam._m0[89u].x));
    float _2159 = fma(_2153, cbSceneParam._m0[90u].z, fma(_2152, cbSceneParam._m0[90u].y, _2151 * cbSceneParam._m0[90u].x));
    float _2162 = fma(_2153, cbSceneParam._m0[91u].z, fma(_2152, cbSceneParam._m0[91u].y, _2151 * cbSceneParam._m0[91u].x));
    float _2196 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2200 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2204 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2208 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2209 = _2196 / _2208;
    float _2210 = _2200 / _2208;
    float _2211 = _2204 / _2208;
    float _2358;
    float _2359;
    float _2360;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2238 = ((uint(_2211 > cbSceneParam._m0[59u].y) + uint(_2211 > cbSceneParam._m0[59u].x)) + uint(_2211 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2239 = _2238 + 43u;
        uint _2247 = _2238 + 44u;
        uint _2255 = _2238 + 45u;
        uint _2263 = _2238 + 46u;
        float _2274 = fma(_2208, cbSceneParam._m0[_2239].w, fma(_2204, cbSceneParam._m0[_2239].z, fma(_2200, cbSceneParam._m0[_2239].y, _2196 * cbSceneParam._m0[_2239].x)));
        float _2278 = fma(_2208, cbSceneParam._m0[_2247].w, fma(_2204, cbSceneParam._m0[_2247].z, fma(_2200, cbSceneParam._m0[_2247].y, _2196 * cbSceneParam._m0[_2247].x)));
        float _2286 = fma(_2208, cbSceneParam._m0[_2263].w, fma(_2204, cbSceneParam._m0[_2263].z, fma(_2200, cbSceneParam._m0[_2263].y, _2196 * cbSceneParam._m0[_2263].x)));
        float _2291 = cbSceneParam._m0[33u].z * _2286;
        float _2293 = cbSceneParam._m0[33u].w * _2286;
        float _2296 = fma(_2208, cbSceneParam._m0[_2255].w, fma(_2204, cbSceneParam._m0[_2255].z, fma(_2200, cbSceneParam._m0[_2255].y, _2196 * cbSceneParam._m0[_2255].x))) / _2286;
        float _2344 = (cbSceneParam._m0[33u].x - sqrt(((_2210 * _2210) + (_2209 * _2209)) + (_2211 * _2211))) * cbSceneParam._m0[33u].y;
        float _4674 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2351 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2291 + _2274) / _2286, (_2293 + _2278) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2293 + _2274) / _2286, (_2278 - _2291) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2274 - _2291) / _2286, (_2278 - _2293) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2274 - _2293) / _2286, (_2291 + _2278) / _2286), _2296), 0.0)).x), vec4(0.25)));
        _2358 = 1.0 - (_2351 * cbSceneParam._m0[34u].x);
        _2359 = 1.0 - (_2351 * cbSceneParam._m0[34u].y);
        _2360 = 1.0 - (_2351 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2358 = 1.0;
        _2359 = 1.0;
        _2360 = 1.0;
    }
    float _2424;
    float _2426;
    float _2428;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2412 = fma(_2208, cbSceneParam._m0[63u].w, fma(_2204, cbSceneParam._m0[63u].z, fma(_2200, cbSceneParam._m0[63u].y, _2196 * cbSceneParam._m0[63u].x)));
        float _2413 = fma(_2208, cbSceneParam._m0[60u].w, fma(_2204, cbSceneParam._m0[60u].z, fma(_2200, cbSceneParam._m0[60u].y, _2196 * cbSceneParam._m0[60u].x))) / _2412;
        float _2414 = fma(_2208, cbSceneParam._m0[61u].w, fma(_2204, cbSceneParam._m0[61u].z, fma(_2200, cbSceneParam._m0[61u].y, _2196 * cbSceneParam._m0[61u].x))) / _2412;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2413 >= cbSceneParam._m0[64u].x) && (_2414 >= cbSceneParam._m0[64u].y)) && (_2413 <= cbSceneParam._m0[64u].z)) && (_2414 <= cbSceneParam._m0[64u].w))
        {
            float _2552 = fma(_2208, cbSceneParam._m0[62u].w, fma(_2204, cbSceneParam._m0[62u].z, fma(_2200, cbSceneParam._m0[62u].y, _2196 * cbSceneParam._m0[62u].x))) / _2412;
            float _2556 = isnan(cbSceneParam._m0[41u].w) ? _2552 : (isnan(_2552) ? cbSceneParam._m0[41u].w : max(_2552, cbSceneParam._m0[41u].w));
            float _2599 = (cbSceneParam._m0[33u].x - sqrt(((_2210 * _2210) + (_2209 * _2209)) + (_2211 * _2211))) * cbSceneParam._m0[33u].y;
            float _4690 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
            float _2606 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2413, cbSceneParam._m0[33u].w + _2414), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2413, _2414 - cbSceneParam._m0[33u].z), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2413 - cbSceneParam._m0[33u].z, _2414 - cbSceneParam._m0[33u].w), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2413 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2414), _2556), 0.0)).x), vec4(0.25)));
            float _2610 = 1.0 - (_2606 * cbSceneParam._m0[34u].x);
            float _2611 = 1.0 - (_2606 * cbSceneParam._m0[34u].y);
            float _2612 = 1.0 - (_2606 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2612) ? _2360 : (isnan(_2360) ? _2612 : min(_2360, _2612));
            frontier_phi_34_33_ladder_1 = isnan(_2611) ? _2359 : (isnan(_2359) ? _2611 : min(_2359, _2611));
            frontier_phi_34_33_ladder_2 = isnan(_2610) ? _2358 : (isnan(_2358) ? _2610 : min(_2358, _2610));
        }
        else
        {
            frontier_phi_34_33_ladder = _2360;
            frontier_phi_34_33_ladder_1 = _2359;
            frontier_phi_34_33_ladder_2 = _2358;
        }
        _2424 = frontier_phi_34_33_ladder_2;
        _2426 = frontier_phi_34_33_ladder_1;
        _2428 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2424 = _2358;
        _2426 = _2359;
        _2428 = _2360;
    }
    uvec4 _2433 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2435 = _2433.x * 14u;
    uint _2436 = _2435 + 13u;
    float _2443 = _1141 + (-1.0);
    float _2448 = (cbLight._m0[_2436].x * _2443) + 1.0;
    float _2449 = (cbLight._m0[_2436].y * _2443) + 1.0;
    float _2450 = (cbLight._m0[_2436].z * _2443) + 1.0;
    float _2451 = (cbLight._m0[_2436].w * _2443) + 1.0;
    uint _2452 = _2435 + 5u;
    float _2458 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
    uint _2462 = _2435 + 4u;
    float _2471 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
    uint _2475 = _2435 | 1u;
    float _2486 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_992, _993, _994));
    float _2489 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_992, _993, _994));
    float _4726 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _4737 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2494 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * 0.3183098733425140380859375;
    float _2496 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * 0.3183098733425140380859375;
    float _2503 = ((cbLight._m0[_2452].x * _2458) * _2496) + (((cbLight._m0[_2462].x * _2424) * _2471) * _2494);
    float _2504 = ((_2458 * cbLight._m0[_2452].y) * _2496) + (((cbLight._m0[_2462].y * _2426) * _2471) * _2494);
    float _2505 = ((_2458 * cbLight._m0[_2452].z) * _2496) + (((cbLight._m0[_2462].z * _2428) * _2471) * _2494);
    uvec4 _2509 = floatBitsToUint(cbLight._m0[_2435 + 12u]);
    bool _2511 = _2509.x == 0u;
    float _2613;
    float _2615;
    float _2617;
    if (_2511)
    {
        _2613 = _2503;
        _2615 = _2504;
        _2617 = _2505;
    }
    else
    {
        uint _2621 = _2435 + 6u;
        float _2637 = (dot(vec3(cbLight._m0[_2435 + 2u].xyz), vec3(_992, _993, _994)) * 0.5) + 0.5;
        float _2638 = _2637 * _2637;
        float _4748 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2639 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2640 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2613 = (((cbLight._m0[_2621].x * 0.3183098733425140380859375) * _2639) * _2640) + _2503;
        _2615 = (((cbLight._m0[_2621].y * 0.3183098733425140380859375) * _2639) * _2640) + _2504;
        _2617 = (((cbLight._m0[_2621].z * 0.3183098733425140380859375) * _2639) * _2640) + _2505;
    }
    bool _2620 = _2509.y == 0u;
    float _2675;
    float _2677;
    float _2679;
    if (_2620)
    {
        _2675 = _2613;
        _2677 = _2615;
        _2679 = _2617;
    }
    else
    {
        uint _2837 = _2435 + 7u;
        float _2853 = (dot(vec3(cbLight._m0[_2435 + 3u].xyz), vec3(_992, _993, _994)) * 0.5) + 0.5;
        float _2854 = _2853 * _2853;
        float _4764 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2855 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2856 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2675 = (((cbLight._m0[_2837].x * 0.3183098733425140380859375) * _2855) * _2856) + _2613;
        _2677 = (((cbLight._m0[_2837].y * 0.3183098733425140380859375) * _2855) * _2856) + _2615;
        _2679 = (((cbLight._m0[_2837].z * 0.3183098733425140380859375) * _2855) * _2856) + _2617;
    }
    uint _2682 = _2435 + 8u;
    float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _995) * 0.949999988079071044921875);
    float _2696 = _2695 * _2695;
    float _2697 = cbLight._m0[_2435].x + _1070;
    float _2698 = cbLight._m0[_2435].y + _1071;
    float _2699 = cbLight._m0[_2435].z + _1072;
    float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
    float _2704 = _2703 * _2697;
    float _2705 = _2703 * _2698;
    float _2706 = _2703 * _2699;
    float _2707 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2435].xyz));
    float _4780 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2710 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _4791 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _2711 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2712 = dot(vec3(_992, _993, _994), vec3(_2704, _2705, _2706));
    float _4802 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2716 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2704, _2705, _2706));
    float _4813 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2720 = _2696 * _2696;
    float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
    float _2735 = (exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2736 = 1.0 - _2696;
    float _2747 = (0.5 / (((_2711 * ((_2710 * _2736) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2736) + _2696) * _2710))) * _2710;
    float _4824 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2749 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
    uint _2763 = _2435 + 9u;
    float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2475].w)) * _995) * 0.949999988079071044921875);
    float _2775 = _2774 * _2774;
    float _2776 = cbLight._m0[_2475].x + _1070;
    float _2777 = cbLight._m0[_2475].y + _1071;
    float _2778 = cbLight._m0[_2475].z + _1072;
    float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
    float _2783 = _2782 * _2776;
    float _2784 = _2782 * _2777;
    float _2785 = _2782 * _2778;
    float _2786 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2475].xyz));
    float _4835 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2789 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
    float _2790 = dot(vec3(_992, _993, _994), vec3(_2783, _2784, _2785));
    float _4846 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2793 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
    float _2794 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_2783, _2784, _2785));
    float _4857 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2798 = _2775 * _2775;
    float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
    float _2811 = (exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2812 = 1.0 - _2775;
    float _2822 = (0.5 / (((_2711 * ((_2789 * _2812) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2812) + _2775) * _2789))) * _2789;
    float _4868 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2824 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
    float _2834 = (((_2811 * cbLight._m0[_2763].x) * _2824) * _2458) + ((((cbLight._m0[_2682].x * _2424) * _2735) * _2749) * _2471);
    float _2835 = (((_2811 * cbLight._m0[_2763].y) * _2824) * _2458) + ((((cbLight._m0[_2682].y * _2426) * _2735) * _2749) * _2471);
    float _2836 = (((_2811 * cbLight._m0[_2763].z) * _2824) * _2458) + ((((cbLight._m0[_2682].z * _2428) * _2735) * _2749) * _2471);
    float _2892;
    float _2894;
    float _2896;
    if (_2511)
    {
        _2892 = _2834;
        _2894 = _2835;
        _2896 = _2836;
    }
    else
    {
        uint _2898 = _2435 + 2u;
        uint _2902 = _2435 + 10u;
        float _2916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2898].w)) * _995) * 0.949999988079071044921875);
        float _2917 = _2916 * _2916;
        float _2918 = cbLight._m0[_2898].x + _1070;
        float _2919 = cbLight._m0[_2898].y + _1071;
        float _2920 = cbLight._m0[_2898].z + _1072;
        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
        float _2925 = _2924 * _2918;
        float _2926 = _2924 * _2919;
        float _2927 = _2924 * _2920;
        float _2928 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2898].xyz));
        float _4879 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2932 = dot(vec3(_992, _993, _994), vec3(_2925, _2926, _2927));
        float _4890 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _2936 = dot(vec3(cbLight._m0[_2898].xyz), vec3(_2925, _2926, _2927));
        float _4901 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2940 = _2917 * _2917;
        float _2944 = ((_2935 * _2935) * (_2940 + (-1.0))) + 1.0;
        float _2953 = (exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2954 = 1.0 - _2917;
        float _2964 = (0.5 / (((_2711 * ((_2931 * _2954) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2954) + _2917) * _2931))) * _2931;
        float _4912 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2966 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2940 / ((_2944 * _2944) * 3.141590118408203125));
        float _2967 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2892 = (((_2953 * cbLight._m0[_2902].x) * _2966) * _2967) + _2834;
        _2894 = (((_2953 * cbLight._m0[_2902].y) * _2966) * _2967) + _2835;
        _2896 = (((_2953 * cbLight._m0[_2902].z) * _2966) * _2967) + _2836;
    }
    float _2998;
    float _3000;
    float _3002;
    if (_2620)
    {
        _2998 = _2892;
        _3000 = _2894;
        _3002 = _2896;
    }
    else
    {
        uint _3009 = _2435 + 3u;
        uint _3013 = _2435 + 11u;
        float _3027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3009].w)) * _995) * 0.949999988079071044921875);
        float _3028 = _3027 * _3027;
        float _3029 = cbLight._m0[_3009].x + _1070;
        float _3030 = cbLight._m0[_3009].y + _1071;
        float _3031 = cbLight._m0[_3009].z + _1072;
        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
        float _3036 = _3035 * _3029;
        float _3037 = _3035 * _3030;
        float _3038 = _3035 * _3031;
        float _3039 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_3009].xyz));
        float _4928 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3042 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
        float _3043 = dot(vec3(_992, _993, _994), vec3(_3036, _3037, _3038));
        float _4939 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3046 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _3047 = dot(vec3(cbLight._m0[_3009].xyz), vec3(_3036, _3037, _3038));
        float _4950 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
        float _3051 = _3028 * _3028;
        float _3055 = ((_3046 * _3046) * (_3051 + (-1.0))) + 1.0;
        float _3064 = (exp2(log2(1.0 - (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3065 = 1.0 - _3028;
        float _3075 = (0.5 / (((_2711 * ((_3042 * _3065) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _3065) + _3028) * _3042))) * _3042;
        float _4961 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        float _3077 = (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_3051 / ((_3055 * _3055) * 3.141590118408203125));
        float _3078 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2998 = (((_3064 * cbLight._m0[_3013].x) * _3077) * _3078) + _2892;
        _3000 = (((_3064 * cbLight._m0[_3013].y) * _3077) * _3078) + _2894;
        _3002 = (((_3064 * cbLight._m0[_3013].z) * _3077) * _3078) + _2896;
    }
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    float _3154;
    if (_2433.y == 0u)
    {
        uvec4 _3099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3100 = _3099.x;
        uint _3111 = uint((float(_3099.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1079) / _3100))) + floor(float(uint(cbSceneParam._m0[85u].x * _1078) / _3100)));
        float _3121 = (log2(_2211 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3122 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
        uint _3125 = uint(isnan(14.0) ? _3122 : (isnan(_3122) ? 14.0 : min(_3122, 14.0)));
        uvec4 _3130 = texelFetch(g_lightClusterGridBuffer, int(((_3125 << 2u) + (_3111 << 6u)) >> 2u));
        uint _3131 = _3130.x;
        uint _3132 = _3099.z;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        if (((((1u << ((_3132 >> 4u) & 15u)) + 4294967295u) & _3131) == 0u) || ((_3132 & 240u) == 0u))
        {
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
            _3219 = 0.0;
            _3221 = 0.0;
        }
        else
        {
            float _3212;
            float _3214;
            float _3216;
            float _3218;
            float _3220;
            float _3222;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            float _3360 = 0.0;
            uint _3361 = 0u;
            uint _3370;
            bool _3371;
            for (;;)
            {
                _3370 = texelFetch(g_lightClassification, int((((_3125 << 5u) + (_3111 << 9u)) + (_3361 << 2u)) >> 2u)).x;
                _3371 = _3370 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3371)
                {
                    frontier_phi_66_pred = _3360;
                    frontier_phi_66_pred_1 = _3359;
                    frontier_phi_66_pred_2 = _3358;
                    frontier_phi_66_pred_3 = _3357;
                    frontier_phi_66_pred_4 = _3356;
                    frontier_phi_66_pred_5 = _3355;
                }
                else
                {
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    uint _3485;
                    _3479 = _3355;
                    _3480 = _3356;
                    _3481 = _3357;
                    _3482 = _3358;
                    _3483 = _3359;
                    _3484 = _3360;
                    _3485 = _3370;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    for (;;)
                    {
                        uint _3489 = uint(findLSB(_3485)) + (_3361 << 5u);
                        uint _3486 = (_3485 + 4294967295u) & _3485;
                        uint _3491 = _3489 * 48u;
                        vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3491)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 3u)).x));
                        uint _3511 = (_3489 * 48u) + 4u;
                        vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3511)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 3u)).x));
                        uint _3530 = (_3489 * 48u) + 8u;
                        vec3 _3541 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3530)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 2u)).x));
                        float _3545 = _3505.x - _2209;
                        float _3546 = _3505.y - _2210;
                        float _3547 = _3505.z - _2211;
                        float _3548 = dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547));
                        float _3551 = inversesqrt(_3548);
                        float _3552 = _3551 * _3545;
                        float _3553 = _3551 * _3546;
                        float _3554 = _3551 * _3547;
                        float _3555 = dot(vec3(_1097, _1100, _1103), vec3(_3552, _3553, _3554));
                        float _3560 = 1.0 - (_3548 * _3505.w);
                        float _4987 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3561 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                        float _3562 = sqrt(_3548) * _3524.w;
                        float _3565 = 1.39999997615814208984375 / (_3562 + 1.39999997615814208984375);
                        float _3566 = _3565 * _3565;
                        float _3569 = ((1.0 - _3566) * _3555) + _3566;
                        float _3572 = _3562 * _3562;
                        float _3576 = ((isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0))) * _3561) / ((_3572 * 0.699999988079071044921875) + 1.0);
                        float _3580 = (-0.0) - _2209;
                        float _3581 = (-0.0) - _2210;
                        float _3582 = (-0.0) - _2211;
                        float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                        float _3587 = _3586 * _3580;
                        float _3588 = _3586 * _3581;
                        float _3589 = _3586 * _3582;
                        float _3596 = exp2(log2(1.0 / ((_3572 * 3.5) + 5.0)) * 0.25);
                        float _3597 = 1.0 - _1157;
                        float _3604 = sqrt(1.0 - ((1.0 - (_3597 * _3597)) * (1.0 - (_3596 * _3596))));
                        float _3605 = _3604 * _3604;
                        float _3606 = _3605 * _3605;
                        float _3607 = _3587 + _3552;
                        float _3608 = _3588 + _3553;
                        float _3609 = _3589 + _3554;
                        float _3613 = inversesqrt(dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609)));
                        float _3617 = dot(vec3(_1097, _1100, _1103), vec3(_3587, _3588, _3589));
                        float _5003 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                        float _3620 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                        float _3621 = dot(vec3(_1097, _1100, _1103), vec3(_3613 * _3607, _3613 * _3608, _3613 * _3609));
                        float _5014 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                        float _3624 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                        float _3628 = ((_3624 * _3624) * (_3606 + (-1.0))) + 1.0;
                        float _3629 = _3565 * _3605;
                        float _3630 = _3629 * _3629;
                        float _3633 = ((1.0 - _3630) * _3555) + _3630;
                        float _5025 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                        float _3634 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                        float _3635 = 1.0 - _3605;
                        float _3645 = (0.5 / (((_3634 * ((_3620 * _3635) + _3605)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3605) * _3620))) * _3634;
                        float _5036 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                        float _3656 = (((_3606 * 3.1415927410125732421875) * (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0)))) / ((_3628 * _3628) * ((_3572 * 2.1991131305694580078125) + 3.141590118408203125))) * _3561;
                        _3414 = (_3576 * _3524.x) + _3482;
                        _3415 = (_3576 * _3524.y) + _3483;
                        _3416 = (_3576 * _3524.z) + _3484;
                        _3411 = (_3656 * _3541.x) + _3479;
                        _3412 = (_3656 * _3541.y) + _3480;
                        _3413 = (_3656 * _3541.z) + _3481;
                        if (_3486 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3479 = _3411;
                            _3480 = _3412;
                            _3481 = _3413;
                            _3482 = _3414;
                            _3483 = _3415;
                            _3484 = _3416;
                            _3485 = _3486;
                        }
                    }
                    frontier_phi_66_pred = _3416;
                    frontier_phi_66_pred_1 = _3415;
                    frontier_phi_66_pred_2 = _3414;
                    frontier_phi_66_pred_3 = _3413;
                    frontier_phi_66_pred_4 = _3412;
                    frontier_phi_66_pred_5 = _3411;
                }
                _3222 = frontier_phi_66_pred;
                _3220 = frontier_phi_66_pred_1;
                _3218 = frontier_phi_66_pred_2;
                _3216 = frontier_phi_66_pred_3;
                _3214 = frontier_phi_66_pred_4;
                _3212 = frontier_phi_66_pred_5;
                uint _3362 = _3361 + 1u;
                if (_3362 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3355 = _3212;
                    _3356 = _3214;
                    _3357 = _3216;
                    _3358 = _3218;
                    _3359 = _3220;
                    _3360 = _3222;
                    _3361 = _3362;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
            _3219 = _3220;
            _3221 = _3222;
        }
        uvec4 _3225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3226 = _3225.z;
        uint _3228 = (_3226 >> 8u) & 15u;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        if (((4294967295u << _3228) & _3131) == 0u)
        {
            _3323 = _3211;
            _3325 = _3213;
            _3327 = _3215;
            _3329 = _3217;
            _3331 = _3219;
            _3333 = _3221;
        }
        else
        {
            float _3348 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
            float _3349 = _3348 * _2209;
            float _3350 = _3348 * _2210;
            float _3351 = _3348 * _2211;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3228 < ((_3226 >> 12u) & 15u))
            {
                float _3324;
                float _3326;
                float _3328;
                float _3330;
                float _3332;
                float _3334;
                float _3462 = _3211;
                float _3463 = _3213;
                float _3464 = _3215;
                float _3465 = _3217;
                float _3466 = _3219;
                float _3467 = _3221;
                uint _3468 = _3228;
                uint _3477;
                bool _3478;
                for (;;)
                {
                    _3477 = texelFetch(g_lightClassification, int((((_3125 << 5u) + (_3111 << 9u)) + (_3468 << 2u)) >> 2u)).x;
                    _3478 = _3477 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3478)
                    {
                        frontier_phi_72_pred = _3467;
                        frontier_phi_72_pred_1 = _3466;
                        frontier_phi_72_pred_2 = _3465;
                        frontier_phi_72_pred_3 = _3464;
                        frontier_phi_72_pred_4 = _3463;
                        frontier_phi_72_pred_5 = _3462;
                    }
                    else
                    {
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3954;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3958;
                        float _3959;
                        float _3674 = _3462;
                        float _3675 = _3463;
                        float _3676 = _3464;
                        float _3677 = _3465;
                        float _3678 = _3466;
                        float _3679 = _3467;
                        uint _3680 = _3477;
                        uint _3681;
                        vec4 _3706;
                        float _3707;
                        vec4 _3722;
                        vec3 _3734;
                        vec4 _3749;
                        vec4 _3764;
                        float _3810;
                        bool _3811;
                        for (;;)
                        {
                            uint _3691 = ((_3468 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3680));
                            _3681 = (_3680 + 4294967295u) & _3680;
                            uint _3693 = _3691 * 40u;
                            _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            _3707 = _3706.w;
                            uint _3709 = (_3691 * 40u) + 4u;
                            _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            uint _3724 = (_3691 * 40u) + 8u;
                            _3734 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x));
                            uint _3736 = (_3691 * 40u) + 16u;
                            _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3751 = (_3691 * 40u) + 20u;
                            _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3766 = (_3691 * 40u) + 24u;
                            vec4 _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3785 = (_3691 * 40u) + 28u;
                            vec4 _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            _3810 = fma(_2211, _3798.z, fma(_2210, _3798.y, _3798.x * _2209)) + _3798.w;
                            _3811 = !((fma(_2211, _3779.z, fma(_2210, _3779.y, _3779.x * _2209)) + _3779.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3811)
                            {
                                float _3838 = _3706.x - _2209;
                                float _3839 = _3706.y - _2210;
                                float _3840 = _3706.z - _2211;
                                float _3841 = dot(vec3(_3838, _3839, _3840), vec3(_3838, _3839, _3840));
                                float _3844 = inversesqrt(_3841);
                                float _3845 = _3844 * _3838;
                                float _3846 = _3844 * _3839;
                                float _3847 = _3844 * _3840;
                                float _3851 = 1.0 - (_3841 / (_3707 * _3707));
                                float _5047 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3856 = sqrt(_3841) * _3722.w;
                                float _3858 = 1.39999997615814208984375 / (_3856 + 1.39999997615814208984375);
                                float _3859 = _3858 * _3858;
                                float _3862 = ((1.0 - _3859) * dot(vec3(_3845, _3846, _3847), vec3(_1097, _1100, _1103))) + _3859;
                                float _3865 = _3856 * _3856;
                                float _3869 = (fma(_2211, _3749.z, fma(_2210, _3749.y, _3749.x * _2209)) + _3749.w) / _3810;
                                float _3870 = (fma(_2211, _3764.z, fma(_2210, _3764.y, _3764.x * _2209)) + _3764.w) / _3810;
                                float _3874 = 1.0 - dot(vec2(_3869, _3870), vec2(_3869, _3870));
                                float _5063 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3875 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                                float _3876 = _3875 * (((isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0))) * _3852) / ((_3865 * 0.699999988079071044921875) + 1.0));
                                float _3888 = exp2(log2(1.0 / ((_3865 * 3.5) + 5.0)) * 0.25);
                                float _3889 = 1.0 - _1157;
                                float _3896 = sqrt(1.0 - ((1.0 - (_3889 * _3889)) * (1.0 - (_3888 * _3888))));
                                float _3897 = _3896 * _3896;
                                float _3898 = _3897 * _3897;
                                float _3899 = _3845 - _3349;
                                float _3900 = _3846 - _3350;
                                float _3901 = _3847 - _3351;
                                float _3905 = inversesqrt(dot(vec3(_3899, _3900, _3901), vec3(_3899, _3900, _3901)));
                                float _3909 = dot(vec3(_1097, _1100, _1103), vec3((-0.0) - _3349, (-0.0) - _3350, (-0.0) - _3351));
                                float _5074 = isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0));
                                float _3912 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                                float _3913 = dot(vec3(_1097, _1100, _1103), vec3(_3905 * _3899, _3905 * _3900, _3905 * _3901));
                                float _5085 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3916 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                                float _3920 = ((_3916 * _3916) * (_3898 + (-1.0))) + 1.0;
                                float _3921 = _3858 * _3897;
                                float _3922 = _3921 * _3921;
                                float _3928 = ((1.0 - _3922) * dot(vec3(_1097, _1100, _1103), vec3(_3845, _3846, _3847))) + _3922;
                                float _5096 = isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0));
                                float _3929 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                                float _3930 = 1.0 - _3897;
                                float _3940 = (0.5 / (((_3929 * ((_3912 * _3930) + _3897)) + 9.9999999392252902907785028219223e-09) + (((_3929 * _3930) + _3897) * _3912))) * _3929;
                                float _5107 = isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0));
                                float _3950 = (_3875 * _3852) * (((_3898 * 3.1415927410125732421875) * (isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0)))) / ((_3920 * _3920) * ((_3865 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3876 * _3722.y;
                                frontier_phi_78_pred_1 = _3876 * _3722.x;
                                frontier_phi_78_pred_2 = _3950 * _3734.z;
                                frontier_phi_78_pred_3 = _3950 * _3734.y;
                                frontier_phi_78_pred_4 = _3950 * _3734.x;
                                frontier_phi_78_pred_5 = _3876 * _3722.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3958 = frontier_phi_78_pred;
                            _3957 = frontier_phi_78_pred_1;
                            _3956 = frontier_phi_78_pred_2;
                            _3955 = frontier_phi_78_pred_3;
                            _3954 = frontier_phi_78_pred_4;
                            _3959 = frontier_phi_78_pred_5;
                            _3664 = _3957 + _3677;
                            _3665 = _3958 + _3678;
                            _3666 = _3959 + _3679;
                            _3661 = _3954 + _3674;
                            _3662 = _3955 + _3675;
                            _3663 = _3956 + _3676;
                            if (_3681 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3674 = _3661;
                                _3675 = _3662;
                                _3676 = _3663;
                                _3677 = _3664;
                                _3678 = _3665;
                                _3679 = _3666;
                                _3680 = _3681;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3666;
                        frontier_phi_72_pred_1 = _3665;
                        frontier_phi_72_pred_2 = _3664;
                        frontier_phi_72_pred_3 = _3663;
                        frontier_phi_72_pred_4 = _3662;
                        frontier_phi_72_pred_5 = _3661;
                    }
                    _3334 = frontier_phi_72_pred;
                    _3332 = frontier_phi_72_pred_1;
                    _3330 = frontier_phi_72_pred_2;
                    _3328 = frontier_phi_72_pred_3;
                    _3326 = frontier_phi_72_pred_4;
                    _3324 = frontier_phi_72_pred_5;
                    uint _3469 = _3468 + 1u;
                    if (_3469 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3462 = _3324;
                        _3463 = _3326;
                        _3464 = _3328;
                        _3465 = _3330;
                        _3466 = _3332;
                        _3467 = _3334;
                        _3468 = _3469;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3334;
                frontier_phi_60_61_ladder_1 = _3332;
                frontier_phi_60_61_ladder_2 = _3328;
                frontier_phi_60_61_ladder_3 = _3326;
                frontier_phi_60_61_ladder_4 = _3324;
                frontier_phi_60_61_ladder_5 = _3330;
            }
            else
            {
                frontier_phi_60_61_ladder = _3221;
                frontier_phi_60_61_ladder_1 = _3219;
                frontier_phi_60_61_ladder_2 = _3215;
                frontier_phi_60_61_ladder_3 = _3213;
                frontier_phi_60_61_ladder_4 = _3211;
                frontier_phi_60_61_ladder_5 = _3217;
            }
            _3323 = frontier_phi_60_61_ladder_4;
            _3325 = frontier_phi_60_61_ladder_3;
            _3327 = frontier_phi_60_61_ladder_2;
            _3329 = frontier_phi_60_61_ladder_5;
            _3331 = frontier_phi_60_61_ladder_1;
            _3333 = frontier_phi_60_61_ladder;
        }
        float _3338 = isnan(1.0) ? _1141 : (isnan(_1141) ? 1.0 : min(_1141, 1.0));
        _3144 = (_3338 * _3329) + _2675;
        _3146 = (_3338 * _3331) + _2677;
        _3148 = (_3338 * _3333) + _2679;
        _3150 = ((_3323 * 0.039999999105930328369140625) * _3338) + _2998;
        _3152 = ((_3325 * 0.039999999105930328369140625) * _3338) + _3000;
        _3154 = ((_3327 * 0.039999999105930328369140625) * _3338) + _3002;
    }
    else
    {
        _3144 = _2675;
        _3146 = _2677;
        _3148 = _2679;
        _3150 = _2998;
        _3152 = _3000;
        _3154 = _3002;
    }
    float _5123 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _5134 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _5145 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    uint _3174 = _287 + 6u;
    float _3182 = _1078 / cbSceneParam._m0[86u].x;
    float _3183 = _1079 / cbSceneParam._m0[86u].y;
    vec4 _3197 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3182, _3183, (log2((isnan(cbSceneParam._m0[77u].w) ? _1013 : (isnan(_1013) ? cbSceneParam._m0[77u].w : min(_1013, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3199 = _3197.x;
    float _3200 = _3197.y;
    float _3201 = _3197.z;
    float _3202 = _3197.w;
    float _3273;
    float _3275;
    float _3277;
    float _3279;
    if (_1013 > cbSceneParam._m0[78u].w)
    {
        float _3236 = isnan(_1013) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1013 : min(cbSceneParam._m0[80u].w, _1013));
        float _3237 = _3236 / _1013;
        float _3248 = _3237 * _1063;
        float _3249 = _1064 * _3237;
        float _3250 = (-0.0) - _3249;
        float _3251 = _3237 * _1065;
        float _3253 = (cbSceneParam._m0[77u].w * _3250) / _3236;
        float _3254 = _3253 + cbSceneParam._m0[79u].w;
        float _3255 = cbSceneParam._m0[79u].w - _3249;
        float _3261 = sqrt(((_3248 * _3248) + (_3249 * _3249)) + (_3251 * _3251));
        float _3264 = (1.0 - (cbSceneParam._m0[77u].w / _3236)) * _3261;
        float _3269 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3271 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3424;
        if (abs((_3250 - _3253) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3424 = ((((_3254 > 0.0) ? exp2(_3269 * _3254) : (2.0 - exp2(_3271 * _3254))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3264;
        }
        else
        {
            float _3384 = 1.0 / cbSceneParam._m0[80u].x;
            float _3385 = isnan(_3255) ? _3254 : (isnan(_3254) ? _3255 : max(_3254, _3255));
            float _3386 = isnan(_3255) ? _3254 : (isnan(_3254) ? _3255 : min(_3254, _3255));
            float _3395 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : min(_3385, 0.0));
            float _3396 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : min(_3386, 0.0));
            _3424 = ((abs(_3261 / _3250) * cbSceneParam._m0[80u].y) * ((((_3395 - _3396) * 2.0) - ((exp2(_3269 * (isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0)))) - exp2(_3269 * (isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))))) * _3384)) - ((exp2(_3271 * _3395) - exp2(_3271 * _3396)) * _3384))) + (_3264 * cbSceneParam._m0[80u].z);
        }
        vec4 _3426 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3182, _3183, 1.0), 0.0);
        float _3435 = exp2((_3424 * (-1.44269502162933349609375)) * (1.0 - _3426.w));
        float _3436 = log2(_3435);
        float _3452 = log2(_3202);
        _3273 = (exp2(_3452 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].x)) * _3426.x) / cbSceneParam._m0[78u].x)) + _3199;
        _3275 = (exp2(_3452 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].y)) * _3426.y) / cbSceneParam._m0[78u].y)) + _3200;
        _3277 = (exp2(_3452 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].z)) * _3426.z) / cbSceneParam._m0[78u].z)) + _3201;
        _3279 = _3435 * _3202;
    }
    else
    {
        _3273 = _3199;
        _3275 = _3200;
        _3277 = _3201;
        _3279 = _3202;
    }
    float _3291 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3292 = _3291 == 3.0;
    float _3293 = log2(_3279);
    float _3300 = exp2(_3293 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0))) * (_3144 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1141))) + ((_3150 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1945)) * cbPerFrame._m0[3u].x));
    float _3301 = exp2(_3293 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0))) * (_3146 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1141))) + ((_3152 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1945)) * cbPerFrame._m0[3u].x));
    float _3302 = exp2(_3293 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0))) * (_3148 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1141))) + ((_3154 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1945)) * cbPerFrame._m0[3u].x));
    float _3311 = (_3291 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3311 * (_3292 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3273)));
    SV_Target.y = _3311 * (_3292 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3275)));
    SV_Target.z = _3311 * (_3292 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3277)));
    SV_Target.w = cbInstanceData._m0[_3174].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3174].w;
}


