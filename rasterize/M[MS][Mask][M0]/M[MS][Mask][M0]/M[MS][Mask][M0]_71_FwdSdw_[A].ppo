#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1280;
float _3922;
float _3923;
float _3924;
float _3925;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _330.x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].z) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3934 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _406 = (_399 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _407 = (_399 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _408 = (_399 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _330.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].z) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3945 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _527 = ((_499.x - _518) * _399) + _518;
    float _528 = ((_499.y - _519) * _399) + _519;
    float _529 = ((_499.z - _520) * _399) + _520;
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _554 = ((_541.z - _529) * _472) + _529;
    float _557 = ((((_541.x - _527) * _472) + _527) * 2.0) + (-1.0);
    float _559 = ((((_541.y - _528) * _472) + _528) * 2.0) + (-1.0);
    float _560 = dot(vec2(_557, _559), vec2(_557, _559));
    float _3956 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _591 = (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _557;
    float _592 = (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _559;
    float _595 = fma(_565, _230, fma(_592, _237, _591 * _223));
    float _598 = fma(_565, _231, fma(_592, _238, _591 * _224));
    float _601 = fma(_565, _232, fma(_592, _239, _591 * _225));
    float _605 = inversesqrt(dot(vec3(_595, _598, _601), vec3(_595, _598, _601)));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _634 = _632.x;
    float _635 = 1.0 - _634;
    float _641 = (cbMtdParam._m0[19u].x + dot(vec4(_605 * _595, _605 * _598, _605 * _601, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_634 - _635) * cbMtdParam._m0[24u].w) + _635) * cbMtdParam._m0[21u].z);
    float _3967 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _649 = (_642 * (cbMtdParam._m0[17u].x - _479)) + _479;
    float _650 = (_642 * (cbMtdParam._m0[17u].y - _480)) + _480;
    float _651 = (_642 * (cbMtdParam._m0[17u].z - _481)) + _481;
    float _655 = (cbMtdParam._m0[19u].w * (_579.z - _554)) + _554;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _675 = (_668.x * 2.0) + (-1.0);
    float _676 = (_668.y * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _3978 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _685 = ((_668.z - _655) * _642) + _655;
    float _695 = ((sqrt(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) - _565) * _642) + _565;
    float _698 = (((_675 - _591) * _642) + _591) + (cbMtdParam._m0[21u].x * _591);
    float _699 = (((_676 - _592) * _642) + _592) + (cbMtdParam._m0[21u].x * _592);
    float _703 = cbMtdParam._m0[22u].x + _579.w;
    float _706 = fma(_695, _230, fma(_699, _237, _698 * _223));
    float _709 = fma(_695, _231, fma(_699, _238, _698 * _224));
    float _712 = fma(_695, _232, fma(_699, _239, _698 * _225));
    float _716 = inversesqrt(dot(vec3(_706, _709, _712), vec3(_706, _709, _712)));
    float _717 = _716 * _706;
    float _718 = _716 * _709;
    float _719 = _716 * _712;
    float _3989 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _720 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4011 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4022 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4033 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _738 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _790 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _780);
    float _791 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _780);
    float _792 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _780);
    float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
    float _797 = _790 * _796;
    float _798 = _791 * _796;
    float _799 = _792 * _796;
    vec4 _804 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _806 = _804.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _960 = sqrt(((_790 * _790) + (_791 * _791)) + (_792 * _792));
        float _966 = (cbMatDynParam._m0[5u].x * _960) + cbMatDynParam._m0[5u].y;
        float _4044 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _971 = (cbMatDynParam._m0[5u].z * _960) + cbMatDynParam._m0[5u].w;
        float _4055 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) - _967)) + _967) < ((_806 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _817 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _818 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _836 = fma(_719, cbSceneParam._m0[5u].z, fma(_718, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _717));
    float _839 = fma(_719, cbSceneParam._m0[6u].z, fma(_718, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _717));
    float _842 = fma(_719, cbSceneParam._m0[7u].z, fma(_718, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _717));
    uint _855 = _242 + 9u;
    uint _856 = _855 + uint(cbMatDynParam._m0[0u].w);
    float _862 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_856].x;
    float _863 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_856].y;
    float _864 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_856].z;
    float _4066 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    vec4 _876 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _817, cbSceneParam._m0[86u].y * _818));
    float _880 = ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * TEXCOORD_5.w) * _876.x;
    float _881 = dot(vec3(_717, _718, _719), vec3(_797, _798, _799));
    float _884 = _881 * 2.0;
    float _888 = (_884 * _717) - _797;
    float _889 = (_884 * _718) - _798;
    float _890 = (_884 * _719) - _799;
    float _894 = abs(dot(vec3(_797, _798, _799), vec3(_717, _718, _719)));
    float _4099 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _896 = sqrt(_720);
    float _909 = exp2((_896 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_896 * 3.0));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1279;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1004 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _1008 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _1012 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1037 = _941 + _717;
        float _1038 = _945 + _718;
        float _1039 = _949 + _719;
        float _1049 = fma(_1039, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037)) - _1004;
        float _1050 = fma(_1039, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037)) - _1008;
        float _1051 = fma(_1039, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037)) - _1012;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1004 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1008 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[34u].z) + ((((((_1012 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1107 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1073.x + (-0.5));
        float _1109 = _1107 * (_1073.y + (-0.5));
        float _1110 = _1107 * (_1073.z + (-0.5));
        float _1117 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1080.x + (-0.5));
        float _1119 = _1117 * (_1080.y + (-0.5));
        float _1120 = _1117 * (_1080.z + (-0.5));
        float _1127 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1087.x + (-0.5));
        float _1129 = _1127 * (_1087.y + (-0.5));
        float _1130 = _1127 * (_1087.z + (-0.5));
        float _1137 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1094.x + (-0.5));
        float _1139 = _1137 * (_1094.y + (-0.5));
        float _1140 = _1137 * (_1094.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1161 = (dot(vec3(_717, _718, _719), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1171 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4147 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1173 + 1.0))) + _1178) * _1141;
        float _1188 = _1109 * 0.5;
        float _1189 = _1119 * 0.5;
        float _1190 = _1129 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_717, _718, _719), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _4180 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1215 + 1.0))) + _1220) * _1142;
        float _1230 = _1110 * 0.5;
        float _1231 = _1120 * 0.5;
        float _1232 = _1130 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_717, _718, _719), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4213 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1257 + 1.0))) + _1262) * _1143;
        _1279 = _1110;
        _1281 = _1109;
        _1282 = _1108;
        _1283 = _1120;
        _1284 = _1119;
        _1285 = _1118;
        _1286 = _1130;
        _1287 = _1129;
        _1288 = _1128;
        _1289 = _1143;
        _1290 = _1142;
        _1291 = _1141;
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _1280;
        _1281 = _1280;
        _1282 = _1280;
        _1283 = _1280;
        _1284 = _1280;
        _1285 = _1280;
        _1286 = _1280;
        _1287 = _1280;
        _1288 = _1280;
        _1289 = _1280;
        _1290 = _1280;
        _1291 = _1280;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1321 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1325 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1329 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1352 = _941 + _717;
        float _1353 = _945 + _718;
        float _1354 = _949 + _719;
        float _1364 = fma(_1354, cbModelParam._m0[30u].z, fma(_1353, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1352)) - _1321;
        float _1365 = fma(_1354, cbModelParam._m0[31u].z, fma(_1353, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1352)) - _1325;
        float _1366 = fma(_1354, cbModelParam._m0[32u].z, fma(_1353, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1352)) - _1329;
        float _1370 = inversesqrt(dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366)));
        float _1383 = ((_1370 * _1364) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1321 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1370 * _1365) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1325 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1370 * _1366) / cbModelParam._m0[35u].z) + ((((((_1329 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        float _1420 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1387.x + (-0.5));
        float _1422 = _1420 * (_1387.y + (-0.5));
        float _1423 = _1420 * (_1387.z + (-0.5));
        float _1430 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1394.x + (-0.5));
        float _1432 = _1430 * (_1394.y + (-0.5));
        float _1433 = _1430 * (_1394.z + (-0.5));
        float _1440 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1401.x + (-0.5));
        float _1442 = _1440 * (_1401.y + (-0.5));
        float _1443 = _1440 * (_1401.z + (-0.5));
        float _1450 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1408.x + (-0.5));
        float _1452 = _1450 * (_1408.y + (-0.5));
        float _1453 = _1450 * (_1408.z + (-0.5));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = _1421 * 0.5;
        float _1458 = _1431 * 0.5;
        float _1459 = _1441 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_717, _718, _719), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4276 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1484 + 1.0))) + _1489) * _1454;
        float _1499 = _1422 * 0.5;
        float _1500 = _1432 * 0.5;
        float _1501 = _1442 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_717, _718, _719), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4309 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1526 + 1.0))) + _1531) * _1455;
        float _1541 = _1423 * 0.5;
        float _1542 = _1433 * 0.5;
        float _1543 = _1443 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_717, _718, _719), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4342 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1568 + 1.0))) + _1573) * _1456;
        _1590 = _1423;
        _1591 = _1422;
        _1592 = _1421;
        _1593 = _1433;
        _1594 = _1432;
        _1595 = _1431;
        _1596 = _1443;
        _1597 = _1442;
        _1598 = _1441;
        _1599 = _1456;
        _1600 = _1455;
        _1601 = _1454;
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
    }
    else
    {
        _1590 = _1280;
        _1591 = _1280;
        _1592 = _1280;
        _1593 = _1280;
        _1594 = _1280;
        _1595 = _1280;
        _1596 = _1280;
        _1597 = _1280;
        _1598 = _1280;
        _1599 = _1280;
        _1600 = _1280;
        _1601 = _1280;
        _1602 = 0.0;
        _1603 = 0.0;
        _1604 = 0.0;
    }
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1292)) + _1292;
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1293)) + _1293;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1294)) + _1294;
    float _1637 = fma(_1616, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1614 * cbSceneParam._m0[89u].x));
    float _1640 = fma(_1616, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1614 * cbSceneParam._m0[90u].x));
    float _1643 = fma(_1616, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1614));
    float _1658 = _888 * 0.5;
    float _1659 = _889 * 0.5;
    float _1660 = _890 * 0.5;
    float _1661 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1664 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1667 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1701;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1674 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1279, _1283, _1286, _1289));
        float _1678 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1682 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1689 = dot(vec4(cbModelParam._m0[39u]), vec4(_1658, _1659, _1660, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1689) ? 0.0 : (isnan(0.0) ? _1689 : max(0.0, _1689))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1712;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1703 = dot(vec4(cbModelParam._m0[40u]), vec4(_1658, _1659, _1660, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1703) ? 0.0 : (isnan(0.0) ? _1703 : max(0.0, _1703))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1716 = (_1712 * cbModelParam._m0[1u].x) + (_1701 * (1.0 - cbModelParam._m0[1u].x));
    float _1726 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _720);
    float _1727 = isnan(_1726) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1726 : min(cbModelParam._m0[25u].z, _1726));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1775 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1779 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1783 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1786 = fma(_890, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888));
        float _1789 = fma(_890, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888));
        float _1792 = fma(_890, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888));
        float _1820;
        if (_1786 > 0.0)
        {
            _1820 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1820 = frontier_phi_17_15_ladder;
        }
        float _1990;
        if (_1789 > 0.0)
        {
            _1990 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1990 = frontier_phi_26_22_ladder;
        }
        float _2285;
        if (_1792 > 0.0)
        {
            _2285 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2285 = frontier_phi_38_33_ladder;
        }
        float _2287 = isnan(_1990) ? _1820 : (isnan(_1820) ? _1990 : min(_1820, _1990));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1786) + _1775;
        float _2293 = (_2288 * _1789) + _1779;
        float _2294 = (_2288 * _1792) + _1783;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2295;
        float _2299 = _2295 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 > _2299) || ((_2293 < _2297) || ((_2292 < _2297) || (_2292 > _2299))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2294, cbModelParam._m0[9u].z, fma(_2293, cbModelParam._m0[9u].y, _2292 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2294, cbModelParam._m0[10u].z, fma(_2293, cbModelParam._m0[10u].y, _2292 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2294, cbModelParam._m0[11u].z, fma(_2293, cbModelParam._m0[11u].y, _2292 * cbModelParam._m0[11u].x))), _1727);
            frontier_phi_16_38_ladder = _2439.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2439.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2439.x * cbModelParam._m0[1u].y;
        }
        _1808 = frontier_phi_16_38_ladder_2;
        _1810 = frontier_phi_16_38_ladder_1;
        _1812 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_888, _889, _890), _1727);
        _1808 = _1796.x * cbModelParam._m0[1u].y;
        _1810 = _1796.y * cbModelParam._m0[1u].y;
        _1812 = _1796.z * cbModelParam._m0[1u].y;
    }
    float _1816 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _720);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1816 : min(cbModelParam._m0[25u].w, _1816));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1871 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1875 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1879 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1882 = fma(_890, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888));
        float _1885 = fma(_890, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888));
        float _1888 = fma(_890, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888));
        float _1995;
        if (_1882 > 0.0)
        {
            _1995 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1995 = frontier_phi_28_24_ladder;
        }
        float _2312;
        if (_1885 > 0.0)
        {
            _2312 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2312 = frontier_phi_40_35_ladder;
        }
        float _2639;
        if (_1888 > 0.0)
        {
            _2639 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2639 = frontier_phi_50_47_ladder;
        }
        float _2641 = isnan(_2312) ? _1995 : (isnan(_1995) ? _2312 : min(_1995, _2312));
        float _2642 = isnan(_2639) ? _2641 : (isnan(_2641) ? _2639 : min(_2641, _2639));
        float _2646 = (_2642 * _1882) + _1871;
        float _2647 = (_2642 * _1885) + _1875;
        float _2648 = (_2642 * _1888) + _1879;
        float _2649 = _2642 * 9.9999997473787516355514526367188e-05;
        float _2650 = (-1.0) - _2649;
        float _2652 = _2649 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2648 > _2652) || ((_2648 < _2650) || ((_2647 > _2652) || ((_2647 < _2650) || ((_2646 < _2650) || (_2646 > _2652))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2648, cbModelParam._m0[17u].z, fma(_2647, cbModelParam._m0[17u].y, _2646 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2648, cbModelParam._m0[18u].z, fma(_2647, cbModelParam._m0[18u].y, _2646 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2648, cbModelParam._m0[19u].z, fma(_2647, cbModelParam._m0[19u].y, _2646 * cbModelParam._m0[19u].x))), _1817);
            frontier_phi_25_50_ladder = _2766.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2766.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2766.x * cbModelParam._m0[1u].z;
        }
        _1907 = frontier_phi_25_50_ladder_2;
        _1909 = frontier_phi_25_50_ladder_1;
        _1911 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_888, _889, _890), _1817);
        _1907 = _1891.x * cbModelParam._m0[1u].z;
        _1909 = _1891.y * cbModelParam._m0[1u].z;
        _1911 = _1891.z * cbModelParam._m0[1u].z;
    }
    float _1923 = ((((1.0 - _909) * ((_896 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_909 * _896)) * _880;
    float _1924 = _1923 * ((cbModelParam._m0[1u].w * (_1907 - _1808)) + _1808);
    float _1925 = _1923 * ((cbModelParam._m0[1u].w * (_1909 - _1810)) + _1810);
    float _1926 = _1923 * ((cbModelParam._m0[1u].w * (_1911 - _1812)) + _1812);
    float _1929 = fma(_1926, cbSceneParam._m0[89u].z, fma(_1925, cbSceneParam._m0[89u].y, _1924 * cbSceneParam._m0[89u].x));
    float _1932 = fma(_1926, cbSceneParam._m0[90u].z, fma(_1925, cbSceneParam._m0[90u].y, _1924 * cbSceneParam._m0[90u].x));
    float _1935 = fma(_1926, cbSceneParam._m0[91u].z, fma(_1925, cbSceneParam._m0[91u].y, _1924 * cbSceneParam._m0[91u].x));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1982 = _1969 / _1981;
    float _1983 = _1973 / _1981;
    float _1984 = _1977 / _1981;
    float _2131;
    float _2132;
    float _2133;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2011 = ((uint(_1984 > cbSceneParam._m0[59u].y) + uint(_1984 > cbSceneParam._m0[59u].x)) + uint(_1984 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2012 = _2011 + 43u;
        uint _2020 = _2011 + 44u;
        uint _2028 = _2011 + 45u;
        uint _2036 = _2011 + 46u;
        float _2047 = fma(_1981, cbSceneParam._m0[_2012].w, fma(_1977, cbSceneParam._m0[_2012].z, fma(_1973, cbSceneParam._m0[_2012].y, _1969 * cbSceneParam._m0[_2012].x)));
        float _2051 = fma(_1981, cbSceneParam._m0[_2020].w, fma(_1977, cbSceneParam._m0[_2020].z, fma(_1973, cbSceneParam._m0[_2020].y, _1969 * cbSceneParam._m0[_2020].x)));
        float _2059 = fma(_1981, cbSceneParam._m0[_2036].w, fma(_1977, cbSceneParam._m0[_2036].z, fma(_1973, cbSceneParam._m0[_2036].y, _1969 * cbSceneParam._m0[_2036].x)));
        float _2064 = cbSceneParam._m0[33u].z * _2059;
        float _2066 = cbSceneParam._m0[33u].w * _2059;
        float _2069 = fma(_1981, cbSceneParam._m0[_2028].w, fma(_1977, cbSceneParam._m0[_2028].z, fma(_1973, cbSceneParam._m0[_2028].y, _1969 * cbSceneParam._m0[_2028].x))) / _2059;
        float _2117 = (cbSceneParam._m0[33u].x - sqrt(((_1983 * _1983) + (_1982 * _1982)) + (_1984 * _1984))) * cbSceneParam._m0[33u].y;
        float _4468 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2124 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 + _2047) / _2059, (_2066 + _2051) / _2059), _2069), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2066 + _2047) / _2059, (_2051 - _2064) / _2059), _2069), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 - _2064) / _2059, (_2051 - _2066) / _2059), _2069), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 - _2066) / _2059, (_2064 + _2051) / _2059), _2069), 0.0)).x), vec4(0.25)));
        _2131 = 1.0 - (_2124 * cbSceneParam._m0[34u].x);
        _2132 = 1.0 - (_2124 * cbSceneParam._m0[34u].y);
        _2133 = 1.0 - (_2124 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2131 = 1.0;
        _2132 = 1.0;
        _2133 = 1.0;
    }
    float _2197;
    float _2199;
    float _2201;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2185 = fma(_1981, cbSceneParam._m0[63u].w, fma(_1977, cbSceneParam._m0[63u].z, fma(_1973, cbSceneParam._m0[63u].y, _1969 * cbSceneParam._m0[63u].x)));
        float _2186 = fma(_1981, cbSceneParam._m0[60u].w, fma(_1977, cbSceneParam._m0[60u].z, fma(_1973, cbSceneParam._m0[60u].y, _1969 * cbSceneParam._m0[60u].x))) / _2185;
        float _2187 = fma(_1981, cbSceneParam._m0[61u].w, fma(_1977, cbSceneParam._m0[61u].z, fma(_1973, cbSceneParam._m0[61u].y, _1969 * cbSceneParam._m0[61u].x))) / _2185;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2186 >= cbSceneParam._m0[64u].x) && (_2187 >= cbSceneParam._m0[64u].y)) && (_2186 <= cbSceneParam._m0[64u].z)) && (_2187 <= cbSceneParam._m0[64u].w))
        {
            float _2325 = fma(_1981, cbSceneParam._m0[62u].w, fma(_1977, cbSceneParam._m0[62u].z, fma(_1973, cbSceneParam._m0[62u].y, _1969 * cbSceneParam._m0[62u].x))) / _2185;
            float _2329 = isnan(cbSceneParam._m0[41u].w) ? _2325 : (isnan(_2325) ? cbSceneParam._m0[41u].w : max(_2325, cbSceneParam._m0[41u].w));
            float _2372 = (cbSceneParam._m0[33u].x - sqrt(((_1983 * _1983) + (_1982 * _1982)) + (_1984 * _1984))) * cbSceneParam._m0[33u].y;
            float _4484 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
            float _2379 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2186, cbSceneParam._m0[33u].w + _2187), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2186, _2187 - cbSceneParam._m0[33u].z), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2186 - cbSceneParam._m0[33u].z, _2187 - cbSceneParam._m0[33u].w), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2186 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2187), _2329), 0.0)).x), vec4(0.25)));
            float _2383 = 1.0 - (_2379 * cbSceneParam._m0[34u].x);
            float _2384 = 1.0 - (_2379 * cbSceneParam._m0[34u].y);
            float _2385 = 1.0 - (_2379 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2385) ? _2133 : (isnan(_2133) ? _2385 : min(_2133, _2385));
            frontier_phi_37_36_ladder_1 = isnan(_2384) ? _2132 : (isnan(_2132) ? _2384 : min(_2132, _2384));
            frontier_phi_37_36_ladder_2 = isnan(_2383) ? _2131 : (isnan(_2131) ? _2383 : min(_2131, _2383));
        }
        else
        {
            frontier_phi_37_36_ladder = _2133;
            frontier_phi_37_36_ladder_1 = _2132;
            frontier_phi_37_36_ladder_2 = _2131;
        }
        _2197 = frontier_phi_37_36_ladder_2;
        _2199 = frontier_phi_37_36_ladder_1;
        _2201 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2197 = _2131;
        _2199 = _2132;
        _2201 = _2133;
    }
    uvec4 _2206 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2208 = _2206.x * 14u;
    uint _2209 = _2208 + 13u;
    float _2216 = _880 + (-1.0);
    float _2221 = (cbLight._m0[_2209].x * _2216) + 1.0;
    float _2222 = (cbLight._m0[_2209].y * _2216) + 1.0;
    float _2223 = (cbLight._m0[_2209].z * _2216) + 1.0;
    float _2224 = (cbLight._m0[_2209].w * _2216) + 1.0;
    uint _2225 = _2208 + 5u;
    float _2231 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
    uint _2235 = _2208 + 4u;
    float _2244 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
    uint _2248 = _2208 | 1u;
    float _2259 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_717, _718, _719));
    float _2262 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_717, _718, _719));
    float _4520 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _4531 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2267 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * 0.3183098733425140380859375;
    float _2269 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * 0.3183098733425140380859375;
    float _2276 = ((cbLight._m0[_2225].x * _2231) * _2269) + (((cbLight._m0[_2235].x * _2197) * _2244) * _2267);
    float _2277 = ((_2231 * cbLight._m0[_2225].y) * _2269) + (((cbLight._m0[_2235].y * _2199) * _2244) * _2267);
    float _2278 = ((_2231 * cbLight._m0[_2225].z) * _2269) + (((cbLight._m0[_2235].z * _2201) * _2244) * _2267);
    uvec4 _2282 = floatBitsToUint(cbLight._m0[_2208 + 12u]);
    bool _2284 = _2282.x == 0u;
    float _2386;
    float _2388;
    float _2390;
    if (_2284)
    {
        _2386 = _2276;
        _2388 = _2277;
        _2390 = _2278;
    }
    else
    {
        uint _2394 = _2208 + 6u;
        float _2410 = (dot(vec3(cbLight._m0[_2208 + 2u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2411 = _2410 * _2410;
        float _4542 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2412 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2413 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2386 = (((cbLight._m0[_2394].x * 0.3183098733425140380859375) * _2412) * _2413) + _2276;
        _2388 = (((cbLight._m0[_2394].y * 0.3183098733425140380859375) * _2412) * _2413) + _2277;
        _2390 = (((cbLight._m0[_2394].z * 0.3183098733425140380859375) * _2412) * _2413) + _2278;
    }
    bool _2393 = _2282.y == 0u;
    float _2448;
    float _2450;
    float _2452;
    if (_2393)
    {
        _2448 = _2386;
        _2450 = _2388;
        _2452 = _2390;
    }
    else
    {
        uint _2610 = _2208 + 7u;
        float _2626 = (dot(vec3(cbLight._m0[_2208 + 3u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2627 = _2626 * _2626;
        float _4558 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2628 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2629 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2448 = (((cbLight._m0[_2610].x * 0.3183098733425140380859375) * _2628) * _2629) + _2386;
        _2450 = (((cbLight._m0[_2610].y * 0.3183098733425140380859375) * _2628) * _2629) + _2388;
        _2452 = (((cbLight._m0[_2610].z * 0.3183098733425140380859375) * _2628) * _2629) + _2390;
    }
    uint _2455 = _2208 + 8u;
    float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _720) * 0.949999988079071044921875);
    float _2469 = _2468 * _2468;
    float _2470 = cbLight._m0[_2208].x + _797;
    float _2471 = cbLight._m0[_2208].y + _798;
    float _2472 = cbLight._m0[_2208].z + _799;
    float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
    float _2477 = _2476 * _2470;
    float _2478 = _2476 * _2471;
    float _2479 = _2476 * _2472;
    float _2480 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2208].xyz));
    float _4574 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _4585 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _2484 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2485 = dot(vec3(_717, _718, _719), vec3(_2477, _2478, _2479));
    float _4596 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2489 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2477, _2478, _2479));
    float _4607 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2493 = _2469 * _2469;
    float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
    float _2508 = (exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2509 = 1.0 - _2469;
    float _2520 = (0.5 / (((_2484 * ((_2483 * _2509) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2509) + _2469) * _2483))) * _2483;
    float _4618 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2522 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
    uint _2536 = _2208 + 9u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _720) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2248].x + _797;
    float _2550 = cbLight._m0[_2248].y + _798;
    float _2551 = cbLight._m0[_2248].z + _799;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2248].xyz));
    float _4629 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2563 = dot(vec3(_717, _718, _719), vec3(_2556, _2557, _2558));
    float _4640 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2556, _2557, _2558));
    float _4651 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2548 * _2548;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2584 = (exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2585 = 1.0 - _2548;
    float _2595 = (0.5 / (((_2484 * ((_2562 * _2585) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2585) + _2548) * _2562))) * _2562;
    float _4662 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2597 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    float _2607 = (((_2584 * cbLight._m0[_2536].x) * _2597) * _2231) + ((((cbLight._m0[_2455].x * _2197) * _2508) * _2522) * _2244);
    float _2608 = (((_2584 * cbLight._m0[_2536].y) * _2597) * _2231) + ((((cbLight._m0[_2455].y * _2199) * _2508) * _2522) * _2244);
    float _2609 = (((_2584 * cbLight._m0[_2536].z) * _2597) * _2231) + ((((cbLight._m0[_2455].z * _2201) * _2508) * _2522) * _2244);
    float _2665;
    float _2667;
    float _2669;
    if (_2284)
    {
        _2665 = _2607;
        _2667 = _2608;
        _2669 = _2609;
    }
    else
    {
        uint _2671 = _2208 + 2u;
        uint _2675 = _2208 + 10u;
        float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2671].w)) * _720) * 0.949999988079071044921875);
        float _2690 = _2689 * _2689;
        float _2691 = cbLight._m0[_2671].x + _797;
        float _2692 = cbLight._m0[_2671].y + _798;
        float _2693 = cbLight._m0[_2671].z + _799;
        float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
        float _2698 = _2697 * _2691;
        float _2699 = _2697 * _2692;
        float _2700 = _2697 * _2693;
        float _2701 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2671].xyz));
        float _4673 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2705 = dot(vec3(_717, _718, _719), vec3(_2698, _2699, _2700));
        float _4684 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2709 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_2698, _2699, _2700));
        float _4695 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2713 = _2690 * _2690;
        float _2717 = ((_2708 * _2708) * (_2713 + (-1.0))) + 1.0;
        float _2726 = (exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2727 = 1.0 - _2690;
        float _2737 = (0.5 / (((_2484 * ((_2704 * _2727) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2727) + _2690) * _2704))) * _2704;
        float _4706 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2739 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2713 / ((_2717 * _2717) * 3.141590118408203125));
        float _2740 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2665 = (((_2726 * cbLight._m0[_2675].x) * _2739) * _2740) + _2607;
        _2667 = (((_2726 * cbLight._m0[_2675].y) * _2739) * _2740) + _2608;
        _2669 = (((_2726 * cbLight._m0[_2675].z) * _2739) * _2740) + _2609;
    }
    float _2771;
    float _2773;
    float _2775;
    if (_2393)
    {
        _2771 = _2665;
        _2773 = _2667;
        _2775 = _2669;
    }
    else
    {
        uint _2782 = _2208 + 3u;
        uint _2786 = _2208 + 11u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _720) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _797;
        float _2803 = cbLight._m0[_2782].y + _798;
        float _2804 = cbLight._m0[_2782].z + _799;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2782].xyz));
        float _4722 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2816 = dot(vec3(_717, _718, _719), vec3(_2809, _2810, _2811));
        float _4733 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4744 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2837 = (exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2838 = 1.0 - _2801;
        float _2848 = (0.5 / (((_2484 * ((_2815 * _2838) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2838) + _2801) * _2815))) * _2815;
        float _4755 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2850 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2851 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2771 = (((_2837 * cbLight._m0[_2786].x) * _2850) * _2851) + _2665;
        _2773 = (((_2837 * cbLight._m0[_2786].y) * _2850) * _2851) + _2667;
        _2775 = (((_2837 * cbLight._m0[_2786].z) * _2850) * _2851) + _2669;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2206.y == 0u)
    {
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.x;
        uint _2884 = uint((float(_2872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _818) / _2873))) + floor(float(uint(cbSceneParam._m0[85u].x * _817) / _2873)));
        float _2894 = (log2(_1984 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        uint _2898 = uint(isnan(14.0) ? _2895 : (isnan(_2895) ? 14.0 : min(_2895, 14.0)));
        uvec4 _2903 = texelFetch(g_lightClusterGridBuffer, int(((_2898 << 2u) + (_2884 << 6u)) >> 2u));
        uint _2904 = _2903.x;
        uint _2905 = _2872.z;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((((1u << ((_2905 >> 4u) & 15u)) + 4294967295u) & _2904) == 0u) || ((_2905 & 240u) == 0u))
        {
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
        }
        else
        {
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            uint _3143 = 0u;
            uint _3152;
            bool _3153;
            for (;;)
            {
                _3152 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3143 << 2u)) >> 2u)).x;
                _3153 = _3152 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3153)
                {
                    frontier_phi_71_pred = _3142;
                    frontier_phi_71_pred_1 = _3141;
                    frontier_phi_71_pred_2 = _3140;
                    frontier_phi_71_pred_3 = _3139;
                    frontier_phi_71_pred_4 = _3138;
                    frontier_phi_71_pred_5 = _3137;
                }
                else
                {
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    uint _3288;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3152;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    for (;;)
                    {
                        uint _3292 = uint(findLSB(_3288)) + (_3143 << 5u);
                        uint _3289 = (_3288 + 4294967295u) & _3288;
                        uint _3294 = _3292 * 48u;
                        vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3314 = (_3292 * 48u) + 4u;
                        vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 3u)).x));
                        uint _3333 = (_3292 * 48u) + 8u;
                        vec3 _3344 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x));
                        float _3348 = _3308.x - _1982;
                        float _3349 = _3308.y - _1983;
                        float _3350 = _3308.z - _1984;
                        float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                        float _3354 = inversesqrt(_3351);
                        float _3355 = _3354 * _3348;
                        float _3356 = _3354 * _3349;
                        float _3357 = _3354 * _3350;
                        float _3358 = dot(vec3(_836, _839, _842), vec3(_3355, _3356, _3357));
                        float _3363 = 1.0 - (_3351 * _3308.w);
                        float _4781 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3364 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3365 = sqrt(_3351) * _3327.w;
                        float _3368 = 1.39999997615814208984375 / (_3365 + 1.39999997615814208984375);
                        float _3369 = _3368 * _3368;
                        float _3372 = ((1.0 - _3369) * _3358) + _3369;
                        float _3375 = _3365 * _3365;
                        float _3379 = ((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3364) / ((_3375 * 0.699999988079071044921875) + 1.0);
                        float _3383 = (-0.0) - _1982;
                        float _3384 = (-0.0) - _1983;
                        float _3385 = (-0.0) - _1984;
                        float _3389 = inversesqrt(dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385)));
                        float _3390 = _3389 * _3383;
                        float _3391 = _3389 * _3384;
                        float _3392 = _3389 * _3385;
                        float _3399 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                        float _3400 = 1.0 - _896;
                        float _3407 = sqrt(1.0 - ((1.0 - (_3400 * _3400)) * (1.0 - (_3399 * _3399))));
                        float _3408 = _3407 * _3407;
                        float _3409 = _3408 * _3408;
                        float _3410 = _3390 + _3355;
                        float _3411 = _3391 + _3356;
                        float _3412 = _3392 + _3357;
                        float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                        float _3420 = dot(vec3(_836, _839, _842), vec3(_3390, _3391, _3392));
                        float _4797 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3423 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3424 = dot(vec3(_836, _839, _842), vec3(_3416 * _3410, _3416 * _3411, _3416 * _3412));
                        float _4808 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3427 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3431 = ((_3427 * _3427) * (_3409 + (-1.0))) + 1.0;
                        float _3432 = _3368 * _3408;
                        float _3433 = _3432 * _3432;
                        float _3436 = ((1.0 - _3433) * _3358) + _3433;
                        float _4819 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3437 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3438 = 1.0 - _3408;
                        float _3448 = (0.5 / (((_3437 * ((_3423 * _3438) + _3408)) + 9.9999999392252902907785028219223e-09) + (((_3437 * _3438) + _3408) * _3423))) * _3437;
                        float _4830 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3459 = (((_3409 * 3.1415927410125732421875) * (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) / ((_3431 * _3431) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125))) * _3364;
                        _3212 = (_3379 * _3327.x) + _3285;
                        _3213 = (_3379 * _3327.y) + _3286;
                        _3214 = (_3379 * _3327.z) + _3287;
                        _3209 = (_3459 * _3344.x) + _3282;
                        _3210 = (_3459 * _3344.y) + _3283;
                        _3211 = (_3459 * _3344.z) + _3284;
                        if (_3289 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3289;
                        }
                    }
                    frontier_phi_71_pred = _3214;
                    frontier_phi_71_pred_1 = _3213;
                    frontier_phi_71_pred_2 = _3212;
                    frontier_phi_71_pred_3 = _3211;
                    frontier_phi_71_pred_4 = _3210;
                    frontier_phi_71_pred_5 = _3209;
                }
                _2995 = frontier_phi_71_pred;
                _2993 = frontier_phi_71_pred_1;
                _2991 = frontier_phi_71_pred_2;
                _2989 = frontier_phi_71_pred_3;
                _2987 = frontier_phi_71_pred_4;
                _2985 = frontier_phi_71_pred_5;
                uint _3144 = _3143 + 1u;
                if (_3144 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3137 = _2985;
                    _3138 = _2987;
                    _3139 = _2989;
                    _3140 = _2991;
                    _3141 = _2993;
                    _3142 = _2995;
                    _3143 = _3144;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
        }
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.z;
        uint _3001 = (_2999 >> 8u) & 15u;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        if (((4294967295u << _3001) & _2904) == 0u)
        {
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
            _3111 = _2990;
            _3113 = _2992;
            _3115 = _2994;
        }
        else
        {
            float _3130 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
            float _3131 = _3130 * _1982;
            float _3132 = _3130 * _1983;
            float _3133 = _3130 * _1984;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3001 < ((_2999 >> 12u) & 15u))
            {
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3265 = _2984;
                float _3266 = _2986;
                float _3267 = _2988;
                float _3268 = _2990;
                float _3269 = _2992;
                float _3270 = _2994;
                uint _3271 = _3001;
                uint _3280;
                bool _3281;
                for (;;)
                {
                    _3280 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3271 << 2u)) >> 2u)).x;
                    _3281 = _3280 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3281)
                    {
                        frontier_phi_82_pred = _3270;
                        frontier_phi_82_pred_1 = _3269;
                        frontier_phi_82_pred_2 = _3268;
                        frontier_phi_82_pred_3 = _3267;
                        frontier_phi_82_pred_4 = _3266;
                        frontier_phi_82_pred_5 = _3265;
                    }
                    else
                    {
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3486 = _3265;
                        float _3487 = _3266;
                        float _3488 = _3267;
                        float _3489 = _3268;
                        float _3490 = _3269;
                        float _3491 = _3270;
                        uint _3492 = _3280;
                        uint _3493;
                        vec4 _3518;
                        float _3519;
                        vec4 _3534;
                        vec3 _3546;
                        vec4 _3561;
                        vec4 _3576;
                        float _3622;
                        bool _3623;
                        for (;;)
                        {
                            uint _3503 = ((_3271 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3492));
                            _3493 = (_3492 + 4294967295u) & _3492;
                            uint _3505 = _3503 * 40u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            _3519 = _3518.w;
                            uint _3521 = (_3503 * 40u) + 4u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3503 * 40u) + 8u;
                            _3546 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x));
                            uint _3548 = (_3503 * 40u) + 16u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3503 * 40u) + 20u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3503 * 40u) + 24u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3597 = (_3503 * 40u) + 28u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            _3622 = fma(_1984, _3610.z, fma(_1983, _3610.y, _3610.x * _1982)) + _3610.w;
                            _3623 = !((fma(_1984, _3591.z, fma(_1983, _3591.y, _3591.x * _1982)) + _3591.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3623)
                            {
                                float _3650 = _3518.x - _1982;
                                float _3651 = _3518.y - _1983;
                                float _3652 = _3518.z - _1984;
                                float _3653 = dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652));
                                float _3656 = inversesqrt(_3653);
                                float _3657 = _3656 * _3650;
                                float _3658 = _3656 * _3651;
                                float _3659 = _3656 * _3652;
                                float _3663 = 1.0 - (_3653 / (_3519 * _3519));
                                float _4841 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3668 = sqrt(_3653) * _3534.w;
                                float _3670 = 1.39999997615814208984375 / (_3668 + 1.39999997615814208984375);
                                float _3671 = _3670 * _3670;
                                float _3674 = ((1.0 - _3671) * dot(vec3(_3657, _3658, _3659), vec3(_836, _839, _842))) + _3671;
                                float _3677 = _3668 * _3668;
                                float _3681 = (fma(_1984, _3561.z, fma(_1983, _3561.y, _3561.x * _1982)) + _3561.w) / _3622;
                                float _3682 = (fma(_1984, _3576.z, fma(_1983, _3576.y, _3576.x * _1982)) + _3576.w) / _3622;
                                float _3686 = 1.0 - dot(vec2(_3681, _3682), vec2(_3681, _3682));
                                float _4857 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3688 = _3687 * (((isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0))) * _3664) / ((_3677 * 0.699999988079071044921875) + 1.0));
                                float _3700 = exp2(log2(1.0 / ((_3677 * 3.5) + 5.0)) * 0.25);
                                float _3701 = 1.0 - _896;
                                float _3708 = sqrt(1.0 - ((1.0 - (_3701 * _3701)) * (1.0 - (_3700 * _3700))));
                                float _3709 = _3708 * _3708;
                                float _3710 = _3709 * _3709;
                                float _3711 = _3657 - _3131;
                                float _3712 = _3658 - _3132;
                                float _3713 = _3659 - _3133;
                                float _3717 = inversesqrt(dot(vec3(_3711, _3712, _3713), vec3(_3711, _3712, _3713)));
                                float _3721 = dot(vec3(_836, _839, _842), vec3((-0.0) - _3131, (-0.0) - _3132, (-0.0) - _3133));
                                float _4868 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3725 = dot(vec3(_836, _839, _842), vec3(_3717 * _3711, _3717 * _3712, _3717 * _3713));
                                float _4879 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3728 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3732 = ((_3728 * _3728) * (_3710 + (-1.0))) + 1.0;
                                float _3733 = _3670 * _3709;
                                float _3734 = _3733 * _3733;
                                float _3740 = ((1.0 - _3734) * dot(vec3(_836, _839, _842), vec3(_3657, _3658, _3659))) + _3734;
                                float _4890 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3742 = 1.0 - _3709;
                                float _3752 = (0.5 / (((_3741 * ((_3724 * _3742) + _3709)) + 9.9999999392252902907785028219223e-09) + (((_3741 * _3742) + _3709) * _3724))) * _3741;
                                float _4901 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3762 = (_3687 * _3664) * (((_3710 * 3.1415927410125732421875) * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) / ((_3732 * _3732) * ((_3677 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3688 * _3534.z;
                                frontier_phi_88_pred_1 = _3688 * _3534.y;
                                frontier_phi_88_pred_2 = _3688 * _3534.x;
                                frontier_phi_88_pred_3 = _3762 * _3546.z;
                                frontier_phi_88_pred_4 = _3762 * _3546.y;
                                frontier_phi_88_pred_5 = _3762 * _3546.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3771 = frontier_phi_88_pred;
                            _3770 = frontier_phi_88_pred_1;
                            _3769 = frontier_phi_88_pred_2;
                            _3768 = frontier_phi_88_pred_3;
                            _3767 = frontier_phi_88_pred_4;
                            _3766 = frontier_phi_88_pred_5;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            if (_3493 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3493;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3478;
                        frontier_phi_82_pred_1 = _3477;
                        frontier_phi_82_pred_2 = _3476;
                        frontier_phi_82_pred_3 = _3475;
                        frontier_phi_82_pred_4 = _3474;
                        frontier_phi_82_pred_5 = _3473;
                    }
                    _3116 = frontier_phi_82_pred;
                    _3114 = frontier_phi_82_pred_1;
                    _3112 = frontier_phi_82_pred_2;
                    _3110 = frontier_phi_82_pred_3;
                    _3108 = frontier_phi_82_pred_4;
                    _3106 = frontier_phi_82_pred_5;
                    uint _3272 = _3271 + 1u;
                    if (_3272 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3265 = _3106;
                        _3266 = _3108;
                        _3267 = _3110;
                        _3268 = _3112;
                        _3269 = _3114;
                        _3270 = _3116;
                        _3271 = _3272;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3112;
                frontier_phi_63_64_ladder_1 = _3116;
                frontier_phi_63_64_ladder_2 = _3114;
                frontier_phi_63_64_ladder_3 = _3110;
                frontier_phi_63_64_ladder_4 = _3108;
                frontier_phi_63_64_ladder_5 = _3106;
            }
            else
            {
                frontier_phi_63_64_ladder = _2990;
                frontier_phi_63_64_ladder_1 = _2994;
                frontier_phi_63_64_ladder_2 = _2992;
                frontier_phi_63_64_ladder_3 = _2988;
                frontier_phi_63_64_ladder_4 = _2986;
                frontier_phi_63_64_ladder_5 = _2984;
            }
            _3105 = frontier_phi_63_64_ladder_5;
            _3107 = frontier_phi_63_64_ladder_4;
            _3109 = frontier_phi_63_64_ladder_3;
            _3111 = frontier_phi_63_64_ladder;
            _3113 = frontier_phi_63_64_ladder_2;
            _3115 = frontier_phi_63_64_ladder_1;
        }
        float _3120 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
        _2917 = (_3120 * _3111) + _2448;
        _2919 = (_3120 * _3113) + _2450;
        _2921 = (_3120 * _3115) + _2452;
        _2923 = ((_3105 * 0.039999999105930328369140625) * _3120) + _2771;
        _2925 = ((_3107 * 0.039999999105930328369140625) * _3120) + _2773;
        _2927 = ((_3109 * 0.039999999105930328369140625) * _3120) + _2775;
    }
    else
    {
        _2917 = _2448;
        _2919 = _2450;
        _2921 = _2452;
        _2923 = _2771;
        _2925 = _2773;
        _2927 = _2775;
    }
    float _4917 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4928 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4939 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2944 = ((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2917 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _880))) + ((_2923 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1716)) * cbPerFrame._m0[3u].x);
    float _2945 = ((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2919 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _880))) + ((_2925 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1716)) * cbPerFrame._m0[3u].x);
    float _2946 = ((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2921 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _880))) + ((_2927 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1716)) * cbPerFrame._m0[3u].x);
    uint _2947 = _242 + 6u;
    float _2955 = _817 / cbSceneParam._m0[86u].x;
    float _2956 = _818 / cbSceneParam._m0[86u].y;
    vec4 _2970 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, (log2((isnan(cbSceneParam._m0[77u].w) ? _738 : (isnan(_738) ? cbSceneParam._m0[77u].w : min(_738, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2972 = _2970.x;
    float _2973 = _2970.y;
    float _2974 = _2970.z;
    float _2975 = _2970.w;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_738 > cbSceneParam._m0[78u].w)
    {
        float _3009 = isnan(_738) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _738 : min(cbSceneParam._m0[80u].w, _738));
        float _3010 = _3009 / _738;
        float _3021 = _3010 * _790;
        float _3022 = _791 * _3010;
        float _3023 = (-0.0) - _3022;
        float _3025 = _3010 * _792;
        float _3027 = (cbSceneParam._m0[77u].w * _3023) / _3009;
        float _3028 = _3027 + cbSceneParam._m0[79u].w;
        float _3029 = cbSceneParam._m0[79u].w - _3022;
        float _3035 = sqrt(((_3021 * _3021) + (_3022 * _3022)) + (_3025 * _3025));
        float _3038 = (1.0 - (cbSceneParam._m0[77u].w / _3009)) * _3035;
        float _3043 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3045 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3222;
        if (abs((_3023 - _3027) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3222 = ((((_3028 > 0.0) ? exp2(_3043 * _3028) : (2.0 - exp2(_3045 * _3028))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3038;
        }
        else
        {
            float _3166 = 1.0 / cbSceneParam._m0[80u].x;
            float _3167 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : max(_3028, _3029));
            float _3168 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : min(_3028, _3029));
            float _3177 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : min(_3167, 0.0));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            _3222 = ((abs(_3035 / _3023) * cbSceneParam._m0[80u].y) * ((((_3177 - _3178) * 2.0) - ((exp2(_3043 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0)))) - exp2(_3043 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))))) * _3166)) - ((exp2(_3045 * _3177) - exp2(_3045 * _3178)) * _3166))) + (_3038 * cbSceneParam._m0[80u].z);
        }
        vec4 _3224 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, 1.0), 0.0);
        float _3233 = exp2((_3222 * (-1.44269502162933349609375)) * (1.0 - _3224.w));
        float _3234 = log2(_3233);
        float _3250 = log2(_2975);
        _3047 = (exp2(_3250 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].x)) * _3224.x) / cbSceneParam._m0[78u].x)) + _2972;
        _3049 = (exp2(_3250 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].y)) * _3224.y) / cbSceneParam._m0[78u].y)) + _2973;
        _3051 = (exp2(_3250 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].z)) * _3224.z) / cbSceneParam._m0[78u].z)) + _2974;
        _3053 = _3233 * _2975;
    }
    else
    {
        _3047 = _2972;
        _3049 = _2973;
        _3051 = _2974;
        _3053 = _2975;
    }
    bool _3260;
    vec4 _3063;
    vec4 _3085;
    float _3087;
    float _3091;
    float _3092;
    float _3093;
    float _3094;
    bool _3104;
    for (;;)
    {
        _3063 = cbMatDynParam._m0[0u];
        float _3065 = roundEven(_3063.y);
        bool _3066 = _3065 == 3.0;
        float _3067 = log2(_3053);
        float _3074 = exp2(_3067 * cbSceneParam._m0[78u].x) * _2944;
        float _3075 = exp2(_3067 * cbSceneParam._m0[78u].y) * _2945;
        float _3076 = exp2(_3067 * cbSceneParam._m0[78u].z) * _2946;
        float _3083 = _806 + (-0.5);
        _3085 = cbMtdParam._m0[1u];
        _3087 = _3085.y * _3083;
        float _3090 = (_3065 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3091 = _3090 * (_3066 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3047)));
        _3092 = _3090 * (_3066 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3049)));
        _3093 = _3090 * (_3066 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3051)));
        _3094 = _3083 * 0.999000012874603271484375;
        _3104 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3104)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _3094) < 0.5)
            {
                _3260 = true;
                break;
            }
        }
        uint _3201 = _855 + uint(_3063.w);
        if ((cbInstanceData._m0[_3201].w < 1.0) && ((cbInstanceData._m0[_3201].w + _3094) < 0.5))
        {
            _3260 = true;
            break;
        }
        if ((_3087 + 1.0) < _3085.x)
        {
            _3260 = true;
            break;
        }
        _3260 = false;
        break;
    }
    float _3464;
    if (_3260)
    {
        discard_state = true;
        _3464 = 0.0;
    }
    else
    {
        _3464 = cbInstanceData._m0[_2947].w;
    }
    SV_Target.x = _3091;
    SV_Target.y = _3092;
    SV_Target.z = _3093;
    SV_Target.w = _3464;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2947].w;
    discard_exit();
}


