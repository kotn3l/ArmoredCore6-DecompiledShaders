#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1018;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].z) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3610 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _389 = (_382 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _390 = (_382 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _391 = (_382 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _404 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _423 = _421.x;
    float _424 = _421.y;
    float _425 = _421.z;
    float _434 = ((_404.z - _425) * _382) + _425;
    float _437 = ((((_404.x - _423) * _382) + _423) * 2.0) + (-1.0);
    float _439 = ((((_404.y - _424) * _382) + _424) * 2.0) + (-1.0);
    float _440 = dot(vec2(_437, _439), vec2(_437, _439));
    float _3621 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _445 = sqrt(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _473 = (((_461.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _437;
    float _474 = (((_461.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _439;
    float _478 = (cbMtdParam._m0[19u].w * (_461.z - _434)) + _434;
    float _482 = cbMtdParam._m0[22u].x + _461.w;
    float _485 = fma(_445, _215 * NORMAL.x, fma(_474, _222 * TANGENT.x, (_208 * _200) * _473));
    float _488 = fma(_445, _215 * NORMAL.y, fma(_474, _222 * TANGENT.y, (_208 * _201) * _473));
    float _491 = fma(_445, _215 * NORMAL.z, fma(_474, _222 * TANGENT.z, (_208 * _202) * _473));
    float _495 = inversesqrt(dot(vec3(_485, _488, _491), vec3(_485, _488, _491)));
    float _496 = _495 * _485;
    float _497 = _495 * _488;
    float _498 = _495 * _491;
    float _3632 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _499 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3654 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3665 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3676 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _517 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _569 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _559);
    float _570 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _559);
    float _571 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _559);
    float _575 = inversesqrt(dot(vec3(_569, _570, _571), vec3(_569, _570, _571)));
    float _576 = _569 * _575;
    float _577 = _570 * _575;
    float _578 = _571 * _575;
    float _584 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _585 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _603 = fma(_498, cbSceneParam._m0[5u].z, fma(_497, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _496));
    float _606 = fma(_498, cbSceneParam._m0[6u].z, fma(_497, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _496));
    float _609 = fma(_498, cbSceneParam._m0[7u].z, fma(_497, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _496));
    uint _623 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3687 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    vec4 _643 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _584, cbSceneParam._m0[86u].y * _585));
    float _647 = ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * TEXCOORD_5.w) * _643.x;
    float _648 = dot(vec3(_496, _497, _498), vec3(_576, _577, _578));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _496) - _576;
    float _656 = (_651 * _497) - _577;
    float _657 = (_651 * _498) - _578;
    float _661 = abs(dot(vec3(_576, _577, _578), vec3(_496, _497, _498)));
    float _3720 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _663 = sqrt(_499);
    float _676 = exp2((_663 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_663 * 3.0));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _742 = fma(_716, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708));
        float _746 = fma(_716, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708));
        float _750 = fma(_716, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708));
        float _775 = _708 + _496;
        float _776 = _712 + _497;
        float _777 = _716 + _498;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _742;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _746;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _750;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_742 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_746 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_750 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_496, _497, _498), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3768 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_496, _497, _498), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3801 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_496, _497, _498), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3834 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1057 = fma(_716, cbModelParam._m0[30u].z, fma(_712, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _708));
        float _1061 = fma(_716, cbModelParam._m0[31u].z, fma(_712, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _708));
        float _1065 = fma(_716, cbModelParam._m0[32u].z, fma(_712, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _708));
        float _1088 = _708 + _496;
        float _1089 = _712 + _497;
        float _1090 = _716 + _498;
        float _1100 = fma(_1090, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1057 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1061 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[35u].z) + ((((((_1065 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1156 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1123.x + (-0.5));
        float _1158 = _1156 * (_1123.y + (-0.5));
        float _1159 = _1156 * (_1123.z + (-0.5));
        float _1166 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1130.x + (-0.5));
        float _1168 = _1166 * (_1130.y + (-0.5));
        float _1169 = _1166 * (_1130.z + (-0.5));
        float _1176 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1137.x + (-0.5));
        float _1178 = _1176 * (_1137.y + (-0.5));
        float _1179 = _1176 * (_1137.z + (-0.5));
        float _1186 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1144.x + (-0.5));
        float _1188 = _1186 * (_1144.y + (-0.5));
        float _1189 = _1186 * (_1144.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_496, _497, _498), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3897 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1220 + 1.0))) + _1225) * _1190;
        float _1235 = _1158 * 0.5;
        float _1236 = _1168 * 0.5;
        float _1237 = _1178 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_496, _497, _498), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3930 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1262 + 1.0))) + _1267) * _1191;
        float _1277 = _1159 * 0.5;
        float _1278 = _1169 * 0.5;
        float _1279 = _1179 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_496, _497, _498), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3963 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1304 + 1.0))) + _1309) * _1192;
        _1326 = _1159;
        _1327 = _1158;
        _1328 = _1157;
        _1329 = _1169;
        _1330 = _1168;
        _1331 = _1167;
        _1332 = _1179;
        _1333 = _1178;
        _1334 = _1177;
        _1335 = _1192;
        _1336 = _1191;
        _1337 = _1190;
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1018;
        _1327 = _1018;
        _1328 = _1018;
        _1329 = _1018;
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1030)) + _1030;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1031)) + _1031;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1032)) + _1032;
    float _1373 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1350));
    float _1394 = _655 * 0.5;
    float _1395 = _656 * 0.5;
    float _1396 = _657 * 0.5;
    float _1397 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1400 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1403 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1437;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1410 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1414 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1418 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1425 = dot(vec4(cbModelParam._m0[39u]), vec4(_1394, _1395, _1396, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1448;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1439 = dot(vec4(cbModelParam._m0[40u]), vec4(_1394, _1395, _1396, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1452 = (_1448 * cbModelParam._m0[1u].x) + (_1437 * (1.0 - cbModelParam._m0[1u].x));
    float _1462 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _499);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1462 : min(cbModelParam._m0[25u].z, _1462));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1512 = fma(_716, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708)) + cbModelParam._m0[13u].w;
        float _1516 = fma(_716, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708)) + cbModelParam._m0[14u].w;
        float _1520 = fma(_716, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708)) + cbModelParam._m0[15u].w;
        float _1523 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1526 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1529 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1557;
        if (_1523 > 0.0)
        {
            _1557 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1557 = frontier_phi_14_12_ladder;
        }
        float _1728;
        if (_1526 > 0.0)
        {
            _1728 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1728 = frontier_phi_23_19_ladder;
        }
        float _2023;
        if (_1529 > 0.0)
        {
            _2023 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2023 = frontier_phi_35_30_ladder;
        }
        float _2025 = isnan(_1728) ? _1557 : (isnan(_1557) ? _1728 : min(_1557, _1728));
        float _2026 = isnan(_2023) ? _2025 : (isnan(_2025) ? _2023 : min(_2025, _2023));
        float _2030 = (_2026 * _1523) + _1512;
        float _2031 = (_2026 * _1526) + _1516;
        float _2032 = (_2026 * _1529) + _1520;
        float _2033 = _2026 * 9.9999997473787516355514526367188e-05;
        float _2035 = (-1.0) - _2033;
        float _2037 = _2033 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2032 > _2037) || ((_2032 < _2035) || ((_2031 > _2037) || ((_2031 < _2035) || ((_2030 < _2035) || (_2030 > _2037))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2177 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2032, cbModelParam._m0[9u].z, fma(_2031, cbModelParam._m0[9u].y, _2030 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2032, cbModelParam._m0[10u].z, fma(_2031, cbModelParam._m0[10u].y, _2030 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2032, cbModelParam._m0[11u].z, fma(_2031, cbModelParam._m0[11u].y, _2030 * cbModelParam._m0[11u].x))), _1463);
            frontier_phi_13_35_ladder = _2177.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2177.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2177.x * cbModelParam._m0[1u].y;
        }
        _1545 = frontier_phi_13_35_ladder_2;
        _1547 = frontier_phi_13_35_ladder_1;
        _1549 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1463);
        _1545 = _1533.x * cbModelParam._m0[1u].y;
        _1547 = _1533.y * cbModelParam._m0[1u].y;
        _1549 = _1533.z * cbModelParam._m0[1u].y;
    }
    float _1553 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _499);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1553 : min(cbModelParam._m0[25u].w, _1553));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1609 = fma(_716, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708)) + cbModelParam._m0[21u].w;
        float _1613 = fma(_716, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708)) + cbModelParam._m0[22u].w;
        float _1617 = fma(_716, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708)) + cbModelParam._m0[23u].w;
        float _1620 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1623 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1626 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1733;
        if (_1620 > 0.0)
        {
            _1733 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1733 = frontier_phi_25_21_ladder;
        }
        float _2050;
        if (_1623 > 0.0)
        {
            _2050 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2050 = frontier_phi_37_32_ladder;
        }
        float _2377;
        if (_1626 > 0.0)
        {
            _2377 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2377 = frontier_phi_47_44_ladder;
        }
        float _2379 = isnan(_2050) ? _1733 : (isnan(_1733) ? _2050 : min(_1733, _2050));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1620) + _1609;
        float _2385 = (_2380 * _1623) + _1613;
        float _2386 = (_2380 * _1626) + _1617;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2387;
        float _2390 = _2387 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2386 > _2390) || ((_2386 < _2388) || ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 < _2388) || (_2384 > _2390))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2386, cbModelParam._m0[17u].z, fma(_2385, cbModelParam._m0[17u].y, _2384 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2386, cbModelParam._m0[18u].z, fma(_2385, cbModelParam._m0[18u].y, _2384 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2386, cbModelParam._m0[19u].z, fma(_2385, cbModelParam._m0[19u].y, _2384 * cbModelParam._m0[19u].x))), _1554);
            frontier_phi_22_47_ladder = _2504.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2504.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2504.x * cbModelParam._m0[1u].z;
        }
        _1645 = frontier_phi_22_47_ladder_2;
        _1647 = frontier_phi_22_47_ladder_1;
        _1649 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1554);
        _1645 = _1629.x * cbModelParam._m0[1u].z;
        _1647 = _1629.y * cbModelParam._m0[1u].z;
        _1649 = _1629.z * cbModelParam._m0[1u].z;
    }
    float _1661 = ((((1.0 - _676) * ((_663 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_676 * _663)) * _647;
    float _1662 = _1661 * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1663 = _1661 * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1664 = _1661 * ((cbModelParam._m0[1u].w * (_1649 - _1549)) + _1549);
    float _1667 = fma(_1664, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1664, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1664, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, _1662 * cbSceneParam._m0[91u].x));
    float _1707 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1711 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1715 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1719 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1720 = _1707 / _1719;
    float _1721 = _1711 / _1719;
    float _1722 = _1715 / _1719;
    float _1869;
    float _1870;
    float _1871;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1749 = ((uint(_1722 > cbSceneParam._m0[59u].y) + uint(_1722 > cbSceneParam._m0[59u].x)) + uint(_1722 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1750 = _1749 + 43u;
        uint _1758 = _1749 + 44u;
        uint _1766 = _1749 + 45u;
        uint _1774 = _1749 + 46u;
        float _1785 = fma(_1719, cbSceneParam._m0[_1750].w, fma(_1715, cbSceneParam._m0[_1750].z, fma(_1711, cbSceneParam._m0[_1750].y, _1707 * cbSceneParam._m0[_1750].x)));
        float _1789 = fma(_1719, cbSceneParam._m0[_1758].w, fma(_1715, cbSceneParam._m0[_1758].z, fma(_1711, cbSceneParam._m0[_1758].y, _1707 * cbSceneParam._m0[_1758].x)));
        float _1797 = fma(_1719, cbSceneParam._m0[_1774].w, fma(_1715, cbSceneParam._m0[_1774].z, fma(_1711, cbSceneParam._m0[_1774].y, _1707 * cbSceneParam._m0[_1774].x)));
        float _1802 = cbSceneParam._m0[33u].z * _1797;
        float _1804 = cbSceneParam._m0[33u].w * _1797;
        float _1807 = fma(_1719, cbSceneParam._m0[_1766].w, fma(_1715, cbSceneParam._m0[_1766].z, fma(_1711, cbSceneParam._m0[_1766].y, _1707 * cbSceneParam._m0[_1766].x))) / _1797;
        float _1855 = (cbSceneParam._m0[33u].x - sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722))) * cbSceneParam._m0[33u].y;
        float _4089 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1862 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1802 + _1785) / _1797, (_1804 + _1789) / _1797), _1807), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1804 + _1785) / _1797, (_1789 - _1802) / _1797), _1807), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1785 - _1802) / _1797, (_1789 - _1804) / _1797), _1807), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1785 - _1804) / _1797, (_1802 + _1789) / _1797), _1807), 0.0)).x), vec4(0.25)));
        _1869 = 1.0 - (_1862 * cbSceneParam._m0[34u].x);
        _1870 = 1.0 - (_1862 * cbSceneParam._m0[34u].y);
        _1871 = 1.0 - (_1862 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1869 = 1.0;
        _1870 = 1.0;
        _1871 = 1.0;
    }
    float _1935;
    float _1937;
    float _1939;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1923 = fma(_1719, cbSceneParam._m0[63u].w, fma(_1715, cbSceneParam._m0[63u].z, fma(_1711, cbSceneParam._m0[63u].y, _1707 * cbSceneParam._m0[63u].x)));
        float _1924 = fma(_1719, cbSceneParam._m0[60u].w, fma(_1715, cbSceneParam._m0[60u].z, fma(_1711, cbSceneParam._m0[60u].y, _1707 * cbSceneParam._m0[60u].x))) / _1923;
        float _1925 = fma(_1719, cbSceneParam._m0[61u].w, fma(_1715, cbSceneParam._m0[61u].z, fma(_1711, cbSceneParam._m0[61u].y, _1707 * cbSceneParam._m0[61u].x))) / _1923;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1924 >= cbSceneParam._m0[64u].x) && (_1925 >= cbSceneParam._m0[64u].y)) && (_1924 <= cbSceneParam._m0[64u].z)) && (_1925 <= cbSceneParam._m0[64u].w))
        {
            float _2063 = fma(_1719, cbSceneParam._m0[62u].w, fma(_1715, cbSceneParam._m0[62u].z, fma(_1711, cbSceneParam._m0[62u].y, _1707 * cbSceneParam._m0[62u].x))) / _1923;
            float _2067 = isnan(cbSceneParam._m0[41u].w) ? _2063 : (isnan(_2063) ? cbSceneParam._m0[41u].w : max(_2063, cbSceneParam._m0[41u].w));
            float _2110 = (cbSceneParam._m0[33u].x - sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722))) * cbSceneParam._m0[33u].y;
            float _4105 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
            float _2117 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1924, cbSceneParam._m0[33u].w + _1925), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1924, _1925 - cbSceneParam._m0[33u].z), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1924 - cbSceneParam._m0[33u].z, _1925 - cbSceneParam._m0[33u].w), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1924 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1925), _2067), 0.0)).x), vec4(0.25)));
            float _2121 = 1.0 - (_2117 * cbSceneParam._m0[34u].x);
            float _2122 = 1.0 - (_2117 * cbSceneParam._m0[34u].y);
            float _2123 = 1.0 - (_2117 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2123) ? _1871 : (isnan(_1871) ? _2123 : min(_1871, _2123));
            frontier_phi_34_33_ladder_1 = isnan(_2122) ? _1870 : (isnan(_1870) ? _2122 : min(_1870, _2122));
            frontier_phi_34_33_ladder_2 = isnan(_2121) ? _1869 : (isnan(_1869) ? _2121 : min(_1869, _2121));
        }
        else
        {
            frontier_phi_34_33_ladder = _1871;
            frontier_phi_34_33_ladder_1 = _1870;
            frontier_phi_34_33_ladder_2 = _1869;
        }
        _1935 = frontier_phi_34_33_ladder_2;
        _1937 = frontier_phi_34_33_ladder_1;
        _1939 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1935 = _1869;
        _1937 = _1870;
        _1939 = _1871;
    }
    uvec4 _1944 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1946 = _1944.x * 14u;
    uint _1947 = _1946 + 13u;
    float _1954 = _647 + (-1.0);
    float _1959 = (cbLight._m0[_1947].x * _1954) + 1.0;
    float _1960 = (cbLight._m0[_1947].y * _1954) + 1.0;
    float _1961 = (cbLight._m0[_1947].z * _1954) + 1.0;
    float _1962 = (cbLight._m0[_1947].w * _1954) + 1.0;
    uint _1963 = _1946 + 5u;
    float _1969 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1973 = _1946 + 4u;
    float _1982 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
    uint _1986 = _1946 | 1u;
    float _1997 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_496, _497, _498));
    float _2000 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_496, _497, _498));
    float _4141 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _4152 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2005 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.3183098733425140380859375;
    float _2007 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.3183098733425140380859375;
    float _2014 = ((cbLight._m0[_1963].x * _1969) * _2007) + (((cbLight._m0[_1973].x * _1935) * _1982) * _2005);
    float _2015 = ((_1969 * cbLight._m0[_1963].y) * _2007) + (((cbLight._m0[_1973].y * _1937) * _1982) * _2005);
    float _2016 = ((_1969 * cbLight._m0[_1963].z) * _2007) + (((cbLight._m0[_1973].z * _1939) * _1982) * _2005);
    uvec4 _2020 = floatBitsToUint(cbLight._m0[_1946 + 12u]);
    bool _2022 = _2020.x == 0u;
    float _2124;
    float _2126;
    float _2128;
    if (_2022)
    {
        _2124 = _2014;
        _2126 = _2015;
        _2128 = _2016;
    }
    else
    {
        uint _2132 = _1946 + 6u;
        float _2148 = (dot(vec3(cbLight._m0[_1946 + 2u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _2149 = _2148 * _2148;
        float _4163 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2150 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2151 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2124 = (((cbLight._m0[_2132].x * 0.3183098733425140380859375) * _2150) * _2151) + _2014;
        _2126 = (((cbLight._m0[_2132].y * 0.3183098733425140380859375) * _2150) * _2151) + _2015;
        _2128 = (((cbLight._m0[_2132].z * 0.3183098733425140380859375) * _2150) * _2151) + _2016;
    }
    bool _2131 = _2020.y == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2131)
    {
        _2186 = _2124;
        _2188 = _2126;
        _2190 = _2128;
    }
    else
    {
        uint _2348 = _1946 + 7u;
        float _2364 = (dot(vec3(cbLight._m0[_1946 + 3u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _2365 = _2364 * _2364;
        float _4179 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2366 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2367 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2186 = (((cbLight._m0[_2348].x * 0.3183098733425140380859375) * _2366) * _2367) + _2124;
        _2188 = (((cbLight._m0[_2348].y * 0.3183098733425140380859375) * _2366) * _2367) + _2126;
        _2190 = (((cbLight._m0[_2348].z * 0.3183098733425140380859375) * _2366) * _2367) + _2128;
    }
    uint _2193 = _1946 + 8u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _499) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_1946].x + _576;
    float _2209 = cbLight._m0[_1946].y + _577;
    float _2210 = cbLight._m0[_1946].z + _578;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1946].xyz));
    float _4195 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _2222 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2223 = dot(vec3(_496, _497, _498), vec3(_2215, _2216, _2217));
    float _4217 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_2215, _2216, _2217));
    float _4228 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2207 * _2207;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2246 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2247 = 1.0 - _2207;
    float _2258 = (0.5 / (((_2222 * ((_2221 * _2247) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2247) + _2207) * _2221))) * _2221;
    float _4239 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    uint _2274 = _1946 + 9u;
    float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _499) * 0.949999988079071044921875);
    float _2286 = _2285 * _2285;
    float _2287 = cbLight._m0[_1986].x + _576;
    float _2288 = cbLight._m0[_1986].y + _577;
    float _2289 = cbLight._m0[_1986].z + _578;
    float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
    float _2294 = _2293 * _2287;
    float _2295 = _2293 * _2288;
    float _2296 = _2293 * _2289;
    float _2297 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1986].xyz));
    float _4250 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2301 = dot(vec3(_496, _497, _498), vec3(_2294, _2295, _2296));
    float _4261 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2294, _2295, _2296));
    float _4272 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2286 * _2286;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2322 = (exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2323 = 1.0 - _2286;
    float _2333 = (0.5 / (((_2222 * ((_2300 * _2323) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2323) + _2286) * _2300))) * _2300;
    float _4283 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    float _2345 = (((_2322 * cbLight._m0[_2274].x) * _2335) * _1969) + ((((cbLight._m0[_2193].x * _1935) * _2246) * _2260) * _1982);
    float _2346 = (((_2322 * cbLight._m0[_2274].y) * _2335) * _1969) + ((((cbLight._m0[_2193].y * _1937) * _2246) * _2260) * _1982);
    float _2347 = (((_2322 * cbLight._m0[_2274].z) * _2335) * _1969) + ((((cbLight._m0[_2193].z * _1939) * _2246) * _2260) * _1982);
    float _2403;
    float _2405;
    float _2407;
    if (_2022)
    {
        _2403 = _2345;
        _2405 = _2346;
        _2407 = _2347;
    }
    else
    {
        uint _2409 = _1946 + 2u;
        uint _2413 = _1946 + 10u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _499) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _576;
        float _2430 = cbLight._m0[_2409].y + _577;
        float _2431 = cbLight._m0[_2409].z + _578;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2409].xyz));
        float _4294 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2443 = dot(vec3(_496, _497, _498), vec3(_2436, _2437, _2438));
        float _4305 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4316 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2464 = (exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2465 = 1.0 - _2428;
        float _2475 = (0.5 / (((_2222 * ((_2442 * _2465) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2465) + _2428) * _2442))) * _2442;
        float _4327 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2403 = (((_2464 * cbLight._m0[_2413].x) * _2477) * _2478) + _2345;
        _2405 = (((_2464 * cbLight._m0[_2413].y) * _2477) * _2478) + _2346;
        _2407 = (((_2464 * cbLight._m0[_2413].z) * _2477) * _2478) + _2347;
    }
    float _2509;
    float _2511;
    float _2513;
    if (_2131)
    {
        _2509 = _2403;
        _2511 = _2405;
        _2513 = _2407;
    }
    else
    {
        uint _2520 = _1946 + 3u;
        uint _2524 = _1946 + 11u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _499) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _576;
        float _2541 = cbLight._m0[_2520].y + _577;
        float _2542 = cbLight._m0[_2520].z + _578;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2520].xyz));
        float _4343 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2554 = dot(vec3(_496, _497, _498), vec3(_2547, _2548, _2549));
        float _4354 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4365 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2575 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2576 = 1.0 - _2539;
        float _2586 = (0.5 / (((_2222 * ((_2553 * _2576) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2576) + _2539) * _2553))) * _2553;
        float _4376 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2509 = (((_2575 * cbLight._m0[_2524].x) * _2588) * _2589) + _2403;
        _2511 = (((_2575 * cbLight._m0[_2524].y) * _2588) * _2589) + _2405;
        _2513 = (((_2575 * cbLight._m0[_2524].z) * _2588) * _2589) + _2407;
    }
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_1944.y == 0u)
    {
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.x;
        uint _2622 = uint((float(_2610.y) * floor(float(uint(cbSceneParam._m0[85u].y * _585) / _2611))) + floor(float(uint(cbSceneParam._m0[85u].x * _584) / _2611)));
        float _2632 = (log2(_1722 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2633 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        uint _2636 = uint(isnan(14.0) ? _2633 : (isnan(_2633) ? 14.0 : min(_2633, 14.0)));
        uvec4 _2641 = texelFetch(g_lightClusterGridBuffer, int(((_2636 << 2u) + (_2622 << 6u)) >> 2u));
        uint _2642 = _2641.x;
        uint _2643 = _2610.z;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((((1u << ((_2643 >> 4u) & 15u)) + 4294967295u) & _2642) == 0u) || ((_2643 & 240u) == 0u))
        {
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
        }
        else
        {
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            uint _2873 = 0u;
            uint _2882;
            bool _2883;
            for (;;)
            {
                _2882 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                _2883 = _2882 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2883)
                {
                    frontier_phi_66_pred = _2872;
                    frontier_phi_66_pred_1 = _2871;
                    frontier_phi_66_pred_2 = _2870;
                    frontier_phi_66_pred_3 = _2869;
                    frontier_phi_66_pred_4 = _2868;
                    frontier_phi_66_pred_5 = _2867;
                }
                else
                {
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    uint _2997;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2882;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    for (;;)
                    {
                        uint _3001 = uint(findLSB(_2997)) + (_2873 << 5u);
                        uint _2998 = (_2997 + 4294967295u) & _2997;
                        uint _3003 = _3001 * 48u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 3u)).x));
                        uint _3023 = (_3001 * 48u) + 4u;
                        vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 3u)).x));
                        uint _3042 = (_3001 * 48u) + 8u;
                        vec3 _3053 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x));
                        float _3057 = _3017.x - _1720;
                        float _3058 = _3017.y - _1721;
                        float _3059 = _3017.z - _1722;
                        float _3060 = dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059));
                        float _3063 = inversesqrt(_3060);
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3067 = dot(vec3(_603, _606, _609), vec3(_3064, _3065, _3066));
                        float _3072 = 1.0 - (_3060 * _3017.w);
                        float _4402 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3074 = sqrt(_3060) * _3036.w;
                        float _3077 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                        float _3078 = _3077 * _3077;
                        float _3081 = ((1.0 - _3078) * _3067) + _3078;
                        float _3084 = _3074 * _3074;
                        float _3088 = ((isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))) * _3073) / ((_3084 * 0.699999988079071044921875) + 1.0);
                        float _3092 = (-0.0) - _1720;
                        float _3093 = (-0.0) - _1721;
                        float _3094 = (-0.0) - _1722;
                        float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3108 = exp2(log2(1.0 / ((_3084 * 3.5) + 5.0)) * 0.25);
                        float _3109 = 1.0 - _663;
                        float _3116 = sqrt(1.0 - ((1.0 - (_3109 * _3109)) * (1.0 - (_3108 * _3108))));
                        float _3117 = _3116 * _3116;
                        float _3118 = _3117 * _3117;
                        float _3119 = _3099 + _3064;
                        float _3120 = _3100 + _3065;
                        float _3121 = _3101 + _3066;
                        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                        float _3129 = dot(vec3(_603, _606, _609), vec3(_3099, _3100, _3101));
                        float _4418 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3133 = dot(vec3(_603, _606, _609), vec3(_3125 * _3119, _3125 * _3120, _3125 * _3121));
                        float _4429 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3140 = ((_3136 * _3136) * (_3118 + (-1.0))) + 1.0;
                        float _3141 = _3077 * _3117;
                        float _3142 = _3141 * _3141;
                        float _3145 = ((1.0 - _3142) * _3067) + _3142;
                        float _4440 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3146 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                        float _3147 = 1.0 - _3117;
                        float _3157 = (0.5 / (((_3146 * ((_3132 * _3147) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_3146 * _3147) + _3117) * _3132))) * _3146;
                        float _4451 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3168 = (((_3118 * 3.1415927410125732421875) * (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) / ((_3140 * _3140) * ((_3084 * 2.1991131305694580078125) + 3.141590118408203125))) * _3073;
                        _2926 = (_3088 * _3036.x) + _2994;
                        _2927 = (_3088 * _3036.y) + _2995;
                        _2928 = (_3088 * _3036.z) + _2996;
                        _2923 = (_3168 * _3053.x) + _2991;
                        _2924 = (_3168 * _3053.y) + _2992;
                        _2925 = (_3168 * _3053.z) + _2993;
                        if (_2998 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2998;
                        }
                    }
                    frontier_phi_66_pred = _2928;
                    frontier_phi_66_pred_1 = _2927;
                    frontier_phi_66_pred_2 = _2926;
                    frontier_phi_66_pred_3 = _2925;
                    frontier_phi_66_pred_4 = _2924;
                    frontier_phi_66_pred_5 = _2923;
                }
                _2733 = frontier_phi_66_pred;
                _2731 = frontier_phi_66_pred_1;
                _2729 = frontier_phi_66_pred_2;
                _2727 = frontier_phi_66_pred_3;
                _2725 = frontier_phi_66_pred_4;
                _2723 = frontier_phi_66_pred_5;
                uint _2874 = _2873 + 1u;
                if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2867 = _2723;
                    _2868 = _2725;
                    _2869 = _2727;
                    _2870 = _2729;
                    _2871 = _2731;
                    _2872 = _2733;
                    _2873 = _2874;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
        }
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.z;
        uint _2739 = (_2737 >> 8u) & 15u;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        if (((4294967295u << _2739) & _2642) == 0u)
        {
            _2835 = _2722;
            _2837 = _2724;
            _2839 = _2726;
            _2841 = _2728;
            _2843 = _2730;
            _2845 = _2732;
        }
        else
        {
            float _2860 = inversesqrt(dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722)));
            float _2861 = _2860 * _1720;
            float _2862 = _2860 * _1721;
            float _2863 = _2860 * _1722;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2739 < ((_2737 >> 12u) & 15u))
            {
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2974 = _2722;
                float _2975 = _2724;
                float _2976 = _2726;
                float _2977 = _2728;
                float _2978 = _2730;
                float _2979 = _2732;
                uint _2980 = _2739;
                uint _2989;
                bool _2990;
                for (;;)
                {
                    _2989 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_2980 << 2u)) >> 2u)).x;
                    _2990 = _2989 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2990)
                    {
                        frontier_phi_72_pred = _2979;
                        frontier_phi_72_pred_1 = _2978;
                        frontier_phi_72_pred_2 = _2977;
                        frontier_phi_72_pred_3 = _2976;
                        frontier_phi_72_pred_4 = _2975;
                        frontier_phi_72_pred_5 = _2974;
                    }
                    else
                    {
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3186 = _2974;
                        float _3187 = _2975;
                        float _3188 = _2976;
                        float _3189 = _2977;
                        float _3190 = _2978;
                        float _3191 = _2979;
                        uint _3192 = _2989;
                        uint _3193;
                        vec4 _3218;
                        float _3219;
                        vec4 _3234;
                        vec3 _3246;
                        vec4 _3261;
                        vec4 _3277;
                        float _3323;
                        bool _3324;
                        for (;;)
                        {
                            uint _3203 = ((_2980 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3192));
                            _3193 = (_3192 + 4294967295u) & _3192;
                            uint _3205 = _3203 * 40u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3219 = _3218.w;
                            uint _3221 = (_3203 * 40u) + 4u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3236 = (_3203 * 40u) + 8u;
                            _3246 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x));
                            uint _3248 = (_3203 * 40u) + 16u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3264 = (_3203 * 40u) + 20u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3203 * 40u) + 24u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3298 = (_3203 * 40u) + 28u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3323 = fma(_1722, _3311.z, fma(_1721, _3311.y, _3311.x * _1720)) + _3311.w;
                            _3324 = !((fma(_1722, _3292.z, fma(_1721, _3292.y, _3292.x * _1720)) + _3292.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3324)
                            {
                                float _3351 = _3218.x - _1720;
                                float _3352 = _3218.y - _1721;
                                float _3353 = _3218.z - _1722;
                                float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                                float _3357 = inversesqrt(_3354);
                                float _3358 = _3357 * _3351;
                                float _3359 = _3357 * _3352;
                                float _3360 = _3357 * _3353;
                                float _3364 = 1.0 - (_3354 / (_3219 * _3219));
                                float _4462 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3369 = sqrt(_3354) * _3234.w;
                                float _3371 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                                float _3372 = _3371 * _3371;
                                float _3375 = ((1.0 - _3372) * dot(vec3(_3358, _3359, _3360), vec3(_603, _606, _609))) + _3372;
                                float _3378 = _3369 * _3369;
                                float _3382 = (fma(_1722, _3261.z, fma(_1721, _3261.y, _3261.x * _1720)) + _3261.w) / _3323;
                                float _3383 = (fma(_1722, _3277.z, fma(_1721, _3277.y, _3277.x * _1720)) + _3277.w) / _3323;
                                float _3387 = 1.0 - dot(vec2(_3382, _3383), vec2(_3382, _3383));
                                float _4478 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3389 = _3388 * (((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3365) / ((_3378 * 0.699999988079071044921875) + 1.0));
                                float _3401 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                                float _3402 = 1.0 - _663;
                                float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                                float _3410 = _3409 * _3409;
                                float _3411 = _3410 * _3410;
                                float _3412 = _3358 - _2861;
                                float _3413 = _3359 - _2862;
                                float _3414 = _3360 - _2863;
                                float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                                float _3422 = dot(vec3(_603, _606, _609), vec3((-0.0) - _2861, (-0.0) - _2862, (-0.0) - _2863));
                                float _4489 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3425 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3426 = dot(vec3(_603, _606, _609), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                                float _4500 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                                float _3434 = _3371 * _3410;
                                float _3435 = _3434 * _3434;
                                float _3441 = ((1.0 - _3435) * dot(vec3(_603, _606, _609), vec3(_3358, _3359, _3360))) + _3435;
                                float _4511 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3443 = 1.0 - _3410;
                                float _3453 = (0.5 / (((_3442 * ((_3425 * _3443) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3410) * _3425))) * _3442;
                                float _4522 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3463 = (_3388 * _3365) * (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) / ((_3433 * _3433) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3389 * _3234.y;
                                frontier_phi_78_pred_1 = _3389 * _3234.x;
                                frontier_phi_78_pred_2 = _3463 * _3246.z;
                                frontier_phi_78_pred_3 = _3463 * _3246.y;
                                frontier_phi_78_pred_4 = _3463 * _3246.x;
                                frontier_phi_78_pred_5 = _3389 * _3234.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3471 = frontier_phi_78_pred;
                            _3470 = frontier_phi_78_pred_1;
                            _3469 = frontier_phi_78_pred_2;
                            _3468 = frontier_phi_78_pred_3;
                            _3467 = frontier_phi_78_pred_4;
                            _3472 = frontier_phi_78_pred_5;
                            _3176 = _3470 + _3189;
                            _3177 = _3471 + _3190;
                            _3178 = _3472 + _3191;
                            _3173 = _3467 + _3186;
                            _3174 = _3468 + _3187;
                            _3175 = _3469 + _3188;
                            if (_3193 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3193;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3178;
                        frontier_phi_72_pred_1 = _3177;
                        frontier_phi_72_pred_2 = _3176;
                        frontier_phi_72_pred_3 = _3175;
                        frontier_phi_72_pred_4 = _3174;
                        frontier_phi_72_pred_5 = _3173;
                    }
                    _2846 = frontier_phi_72_pred;
                    _2844 = frontier_phi_72_pred_1;
                    _2842 = frontier_phi_72_pred_2;
                    _2840 = frontier_phi_72_pred_3;
                    _2838 = frontier_phi_72_pred_4;
                    _2836 = frontier_phi_72_pred_5;
                    uint _2981 = _2980 + 1u;
                    if (_2981 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2974 = _2836;
                        _2975 = _2838;
                        _2976 = _2840;
                        _2977 = _2842;
                        _2978 = _2844;
                        _2979 = _2846;
                        _2980 = _2981;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2846;
                frontier_phi_60_61_ladder_1 = _2844;
                frontier_phi_60_61_ladder_2 = _2840;
                frontier_phi_60_61_ladder_3 = _2838;
                frontier_phi_60_61_ladder_4 = _2836;
                frontier_phi_60_61_ladder_5 = _2842;
            }
            else
            {
                frontier_phi_60_61_ladder = _2732;
                frontier_phi_60_61_ladder_1 = _2730;
                frontier_phi_60_61_ladder_2 = _2726;
                frontier_phi_60_61_ladder_3 = _2724;
                frontier_phi_60_61_ladder_4 = _2722;
                frontier_phi_60_61_ladder_5 = _2728;
            }
            _2835 = frontier_phi_60_61_ladder_4;
            _2837 = frontier_phi_60_61_ladder_3;
            _2839 = frontier_phi_60_61_ladder_2;
            _2841 = frontier_phi_60_61_ladder_5;
            _2843 = frontier_phi_60_61_ladder_1;
            _2845 = frontier_phi_60_61_ladder;
        }
        float _2850 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2655 = (_2850 * _2841) + _2186;
        _2657 = (_2850 * _2843) + _2188;
        _2659 = (_2850 * _2845) + _2190;
        _2661 = ((_2835 * 0.039999999105930328369140625) * _2850) + _2509;
        _2663 = ((_2837 * 0.039999999105930328369140625) * _2850) + _2511;
        _2665 = ((_2839 * 0.039999999105930328369140625) * _2850) + _2513;
    }
    else
    {
        _2655 = _2186;
        _2657 = _2188;
        _2659 = _2190;
        _2661 = _2509;
        _2663 = _2511;
        _2665 = _2513;
    }
    float _4538 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4549 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4560 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    uint _2685 = _228 + 6u;
    float _2693 = _584 / cbSceneParam._m0[86u].x;
    float _2694 = _585 / cbSceneParam._m0[86u].y;
    vec4 _2708 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, (log2((isnan(cbSceneParam._m0[77u].w) ? _517 : (isnan(_517) ? cbSceneParam._m0[77u].w : min(_517, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2710 = _2708.x;
    float _2711 = _2708.y;
    float _2712 = _2708.z;
    float _2713 = _2708.w;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    if (_517 > cbSceneParam._m0[78u].w)
    {
        float _2747 = isnan(_517) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _517 : min(cbSceneParam._m0[80u].w, _517));
        float _2748 = _2747 / _517;
        float _2759 = _2748 * _569;
        float _2760 = _570 * _2748;
        float _2761 = (-0.0) - _2760;
        float _2763 = _2748 * _571;
        float _2765 = (cbSceneParam._m0[77u].w * _2761) / _2747;
        float _2766 = _2765 + cbSceneParam._m0[79u].w;
        float _2767 = cbSceneParam._m0[79u].w - _2760;
        float _2773 = sqrt(((_2759 * _2759) + (_2760 * _2760)) + (_2763 * _2763));
        float _2776 = (1.0 - (cbSceneParam._m0[77u].w / _2747)) * _2773;
        float _2781 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2783 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2936;
        if (abs((_2761 - _2765) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2936 = ((((_2766 > 0.0) ? exp2(_2781 * _2766) : (2.0 - exp2(_2783 * _2766))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2776;
        }
        else
        {
            float _2896 = 1.0 / cbSceneParam._m0[80u].x;
            float _2897 = isnan(_2767) ? _2766 : (isnan(_2766) ? _2767 : max(_2766, _2767));
            float _2898 = isnan(_2767) ? _2766 : (isnan(_2766) ? _2767 : min(_2766, _2767));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            _2936 = ((abs(_2773 / _2761) * cbSceneParam._m0[80u].y) * ((((_2907 - _2908) * 2.0) - ((exp2(_2781 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0)))) - exp2(_2781 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))))) * _2896)) - ((exp2(_2783 * _2907) - exp2(_2783 * _2908)) * _2896))) + (_2776 * cbSceneParam._m0[80u].z);
        }
        vec4 _2938 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, 1.0), 0.0);
        float _2947 = exp2((_2936 * (-1.44269502162933349609375)) * (1.0 - _2938.w));
        float _2948 = log2(_2947);
        float _2964 = log2(_2713);
        _2785 = (exp2(_2964 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].x)) * _2938.x) / cbSceneParam._m0[78u].x)) + _2710;
        _2787 = (exp2(_2964 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].y)) * _2938.y) / cbSceneParam._m0[78u].y)) + _2711;
        _2789 = (exp2(_2964 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].z)) * _2938.z) / cbSceneParam._m0[78u].z)) + _2712;
        _2791 = _2947 * _2713;
    }
    else
    {
        _2785 = _2710;
        _2787 = _2711;
        _2789 = _2712;
        _2791 = _2713;
    }
    float _2803 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2804 = _2803 == 3.0;
    float _2805 = log2(_2791);
    float _2812 = exp2(_2805 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2655 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _647))) + ((_2661 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1452)) * cbPerFrame._m0[3u].x));
    float _2813 = exp2(_2805 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2657 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _647))) + ((_2663 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1452)) * cbPerFrame._m0[3u].x));
    float _2814 = exp2(_2805 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2659 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _647))) + ((_2665 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1452)) * cbPerFrame._m0[3u].x));
    float _2823 = (_2803 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2823 * (_2804 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2785)));
    SV_Target.y = _2823 * (_2804 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2787)));
    SV_Target.z = _2823 * (_2804 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2789)));
    SV_Target.w = cbInstanceData._m0[_2685].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2685].w;
}


