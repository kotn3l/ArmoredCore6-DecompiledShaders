#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1522;
float _3902;
float _3903;
float _3904;
float _3905;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3914 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3925 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3936 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _426 = _424.x;
    float _438 = dot(vec4(_426, _424.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _455 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _389.x) * 2.0) - ((((_426 - _438) * cbMtdParam._m0[24u].z) + _438) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3947 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _463 = (_456 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _464 = (_456 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _465 = (_456 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _504 = _502.x;
    float _514 = dot(vec4(_504, _502.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _528 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _389.y) * 2.0) - ((((_504 - _514) * cbMtdParam._m0[24u].z) + _514) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3958 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _536 = (_529 * ((_482.x * cbMtdParam._m0[13u].x) - _463)) + _463;
    float _537 = (_529 * ((_482.y * cbMtdParam._m0[13u].y) - _464)) + _464;
    float _538 = (_529 * ((_482.z * cbMtdParam._m0[13u].z) - _465)) + _465;
    float _542 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _536;
    float _545 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _537;
    float _548 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _538;
    float _555 = ((_536 - _542) * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) + _542;
    float _556 = ((_537 - _545) * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) + _545;
    float _557 = ((_538 - _548) * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) + _548;
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _639 = _637.x;
    float _640 = _637.y;
    float _641 = _637.z;
    float _648 = ((_620.x - _639) * _456) + _639;
    float _649 = ((_620.y - _640) * _456) + _640;
    float _650 = ((_620.z - _641) * _456) + _641;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _675 = ((_662.z - _650) * _529) + _650;
    float _678 = ((((_662.x - _648) * _529) + _648) * 2.0) + (-1.0);
    float _679 = ((((_662.y - _649) * _529) + _649) * 2.0) + (-1.0);
    float _680 = dot(vec2(_678, _679), vec2(_678, _679));
    float _3969 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _685 = sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _715 = (_678 + ((((_595.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_703.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _716 = (_679 + ((((_595.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_703.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _719 = fma(_685, _256, fma(_716, _263, _715 * _249));
    float _722 = fma(_685, _257, fma(_716, _264, _715 * _250));
    float _725 = fma(_685, _258, fma(_716, _265, _715 * _251));
    float _729 = inversesqrt(dot(vec3(_719, _722, _725), vec3(_719, _722, _725)));
    vec4 _756 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _758 = _756.x;
    float _759 = 1.0 - _758;
    float _765 = (cbMtdParam._m0[19u].x + dot(vec4(_729 * _719, _729 * _722, _729 * _725, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_758 - _759) * cbMtdParam._m0[24u].w) + _759) * cbMtdParam._m0[21u].z);
    float _3980 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _766 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _768 = (-0.0) - cbMtdParam._m0[24u].x;
    float _770 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _770 : (isnan(_770) ? 1.0 : min(_770, 1.0));
    float _778 = _766 - ((_766 * TEXCOORD_8.x) * _771);
    float _779 = _766 - ((_766 * TEXCOORD_8.y) * _771);
    float _780 = _766 - ((_766 * TEXCOORD_8.z) * _771);
    float _787 = (_778 * ((_576.x * cbMtdParam._m0[18u].x) - _555)) + _555;
    float _788 = (_779 * ((_576.y * cbMtdParam._m0[18u].y) - _556)) + _556;
    float _789 = (_780 * ((_576.z * cbMtdParam._m0[18u].z) - _557)) + _557;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _803 = _801.x;
    float _804 = 1.0 - _803;
    float _830 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_803 - _804) * cbMtdParam._m0[24u].y) + _804) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4001 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _831 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _839 = ((((cbMtdParam._m0[10u].x - _787) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _831) + _787;
    float _840 = ((((cbMtdParam._m0[10u].y - _788) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _831) + _788;
    float _841 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _789)) * _831) + _789;
    float _846 = (((_595.z - _675) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _675;
    float _850 = ((_703.z - _846) * cbMtdParam._m0[19u].w) + _846;
    vec4 _864 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _871 = (_864.x * 2.0) + (-1.0);
    float _872 = (_864.y * 2.0) + (-1.0);
    float _873 = dot(vec2(_871, _872), vec2(_871, _872));
    float _4012 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _881 = ((_864.z - _850) * _778) + _850;
    float _884 = ((cbMtdParam._m0[23u].y - _881) * _831) + _881;
    vec4 _905 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _911 = (_905.x * 2.0) + (-1.0);
    float _912 = (_905.y * 2.0) + (-1.0);
    float _913 = dot(vec2(_911, _912), vec2(_911, _912));
    float _4023 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _928 = ((sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) - _685) * _780) + _685;
    float _931 = (((_871 - _715) * _778) + _715) + (cbMtdParam._m0[21u].x * _715);
    float _932 = (((_872 - _716) * _779) + _716) + (cbMtdParam._m0[21u].x * _716);
    float _943 = (((_911 - _931) + (_931 * cbMtdParam._m0[22u].z)) * _831) + _931;
    float _944 = (((_912 - _932) + (_932 * cbMtdParam._m0[22u].z)) * _831) + _932;
    float _945 = (_831 * (sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) - _928)) + _928;
    float _947 = cbMtdParam._m0[22u].x + _703.w;
    float _950 = fma(_945, _256, fma(_944, _263, _943 * _249));
    float _953 = fma(_945, _257, fma(_944, _264, _943 * _250));
    float _956 = fma(_945, _258, fma(_944, _265, _943 * _251));
    float _960 = inversesqrt(dot(vec3(_950, _953, _956), vec3(_950, _953, _956)));
    float _961 = _960 * _950;
    float _962 = _960 * _953;
    float _963 = _960 * _956;
    float _4034 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _964 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4056 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4067 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4078 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _982 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1033 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1023);
    float _1034 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1023);
    float _1035 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1023);
    float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
    float _1040 = _1033 * _1039;
    float _1041 = _1034 * _1039;
    float _1042 = _1035 * _1039;
    vec4 _1047 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1049 = _1047.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1203 = sqrt(((_1033 * _1033) + (_1034 * _1034)) + (_1035 * _1035));
        float _1209 = (cbMatDynParam._m0[5u].x * _1203) + cbMatDynParam._m0[5u].y;
        float _4089 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1214 = (cbMatDynParam._m0[5u].z * _1203) + cbMatDynParam._m0[5u].w;
        float _4100 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) - _1210)) + _1210) < ((_1049 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1060 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1061 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1079 = fma(_963, cbSceneParam._m0[5u].z, fma(_962, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _961));
    float _1082 = fma(_963, cbSceneParam._m0[6u].z, fma(_962, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _961));
    float _1085 = fma(_963, cbSceneParam._m0[7u].z, fma(_962, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _961));
    uint _1098 = _287 + 9u;
    uint _1099 = _1098 + uint(cbMatDynParam._m0[0u].w);
    float _1105 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_1099].x;
    float _1106 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_1099].y;
    float _1107 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * cbInstanceData._m0[_1099].z;
    float _4111 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1109 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1110 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    vec4 _1119 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1060, cbSceneParam._m0[86u].y * _1061));
    float _1123 = ((isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * TEXCOORD_5.w) * _1119.x;
    float _1124 = dot(vec3(_961, _962, _963), vec3(_1040, _1041, _1042));
    float _1127 = _1124 * 2.0;
    float _1131 = (_1127 * _961) - _1040;
    float _1132 = (_1127 * _962) - _1041;
    float _1133 = (_1127 * _963) - _1042;
    float _1137 = abs(dot(vec3(_1040, _1041, _1042), vec3(_961, _962, _963)));
    float _4144 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1139 = sqrt(_964);
    float _1152 = exp2((_1139 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1139 * 3.0));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1192 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1521;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1246 = fma(_1192, cbModelParam._m0[26u].z, fma(_1188, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184));
        float _1250 = fma(_1192, cbModelParam._m0[27u].z, fma(_1188, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184));
        float _1254 = fma(_1192, cbModelParam._m0[28u].z, fma(_1188, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184));
        float _1279 = _1184 + _961;
        float _1280 = _1188 + _962;
        float _1281 = _1192 + _963;
        float _1291 = fma(_1281, cbModelParam._m0[26u].z, fma(_1280, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1279)) - _1246;
        float _1292 = fma(_1281, cbModelParam._m0[27u].z, fma(_1280, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1279)) - _1250;
        float _1293 = fma(_1281, cbModelParam._m0[28u].z, fma(_1280, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1279)) - _1254;
        float _1297 = inversesqrt(dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293)));
        float _1310 = ((_1297 * _1291) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1246 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1297 * _1292) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1250 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1297 * _1293) / cbModelParam._m0[34u].z) + ((((((_1254 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1349 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1315.x + (-0.5));
        float _1351 = _1349 * (_1315.y + (-0.5));
        float _1352 = _1349 * (_1315.z + (-0.5));
        float _1359 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1322.x + (-0.5));
        float _1361 = _1359 * (_1322.y + (-0.5));
        float _1362 = _1359 * (_1322.z + (-0.5));
        float _1369 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1329.x + (-0.5));
        float _1371 = _1369 * (_1329.y + (-0.5));
        float _1372 = _1369 * (_1329.z + (-0.5));
        float _1379 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1336.x + (-0.5));
        float _1381 = _1379 * (_1336.y + (-0.5));
        float _1382 = _1379 * (_1336.z + (-0.5));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = _1350 * 0.5;
        float _1387 = _1360 * 0.5;
        float _1388 = _1370 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1403 = (dot(vec3(_961, _962, _963), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1413 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4192 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1415 + 1.0))) + _1420) * _1383;
        float _1430 = _1351 * 0.5;
        float _1431 = _1361 * 0.5;
        float _1432 = _1371 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_961, _962, _963), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4225 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1457 + 1.0))) + _1462) * _1384;
        float _1472 = _1352 * 0.5;
        float _1473 = _1362 * 0.5;
        float _1474 = _1372 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_961, _962, _963), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4258 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1499 + 1.0))) + _1504) * _1385;
        _1521 = _1352;
        _1523 = _1351;
        _1524 = _1350;
        _1525 = _1362;
        _1526 = _1361;
        _1527 = _1360;
        _1528 = _1372;
        _1529 = _1371;
        _1530 = _1370;
        _1531 = _1385;
        _1532 = _1384;
        _1533 = _1383;
        _1534 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1535 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1536 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
    }
    else
    {
        _1521 = _1522;
        _1523 = _1522;
        _1524 = _1522;
        _1525 = _1522;
        _1526 = _1522;
        _1527 = _1522;
        _1528 = _1522;
        _1529 = _1522;
        _1530 = _1522;
        _1531 = _1522;
        _1532 = _1522;
        _1533 = _1522;
        _1534 = 0.0;
        _1535 = 0.0;
        _1536 = 0.0;
    }
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1563 = fma(_1192, cbModelParam._m0[30u].z, fma(_1188, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184));
        float _1567 = fma(_1192, cbModelParam._m0[31u].z, fma(_1188, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184));
        float _1571 = fma(_1192, cbModelParam._m0[32u].z, fma(_1188, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184));
        float _1594 = _1184 + _961;
        float _1595 = _1188 + _962;
        float _1596 = _1192 + _963;
        float _1606 = fma(_1596, cbModelParam._m0[30u].z, fma(_1595, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1594)) - _1563;
        float _1607 = fma(_1596, cbModelParam._m0[31u].z, fma(_1595, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1594)) - _1567;
        float _1608 = fma(_1596, cbModelParam._m0[32u].z, fma(_1595, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1594)) - _1571;
        float _1612 = inversesqrt(dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608)));
        float _1625 = ((_1612 * _1606) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1563 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1626 = ((_1612 * _1607) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1567 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1627 = ((_1612 * _1608) / cbModelParam._m0[35u].z) + ((((((_1571 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        float _1662 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1629.x + (-0.5));
        float _1664 = _1662 * (_1629.y + (-0.5));
        float _1665 = _1662 * (_1629.z + (-0.5));
        float _1672 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1636.x + (-0.5));
        float _1674 = _1672 * (_1636.y + (-0.5));
        float _1675 = _1672 * (_1636.z + (-0.5));
        float _1682 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1643.x + (-0.5));
        float _1684 = _1682 * (_1643.y + (-0.5));
        float _1685 = _1682 * (_1643.z + (-0.5));
        float _1692 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1650.x + (-0.5));
        float _1694 = _1692 * (_1650.y + (-0.5));
        float _1695 = _1692 * (_1650.z + (-0.5));
        float _1696 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1697 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1698 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1699 = _1663 * 0.5;
        float _1700 = _1673 * 0.5;
        float _1701 = _1683 * 0.5;
        float _1702 = dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701));
        float _1707 = (_1702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1702);
        float _1715 = (dot(vec3(_961, _962, _963), vec3(_1707 * _1699, _1707 * _1700, _1707 * _1701)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1724 = sqrt(((_1700 * _1700) + (_1699 * _1699)) + (_1701 * _1701)) / (_1696 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1726 = _1725 * 2.0;
        float _1730 = (1.0 - _1725) / (_1725 + 1.0);
        float _4321 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1740 = ((((1.0 - _1731) * (_1726 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1726 + 1.0))) + _1731) * _1696;
        float _1741 = _1664 * 0.5;
        float _1742 = _1674 * 0.5;
        float _1743 = _1684 * 0.5;
        float _1744 = dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743));
        float _1749 = (_1744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1744);
        float _1757 = (dot(vec3(_961, _962, _963), vec3(_1749 * _1741, _1749 * _1742, _1749 * _1743)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1766 = sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743)) / (_1697 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1768 = _1767 * 2.0;
        float _1772 = (1.0 - _1767) / (_1767 + 1.0);
        float _4354 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1782 = ((((1.0 - _1773) * (_1768 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1768 + 1.0))) + _1773) * _1697;
        float _1783 = _1665 * 0.5;
        float _1784 = _1675 * 0.5;
        float _1785 = _1685 * 0.5;
        float _1786 = dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785));
        float _1791 = (_1786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1786);
        float _1799 = (dot(vec3(_961, _962, _963), vec3(_1791 * _1783, _1791 * _1784, _1791 * _1785)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1808 = sqrt(((_1784 * _1784) + (_1783 * _1783)) + (_1785 * _1785)) / (_1698 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1810 = _1809 * 2.0;
        float _1814 = (1.0 - _1809) / (_1809 + 1.0);
        float _4387 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1824 = ((((1.0 - _1815) * (_1810 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1810 + 1.0))) + _1815) * _1698;
        _1832 = _1665;
        _1833 = _1664;
        _1834 = _1663;
        _1835 = _1675;
        _1836 = _1674;
        _1837 = _1673;
        _1838 = _1685;
        _1839 = _1684;
        _1840 = _1683;
        _1841 = _1698;
        _1842 = _1697;
        _1843 = _1696;
        _1844 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)));
        _1845 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)));
        _1846 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)));
    }
    else
    {
        _1832 = _1522;
        _1833 = _1522;
        _1834 = _1522;
        _1835 = _1522;
        _1836 = _1522;
        _1837 = _1522;
        _1838 = _1522;
        _1839 = _1522;
        _1840 = _1522;
        _1841 = _1522;
        _1842 = _1522;
        _1843 = _1522;
        _1844 = 0.0;
        _1845 = 0.0;
        _1846 = 0.0;
    }
    float _1856 = (cbModelParam._m0[1u].x * (_1844 - _1534)) + _1534;
    float _1857 = (cbModelParam._m0[1u].x * (_1845 - _1535)) + _1535;
    float _1858 = (cbModelParam._m0[1u].x * (_1846 - _1536)) + _1536;
    float _1879 = fma(_1858, cbSceneParam._m0[89u].z, fma(_1857, cbSceneParam._m0[89u].y, _1856 * cbSceneParam._m0[89u].x));
    float _1882 = fma(_1858, cbSceneParam._m0[90u].z, fma(_1857, cbSceneParam._m0[90u].y, _1856 * cbSceneParam._m0[90u].x));
    float _1885 = fma(_1858, cbSceneParam._m0[91u].z, fma(_1857, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1856));
    float _1900 = _1131 * 0.5;
    float _1901 = _1132 * 0.5;
    float _1902 = _1133 * 0.5;
    float _1903 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1834, _1837, _1840, _1843));
    float _1906 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1833, _1836, _1839, _1842));
    float _1909 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1832, _1835, _1838, _1841));
    float _1943;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1916 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1521, _1525, _1528, _1531));
        float _1920 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1523, _1526, _1529, _1532));
        float _1924 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1524, _1527, _1530, _1533));
        float _1931 = dot(vec4(cbModelParam._m0[39u]), vec4(_1900, _1901, _1902, 1.0));
        _1943 = dot(vec3(isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1931) ? 0.0 : (isnan(0.0) ? _1931 : max(0.0, _1931))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1943 = 1.0;
    }
    float _1954;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1945 = dot(vec4(cbModelParam._m0[40u]), vec4(_1900, _1901, _1902, 1.0));
        _1954 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1945) ? 0.0 : (isnan(0.0) ? _1945 : max(0.0, _1945))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1954 = 1.0;
    }
    float _1958 = (_1954 * cbModelParam._m0[1u].x) + (_1943 * (1.0 - cbModelParam._m0[1u].x));
    float _1968 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _964);
    float _1969 = isnan(_1968) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1968 : min(cbModelParam._m0[25u].z, _1968));
    float _2049;
    float _2051;
    float _2053;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2016 = fma(_1192, cbModelParam._m0[13u].z, fma(_1188, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1184)) + cbModelParam._m0[13u].w;
        float _2020 = fma(_1192, cbModelParam._m0[14u].z, fma(_1188, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1184)) + cbModelParam._m0[14u].w;
        float _2024 = fma(_1192, cbModelParam._m0[15u].z, fma(_1188, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1184)) + cbModelParam._m0[15u].w;
        float _2027 = fma(_1133, cbModelParam._m0[13u].z, fma(_1132, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1131));
        float _2030 = fma(_1133, cbModelParam._m0[14u].z, fma(_1132, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1131));
        float _2033 = fma(_1133, cbModelParam._m0[15u].z, fma(_1132, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1131));
        float _2061;
        if (_2027 > 0.0)
        {
            _2061 = abs((1.0 - _2016) / _2027);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2016 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2061 = frontier_phi_17_15_ladder;
        }
        float _2282;
        if (_2030 > 0.0)
        {
            _2282 = abs((1.0 - _2020) / _2030);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2020 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2282 = frontier_phi_26_22_ladder;
        }
        float _2528;
        if (_2033 > 0.0)
        {
            _2528 = abs((1.0 - _2024) / _2033);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2024 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2528 = frontier_phi_38_33_ladder;
        }
        float _2530 = isnan(_2282) ? _2061 : (isnan(_2061) ? _2282 : min(_2061, _2282));
        float _2531 = isnan(_2528) ? _2530 : (isnan(_2530) ? _2528 : min(_2530, _2528));
        float _2535 = (_2531 * _2027) + _2016;
        float _2536 = (_2531 * _2030) + _2020;
        float _2537 = (_2531 * _2033) + _2024;
        float _2538 = _2531 * 9.9999997473787516355514526367188e-05;
        float _2540 = (-1.0) - _2538;
        float _2542 = _2538 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2537 > _2542) || ((_2537 < _2540) || ((_2536 > _2542) || ((_2536 < _2540) || ((_2535 < _2540) || (_2535 > _2542))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2537, cbModelParam._m0[9u].z, fma(_2536, cbModelParam._m0[9u].y, _2535 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2537, cbModelParam._m0[10u].z, fma(_2536, cbModelParam._m0[10u].y, _2535 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2537, cbModelParam._m0[11u].z, fma(_2536, cbModelParam._m0[11u].y, _2535 * cbModelParam._m0[11u].x))), _1969);
            frontier_phi_16_38_ladder = _2661.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2661.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2661.x * cbModelParam._m0[1u].y;
        }
        _2049 = frontier_phi_16_38_ladder_2;
        _2051 = frontier_phi_16_38_ladder_1;
        _2053 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2037 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1131, _1132, _1133), _1969);
        _2049 = _2037.x * cbModelParam._m0[1u].y;
        _2051 = _2037.y * cbModelParam._m0[1u].y;
        _2053 = _2037.z * cbModelParam._m0[1u].y;
    }
    float _2057 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _964);
    float _2058 = isnan(_2057) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2057 : min(cbModelParam._m0[25u].w, _2057));
    float _2147;
    float _2149;
    float _2151;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2111 = fma(_1192, cbModelParam._m0[21u].z, fma(_1188, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1184)) + cbModelParam._m0[21u].w;
        float _2115 = fma(_1192, cbModelParam._m0[22u].z, fma(_1188, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1184)) + cbModelParam._m0[22u].w;
        float _2119 = fma(_1192, cbModelParam._m0[23u].z, fma(_1188, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1184)) + cbModelParam._m0[23u].w;
        float _2122 = fma(_1133, cbModelParam._m0[21u].z, fma(_1132, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1131));
        float _2125 = fma(_1133, cbModelParam._m0[22u].z, fma(_1132, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1131));
        float _2128 = fma(_1133, cbModelParam._m0[23u].z, fma(_1132, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1131));
        float _2287;
        if (_2122 > 0.0)
        {
            _2287 = abs((1.0 - _2111) / _2122);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2111 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2287 = frontier_phi_28_24_ladder;
        }
        float _2555;
        if (_2125 > 0.0)
        {
            _2555 = abs((1.0 - _2115) / _2125);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2115 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2555 = frontier_phi_40_35_ladder;
        }
        float _2760;
        if (_2128 > 0.0)
        {
            _2760 = abs((1.0 - _2119) / _2128);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2119 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2760 = frontier_phi_49_46_ladder;
        }
        float _2762 = isnan(_2555) ? _2287 : (isnan(_2287) ? _2555 : min(_2287, _2555));
        float _2763 = isnan(_2760) ? _2762 : (isnan(_2762) ? _2760 : min(_2762, _2760));
        float _2767 = (_2763 * _2122) + _2111;
        float _2768 = (_2763 * _2125) + _2115;
        float _2769 = (_2763 * _2128) + _2119;
        float _2770 = _2763 * 9.9999997473787516355514526367188e-05;
        float _2771 = (-1.0) - _2770;
        float _2773 = _2770 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2769 > _2773) || ((_2769 < _2771) || ((_2768 > _2773) || ((_2768 < _2771) || ((_2767 < _2771) || (_2767 > _2773))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2769, cbModelParam._m0[17u].z, fma(_2768, cbModelParam._m0[17u].y, _2767 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2769, cbModelParam._m0[18u].z, fma(_2768, cbModelParam._m0[18u].y, _2767 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2769, cbModelParam._m0[19u].z, fma(_2768, cbModelParam._m0[19u].y, _2767 * cbModelParam._m0[19u].x))), _2058);
            frontier_phi_25_49_ladder = _2968.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2968.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2968.x * cbModelParam._m0[1u].z;
        }
        _2147 = frontier_phi_25_49_ladder_2;
        _2149 = frontier_phi_25_49_ladder_1;
        _2151 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2131 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1131, _1132, _1133), _2058);
        _2147 = _2131.x * cbModelParam._m0[1u].z;
        _2149 = _2131.y * cbModelParam._m0[1u].z;
        _2151 = _2131.z * cbModelParam._m0[1u].z;
    }
    float _2163 = ((((1.0 - _1152) * ((_1139 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1152 * _1139)) * _1123;
    float _2164 = _2163 * ((cbModelParam._m0[1u].w * (_2147 - _2049)) + _2049);
    float _2165 = _2163 * ((cbModelParam._m0[1u].w * (_2149 - _2051)) + _2051);
    float _2166 = _2163 * ((cbModelParam._m0[1u].w * (_2151 - _2053)) + _2053);
    float _2169 = fma(_2166, cbSceneParam._m0[89u].z, fma(_2165, cbSceneParam._m0[89u].y, _2164 * cbSceneParam._m0[89u].x));
    float _2172 = fma(_2166, cbSceneParam._m0[90u].z, fma(_2165, cbSceneParam._m0[90u].y, _2164 * cbSceneParam._m0[90u].x));
    float _2175 = fma(_2166, cbSceneParam._m0[91u].z, fma(_2165, cbSceneParam._m0[91u].y, _2164 * cbSceneParam._m0[91u].x));
    vec4 _2183 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1060, _1061));
    float _2185 = _2183.w;
    float _2197 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2185);
    float _2198 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2185);
    float _2199 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2185);
    uvec4 _2203 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2205 = _2203.x * 14u;
    uint _2206 = _2205 + 13u;
    float _2213 = _1123 + (-1.0);
    float _2218 = (cbLight._m0[_2206].x * _2213) + 1.0;
    float _2219 = (cbLight._m0[_2206].y * _2213) + 1.0;
    float _2220 = (cbLight._m0[_2206].z * _2213) + 1.0;
    float _2221 = (cbLight._m0[_2206].w * _2213) + 1.0;
    uint _2222 = _2205 + 5u;
    float _2228 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2232 = _2205 + 4u;
    float _2241 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
    uint _2245 = _2205 | 1u;
    float _2256 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_961, _962, _963));
    float _2259 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_961, _962, _963));
    float _4523 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _4534 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2264 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2266 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2273 = ((cbLight._m0[_2222].x * _2228) * _2266) + (((cbLight._m0[_2232].x * _2197) * _2241) * _2264);
    float _2274 = ((_2228 * cbLight._m0[_2222].y) * _2266) + (((cbLight._m0[_2232].y * _2198) * _2241) * _2264);
    float _2275 = ((_2228 * cbLight._m0[_2222].z) * _2266) + (((cbLight._m0[_2232].z * _2199) * _2241) * _2264);
    uvec4 _2279 = floatBitsToUint(cbLight._m0[_2205 + 12u]);
    bool _2281 = _2279.x == 0u;
    float _2292;
    float _2294;
    float _2296;
    if (_2281)
    {
        _2292 = _2273;
        _2294 = _2274;
        _2296 = _2275;
    }
    else
    {
        uint _2300 = _2205 + 6u;
        float _2316 = (dot(vec3(cbLight._m0[_2205 + 2u].xyz), vec3(_961, _962, _963)) * 0.5) + 0.5;
        float _2317 = _2316 * _2316;
        float _4545 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2318 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2319 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2292 = (((cbLight._m0[_2300].x * 0.3183098733425140380859375) * _2318) * _2319) + _2273;
        _2294 = (((cbLight._m0[_2300].y * 0.3183098733425140380859375) * _2318) * _2319) + _2274;
        _2296 = (((cbLight._m0[_2300].z * 0.3183098733425140380859375) * _2318) * _2319) + _2275;
    }
    bool _2299 = _2279.y == 0u;
    float _2337;
    float _2339;
    float _2341;
    if (_2299)
    {
        _2337 = _2292;
        _2339 = _2294;
        _2341 = _2296;
    }
    else
    {
        uint _2499 = _2205 + 7u;
        float _2515 = (dot(vec3(cbLight._m0[_2205 + 3u].xyz), vec3(_961, _962, _963)) * 0.5) + 0.5;
        float _2516 = _2515 * _2515;
        float _4561 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2517 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2518 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2337 = (((cbLight._m0[_2499].x * 0.3183098733425140380859375) * _2517) * _2518) + _2292;
        _2339 = (((cbLight._m0[_2499].y * 0.3183098733425140380859375) * _2517) * _2518) + _2294;
        _2341 = (((cbLight._m0[_2499].z * 0.3183098733425140380859375) * _2517) * _2518) + _2296;
    }
    uint _2344 = _2205 + 8u;
    float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _964) * 0.949999988079071044921875);
    float _2358 = _2357 * _2357;
    float _2359 = cbLight._m0[_2205].x + _1040;
    float _2360 = cbLight._m0[_2205].y + _1041;
    float _2361 = cbLight._m0[_2205].z + _1042;
    float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
    float _2366 = _2365 * _2359;
    float _2367 = _2365 * _2360;
    float _2368 = _2365 * _2361;
    float _2369 = dot(vec3(_961, _962, _963), vec3(cbLight._m0[_2205].xyz));
    float _4577 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _4588 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _2373 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2374 = dot(vec3(_961, _962, _963), vec3(_2366, _2367, _2368));
    float _4599 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2378 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2366, _2367, _2368));
    float _4610 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2382 = _2358 * _2358;
    float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
    float _2397 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2398 = 1.0 - _2358;
    float _2409 = (0.5 / (((_2373 * ((_2372 * _2398) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2373 * _2398) + _2358) * _2372))) * _2372;
    float _4621 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2411 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
    uint _2425 = _2205 + 9u;
    float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _964) * 0.949999988079071044921875);
    float _2437 = _2436 * _2436;
    float _2438 = cbLight._m0[_2245].x + _1040;
    float _2439 = cbLight._m0[_2245].y + _1041;
    float _2440 = cbLight._m0[_2245].z + _1042;
    float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
    float _2445 = _2444 * _2438;
    float _2446 = _2444 * _2439;
    float _2447 = _2444 * _2440;
    float _2448 = dot(vec3(_961, _962, _963), vec3(cbLight._m0[_2245].xyz));
    float _4632 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2451 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2452 = dot(vec3(_961, _962, _963), vec3(_2445, _2446, _2447));
    float _4643 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2456 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2445, _2446, _2447));
    float _4654 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2460 = _2437 * _2437;
    float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
    float _2473 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2474 = 1.0 - _2437;
    float _2484 = (0.5 / (((_2373 * ((_2451 * _2474) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2373 * _2474) + _2437) * _2451))) * _2451;
    float _4665 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2486 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
    float _2496 = (((_2473 * cbLight._m0[_2425].x) * _2486) * _2228) + ((((cbLight._m0[_2344].x * _2197) * _2397) * _2411) * _2241);
    float _2497 = (((_2473 * cbLight._m0[_2425].y) * _2486) * _2228) + ((((cbLight._m0[_2344].y * _2198) * _2397) * _2411) * _2241);
    float _2498 = (((_2473 * cbLight._m0[_2425].z) * _2486) * _2228) + ((((cbLight._m0[_2344].z * _2199) * _2397) * _2411) * _2241);
    float _2560;
    float _2562;
    float _2564;
    if (_2281)
    {
        _2560 = _2496;
        _2562 = _2497;
        _2564 = _2498;
    }
    else
    {
        uint _2566 = _2205 + 2u;
        uint _2570 = _2205 + 10u;
        float _2584 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2566].w)) * _964) * 0.949999988079071044921875);
        float _2585 = _2584 * _2584;
        float _2586 = cbLight._m0[_2566].x + _1040;
        float _2587 = cbLight._m0[_2566].y + _1041;
        float _2588 = cbLight._m0[_2566].z + _1042;
        float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
        float _2593 = _2592 * _2586;
        float _2594 = _2592 * _2587;
        float _2595 = _2592 * _2588;
        float _2596 = dot(vec3(_961, _962, _963), vec3(cbLight._m0[_2566].xyz));
        float _4676 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2600 = dot(vec3(_961, _962, _963), vec3(_2593, _2594, _2595));
        float _4687 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2604 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_2593, _2594, _2595));
        float _4698 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2608 = _2585 * _2585;
        float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
        float _2621 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2622 = 1.0 - _2585;
        float _2632 = (0.5 / (((_2373 * ((_2599 * _2622) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2373 * _2622) + _2585) * _2599))) * _2599;
        float _4709 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2560 = (((_2621 * cbLight._m0[_2570].x) * _2634) * _2635) + _2496;
        _2562 = (((_2621 * cbLight._m0[_2570].y) * _2634) * _2635) + _2497;
        _2564 = (((_2621 * cbLight._m0[_2570].z) * _2634) * _2635) + _2498;
    }
    float _2670;
    float _2672;
    float _2674;
    if (_2299)
    {
        _2670 = _2560;
        _2672 = _2562;
        _2674 = _2564;
    }
    else
    {
        uint _2681 = _2205 + 3u;
        uint _2685 = _2205 + 11u;
        float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2681].w)) * _964) * 0.949999988079071044921875);
        float _2700 = _2699 * _2699;
        float _2701 = cbLight._m0[_2681].x + _1040;
        float _2702 = cbLight._m0[_2681].y + _1041;
        float _2703 = cbLight._m0[_2681].z + _1042;
        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
        float _2708 = _2707 * _2701;
        float _2709 = _2707 * _2702;
        float _2710 = _2707 * _2703;
        float _2711 = dot(vec3(_961, _962, _963), vec3(cbLight._m0[_2681].xyz));
        float _4725 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2715 = dot(vec3(_961, _962, _963), vec3(_2708, _2709, _2710));
        float _4736 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2719 = dot(vec3(cbLight._m0[_2681].xyz), vec3(_2708, _2709, _2710));
        float _4747 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2723 = _2700 * _2700;
        float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
        float _2736 = (exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2737 = 1.0 - _2700;
        float _2747 = (0.5 / (((_2373 * ((_2714 * _2737) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2373 * _2737) + _2700) * _2714))) * _2714;
        float _4758 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2749 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
        float _2750 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2670 = (((_2736 * cbLight._m0[_2685].x) * _2749) * _2750) + _2560;
        _2672 = (((_2736 * cbLight._m0[_2685].y) * _2749) * _2750) + _2562;
        _2674 = (((_2736 * cbLight._m0[_2685].z) * _2749) * _2750) + _2564;
    }
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_2203.y == 0u)
    {
        float _2825 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2825;
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2825;
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2825;
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.x;
        uint _2852 = uint((float(_2840.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1061) / _2841))) + floor(float(uint(cbSceneParam._m0[85u].x * _1060) / _2841)));
        float _2862 = (log2(_2828 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2863 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        uint _2866 = uint(isnan(14.0) ? _2863 : (isnan(_2863) ? 14.0 : min(_2863, 14.0)));
        uvec4 _2871 = texelFetch(g_lightClusterGridBuffer, int(((_2866 << 2u) + (_2852 << 6u)) >> 2u));
        uint _2872 = _2871.x;
        uint _2873 = _2840.z;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((((1u << ((_2873 >> 4u) & 15u)) + 4294967295u) & _2872) == 0u) || ((_2873 & 240u) == 0u))
        {
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
        }
        else
        {
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            uint _3131 = 0u;
            uint _3140;
            bool _3141;
            for (;;)
            {
                _3140 = texelFetch(g_lightClassification, int((((_2866 << 5u) + (_2852 << 9u)) + (_3131 << 2u)) >> 2u)).x;
                _3141 = _3140 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3141)
                {
                    frontier_phi_66_pred = _3125;
                    frontier_phi_66_pred_1 = _3130;
                    frontier_phi_66_pred_2 = _3129;
                    frontier_phi_66_pred_3 = _3128;
                    frontier_phi_66_pred_4 = _3127;
                    frontier_phi_66_pred_5 = _3126;
                }
                else
                {
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    uint _3276;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3140;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    for (;;)
                    {
                        uint _3280 = uint(findLSB(_3276)) + (_3131 << 5u);
                        uint _3277 = (_3276 + 4294967295u) & _3276;
                        uint _3282 = _3280 * 48u;
                        vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 3u)).x));
                        uint _3302 = (_3280 * 48u) + 4u;
                        vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 3u)).x));
                        uint _3321 = (_3280 * 48u) + 8u;
                        vec3 _3332 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x));
                        float _3336 = _3296.x - _2826;
                        float _3337 = _3296.y - _2827;
                        float _3338 = _3296.z - _2828;
                        float _3339 = dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338));
                        float _3342 = inversesqrt(_3339);
                        float _3343 = _3342 * _3336;
                        float _3344 = _3342 * _3337;
                        float _3345 = _3342 * _3338;
                        float _3346 = dot(vec3(_1079, _1082, _1085), vec3(_3343, _3344, _3345));
                        float _3351 = 1.0 - (_3339 * _3296.w);
                        float _4784 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3352 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3353 = sqrt(_3339) * _3315.w;
                        float _3356 = 1.39999997615814208984375 / (_3353 + 1.39999997615814208984375);
                        float _3357 = _3356 * _3356;
                        float _3360 = ((1.0 - _3357) * _3346) + _3357;
                        float _3363 = _3353 * _3353;
                        float _3367 = ((isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))) * _3352) / ((_3363 * 0.699999988079071044921875) + 1.0);
                        float _3371 = (-0.0) - _2826;
                        float _3372 = (-0.0) - _2827;
                        float _3373 = (-0.0) - _2828;
                        float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                        float _3378 = _3377 * _3371;
                        float _3379 = _3377 * _3372;
                        float _3380 = _3377 * _3373;
                        float _3388 = exp2(log2(1.0 / ((_3363 * 3.5) + 5.0)) * 0.25);
                        float _3389 = 1.0 - _1139;
                        float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                        float _3397 = _3396 * _3396;
                        float _3398 = _3397 * _3397;
                        float _3399 = _3378 + _3343;
                        float _3400 = _3379 + _3344;
                        float _3401 = _3380 + _3345;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3409 = dot(vec3(_1079, _1082, _1085), vec3(_3378, _3379, _3380));
                        float _4800 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3412 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3413 = dot(vec3(_1079, _1082, _1085), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                        float _4811 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                        float _3421 = _3356 * _3397;
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3346) + _3422;
                        float _4822 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3426 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3427 = 1.0 - _3397;
                        float _3437 = (0.5 / (((_3426 * ((_3412 * _3427) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3397) * _3412))) * _3426;
                        float _4833 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3448 = (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3420 * _3420) * ((_3363 * 2.1991131305694580078125) + 3.141590118408203125))) * _3352;
                        _3200 = (_3367 * _3315.x) + _3273;
                        _3201 = (_3367 * _3315.y) + _3274;
                        _3202 = (_3367 * _3315.z) + _3275;
                        _3197 = (_3448 * _3332.x) + _3270;
                        _3198 = (_3448 * _3332.y) + _3271;
                        _3199 = (_3448 * _3332.z) + _3272;
                        if (_3277 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3277;
                        }
                    }
                    frontier_phi_66_pred = _3197;
                    frontier_phi_66_pred_1 = _3202;
                    frontier_phi_66_pred_2 = _3201;
                    frontier_phi_66_pred_3 = _3200;
                    frontier_phi_66_pred_4 = _3199;
                    frontier_phi_66_pred_5 = _3198;
                }
                _2974 = frontier_phi_66_pred;
                _2984 = frontier_phi_66_pred_1;
                _2982 = frontier_phi_66_pred_2;
                _2980 = frontier_phi_66_pred_3;
                _2978 = frontier_phi_66_pred_4;
                _2976 = frontier_phi_66_pred_5;
                uint _3132 = _3131 + 1u;
                if (_3132 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3125 = _2974;
                    _3126 = _2976;
                    _3127 = _2978;
                    _3128 = _2980;
                    _3129 = _2982;
                    _3130 = _2984;
                    _3131 = _3132;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
        }
        uvec4 _2987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2988 = _2987.z;
        uint _2990 = (_2988 >> 8u) & 15u;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        if (((4294967295u << _2990) & _2872) == 0u)
        {
            _3093 = _2973;
            _3095 = _2975;
            _3097 = _2977;
            _3099 = _2979;
            _3101 = _2981;
            _3103 = _2983;
        }
        else
        {
            float _3118 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
            float _3119 = _3118 * _2826;
            float _3120 = _3118 * _2827;
            float _3121 = _3118 * _2828;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2990 < ((_2988 >> 12u) & 15u))
            {
                float _3094;
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3253 = _2973;
                float _3254 = _2975;
                float _3255 = _2977;
                float _3256 = _2979;
                float _3257 = _2981;
                float _3258 = _2983;
                uint _3259 = _2990;
                uint _3268;
                bool _3269;
                for (;;)
                {
                    _3268 = texelFetch(g_lightClassification, int((((_2866 << 5u) + (_2852 << 9u)) + (_3259 << 2u)) >> 2u)).x;
                    _3269 = _3268 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3269)
                    {
                        frontier_phi_77_pred = _3258;
                        frontier_phi_77_pred_1 = _3257;
                        frontier_phi_77_pred_2 = _3256;
                        frontier_phi_77_pred_3 = _3255;
                        frontier_phi_77_pred_4 = _3254;
                        frontier_phi_77_pred_5 = _3253;
                    }
                    else
                    {
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3475 = _3253;
                        float _3476 = _3254;
                        float _3477 = _3255;
                        float _3478 = _3256;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        uint _3481 = _3268;
                        uint _3482;
                        vec4 _3507;
                        float _3508;
                        vec4 _3523;
                        vec3 _3535;
                        vec4 _3550;
                        vec4 _3565;
                        float _3611;
                        bool _3612;
                        for (;;)
                        {
                            uint _3492 = ((_3259 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3481));
                            _3482 = (_3481 + 4294967295u) & _3481;
                            uint _3494 = _3492 * 40u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3508 = _3507.w;
                            uint _3510 = (_3492 * 40u) + 4u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3492 * 40u) + 8u;
                            _3535 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x));
                            uint _3537 = (_3492 * 40u) + 16u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3492 * 40u) + 20u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3492 * 40u) + 24u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3586 = (_3492 * 40u) + 28u;
                            vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            _3611 = fma(_2828, _3599.z, fma(_2827, _3599.y, _3599.x * _2826)) + _3599.w;
                            _3612 = !((fma(_2828, _3580.z, fma(_2827, _3580.y, _3580.x * _2826)) + _3580.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3612)
                            {
                                float _3639 = _3507.x - _2826;
                                float _3640 = _3507.y - _2827;
                                float _3641 = _3507.z - _2828;
                                float _3642 = dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641));
                                float _3645 = inversesqrt(_3642);
                                float _3646 = _3645 * _3639;
                                float _3647 = _3645 * _3640;
                                float _3648 = _3645 * _3641;
                                float _3652 = 1.0 - (_3642 / (_3508 * _3508));
                                float _4844 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3657 = sqrt(_3642) * _3523.w;
                                float _3659 = 1.39999997615814208984375 / (_3657 + 1.39999997615814208984375);
                                float _3660 = _3659 * _3659;
                                float _3663 = ((1.0 - _3660) * dot(vec3(_3646, _3647, _3648), vec3(_1079, _1082, _1085))) + _3660;
                                float _3666 = _3657 * _3657;
                                float _3670 = (fma(_2828, _3550.z, fma(_2827, _3550.y, _3550.x * _2826)) + _3550.w) / _3611;
                                float _3671 = (fma(_2828, _3565.z, fma(_2827, _3565.y, _3565.x * _2826)) + _3565.w) / _3611;
                                float _3675 = 1.0 - dot(vec2(_3670, _3671), vec2(_3670, _3671));
                                float _4860 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3677 = _3676 * (((isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0))) * _3653) / ((_3666 * 0.699999988079071044921875) + 1.0));
                                float _3689 = exp2(log2(1.0 / ((_3666 * 3.5) + 5.0)) * 0.25);
                                float _3690 = 1.0 - _1139;
                                float _3697 = sqrt(1.0 - ((1.0 - (_3690 * _3690)) * (1.0 - (_3689 * _3689))));
                                float _3698 = _3697 * _3697;
                                float _3699 = _3698 * _3698;
                                float _3700 = _3646 - _3119;
                                float _3701 = _3647 - _3120;
                                float _3702 = _3648 - _3121;
                                float _3706 = inversesqrt(dot(vec3(_3700, _3701, _3702), vec3(_3700, _3701, _3702)));
                                float _3710 = dot(vec3(_1079, _1082, _1085), vec3((-0.0) - _3119, (-0.0) - _3120, (-0.0) - _3121));
                                float _4871 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3713 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3714 = dot(vec3(_1079, _1082, _1085), vec3(_3706 * _3700, _3706 * _3701, _3706 * _3702));
                                float _4882 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3721 = ((_3717 * _3717) * (_3699 + (-1.0))) + 1.0;
                                float _3722 = _3659 * _3698;
                                float _3723 = _3722 * _3722;
                                float _3729 = ((1.0 - _3723) * dot(vec3(_1079, _1082, _1085), vec3(_3646, _3647, _3648))) + _3723;
                                float _4893 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3731 = 1.0 - _3698;
                                float _3741 = (0.5 / (((_3730 * ((_3713 * _3731) + _3698)) + 9.9999999392252902907785028219223e-09) + (((_3730 * _3731) + _3698) * _3713))) * _3730;
                                float _4904 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3751 = (_3676 * _3653) * (((_3699 * 3.1415927410125732421875) * (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) / ((_3721 * _3721) * ((_3666 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3677 * _3523.y;
                                frontier_phi_83_pred_1 = _3677 * _3523.x;
                                frontier_phi_83_pred_2 = _3751 * _3535.z;
                                frontier_phi_83_pred_3 = _3751 * _3535.y;
                                frontier_phi_83_pred_4 = _3751 * _3535.x;
                                frontier_phi_83_pred_5 = _3677 * _3523.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3759 = frontier_phi_83_pred;
                            _3758 = frontier_phi_83_pred_1;
                            _3757 = frontier_phi_83_pred_2;
                            _3756 = frontier_phi_83_pred_3;
                            _3755 = frontier_phi_83_pred_4;
                            _3760 = frontier_phi_83_pred_5;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3464 = _3757 + _3477;
                            if (_3482 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3482;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3467;
                        frontier_phi_77_pred_1 = _3466;
                        frontier_phi_77_pred_2 = _3465;
                        frontier_phi_77_pred_3 = _3464;
                        frontier_phi_77_pred_4 = _3463;
                        frontier_phi_77_pred_5 = _3462;
                    }
                    _3104 = frontier_phi_77_pred;
                    _3102 = frontier_phi_77_pred_1;
                    _3100 = frontier_phi_77_pred_2;
                    _3098 = frontier_phi_77_pred_3;
                    _3096 = frontier_phi_77_pred_4;
                    _3094 = frontier_phi_77_pred_5;
                    uint _3260 = _3259 + 1u;
                    if (_3260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3253 = _3094;
                        _3254 = _3096;
                        _3255 = _3098;
                        _3256 = _3100;
                        _3257 = _3102;
                        _3258 = _3104;
                        _3259 = _3260;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3098;
                frontier_phi_58_59_ladder_1 = _3104;
                frontier_phi_58_59_ladder_2 = _3102;
                frontier_phi_58_59_ladder_3 = _3100;
                frontier_phi_58_59_ladder_4 = _3096;
                frontier_phi_58_59_ladder_5 = _3094;
            }
            else
            {
                frontier_phi_58_59_ladder = _2977;
                frontier_phi_58_59_ladder_1 = _2983;
                frontier_phi_58_59_ladder_2 = _2981;
                frontier_phi_58_59_ladder_3 = _2979;
                frontier_phi_58_59_ladder_4 = _2975;
                frontier_phi_58_59_ladder_5 = _2973;
            }
            _3093 = frontier_phi_58_59_ladder_5;
            _3095 = frontier_phi_58_59_ladder_4;
            _3097 = frontier_phi_58_59_ladder;
            _3099 = frontier_phi_58_59_ladder_3;
            _3101 = frontier_phi_58_59_ladder_2;
            _3103 = frontier_phi_58_59_ladder_1;
        }
        float _3108 = isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0));
        _2885 = (_3108 * _3099) + _2337;
        _2887 = (_3108 * _3101) + _2339;
        _2889 = (_3108 * _3103) + _2341;
        _2891 = ((_3093 * 0.039999999105930328369140625) * _3108) + _2670;
        _2893 = ((_3095 * 0.039999999105930328369140625) * _3108) + _2672;
        _2895 = ((_3097 * 0.039999999105930328369140625) * _3108) + _2674;
    }
    else
    {
        _2885 = _2337;
        _2887 = _2339;
        _2889 = _2341;
        _2891 = _2670;
        _2893 = _2672;
        _2895 = _2674;
    }
    float _4920 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _4931 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _4942 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _2912 = ((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2885 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1123))) + ((_2891 + ((isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0))) * _1958)) * cbPerFrame._m0[3u].x);
    float _2913 = ((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2887 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1123))) + ((_2893 + ((isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0))) * _1958)) * cbPerFrame._m0[3u].x);
    float _2914 = ((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2889 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1123))) + ((_2895 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1958)) * cbPerFrame._m0[3u].x);
    uint _2915 = _287 + 6u;
    float _2923 = _1060 / cbSceneParam._m0[86u].x;
    float _2924 = _1061 / cbSceneParam._m0[86u].y;
    vec4 _2938 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2923, _2924, (log2((isnan(cbSceneParam._m0[77u].w) ? _982 : (isnan(_982) ? cbSceneParam._m0[77u].w : min(_982, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2940 = _2938.x;
    float _2941 = _2938.y;
    float _2942 = _2938.z;
    float _2943 = _2938.w;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    if (_982 > cbSceneParam._m0[78u].w)
    {
        float _2998 = isnan(_982) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _982 : min(cbSceneParam._m0[80u].w, _982));
        float _2999 = _2998 / _982;
        float _3010 = _2999 * _1033;
        float _3011 = _1034 * _2999;
        float _3012 = (-0.0) - _3011;
        float _3013 = _2999 * _1035;
        float _3015 = (cbSceneParam._m0[77u].w * _3012) / _2998;
        float _3016 = _3015 + cbSceneParam._m0[79u].w;
        float _3017 = cbSceneParam._m0[79u].w - _3011;
        float _3023 = sqrt(((_3010 * _3010) + (_3011 * _3011)) + (_3013 * _3013));
        float _3026 = (1.0 - (cbSceneParam._m0[77u].w / _2998)) * _3023;
        float _3031 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3033 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3210;
        if (abs((_3012 - _3015) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3210 = ((((_3016 > 0.0) ? exp2(_3031 * _3016) : (2.0 - exp2(_3033 * _3016))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3026;
        }
        else
        {
            float _3154 = 1.0 / cbSceneParam._m0[80u].x;
            float _3155 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : max(_3016, _3017));
            float _3156 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : min(_3016, _3017));
            float _3165 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : min(_3155, 0.0));
            float _3166 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : min(_3156, 0.0));
            _3210 = ((abs(_3023 / _3012) * cbSceneParam._m0[80u].y) * ((((_3165 - _3166) * 2.0) - ((exp2(_3031 * (isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0)))) - exp2(_3031 * (isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))))) * _3154)) - ((exp2(_3033 * _3165) - exp2(_3033 * _3166)) * _3154))) + (_3026 * cbSceneParam._m0[80u].z);
        }
        vec4 _3212 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2923, _2924, 1.0), 0.0);
        float _3221 = exp2((_3210 * (-1.44269502162933349609375)) * (1.0 - _3212.w));
        float _3222 = log2(_3221);
        float _3238 = log2(_2943);
        _3035 = (exp2(_3238 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].x)) * _3212.x) / cbSceneParam._m0[78u].x)) + _2940;
        _3037 = (exp2(_3238 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].y)) * _3212.y) / cbSceneParam._m0[78u].y)) + _2941;
        _3039 = (exp2(_3238 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].z)) * _3212.z) / cbSceneParam._m0[78u].z)) + _2942;
        _3041 = _3221 * _2943;
    }
    else
    {
        _3035 = _2940;
        _3037 = _2941;
        _3039 = _2942;
        _3041 = _2943;
    }
    bool _3248;
    vec4 _3051;
    vec4 _3073;
    float _3075;
    float _3079;
    float _3080;
    float _3081;
    float _3082;
    bool _3092;
    for (;;)
    {
        _3051 = cbMatDynParam._m0[0u];
        float _3053 = roundEven(_3051.y);
        bool _3054 = _3053 == 3.0;
        float _3055 = log2(_3041);
        float _3062 = exp2(_3055 * cbSceneParam._m0[78u].x) * _2912;
        float _3063 = exp2(_3055 * cbSceneParam._m0[78u].y) * _2913;
        float _3064 = exp2(_3055 * cbSceneParam._m0[78u].z) * _2914;
        float _3071 = _1049 + (-0.5);
        _3073 = cbMtdParam._m0[1u];
        _3075 = _3073.y * _3071;
        float _3078 = (_3053 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3079 = _3078 * (_3054 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3035)));
        _3080 = _3078 * (_3054 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3037)));
        _3081 = _3078 * (_3054 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3039)));
        _3082 = _3071 * 0.999000012874603271484375;
        _3092 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3092)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3082) < 0.5)
            {
                _3248 = true;
                break;
            }
        }
        uint _3189 = _1098 + uint(_3051.w);
        if ((cbInstanceData._m0[_3189].w < 1.0) && ((cbInstanceData._m0[_3189].w + _3082) < 0.5))
        {
            _3248 = true;
            break;
        }
        if ((_3075 + 1.0) < _3073.x)
        {
            _3248 = true;
            break;
        }
        _3248 = false;
        break;
    }
    float _3453;
    if (_3248)
    {
        discard_state = true;
        _3453 = 0.0;
    }
    else
    {
        _3453 = cbInstanceData._m0[_2915].w;
    }
    SV_Target.x = _3079;
    SV_Target.y = _3080;
    SV_Target.z = _3081;
    SV_Target.w = _3453;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2915].w;
    discard_exit();
}


