#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1599;
float _3979;
float _3980;
float _3981;
float _3982;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3991 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4002 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4013 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _435 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _449 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _466 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _397.x) * 2.0) - ((((_437 - _449) * cbMtdParam._m0[24u].z) + _449) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4024 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _474 = (_467 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _475 = (_467 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _476 = (_467 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _493 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _515 = _513.x;
    float _525 = dot(vec4(_515, _513.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _539 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _397.y) * 2.0) - ((((_515 - _525) * cbMtdParam._m0[24u].z) + _525) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4035 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _547 = (_540 * ((_493.x * cbMtdParam._m0[13u].x) - _474)) + _474;
    float _548 = (_540 * ((_493.y * cbMtdParam._m0[13u].y) - _475)) + _475;
    float _549 = (_540 * ((_493.z * cbMtdParam._m0[13u].z) - _476)) + _476;
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _314) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _315) + cbTextureTilingScale._m0[24u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _586 = _584.x;
    float _596 = dot(vec4(_586, _584.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _608 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _397.z) * 2.0) - ((((_586 - _596) * cbMtdParam._m0[24u].z) + _596) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4046 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _616 = (_609 * ((_567.x * cbMtdParam._m0[14u].x) - _547)) + _547;
    float _617 = (_609 * ((_567.y * cbMtdParam._m0[14u].y) - _548)) + _548;
    float _618 = (_609 * ((_567.z * cbMtdParam._m0[14u].z) - _549)) + _549;
    float _622 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _616;
    float _625 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _617;
    float _628 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _618;
    float _635 = ((_616 - _622) * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) + _622;
    float _636 = ((_617 - _625) * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) + _625;
    float _637 = ((_618 - _628) * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) + _628;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _314) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _315) + cbTextureTilingScale._m0[14u].w));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _716 = _714.x;
    float _717 = _714.y;
    float _718 = _714.z;
    float _725 = ((_697.x - _716) * _467) + _716;
    float _726 = ((_697.y - _717) * _467) + _717;
    float _727 = ((_697.z - _718) * _467) + _718;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _750 = ((_739.x - _725) * _540) + _725;
    float _751 = ((_739.y - _726) * _540) + _726;
    float _752 = ((_739.z - _727) * _540) + _727;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _314) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _315) + cbTextureTilingScale._m0[23u].w));
    float _777 = ((_764.z - _752) * _609) + _752;
    float _780 = ((((_764.x - _750) * _609) + _750) * 2.0) + (-1.0);
    float _781 = ((((_764.y - _751) * _609) + _751) * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _4057 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))));
    vec4 _801 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _826 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _828 = _826.x;
    float _829 = 1.0 - _828;
    float _835 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _838 = ((isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : min(_835, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _847 = (_838 - ((((((_828 - _829) * cbMtdParam._m0[24u].w) + _829) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _838))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4078 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _848 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _855 = (_848 * ((_655.x * cbMtdParam._m0[18u].x) - _635)) + _635;
    float _856 = (_848 * ((_655.y * cbMtdParam._m0[18u].y) - _636)) + _636;
    float _857 = (_848 * ((_655.z * cbMtdParam._m0[18u].z) - _637)) + _637;
    vec4 _869 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _871 = _869.x;
    float _872 = 1.0 - _871;
    float _899 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_871 - _872) * cbMtdParam._m0[24u].y) + _872) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4089 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _900 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _908 = ((((cbMtdParam._m0[10u].x - _855) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _900) + _855;
    float _909 = ((((cbMtdParam._m0[10u].y - _856) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _900) + _856;
    float _910 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _857)) * _900) + _857;
    float _915 = (((_674.z - _777) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _777;
    float _919 = ((_801.z - _915) * cbMtdParam._m0[19u].w) + _915;
    vec4 _933 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _940 = (_933.x * 2.0) + (-1.0);
    float _941 = (_933.y * 2.0) + (-1.0);
    float _942 = dot(vec2(_940, _941), vec2(_940, _941));
    float _4100 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _950 = (_848 * (_933.z - _919)) + _919;
    float _953 = ((cbMtdParam._m0[23u].y - _950) * _900) + _950;
    vec4 _972 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _978 = (_972.x * 2.0) + (-1.0);
    float _979 = (_972.y * 2.0) + (-1.0);
    float _980 = dot(vec2(_978, _979), vec2(_978, _979));
    float _4111 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _994 = (_780 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_674.x * 2.0) + (-1.0)))) + (((_801.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _995 = (_781 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_674.y * 2.0) + (-1.0)))) + (((_801.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1007 = (((_940 - _994) + (cbMtdParam._m0[21u].x * _994)) * _848) + _994;
    float _1008 = (((_941 - _995) + (cbMtdParam._m0[21u].x * _995)) * _848) + _995;
    float _1009 = (_848 * (sqrt(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) - _787)) + _787;
    float _1020 = (((_978 - _1007) + (_1007 * cbMtdParam._m0[22u].z)) * _900) + _1007;
    float _1021 = (((_979 - _1008) + (_1008 * cbMtdParam._m0[22u].z)) * _900) + _1008;
    float _1022 = ((sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) - _1009) * _900) + _1009;
    float _1024 = cbMtdParam._m0[22u].x + _801.w;
    float _1027 = fma(_1022, _263 * NORMAL.x, fma(_1021, _270 * TANGENT.x, (_256 * _248) * _1020));
    float _1030 = fma(_1022, _263 * NORMAL.y, fma(_1021, _270 * TANGENT.y, (_256 * _249) * _1020));
    float _1033 = fma(_1022, _263 * NORMAL.z, fma(_1021, _270 * TANGENT.z, (_256 * _250) * _1020));
    float _1037 = inversesqrt(dot(vec3(_1027, _1030, _1033), vec3(_1027, _1030, _1033)));
    float _1038 = _1037 * _1027;
    float _1039 = _1037 * _1030;
    float _1040 = _1037 * _1033;
    float _4122 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _1041 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _4144 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4155 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4166 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _1059 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1110 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1100);
    float _1111 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1100);
    float _1112 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1100);
    float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
    float _1117 = _1110 * _1116;
    float _1118 = _1111 * _1116;
    float _1119 = _1112 * _1116;
    vec4 _1124 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1126 = _1124.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1280 = sqrt(((_1110 * _1110) + (_1111 * _1111)) + (_1112 * _1112));
        float _1286 = (cbMatDynParam._m0[5u].x * _1280) + cbMatDynParam._m0[5u].y;
        float _4177 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1291 = (cbMatDynParam._m0[5u].z * _1280) + cbMatDynParam._m0[5u].w;
        float _4188 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) - _1287)) + _1287) < ((_1126 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1137 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1138 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1156 = fma(_1040, cbSceneParam._m0[5u].z, fma(_1039, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1038));
    float _1159 = fma(_1040, cbSceneParam._m0[6u].z, fma(_1039, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1038));
    float _1162 = fma(_1040, cbSceneParam._m0[7u].z, fma(_1039, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1038));
    uint _1175 = _295 + 9u;
    uint _1176 = _1175 + uint(cbMatDynParam._m0[0u].w);
    float _1182 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_1176].x;
    float _1183 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_1176].y;
    float _1184 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_1176].z;
    float _4199 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _1185 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1186 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1187 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    vec4 _1196 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1137, cbSceneParam._m0[86u].y * _1138));
    float _1200 = ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * TEXCOORD_5.w) * _1196.x;
    float _1201 = dot(vec3(_1038, _1039, _1040), vec3(_1117, _1118, _1119));
    float _1204 = _1201 * 2.0;
    float _1208 = (_1204 * _1038) - _1117;
    float _1209 = (_1204 * _1039) - _1118;
    float _1210 = (_1204 * _1040) - _1119;
    float _1214 = abs(dot(vec3(_1117, _1118, _1119), vec3(_1038, _1039, _1040)));
    float _4232 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _1216 = sqrt(_1041);
    float _1229 = exp2((_1216 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1216 * 3.0));
    float _1261 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1265 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1269 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1598;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1323 = fma(_1269, cbModelParam._m0[26u].z, fma(_1265, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1261));
        float _1327 = fma(_1269, cbModelParam._m0[27u].z, fma(_1265, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1261));
        float _1331 = fma(_1269, cbModelParam._m0[28u].z, fma(_1265, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1261));
        float _1356 = _1261 + _1038;
        float _1357 = _1265 + _1039;
        float _1358 = _1269 + _1040;
        float _1368 = fma(_1358, cbModelParam._m0[26u].z, fma(_1357, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1356)) - _1323;
        float _1369 = fma(_1358, cbModelParam._m0[27u].z, fma(_1357, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1356)) - _1327;
        float _1370 = fma(_1358, cbModelParam._m0[28u].z, fma(_1357, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1356)) - _1331;
        float _1374 = inversesqrt(dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370)));
        float _1387 = ((_1374 * _1368) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1323 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1374 * _1369) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1327 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1374 * _1370) / cbModelParam._m0[34u].z) + ((((((_1331 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        float _1426 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1392.x + (-0.5));
        float _1428 = _1426 * (_1392.y + (-0.5));
        float _1429 = _1426 * (_1392.z + (-0.5));
        float _1436 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1399.x + (-0.5));
        float _1438 = _1436 * (_1399.y + (-0.5));
        float _1439 = _1436 * (_1399.z + (-0.5));
        float _1446 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1406.x + (-0.5));
        float _1448 = _1446 * (_1406.y + (-0.5));
        float _1449 = _1446 * (_1406.z + (-0.5));
        float _1456 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1413.x + (-0.5));
        float _1458 = _1456 * (_1413.y + (-0.5));
        float _1459 = _1456 * (_1413.z + (-0.5));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = _1427 * 0.5;
        float _1464 = _1437 * 0.5;
        float _1465 = _1447 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1480 = (dot(vec3(_1038, _1039, _1040), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1490 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4280 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1492 + 1.0))) + _1497) * _1460;
        float _1507 = _1428 * 0.5;
        float _1508 = _1438 * 0.5;
        float _1509 = _1448 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_1038, _1039, _1040), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4313 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1534 + 1.0))) + _1539) * _1461;
        float _1549 = _1429 * 0.5;
        float _1550 = _1439 * 0.5;
        float _1551 = _1449 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_1038, _1039, _1040), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4346 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1576 + 1.0))) + _1581) * _1462;
        _1598 = _1429;
        _1600 = _1428;
        _1601 = _1427;
        _1602 = _1439;
        _1603 = _1438;
        _1604 = _1437;
        _1605 = _1449;
        _1606 = _1448;
        _1607 = _1447;
        _1608 = _1462;
        _1609 = _1461;
        _1610 = _1460;
        _1611 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1612 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1613 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1599;
        _1600 = _1599;
        _1601 = _1599;
        _1602 = _1599;
        _1603 = _1599;
        _1604 = _1599;
        _1605 = _1599;
        _1606 = _1599;
        _1607 = _1599;
        _1608 = _1599;
        _1609 = _1599;
        _1610 = _1599;
        _1611 = 0.0;
        _1612 = 0.0;
        _1613 = 0.0;
    }
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1639 = fma(_1269, cbModelParam._m0[30u].z, fma(_1265, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1261));
        float _1643 = fma(_1269, cbModelParam._m0[31u].z, fma(_1265, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1261));
        float _1647 = fma(_1269, cbModelParam._m0[32u].z, fma(_1265, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1261));
        float _1670 = _1261 + _1038;
        float _1671 = _1265 + _1039;
        float _1672 = _1269 + _1040;
        float _1682 = fma(_1672, cbModelParam._m0[30u].z, fma(_1671, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1670)) - _1639;
        float _1683 = fma(_1672, cbModelParam._m0[31u].z, fma(_1671, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1670)) - _1643;
        float _1684 = fma(_1672, cbModelParam._m0[32u].z, fma(_1671, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1670)) - _1647;
        float _1688 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
        float _1701 = ((_1688 * _1682) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1639 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1702 = ((_1688 * _1683) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1643 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1703 = ((_1688 * _1684) / cbModelParam._m0[35u].z) + ((((((_1647 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1705 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        vec4 _1712 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        float _1738 = exp2((_1705.w + (-0.5)) * 20.0) * 2.0;
        float _1739 = _1738 * (_1705.x + (-0.5));
        float _1740 = _1738 * (_1705.y + (-0.5));
        float _1741 = _1738 * (_1705.z + (-0.5));
        float _1748 = exp2((_1712.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1712.x + (-0.5));
        float _1750 = _1748 * (_1712.y + (-0.5));
        float _1751 = _1748 * (_1712.z + (-0.5));
        float _1758 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1759 = _1758 * (_1719.x + (-0.5));
        float _1760 = _1758 * (_1719.y + (-0.5));
        float _1761 = _1758 * (_1719.z + (-0.5));
        float _1768 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1769 = _1768 * (_1726.x + (-0.5));
        float _1770 = _1768 * (_1726.y + (-0.5));
        float _1771 = _1768 * (_1726.z + (-0.5));
        float _1772 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1773 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1774 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1775 = _1739 * 0.5;
        float _1776 = _1749 * 0.5;
        float _1777 = _1759 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_1038, _1039, _1040), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1772 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4409 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1802 + 1.0))) + _1807) * _1772;
        float _1817 = _1740 * 0.5;
        float _1818 = _1750 * 0.5;
        float _1819 = _1760 * 0.5;
        float _1820 = dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819));
        float _1825 = (_1820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1820);
        float _1833 = (dot(vec3(_1038, _1039, _1040), vec3(_1825 * _1817, _1825 * _1818, _1825 * _1819)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1842 = sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819)) / (_1773 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1844 = _1843 * 2.0;
        float _1848 = (1.0 - _1843) / (_1843 + 1.0);
        float _4442 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1858 = ((((1.0 - _1849) * (_1844 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1844 + 1.0))) + _1849) * _1773;
        float _1859 = _1741 * 0.5;
        float _1860 = _1751 * 0.5;
        float _1861 = _1761 * 0.5;
        float _1862 = dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861));
        float _1867 = (_1862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1862);
        float _1875 = (dot(vec3(_1038, _1039, _1040), vec3(_1867 * _1859, _1867 * _1860, _1867 * _1861)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1884 = sqrt(((_1860 * _1860) + (_1859 * _1859)) + (_1861 * _1861)) / (_1774 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1886 = _1885 * 2.0;
        float _1890 = (1.0 - _1885) / (_1885 + 1.0);
        float _4475 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1900 = ((((1.0 - _1891) * (_1886 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1886 + 1.0))) + _1891) * _1774;
        _1908 = _1741;
        _1909 = _1740;
        _1910 = _1739;
        _1911 = _1751;
        _1912 = _1750;
        _1913 = _1749;
        _1914 = _1761;
        _1915 = _1760;
        _1916 = _1759;
        _1917 = _1774;
        _1918 = _1773;
        _1919 = _1772;
        _1920 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
        _1921 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)));
        _1922 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)));
    }
    else
    {
        _1908 = _1599;
        _1909 = _1599;
        _1910 = _1599;
        _1911 = _1599;
        _1912 = _1599;
        _1913 = _1599;
        _1914 = _1599;
        _1915 = _1599;
        _1916 = _1599;
        _1917 = _1599;
        _1918 = _1599;
        _1919 = _1599;
        _1920 = 0.0;
        _1921 = 0.0;
        _1922 = 0.0;
    }
    float _1932 = (cbModelParam._m0[1u].x * (_1920 - _1611)) + _1611;
    float _1933 = (cbModelParam._m0[1u].x * (_1921 - _1612)) + _1612;
    float _1934 = (cbModelParam._m0[1u].x * (_1922 - _1613)) + _1613;
    float _1955 = fma(_1934, cbSceneParam._m0[89u].z, fma(_1933, cbSceneParam._m0[89u].y, _1932 * cbSceneParam._m0[89u].x));
    float _1958 = fma(_1934, cbSceneParam._m0[90u].z, fma(_1933, cbSceneParam._m0[90u].y, _1932 * cbSceneParam._m0[90u].x));
    float _1961 = fma(_1934, cbSceneParam._m0[91u].z, fma(_1933, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1932));
    float _1976 = _1208 * 0.5;
    float _1977 = _1209 * 0.5;
    float _1978 = _1210 * 0.5;
    float _1979 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1910, _1913, _1916, _1919));
    float _1982 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1909, _1912, _1915, _1918));
    float _1985 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1908, _1911, _1914, _1917));
    float _2019;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1992 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1598, _1602, _1605, _1608));
        float _1996 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1600, _1603, _1606, _1609));
        float _2000 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1601, _1604, _1607, _1610));
        float _2007 = dot(vec4(cbModelParam._m0[39u]), vec4(_1976, _1977, _1978, 1.0));
        _2019 = dot(vec3(isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)), isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0)), isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2007) ? 0.0 : (isnan(0.0) ? _2007 : max(0.0, _2007))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2019 = 1.0;
    }
    float _2030;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2021 = dot(vec4(cbModelParam._m0[40u]), vec4(_1976, _1977, _1978, 1.0));
        _2030 = dot(vec3(isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)), isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)), isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2021) ? 0.0 : (isnan(0.0) ? _2021 : max(0.0, _2021))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2030 = 1.0;
    }
    float _2034 = (_2030 * cbModelParam._m0[1u].x) + (_2019 * (1.0 - cbModelParam._m0[1u].x));
    float _2044 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1041);
    float _2045 = isnan(_2044) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2044 : min(cbModelParam._m0[25u].z, _2044));
    float _2125;
    float _2127;
    float _2129;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2092 = fma(_1269, cbModelParam._m0[13u].z, fma(_1265, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1261)) + cbModelParam._m0[13u].w;
        float _2096 = fma(_1269, cbModelParam._m0[14u].z, fma(_1265, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1261)) + cbModelParam._m0[14u].w;
        float _2100 = fma(_1269, cbModelParam._m0[15u].z, fma(_1265, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1261)) + cbModelParam._m0[15u].w;
        float _2103 = fma(_1210, cbModelParam._m0[13u].z, fma(_1209, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1208));
        float _2106 = fma(_1210, cbModelParam._m0[14u].z, fma(_1209, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1208));
        float _2109 = fma(_1210, cbModelParam._m0[15u].z, fma(_1209, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1208));
        float _2137;
        if (_2103 > 0.0)
        {
            _2137 = abs((1.0 - _2092) / _2103);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2092 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2137 = frontier_phi_17_15_ladder;
        }
        float _2358;
        if (_2106 > 0.0)
        {
            _2358 = abs((1.0 - _2096) / _2106);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2096 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2358 = frontier_phi_26_22_ladder;
        }
        float _2604;
        if (_2109 > 0.0)
        {
            _2604 = abs((1.0 - _2100) / _2109);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2100 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2604 = frontier_phi_38_33_ladder;
        }
        float _2606 = isnan(_2358) ? _2137 : (isnan(_2137) ? _2358 : min(_2137, _2358));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _2103) + _2092;
        float _2612 = (_2607 * _2106) + _2096;
        float _2613 = (_2607 * _2109) + _2100;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2614;
        float _2618 = _2614 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 > _2618) || ((_2612 < _2616) || ((_2611 < _2616) || (_2611 > _2618))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2737 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2613, cbModelParam._m0[9u].z, fma(_2612, cbModelParam._m0[9u].y, _2611 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2613, cbModelParam._m0[10u].z, fma(_2612, cbModelParam._m0[10u].y, _2611 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2613, cbModelParam._m0[11u].z, fma(_2612, cbModelParam._m0[11u].y, _2611 * cbModelParam._m0[11u].x))), _2045);
            frontier_phi_16_38_ladder = _2737.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2737.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2737.x * cbModelParam._m0[1u].y;
        }
        _2125 = frontier_phi_16_38_ladder_2;
        _2127 = frontier_phi_16_38_ladder_1;
        _2129 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2113 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1208, _1209, _1210), _2045);
        _2125 = _2113.x * cbModelParam._m0[1u].y;
        _2127 = _2113.y * cbModelParam._m0[1u].y;
        _2129 = _2113.z * cbModelParam._m0[1u].y;
    }
    float _2133 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1041);
    float _2134 = isnan(_2133) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2133 : min(cbModelParam._m0[25u].w, _2133));
    float _2223;
    float _2225;
    float _2227;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2187 = fma(_1269, cbModelParam._m0[21u].z, fma(_1265, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1261)) + cbModelParam._m0[21u].w;
        float _2191 = fma(_1269, cbModelParam._m0[22u].z, fma(_1265, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1261)) + cbModelParam._m0[22u].w;
        float _2195 = fma(_1269, cbModelParam._m0[23u].z, fma(_1265, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1261)) + cbModelParam._m0[23u].w;
        float _2198 = fma(_1210, cbModelParam._m0[21u].z, fma(_1209, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1208));
        float _2201 = fma(_1210, cbModelParam._m0[22u].z, fma(_1209, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1208));
        float _2204 = fma(_1210, cbModelParam._m0[23u].z, fma(_1209, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1208));
        float _2363;
        if (_2198 > 0.0)
        {
            _2363 = abs((1.0 - _2187) / _2198);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2198 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2187 + 1.0) / _2198);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2363 = frontier_phi_28_24_ladder;
        }
        float _2631;
        if (_2201 > 0.0)
        {
            _2631 = abs((1.0 - _2191) / _2201);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2201 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2191 + 1.0) / _2201);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2631 = frontier_phi_40_35_ladder;
        }
        float _2836;
        if (_2204 > 0.0)
        {
            _2836 = abs((1.0 - _2195) / _2204);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2195 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2836 = frontier_phi_49_46_ladder;
        }
        float _2838 = isnan(_2631) ? _2363 : (isnan(_2363) ? _2631 : min(_2363, _2631));
        float _2839 = isnan(_2836) ? _2838 : (isnan(_2838) ? _2836 : min(_2838, _2836));
        float _2843 = (_2839 * _2198) + _2187;
        float _2844 = (_2839 * _2201) + _2191;
        float _2845 = (_2839 * _2204) + _2195;
        float _2846 = _2839 * 9.9999997473787516355514526367188e-05;
        float _2847 = (-1.0) - _2846;
        float _2849 = _2846 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2845 > _2849) || ((_2845 < _2847) || ((_2844 > _2849) || ((_2844 < _2847) || ((_2843 < _2847) || (_2843 > _2849))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2845, cbModelParam._m0[17u].z, fma(_2844, cbModelParam._m0[17u].y, _2843 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2845, cbModelParam._m0[18u].z, fma(_2844, cbModelParam._m0[18u].y, _2843 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2845, cbModelParam._m0[19u].z, fma(_2844, cbModelParam._m0[19u].y, _2843 * cbModelParam._m0[19u].x))), _2134);
            frontier_phi_25_49_ladder = _3044.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3044.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3044.x * cbModelParam._m0[1u].z;
        }
        _2223 = frontier_phi_25_49_ladder_2;
        _2225 = frontier_phi_25_49_ladder_1;
        _2227 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2207 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1208, _1209, _1210), _2134);
        _2223 = _2207.x * cbModelParam._m0[1u].z;
        _2225 = _2207.y * cbModelParam._m0[1u].z;
        _2227 = _2207.z * cbModelParam._m0[1u].z;
    }
    float _2239 = ((((1.0 - _1229) * ((_1216 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1229 * _1216)) * _1200;
    float _2240 = _2239 * ((cbModelParam._m0[1u].w * (_2223 - _2125)) + _2125);
    float _2241 = _2239 * ((cbModelParam._m0[1u].w * (_2225 - _2127)) + _2127);
    float _2242 = _2239 * ((cbModelParam._m0[1u].w * (_2227 - _2129)) + _2129);
    float _2245 = fma(_2242, cbSceneParam._m0[89u].z, fma(_2241, cbSceneParam._m0[89u].y, _2240 * cbSceneParam._m0[89u].x));
    float _2248 = fma(_2242, cbSceneParam._m0[90u].z, fma(_2241, cbSceneParam._m0[90u].y, _2240 * cbSceneParam._m0[90u].x));
    float _2251 = fma(_2242, cbSceneParam._m0[91u].z, fma(_2241, cbSceneParam._m0[91u].y, _2240 * cbSceneParam._m0[91u].x));
    vec4 _2259 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1137, _1138));
    float _2261 = _2259.w;
    float _2273 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2261);
    float _2274 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2261);
    float _2275 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2261);
    uvec4 _2279 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2281 = _2279.x * 14u;
    uint _2282 = _2281 + 13u;
    float _2289 = _1200 + (-1.0);
    float _2294 = (cbLight._m0[_2282].x * _2289) + 1.0;
    float _2295 = (cbLight._m0[_2282].y * _2289) + 1.0;
    float _2296 = (cbLight._m0[_2282].z * _2289) + 1.0;
    float _2297 = (cbLight._m0[_2282].w * _2289) + 1.0;
    uint _2298 = _2281 + 5u;
    float _2304 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
    uint _2308 = _2281 + 4u;
    float _2317 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
    uint _2321 = _2281 | 1u;
    float _2332 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_1038, _1039, _1040));
    float _2335 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_1038, _1039, _1040));
    float _4611 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _4622 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2340 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * 0.3183098733425140380859375;
    float _2342 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * 0.3183098733425140380859375;
    float _2349 = ((cbLight._m0[_2298].x * _2304) * _2342) + (((cbLight._m0[_2308].x * _2273) * _2317) * _2340);
    float _2350 = ((_2304 * cbLight._m0[_2298].y) * _2342) + (((cbLight._m0[_2308].y * _2274) * _2317) * _2340);
    float _2351 = ((_2304 * cbLight._m0[_2298].z) * _2342) + (((cbLight._m0[_2308].z * _2275) * _2317) * _2340);
    uvec4 _2355 = floatBitsToUint(cbLight._m0[_2281 + 12u]);
    bool _2357 = _2355.x == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2357)
    {
        _2368 = _2349;
        _2370 = _2350;
        _2372 = _2351;
    }
    else
    {
        uint _2376 = _2281 + 6u;
        float _2392 = (dot(vec3(cbLight._m0[_2281 + 2u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2393 = _2392 * _2392;
        float _4633 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2394 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2395 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2368 = (((cbLight._m0[_2376].x * 0.3183098733425140380859375) * _2394) * _2395) + _2349;
        _2370 = (((cbLight._m0[_2376].y * 0.3183098733425140380859375) * _2394) * _2395) + _2350;
        _2372 = (((cbLight._m0[_2376].z * 0.3183098733425140380859375) * _2394) * _2395) + _2351;
    }
    bool _2375 = _2355.y == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2375)
    {
        _2413 = _2368;
        _2415 = _2370;
        _2417 = _2372;
    }
    else
    {
        uint _2575 = _2281 + 7u;
        float _2591 = (dot(vec3(cbLight._m0[_2281 + 3u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2592 = _2591 * _2591;
        float _4649 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2593 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2594 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2413 = (((cbLight._m0[_2575].x * 0.3183098733425140380859375) * _2593) * _2594) + _2368;
        _2415 = (((cbLight._m0[_2575].y * 0.3183098733425140380859375) * _2593) * _2594) + _2370;
        _2417 = (((cbLight._m0[_2575].z * 0.3183098733425140380859375) * _2593) * _2594) + _2372;
    }
    uint _2420 = _2281 + 8u;
    float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _1041) * 0.949999988079071044921875);
    float _2434 = _2433 * _2433;
    float _2435 = cbLight._m0[_2281].x + _1117;
    float _2436 = cbLight._m0[_2281].y + _1118;
    float _2437 = cbLight._m0[_2281].z + _1119;
    float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
    float _2442 = _2441 * _2435;
    float _2443 = _2441 * _2436;
    float _2444 = _2441 * _2437;
    float _2445 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2281].xyz));
    float _4665 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _4676 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _2449 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2450 = dot(vec3(_1038, _1039, _1040), vec3(_2442, _2443, _2444));
    float _4687 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2442, _2443, _2444));
    float _4698 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2434 * _2434;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2473 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2474 = 1.0 - _2434;
    float _2485 = (0.5 / (((_2449 * ((_2448 * _2474) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2474) + _2434) * _2448))) * _2448;
    float _4709 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2487 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    uint _2501 = _2281 + 9u;
    float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _1041) * 0.949999988079071044921875);
    float _2513 = _2512 * _2512;
    float _2514 = cbLight._m0[_2321].x + _1117;
    float _2515 = cbLight._m0[_2321].y + _1118;
    float _2516 = cbLight._m0[_2321].z + _1119;
    float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
    float _2521 = _2520 * _2514;
    float _2522 = _2520 * _2515;
    float _2523 = _2520 * _2516;
    float _2524 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2321].xyz));
    float _4720 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2528 = dot(vec3(_1038, _1039, _1040), vec3(_2521, _2522, _2523));
    float _4731 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2521, _2522, _2523));
    float _4742 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2513 * _2513;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2549 = (exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2550 = 1.0 - _2513;
    float _2560 = (0.5 / (((_2449 * ((_2527 * _2550) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2550) + _2513) * _2527))) * _2527;
    float _4753 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2562 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    float _2572 = (((_2549 * cbLight._m0[_2501].x) * _2562) * _2304) + ((((cbLight._m0[_2420].x * _2273) * _2473) * _2487) * _2317);
    float _2573 = (((_2549 * cbLight._m0[_2501].y) * _2562) * _2304) + ((((cbLight._m0[_2420].y * _2274) * _2473) * _2487) * _2317);
    float _2574 = (((_2549 * cbLight._m0[_2501].z) * _2562) * _2304) + ((((cbLight._m0[_2420].z * _2275) * _2473) * _2487) * _2317);
    float _2636;
    float _2638;
    float _2640;
    if (_2357)
    {
        _2636 = _2572;
        _2638 = _2573;
        _2640 = _2574;
    }
    else
    {
        uint _2642 = _2281 + 2u;
        uint _2646 = _2281 + 10u;
        float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2642].w)) * _1041) * 0.949999988079071044921875);
        float _2661 = _2660 * _2660;
        float _2662 = cbLight._m0[_2642].x + _1117;
        float _2663 = cbLight._m0[_2642].y + _1118;
        float _2664 = cbLight._m0[_2642].z + _1119;
        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
        float _2669 = _2668 * _2662;
        float _2670 = _2668 * _2663;
        float _2671 = _2668 * _2664;
        float _2672 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2642].xyz));
        float _4764 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2676 = dot(vec3(_1038, _1039, _1040), vec3(_2669, _2670, _2671));
        float _4775 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2680 = dot(vec3(cbLight._m0[_2642].xyz), vec3(_2669, _2670, _2671));
        float _4786 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2684 = _2661 * _2661;
        float _2688 = ((_2679 * _2679) * (_2684 + (-1.0))) + 1.0;
        float _2697 = (exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2698 = 1.0 - _2661;
        float _2708 = (0.5 / (((_2449 * ((_2675 * _2698) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2698) + _2661) * _2675))) * _2675;
        float _4797 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2710 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2684 / ((_2688 * _2688) * 3.141590118408203125));
        float _2711 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2636 = (((_2697 * cbLight._m0[_2646].x) * _2710) * _2711) + _2572;
        _2638 = (((_2697 * cbLight._m0[_2646].y) * _2710) * _2711) + _2573;
        _2640 = (((_2697 * cbLight._m0[_2646].z) * _2710) * _2711) + _2574;
    }
    float _2746;
    float _2748;
    float _2750;
    if (_2375)
    {
        _2746 = _2636;
        _2748 = _2638;
        _2750 = _2640;
    }
    else
    {
        uint _2757 = _2281 + 3u;
        uint _2761 = _2281 + 11u;
        float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2757].w)) * _1041) * 0.949999988079071044921875);
        float _2776 = _2775 * _2775;
        float _2777 = cbLight._m0[_2757].x + _1117;
        float _2778 = cbLight._m0[_2757].y + _1118;
        float _2779 = cbLight._m0[_2757].z + _1119;
        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
        float _2784 = _2783 * _2777;
        float _2785 = _2783 * _2778;
        float _2786 = _2783 * _2779;
        float _2787 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2757].xyz));
        float _4813 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2791 = dot(vec3(_1038, _1039, _1040), vec3(_2784, _2785, _2786));
        float _4824 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2795 = dot(vec3(cbLight._m0[_2757].xyz), vec3(_2784, _2785, _2786));
        float _4835 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2799 = _2776 * _2776;
        float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
        float _2812 = (exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2813 = 1.0 - _2776;
        float _2823 = (0.5 / (((_2449 * ((_2790 * _2813) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2813) + _2776) * _2790))) * _2790;
        float _4846 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2825 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
        float _2826 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2746 = (((_2812 * cbLight._m0[_2761].x) * _2825) * _2826) + _2636;
        _2748 = (((_2812 * cbLight._m0[_2761].y) * _2825) * _2826) + _2638;
        _2750 = (((_2812 * cbLight._m0[_2761].z) * _2825) * _2826) + _2640;
    }
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    if (_2279.y == 0u)
    {
        float _2901 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2902 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2901;
        float _2903 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2901;
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2901;
        uvec4 _2916 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2917 = _2916.x;
        uint _2928 = uint((float(_2916.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1138) / _2917))) + floor(float(uint(cbSceneParam._m0[85u].x * _1137) / _2917)));
        float _2938 = (log2(_2904 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2939 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        uint _2942 = uint(isnan(14.0) ? _2939 : (isnan(_2939) ? 14.0 : min(_2939, 14.0)));
        uvec4 _2947 = texelFetch(g_lightClusterGridBuffer, int(((_2942 << 2u) + (_2928 << 6u)) >> 2u));
        uint _2948 = _2947.x;
        uint _2949 = _2916.z;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((((1u << ((_2949 >> 4u) & 15u)) + 4294967295u) & _2948) == 0u) || ((_2949 & 240u) == 0u))
        {
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
        }
        else
        {
            float _3050;
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            uint _3208 = 0u;
            uint _3217;
            bool _3218;
            for (;;)
            {
                _3217 = texelFetch(g_lightClassification, int((((_2942 << 5u) + (_2928 << 9u)) + (_3208 << 2u)) >> 2u)).x;
                _3218 = _3217 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3218)
                {
                    frontier_phi_66_pred = _3202;
                    frontier_phi_66_pred_1 = _3207;
                    frontier_phi_66_pred_2 = _3206;
                    frontier_phi_66_pred_3 = _3205;
                    frontier_phi_66_pred_4 = _3204;
                    frontier_phi_66_pred_5 = _3203;
                }
                else
                {
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    uint _3353;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3217;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    for (;;)
                    {
                        uint _3357 = uint(findLSB(_3353)) + (_3208 << 5u);
                        uint _3354 = (_3353 + 4294967295u) & _3353;
                        uint _3359 = _3357 * 48u;
                        vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 3u)).x));
                        uint _3379 = (_3357 * 48u) + 4u;
                        vec4 _3392 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3398 = (_3357 * 48u) + 8u;
                        vec3 _3409 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x));
                        float _3413 = _3373.x - _2902;
                        float _3414 = _3373.y - _2903;
                        float _3415 = _3373.z - _2904;
                        float _3416 = dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415));
                        float _3419 = inversesqrt(_3416);
                        float _3420 = _3419 * _3413;
                        float _3421 = _3419 * _3414;
                        float _3422 = _3419 * _3415;
                        float _3423 = dot(vec3(_1156, _1159, _1162), vec3(_3420, _3421, _3422));
                        float _3428 = 1.0 - (_3416 * _3373.w);
                        float _4872 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3429 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3430 = sqrt(_3416) * _3392.w;
                        float _3433 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3423) + _3434;
                        float _3440 = _3430 * _3430;
                        float _3444 = ((isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0))) * _3429) / ((_3440 * 0.699999988079071044921875) + 1.0);
                        float _3448 = (-0.0) - _2902;
                        float _3449 = (-0.0) - _2903;
                        float _3450 = (-0.0) - _2904;
                        float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                        float _3455 = _3454 * _3448;
                        float _3456 = _3454 * _3449;
                        float _3457 = _3454 * _3450;
                        float _3465 = exp2(log2(1.0 / ((_3440 * 3.5) + 5.0)) * 0.25);
                        float _3466 = 1.0 - _1216;
                        float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                        float _3474 = _3473 * _3473;
                        float _3475 = _3474 * _3474;
                        float _3476 = _3455 + _3420;
                        float _3477 = _3456 + _3421;
                        float _3478 = _3457 + _3422;
                        float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                        float _3486 = dot(vec3(_1156, _1159, _1162), vec3(_3455, _3456, _3457));
                        float _4888 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3489 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3490 = dot(vec3(_1156, _1159, _1162), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                        float _4899 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3493 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                        float _3498 = _3433 * _3474;
                        float _3499 = _3498 * _3498;
                        float _3502 = ((1.0 - _3499) * _3423) + _3499;
                        float _4910 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3503 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3504 = 1.0 - _3474;
                        float _3514 = (0.5 / (((_3503 * ((_3489 * _3504) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3503 * _3504) + _3474) * _3489))) * _3503;
                        float _4921 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3525 = (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) / ((_3497 * _3497) * ((_3440 * 2.1991131305694580078125) + 3.141590118408203125))) * _3429;
                        _3277 = (_3444 * _3392.x) + _3350;
                        _3278 = (_3444 * _3392.y) + _3351;
                        _3279 = (_3444 * _3392.z) + _3352;
                        _3274 = (_3525 * _3409.x) + _3347;
                        _3275 = (_3525 * _3409.y) + _3348;
                        _3276 = (_3525 * _3409.z) + _3349;
                        if (_3354 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3354;
                        }
                    }
                    frontier_phi_66_pred = _3274;
                    frontier_phi_66_pred_1 = _3279;
                    frontier_phi_66_pred_2 = _3278;
                    frontier_phi_66_pred_3 = _3277;
                    frontier_phi_66_pred_4 = _3276;
                    frontier_phi_66_pred_5 = _3275;
                }
                _3050 = frontier_phi_66_pred;
                _3060 = frontier_phi_66_pred_1;
                _3058 = frontier_phi_66_pred_2;
                _3056 = frontier_phi_66_pred_3;
                _3054 = frontier_phi_66_pred_4;
                _3052 = frontier_phi_66_pred_5;
                uint _3209 = _3208 + 1u;
                if (_3209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3202 = _3050;
                    _3203 = _3052;
                    _3204 = _3054;
                    _3205 = _3056;
                    _3206 = _3058;
                    _3207 = _3060;
                    _3208 = _3209;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
        }
        uvec4 _3063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3064 = _3063.z;
        uint _3066 = (_3064 >> 8u) & 15u;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        if (((4294967295u << _3066) & _2948) == 0u)
        {
            _3170 = _3049;
            _3172 = _3051;
            _3174 = _3053;
            _3176 = _3055;
            _3178 = _3057;
            _3180 = _3059;
        }
        else
        {
            float _3195 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
            float _3196 = _3195 * _2902;
            float _3197 = _3195 * _2903;
            float _3198 = _3195 * _2904;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3066 < ((_3064 >> 12u) & 15u))
            {
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3330 = _3049;
                float _3331 = _3051;
                float _3332 = _3053;
                float _3333 = _3055;
                float _3334 = _3057;
                float _3335 = _3059;
                uint _3336 = _3066;
                uint _3345;
                bool _3346;
                for (;;)
                {
                    _3345 = texelFetch(g_lightClassification, int((((_2942 << 5u) + (_2928 << 9u)) + (_3336 << 2u)) >> 2u)).x;
                    _3346 = _3345 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3346)
                    {
                        frontier_phi_77_pred = _3335;
                        frontier_phi_77_pred_1 = _3334;
                        frontier_phi_77_pred_2 = _3333;
                        frontier_phi_77_pred_3 = _3332;
                        frontier_phi_77_pred_4 = _3331;
                        frontier_phi_77_pred_5 = _3330;
                    }
                    else
                    {
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3552 = _3330;
                        float _3553 = _3331;
                        float _3554 = _3332;
                        float _3555 = _3333;
                        float _3556 = _3334;
                        float _3557 = _3335;
                        uint _3558 = _3345;
                        uint _3559;
                        vec4 _3584;
                        float _3585;
                        vec4 _3600;
                        vec3 _3612;
                        vec4 _3627;
                        vec4 _3642;
                        float _3688;
                        bool _3689;
                        for (;;)
                        {
                            uint _3569 = ((_3336 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3558));
                            _3559 = (_3558 + 4294967295u) & _3558;
                            uint _3571 = _3569 * 40u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3585 = _3584.w;
                            uint _3587 = (_3569 * 40u) + 4u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3569 * 40u) + 8u;
                            _3612 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x));
                            uint _3614 = (_3569 * 40u) + 16u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3629 = (_3569 * 40u) + 20u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3644 = (_3569 * 40u) + 24u;
                            vec4 _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3663 = (_3569 * 40u) + 28u;
                            vec4 _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            _3688 = fma(_2904, _3676.z, fma(_2903, _3676.y, _3676.x * _2902)) + _3676.w;
                            _3689 = !((fma(_2904, _3657.z, fma(_2903, _3657.y, _3657.x * _2902)) + _3657.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3689)
                            {
                                float _3716 = _3584.x - _2902;
                                float _3717 = _3584.y - _2903;
                                float _3718 = _3584.z - _2904;
                                float _3719 = dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718));
                                float _3722 = inversesqrt(_3719);
                                float _3723 = _3722 * _3716;
                                float _3724 = _3722 * _3717;
                                float _3725 = _3722 * _3718;
                                float _3729 = 1.0 - (_3719 / (_3585 * _3585));
                                float _4932 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3734 = sqrt(_3719) * _3600.w;
                                float _3736 = 1.39999997615814208984375 / (_3734 + 1.39999997615814208984375);
                                float _3737 = _3736 * _3736;
                                float _3740 = ((1.0 - _3737) * dot(vec3(_3723, _3724, _3725), vec3(_1156, _1159, _1162))) + _3737;
                                float _3743 = _3734 * _3734;
                                float _3747 = (fma(_2904, _3627.z, fma(_2903, _3627.y, _3627.x * _2902)) + _3627.w) / _3688;
                                float _3748 = (fma(_2904, _3642.z, fma(_2903, _3642.y, _3642.x * _2902)) + _3642.w) / _3688;
                                float _3752 = 1.0 - dot(vec2(_3747, _3748), vec2(_3747, _3748));
                                float _4948 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3753 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3754 = _3753 * (((isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0))) * _3730) / ((_3743 * 0.699999988079071044921875) + 1.0));
                                float _3766 = exp2(log2(1.0 / ((_3743 * 3.5) + 5.0)) * 0.25);
                                float _3767 = 1.0 - _1216;
                                float _3774 = sqrt(1.0 - ((1.0 - (_3767 * _3767)) * (1.0 - (_3766 * _3766))));
                                float _3775 = _3774 * _3774;
                                float _3776 = _3775 * _3775;
                                float _3777 = _3723 - _3196;
                                float _3778 = _3724 - _3197;
                                float _3779 = _3725 - _3198;
                                float _3783 = inversesqrt(dot(vec3(_3777, _3778, _3779), vec3(_3777, _3778, _3779)));
                                float _3787 = dot(vec3(_1156, _1159, _1162), vec3((-0.0) - _3196, (-0.0) - _3197, (-0.0) - _3198));
                                float _4959 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3791 = dot(vec3(_1156, _1159, _1162), vec3(_3783 * _3777, _3783 * _3778, _3783 * _3779));
                                float _4970 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3794 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3798 = ((_3794 * _3794) * (_3776 + (-1.0))) + 1.0;
                                float _3799 = _3736 * _3775;
                                float _3800 = _3799 * _3799;
                                float _3806 = ((1.0 - _3800) * dot(vec3(_1156, _1159, _1162), vec3(_3723, _3724, _3725))) + _3800;
                                float _4981 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3807 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3808 = 1.0 - _3775;
                                float _3818 = (0.5 / (((_3807 * ((_3790 * _3808) + _3775)) + 9.9999999392252902907785028219223e-09) + (((_3807 * _3808) + _3775) * _3790))) * _3807;
                                float _4992 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3828 = (_3753 * _3730) * (((_3776 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3798 * _3798) * ((_3743 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3754 * _3600.y;
                                frontier_phi_83_pred_1 = _3754 * _3600.x;
                                frontier_phi_83_pred_2 = _3828 * _3612.z;
                                frontier_phi_83_pred_3 = _3828 * _3612.y;
                                frontier_phi_83_pred_4 = _3828 * _3612.x;
                                frontier_phi_83_pred_5 = _3754 * _3600.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3836 = frontier_phi_83_pred;
                            _3835 = frontier_phi_83_pred_1;
                            _3834 = frontier_phi_83_pred_2;
                            _3833 = frontier_phi_83_pred_3;
                            _3832 = frontier_phi_83_pred_4;
                            _3837 = frontier_phi_83_pred_5;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3541 = _3834 + _3554;
                            if (_3559 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3559;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3544;
                        frontier_phi_77_pred_1 = _3543;
                        frontier_phi_77_pred_2 = _3542;
                        frontier_phi_77_pred_3 = _3541;
                        frontier_phi_77_pred_4 = _3540;
                        frontier_phi_77_pred_5 = _3539;
                    }
                    _3181 = frontier_phi_77_pred;
                    _3179 = frontier_phi_77_pred_1;
                    _3177 = frontier_phi_77_pred_2;
                    _3175 = frontier_phi_77_pred_3;
                    _3173 = frontier_phi_77_pred_4;
                    _3171 = frontier_phi_77_pred_5;
                    uint _3337 = _3336 + 1u;
                    if (_3337 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3330 = _3171;
                        _3331 = _3173;
                        _3332 = _3175;
                        _3333 = _3177;
                        _3334 = _3179;
                        _3335 = _3181;
                        _3336 = _3337;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3175;
                frontier_phi_58_59_ladder_1 = _3181;
                frontier_phi_58_59_ladder_2 = _3179;
                frontier_phi_58_59_ladder_3 = _3177;
                frontier_phi_58_59_ladder_4 = _3173;
                frontier_phi_58_59_ladder_5 = _3171;
            }
            else
            {
                frontier_phi_58_59_ladder = _3053;
                frontier_phi_58_59_ladder_1 = _3059;
                frontier_phi_58_59_ladder_2 = _3057;
                frontier_phi_58_59_ladder_3 = _3055;
                frontier_phi_58_59_ladder_4 = _3051;
                frontier_phi_58_59_ladder_5 = _3049;
            }
            _3170 = frontier_phi_58_59_ladder_5;
            _3172 = frontier_phi_58_59_ladder_4;
            _3174 = frontier_phi_58_59_ladder;
            _3176 = frontier_phi_58_59_ladder_3;
            _3178 = frontier_phi_58_59_ladder_2;
            _3180 = frontier_phi_58_59_ladder_1;
        }
        float _3185 = isnan(1.0) ? _1200 : (isnan(_1200) ? 1.0 : min(_1200, 1.0));
        _2961 = (_3185 * _3176) + _2413;
        _2963 = (_3185 * _3178) + _2415;
        _2965 = (_3185 * _3180) + _2417;
        _2967 = ((_3170 * 0.039999999105930328369140625) * _3185) + _2746;
        _2969 = ((_3172 * 0.039999999105930328369140625) * _3185) + _2748;
        _2971 = ((_3174 * 0.039999999105930328369140625) * _3185) + _2750;
    }
    else
    {
        _2961 = _2413;
        _2963 = _2415;
        _2965 = _2417;
        _2967 = _2746;
        _2969 = _2748;
        _2971 = _2750;
    }
    float _5008 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _5019 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _5030 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _2988 = ((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2961 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1200))) + ((_2967 + ((isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0))) * _2034)) * cbPerFrame._m0[3u].x);
    float _2989 = ((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2963 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1200))) + ((_2969 + ((isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0))) * _2034)) * cbPerFrame._m0[3u].x);
    float _2990 = ((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_2965 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1200))) + ((_2971 + ((isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0))) * _2034)) * cbPerFrame._m0[3u].x);
    uint _2991 = _295 + 6u;
    float _2999 = _1137 / cbSceneParam._m0[86u].x;
    float _3000 = _1138 / cbSceneParam._m0[86u].y;
    vec4 _3014 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2999, _3000, (log2((isnan(cbSceneParam._m0[77u].w) ? _1059 : (isnan(_1059) ? cbSceneParam._m0[77u].w : min(_1059, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3016 = _3014.x;
    float _3017 = _3014.y;
    float _3018 = _3014.z;
    float _3019 = _3014.w;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    if (_1059 > cbSceneParam._m0[78u].w)
    {
        float _3074 = isnan(_1059) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1059 : min(cbSceneParam._m0[80u].w, _1059));
        float _3075 = _3074 / _1059;
        float _3086 = _3075 * _1110;
        float _3087 = _1111 * _3075;
        float _3088 = (-0.0) - _3087;
        float _3090 = _3075 * _1112;
        float _3092 = (cbSceneParam._m0[77u].w * _3088) / _3074;
        float _3093 = _3092 + cbSceneParam._m0[79u].w;
        float _3094 = cbSceneParam._m0[79u].w - _3087;
        float _3100 = sqrt(((_3086 * _3086) + (_3087 * _3087)) + (_3090 * _3090));
        float _3103 = (1.0 - (cbSceneParam._m0[77u].w / _3074)) * _3100;
        float _3108 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3110 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3287;
        if (abs((_3088 - _3092) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3287 = ((((_3093 > 0.0) ? exp2(_3108 * _3093) : (2.0 - exp2(_3110 * _3093))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3103;
        }
        else
        {
            float _3231 = 1.0 / cbSceneParam._m0[80u].x;
            float _3232 = isnan(_3094) ? _3093 : (isnan(_3093) ? _3094 : max(_3093, _3094));
            float _3233 = isnan(_3094) ? _3093 : (isnan(_3093) ? _3094 : min(_3093, _3094));
            float _3242 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : min(_3232, 0.0));
            float _3243 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : min(_3233, 0.0));
            _3287 = ((abs(_3100 / _3088) * cbSceneParam._m0[80u].y) * ((((_3242 - _3243) * 2.0) - ((exp2(_3108 * (isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0)))) - exp2(_3108 * (isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))))) * _3231)) - ((exp2(_3110 * _3242) - exp2(_3110 * _3243)) * _3231))) + (_3103 * cbSceneParam._m0[80u].z);
        }
        vec4 _3289 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2999, _3000, 1.0), 0.0);
        float _3298 = exp2((_3287 * (-1.44269502162933349609375)) * (1.0 - _3289.w));
        float _3299 = log2(_3298);
        float _3315 = log2(_3019);
        _3112 = (exp2(_3315 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].x)) * _3289.x) / cbSceneParam._m0[78u].x)) + _3016;
        _3114 = (exp2(_3315 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].y)) * _3289.y) / cbSceneParam._m0[78u].y)) + _3017;
        _3116 = (exp2(_3315 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].z)) * _3289.z) / cbSceneParam._m0[78u].z)) + _3018;
        _3118 = _3298 * _3019;
    }
    else
    {
        _3112 = _3016;
        _3114 = _3017;
        _3116 = _3018;
        _3118 = _3019;
    }
    bool _3325;
    vec4 _3128;
    vec4 _3150;
    float _3152;
    float _3156;
    float _3157;
    float _3158;
    float _3159;
    bool _3169;
    for (;;)
    {
        _3128 = cbMatDynParam._m0[0u];
        float _3130 = roundEven(_3128.y);
        bool _3131 = _3130 == 3.0;
        float _3132 = log2(_3118);
        float _3139 = exp2(_3132 * cbSceneParam._m0[78u].x) * _2988;
        float _3140 = exp2(_3132 * cbSceneParam._m0[78u].y) * _2989;
        float _3141 = exp2(_3132 * cbSceneParam._m0[78u].z) * _2990;
        float _3148 = _1126 + (-0.5);
        _3150 = cbMtdParam._m0[1u];
        _3152 = _3150.y * _3148;
        float _3155 = (_3130 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3156 = _3155 * (_3131 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3112)));
        _3157 = _3155 * (_3131 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3114)));
        _3158 = _3155 * (_3131 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3116)));
        _3159 = _3148 * 0.999000012874603271484375;
        _3169 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3169)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3159) < 0.5)
            {
                _3325 = true;
                break;
            }
        }
        uint _3266 = _1175 + uint(_3128.w);
        if ((cbInstanceData._m0[_3266].w < 1.0) && ((cbInstanceData._m0[_3266].w + _3159) < 0.5))
        {
            _3325 = true;
            break;
        }
        if ((_3152 + 1.0) < _3150.x)
        {
            _3325 = true;
            break;
        }
        _3325 = false;
        break;
    }
    float _3530;
    if (_3325)
    {
        discard_state = true;
        _3530 = 0.0;
    }
    else
    {
        _3530 = cbInstanceData._m0[_2991].w;
    }
    SV_Target.x = _3156;
    SV_Target.y = _3157;
    SV_Target.z = _3158;
    SV_Target.w = _3530;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2991].w;
    discard_exit();
}


