#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1303;
float _3948;
float _3949;
float _3950;
float _3951;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3960 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3971 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3982 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _366 = _361.x * cbMtdParam._m0[11u].x;
    float _367 = _361.y * cbMtdParam._m0[11u].y;
    float _368 = _361.z * cbMtdParam._m0[11u].z;
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[24u].z) + _452) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3993 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _480 = (_335.x * cbMtdParam._m0[9u].x) * ((_470 * ((_387.x * cbMtdParam._m0[12u].x) - _366)) + _366);
    float _481 = (_335.y * cbMtdParam._m0[9u].y) * ((_470 * ((_387.y * cbMtdParam._m0[12u].y) - _367)) + _367);
    float _482 = (_335.z * cbMtdParam._m0[9u].z) * ((_470 * ((_387.z * cbMtdParam._m0[12u].z) - _368)) + _368);
    float _486 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _480;
    float _489 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _481;
    float _492 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _482;
    float _500 = (((_480 - _486) * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) + _486) * 4.55000019073486328125;
    float _502 = (((_481 - _489) * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) + _489) * 4.55000019073486328125;
    float _504 = (((_482 - _492) * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) + _492) * 4.55000019073486328125;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _563 = _559.z;
    float _572 = ((_542.z - _563) * _470) + _563;
    float _575 = ((((_542.x - _561) * _470) + _561) * 2.0) + (-1.0);
    float _576 = ((((_542.y - _562) * _470) + _562) * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _4004 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _616 = (_575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_517.x * 2.0) + (-1.0)))) + (((_604.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _617 = (_576 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_517.y * 2.0) + (-1.0)))) + (((_604.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _629 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _658 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_631 - _632) * cbMtdParam._m0[24u].y) + _632) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4015 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _667 = ((((cbMtdParam._m0[10u].x - _500) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _659) + _500;
    float _668 = ((((cbMtdParam._m0[10u].y - _502) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _659) + _502;
    float _669 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _504)) * _659) + _504;
    float _674 = (((_517.z - _572) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _572;
    float _678 = ((_604.z - _674) * cbMtdParam._m0[19u].w) + _674;
    float _682 = ((cbMtdParam._m0[23u].y - _678) * _659) + _678;
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _707 = (_701.x * 2.0) + (-1.0);
    float _708 = (_701.y * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _4026 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _725 = (_659 * (((cbMtdParam._m0[22u].z * _616) - _616) + _707)) + _616;
    float _726 = (_659 * (((cbMtdParam._m0[22u].z * _617) - _617) + _708)) + _617;
    float _727 = (_659 * (sqrt(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) - _582)) + _582;
    float _729 = cbMtdParam._m0[22u].x + _604.w;
    float _732 = fma(_727, _247 * NORMAL.x, fma(_726, _254 * TANGENT.x, (_240 * _232) * _725));
    float _735 = fma(_727, _247 * NORMAL.y, fma(_726, _254 * TANGENT.y, (_240 * _233) * _725));
    float _738 = fma(_727, _247 * NORMAL.z, fma(_726, _254 * TANGENT.z, (_240 * _234) * _725));
    float _742 = inversesqrt(dot(vec3(_732, _735, _738), vec3(_732, _735, _738)));
    float _743 = _742 * _732;
    float _744 = _742 * _735;
    float _745 = _742 * _738;
    float _4037 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _746 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4059 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4070 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4081 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _764 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _814 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _804);
    float _815 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _804);
    float _816 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _804);
    float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
    float _821 = _814 * _820;
    float _822 = _815 * _820;
    float _823 = _816 * _820;
    vec4 _828 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _830 = _828.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _984 = sqrt(((_814 * _814) + (_815 * _815)) + (_816 * _816));
        float _990 = (cbMatDynParam._m0[5u].x * _984) + cbMatDynParam._m0[5u].y;
        float _4092 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _995 = (cbMatDynParam._m0[5u].z * _984) + cbMatDynParam._m0[5u].w;
        float _4103 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) - _991)) + _991) < ((_830 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _841 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _842 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _860 = fma(_745, cbSceneParam._m0[5u].z, fma(_744, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _743));
    float _863 = fma(_745, cbSceneParam._m0[6u].z, fma(_744, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _743));
    float _866 = fma(_745, cbSceneParam._m0[7u].z, fma(_744, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _743));
    uint _879 = _279 + 9u;
    uint _880 = _879 + uint(cbMatDynParam._m0[0u].w);
    float _886 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_880].x;
    float _887 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_880].y;
    float _888 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_880].z;
    float _4114 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    vec4 _900 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _841, cbSceneParam._m0[86u].y * _842));
    float _904 = ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * TEXCOORD_5.w) * _900.x;
    float _905 = dot(vec3(_743, _744, _745), vec3(_821, _822, _823));
    float _908 = _905 * 2.0;
    float _912 = (_908 * _743) - _821;
    float _913 = (_908 * _744) - _822;
    float _914 = (_908 * _745) - _823;
    float _918 = abs(dot(vec3(_821, _822, _823), vec3(_743, _744, _745)));
    float _4147 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _920 = sqrt(_746);
    float _933 = exp2((_920 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_920 * 3.0));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1302;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_973, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965));
        float _1031 = fma(_973, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965));
        float _1035 = fma(_973, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965));
        float _1060 = _965 + _743;
        float _1061 = _969 + _744;
        float _1062 = _973 + _745;
        float _1072 = fma(_1062, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060)) - _1027;
        float _1073 = fma(_1062, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060)) - _1031;
        float _1074 = fma(_1062, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060)) - _1035;
        float _1078 = inversesqrt(dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074)));
        float _1091 = ((_1078 * _1072) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1078 * _1073) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1078 * _1074) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        float _1130 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1096.x + (-0.5));
        float _1132 = _1130 * (_1096.y + (-0.5));
        float _1133 = _1130 * (_1096.z + (-0.5));
        float _1140 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1103.x + (-0.5));
        float _1142 = _1140 * (_1103.y + (-0.5));
        float _1143 = _1140 * (_1103.z + (-0.5));
        float _1150 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1110.x + (-0.5));
        float _1152 = _1150 * (_1110.y + (-0.5));
        float _1153 = _1150 * (_1110.z + (-0.5));
        float _1160 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1117.x + (-0.5));
        float _1162 = _1160 * (_1117.y + (-0.5));
        float _1163 = _1160 * (_1117.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1184 = (dot(vec3(_743, _744, _745), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1194 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _4195 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1196 + 1.0))) + _1201) * _1164;
        float _1211 = _1132 * 0.5;
        float _1212 = _1142 * 0.5;
        float _1213 = _1152 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_743, _744, _745), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _4228 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1238 + 1.0))) + _1243) * _1165;
        float _1253 = _1133 * 0.5;
        float _1254 = _1143 * 0.5;
        float _1255 = _1153 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_743, _744, _745), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4261 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1280 + 1.0))) + _1285) * _1166;
        _1302 = _1133;
        _1304 = _1132;
        _1305 = _1131;
        _1306 = _1143;
        _1307 = _1142;
        _1308 = _1141;
        _1309 = _1153;
        _1310 = _1152;
        _1311 = _1151;
        _1312 = _1166;
        _1313 = _1165;
        _1314 = _1164;
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
    }
    else
    {
        _1302 = _1303;
        _1304 = _1303;
        _1305 = _1303;
        _1306 = _1303;
        _1307 = _1303;
        _1308 = _1303;
        _1309 = _1303;
        _1310 = _1303;
        _1311 = _1303;
        _1312 = _1303;
        _1313 = _1303;
        _1314 = _1303;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1345 = fma(_973, cbModelParam._m0[30u].z, fma(_969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965));
        float _1349 = fma(_973, cbModelParam._m0[31u].z, fma(_969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965));
        float _1353 = fma(_973, cbModelParam._m0[32u].z, fma(_969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965));
        float _1376 = _965 + _743;
        float _1377 = _969 + _744;
        float _1378 = _973 + _745;
        float _1388 = fma(_1378, cbModelParam._m0[30u].z, fma(_1377, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1376)) - _1345;
        float _1389 = fma(_1378, cbModelParam._m0[31u].z, fma(_1377, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1376)) - _1349;
        float _1390 = fma(_1378, cbModelParam._m0[32u].z, fma(_1377, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1376)) - _1353;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1345 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1349 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[35u].z) + ((((((_1353 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1444 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1411.x + (-0.5));
        float _1446 = _1444 * (_1411.y + (-0.5));
        float _1447 = _1444 * (_1411.z + (-0.5));
        float _1454 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1418.x + (-0.5));
        float _1456 = _1454 * (_1418.y + (-0.5));
        float _1457 = _1454 * (_1418.z + (-0.5));
        float _1464 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1425.x + (-0.5));
        float _1466 = _1464 * (_1425.y + (-0.5));
        float _1467 = _1464 * (_1425.z + (-0.5));
        float _1474 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1432.x + (-0.5));
        float _1476 = _1474 * (_1432.y + (-0.5));
        float _1477 = _1474 * (_1432.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_743, _744, _745), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4324 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1508 + 1.0))) + _1513) * _1478;
        float _1523 = _1446 * 0.5;
        float _1524 = _1456 * 0.5;
        float _1525 = _1466 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_743, _744, _745), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4357 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1550 + 1.0))) + _1555) * _1479;
        float _1565 = _1447 * 0.5;
        float _1566 = _1457 * 0.5;
        float _1567 = _1467 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_743, _744, _745), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4390 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1592 + 1.0))) + _1597) * _1480;
        _1614 = _1447;
        _1615 = _1446;
        _1616 = _1445;
        _1617 = _1457;
        _1618 = _1456;
        _1619 = _1455;
        _1620 = _1467;
        _1621 = _1466;
        _1622 = _1465;
        _1623 = _1480;
        _1624 = _1479;
        _1625 = _1478;
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
    }
    else
    {
        _1614 = _1303;
        _1615 = _1303;
        _1616 = _1303;
        _1617 = _1303;
        _1618 = _1303;
        _1619 = _1303;
        _1620 = _1303;
        _1621 = _1303;
        _1622 = _1303;
        _1623 = _1303;
        _1624 = _1303;
        _1625 = _1303;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1315)) + _1315;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1316)) + _1316;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1317)) + _1317;
    float _1661 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1638));
    float _1682 = _912 * 0.5;
    float _1683 = _913 * 0.5;
    float _1684 = _914 * 0.5;
    float _1685 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1688 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1691 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1725;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1698 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1302, _1306, _1309, _1312));
        float _1702 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1706 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1713 = dot(vec4(cbModelParam._m0[39u]), vec4(_1682, _1683, _1684, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1736;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1727 = dot(vec4(cbModelParam._m0[40u]), vec4(_1682, _1683, _1684, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1740 = (_1736 * cbModelParam._m0[1u].x) + (_1725 * (1.0 - cbModelParam._m0[1u].x));
    float _1750 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _746);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1750 : min(cbModelParam._m0[25u].z, _1750));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1800 = fma(_973, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965)) + cbModelParam._m0[13u].w;
        float _1804 = fma(_973, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965)) + cbModelParam._m0[14u].w;
        float _1808 = fma(_973, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965)) + cbModelParam._m0[15u].w;
        float _1811 = fma(_914, cbModelParam._m0[13u].z, fma(_913, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _912));
        float _1814 = fma(_914, cbModelParam._m0[14u].z, fma(_913, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _912));
        float _1817 = fma(_914, cbModelParam._m0[15u].z, fma(_913, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _912));
        float _1845;
        if (_1811 > 0.0)
        {
            _1845 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1845 = frontier_phi_17_15_ladder;
        }
        float _2016;
        if (_1814 > 0.0)
        {
            _2016 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2016 = frontier_phi_26_22_ladder;
        }
        float _2311;
        if (_1817 > 0.0)
        {
            _2311 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2311 = frontier_phi_38_33_ladder;
        }
        float _2313 = isnan(_2016) ? _1845 : (isnan(_1845) ? _2016 : min(_1845, _2016));
        float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
        float _2318 = (_2314 * _1811) + _1800;
        float _2319 = (_2314 * _1814) + _1804;
        float _2320 = (_2314 * _1817) + _1808;
        float _2321 = _2314 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2321;
        float _2325 = _2321 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 > _2325) || ((_2319 < _2323) || ((_2318 < _2323) || (_2318 > _2325))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2465 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2320, cbModelParam._m0[9u].z, fma(_2319, cbModelParam._m0[9u].y, _2318 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2320, cbModelParam._m0[10u].z, fma(_2319, cbModelParam._m0[10u].y, _2318 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2320, cbModelParam._m0[11u].z, fma(_2319, cbModelParam._m0[11u].y, _2318 * cbModelParam._m0[11u].x))), _1751);
            frontier_phi_16_38_ladder = _2465.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2465.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2465.x * cbModelParam._m0[1u].y;
        }
        _1833 = frontier_phi_16_38_ladder_2;
        _1835 = frontier_phi_16_38_ladder_1;
        _1837 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_912, _913, _914), _1751);
        _1833 = _1821.x * cbModelParam._m0[1u].y;
        _1835 = _1821.y * cbModelParam._m0[1u].y;
        _1837 = _1821.z * cbModelParam._m0[1u].y;
    }
    float _1841 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _746);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1841 : min(cbModelParam._m0[25u].w, _1841));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1897 = fma(_973, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965)) + cbModelParam._m0[21u].w;
        float _1901 = fma(_973, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965)) + cbModelParam._m0[22u].w;
        float _1905 = fma(_973, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965)) + cbModelParam._m0[23u].w;
        float _1908 = fma(_914, cbModelParam._m0[21u].z, fma(_913, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _912));
        float _1911 = fma(_914, cbModelParam._m0[22u].z, fma(_913, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _912));
        float _1914 = fma(_914, cbModelParam._m0[23u].z, fma(_913, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _912));
        float _2021;
        if (_1908 > 0.0)
        {
            _2021 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2021 = frontier_phi_28_24_ladder;
        }
        float _2338;
        if (_1911 > 0.0)
        {
            _2338 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2338 = frontier_phi_40_35_ladder;
        }
        float _2665;
        if (_1914 > 0.0)
        {
            _2665 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2665 = frontier_phi_50_47_ladder;
        }
        float _2667 = isnan(_2338) ? _2021 : (isnan(_2021) ? _2338 : min(_2021, _2338));
        float _2668 = isnan(_2665) ? _2667 : (isnan(_2667) ? _2665 : min(_2667, _2665));
        float _2672 = (_2668 * _1908) + _1897;
        float _2673 = (_2668 * _1911) + _1901;
        float _2674 = (_2668 * _1914) + _1905;
        float _2675 = _2668 * 9.9999997473787516355514526367188e-05;
        float _2676 = (-1.0) - _2675;
        float _2678 = _2675 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2674 > _2678) || ((_2674 < _2676) || ((_2673 > _2678) || ((_2673 < _2676) || ((_2672 < _2676) || (_2672 > _2678))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2674, cbModelParam._m0[17u].z, fma(_2673, cbModelParam._m0[17u].y, _2672 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2674, cbModelParam._m0[18u].z, fma(_2673, cbModelParam._m0[18u].y, _2672 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2674, cbModelParam._m0[19u].z, fma(_2673, cbModelParam._m0[19u].y, _2672 * cbModelParam._m0[19u].x))), _1842);
            frontier_phi_25_50_ladder = _2792.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2792.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2792.x * cbModelParam._m0[1u].z;
        }
        _1933 = frontier_phi_25_50_ladder_2;
        _1935 = frontier_phi_25_50_ladder_1;
        _1937 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_912, _913, _914), _1842);
        _1933 = _1917.x * cbModelParam._m0[1u].z;
        _1935 = _1917.y * cbModelParam._m0[1u].z;
        _1937 = _1917.z * cbModelParam._m0[1u].z;
    }
    float _1949 = ((((1.0 - _933) * ((_920 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_933 * _920)) * _904;
    float _1950 = _1949 * ((cbModelParam._m0[1u].w * (_1933 - _1833)) + _1833);
    float _1951 = _1949 * ((cbModelParam._m0[1u].w * (_1935 - _1835)) + _1835);
    float _1952 = _1949 * ((cbModelParam._m0[1u].w * (_1937 - _1837)) + _1837);
    float _1955 = fma(_1952, cbSceneParam._m0[89u].z, fma(_1951, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1958 = fma(_1952, cbSceneParam._m0[90u].z, fma(_1951, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1961 = fma(_1952, cbSceneParam._m0[91u].z, fma(_1951, cbSceneParam._m0[91u].y, _1950 * cbSceneParam._m0[91u].x));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2003 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2007 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2008 = _1995 / _2007;
    float _2009 = _1999 / _2007;
    float _2010 = _2003 / _2007;
    float _2157;
    float _2158;
    float _2159;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2037 = ((uint(_2010 > cbSceneParam._m0[59u].y) + uint(_2010 > cbSceneParam._m0[59u].x)) + uint(_2010 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2038 = _2037 + 43u;
        uint _2046 = _2037 + 44u;
        uint _2054 = _2037 + 45u;
        uint _2062 = _2037 + 46u;
        float _2073 = fma(_2007, cbSceneParam._m0[_2038].w, fma(_2003, cbSceneParam._m0[_2038].z, fma(_1999, cbSceneParam._m0[_2038].y, _1995 * cbSceneParam._m0[_2038].x)));
        float _2077 = fma(_2007, cbSceneParam._m0[_2046].w, fma(_2003, cbSceneParam._m0[_2046].z, fma(_1999, cbSceneParam._m0[_2046].y, _1995 * cbSceneParam._m0[_2046].x)));
        float _2085 = fma(_2007, cbSceneParam._m0[_2062].w, fma(_2003, cbSceneParam._m0[_2062].z, fma(_1999, cbSceneParam._m0[_2062].y, _1995 * cbSceneParam._m0[_2062].x)));
        float _2090 = cbSceneParam._m0[33u].z * _2085;
        float _2092 = cbSceneParam._m0[33u].w * _2085;
        float _2095 = fma(_2007, cbSceneParam._m0[_2054].w, fma(_2003, cbSceneParam._m0[_2054].z, fma(_1999, cbSceneParam._m0[_2054].y, _1995 * cbSceneParam._m0[_2054].x))) / _2085;
        float _2143 = (cbSceneParam._m0[33u].x - sqrt(((_2009 * _2009) + (_2008 * _2008)) + (_2010 * _2010))) * cbSceneParam._m0[33u].y;
        float _4516 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2150 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 + _2073) / _2085, (_2092 + _2077) / _2085), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 + _2073) / _2085, (_2077 - _2090) / _2085), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2073 - _2090) / _2085, (_2077 - _2092) / _2085), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2073 - _2092) / _2085, (_2090 + _2077) / _2085), _2095), 0.0)).x), vec4(0.25)));
        _2157 = 1.0 - (_2150 * cbSceneParam._m0[34u].x);
        _2158 = 1.0 - (_2150 * cbSceneParam._m0[34u].y);
        _2159 = 1.0 - (_2150 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2157 = 1.0;
        _2158 = 1.0;
        _2159 = 1.0;
    }
    float _2223;
    float _2225;
    float _2227;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2211 = fma(_2007, cbSceneParam._m0[63u].w, fma(_2003, cbSceneParam._m0[63u].z, fma(_1999, cbSceneParam._m0[63u].y, _1995 * cbSceneParam._m0[63u].x)));
        float _2212 = fma(_2007, cbSceneParam._m0[60u].w, fma(_2003, cbSceneParam._m0[60u].z, fma(_1999, cbSceneParam._m0[60u].y, _1995 * cbSceneParam._m0[60u].x))) / _2211;
        float _2213 = fma(_2007, cbSceneParam._m0[61u].w, fma(_2003, cbSceneParam._m0[61u].z, fma(_1999, cbSceneParam._m0[61u].y, _1995 * cbSceneParam._m0[61u].x))) / _2211;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2212 >= cbSceneParam._m0[64u].x) && (_2213 >= cbSceneParam._m0[64u].y)) && (_2212 <= cbSceneParam._m0[64u].z)) && (_2213 <= cbSceneParam._m0[64u].w))
        {
            float _2351 = fma(_2007, cbSceneParam._m0[62u].w, fma(_2003, cbSceneParam._m0[62u].z, fma(_1999, cbSceneParam._m0[62u].y, _1995 * cbSceneParam._m0[62u].x))) / _2211;
            float _2355 = isnan(cbSceneParam._m0[41u].w) ? _2351 : (isnan(_2351) ? cbSceneParam._m0[41u].w : max(_2351, cbSceneParam._m0[41u].w));
            float _2398 = (cbSceneParam._m0[33u].x - sqrt(((_2009 * _2009) + (_2008 * _2008)) + (_2010 * _2010))) * cbSceneParam._m0[33u].y;
            float _4532 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
            float _2405 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2212, cbSceneParam._m0[33u].w + _2213), _2355), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2212, _2213 - cbSceneParam._m0[33u].z), _2355), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2212 - cbSceneParam._m0[33u].z, _2213 - cbSceneParam._m0[33u].w), _2355), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2212 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2213), _2355), 0.0)).x), vec4(0.25)));
            float _2409 = 1.0 - (_2405 * cbSceneParam._m0[34u].x);
            float _2410 = 1.0 - (_2405 * cbSceneParam._m0[34u].y);
            float _2411 = 1.0 - (_2405 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2411) ? _2159 : (isnan(_2159) ? _2411 : min(_2159, _2411));
            frontier_phi_37_36_ladder_1 = isnan(_2410) ? _2158 : (isnan(_2158) ? _2410 : min(_2158, _2410));
            frontier_phi_37_36_ladder_2 = isnan(_2409) ? _2157 : (isnan(_2157) ? _2409 : min(_2157, _2409));
        }
        else
        {
            frontier_phi_37_36_ladder = _2159;
            frontier_phi_37_36_ladder_1 = _2158;
            frontier_phi_37_36_ladder_2 = _2157;
        }
        _2223 = frontier_phi_37_36_ladder_2;
        _2225 = frontier_phi_37_36_ladder_1;
        _2227 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2223 = _2157;
        _2225 = _2158;
        _2227 = _2159;
    }
    uvec4 _2232 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2234 = _2232.x * 14u;
    uint _2235 = _2234 + 13u;
    float _2242 = _904 + (-1.0);
    float _2247 = (cbLight._m0[_2235].x * _2242) + 1.0;
    float _2248 = (cbLight._m0[_2235].y * _2242) + 1.0;
    float _2249 = (cbLight._m0[_2235].z * _2242) + 1.0;
    float _2250 = (cbLight._m0[_2235].w * _2242) + 1.0;
    uint _2251 = _2234 + 5u;
    float _2257 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
    uint _2261 = _2234 + 4u;
    float _2270 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
    uint _2274 = _2234 | 1u;
    float _2285 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_743, _744, _745));
    float _2288 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_743, _744, _745));
    float _4568 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _4579 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2293 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * 0.3183098733425140380859375;
    float _2295 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * 0.3183098733425140380859375;
    float _2302 = ((cbLight._m0[_2251].x * _2257) * _2295) + (((cbLight._m0[_2261].x * _2223) * _2270) * _2293);
    float _2303 = ((_2257 * cbLight._m0[_2251].y) * _2295) + (((cbLight._m0[_2261].y * _2225) * _2270) * _2293);
    float _2304 = ((_2257 * cbLight._m0[_2251].z) * _2295) + (((cbLight._m0[_2261].z * _2227) * _2270) * _2293);
    uvec4 _2308 = floatBitsToUint(cbLight._m0[_2234 + 12u]);
    bool _2310 = _2308.x == 0u;
    float _2412;
    float _2414;
    float _2416;
    if (_2310)
    {
        _2412 = _2302;
        _2414 = _2303;
        _2416 = _2304;
    }
    else
    {
        uint _2420 = _2234 + 6u;
        float _2436 = (dot(vec3(cbLight._m0[_2234 + 2u].xyz), vec3(_743, _744, _745)) * 0.5) + 0.5;
        float _2437 = _2436 * _2436;
        float _4590 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2438 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2439 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2412 = (((cbLight._m0[_2420].x * 0.3183098733425140380859375) * _2438) * _2439) + _2302;
        _2414 = (((cbLight._m0[_2420].y * 0.3183098733425140380859375) * _2438) * _2439) + _2303;
        _2416 = (((cbLight._m0[_2420].z * 0.3183098733425140380859375) * _2438) * _2439) + _2304;
    }
    bool _2419 = _2308.y == 0u;
    float _2474;
    float _2476;
    float _2478;
    if (_2419)
    {
        _2474 = _2412;
        _2476 = _2414;
        _2478 = _2416;
    }
    else
    {
        uint _2636 = _2234 + 7u;
        float _2652 = (dot(vec3(cbLight._m0[_2234 + 3u].xyz), vec3(_743, _744, _745)) * 0.5) + 0.5;
        float _2653 = _2652 * _2652;
        float _4606 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2654 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2655 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2474 = (((cbLight._m0[_2636].x * 0.3183098733425140380859375) * _2654) * _2655) + _2412;
        _2476 = (((cbLight._m0[_2636].y * 0.3183098733425140380859375) * _2654) * _2655) + _2414;
        _2478 = (((cbLight._m0[_2636].z * 0.3183098733425140380859375) * _2654) * _2655) + _2416;
    }
    uint _2481 = _2234 + 8u;
    float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2234].w)) * _746) * 0.949999988079071044921875);
    float _2495 = _2494 * _2494;
    float _2496 = cbLight._m0[_2234].x + _821;
    float _2497 = cbLight._m0[_2234].y + _822;
    float _2498 = cbLight._m0[_2234].z + _823;
    float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
    float _2503 = _2502 * _2496;
    float _2504 = _2502 * _2497;
    float _2505 = _2502 * _2498;
    float _2506 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2234].xyz));
    float _4622 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _4633 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _2510 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2511 = dot(vec3(_743, _744, _745), vec3(_2503, _2504, _2505));
    float _4644 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2515 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_2503, _2504, _2505));
    float _4655 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2519 = _2495 * _2495;
    float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
    float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2535 = 1.0 - _2495;
    float _2546 = (0.5 / (((_2510 * ((_2509 * _2535) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2510 * _2535) + _2495) * _2509))) * _2509;
    float _4666 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2548 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
    uint _2562 = _2234 + 9u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _746) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2274].x + _821;
    float _2576 = cbLight._m0[_2274].y + _822;
    float _2577 = cbLight._m0[_2274].z + _823;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2274].xyz));
    float _4677 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2589 = dot(vec3(_743, _744, _745), vec3(_2582, _2583, _2584));
    float _4688 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2582, _2583, _2584));
    float _4699 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2574 * _2574;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2610 = (exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2611 = 1.0 - _2574;
    float _2621 = (0.5 / (((_2510 * ((_2588 * _2611) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2510 * _2611) + _2574) * _2588))) * _2588;
    float _4710 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    float _2633 = (((_2610 * cbLight._m0[_2562].x) * _2623) * _2257) + ((((cbLight._m0[_2481].x * _2223) * _2534) * _2548) * _2270);
    float _2634 = (((_2610 * cbLight._m0[_2562].y) * _2623) * _2257) + ((((cbLight._m0[_2481].y * _2225) * _2534) * _2548) * _2270);
    float _2635 = (((_2610 * cbLight._m0[_2562].z) * _2623) * _2257) + ((((cbLight._m0[_2481].z * _2227) * _2534) * _2548) * _2270);
    float _2691;
    float _2693;
    float _2695;
    if (_2310)
    {
        _2691 = _2633;
        _2693 = _2634;
        _2695 = _2635;
    }
    else
    {
        uint _2697 = _2234 + 2u;
        uint _2701 = _2234 + 10u;
        float _2715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2697].w)) * _746) * 0.949999988079071044921875);
        float _2716 = _2715 * _2715;
        float _2717 = cbLight._m0[_2697].x + _821;
        float _2718 = cbLight._m0[_2697].y + _822;
        float _2719 = cbLight._m0[_2697].z + _823;
        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
        float _2724 = _2723 * _2717;
        float _2725 = _2723 * _2718;
        float _2726 = _2723 * _2719;
        float _2727 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2697].xyz));
        float _4721 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2731 = dot(vec3(_743, _744, _745), vec3(_2724, _2725, _2726));
        float _4732 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2735 = dot(vec3(cbLight._m0[_2697].xyz), vec3(_2724, _2725, _2726));
        float _4743 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2739 = _2716 * _2716;
        float _2743 = ((_2734 * _2734) * (_2739 + (-1.0))) + 1.0;
        float _2752 = (exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2753 = 1.0 - _2716;
        float _2763 = (0.5 / (((_2510 * ((_2730 * _2753) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2510 * _2753) + _2716) * _2730))) * _2730;
        float _4754 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2765 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2739 / ((_2743 * _2743) * 3.141590118408203125));
        float _2766 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2691 = (((_2752 * cbLight._m0[_2701].x) * _2765) * _2766) + _2633;
        _2693 = (((_2752 * cbLight._m0[_2701].y) * _2765) * _2766) + _2634;
        _2695 = (((_2752 * cbLight._m0[_2701].z) * _2765) * _2766) + _2635;
    }
    float _2797;
    float _2799;
    float _2801;
    if (_2419)
    {
        _2797 = _2691;
        _2799 = _2693;
        _2801 = _2695;
    }
    else
    {
        uint _2808 = _2234 + 3u;
        uint _2812 = _2234 + 11u;
        float _2826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2808].w)) * _746) * 0.949999988079071044921875);
        float _2827 = _2826 * _2826;
        float _2828 = cbLight._m0[_2808].x + _821;
        float _2829 = cbLight._m0[_2808].y + _822;
        float _2830 = cbLight._m0[_2808].z + _823;
        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
        float _2835 = _2834 * _2828;
        float _2836 = _2834 * _2829;
        float _2837 = _2834 * _2830;
        float _2838 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2808].xyz));
        float _4770 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2842 = dot(vec3(_743, _744, _745), vec3(_2835, _2836, _2837));
        float _4781 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2846 = dot(vec3(cbLight._m0[_2808].xyz), vec3(_2835, _2836, _2837));
        float _4792 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2850 = _2827 * _2827;
        float _2854 = ((_2845 * _2845) * (_2850 + (-1.0))) + 1.0;
        float _2863 = (exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2864 = 1.0 - _2827;
        float _2874 = (0.5 / (((_2510 * ((_2841 * _2864) + _2827)) + 9.9999999392252902907785028219223e-09) + (((_2510 * _2864) + _2827) * _2841))) * _2841;
        float _4803 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2876 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2850 / ((_2854 * _2854) * 3.141590118408203125));
        float _2877 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2797 = (((_2863 * cbLight._m0[_2812].x) * _2876) * _2877) + _2691;
        _2799 = (((_2863 * cbLight._m0[_2812].y) * _2876) * _2877) + _2693;
        _2801 = (((_2863 * cbLight._m0[_2812].z) * _2876) * _2877) + _2695;
    }
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_2232.y == 0u)
    {
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.x;
        uint _2910 = uint((float(_2898.y) * floor(float(uint(cbSceneParam._m0[85u].y * _842) / _2899))) + floor(float(uint(cbSceneParam._m0[85u].x * _841) / _2899)));
        float _2920 = (log2(_2010 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2921 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        uint _2924 = uint(isnan(14.0) ? _2921 : (isnan(_2921) ? 14.0 : min(_2921, 14.0)));
        uvec4 _2929 = texelFetch(g_lightClusterGridBuffer, int(((_2924 << 2u) + (_2910 << 6u)) >> 2u));
        uint _2930 = _2929.x;
        uint _2931 = _2898.z;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((((1u << ((_2931 >> 4u) & 15u)) + 4294967295u) & _2930) == 0u) || ((_2931 & 240u) == 0u))
        {
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
        }
        else
        {
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            uint _3169 = 0u;
            uint _3178;
            bool _3179;
            for (;;)
            {
                _3178 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                _3179 = _3178 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3179)
                {
                    frontier_phi_71_pred = _3168;
                    frontier_phi_71_pred_1 = _3167;
                    frontier_phi_71_pred_2 = _3166;
                    frontier_phi_71_pred_3 = _3165;
                    frontier_phi_71_pred_4 = _3164;
                    frontier_phi_71_pred_5 = _3163;
                }
                else
                {
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    uint _3314;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3178;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    for (;;)
                    {
                        uint _3318 = uint(findLSB(_3314)) + (_3169 << 5u);
                        uint _3315 = (_3314 + 4294967295u) & _3314;
                        uint _3320 = _3318 * 48u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3340 = (_3318 * 48u) + 4u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3359 = (_3318 * 48u) + 8u;
                        vec3 _3370 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x));
                        float _3374 = _3334.x - _2008;
                        float _3375 = _3334.y - _2009;
                        float _3376 = _3334.z - _2010;
                        float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                        float _3380 = inversesqrt(_3377);
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3384 = dot(vec3(_860, _863, _866), vec3(_3381, _3382, _3383));
                        float _3389 = 1.0 - (_3377 * _3334.w);
                        float _4829 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3390 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3391 = sqrt(_3377) * _3353.w;
                        float _3394 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3384) + _3395;
                        float _3401 = _3391 * _3391;
                        float _3405 = ((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3390) / ((_3401 * 0.699999988079071044921875) + 1.0);
                        float _3409 = (-0.0) - _2008;
                        float _3410 = (-0.0) - _2009;
                        float _3411 = (-0.0) - _2010;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3425 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                        float _3426 = 1.0 - _920;
                        float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                        float _3434 = _3433 * _3433;
                        float _3435 = _3434 * _3434;
                        float _3436 = _3416 + _3381;
                        float _3437 = _3417 + _3382;
                        float _3438 = _3418 + _3383;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3446 = dot(vec3(_860, _863, _866), vec3(_3416, _3417, _3418));
                        float _4845 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3450 = dot(vec3(_860, _863, _866), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                        float _4856 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3453 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                        float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                        float _3458 = _3394 * _3434;
                        float _3459 = _3458 * _3458;
                        float _3462 = ((1.0 - _3459) * _3384) + _3459;
                        float _4867 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3463 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3464 = 1.0 - _3434;
                        float _3474 = (0.5 / (((_3463 * ((_3449 * _3464) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3434) * _3449))) * _3463;
                        float _4878 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3485 = (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) / ((_3457 * _3457) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125))) * _3390;
                        _3238 = (_3405 * _3353.x) + _3311;
                        _3239 = (_3405 * _3353.y) + _3312;
                        _3240 = (_3405 * _3353.z) + _3313;
                        _3235 = (_3485 * _3370.x) + _3308;
                        _3236 = (_3485 * _3370.y) + _3309;
                        _3237 = (_3485 * _3370.z) + _3310;
                        if (_3315 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3315;
                        }
                    }
                    frontier_phi_71_pred = _3240;
                    frontier_phi_71_pred_1 = _3239;
                    frontier_phi_71_pred_2 = _3238;
                    frontier_phi_71_pred_3 = _3237;
                    frontier_phi_71_pred_4 = _3236;
                    frontier_phi_71_pred_5 = _3235;
                }
                _3021 = frontier_phi_71_pred;
                _3019 = frontier_phi_71_pred_1;
                _3017 = frontier_phi_71_pred_2;
                _3015 = frontier_phi_71_pred_3;
                _3013 = frontier_phi_71_pred_4;
                _3011 = frontier_phi_71_pred_5;
                uint _3170 = _3169 + 1u;
                if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3163 = _3011;
                    _3164 = _3013;
                    _3165 = _3015;
                    _3166 = _3017;
                    _3167 = _3019;
                    _3168 = _3021;
                    _3169 = _3170;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
        }
        uvec4 _3024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3025 = _3024.z;
        uint _3027 = (_3025 >> 8u) & 15u;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((4294967295u << _3027) & _2930) == 0u)
        {
            _3131 = _3010;
            _3133 = _3012;
            _3135 = _3014;
            _3137 = _3016;
            _3139 = _3018;
            _3141 = _3020;
        }
        else
        {
            float _3156 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
            float _3157 = _3156 * _2008;
            float _3158 = _3156 * _2009;
            float _3159 = _3156 * _2010;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3027 < ((_3025 >> 12u) & 15u))
            {
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3291 = _3010;
                float _3292 = _3012;
                float _3293 = _3014;
                float _3294 = _3016;
                float _3295 = _3018;
                float _3296 = _3020;
                uint _3297 = _3027;
                uint _3306;
                bool _3307;
                for (;;)
                {
                    _3306 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3297 << 2u)) >> 2u)).x;
                    _3307 = _3306 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3307)
                    {
                        frontier_phi_82_pred = _3296;
                        frontier_phi_82_pred_1 = _3295;
                        frontier_phi_82_pred_2 = _3294;
                        frontier_phi_82_pred_3 = _3293;
                        frontier_phi_82_pred_4 = _3292;
                        frontier_phi_82_pred_5 = _3291;
                    }
                    else
                    {
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3512 = _3291;
                        float _3513 = _3292;
                        float _3514 = _3293;
                        float _3515 = _3294;
                        float _3516 = _3295;
                        float _3517 = _3296;
                        uint _3518 = _3306;
                        uint _3519;
                        vec4 _3544;
                        float _3545;
                        vec4 _3560;
                        vec3 _3572;
                        vec4 _3587;
                        vec4 _3602;
                        float _3648;
                        bool _3649;
                        for (;;)
                        {
                            uint _3529 = ((_3297 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3518));
                            _3519 = (_3518 + 4294967295u) & _3518;
                            uint _3531 = _3529 * 40u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3545 = _3544.w;
                            uint _3547 = (_3529 * 40u) + 4u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3529 * 40u) + 8u;
                            _3572 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x));
                            uint _3574 = (_3529 * 40u) + 16u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3589 = (_3529 * 40u) + 20u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3604 = (_3529 * 40u) + 24u;
                            vec4 _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3623 = (_3529 * 40u) + 28u;
                            vec4 _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            _3648 = fma(_2010, _3636.z, fma(_2009, _3636.y, _3636.x * _2008)) + _3636.w;
                            _3649 = !((fma(_2010, _3617.z, fma(_2009, _3617.y, _3617.x * _2008)) + _3617.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3649)
                            {
                                float _3676 = _3544.x - _2008;
                                float _3677 = _3544.y - _2009;
                                float _3678 = _3544.z - _2010;
                                float _3679 = dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678));
                                float _3682 = inversesqrt(_3679);
                                float _3683 = _3682 * _3676;
                                float _3684 = _3682 * _3677;
                                float _3685 = _3682 * _3678;
                                float _3689 = 1.0 - (_3679 / (_3545 * _3545));
                                float _4889 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3694 = sqrt(_3679) * _3560.w;
                                float _3696 = 1.39999997615814208984375 / (_3694 + 1.39999997615814208984375);
                                float _3697 = _3696 * _3696;
                                float _3700 = ((1.0 - _3697) * dot(vec3(_3683, _3684, _3685), vec3(_860, _863, _866))) + _3697;
                                float _3703 = _3694 * _3694;
                                float _3707 = (fma(_2010, _3587.z, fma(_2009, _3587.y, _3587.x * _2008)) + _3587.w) / _3648;
                                float _3708 = (fma(_2010, _3602.z, fma(_2009, _3602.y, _3602.x * _2008)) + _3602.w) / _3648;
                                float _3712 = 1.0 - dot(vec2(_3707, _3708), vec2(_3707, _3708));
                                float _4905 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3714 = _3713 * (((isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0))) * _3690) / ((_3703 * 0.699999988079071044921875) + 1.0));
                                float _3726 = exp2(log2(1.0 / ((_3703 * 3.5) + 5.0)) * 0.25);
                                float _3727 = 1.0 - _920;
                                float _3734 = sqrt(1.0 - ((1.0 - (_3727 * _3727)) * (1.0 - (_3726 * _3726))));
                                float _3735 = _3734 * _3734;
                                float _3736 = _3735 * _3735;
                                float _3737 = _3683 - _3157;
                                float _3738 = _3684 - _3158;
                                float _3739 = _3685 - _3159;
                                float _3743 = inversesqrt(dot(vec3(_3737, _3738, _3739), vec3(_3737, _3738, _3739)));
                                float _3747 = dot(vec3(_860, _863, _866), vec3((-0.0) - _3157, (-0.0) - _3158, (-0.0) - _3159));
                                float _4916 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3750 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3751 = dot(vec3(_860, _863, _866), vec3(_3743 * _3737, _3743 * _3738, _3743 * _3739));
                                float _4927 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3754 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3758 = ((_3754 * _3754) * (_3736 + (-1.0))) + 1.0;
                                float _3759 = _3696 * _3735;
                                float _3760 = _3759 * _3759;
                                float _3766 = ((1.0 - _3760) * dot(vec3(_860, _863, _866), vec3(_3683, _3684, _3685))) + _3760;
                                float _4938 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3768 = 1.0 - _3735;
                                float _3778 = (0.5 / (((_3767 * ((_3750 * _3768) + _3735)) + 9.9999999392252902907785028219223e-09) + (((_3767 * _3768) + _3735) * _3750))) * _3767;
                                float _4949 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3788 = (_3713 * _3690) * (((_3736 * 3.1415927410125732421875) * (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) / ((_3758 * _3758) * ((_3703 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3714 * _3560.z;
                                frontier_phi_88_pred_1 = _3714 * _3560.y;
                                frontier_phi_88_pred_2 = _3714 * _3560.x;
                                frontier_phi_88_pred_3 = _3788 * _3572.z;
                                frontier_phi_88_pred_4 = _3788 * _3572.y;
                                frontier_phi_88_pred_5 = _3788 * _3572.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3797 = frontier_phi_88_pred;
                            _3796 = frontier_phi_88_pred_1;
                            _3795 = frontier_phi_88_pred_2;
                            _3794 = frontier_phi_88_pred_3;
                            _3793 = frontier_phi_88_pred_4;
                            _3792 = frontier_phi_88_pred_5;
                            _3502 = _3795 + _3515;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            if (_3519 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3519;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3504;
                        frontier_phi_82_pred_1 = _3503;
                        frontier_phi_82_pred_2 = _3502;
                        frontier_phi_82_pred_3 = _3501;
                        frontier_phi_82_pred_4 = _3500;
                        frontier_phi_82_pred_5 = _3499;
                    }
                    _3142 = frontier_phi_82_pred;
                    _3140 = frontier_phi_82_pred_1;
                    _3138 = frontier_phi_82_pred_2;
                    _3136 = frontier_phi_82_pred_3;
                    _3134 = frontier_phi_82_pred_4;
                    _3132 = frontier_phi_82_pred_5;
                    uint _3298 = _3297 + 1u;
                    if (_3298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3291 = _3132;
                        _3292 = _3134;
                        _3293 = _3136;
                        _3294 = _3138;
                        _3295 = _3140;
                        _3296 = _3142;
                        _3297 = _3298;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3138;
                frontier_phi_63_64_ladder_1 = _3142;
                frontier_phi_63_64_ladder_2 = _3140;
                frontier_phi_63_64_ladder_3 = _3136;
                frontier_phi_63_64_ladder_4 = _3134;
                frontier_phi_63_64_ladder_5 = _3132;
            }
            else
            {
                frontier_phi_63_64_ladder = _3016;
                frontier_phi_63_64_ladder_1 = _3020;
                frontier_phi_63_64_ladder_2 = _3018;
                frontier_phi_63_64_ladder_3 = _3014;
                frontier_phi_63_64_ladder_4 = _3012;
                frontier_phi_63_64_ladder_5 = _3010;
            }
            _3131 = frontier_phi_63_64_ladder_5;
            _3133 = frontier_phi_63_64_ladder_4;
            _3135 = frontier_phi_63_64_ladder_3;
            _3137 = frontier_phi_63_64_ladder;
            _3139 = frontier_phi_63_64_ladder_2;
            _3141 = frontier_phi_63_64_ladder_1;
        }
        float _3146 = isnan(1.0) ? _904 : (isnan(_904) ? 1.0 : min(_904, 1.0));
        _2943 = (_3146 * _3137) + _2474;
        _2945 = (_3146 * _3139) + _2476;
        _2947 = (_3146 * _3141) + _2478;
        _2949 = ((_3131 * 0.039999999105930328369140625) * _3146) + _2797;
        _2951 = ((_3133 * 0.039999999105930328369140625) * _3146) + _2799;
        _2953 = ((_3135 * 0.039999999105930328369140625) * _3146) + _2801;
    }
    else
    {
        _2943 = _2474;
        _2945 = _2476;
        _2947 = _2478;
        _2949 = _2797;
        _2951 = _2799;
        _2953 = _2801;
    }
    float _4965 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4976 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4987 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2970 = ((isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_2943 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _904))) + ((_2949 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1740)) * cbPerFrame._m0[3u].x);
    float _2971 = ((isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2945 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _904))) + ((_2951 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1740)) * cbPerFrame._m0[3u].x);
    float _2972 = ((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_2947 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _904))) + ((_2953 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1740)) * cbPerFrame._m0[3u].x);
    uint _2973 = _279 + 6u;
    float _2981 = _841 / cbSceneParam._m0[86u].x;
    float _2982 = _842 / cbSceneParam._m0[86u].y;
    vec4 _2996 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, (log2((isnan(cbSceneParam._m0[77u].w) ? _764 : (isnan(_764) ? cbSceneParam._m0[77u].w : min(_764, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2998 = _2996.x;
    float _2999 = _2996.y;
    float _3000 = _2996.z;
    float _3001 = _2996.w;
    float _3073;
    float _3075;
    float _3077;
    float _3079;
    if (_764 > cbSceneParam._m0[78u].w)
    {
        float _3035 = isnan(_764) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _764 : min(cbSceneParam._m0[80u].w, _764));
        float _3036 = _3035 / _764;
        float _3047 = _3036 * _814;
        float _3048 = _815 * _3036;
        float _3049 = (-0.0) - _3048;
        float _3051 = _3036 * _816;
        float _3053 = (cbSceneParam._m0[77u].w * _3049) / _3035;
        float _3054 = _3053 + cbSceneParam._m0[79u].w;
        float _3055 = cbSceneParam._m0[79u].w - _3048;
        float _3061 = sqrt(((_3047 * _3047) + (_3048 * _3048)) + (_3051 * _3051));
        float _3064 = (1.0 - (cbSceneParam._m0[77u].w / _3035)) * _3061;
        float _3069 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3071 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3248;
        if (abs((_3049 - _3053) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3248 = ((((_3054 > 0.0) ? exp2(_3069 * _3054) : (2.0 - exp2(_3071 * _3054))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3064;
        }
        else
        {
            float _3192 = 1.0 / cbSceneParam._m0[80u].x;
            float _3193 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : max(_3054, _3055));
            float _3194 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : min(_3054, _3055));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            _3248 = ((abs(_3061 / _3049) * cbSceneParam._m0[80u].y) * ((((_3203 - _3204) * 2.0) - ((exp2(_3069 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0)))) - exp2(_3069 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))))) * _3192)) - ((exp2(_3071 * _3203) - exp2(_3071 * _3204)) * _3192))) + (_3064 * cbSceneParam._m0[80u].z);
        }
        vec4 _3250 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, 1.0), 0.0);
        float _3259 = exp2((_3248 * (-1.44269502162933349609375)) * (1.0 - _3250.w));
        float _3260 = log2(_3259);
        float _3276 = log2(_3001);
        _3073 = (exp2(_3276 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].x)) * _3250.x) / cbSceneParam._m0[78u].x)) + _2998;
        _3075 = (exp2(_3276 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].y)) * _3250.y) / cbSceneParam._m0[78u].y)) + _2999;
        _3077 = (exp2(_3276 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].z)) * _3250.z) / cbSceneParam._m0[78u].z)) + _3000;
        _3079 = _3259 * _3001;
    }
    else
    {
        _3073 = _2998;
        _3075 = _2999;
        _3077 = _3000;
        _3079 = _3001;
    }
    bool _3286;
    vec4 _3089;
    vec4 _3111;
    float _3113;
    float _3117;
    float _3118;
    float _3119;
    float _3120;
    bool _3130;
    for (;;)
    {
        _3089 = cbMatDynParam._m0[0u];
        float _3091 = roundEven(_3089.y);
        bool _3092 = _3091 == 3.0;
        float _3093 = log2(_3079);
        float _3100 = exp2(_3093 * cbSceneParam._m0[78u].x) * _2970;
        float _3101 = exp2(_3093 * cbSceneParam._m0[78u].y) * _2971;
        float _3102 = exp2(_3093 * cbSceneParam._m0[78u].z) * _2972;
        float _3109 = _830 + (-0.5);
        _3111 = cbMtdParam._m0[1u];
        _3113 = _3111.y * _3109;
        float _3116 = (_3091 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3117 = _3116 * (_3092 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3073)));
        _3118 = _3116 * (_3092 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3075)));
        _3119 = _3116 * (_3092 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3077)));
        _3120 = _3109 * 0.999000012874603271484375;
        _3130 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3130)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _3120) < 0.5)
            {
                _3286 = true;
                break;
            }
        }
        uint _3227 = _879 + uint(_3089.w);
        if ((cbInstanceData._m0[_3227].w < 1.0) && ((cbInstanceData._m0[_3227].w + _3120) < 0.5))
        {
            _3286 = true;
            break;
        }
        if ((_3113 + 1.0) < _3111.x)
        {
            _3286 = true;
            break;
        }
        _3286 = false;
        break;
    }
    float _3490;
    if (_3286)
    {
        discard_state = true;
        _3490 = 0.0;
    }
    else
    {
        _3490 = cbInstanceData._m0[_2973].w;
    }
    SV_Target.x = _3117;
    SV_Target.y = _3118;
    SV_Target.z = _3119;
    SV_Target.w = _3490;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2973].w;
    discard_exit();
}


