#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1487;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _347.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].z) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4071 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _426 = (_419 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _427 = (_419 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _428 = (_419 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _347.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[24u].z) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4082 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _499 = (_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426;
    float _500 = (_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427;
    float _501 = (_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428;
    vec4 _519 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _560 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _347.z) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[24u].z) + _548) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4093 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _568 = (_561 * ((_519.x * cbMtdParam._m0[14u].x) - _499)) + _499;
    float _569 = (_561 * ((_519.y * cbMtdParam._m0[14u].y) - _500)) + _500;
    float _570 = (_561 * ((_519.z * cbMtdParam._m0[14u].z) - _501)) + _501;
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _627 = _625.x;
    float _628 = _625.y;
    float _629 = _625.z;
    float _636 = ((_608.x - _627) * _419) + _627;
    float _637 = ((_608.y - _628) * _419) + _628;
    float _638 = ((_608.z - _629) * _419) + _629;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _661 = ((_650.x - _636) * _492) + _636;
    float _662 = ((_650.y - _637) * _492) + _637;
    float _663 = ((_650.z - _638) * _492) + _638;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _688 = ((_675.z - _663) * _561) + _663;
    float _691 = ((((_675.x - _661) * _561) + _661) * 2.0) + (-1.0);
    float _693 = ((((_675.y - _662) * _561) + _662) * 2.0) + (-1.0);
    float _694 = dot(vec2(_691, _693), vec2(_691, _693));
    float _4104 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _699 = sqrt(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _725 = (((_713.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _691;
    float _726 = (((_713.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _693;
    float _729 = fma(_699, _249, fma(_726, _256, _725 * _242));
    float _732 = fma(_699, _250, fma(_726, _257, _725 * _243));
    float _735 = fma(_699, _251, fma(_726, _258, _725 * _244));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _768 = _766.x;
    float _769 = 1.0 - _768;
    float _775 = (cbMtdParam._m0[19u].x + dot(vec4(_739 * _729, _739 * _732, _739 * _735, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_768 - _769) * cbMtdParam._m0[24u].w) + _769) * cbMtdParam._m0[21u].z);
    float _4115 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _776 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _778 = (-0.0) - cbMtdParam._m0[24u].x;
    float _780 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
    float _788 = _776 - ((_776 * TEXCOORD_8.x) * _781);
    float _789 = _776 - ((_776 * TEXCOORD_8.y) * _781);
    float _790 = _776 - ((_776 * TEXCOORD_8.z) * _781);
    float _797 = (_788 * ((_588.x * cbMtdParam._m0[18u].x) - _568)) + _568;
    float _798 = (_789 * ((_588.y * cbMtdParam._m0[18u].y) - _569)) + _569;
    float _799 = (_790 * ((_588.z * cbMtdParam._m0[18u].z) - _570)) + _570;
    vec4 _811 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _813 = _811.x;
    float _814 = 1.0 - _813;
    float _842 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_813 - _814) * cbMtdParam._m0[24u].y) + _814) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4136 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _843 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _851 = ((((cbMtdParam._m0[10u].x - _797) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _843) + _797;
    float _852 = ((((cbMtdParam._m0[10u].y - _798) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _843) + _798;
    float _853 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _799)) * _843) + _799;
    float _857 = (cbMtdParam._m0[19u].w * (_713.z - _688)) + _688;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _878 = (_871.x * 2.0) + (-1.0);
    float _879 = (_871.y * 2.0) + (-1.0);
    float _880 = dot(vec2(_878, _879), vec2(_878, _879));
    float _4147 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _888 = ((_871.z - _857) * _788) + _857;
    float _891 = ((cbMtdParam._m0[23u].y - _888) * _843) + _888;
    vec4 _910 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _916 = (_910.x * 2.0) + (-1.0);
    float _917 = (_910.y * 2.0) + (-1.0);
    float _918 = dot(vec2(_916, _917), vec2(_916, _917));
    float _4158 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _933 = ((sqrt(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) - _699) * _790) + _699;
    float _936 = (((_878 - _725) * _788) + _725) + (cbMtdParam._m0[21u].x * _725);
    float _937 = (((_879 - _726) * _789) + _726) + (cbMtdParam._m0[21u].x * _726);
    float _948 = (((_916 - _936) + (_936 * cbMtdParam._m0[22u].z)) * _843) + _936;
    float _949 = (((_917 - _937) + (_937 * cbMtdParam._m0[22u].z)) * _843) + _937;
    float _950 = (_843 * (sqrt(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) - _933)) + _933;
    float _952 = cbMtdParam._m0[22u].x + _713.w;
    float _955 = fma(_950, _249, fma(_949, _256, _948 * _242));
    float _958 = fma(_950, _250, fma(_949, _257, _948 * _243));
    float _961 = fma(_950, _251, fma(_949, _258, _948 * _244));
    float _965 = inversesqrt(dot(vec3(_955, _958, _961), vec3(_955, _958, _961)));
    float _966 = _965 * _955;
    float _967 = _965 * _958;
    float _968 = _965 * _961;
    float _4169 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _969 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4191 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4202 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4213 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _987 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1038 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1028);
    float _1039 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1028);
    float _1040 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1028);
    float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
    float _1045 = _1038 * _1044;
    float _1046 = _1039 * _1044;
    float _1047 = _1040 * _1044;
    float _1053 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1054 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1072 = fma(_968, cbSceneParam._m0[5u].z, fma(_967, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _966));
    float _1075 = fma(_968, cbSceneParam._m0[6u].z, fma(_967, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _966));
    float _1078 = fma(_968, cbSceneParam._m0[7u].z, fma(_967, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _966));
    uint _1092 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1098 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * cbInstanceData._m0[_1092].x;
    float _1099 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * cbInstanceData._m0[_1092].y;
    float _1100 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * cbInstanceData._m0[_1092].z;
    float _4224 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    vec4 _1112 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1053, cbSceneParam._m0[86u].y * _1054));
    float _1116 = ((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * TEXCOORD_5.w) * _1112.x;
    float _1117 = dot(vec3(_966, _967, _968), vec3(_1045, _1046, _1047));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _966) - _1045;
    float _1125 = (_1120 * _967) - _1046;
    float _1126 = (_1120 * _968) - _1047;
    float _1130 = abs(dot(vec3(_1045, _1046, _1047), vec3(_966, _967, _968)));
    float _4257 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_969);
    float _1145 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1185 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1486;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1211 = fma(_1185, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177));
        float _1215 = fma(_1185, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177));
        float _1219 = fma(_1185, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177));
        float _1244 = _1177 + _966;
        float _1245 = _1181 + _967;
        float _1246 = _1185 + _968;
        float _1256 = fma(_1246, cbModelParam._m0[26u].z, fma(_1245, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1244)) - _1211;
        float _1257 = fma(_1246, cbModelParam._m0[27u].z, fma(_1245, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1244)) - _1215;
        float _1258 = fma(_1246, cbModelParam._m0[28u].z, fma(_1245, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1244)) - _1219;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1211 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1215 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[34u].z) + ((((((_1219 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1314 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1280.x + (-0.5));
        float _1316 = _1314 * (_1280.y + (-0.5));
        float _1317 = _1314 * (_1280.z + (-0.5));
        float _1324 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1287.x + (-0.5));
        float _1326 = _1324 * (_1287.y + (-0.5));
        float _1327 = _1324 * (_1287.z + (-0.5));
        float _1334 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1294.x + (-0.5));
        float _1336 = _1334 * (_1294.y + (-0.5));
        float _1337 = _1334 * (_1294.z + (-0.5));
        float _1344 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1301.x + (-0.5));
        float _1346 = _1344 * (_1301.y + (-0.5));
        float _1347 = _1344 * (_1301.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1368 = (dot(vec3(_966, _967, _968), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1378 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4305 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1380 + 1.0))) + _1385) * _1348;
        float _1395 = _1316 * 0.5;
        float _1396 = _1326 * 0.5;
        float _1397 = _1336 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_966, _967, _968), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4338 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1422 + 1.0))) + _1427) * _1349;
        float _1437 = _1317 * 0.5;
        float _1438 = _1327 * 0.5;
        float _1439 = _1337 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_966, _967, _968), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4371 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1464 + 1.0))) + _1469) * _1350;
        _1486 = _1317;
        _1488 = _1316;
        _1489 = _1315;
        _1490 = _1327;
        _1491 = _1326;
        _1492 = _1325;
        _1493 = _1337;
        _1494 = _1336;
        _1495 = _1335;
        _1496 = _1350;
        _1497 = _1349;
        _1498 = _1348;
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    }
    else
    {
        _1486 = _1487;
        _1488 = _1487;
        _1489 = _1487;
        _1490 = _1487;
        _1491 = _1487;
        _1492 = _1487;
        _1493 = _1487;
        _1494 = _1487;
        _1495 = _1487;
        _1496 = _1487;
        _1497 = _1487;
        _1498 = _1487;
        _1499 = 0.0;
        _1500 = 0.0;
        _1501 = 0.0;
    }
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1524 = fma(_1185, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1177));
        float _1528 = fma(_1185, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1177));
        float _1532 = fma(_1185, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1177));
        float _1555 = _1177 + _966;
        float _1556 = _1181 + _967;
        float _1557 = _1185 + _968;
        float _1567 = fma(_1557, cbModelParam._m0[30u].z, fma(_1556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1555)) - _1524;
        float _1568 = fma(_1557, cbModelParam._m0[31u].z, fma(_1556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1555)) - _1528;
        float _1569 = fma(_1557, cbModelParam._m0[32u].z, fma(_1556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1555)) - _1532;
        float _1573 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
        float _1586 = ((_1573 * _1567) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1524 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1573 * _1568) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1528 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1573 * _1569) / cbModelParam._m0[35u].z) + ((((((_1532 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        float _1623 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1590.x + (-0.5));
        float _1625 = _1623 * (_1590.y + (-0.5));
        float _1626 = _1623 * (_1590.z + (-0.5));
        float _1633 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1597.x + (-0.5));
        float _1635 = _1633 * (_1597.y + (-0.5));
        float _1636 = _1633 * (_1597.z + (-0.5));
        float _1643 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1604.x + (-0.5));
        float _1645 = _1643 * (_1604.y + (-0.5));
        float _1646 = _1643 * (_1604.z + (-0.5));
        float _1653 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1611.x + (-0.5));
        float _1655 = _1653 * (_1611.y + (-0.5));
        float _1656 = _1653 * (_1611.z + (-0.5));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = _1624 * 0.5;
        float _1661 = _1634 * 0.5;
        float _1662 = _1644 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_966, _967, _968), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4434 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1687 + 1.0))) + _1692) * _1657;
        float _1702 = _1625 * 0.5;
        float _1703 = _1635 * 0.5;
        float _1704 = _1645 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_966, _967, _968), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4445 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4456 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4467 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_1729 + 1.0))) + _1734) * _1658;
        float _1744 = _1626 * 0.5;
        float _1745 = _1636 * 0.5;
        float _1746 = _1646 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_966, _967, _968), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4478 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4489 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4500 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_1771 + 1.0))) + _1776) * _1659;
        _1793 = _1626;
        _1794 = _1625;
        _1795 = _1624;
        _1796 = _1636;
        _1797 = _1635;
        _1798 = _1634;
        _1799 = _1646;
        _1800 = _1645;
        _1801 = _1644;
        _1802 = _1659;
        _1803 = _1658;
        _1804 = _1657;
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
    }
    else
    {
        _1793 = _1487;
        _1794 = _1487;
        _1795 = _1487;
        _1796 = _1487;
        _1797 = _1487;
        _1798 = _1487;
        _1799 = _1487;
        _1800 = _1487;
        _1801 = _1487;
        _1802 = _1487;
        _1803 = _1487;
        _1804 = _1487;
        _1805 = 0.0;
        _1806 = 0.0;
        _1807 = 0.0;
    }
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1499)) + _1499;
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1500)) + _1500;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1501)) + _1501;
    float _1840 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1817));
    float _1861 = _1124 * 0.5;
    float _1862 = _1125 * 0.5;
    float _1863 = _1126 * 0.5;
    float _1864 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1867 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1870 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1904;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1877 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1486, _1490, _1493, _1496));
        float _1881 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1488, _1491, _1494, _1497));
        float _1885 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1489, _1492, _1495, _1498));
        float _1892 = dot(vec4(cbModelParam._m0[39u]), vec4(_1861, _1862, _1863, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1892) ? 0.0 : (isnan(0.0) ? _1892 : max(0.0, _1892))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1915;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1906 = dot(vec4(cbModelParam._m0[40u]), vec4(_1861, _1862, _1863, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1919 = (_1915 * cbModelParam._m0[1u].x) + (_1904 * (1.0 - cbModelParam._m0[1u].x));
    float _1929 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _969);
    float _1930 = isnan(_1929) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1929 : min(cbModelParam._m0[25u].z, _1929));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1977 = fma(_1185, cbModelParam._m0[13u].z, fma(_1181, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177)) + cbModelParam._m0[13u].w;
        float _1981 = fma(_1185, cbModelParam._m0[14u].z, fma(_1181, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177)) + cbModelParam._m0[14u].w;
        float _1985 = fma(_1185, cbModelParam._m0[15u].z, fma(_1181, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177)) + cbModelParam._m0[15u].w;
        float _1988 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _1991 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _1994 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2022;
        if (_1988 > 0.0)
        {
            _2022 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2022 = frontier_phi_14_12_ladder;
        }
        float _2191;
        if (_1991 > 0.0)
        {
            _2191 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2191 = frontier_phi_23_19_ladder;
        }
        float _2486;
        if (_1994 > 0.0)
        {
            _2486 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2486 = frontier_phi_35_30_ladder;
        }
        float _2488 = isnan(_2191) ? _2022 : (isnan(_2022) ? _2191 : min(_2022, _2191));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1988) + _1977;
        float _2494 = (_2489 * _1991) + _1981;
        float _2495 = (_2489 * _1994) + _1985;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2496;
        float _2500 = _2496 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 > _2500) || ((_2494 < _2498) || ((_2493 < _2498) || (_2493 > _2500))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2495, cbModelParam._m0[9u].z, fma(_2494, cbModelParam._m0[9u].y, _2493 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2495, cbModelParam._m0[10u].z, fma(_2494, cbModelParam._m0[10u].y, _2493 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2495, cbModelParam._m0[11u].z, fma(_2494, cbModelParam._m0[11u].y, _2493 * cbModelParam._m0[11u].x))), _1930);
            frontier_phi_13_35_ladder = _2640.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2640.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2640.x * cbModelParam._m0[1u].y;
        }
        _2010 = frontier_phi_13_35_ladder_2;
        _2012 = frontier_phi_13_35_ladder_1;
        _2014 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1930);
        _2010 = _1998.x * cbModelParam._m0[1u].y;
        _2012 = _1998.y * cbModelParam._m0[1u].y;
        _2014 = _1998.z * cbModelParam._m0[1u].y;
    }
    float _2018 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _969);
    float _2019 = isnan(_2018) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2018 : min(cbModelParam._m0[25u].w, _2018));
    float _2108;
    float _2110;
    float _2112;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2072 = fma(_1185, cbModelParam._m0[21u].z, fma(_1181, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177)) + cbModelParam._m0[21u].w;
        float _2076 = fma(_1185, cbModelParam._m0[22u].z, fma(_1181, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177)) + cbModelParam._m0[22u].w;
        float _2080 = fma(_1185, cbModelParam._m0[23u].z, fma(_1181, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177)) + cbModelParam._m0[23u].w;
        float _2083 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2086 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2089 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2196;
        if (_2083 > 0.0)
        {
            _2196 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2196 = frontier_phi_25_21_ladder;
        }
        float _2513;
        if (_2086 > 0.0)
        {
            _2513 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2513 = frontier_phi_37_32_ladder;
        }
        float _2840;
        if (_2089 > 0.0)
        {
            _2840 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2840 = frontier_phi_47_44_ladder;
        }
        float _2842 = isnan(_2513) ? _2196 : (isnan(_2196) ? _2513 : min(_2196, _2513));
        float _2843 = isnan(_2840) ? _2842 : (isnan(_2842) ? _2840 : min(_2842, _2840));
        float _2847 = (_2843 * _2083) + _2072;
        float _2848 = (_2843 * _2086) + _2076;
        float _2849 = (_2843 * _2089) + _2080;
        float _2850 = _2843 * 9.9999997473787516355514526367188e-05;
        float _2851 = (-1.0) - _2850;
        float _2853 = _2850 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2849 > _2853) || ((_2849 < _2851) || ((_2848 > _2853) || ((_2848 < _2851) || ((_2847 < _2851) || (_2847 > _2853))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2849, cbModelParam._m0[17u].z, fma(_2848, cbModelParam._m0[17u].y, _2847 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2849, cbModelParam._m0[18u].z, fma(_2848, cbModelParam._m0[18u].y, _2847 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2849, cbModelParam._m0[19u].z, fma(_2848, cbModelParam._m0[19u].y, _2847 * cbModelParam._m0[19u].x))), _2019);
            frontier_phi_22_47_ladder = _2967.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2967.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2967.x * cbModelParam._m0[1u].z;
        }
        _2108 = frontier_phi_22_47_ladder_2;
        _2110 = frontier_phi_22_47_ladder_1;
        _2112 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2092 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2019);
        _2108 = _2092.x * cbModelParam._m0[1u].z;
        _2110 = _2092.y * cbModelParam._m0[1u].z;
        _2112 = _2092.z * cbModelParam._m0[1u].z;
    }
    float _2124 = ((((1.0 - _1145) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1145 * _1132)) * _1116;
    float _2125 = _2124 * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2126 = _2124 * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2127 = _2124 * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2130 = fma(_2127, cbSceneParam._m0[89u].z, fma(_2126, cbSceneParam._m0[89u].y, _2125 * cbSceneParam._m0[89u].x));
    float _2133 = fma(_2127, cbSceneParam._m0[90u].z, fma(_2126, cbSceneParam._m0[90u].y, _2125 * cbSceneParam._m0[90u].x));
    float _2136 = fma(_2127, cbSceneParam._m0[91u].z, fma(_2126, cbSceneParam._m0[91u].y, _2125 * cbSceneParam._m0[91u].x));
    float _2170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2183 = _2170 / _2182;
    float _2184 = _2174 / _2182;
    float _2185 = _2178 / _2182;
    float _2332;
    float _2333;
    float _2334;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2212 = ((uint(_2185 > cbSceneParam._m0[59u].y) + uint(_2185 > cbSceneParam._m0[59u].x)) + uint(_2185 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2213 = _2212 + 43u;
        uint _2221 = _2212 + 44u;
        uint _2229 = _2212 + 45u;
        uint _2237 = _2212 + 46u;
        float _2248 = fma(_2182, cbSceneParam._m0[_2213].w, fma(_2178, cbSceneParam._m0[_2213].z, fma(_2174, cbSceneParam._m0[_2213].y, _2170 * cbSceneParam._m0[_2213].x)));
        float _2252 = fma(_2182, cbSceneParam._m0[_2221].w, fma(_2178, cbSceneParam._m0[_2221].z, fma(_2174, cbSceneParam._m0[_2221].y, _2170 * cbSceneParam._m0[_2221].x)));
        float _2260 = fma(_2182, cbSceneParam._m0[_2237].w, fma(_2178, cbSceneParam._m0[_2237].z, fma(_2174, cbSceneParam._m0[_2237].y, _2170 * cbSceneParam._m0[_2237].x)));
        float _2265 = cbSceneParam._m0[33u].z * _2260;
        float _2267 = cbSceneParam._m0[33u].w * _2260;
        float _2270 = fma(_2182, cbSceneParam._m0[_2229].w, fma(_2178, cbSceneParam._m0[_2229].z, fma(_2174, cbSceneParam._m0[_2229].y, _2170 * cbSceneParam._m0[_2229].x))) / _2260;
        float _2318 = (cbSceneParam._m0[33u].x - sqrt(((_2184 * _2184) + (_2183 * _2183)) + (_2185 * _2185))) * cbSceneParam._m0[33u].y;
        float _4626 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2325 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2265 + _2248) / _2260, (_2267 + _2252) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2267 + _2248) / _2260, (_2252 - _2265) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 - _2265) / _2260, (_2252 - _2267) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 - _2267) / _2260, (_2265 + _2252) / _2260), _2270), 0.0)).x), vec4(0.25)));
        _2332 = 1.0 - (_2325 * cbSceneParam._m0[34u].x);
        _2333 = 1.0 - (_2325 * cbSceneParam._m0[34u].y);
        _2334 = 1.0 - (_2325 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2332 = 1.0;
        _2333 = 1.0;
        _2334 = 1.0;
    }
    float _2398;
    float _2400;
    float _2402;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2386 = fma(_2182, cbSceneParam._m0[63u].w, fma(_2178, cbSceneParam._m0[63u].z, fma(_2174, cbSceneParam._m0[63u].y, _2170 * cbSceneParam._m0[63u].x)));
        float _2387 = fma(_2182, cbSceneParam._m0[60u].w, fma(_2178, cbSceneParam._m0[60u].z, fma(_2174, cbSceneParam._m0[60u].y, _2170 * cbSceneParam._m0[60u].x))) / _2386;
        float _2388 = fma(_2182, cbSceneParam._m0[61u].w, fma(_2178, cbSceneParam._m0[61u].z, fma(_2174, cbSceneParam._m0[61u].y, _2170 * cbSceneParam._m0[61u].x))) / _2386;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2387 >= cbSceneParam._m0[64u].x) && (_2388 >= cbSceneParam._m0[64u].y)) && (_2387 <= cbSceneParam._m0[64u].z)) && (_2388 <= cbSceneParam._m0[64u].w))
        {
            float _2526 = fma(_2182, cbSceneParam._m0[62u].w, fma(_2178, cbSceneParam._m0[62u].z, fma(_2174, cbSceneParam._m0[62u].y, _2170 * cbSceneParam._m0[62u].x))) / _2386;
            float _2530 = isnan(cbSceneParam._m0[41u].w) ? _2526 : (isnan(_2526) ? cbSceneParam._m0[41u].w : max(_2526, cbSceneParam._m0[41u].w));
            float _2573 = (cbSceneParam._m0[33u].x - sqrt(((_2184 * _2184) + (_2183 * _2183)) + (_2185 * _2185))) * cbSceneParam._m0[33u].y;
            float _4642 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
            float _2580 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2387, cbSceneParam._m0[33u].w + _2388), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2387, _2388 - cbSceneParam._m0[33u].z), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2387 - cbSceneParam._m0[33u].z, _2388 - cbSceneParam._m0[33u].w), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2387 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2388), _2530), 0.0)).x), vec4(0.25)));
            float _2584 = 1.0 - (_2580 * cbSceneParam._m0[34u].x);
            float _2585 = 1.0 - (_2580 * cbSceneParam._m0[34u].y);
            float _2586 = 1.0 - (_2580 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2586) ? _2334 : (isnan(_2334) ? _2586 : min(_2334, _2586));
            frontier_phi_34_33_ladder_1 = isnan(_2585) ? _2333 : (isnan(_2333) ? _2585 : min(_2333, _2585));
            frontier_phi_34_33_ladder_2 = isnan(_2584) ? _2332 : (isnan(_2332) ? _2584 : min(_2332, _2584));
        }
        else
        {
            frontier_phi_34_33_ladder = _2334;
            frontier_phi_34_33_ladder_1 = _2333;
            frontier_phi_34_33_ladder_2 = _2332;
        }
        _2398 = frontier_phi_34_33_ladder_2;
        _2400 = frontier_phi_34_33_ladder_1;
        _2402 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2398 = _2332;
        _2400 = _2333;
        _2402 = _2334;
    }
    uvec4 _2407 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2409 = _2407.x * 14u;
    uint _2410 = _2409 + 13u;
    float _2417 = _1116 + (-1.0);
    float _2422 = (cbLight._m0[_2410].x * _2417) + 1.0;
    float _2423 = (cbLight._m0[_2410].y * _2417) + 1.0;
    float _2424 = (cbLight._m0[_2410].z * _2417) + 1.0;
    float _2425 = (cbLight._m0[_2410].w * _2417) + 1.0;
    uint _2426 = _2409 + 5u;
    float _2432 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
    uint _2436 = _2409 + 4u;
    float _2445 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
    uint _2449 = _2409 | 1u;
    float _2460 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_966, _967, _968));
    float _2463 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_966, _967, _968));
    float _4678 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _4689 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2468 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * 0.3183098733425140380859375;
    float _2470 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * 0.3183098733425140380859375;
    float _2477 = ((cbLight._m0[_2426].x * _2432) * _2470) + (((cbLight._m0[_2436].x * _2398) * _2445) * _2468);
    float _2478 = ((_2432 * cbLight._m0[_2426].y) * _2470) + (((cbLight._m0[_2436].y * _2400) * _2445) * _2468);
    float _2479 = ((_2432 * cbLight._m0[_2426].z) * _2470) + (((cbLight._m0[_2436].z * _2402) * _2445) * _2468);
    uvec4 _2483 = floatBitsToUint(cbLight._m0[_2409 + 12u]);
    bool _2485 = _2483.x == 0u;
    float _2587;
    float _2589;
    float _2591;
    if (_2485)
    {
        _2587 = _2477;
        _2589 = _2478;
        _2591 = _2479;
    }
    else
    {
        uint _2595 = _2409 + 6u;
        float _2611 = (dot(vec3(cbLight._m0[_2409 + 2u].xyz), vec3(_966, _967, _968)) * 0.5) + 0.5;
        float _2612 = _2611 * _2611;
        float _4700 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2613 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2614 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2587 = (((cbLight._m0[_2595].x * 0.3183098733425140380859375) * _2613) * _2614) + _2477;
        _2589 = (((cbLight._m0[_2595].y * 0.3183098733425140380859375) * _2613) * _2614) + _2478;
        _2591 = (((cbLight._m0[_2595].z * 0.3183098733425140380859375) * _2613) * _2614) + _2479;
    }
    bool _2594 = _2483.y == 0u;
    float _2649;
    float _2651;
    float _2653;
    if (_2594)
    {
        _2649 = _2587;
        _2651 = _2589;
        _2653 = _2591;
    }
    else
    {
        uint _2811 = _2409 + 7u;
        float _2827 = (dot(vec3(cbLight._m0[_2409 + 3u].xyz), vec3(_966, _967, _968)) * 0.5) + 0.5;
        float _2828 = _2827 * _2827;
        float _4716 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2829 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2830 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2649 = (((cbLight._m0[_2811].x * 0.3183098733425140380859375) * _2829) * _2830) + _2587;
        _2651 = (((cbLight._m0[_2811].y * 0.3183098733425140380859375) * _2829) * _2830) + _2589;
        _2653 = (((cbLight._m0[_2811].z * 0.3183098733425140380859375) * _2829) * _2830) + _2591;
    }
    uint _2656 = _2409 + 8u;
    float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _969) * 0.949999988079071044921875);
    float _2670 = _2669 * _2669;
    float _2671 = cbLight._m0[_2409].x + _1045;
    float _2672 = cbLight._m0[_2409].y + _1046;
    float _2673 = cbLight._m0[_2409].z + _1047;
    float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
    float _2678 = _2677 * _2671;
    float _2679 = _2677 * _2672;
    float _2680 = _2677 * _2673;
    float _2681 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2409].xyz));
    float _4732 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _4743 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2685 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2686 = dot(vec3(_966, _967, _968), vec3(_2678, _2679, _2680));
    float _4754 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _2690 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2678, _2679, _2680));
    float _4765 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2694 = _2670 * _2670;
    float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
    float _2709 = (exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2710 = 1.0 - _2670;
    float _2721 = (0.5 / (((_2685 * ((_2684 * _2710) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2710) + _2670) * _2684))) * _2684;
    float _4776 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
    uint _2737 = _2409 + 9u;
    float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _969) * 0.949999988079071044921875);
    float _2749 = _2748 * _2748;
    float _2750 = cbLight._m0[_2449].x + _1045;
    float _2751 = cbLight._m0[_2449].y + _1046;
    float _2752 = cbLight._m0[_2449].z + _1047;
    float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
    float _2757 = _2756 * _2750;
    float _2758 = _2756 * _2751;
    float _2759 = _2756 * _2752;
    float _2760 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2449].xyz));
    float _4787 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2764 = dot(vec3(_966, _967, _968), vec3(_2757, _2758, _2759));
    float _4798 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2767 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
    float _2768 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2757, _2758, _2759));
    float _4809 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2772 = _2749 * _2749;
    float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
    float _2785 = (exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2786 = 1.0 - _2749;
    float _2796 = (0.5 / (((_2685 * ((_2763 * _2786) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2786) + _2749) * _2763))) * _2763;
    float _4820 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2798 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
    float _2808 = (((_2785 * cbLight._m0[_2737].x) * _2798) * _2432) + ((((cbLight._m0[_2656].x * _2398) * _2709) * _2723) * _2445);
    float _2809 = (((_2785 * cbLight._m0[_2737].y) * _2798) * _2432) + ((((cbLight._m0[_2656].y * _2400) * _2709) * _2723) * _2445);
    float _2810 = (((_2785 * cbLight._m0[_2737].z) * _2798) * _2432) + ((((cbLight._m0[_2656].z * _2402) * _2709) * _2723) * _2445);
    float _2866;
    float _2868;
    float _2870;
    if (_2485)
    {
        _2866 = _2808;
        _2868 = _2809;
        _2870 = _2810;
    }
    else
    {
        uint _2872 = _2409 + 2u;
        uint _2876 = _2409 + 10u;
        float _2890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2872].w)) * _969) * 0.949999988079071044921875);
        float _2891 = _2890 * _2890;
        float _2892 = cbLight._m0[_2872].x + _1045;
        float _2893 = cbLight._m0[_2872].y + _1046;
        float _2894 = cbLight._m0[_2872].z + _1047;
        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
        float _2899 = _2898 * _2892;
        float _2900 = _2898 * _2893;
        float _2901 = _2898 * _2894;
        float _2902 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2872].xyz));
        float _4831 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2906 = dot(vec3(_966, _967, _968), vec3(_2899, _2900, _2901));
        float _4842 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
        float _2910 = dot(vec3(cbLight._m0[_2872].xyz), vec3(_2899, _2900, _2901));
        float _4853 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2914 = _2891 * _2891;
        float _2918 = ((_2909 * _2909) * (_2914 + (-1.0))) + 1.0;
        float _2927 = (exp2(log2(1.0 - (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2928 = 1.0 - _2891;
        float _2938 = (0.5 / (((_2685 * ((_2905 * _2928) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2928) + _2891) * _2905))) * _2905;
        float _4864 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2940 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2914 / ((_2918 * _2918) * 3.141590118408203125));
        float _2941 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2866 = (((_2927 * cbLight._m0[_2876].x) * _2940) * _2941) + _2808;
        _2868 = (((_2927 * cbLight._m0[_2876].y) * _2940) * _2941) + _2809;
        _2870 = (((_2927 * cbLight._m0[_2876].z) * _2940) * _2941) + _2810;
    }
    float _2972;
    float _2974;
    float _2976;
    if (_2594)
    {
        _2972 = _2866;
        _2974 = _2868;
        _2976 = _2870;
    }
    else
    {
        uint _2983 = _2409 + 3u;
        uint _2987 = _2409 + 11u;
        float _3001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2983].w)) * _969) * 0.949999988079071044921875);
        float _3002 = _3001 * _3001;
        float _3003 = cbLight._m0[_2983].x + _1045;
        float _3004 = cbLight._m0[_2983].y + _1046;
        float _3005 = cbLight._m0[_2983].z + _1047;
        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
        float _3010 = _3009 * _3003;
        float _3011 = _3009 * _3004;
        float _3012 = _3009 * _3005;
        float _3013 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2983].xyz));
        float _4880 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3016 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
        float _3017 = dot(vec3(_966, _967, _968), vec3(_3010, _3011, _3012));
        float _4891 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        float _3020 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
        float _3021 = dot(vec3(cbLight._m0[_2983].xyz), vec3(_3010, _3011, _3012));
        float _4902 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3025 = _3002 * _3002;
        float _3029 = ((_3020 * _3020) * (_3025 + (-1.0))) + 1.0;
        float _3038 = (exp2(log2(1.0 - (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3039 = 1.0 - _3002;
        float _3049 = (0.5 / (((_2685 * ((_3016 * _3039) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _3039) + _3002) * _3016))) * _3016;
        float _4913 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        float _3051 = (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_3025 / ((_3029 * _3029) * 3.141590118408203125));
        float _3052 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2972 = (((_3038 * cbLight._m0[_2987].x) * _3051) * _3052) + _2866;
        _2974 = (((_3038 * cbLight._m0[_2987].y) * _3051) * _3052) + _2868;
        _2976 = (((_3038 * cbLight._m0[_2987].z) * _3051) * _3052) + _2870;
    }
    float _3118;
    float _3120;
    float _3122;
    float _3124;
    float _3126;
    float _3128;
    if (_2407.y == 0u)
    {
        uvec4 _3073 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3074 = _3073.x;
        uint _3085 = uint((float(_3073.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1054) / _3074))) + floor(float(uint(cbSceneParam._m0[85u].x * _1053) / _3074)));
        float _3095 = (log2(_2185 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3096 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
        uint _3099 = uint(isnan(14.0) ? _3096 : (isnan(_3096) ? 14.0 : min(_3096, 14.0)));
        uvec4 _3104 = texelFetch(g_lightClusterGridBuffer, int(((_3099 << 2u) + (_3085 << 6u)) >> 2u));
        uint _3105 = _3104.x;
        uint _3106 = _3073.z;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        if (((((1u << ((_3106 >> 4u) & 15u)) + 4294967295u) & _3105) == 0u) || ((_3106 & 240u) == 0u))
        {
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
            _3191 = 0.0;
            _3193 = 0.0;
            _3195 = 0.0;
        }
        else
        {
            float _3186;
            float _3188;
            float _3190;
            float _3192;
            float _3194;
            float _3196;
            float _3329 = 0.0;
            float _3330 = 0.0;
            float _3331 = 0.0;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            uint _3335 = 0u;
            uint _3344;
            bool _3345;
            for (;;)
            {
                _3344 = texelFetch(g_lightClassification, int((((_3099 << 5u) + (_3085 << 9u)) + (_3335 << 2u)) >> 2u)).x;
                _3345 = _3344 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3345)
                {
                    frontier_phi_66_pred = _3334;
                    frontier_phi_66_pred_1 = _3333;
                    frontier_phi_66_pred_2 = _3332;
                    frontier_phi_66_pred_3 = _3331;
                    frontier_phi_66_pred_4 = _3330;
                    frontier_phi_66_pred_5 = _3329;
                }
                else
                {
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    uint _3459;
                    _3453 = _3329;
                    _3454 = _3330;
                    _3455 = _3331;
                    _3456 = _3332;
                    _3457 = _3333;
                    _3458 = _3334;
                    _3459 = _3344;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    for (;;)
                    {
                        uint _3463 = uint(findLSB(_3459)) + (_3335 << 5u);
                        uint _3460 = (_3459 + 4294967295u) & _3459;
                        uint _3465 = _3463 * 48u;
                        vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3465)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 3u)).x));
                        uint _3485 = (_3463 * 48u) + 4u;
                        vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3485)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 3u)).x));
                        uint _3504 = (_3463 * 48u) + 8u;
                        vec3 _3515 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3504)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 2u)).x));
                        float _3519 = _3479.x - _2183;
                        float _3520 = _3479.y - _2184;
                        float _3521 = _3479.z - _2185;
                        float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                        float _3525 = inversesqrt(_3522);
                        float _3526 = _3525 * _3519;
                        float _3527 = _3525 * _3520;
                        float _3528 = _3525 * _3521;
                        float _3529 = dot(vec3(_1072, _1075, _1078), vec3(_3526, _3527, _3528));
                        float _3534 = 1.0 - (_3522 * _3479.w);
                        float _4939 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3535 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                        float _3536 = sqrt(_3522) * _3498.w;
                        float _3539 = 1.39999997615814208984375 / (_3536 + 1.39999997615814208984375);
                        float _3540 = _3539 * _3539;
                        float _3543 = ((1.0 - _3540) * _3529) + _3540;
                        float _3546 = _3536 * _3536;
                        float _3550 = ((isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0))) * _3535) / ((_3546 * 0.699999988079071044921875) + 1.0);
                        float _3554 = (-0.0) - _2183;
                        float _3555 = (-0.0) - _2184;
                        float _3556 = (-0.0) - _2185;
                        float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                        float _3561 = _3560 * _3554;
                        float _3562 = _3560 * _3555;
                        float _3563 = _3560 * _3556;
                        float _3570 = exp2(log2(1.0 / ((_3546 * 3.5) + 5.0)) * 0.25);
                        float _3571 = 1.0 - _1132;
                        float _3578 = sqrt(1.0 - ((1.0 - (_3571 * _3571)) * (1.0 - (_3570 * _3570))));
                        float _3579 = _3578 * _3578;
                        float _3580 = _3579 * _3579;
                        float _3581 = _3561 + _3526;
                        float _3582 = _3562 + _3527;
                        float _3583 = _3563 + _3528;
                        float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                        float _3591 = dot(vec3(_1072, _1075, _1078), vec3(_3561, _3562, _3563));
                        float _4955 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3594 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3595 = dot(vec3(_1072, _1075, _1078), vec3(_3587 * _3581, _3587 * _3582, _3587 * _3583));
                        float _4966 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3598 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                        float _3602 = ((_3598 * _3598) * (_3580 + (-1.0))) + 1.0;
                        float _3603 = _3539 * _3579;
                        float _3604 = _3603 * _3603;
                        float _3607 = ((1.0 - _3604) * _3529) + _3604;
                        float _4977 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3608 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                        float _3609 = 1.0 - _3579;
                        float _3619 = (0.5 / (((_3608 * ((_3594 * _3609) + _3579)) + 9.9999999392252902907785028219223e-09) + (((_3608 * _3609) + _3579) * _3594))) * _3608;
                        float _4988 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3630 = (((_3580 * 3.1415927410125732421875) * (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) / ((_3602 * _3602) * ((_3546 * 2.1991131305694580078125) + 3.141590118408203125))) * _3535;
                        _3388 = (_3550 * _3498.x) + _3456;
                        _3389 = (_3550 * _3498.y) + _3457;
                        _3390 = (_3550 * _3498.z) + _3458;
                        _3385 = (_3630 * _3515.x) + _3453;
                        _3386 = (_3630 * _3515.y) + _3454;
                        _3387 = (_3630 * _3515.z) + _3455;
                        if (_3460 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3453 = _3385;
                            _3454 = _3386;
                            _3455 = _3387;
                            _3456 = _3388;
                            _3457 = _3389;
                            _3458 = _3390;
                            _3459 = _3460;
                        }
                    }
                    frontier_phi_66_pred = _3390;
                    frontier_phi_66_pred_1 = _3389;
                    frontier_phi_66_pred_2 = _3388;
                    frontier_phi_66_pred_3 = _3387;
                    frontier_phi_66_pred_4 = _3386;
                    frontier_phi_66_pred_5 = _3385;
                }
                _3196 = frontier_phi_66_pred;
                _3194 = frontier_phi_66_pred_1;
                _3192 = frontier_phi_66_pred_2;
                _3190 = frontier_phi_66_pred_3;
                _3188 = frontier_phi_66_pred_4;
                _3186 = frontier_phi_66_pred_5;
                uint _3336 = _3335 + 1u;
                if (_3336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3329 = _3186;
                    _3330 = _3188;
                    _3331 = _3190;
                    _3332 = _3192;
                    _3333 = _3194;
                    _3334 = _3196;
                    _3335 = _3336;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
            _3191 = _3192;
            _3193 = _3194;
            _3195 = _3196;
        }
        uvec4 _3199 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3200 = _3199.z;
        uint _3202 = (_3200 >> 8u) & 15u;
        float _3297;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        if (((4294967295u << _3202) & _3105) == 0u)
        {
            _3297 = _3185;
            _3299 = _3187;
            _3301 = _3189;
            _3303 = _3191;
            _3305 = _3193;
            _3307 = _3195;
        }
        else
        {
            float _3322 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
            float _3323 = _3322 * _2183;
            float _3324 = _3322 * _2184;
            float _3325 = _3322 * _2185;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3202 < ((_3200 >> 12u) & 15u))
            {
                float _3298;
                float _3300;
                float _3302;
                float _3304;
                float _3306;
                float _3308;
                float _3436 = _3185;
                float _3437 = _3187;
                float _3438 = _3189;
                float _3439 = _3191;
                float _3440 = _3193;
                float _3441 = _3195;
                uint _3442 = _3202;
                uint _3451;
                bool _3452;
                for (;;)
                {
                    _3451 = texelFetch(g_lightClassification, int((((_3099 << 5u) + (_3085 << 9u)) + (_3442 << 2u)) >> 2u)).x;
                    _3452 = _3451 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3452)
                    {
                        frontier_phi_72_pred = _3441;
                        frontier_phi_72_pred_1 = _3440;
                        frontier_phi_72_pred_2 = _3439;
                        frontier_phi_72_pred_3 = _3438;
                        frontier_phi_72_pred_4 = _3437;
                        frontier_phi_72_pred_5 = _3436;
                    }
                    else
                    {
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3928;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3648 = _3436;
                        float _3649 = _3437;
                        float _3650 = _3438;
                        float _3651 = _3439;
                        float _3652 = _3440;
                        float _3653 = _3441;
                        uint _3654 = _3451;
                        uint _3655;
                        vec4 _3680;
                        float _3681;
                        vec4 _3696;
                        vec3 _3708;
                        vec4 _3723;
                        vec4 _3738;
                        float _3784;
                        bool _3785;
                        for (;;)
                        {
                            uint _3665 = ((_3442 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3654));
                            _3655 = (_3654 + 4294967295u) & _3654;
                            uint _3667 = _3665 * 40u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            _3681 = _3680.w;
                            uint _3683 = (_3665 * 40u) + 4u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3698 = (_3665 * 40u) + 8u;
                            _3708 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x));
                            uint _3710 = (_3665 * 40u) + 16u;
                            _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3725 = (_3665 * 40u) + 20u;
                            _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            uint _3740 = (_3665 * 40u) + 24u;
                            vec4 _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            uint _3759 = (_3665 * 40u) + 28u;
                            vec4 _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            _3784 = fma(_2185, _3772.z, fma(_2184, _3772.y, _3772.x * _2183)) + _3772.w;
                            _3785 = !((fma(_2185, _3753.z, fma(_2184, _3753.y, _3753.x * _2183)) + _3753.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3785)
                            {
                                float _3812 = _3680.x - _2183;
                                float _3813 = _3680.y - _2184;
                                float _3814 = _3680.z - _2185;
                                float _3815 = dot(vec3(_3812, _3813, _3814), vec3(_3812, _3813, _3814));
                                float _3818 = inversesqrt(_3815);
                                float _3819 = _3818 * _3812;
                                float _3820 = _3818 * _3813;
                                float _3821 = _3818 * _3814;
                                float _3825 = 1.0 - (_3815 / (_3681 * _3681));
                                float _4999 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3830 = sqrt(_3815) * _3696.w;
                                float _3832 = 1.39999997615814208984375 / (_3830 + 1.39999997615814208984375);
                                float _3833 = _3832 * _3832;
                                float _3836 = ((1.0 - _3833) * dot(vec3(_3819, _3820, _3821), vec3(_1072, _1075, _1078))) + _3833;
                                float _3839 = _3830 * _3830;
                                float _3843 = (fma(_2185, _3723.z, fma(_2184, _3723.y, _3723.x * _2183)) + _3723.w) / _3784;
                                float _3844 = (fma(_2185, _3738.z, fma(_2184, _3738.y, _3738.x * _2183)) + _3738.w) / _3784;
                                float _3848 = 1.0 - dot(vec2(_3843, _3844), vec2(_3843, _3844));
                                float _5015 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3849 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3850 = _3849 * (((isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0))) * _3826) / ((_3839 * 0.699999988079071044921875) + 1.0));
                                float _3862 = exp2(log2(1.0 / ((_3839 * 3.5) + 5.0)) * 0.25);
                                float _3863 = 1.0 - _1132;
                                float _3870 = sqrt(1.0 - ((1.0 - (_3863 * _3863)) * (1.0 - (_3862 * _3862))));
                                float _3871 = _3870 * _3870;
                                float _3872 = _3871 * _3871;
                                float _3873 = _3819 - _3323;
                                float _3874 = _3820 - _3324;
                                float _3875 = _3821 - _3325;
                                float _3879 = inversesqrt(dot(vec3(_3873, _3874, _3875), vec3(_3873, _3874, _3875)));
                                float _3883 = dot(vec3(_1072, _1075, _1078), vec3((-0.0) - _3323, (-0.0) - _3324, (-0.0) - _3325));
                                float _5026 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3886 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3887 = dot(vec3(_1072, _1075, _1078), vec3(_3879 * _3873, _3879 * _3874, _3879 * _3875));
                                float _5037 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3890 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3894 = ((_3890 * _3890) * (_3872 + (-1.0))) + 1.0;
                                float _3895 = _3832 * _3871;
                                float _3896 = _3895 * _3895;
                                float _3902 = ((1.0 - _3896) * dot(vec3(_1072, _1075, _1078), vec3(_3819, _3820, _3821))) + _3896;
                                float _5048 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3903 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                                float _3904 = 1.0 - _3871;
                                float _3914 = (0.5 / (((_3903 * ((_3886 * _3904) + _3871)) + 9.9999999392252902907785028219223e-09) + (((_3903 * _3904) + _3871) * _3886))) * _3903;
                                float _5059 = isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0));
                                float _3924 = (_3849 * _3826) * (((_3872 * 3.1415927410125732421875) * (isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0)))) / ((_3894 * _3894) * ((_3839 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3850 * _3696.y;
                                frontier_phi_78_pred_1 = _3850 * _3696.x;
                                frontier_phi_78_pred_2 = _3924 * _3708.z;
                                frontier_phi_78_pred_3 = _3924 * _3708.y;
                                frontier_phi_78_pred_4 = _3924 * _3708.x;
                                frontier_phi_78_pred_5 = _3850 * _3696.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3932 = frontier_phi_78_pred;
                            _3931 = frontier_phi_78_pred_1;
                            _3930 = frontier_phi_78_pred_2;
                            _3929 = frontier_phi_78_pred_3;
                            _3928 = frontier_phi_78_pred_4;
                            _3933 = frontier_phi_78_pred_5;
                            _3638 = _3931 + _3651;
                            _3639 = _3932 + _3652;
                            _3640 = _3933 + _3653;
                            _3635 = _3928 + _3648;
                            _3636 = _3929 + _3649;
                            _3637 = _3930 + _3650;
                            if (_3655 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3655;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3640;
                        frontier_phi_72_pred_1 = _3639;
                        frontier_phi_72_pred_2 = _3638;
                        frontier_phi_72_pred_3 = _3637;
                        frontier_phi_72_pred_4 = _3636;
                        frontier_phi_72_pred_5 = _3635;
                    }
                    _3308 = frontier_phi_72_pred;
                    _3306 = frontier_phi_72_pred_1;
                    _3304 = frontier_phi_72_pred_2;
                    _3302 = frontier_phi_72_pred_3;
                    _3300 = frontier_phi_72_pred_4;
                    _3298 = frontier_phi_72_pred_5;
                    uint _3443 = _3442 + 1u;
                    if (_3443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3436 = _3298;
                        _3437 = _3300;
                        _3438 = _3302;
                        _3439 = _3304;
                        _3440 = _3306;
                        _3441 = _3308;
                        _3442 = _3443;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3308;
                frontier_phi_60_61_ladder_1 = _3306;
                frontier_phi_60_61_ladder_2 = _3302;
                frontier_phi_60_61_ladder_3 = _3300;
                frontier_phi_60_61_ladder_4 = _3298;
                frontier_phi_60_61_ladder_5 = _3304;
            }
            else
            {
                frontier_phi_60_61_ladder = _3195;
                frontier_phi_60_61_ladder_1 = _3193;
                frontier_phi_60_61_ladder_2 = _3189;
                frontier_phi_60_61_ladder_3 = _3187;
                frontier_phi_60_61_ladder_4 = _3185;
                frontier_phi_60_61_ladder_5 = _3191;
            }
            _3297 = frontier_phi_60_61_ladder_4;
            _3299 = frontier_phi_60_61_ladder_3;
            _3301 = frontier_phi_60_61_ladder_2;
            _3303 = frontier_phi_60_61_ladder_5;
            _3305 = frontier_phi_60_61_ladder_1;
            _3307 = frontier_phi_60_61_ladder;
        }
        float _3312 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _3118 = (_3312 * _3303) + _2649;
        _3120 = (_3312 * _3305) + _2651;
        _3122 = (_3312 * _3307) + _2653;
        _3124 = ((_3297 * 0.039999999105930328369140625) * _3312) + _2972;
        _3126 = ((_3299 * 0.039999999105930328369140625) * _3312) + _2974;
        _3128 = ((_3301 * 0.039999999105930328369140625) * _3312) + _2976;
    }
    else
    {
        _3118 = _2649;
        _3120 = _2651;
        _3122 = _2653;
        _3124 = _2972;
        _3126 = _2974;
        _3128 = _2976;
    }
    float _5075 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _5086 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _5097 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    uint _3148 = _261 + 6u;
    float _3156 = _1053 / cbSceneParam._m0[86u].x;
    float _3157 = _1054 / cbSceneParam._m0[86u].y;
    vec4 _3171 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3156, _3157, (log2((isnan(cbSceneParam._m0[77u].w) ? _987 : (isnan(_987) ? cbSceneParam._m0[77u].w : min(_987, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3173 = _3171.x;
    float _3174 = _3171.y;
    float _3175 = _3171.z;
    float _3176 = _3171.w;
    float _3247;
    float _3249;
    float _3251;
    float _3253;
    if (_987 > cbSceneParam._m0[78u].w)
    {
        float _3210 = isnan(_987) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _987 : min(cbSceneParam._m0[80u].w, _987));
        float _3211 = _3210 / _987;
        float _3222 = _3211 * _1038;
        float _3223 = _1039 * _3211;
        float _3224 = (-0.0) - _3223;
        float _3225 = _3211 * _1040;
        float _3227 = (cbSceneParam._m0[77u].w * _3224) / _3210;
        float _3228 = _3227 + cbSceneParam._m0[79u].w;
        float _3229 = cbSceneParam._m0[79u].w - _3223;
        float _3235 = sqrt(((_3222 * _3222) + (_3223 * _3223)) + (_3225 * _3225));
        float _3238 = (1.0 - (cbSceneParam._m0[77u].w / _3210)) * _3235;
        float _3243 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3245 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3398;
        if (abs((_3224 - _3227) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3398 = ((((_3228 > 0.0) ? exp2(_3243 * _3228) : (2.0 - exp2(_3245 * _3228))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3238;
        }
        else
        {
            float _3358 = 1.0 / cbSceneParam._m0[80u].x;
            float _3359 = isnan(_3229) ? _3228 : (isnan(_3228) ? _3229 : max(_3228, _3229));
            float _3360 = isnan(_3229) ? _3228 : (isnan(_3228) ? _3229 : min(_3228, _3229));
            float _3369 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : min(_3359, 0.0));
            float _3370 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : min(_3360, 0.0));
            _3398 = ((abs(_3235 / _3224) * cbSceneParam._m0[80u].y) * ((((_3369 - _3370) * 2.0) - ((exp2(_3243 * (isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0)))) - exp2(_3243 * (isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))))) * _3358)) - ((exp2(_3245 * _3369) - exp2(_3245 * _3370)) * _3358))) + (_3238 * cbSceneParam._m0[80u].z);
        }
        vec4 _3400 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3156, _3157, 1.0), 0.0);
        float _3409 = exp2((_3398 * (-1.44269502162933349609375)) * (1.0 - _3400.w));
        float _3410 = log2(_3409);
        float _3426 = log2(_3176);
        _3247 = (exp2(_3426 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3410 * cbSceneParam._m0[78u].x)) * _3400.x) / cbSceneParam._m0[78u].x)) + _3173;
        _3249 = (exp2(_3426 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3410 * cbSceneParam._m0[78u].y)) * _3400.y) / cbSceneParam._m0[78u].y)) + _3174;
        _3251 = (exp2(_3426 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3410 * cbSceneParam._m0[78u].z)) * _3400.z) / cbSceneParam._m0[78u].z)) + _3175;
        _3253 = _3409 * _3176;
    }
    else
    {
        _3247 = _3173;
        _3249 = _3174;
        _3251 = _3175;
        _3253 = _3176;
    }
    float _3265 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3266 = _3265 == 3.0;
    float _3267 = log2(_3253);
    float _3274 = exp2(_3267 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3118 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1116))) + ((_3124 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3275 = exp2(_3267 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_3120 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1116))) + ((_3126 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3276 = exp2(_3267 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0))) * (_3122 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1116))) + ((_3128 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3285 = (_3265 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3285 * (_3266 ? _3274 : (_3274 + (cbSceneParam._m0[72u].w * _3247)));
    SV_Target.y = _3285 * (_3266 ? _3275 : (_3275 + (cbSceneParam._m0[72u].w * _3249)));
    SV_Target.z = _3285 * (_3266 ? _3276 : (_3276 + (cbSceneParam._m0[72u].w * _3251)));
    SV_Target.w = cbInstanceData._m0[_3148].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3148].w;
}


