#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1601;
float _4240;
float _4241;
float _4242;
float _4243;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4252 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4263 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4274 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _451 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _468 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_439 - _451) * cbMtdParam._m0[24u].z) + _451) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4285 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _476 = (_469 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _477 = (_469 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _478 = (_469 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _517 = _515.x;
    float _527 = dot(vec4(_517, _515.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _541 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_517 - _527) * cbMtdParam._m0[24u].z) + _527) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4296 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _549 = (_542 * ((_495.x * cbMtdParam._m0[13u].x) - _476)) + _476;
    float _550 = (_542 * ((_495.y * cbMtdParam._m0[13u].y) - _477)) + _477;
    float _551 = (_542 * ((_495.z * cbMtdParam._m0[13u].z) - _478)) + _478;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _588 = _586.x;
    float _598 = dot(vec4(_588, _586.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _610 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _399.z) * 2.0) - ((((_588 - _598) * cbMtdParam._m0[24u].z) + _598) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4307 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _618 = (_611 * ((_569.x * cbMtdParam._m0[14u].x) - _549)) + _549;
    float _619 = (_611 * ((_569.y * cbMtdParam._m0[14u].y) - _550)) + _550;
    float _620 = (_611 * ((_569.z * cbMtdParam._m0[14u].z) - _551)) + _551;
    float _624 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _618;
    float _627 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _619;
    float _630 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _620;
    float _637 = ((_618 - _624) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) + _624;
    float _638 = ((_619 - _627) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) + _627;
    float _639 = ((_620 - _630) * (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) + _630;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _316) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _317) + cbTextureTilingScale._m0[14u].w));
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _718 = _716.x;
    float _719 = _716.y;
    float _720 = _716.z;
    float _727 = ((_699.x - _718) * _469) + _718;
    float _728 = ((_699.y - _719) * _469) + _719;
    float _729 = ((_699.z - _720) * _469) + _720;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _752 = ((_741.x - _727) * _542) + _727;
    float _753 = ((_741.y - _728) * _542) + _728;
    float _754 = ((_741.z - _729) * _542) + _729;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _779 = ((_766.z - _754) * _611) + _754;
    float _782 = ((((_766.x - _752) * _611) + _752) * 2.0) + (-1.0);
    float _783 = ((((_766.y - _753) * _611) + _753) * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _4318 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))));
    vec4 _803 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _828 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _830 = _828.x;
    float _831 = 1.0 - _830;
    float _837 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _840 = ((isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : min(_837, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _849 = (_840 - ((((((_830 - _831) * cbMtdParam._m0[24u].w) + _831) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _840))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4339 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _850 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _857 = (_850 * ((_657.x * cbMtdParam._m0[18u].x) - _637)) + _637;
    float _858 = (_850 * ((_657.y * cbMtdParam._m0[18u].y) - _638)) + _638;
    float _859 = (_850 * ((_657.z * cbMtdParam._m0[18u].z) - _639)) + _639;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _873 = _871.x;
    float _874 = 1.0 - _873;
    float _901 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_873 - _874) * cbMtdParam._m0[24u].y) + _874) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4350 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _902 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _910 = ((((cbMtdParam._m0[10u].x - _857) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _902) + _857;
    float _911 = ((((cbMtdParam._m0[10u].y - _858) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _902) + _858;
    float _912 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _859)) * _902) + _859;
    float _917 = (((_676.z - _779) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _779;
    float _921 = ((_803.z - _917) * cbMtdParam._m0[19u].w) + _917;
    vec4 _935 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _942 = (_935.x * 2.0) + (-1.0);
    float _943 = (_935.y * 2.0) + (-1.0);
    float _944 = dot(vec2(_942, _943), vec2(_942, _943));
    float _4361 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _952 = (_850 * (_935.z - _921)) + _921;
    float _955 = ((cbMtdParam._m0[23u].y - _952) * _902) + _952;
    vec4 _974 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _980 = (_974.x * 2.0) + (-1.0);
    float _981 = (_974.y * 2.0) + (-1.0);
    float _982 = dot(vec2(_980, _981), vec2(_980, _981));
    float _4372 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _996 = (_782 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_676.x * 2.0) + (-1.0)))) + (((_803.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _997 = (_783 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_676.y * 2.0) + (-1.0)))) + (((_803.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1009 = (((_942 - _996) + (cbMtdParam._m0[21u].x * _996)) * _850) + _996;
    float _1010 = (((_943 - _997) + (cbMtdParam._m0[21u].x * _997)) * _850) + _997;
    float _1011 = (_850 * (sqrt(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) - _789)) + _789;
    float _1022 = (((_980 - _1009) + (_1009 * cbMtdParam._m0[22u].z)) * _902) + _1009;
    float _1023 = (((_981 - _1010) + (_1010 * cbMtdParam._m0[22u].z)) * _902) + _1010;
    float _1024 = ((sqrt(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) - _1011) * _902) + _1011;
    float _1026 = cbMtdParam._m0[22u].x + _803.w;
    float _1029 = fma(_1024, _265 * NORMAL.x, fma(_1023, _272 * TANGENT.x, (_258 * _250) * _1022));
    float _1032 = fma(_1024, _265 * NORMAL.y, fma(_1023, _272 * TANGENT.y, (_258 * _251) * _1022));
    float _1035 = fma(_1024, _265 * NORMAL.z, fma(_1023, _272 * TANGENT.z, (_258 * _252) * _1022));
    float _1039 = inversesqrt(dot(vec3(_1029, _1032, _1035), vec3(_1029, _1032, _1035)));
    float _1040 = _1039 * _1029;
    float _1041 = _1039 * _1032;
    float _1042 = _1039 * _1035;
    float _4383 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _1043 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _4405 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4416 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4427 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _1061 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1112 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1102);
    float _1113 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1102);
    float _1114 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1102);
    float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
    float _1119 = _1112 * _1118;
    float _1120 = _1113 * _1118;
    float _1121 = _1114 * _1118;
    vec4 _1126 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1128 = _1126.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1282 = sqrt(((_1112 * _1112) + (_1113 * _1113)) + (_1114 * _1114));
        float _1288 = (cbMatDynParam._m0[5u].x * _1282) + cbMatDynParam._m0[5u].y;
        float _4438 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1293 = (cbMatDynParam._m0[5u].z * _1282) + cbMatDynParam._m0[5u].w;
        float _4449 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) - _1289)) + _1289) < ((_1128 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1139 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1140 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1158 = fma(_1042, cbSceneParam._m0[5u].z, fma(_1041, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1040));
    float _1161 = fma(_1042, cbSceneParam._m0[6u].z, fma(_1041, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1040));
    float _1164 = fma(_1042, cbSceneParam._m0[7u].z, fma(_1041, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1040));
    uint _1177 = _297 + 9u;
    uint _1178 = _1177 + uint(cbMatDynParam._m0[0u].w);
    float _1184 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * cbInstanceData._m0[_1178].x;
    float _1185 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * cbInstanceData._m0[_1178].y;
    float _1186 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * cbInstanceData._m0[_1178].z;
    float _4460 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1187 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _4471 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1188 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _4482 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    vec4 _1198 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1139, cbSceneParam._m0[86u].y * _1140));
    float _1202 = ((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * TEXCOORD_5.w) * _1198.x;
    float _1203 = dot(vec3(_1040, _1041, _1042), vec3(_1119, _1120, _1121));
    float _1206 = _1203 * 2.0;
    float _1210 = (_1206 * _1040) - _1119;
    float _1211 = (_1206 * _1041) - _1120;
    float _1212 = (_1206 * _1042) - _1121;
    float _1216 = abs(dot(vec3(_1119, _1120, _1121), vec3(_1040, _1041, _1042)));
    float _4493 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1218 = sqrt(_1043);
    float _1231 = exp2((_1218 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1218 * 3.0));
    float _1263 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1267 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1600;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1325 = fma(_1271, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1263));
        float _1329 = fma(_1271, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1263));
        float _1333 = fma(_1271, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1263));
        float _1358 = _1263 + _1040;
        float _1359 = _1267 + _1041;
        float _1360 = _1271 + _1042;
        float _1370 = fma(_1360, cbModelParam._m0[26u].z, fma(_1359, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1358)) - _1325;
        float _1371 = fma(_1360, cbModelParam._m0[27u].z, fma(_1359, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1358)) - _1329;
        float _1372 = fma(_1360, cbModelParam._m0[28u].z, fma(_1359, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1358)) - _1333;
        float _1376 = inversesqrt(dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372)));
        float _1389 = ((_1376 * _1370) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1325 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1376 * _1371) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1329 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1376 * _1372) / cbModelParam._m0[34u].z) + ((((((_1333 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        float _1428 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1394.x + (-0.5));
        float _1430 = _1428 * (_1394.y + (-0.5));
        float _1431 = _1428 * (_1394.z + (-0.5));
        float _1438 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1401.x + (-0.5));
        float _1440 = _1438 * (_1401.y + (-0.5));
        float _1441 = _1438 * (_1401.z + (-0.5));
        float _1448 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1408.x + (-0.5));
        float _1450 = _1448 * (_1408.y + (-0.5));
        float _1451 = _1448 * (_1408.z + (-0.5));
        float _1458 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1415.x + (-0.5));
        float _1460 = _1458 * (_1415.y + (-0.5));
        float _1461 = _1458 * (_1415.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1482 = (dot(vec3(_1040, _1041, _1042), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4519 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1492 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4530 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4541 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_1494 + 1.0))) + _1499) * _1462;
        float _1509 = _1430 * 0.5;
        float _1510 = _1440 * 0.5;
        float _1511 = _1450 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_1040, _1041, _1042), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4552 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4563 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4574 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_1536 + 1.0))) + _1541) * _1463;
        float _1551 = _1431 * 0.5;
        float _1552 = _1441 * 0.5;
        float _1553 = _1451 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_1040, _1041, _1042), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4585 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4596 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4607 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_1578 + 1.0))) + _1583) * _1464;
        _1600 = _1431;
        _1602 = _1430;
        _1603 = _1429;
        _1604 = _1441;
        _1605 = _1440;
        _1606 = _1439;
        _1607 = _1451;
        _1608 = _1450;
        _1609 = _1449;
        _1610 = _1464;
        _1611 = _1463;
        _1612 = _1462;
        _1613 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1614 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1615 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
    }
    else
    {
        _1600 = _1601;
        _1602 = _1601;
        _1603 = _1601;
        _1604 = _1601;
        _1605 = _1601;
        _1606 = _1601;
        _1607 = _1601;
        _1608 = _1601;
        _1609 = _1601;
        _1610 = _1601;
        _1611 = _1601;
        _1612 = _1601;
        _1613 = 0.0;
        _1614 = 0.0;
        _1615 = 0.0;
    }
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1641 = fma(_1271, cbModelParam._m0[30u].z, fma(_1267, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1263));
        float _1645 = fma(_1271, cbModelParam._m0[31u].z, fma(_1267, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1263));
        float _1649 = fma(_1271, cbModelParam._m0[32u].z, fma(_1267, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1263));
        float _1672 = _1263 + _1040;
        float _1673 = _1267 + _1041;
        float _1674 = _1271 + _1042;
        float _1684 = fma(_1674, cbModelParam._m0[30u].z, fma(_1673, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1672)) - _1641;
        float _1685 = fma(_1674, cbModelParam._m0[31u].z, fma(_1673, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1672)) - _1645;
        float _1686 = fma(_1674, cbModelParam._m0[32u].z, fma(_1673, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1672)) - _1649;
        float _1690 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
        float _1703 = ((_1690 * _1684) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1641 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1704 = ((_1690 * _1685) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1645 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1705 = ((_1690 * _1686) / cbModelParam._m0[35u].z) + ((((((_1649 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1707 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1703, _1704, _1705), 0.0);
        vec4 _1714 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1703, _1704, _1705), 0.0);
        vec4 _1721 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1703, _1704, _1705), 0.0);
        vec4 _1728 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1703, _1704, _1705), 0.0);
        float _1740 = exp2((_1707.w + (-0.5)) * 20.0) * 2.0;
        float _1741 = _1740 * (_1707.x + (-0.5));
        float _1742 = _1740 * (_1707.y + (-0.5));
        float _1743 = _1740 * (_1707.z + (-0.5));
        float _1750 = exp2((_1714.w + (-0.5)) * 20.0) * 2.0;
        float _1751 = _1750 * (_1714.x + (-0.5));
        float _1752 = _1750 * (_1714.y + (-0.5));
        float _1753 = _1750 * (_1714.z + (-0.5));
        float _1760 = exp2((_1721.w + (-0.5)) * 20.0) * 2.0;
        float _1761 = _1760 * (_1721.x + (-0.5));
        float _1762 = _1760 * (_1721.y + (-0.5));
        float _1763 = _1760 * (_1721.z + (-0.5));
        float _1770 = exp2((_1728.w + (-0.5)) * 20.0) * 2.0;
        float _1771 = _1770 * (_1728.x + (-0.5));
        float _1772 = _1770 * (_1728.y + (-0.5));
        float _1773 = _1770 * (_1728.z + (-0.5));
        float _1774 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1775 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1776 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1777 = _1741 * 0.5;
        float _1778 = _1751 * 0.5;
        float _1779 = _1761 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_1040, _1041, _1042), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4648 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1774 + 9.9999997473787516355514526367188e-06);
        float _4659 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4670 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_1804 + 1.0))) + _1809) * _1774;
        float _1819 = _1742 * 0.5;
        float _1820 = _1752 * 0.5;
        float _1821 = _1762 * 0.5;
        float _1822 = dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821));
        float _1827 = (_1822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1822);
        float _1835 = (dot(vec3(_1040, _1041, _1042), vec3(_1827 * _1819, _1827 * _1820, _1827 * _1821)) + 1.0) * 0.5;
        float _4681 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1844 = sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821)) / (_1775 + 9.9999997473787516355514526367188e-06);
        float _4692 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _1846 = _1845 * 2.0;
        float _1850 = (1.0 - _1845) / (_1845 + 1.0);
        float _4703 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _1860 = ((((1.0 - _1851) * (_1846 + 2.0)) * exp2(log2(isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_1846 + 1.0))) + _1851) * _1775;
        float _1861 = _1743 * 0.5;
        float _1862 = _1753 * 0.5;
        float _1863 = _1763 * 0.5;
        float _1864 = dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863));
        float _1869 = (_1864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1864);
        float _1877 = (dot(vec3(_1040, _1041, _1042), vec3(_1869 * _1861, _1869 * _1862, _1869 * _1863)) + 1.0) * 0.5;
        float _4714 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1886 = sqrt(((_1862 * _1862) + (_1861 * _1861)) + (_1863 * _1863)) / (_1776 + 9.9999997473787516355514526367188e-06);
        float _4725 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _1888 = _1887 * 2.0;
        float _1892 = (1.0 - _1887) / (_1887 + 1.0);
        float _4736 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _1902 = ((((1.0 - _1893) * (_1888 + 2.0)) * exp2(log2(isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_1888 + 1.0))) + _1893) * _1776;
        _1910 = _1743;
        _1911 = _1742;
        _1912 = _1741;
        _1913 = _1753;
        _1914 = _1752;
        _1915 = _1751;
        _1916 = _1763;
        _1917 = _1762;
        _1918 = _1761;
        _1919 = _1776;
        _1920 = _1775;
        _1921 = _1774;
        _1922 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
        _1923 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)));
        _1924 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)));
    }
    else
    {
        _1910 = _1601;
        _1911 = _1601;
        _1912 = _1601;
        _1913 = _1601;
        _1914 = _1601;
        _1915 = _1601;
        _1916 = _1601;
        _1917 = _1601;
        _1918 = _1601;
        _1919 = _1601;
        _1920 = _1601;
        _1921 = _1601;
        _1922 = 0.0;
        _1923 = 0.0;
        _1924 = 0.0;
    }
    float _1934 = (cbModelParam._m0[1u].x * (_1922 - _1613)) + _1613;
    float _1935 = (cbModelParam._m0[1u].x * (_1923 - _1614)) + _1614;
    float _1936 = (cbModelParam._m0[1u].x * (_1924 - _1615)) + _1615;
    float _1957 = fma(_1936, cbSceneParam._m0[89u].z, fma(_1935, cbSceneParam._m0[89u].y, _1934 * cbSceneParam._m0[89u].x));
    float _1960 = fma(_1936, cbSceneParam._m0[90u].z, fma(_1935, cbSceneParam._m0[90u].y, _1934 * cbSceneParam._m0[90u].x));
    float _1963 = fma(_1936, cbSceneParam._m0[91u].z, fma(_1935, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1934));
    float _1978 = _1210 * 0.5;
    float _1979 = _1211 * 0.5;
    float _1980 = _1212 * 0.5;
    float _1981 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1912, _1915, _1918, _1921));
    float _1984 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1911, _1914, _1917, _1920));
    float _1987 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1910, _1913, _1916, _1919));
    float _2021;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1994 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1600, _1604, _1607, _1610));
        float _1998 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1602, _1605, _1608, _1611));
        float _2002 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1603, _1606, _1609, _1612));
        float _2009 = dot(vec4(cbModelParam._m0[39u]), vec4(_1978, _1979, _1980, 1.0));
        _2021 = dot(vec3(isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)), isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)), isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2009) ? 0.0 : (isnan(0.0) ? _2009 : max(0.0, _2009))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2021 = 1.0;
    }
    float _2032;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2023 = dot(vec4(cbModelParam._m0[40u]), vec4(_1978, _1979, _1980, 1.0));
        _2032 = dot(vec3(isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)), isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2023) ? 0.0 : (isnan(0.0) ? _2023 : max(0.0, _2023))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2032 = 1.0;
    }
    float _2036 = (_2032 * cbModelParam._m0[1u].x) + (_2021 * (1.0 - cbModelParam._m0[1u].x));
    float _2046 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1043);
    float _2047 = isnan(_2046) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2046 : min(cbModelParam._m0[25u].z, _2046));
    float _2127;
    float _2129;
    float _2131;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2094 = fma(_1271, cbModelParam._m0[13u].z, fma(_1267, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1263)) + cbModelParam._m0[13u].w;
        float _2098 = fma(_1271, cbModelParam._m0[14u].z, fma(_1267, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1263)) + cbModelParam._m0[14u].w;
        float _2102 = fma(_1271, cbModelParam._m0[15u].z, fma(_1267, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1263)) + cbModelParam._m0[15u].w;
        float _2105 = fma(_1212, cbModelParam._m0[13u].z, fma(_1211, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1210));
        float _2108 = fma(_1212, cbModelParam._m0[14u].z, fma(_1211, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1210));
        float _2111 = fma(_1212, cbModelParam._m0[15u].z, fma(_1211, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1210));
        float _2139;
        if (_2105 > 0.0)
        {
            _2139 = abs((1.0 - _2094) / _2105);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2094 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2139 = frontier_phi_17_15_ladder;
        }
        float _2308;
        if (_2108 > 0.0)
        {
            _2308 = abs((1.0 - _2098) / _2108);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2098 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2308 = frontier_phi_26_22_ladder;
        }
        float _2603;
        if (_2111 > 0.0)
        {
            _2603 = abs((1.0 - _2102) / _2111);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2102 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2603 = frontier_phi_38_33_ladder;
        }
        float _2605 = isnan(_2308) ? _2139 : (isnan(_2139) ? _2308 : min(_2139, _2308));
        float _2606 = isnan(_2603) ? _2605 : (isnan(_2605) ? _2603 : min(_2605, _2603));
        float _2610 = (_2606 * _2105) + _2094;
        float _2611 = (_2606 * _2108) + _2098;
        float _2612 = (_2606 * _2111) + _2102;
        float _2613 = _2606 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2613;
        float _2617 = _2613 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 > _2617) || ((_2611 < _2615) || ((_2610 < _2615) || (_2610 > _2617))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2757 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2612, cbModelParam._m0[9u].z, fma(_2611, cbModelParam._m0[9u].y, _2610 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2612, cbModelParam._m0[10u].z, fma(_2611, cbModelParam._m0[10u].y, _2610 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2612, cbModelParam._m0[11u].z, fma(_2611, cbModelParam._m0[11u].y, _2610 * cbModelParam._m0[11u].x))), _2047);
            frontier_phi_16_38_ladder = _2757.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2757.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2757.x * cbModelParam._m0[1u].y;
        }
        _2127 = frontier_phi_16_38_ladder_2;
        _2129 = frontier_phi_16_38_ladder_1;
        _2131 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2115 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1210, _1211, _1212), _2047);
        _2127 = _2115.x * cbModelParam._m0[1u].y;
        _2129 = _2115.y * cbModelParam._m0[1u].y;
        _2131 = _2115.z * cbModelParam._m0[1u].y;
    }
    float _2135 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1043);
    float _2136 = isnan(_2135) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2135 : min(cbModelParam._m0[25u].w, _2135));
    float _2225;
    float _2227;
    float _2229;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2189 = fma(_1271, cbModelParam._m0[21u].z, fma(_1267, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1263)) + cbModelParam._m0[21u].w;
        float _2193 = fma(_1271, cbModelParam._m0[22u].z, fma(_1267, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1263)) + cbModelParam._m0[22u].w;
        float _2197 = fma(_1271, cbModelParam._m0[23u].z, fma(_1267, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1263)) + cbModelParam._m0[23u].w;
        float _2200 = fma(_1212, cbModelParam._m0[21u].z, fma(_1211, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1210));
        float _2203 = fma(_1212, cbModelParam._m0[22u].z, fma(_1211, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1210));
        float _2206 = fma(_1212, cbModelParam._m0[23u].z, fma(_1211, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1210));
        float _2313;
        if (_2200 > 0.0)
        {
            _2313 = abs((1.0 - _2189) / _2200);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2189 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2313 = frontier_phi_28_24_ladder;
        }
        float _2630;
        if (_2203 > 0.0)
        {
            _2630 = abs((1.0 - _2193) / _2203);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2193 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2630 = frontier_phi_40_35_ladder;
        }
        float _2957;
        if (_2206 > 0.0)
        {
            _2957 = abs((1.0 - _2197) / _2206);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2197 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2957 = frontier_phi_50_47_ladder;
        }
        float _2959 = isnan(_2630) ? _2313 : (isnan(_2313) ? _2630 : min(_2313, _2630));
        float _2960 = isnan(_2957) ? _2959 : (isnan(_2959) ? _2957 : min(_2959, _2957));
        float _2964 = (_2960 * _2200) + _2189;
        float _2965 = (_2960 * _2203) + _2193;
        float _2966 = (_2960 * _2206) + _2197;
        float _2967 = _2960 * 9.9999997473787516355514526367188e-05;
        float _2968 = (-1.0) - _2967;
        float _2970 = _2967 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2966 > _2970) || ((_2966 < _2968) || ((_2965 > _2970) || ((_2965 < _2968) || ((_2964 < _2968) || (_2964 > _2970))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3084 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2966, cbModelParam._m0[17u].z, fma(_2965, cbModelParam._m0[17u].y, _2964 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2966, cbModelParam._m0[18u].z, fma(_2965, cbModelParam._m0[18u].y, _2964 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2966, cbModelParam._m0[19u].z, fma(_2965, cbModelParam._m0[19u].y, _2964 * cbModelParam._m0[19u].x))), _2136);
            frontier_phi_25_50_ladder = _3084.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3084.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3084.x * cbModelParam._m0[1u].z;
        }
        _2225 = frontier_phi_25_50_ladder_2;
        _2227 = frontier_phi_25_50_ladder_1;
        _2229 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2209 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1210, _1211, _1212), _2136);
        _2225 = _2209.x * cbModelParam._m0[1u].z;
        _2227 = _2209.y * cbModelParam._m0[1u].z;
        _2229 = _2209.z * cbModelParam._m0[1u].z;
    }
    float _2241 = ((((1.0 - _1231) * ((_1218 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1231 * _1218)) * _1202;
    float _2242 = _2241 * ((cbModelParam._m0[1u].w * (_2225 - _2127)) + _2127);
    float _2243 = _2241 * ((cbModelParam._m0[1u].w * (_2227 - _2129)) + _2129);
    float _2244 = _2241 * ((cbModelParam._m0[1u].w * (_2229 - _2131)) + _2131);
    float _2247 = fma(_2244, cbSceneParam._m0[89u].z, fma(_2243, cbSceneParam._m0[89u].y, _2242 * cbSceneParam._m0[89u].x));
    float _2250 = fma(_2244, cbSceneParam._m0[90u].z, fma(_2243, cbSceneParam._m0[90u].y, _2242 * cbSceneParam._m0[90u].x));
    float _2253 = fma(_2244, cbSceneParam._m0[91u].z, fma(_2243, cbSceneParam._m0[91u].y, _2242 * cbSceneParam._m0[91u].x));
    float _2287 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2291 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2295 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2299 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2300 = _2287 / _2299;
    float _2301 = _2291 / _2299;
    float _2302 = _2295 / _2299;
    float _2449;
    float _2450;
    float _2451;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2329 = ((uint(_2302 > cbSceneParam._m0[59u].y) + uint(_2302 > cbSceneParam._m0[59u].x)) + uint(_2302 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2330 = _2329 + 43u;
        uint _2338 = _2329 + 44u;
        uint _2346 = _2329 + 45u;
        uint _2354 = _2329 + 46u;
        float _2365 = fma(_2299, cbSceneParam._m0[_2330].w, fma(_2295, cbSceneParam._m0[_2330].z, fma(_2291, cbSceneParam._m0[_2330].y, _2287 * cbSceneParam._m0[_2330].x)));
        float _2369 = fma(_2299, cbSceneParam._m0[_2338].w, fma(_2295, cbSceneParam._m0[_2338].z, fma(_2291, cbSceneParam._m0[_2338].y, _2287 * cbSceneParam._m0[_2338].x)));
        float _2377 = fma(_2299, cbSceneParam._m0[_2354].w, fma(_2295, cbSceneParam._m0[_2354].z, fma(_2291, cbSceneParam._m0[_2354].y, _2287 * cbSceneParam._m0[_2354].x)));
        float _2382 = cbSceneParam._m0[33u].z * _2377;
        float _2384 = cbSceneParam._m0[33u].w * _2377;
        float _2387 = fma(_2299, cbSceneParam._m0[_2346].w, fma(_2295, cbSceneParam._m0[_2346].z, fma(_2291, cbSceneParam._m0[_2346].y, _2287 * cbSceneParam._m0[_2346].x))) / _2377;
        float _2435 = (cbSceneParam._m0[33u].x - sqrt(((_2301 * _2301) + (_2300 * _2300)) + (_2302 * _2302))) * cbSceneParam._m0[33u].y;
        float _4862 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2442 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2382 + _2365) / _2377, (_2384 + _2369) / _2377), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2384 + _2365) / _2377, (_2369 - _2382) / _2377), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2365 - _2382) / _2377, (_2369 - _2384) / _2377), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2365 - _2384) / _2377, (_2382 + _2369) / _2377), _2387), 0.0)).x), vec4(0.25)));
        _2449 = 1.0 - (_2442 * cbSceneParam._m0[34u].x);
        _2450 = 1.0 - (_2442 * cbSceneParam._m0[34u].y);
        _2451 = 1.0 - (_2442 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2449 = 1.0;
        _2450 = 1.0;
        _2451 = 1.0;
    }
    float _2515;
    float _2517;
    float _2519;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2503 = fma(_2299, cbSceneParam._m0[63u].w, fma(_2295, cbSceneParam._m0[63u].z, fma(_2291, cbSceneParam._m0[63u].y, _2287 * cbSceneParam._m0[63u].x)));
        float _2504 = fma(_2299, cbSceneParam._m0[60u].w, fma(_2295, cbSceneParam._m0[60u].z, fma(_2291, cbSceneParam._m0[60u].y, _2287 * cbSceneParam._m0[60u].x))) / _2503;
        float _2505 = fma(_2299, cbSceneParam._m0[61u].w, fma(_2295, cbSceneParam._m0[61u].z, fma(_2291, cbSceneParam._m0[61u].y, _2287 * cbSceneParam._m0[61u].x))) / _2503;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2504 >= cbSceneParam._m0[64u].x) && (_2505 >= cbSceneParam._m0[64u].y)) && (_2504 <= cbSceneParam._m0[64u].z)) && (_2505 <= cbSceneParam._m0[64u].w))
        {
            float _2643 = fma(_2299, cbSceneParam._m0[62u].w, fma(_2295, cbSceneParam._m0[62u].z, fma(_2291, cbSceneParam._m0[62u].y, _2287 * cbSceneParam._m0[62u].x))) / _2503;
            float _2647 = isnan(cbSceneParam._m0[41u].w) ? _2643 : (isnan(_2643) ? cbSceneParam._m0[41u].w : max(_2643, cbSceneParam._m0[41u].w));
            float _2690 = (cbSceneParam._m0[33u].x - sqrt(((_2301 * _2301) + (_2300 * _2300)) + (_2302 * _2302))) * cbSceneParam._m0[33u].y;
            float _4878 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
            float _2697 = (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2504, cbSceneParam._m0[33u].w + _2505), _2647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2504, _2505 - cbSceneParam._m0[33u].z), _2647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2504 - cbSceneParam._m0[33u].z, _2505 - cbSceneParam._m0[33u].w), _2647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2504 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2505), _2647), 0.0)).x), vec4(0.25)));
            float _2701 = 1.0 - (_2697 * cbSceneParam._m0[34u].x);
            float _2702 = 1.0 - (_2697 * cbSceneParam._m0[34u].y);
            float _2703 = 1.0 - (_2697 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2703) ? _2451 : (isnan(_2451) ? _2703 : min(_2451, _2703));
            frontier_phi_37_36_ladder_1 = isnan(_2702) ? _2450 : (isnan(_2450) ? _2702 : min(_2450, _2702));
            frontier_phi_37_36_ladder_2 = isnan(_2701) ? _2449 : (isnan(_2449) ? _2701 : min(_2449, _2701));
        }
        else
        {
            frontier_phi_37_36_ladder = _2451;
            frontier_phi_37_36_ladder_1 = _2450;
            frontier_phi_37_36_ladder_2 = _2449;
        }
        _2515 = frontier_phi_37_36_ladder_2;
        _2517 = frontier_phi_37_36_ladder_1;
        _2519 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2515 = _2449;
        _2517 = _2450;
        _2519 = _2451;
    }
    uvec4 _2524 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2526 = _2524.x * 14u;
    uint _2527 = _2526 + 13u;
    float _2534 = _1202 + (-1.0);
    float _2539 = (cbLight._m0[_2527].x * _2534) + 1.0;
    float _2540 = (cbLight._m0[_2527].y * _2534) + 1.0;
    float _2541 = (cbLight._m0[_2527].z * _2534) + 1.0;
    float _2542 = (cbLight._m0[_2527].w * _2534) + 1.0;
    uint _2543 = _2526 + 5u;
    float _2549 = isnan(1.0) ? _2540 : (isnan(_2540) ? 1.0 : min(_2540, 1.0));
    uint _2553 = _2526 + 4u;
    float _2562 = isnan(1.0) ? _2539 : (isnan(_2539) ? 1.0 : min(_2539, 1.0));
    uint _2566 = _2526 | 1u;
    float _2577 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_1040, _1041, _1042));
    float _2580 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_1040, _1041, _1042));
    float _4914 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _4925 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2585 = (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * 0.3183098733425140380859375;
    float _2587 = (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * 0.3183098733425140380859375;
    float _2594 = ((cbLight._m0[_2543].x * _2549) * _2587) + (((cbLight._m0[_2553].x * _2515) * _2562) * _2585);
    float _2595 = ((_2549 * cbLight._m0[_2543].y) * _2587) + (((cbLight._m0[_2553].y * _2517) * _2562) * _2585);
    float _2596 = ((_2549 * cbLight._m0[_2543].z) * _2587) + (((cbLight._m0[_2553].z * _2519) * _2562) * _2585);
    uvec4 _2600 = floatBitsToUint(cbLight._m0[_2526 + 12u]);
    bool _2602 = _2600.x == 0u;
    float _2704;
    float _2706;
    float _2708;
    if (_2602)
    {
        _2704 = _2594;
        _2706 = _2595;
        _2708 = _2596;
    }
    else
    {
        uint _2712 = _2526 + 6u;
        float _2728 = (dot(vec3(cbLight._m0[_2526 + 2u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2729 = _2728 * _2728;
        float _4936 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2730 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
        float _2731 = isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0));
        _2704 = (((cbLight._m0[_2712].x * 0.3183098733425140380859375) * _2730) * _2731) + _2594;
        _2706 = (((cbLight._m0[_2712].y * 0.3183098733425140380859375) * _2730) * _2731) + _2595;
        _2708 = (((cbLight._m0[_2712].z * 0.3183098733425140380859375) * _2730) * _2731) + _2596;
    }
    bool _2711 = _2600.y == 0u;
    float _2766;
    float _2768;
    float _2770;
    if (_2711)
    {
        _2766 = _2704;
        _2768 = _2706;
        _2770 = _2708;
    }
    else
    {
        uint _2928 = _2526 + 7u;
        float _2944 = (dot(vec3(cbLight._m0[_2526 + 3u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2945 = _2944 * _2944;
        float _4952 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2946 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
        float _2947 = isnan(1.0) ? _2542 : (isnan(_2542) ? 1.0 : min(_2542, 1.0));
        _2766 = (((cbLight._m0[_2928].x * 0.3183098733425140380859375) * _2946) * _2947) + _2704;
        _2768 = (((cbLight._m0[_2928].y * 0.3183098733425140380859375) * _2946) * _2947) + _2706;
        _2770 = (((cbLight._m0[_2928].z * 0.3183098733425140380859375) * _2946) * _2947) + _2708;
    }
    uint _2773 = _2526 + 8u;
    float _2786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _1043) * 0.949999988079071044921875);
    float _2787 = _2786 * _2786;
    float _2788 = cbLight._m0[_2526].x + _1119;
    float _2789 = cbLight._m0[_2526].y + _1120;
    float _2790 = cbLight._m0[_2526].z + _1121;
    float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
    float _2795 = _2794 * _2788;
    float _2796 = _2794 * _2789;
    float _2797 = _2794 * _2790;
    float _2798 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2526].xyz));
    float _4968 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2801 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
    float _4979 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _2802 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
    float _2803 = dot(vec3(_1040, _1041, _1042), vec3(_2795, _2796, _2797));
    float _4990 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2806 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
    float _2807 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2795, _2796, _2797));
    float _5001 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2811 = _2787 * _2787;
    float _2815 = ((_2806 * _2806) * (_2811 + (-1.0))) + 1.0;
    float _2826 = (exp2(log2(1.0 - (isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2827 = 1.0 - _2787;
    float _2838 = (0.5 / (((_2802 * ((_2801 * _2827) + _2787)) + 9.9999999392252902907785028219223e-09) + (((_2802 * _2827) + _2787) * _2801))) * _2801;
    float _5012 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
    float _2840 = (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_2811 / ((_2815 * _2815) * 3.141590118408203125));
    uint _2854 = _2526 + 9u;
    float _2865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2566].w)) * _1043) * 0.949999988079071044921875);
    float _2866 = _2865 * _2865;
    float _2867 = cbLight._m0[_2566].x + _1119;
    float _2868 = cbLight._m0[_2566].y + _1120;
    float _2869 = cbLight._m0[_2566].z + _1121;
    float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
    float _2874 = _2873 * _2867;
    float _2875 = _2873 * _2868;
    float _2876 = _2873 * _2869;
    float _2877 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2566].xyz));
    float _5023 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
    float _2880 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
    float _2881 = dot(vec3(_1040, _1041, _1042), vec3(_2874, _2875, _2876));
    float _5034 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
    float _2884 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
    float _2885 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_2874, _2875, _2876));
    float _5045 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
    float _2889 = _2866 * _2866;
    float _2893 = ((_2884 * _2884) * (_2889 + (-1.0))) + 1.0;
    float _2902 = (exp2(log2(1.0 - (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2903 = 1.0 - _2866;
    float _2913 = (0.5 / (((_2802 * ((_2880 * _2903) + _2866)) + 9.9999999392252902907785028219223e-09) + (((_2802 * _2903) + _2866) * _2880))) * _2880;
    float _5056 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
    float _2915 = (isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_2889 / ((_2893 * _2893) * 3.141590118408203125));
    float _2925 = (((_2902 * cbLight._m0[_2854].x) * _2915) * _2549) + ((((cbLight._m0[_2773].x * _2515) * _2826) * _2840) * _2562);
    float _2926 = (((_2902 * cbLight._m0[_2854].y) * _2915) * _2549) + ((((cbLight._m0[_2773].y * _2517) * _2826) * _2840) * _2562);
    float _2927 = (((_2902 * cbLight._m0[_2854].z) * _2915) * _2549) + ((((cbLight._m0[_2773].z * _2519) * _2826) * _2840) * _2562);
    float _2983;
    float _2985;
    float _2987;
    if (_2602)
    {
        _2983 = _2925;
        _2985 = _2926;
        _2987 = _2927;
    }
    else
    {
        uint _2989 = _2526 + 2u;
        uint _2993 = _2526 + 10u;
        float _3007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2989].w)) * _1043) * 0.949999988079071044921875);
        float _3008 = _3007 * _3007;
        float _3009 = cbLight._m0[_2989].x + _1119;
        float _3010 = cbLight._m0[_2989].y + _1120;
        float _3011 = cbLight._m0[_2989].z + _1121;
        float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
        float _3016 = _3015 * _3009;
        float _3017 = _3015 * _3010;
        float _3018 = _3015 * _3011;
        float _3019 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2989].xyz));
        float _5067 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3022 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
        float _3023 = dot(vec3(_1040, _1041, _1042), vec3(_3016, _3017, _3018));
        float _5078 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3026 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
        float _3027 = dot(vec3(cbLight._m0[_2989].xyz), vec3(_3016, _3017, _3018));
        float _5089 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        float _3031 = _3008 * _3008;
        float _3035 = ((_3026 * _3026) * (_3031 + (-1.0))) + 1.0;
        float _3044 = (exp2(log2(1.0 - (isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3045 = 1.0 - _3008;
        float _3055 = (0.5 / (((_2802 * ((_3022 * _3045) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_2802 * _3045) + _3008) * _3022))) * _3022;
        float _5100 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        float _3057 = (isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0))) * (_3031 / ((_3035 * _3035) * 3.141590118408203125));
        float _3058 = isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0));
        _2983 = (((_3044 * cbLight._m0[_2993].x) * _3057) * _3058) + _2925;
        _2985 = (((_3044 * cbLight._m0[_2993].y) * _3057) * _3058) + _2926;
        _2987 = (((_3044 * cbLight._m0[_2993].z) * _3057) * _3058) + _2927;
    }
    float _3089;
    float _3091;
    float _3093;
    if (_2711)
    {
        _3089 = _2983;
        _3091 = _2985;
        _3093 = _2987;
    }
    else
    {
        uint _3100 = _2526 + 3u;
        uint _3104 = _2526 + 11u;
        float _3118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3100].w)) * _1043) * 0.949999988079071044921875);
        float _3119 = _3118 * _3118;
        float _3120 = cbLight._m0[_3100].x + _1119;
        float _3121 = cbLight._m0[_3100].y + _1120;
        float _3122 = cbLight._m0[_3100].z + _1121;
        float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
        float _3127 = _3126 * _3120;
        float _3128 = _3126 * _3121;
        float _3129 = _3126 * _3122;
        float _3130 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_3100].xyz));
        float _5116 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
        float _3133 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
        float _3134 = dot(vec3(_1040, _1041, _1042), vec3(_3127, _3128, _3129));
        float _5127 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
        float _3137 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
        float _3138 = dot(vec3(cbLight._m0[_3100].xyz), vec3(_3127, _3128, _3129));
        float _5138 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
        float _3142 = _3119 * _3119;
        float _3146 = ((_3137 * _3137) * (_3142 + (-1.0))) + 1.0;
        float _3155 = (exp2(log2(1.0 - (isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3156 = 1.0 - _3119;
        float _3166 = (0.5 / (((_2802 * ((_3133 * _3156) + _3119)) + 9.9999999392252902907785028219223e-09) + (((_2802 * _3156) + _3119) * _3133))) * _3133;
        float _5149 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
        float _3168 = (isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0))) * (_3142 / ((_3146 * _3146) * 3.141590118408203125));
        float _3169 = isnan(1.0) ? _2542 : (isnan(_2542) ? 1.0 : min(_2542, 1.0));
        _3089 = (((_3155 * cbLight._m0[_3104].x) * _3168) * _3169) + _2983;
        _3091 = (((_3155 * cbLight._m0[_3104].y) * _3168) * _3169) + _2985;
        _3093 = (((_3155 * cbLight._m0[_3104].z) * _3168) * _3169) + _2987;
    }
    float _3235;
    float _3237;
    float _3239;
    float _3241;
    float _3243;
    float _3245;
    if (_2524.y == 0u)
    {
        uvec4 _3190 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3191 = _3190.x;
        uint _3202 = uint((float(_3190.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1140) / _3191))) + floor(float(uint(cbSceneParam._m0[85u].x * _1139) / _3191)));
        float _3212 = (log2(_2302 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3213 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
        uint _3216 = uint(isnan(14.0) ? _3213 : (isnan(_3213) ? 14.0 : min(_3213, 14.0)));
        uvec4 _3221 = texelFetch(g_lightClusterGridBuffer, int(((_3216 << 2u) + (_3202 << 6u)) >> 2u));
        uint _3222 = _3221.x;
        uint _3223 = _3190.z;
        float _3302;
        float _3304;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        if (((((1u << ((_3223 >> 4u) & 15u)) + 4294967295u) & _3222) == 0u) || ((_3223 & 240u) == 0u))
        {
            _3302 = 0.0;
            _3304 = 0.0;
            _3306 = 0.0;
            _3308 = 0.0;
            _3310 = 0.0;
            _3312 = 0.0;
        }
        else
        {
            float _3303;
            float _3305;
            float _3307;
            float _3309;
            float _3311;
            float _3313;
            float _3455 = 0.0;
            float _3456 = 0.0;
            float _3457 = 0.0;
            float _3458 = 0.0;
            float _3459 = 0.0;
            float _3460 = 0.0;
            uint _3461 = 0u;
            uint _3470;
            bool _3471;
            for (;;)
            {
                _3470 = texelFetch(g_lightClassification, int((((_3216 << 5u) + (_3202 << 9u)) + (_3461 << 2u)) >> 2u)).x;
                _3471 = _3470 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3471)
                {
                    frontier_phi_71_pred = _3460;
                    frontier_phi_71_pred_1 = _3459;
                    frontier_phi_71_pred_2 = _3458;
                    frontier_phi_71_pred_3 = _3457;
                    frontier_phi_71_pred_4 = _3456;
                    frontier_phi_71_pred_5 = _3455;
                }
                else
                {
                    float _3600;
                    float _3601;
                    float _3602;
                    float _3603;
                    float _3604;
                    float _3605;
                    uint _3606;
                    _3600 = _3455;
                    _3601 = _3456;
                    _3602 = _3457;
                    _3603 = _3458;
                    _3604 = _3459;
                    _3605 = _3460;
                    _3606 = _3470;
                    float _3527;
                    float _3528;
                    float _3529;
                    float _3530;
                    float _3531;
                    float _3532;
                    for (;;)
                    {
                        uint _3610 = uint(findLSB(_3606)) + (_3461 << 5u);
                        uint _3607 = (_3606 + 4294967295u) & _3606;
                        uint _3612 = _3610 * 48u;
                        vec4 _3626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3612)).x, texelFetch(g_PointLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3612 + 3u)).x));
                        uint _3632 = (_3610 * 48u) + 4u;
                        vec4 _3645 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3632)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 3u)).x));
                        uint _3651 = (_3610 * 48u) + 8u;
                        vec3 _3662 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3651)).x, texelFetch(g_PointLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3651 + 2u)).x));
                        float _3666 = _3626.x - _2300;
                        float _3667 = _3626.y - _2301;
                        float _3668 = _3626.z - _2302;
                        float _3669 = dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668));
                        float _3672 = inversesqrt(_3669);
                        float _3673 = _3672 * _3666;
                        float _3674 = _3672 * _3667;
                        float _3675 = _3672 * _3668;
                        float _3676 = dot(vec3(_1158, _1161, _1164), vec3(_3673, _3674, _3675));
                        float _3681 = 1.0 - (_3669 * _3626.w);
                        float _5175 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                        float _3682 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
                        float _3683 = sqrt(_3669) * _3645.w;
                        float _3686 = 1.39999997615814208984375 / (_3683 + 1.39999997615814208984375);
                        float _3687 = _3686 * _3686;
                        float _3690 = ((1.0 - _3687) * _3676) + _3687;
                        float _3693 = _3683 * _3683;
                        float _3697 = ((isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0))) * _3682) / ((_3693 * 0.699999988079071044921875) + 1.0);
                        float _3701 = (-0.0) - _2300;
                        float _3702 = (-0.0) - _2301;
                        float _3703 = (-0.0) - _2302;
                        float _3707 = inversesqrt(dot(vec3(_3701, _3702, _3703), vec3(_3701, _3702, _3703)));
                        float _3708 = _3707 * _3701;
                        float _3709 = _3707 * _3702;
                        float _3710 = _3707 * _3703;
                        float _3717 = exp2(log2(1.0 / ((_3693 * 3.5) + 5.0)) * 0.25);
                        float _3718 = 1.0 - _1218;
                        float _3725 = sqrt(1.0 - ((1.0 - (_3718 * _3718)) * (1.0 - (_3717 * _3717))));
                        float _3726 = _3725 * _3725;
                        float _3727 = _3726 * _3726;
                        float _3728 = _3708 + _3673;
                        float _3729 = _3709 + _3674;
                        float _3730 = _3710 + _3675;
                        float _3734 = inversesqrt(dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730)));
                        float _3738 = dot(vec3(_1158, _1161, _1164), vec3(_3708, _3709, _3710));
                        float _5191 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                        float _3741 = isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0));
                        float _3742 = dot(vec3(_1158, _1161, _1164), vec3(_3734 * _3728, _3734 * _3729, _3734 * _3730));
                        float _5202 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                        float _3745 = isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0));
                        float _3749 = ((_3745 * _3745) * (_3727 + (-1.0))) + 1.0;
                        float _3750 = _3686 * _3726;
                        float _3751 = _3750 * _3750;
                        float _3754 = ((1.0 - _3751) * _3676) + _3751;
                        float _5213 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                        float _3755 = isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0));
                        float _3756 = 1.0 - _3726;
                        float _3766 = (0.5 / (((_3755 * ((_3741 * _3756) + _3726)) + 9.9999999392252902907785028219223e-09) + (((_3755 * _3756) + _3726) * _3741))) * _3755;
                        float _5224 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                        float _3777 = (((_3727 * 3.1415927410125732421875) * (isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0)))) / ((_3749 * _3749) * ((_3693 * 2.1991131305694580078125) + 3.141590118408203125))) * _3682;
                        _3530 = (_3697 * _3645.x) + _3603;
                        _3531 = (_3697 * _3645.y) + _3604;
                        _3532 = (_3697 * _3645.z) + _3605;
                        _3527 = (_3777 * _3662.x) + _3600;
                        _3528 = (_3777 * _3662.y) + _3601;
                        _3529 = (_3777 * _3662.z) + _3602;
                        if (_3607 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3600 = _3527;
                            _3601 = _3528;
                            _3602 = _3529;
                            _3603 = _3530;
                            _3604 = _3531;
                            _3605 = _3532;
                            _3606 = _3607;
                        }
                    }
                    frontier_phi_71_pred = _3532;
                    frontier_phi_71_pred_1 = _3531;
                    frontier_phi_71_pred_2 = _3530;
                    frontier_phi_71_pred_3 = _3529;
                    frontier_phi_71_pred_4 = _3528;
                    frontier_phi_71_pred_5 = _3527;
                }
                _3313 = frontier_phi_71_pred;
                _3311 = frontier_phi_71_pred_1;
                _3309 = frontier_phi_71_pred_2;
                _3307 = frontier_phi_71_pred_3;
                _3305 = frontier_phi_71_pred_4;
                _3303 = frontier_phi_71_pred_5;
                uint _3462 = _3461 + 1u;
                if (_3462 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3455 = _3303;
                    _3456 = _3305;
                    _3457 = _3307;
                    _3458 = _3309;
                    _3459 = _3311;
                    _3460 = _3313;
                    _3461 = _3462;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3302 = _3303;
            _3304 = _3305;
            _3306 = _3307;
            _3308 = _3309;
            _3310 = _3311;
            _3312 = _3313;
        }
        uvec4 _3316 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3317 = _3316.z;
        uint _3319 = (_3317 >> 8u) & 15u;
        float _3423;
        float _3425;
        float _3427;
        float _3429;
        float _3431;
        float _3433;
        if (((4294967295u << _3319) & _3222) == 0u)
        {
            _3423 = _3302;
            _3425 = _3304;
            _3427 = _3306;
            _3429 = _3308;
            _3431 = _3310;
            _3433 = _3312;
        }
        else
        {
            float _3448 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
            float _3449 = _3448 * _2300;
            float _3450 = _3448 * _2301;
            float _3451 = _3448 * _2302;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3319 < ((_3317 >> 12u) & 15u))
            {
                float _3424;
                float _3426;
                float _3428;
                float _3430;
                float _3432;
                float _3434;
                float _3583 = _3302;
                float _3584 = _3304;
                float _3585 = _3306;
                float _3586 = _3308;
                float _3587 = _3310;
                float _3588 = _3312;
                uint _3589 = _3319;
                uint _3598;
                bool _3599;
                for (;;)
                {
                    _3598 = texelFetch(g_lightClassification, int((((_3216 << 5u) + (_3202 << 9u)) + (_3589 << 2u)) >> 2u)).x;
                    _3599 = _3598 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3599)
                    {
                        frontier_phi_82_pred = _3588;
                        frontier_phi_82_pred_1 = _3587;
                        frontier_phi_82_pred_2 = _3586;
                        frontier_phi_82_pred_3 = _3585;
                        frontier_phi_82_pred_4 = _3584;
                        frontier_phi_82_pred_5 = _3583;
                    }
                    else
                    {
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _4084;
                        float _4085;
                        float _4086;
                        float _4087;
                        float _4088;
                        float _4089;
                        float _3804 = _3583;
                        float _3805 = _3584;
                        float _3806 = _3585;
                        float _3807 = _3586;
                        float _3808 = _3587;
                        float _3809 = _3588;
                        uint _3810 = _3598;
                        uint _3811;
                        vec4 _3836;
                        float _3837;
                        vec4 _3852;
                        vec3 _3864;
                        vec4 _3879;
                        vec4 _3894;
                        float _3940;
                        bool _3941;
                        for (;;)
                        {
                            uint _3821 = ((_3589 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3810));
                            _3811 = (_3810 + 4294967295u) & _3810;
                            uint _3823 = _3821 * 40u;
                            _3836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 3u)).x));
                            _3837 = _3836.w;
                            uint _3839 = (_3821 * 40u) + 4u;
                            _3852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 3u)).x));
                            uint _3854 = (_3821 * 40u) + 8u;
                            _3864 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 2u)).x));
                            uint _3866 = (_3821 * 40u) + 16u;
                            _3879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3866 + 3u)).x));
                            uint _3881 = (_3821 * 40u) + 20u;
                            _3894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 3u)).x));
                            uint _3896 = (_3821 * 40u) + 24u;
                            vec4 _3909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 3u)).x));
                            uint _3915 = (_3821 * 40u) + 28u;
                            vec4 _3928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 3u)).x));
                            _3940 = fma(_2302, _3928.z, fma(_2301, _3928.y, _3928.x * _2300)) + _3928.w;
                            _3941 = !((fma(_2302, _3909.z, fma(_2301, _3909.y, _3909.x * _2300)) + _3909.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3941)
                            {
                                float _3968 = _3836.x - _2300;
                                float _3969 = _3836.y - _2301;
                                float _3970 = _3836.z - _2302;
                                float _3971 = dot(vec3(_3968, _3969, _3970), vec3(_3968, _3969, _3970));
                                float _3974 = inversesqrt(_3971);
                                float _3975 = _3974 * _3968;
                                float _3976 = _3974 * _3969;
                                float _3977 = _3974 * _3970;
                                float _3981 = 1.0 - (_3971 / (_3837 * _3837));
                                float _5235 = isnan(0.0) ? _3981 : (isnan(_3981) ? 0.0 : max(_3981, 0.0));
                                float _3982 = isnan(1.0) ? _5235 : (isnan(_5235) ? 1.0 : min(_5235, 1.0));
                                float _3986 = sqrt(_3971) * _3852.w;
                                float _3988 = 1.39999997615814208984375 / (_3986 + 1.39999997615814208984375);
                                float _3989 = _3988 * _3988;
                                float _3992 = ((1.0 - _3989) * dot(vec3(_3975, _3976, _3977), vec3(_1158, _1161, _1164))) + _3989;
                                float _3995 = _3986 * _3986;
                                float _3999 = (fma(_2302, _3879.z, fma(_2301, _3879.y, _3879.x * _2300)) + _3879.w) / _3940;
                                float _4000 = (fma(_2302, _3894.z, fma(_2301, _3894.y, _3894.x * _2300)) + _3894.w) / _3940;
                                float _4004 = 1.0 - dot(vec2(_3999, _4000), vec2(_3999, _4000));
                                float _5251 = isnan(0.0) ? _4004 : (isnan(_4004) ? 0.0 : max(_4004, 0.0));
                                float _4005 = isnan(1.0) ? _5251 : (isnan(_5251) ? 1.0 : min(_5251, 1.0));
                                float _4006 = _4005 * (((isnan(0.0) ? _3992 : (isnan(_3992) ? 0.0 : max(_3992, 0.0))) * _3982) / ((_3995 * 0.699999988079071044921875) + 1.0));
                                float _4018 = exp2(log2(1.0 / ((_3995 * 3.5) + 5.0)) * 0.25);
                                float _4019 = 1.0 - _1218;
                                float _4026 = sqrt(1.0 - ((1.0 - (_4019 * _4019)) * (1.0 - (_4018 * _4018))));
                                float _4027 = _4026 * _4026;
                                float _4028 = _4027 * _4027;
                                float _4029 = _3975 - _3449;
                                float _4030 = _3976 - _3450;
                                float _4031 = _3977 - _3451;
                                float _4035 = inversesqrt(dot(vec3(_4029, _4030, _4031), vec3(_4029, _4030, _4031)));
                                float _4039 = dot(vec3(_1158, _1161, _1164), vec3((-0.0) - _3449, (-0.0) - _3450, (-0.0) - _3451));
                                float _5262 = isnan(0.0) ? _4039 : (isnan(_4039) ? 0.0 : max(_4039, 0.0));
                                float _4042 = isnan(1.0) ? _5262 : (isnan(_5262) ? 1.0 : min(_5262, 1.0));
                                float _4043 = dot(vec3(_1158, _1161, _1164), vec3(_4035 * _4029, _4035 * _4030, _4035 * _4031));
                                float _5273 = isnan(0.0) ? _4043 : (isnan(_4043) ? 0.0 : max(_4043, 0.0));
                                float _4046 = isnan(1.0) ? _5273 : (isnan(_5273) ? 1.0 : min(_5273, 1.0));
                                float _4050 = ((_4046 * _4046) * (_4028 + (-1.0))) + 1.0;
                                float _4051 = _3988 * _4027;
                                float _4052 = _4051 * _4051;
                                float _4058 = ((1.0 - _4052) * dot(vec3(_1158, _1161, _1164), vec3(_3975, _3976, _3977))) + _4052;
                                float _5284 = isnan(0.0) ? _4058 : (isnan(_4058) ? 0.0 : max(_4058, 0.0));
                                float _4059 = isnan(1.0) ? _5284 : (isnan(_5284) ? 1.0 : min(_5284, 1.0));
                                float _4060 = 1.0 - _4027;
                                float _4070 = (0.5 / (((_4059 * ((_4042 * _4060) + _4027)) + 9.9999999392252902907785028219223e-09) + (((_4059 * _4060) + _4027) * _4042))) * _4059;
                                float _5295 = isnan(0.0) ? _4070 : (isnan(_4070) ? 0.0 : max(_4070, 0.0));
                                float _4080 = (_4005 * _3982) * (((_4028 * 3.1415927410125732421875) * (isnan(1.0) ? _5295 : (isnan(_5295) ? 1.0 : min(_5295, 1.0)))) / ((_4050 * _4050) * ((_3995 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4006 * _3852.z;
                                frontier_phi_88_pred_1 = _4006 * _3852.y;
                                frontier_phi_88_pred_2 = _4006 * _3852.x;
                                frontier_phi_88_pred_3 = _4080 * _3864.z;
                                frontier_phi_88_pred_4 = _4080 * _3864.y;
                                frontier_phi_88_pred_5 = _4080 * _3864.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4089 = frontier_phi_88_pred;
                            _4088 = frontier_phi_88_pred_1;
                            _4087 = frontier_phi_88_pred_2;
                            _4086 = frontier_phi_88_pred_3;
                            _4085 = frontier_phi_88_pred_4;
                            _4084 = frontier_phi_88_pred_5;
                            _3794 = _4087 + _3807;
                            _3795 = _4088 + _3808;
                            _3796 = _4089 + _3809;
                            _3791 = _4084 + _3804;
                            _3792 = _4085 + _3805;
                            _3793 = _4086 + _3806;
                            if (_3811 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3804 = _3791;
                                _3805 = _3792;
                                _3806 = _3793;
                                _3807 = _3794;
                                _3808 = _3795;
                                _3809 = _3796;
                                _3810 = _3811;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3796;
                        frontier_phi_82_pred_1 = _3795;
                        frontier_phi_82_pred_2 = _3794;
                        frontier_phi_82_pred_3 = _3793;
                        frontier_phi_82_pred_4 = _3792;
                        frontier_phi_82_pred_5 = _3791;
                    }
                    _3434 = frontier_phi_82_pred;
                    _3432 = frontier_phi_82_pred_1;
                    _3430 = frontier_phi_82_pred_2;
                    _3428 = frontier_phi_82_pred_3;
                    _3426 = frontier_phi_82_pred_4;
                    _3424 = frontier_phi_82_pred_5;
                    uint _3590 = _3589 + 1u;
                    if (_3590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3583 = _3424;
                        _3584 = _3426;
                        _3585 = _3428;
                        _3586 = _3430;
                        _3587 = _3432;
                        _3588 = _3434;
                        _3589 = _3590;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3430;
                frontier_phi_63_64_ladder_1 = _3434;
                frontier_phi_63_64_ladder_2 = _3432;
                frontier_phi_63_64_ladder_3 = _3428;
                frontier_phi_63_64_ladder_4 = _3426;
                frontier_phi_63_64_ladder_5 = _3424;
            }
            else
            {
                frontier_phi_63_64_ladder = _3308;
                frontier_phi_63_64_ladder_1 = _3312;
                frontier_phi_63_64_ladder_2 = _3310;
                frontier_phi_63_64_ladder_3 = _3306;
                frontier_phi_63_64_ladder_4 = _3304;
                frontier_phi_63_64_ladder_5 = _3302;
            }
            _3423 = frontier_phi_63_64_ladder_5;
            _3425 = frontier_phi_63_64_ladder_4;
            _3427 = frontier_phi_63_64_ladder_3;
            _3429 = frontier_phi_63_64_ladder;
            _3431 = frontier_phi_63_64_ladder_2;
            _3433 = frontier_phi_63_64_ladder_1;
        }
        float _3438 = isnan(1.0) ? _1202 : (isnan(_1202) ? 1.0 : min(_1202, 1.0));
        _3235 = (_3438 * _3429) + _2766;
        _3237 = (_3438 * _3431) + _2768;
        _3239 = (_3438 * _3433) + _2770;
        _3241 = ((_3423 * 0.039999999105930328369140625) * _3438) + _3089;
        _3243 = ((_3425 * 0.039999999105930328369140625) * _3438) + _3091;
        _3245 = ((_3427 * 0.039999999105930328369140625) * _3438) + _3093;
    }
    else
    {
        _3235 = _2766;
        _3237 = _2768;
        _3239 = _2770;
        _3241 = _3089;
        _3243 = _3091;
        _3245 = _3093;
    }
    float _5311 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _5322 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _5333 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _3262 = ((isnan(1.0) ? _5311 : (isnan(_5311) ? 1.0 : min(_5311, 1.0))) * (_3235 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1202))) + ((_3241 + ((isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))) * _2036)) * cbPerFrame._m0[3u].x);
    float _3263 = ((isnan(1.0) ? _5322 : (isnan(_5322) ? 1.0 : min(_5322, 1.0))) * (_3237 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1202))) + ((_3243 + ((isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0))) * _2036)) * cbPerFrame._m0[3u].x);
    float _3264 = ((isnan(1.0) ? _5333 : (isnan(_5333) ? 1.0 : min(_5333, 1.0))) * (_3239 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1202))) + ((_3245 + ((isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0))) * _2036)) * cbPerFrame._m0[3u].x);
    uint _3265 = _297 + 6u;
    float _3273 = _1139 / cbSceneParam._m0[86u].x;
    float _3274 = _1140 / cbSceneParam._m0[86u].y;
    vec4 _3288 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3273, _3274, (log2((isnan(cbSceneParam._m0[77u].w) ? _1061 : (isnan(_1061) ? cbSceneParam._m0[77u].w : min(_1061, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3290 = _3288.x;
    float _3291 = _3288.y;
    float _3292 = _3288.z;
    float _3293 = _3288.w;
    float _3365;
    float _3367;
    float _3369;
    float _3371;
    if (_1061 > cbSceneParam._m0[78u].w)
    {
        float _3327 = isnan(_1061) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1061 : min(cbSceneParam._m0[80u].w, _1061));
        float _3328 = _3327 / _1061;
        float _3339 = _3328 * _1112;
        float _3340 = _1113 * _3328;
        float _3341 = (-0.0) - _3340;
        float _3343 = _3328 * _1114;
        float _3345 = (cbSceneParam._m0[77u].w * _3341) / _3327;
        float _3346 = _3345 + cbSceneParam._m0[79u].w;
        float _3347 = cbSceneParam._m0[79u].w - _3340;
        float _3353 = sqrt(((_3339 * _3339) + (_3340 * _3340)) + (_3343 * _3343));
        float _3356 = (1.0 - (cbSceneParam._m0[77u].w / _3327)) * _3353;
        float _3361 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3363 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3540;
        if (abs((_3341 - _3345) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3540 = ((((_3346 > 0.0) ? exp2(_3361 * _3346) : (2.0 - exp2(_3363 * _3346))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3356;
        }
        else
        {
            float _3484 = 1.0 / cbSceneParam._m0[80u].x;
            float _3485 = isnan(_3347) ? _3346 : (isnan(_3346) ? _3347 : max(_3346, _3347));
            float _3486 = isnan(_3347) ? _3346 : (isnan(_3346) ? _3347 : min(_3346, _3347));
            float _3495 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : min(_3485, 0.0));
            float _3496 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : min(_3486, 0.0));
            _3540 = ((abs(_3353 / _3341) * cbSceneParam._m0[80u].y) * ((((_3495 - _3496) * 2.0) - ((exp2(_3361 * (isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0)))) - exp2(_3361 * (isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0))))) * _3484)) - ((exp2(_3363 * _3495) - exp2(_3363 * _3496)) * _3484))) + (_3356 * cbSceneParam._m0[80u].z);
        }
        vec4 _3542 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3273, _3274, 1.0), 0.0);
        float _3551 = exp2((_3540 * (-1.44269502162933349609375)) * (1.0 - _3542.w));
        float _3552 = log2(_3551);
        float _3568 = log2(_3293);
        _3365 = (exp2(_3568 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3552 * cbSceneParam._m0[78u].x)) * _3542.x) / cbSceneParam._m0[78u].x)) + _3290;
        _3367 = (exp2(_3568 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3552 * cbSceneParam._m0[78u].y)) * _3542.y) / cbSceneParam._m0[78u].y)) + _3291;
        _3369 = (exp2(_3568 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3552 * cbSceneParam._m0[78u].z)) * _3542.z) / cbSceneParam._m0[78u].z)) + _3292;
        _3371 = _3551 * _3293;
    }
    else
    {
        _3365 = _3290;
        _3367 = _3291;
        _3369 = _3292;
        _3371 = _3293;
    }
    bool _3578;
    vec4 _3381;
    vec4 _3403;
    float _3405;
    float _3409;
    float _3410;
    float _3411;
    float _3412;
    bool _3422;
    for (;;)
    {
        _3381 = cbMatDynParam._m0[0u];
        float _3383 = roundEven(_3381.y);
        bool _3384 = _3383 == 3.0;
        float _3385 = log2(_3371);
        float _3392 = exp2(_3385 * cbSceneParam._m0[78u].x) * _3262;
        float _3393 = exp2(_3385 * cbSceneParam._m0[78u].y) * _3263;
        float _3394 = exp2(_3385 * cbSceneParam._m0[78u].z) * _3264;
        float _3401 = _1128 + (-0.5);
        _3403 = cbMtdParam._m0[1u];
        _3405 = _3403.y * _3401;
        float _3408 = (_3383 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3409 = _3408 * (_3384 ? _3392 : (_3392 + (cbSceneParam._m0[72u].w * _3365)));
        _3410 = _3408 * (_3384 ? _3393 : (_3393 + (cbSceneParam._m0[72u].w * _3367)));
        _3411 = _3408 * (_3384 ? _3394 : (_3394 + (cbSceneParam._m0[72u].w * _3369)));
        _3412 = _3401 * 0.999000012874603271484375;
        _3422 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3422)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3412) < 0.5)
            {
                _3578 = true;
                break;
            }
        }
        uint _3519 = _1177 + uint(_3381.w);
        if ((cbInstanceData._m0[_3519].w < 1.0) && ((cbInstanceData._m0[_3519].w + _3412) < 0.5))
        {
            _3578 = true;
            break;
        }
        if ((_3405 + 1.0) < _3403.x)
        {
            _3578 = true;
            break;
        }
        _3578 = false;
        break;
    }
    float _3782;
    if (_3578)
    {
        discard_state = true;
        _3782 = 0.0;
    }
    else
    {
        _3782 = cbInstanceData._m0[_3265].w;
    }
    SV_Target.x = _3409;
    SV_Target.y = _3410;
    SV_Target.z = _3411;
    SV_Target.w = _3782;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3265].w;
    discard_exit();
}


