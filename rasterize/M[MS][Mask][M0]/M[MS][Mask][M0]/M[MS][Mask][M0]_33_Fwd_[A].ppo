#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1274;
float _3632;
float _3633;
float _3634;
float _3635;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3644 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3655 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3666 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].z) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3677 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _441 = (_434 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _442 = (_434 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _443 = (_434 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) + _453;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _287) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _288) + cbTextureTilingScale._m0[14u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _547 = _543.z;
    float _556 = ((_526.z - _547) * _434) + _547;
    float _559 = ((((_526.x - _545) * _434) + _545) * 2.0) + (-1.0);
    float _560 = ((((_526.y - _546) * _434) + _546) * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3688 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _609 = _607.x;
    float _610 = 1.0 - _609;
    float _623 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_609 - _610) * cbMtdParam._m0[24u].w) + _610) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3699 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _631 = (_624 * ((_481.x * cbMtdParam._m0[18u].x) - _460)) + _460;
    float _632 = (_624 * ((_481.y * cbMtdParam._m0[18u].y) - _461)) + _461;
    float _633 = (_624 * ((_481.z * cbMtdParam._m0[18u].z) - _462)) + _462;
    float _638 = (((_501.z - _556) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _556;
    float _642 = ((_582.z - _638) * cbMtdParam._m0[19u].w) + _638;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _662 = (_655.x * 2.0) + (-1.0);
    float _663 = (_655.y * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _3710 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _672 = (_624 * (_655.z - _642)) + _642;
    float _681 = (_559 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_501.x * 2.0) + (-1.0)))) + (((_582.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _682 = (_560 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_501.y * 2.0) + (-1.0)))) + (((_582.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _694 = (((_662 - _681) + (cbMtdParam._m0[21u].x * _681)) * _624) + _681;
    float _695 = (((_663 - _682) + (cbMtdParam._m0[21u].x * _682)) * _624) + _682;
    float _696 = (_624 * (sqrt(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) - _566)) + _566;
    float _698 = cbMtdParam._m0[22u].x + _582.w;
    float _701 = fma(_696, _234 * NORMAL.x, fma(_695, _241 * TANGENT.x, (_227 * _219) * _694));
    float _704 = fma(_696, _234 * NORMAL.y, fma(_695, _241 * TANGENT.y, (_227 * _220) * _694));
    float _707 = fma(_696, _234 * NORMAL.z, fma(_695, _241 * TANGENT.z, (_227 * _221) * _694));
    float _711 = inversesqrt(dot(vec3(_701, _704, _707), vec3(_701, _704, _707)));
    float _712 = _711 * _701;
    float _713 = _711 * _704;
    float _714 = _711 * _707;
    float _3721 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _715 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _3743 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3754 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3765 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _785 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _775);
    float _786 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _775);
    float _787 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _775);
    float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
    float _792 = _785 * _791;
    float _793 = _786 * _791;
    float _794 = _787 * _791;
    vec4 _799 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _801 = _799.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _955 = sqrt(((_785 * _785) + (_786 * _786)) + (_787 * _787));
        float _961 = (cbMatDynParam._m0[5u].x * _955) + cbMatDynParam._m0[5u].y;
        float _3776 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _966 = (cbMatDynParam._m0[5u].z * _955) + cbMatDynParam._m0[5u].w;
        float _3787 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) - _962)) + _962) < ((_801 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _812 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _813 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _831 = fma(_714, cbSceneParam._m0[5u].z, fma(_713, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _712));
    float _834 = fma(_714, cbSceneParam._m0[6u].z, fma(_713, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _712));
    float _837 = fma(_714, cbSceneParam._m0[7u].z, fma(_713, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _712));
    uint _850 = _268 + 9u;
    uint _851 = _850 + uint(cbMatDynParam._m0[0u].w);
    float _857 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_851].x;
    float _858 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_851].y;
    float _859 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_851].z;
    float _3798 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    vec4 _871 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _812, cbSceneParam._m0[86u].y * _813));
    float _875 = ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * TEXCOORD_5.w) * _871.x;
    float _876 = dot(vec3(_712, _713, _714), vec3(_792, _793, _794));
    float _879 = _876 * 2.0;
    float _883 = (_879 * _712) - _792;
    float _884 = (_879 * _713) - _793;
    float _885 = (_879 * _714) - _794;
    float _889 = abs(dot(vec3(_792, _793, _794), vec3(_712, _713, _714)));
    float _3831 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _891 = sqrt(_715);
    float _904 = exp2((_891 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_891 * 3.0));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1273;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _998 = fma(_944, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936));
        float _1002 = fma(_944, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936));
        float _1006 = fma(_944, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936));
        float _1031 = _936 + _712;
        float _1032 = _940 + _713;
        float _1033 = _944 + _714;
        float _1043 = fma(_1033, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031)) - _998;
        float _1044 = fma(_1033, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031)) - _1002;
        float _1045 = fma(_1033, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031)) - _1006;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_998 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1002 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[34u].z) + ((((((_1006 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1101 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1067.x + (-0.5));
        float _1103 = _1101 * (_1067.y + (-0.5));
        float _1104 = _1101 * (_1067.z + (-0.5));
        float _1111 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1074.x + (-0.5));
        float _1113 = _1111 * (_1074.y + (-0.5));
        float _1114 = _1111 * (_1074.z + (-0.5));
        float _1121 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1081.x + (-0.5));
        float _1123 = _1121 * (_1081.y + (-0.5));
        float _1124 = _1121 * (_1081.z + (-0.5));
        float _1131 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1088.x + (-0.5));
        float _1133 = _1131 * (_1088.y + (-0.5));
        float _1134 = _1131 * (_1088.z + (-0.5));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = _1102 * 0.5;
        float _1139 = _1112 * 0.5;
        float _1140 = _1122 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1155 = (dot(vec3(_712, _713, _714), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1165 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3879 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1167 + 1.0))) + _1172) * _1135;
        float _1182 = _1103 * 0.5;
        float _1183 = _1113 * 0.5;
        float _1184 = _1123 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_712, _713, _714), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3912 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1209 + 1.0))) + _1214) * _1136;
        float _1224 = _1104 * 0.5;
        float _1225 = _1114 * 0.5;
        float _1226 = _1124 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_712, _713, _714), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3945 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1251 + 1.0))) + _1256) * _1137;
        _1273 = _1104;
        _1275 = _1103;
        _1276 = _1102;
        _1277 = _1114;
        _1278 = _1113;
        _1279 = _1112;
        _1280 = _1124;
        _1281 = _1123;
        _1282 = _1122;
        _1283 = _1137;
        _1284 = _1136;
        _1285 = _1135;
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
    }
    else
    {
        _1273 = _1274;
        _1275 = _1274;
        _1276 = _1274;
        _1277 = _1274;
        _1278 = _1274;
        _1279 = _1274;
        _1280 = _1274;
        _1281 = _1274;
        _1282 = _1274;
        _1283 = _1274;
        _1284 = _1274;
        _1285 = _1274;
        _1286 = 0.0;
        _1287 = 0.0;
        _1288 = 0.0;
    }
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1316 = fma(_944, cbModelParam._m0[30u].z, fma(_940, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936));
        float _1320 = fma(_944, cbModelParam._m0[31u].z, fma(_940, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936));
        float _1324 = fma(_944, cbModelParam._m0[32u].z, fma(_940, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936));
        float _1347 = _936 + _712;
        float _1348 = _940 + _713;
        float _1349 = _944 + _714;
        float _1359 = fma(_1349, cbModelParam._m0[30u].z, fma(_1348, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1347)) - _1316;
        float _1360 = fma(_1349, cbModelParam._m0[31u].z, fma(_1348, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1347)) - _1320;
        float _1361 = fma(_1349, cbModelParam._m0[32u].z, fma(_1348, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1347)) - _1324;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1316 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1320 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[35u].z) + ((((((_1324 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1415 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1382.x + (-0.5));
        float _1417 = _1415 * (_1382.y + (-0.5));
        float _1418 = _1415 * (_1382.z + (-0.5));
        float _1425 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1389.x + (-0.5));
        float _1427 = _1425 * (_1389.y + (-0.5));
        float _1428 = _1425 * (_1389.z + (-0.5));
        float _1435 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1396.x + (-0.5));
        float _1437 = _1435 * (_1396.y + (-0.5));
        float _1438 = _1435 * (_1396.z + (-0.5));
        float _1445 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1403.x + (-0.5));
        float _1447 = _1445 * (_1403.y + (-0.5));
        float _1448 = _1445 * (_1403.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_712, _713, _714), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4008 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1479 + 1.0))) + _1484) * _1449;
        float _1494 = _1417 * 0.5;
        float _1495 = _1427 * 0.5;
        float _1496 = _1437 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_712, _713, _714), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4041 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1521 + 1.0))) + _1526) * _1450;
        float _1536 = _1418 * 0.5;
        float _1537 = _1428 * 0.5;
        float _1538 = _1438 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_712, _713, _714), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4074 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1563 + 1.0))) + _1568) * _1451;
        _1585 = _1418;
        _1586 = _1417;
        _1587 = _1416;
        _1588 = _1428;
        _1589 = _1427;
        _1590 = _1426;
        _1591 = _1438;
        _1592 = _1437;
        _1593 = _1436;
        _1594 = _1451;
        _1595 = _1450;
        _1596 = _1449;
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1274;
        _1586 = _1274;
        _1587 = _1274;
        _1588 = _1274;
        _1589 = _1274;
        _1590 = _1274;
        _1591 = _1274;
        _1592 = _1274;
        _1593 = _1274;
        _1594 = _1274;
        _1595 = _1274;
        _1596 = _1274;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1286)) + _1286;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1287)) + _1287;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1288)) + _1288;
    float _1632 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1609));
    float _1653 = _883 * 0.5;
    float _1654 = _884 * 0.5;
    float _1655 = _885 * 0.5;
    float _1656 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1659 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1662 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1696;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1669 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1273, _1277, _1280, _1283));
        float _1673 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1677 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1684 = dot(vec4(cbModelParam._m0[39u]), vec4(_1653, _1654, _1655, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1707;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1698 = dot(vec4(cbModelParam._m0[40u]), vec4(_1653, _1654, _1655, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1711 = (_1707 * cbModelParam._m0[1u].x) + (_1696 * (1.0 - cbModelParam._m0[1u].x));
    float _1721 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _715);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1721 : min(cbModelParam._m0[25u].z, _1721));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_944, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_944, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_944, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_885, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883));
        float _1783 = fma(_885, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883));
        float _1786 = fma(_885, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1814 = frontier_phi_17_15_ladder;
        }
        float _2014;
        if (_1783 > 0.0)
        {
            _2014 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2014 = frontier_phi_26_22_ladder;
        }
        float _2257;
        if (_1786 > 0.0)
        {
            _2257 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2257 = frontier_phi_38_33_ladder;
        }
        float _2259 = isnan(_2014) ? _1814 : (isnan(_1814) ? _2014 : min(_1814, _2014));
        float _2260 = isnan(_2257) ? _2259 : (isnan(_2259) ? _2257 : min(_2259, _2257));
        float _2264 = (_2260 * _1780) + _1769;
        float _2265 = (_2260 * _1783) + _1773;
        float _2266 = (_2260 * _1786) + _1777;
        float _2267 = _2260 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2267;
        float _2271 = _2267 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 > _2271) || ((_2265 < _2269) || ((_2264 < _2269) || (_2264 > _2271))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2390 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2266, cbModelParam._m0[9u].z, fma(_2265, cbModelParam._m0[9u].y, _2264 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2266, cbModelParam._m0[10u].z, fma(_2265, cbModelParam._m0[10u].y, _2264 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2266, cbModelParam._m0[11u].z, fma(_2265, cbModelParam._m0[11u].y, _2264 * cbModelParam._m0[11u].x))), _1722);
            frontier_phi_16_38_ladder = _2390.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2390.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2390.x * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_16_38_ladder_2;
        _1804 = frontier_phi_16_38_ladder_1;
        _1806 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_883, _884, _885), _1722);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _715);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1864 = fma(_944, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936)) + cbModelParam._m0[21u].w;
        float _1868 = fma(_944, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936)) + cbModelParam._m0[22u].w;
        float _1872 = fma(_944, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936)) + cbModelParam._m0[23u].w;
        float _1875 = fma(_885, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883));
        float _1878 = fma(_885, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883));
        float _1881 = fma(_885, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883));
        float _2019;
        if (_1875 > 0.0)
        {
            _2019 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2019 = frontier_phi_28_24_ladder;
        }
        float _2284;
        if (_1878 > 0.0)
        {
            _2284 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2284 = frontier_phi_40_35_ladder;
        }
        float _2489;
        if (_1881 > 0.0)
        {
            _2489 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2489 = frontier_phi_49_46_ladder;
        }
        float _2491 = isnan(_2284) ? _2019 : (isnan(_2019) ? _2284 : min(_2019, _2284));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1875) + _1864;
        float _2497 = (_2492 * _1878) + _1868;
        float _2498 = (_2492 * _1881) + _1872;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2499;
        float _2502 = _2499 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2498 > _2502) || ((_2498 < _2500) || ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 < _2500) || (_2496 > _2502))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2498, cbModelParam._m0[17u].z, fma(_2497, cbModelParam._m0[17u].y, _2496 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2498, cbModelParam._m0[18u].z, fma(_2497, cbModelParam._m0[18u].y, _2496 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2498, cbModelParam._m0[19u].z, fma(_2497, cbModelParam._m0[19u].y, _2496 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_25_49_ladder = _2697.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2697.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2697.x * cbModelParam._m0[1u].z;
        }
        _1900 = frontier_phi_25_49_ladder_2;
        _1902 = frontier_phi_25_49_ladder_1;
        _1904 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_883, _884, _885), _1811);
        _1900 = _1884.x * cbModelParam._m0[1u].z;
        _1902 = _1884.y * cbModelParam._m0[1u].z;
        _1904 = _1884.z * cbModelParam._m0[1u].z;
    }
    float _1916 = ((((1.0 - _904) * ((_891 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_904 * _891)) * _875;
    float _1917 = _1916 * ((cbModelParam._m0[1u].w * (_1900 - _1802)) + _1802);
    float _1918 = _1916 * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1919 = _1916 * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1922 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1918, cbSceneParam._m0[89u].y, _1917 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1918, cbSceneParam._m0[90u].y, _1917 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1918, cbSceneParam._m0[91u].y, _1917 * cbSceneParam._m0[91u].x));
    uvec4 _1938 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1940 = _1938.x * 14u;
    uint _1941 = _1940 + 13u;
    float _1948 = _875 + (-1.0);
    float _1953 = (cbLight._m0[_1941].x * _1948) + 1.0;
    float _1954 = (cbLight._m0[_1941].y * _1948) + 1.0;
    float _1955 = (cbLight._m0[_1941].z * _1948) + 1.0;
    float _1956 = (cbLight._m0[_1941].w * _1948) + 1.0;
    uint _1957 = _1940 + 5u;
    float _1963 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
    uint _1967 = _1940 + 4u;
    float _1973 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1977 = _1940 | 1u;
    float _1988 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_712, _713, _714));
    float _1991 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_712, _713, _714));
    float _4210 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _4221 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1996 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _1998 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2005 = ((cbLight._m0[_1957].x * _1963) * _1998) + ((cbLight._m0[_1967].x * _1973) * _1996);
    float _2006 = ((_1963 * cbLight._m0[_1957].y) * _1998) + ((_1973 * cbLight._m0[_1967].y) * _1996);
    float _2007 = ((_1963 * cbLight._m0[_1957].z) * _1998) + ((_1973 * cbLight._m0[_1967].z) * _1996);
    uvec4 _2011 = floatBitsToUint(cbLight._m0[_1940 + 12u]);
    bool _2013 = _2011.x == 0u;
    float _2024;
    float _2026;
    float _2028;
    if (_2013)
    {
        _2024 = _2005;
        _2026 = _2006;
        _2028 = _2007;
    }
    else
    {
        uint _2032 = _1940 + 6u;
        float _2048 = (dot(vec3(cbLight._m0[_1940 + 2u].xyz), vec3(_712, _713, _714)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _4232 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2051 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2024 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _2005;
        _2026 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _2006;
        _2028 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _2007;
    }
    bool _2031 = _2011.y == 0u;
    float _2069;
    float _2071;
    float _2073;
    if (_2031)
    {
        _2069 = _2024;
        _2071 = _2026;
        _2073 = _2028;
    }
    else
    {
        uint _2228 = _1940 + 7u;
        float _2244 = (dot(vec3(cbLight._m0[_1940 + 3u].xyz), vec3(_712, _713, _714)) * 0.5) + 0.5;
        float _2245 = _2244 * _2244;
        float _4248 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2246 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2247 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2069 = (((cbLight._m0[_2228].x * 0.3183098733425140380859375) * _2246) * _2247) + _2024;
        _2071 = (((cbLight._m0[_2228].y * 0.3183098733425140380859375) * _2246) * _2247) + _2026;
        _2073 = (((cbLight._m0[_2228].z * 0.3183098733425140380859375) * _2246) * _2247) + _2028;
    }
    uint _2076 = _1940 + 8u;
    float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _715) * 0.949999988079071044921875);
    float _2090 = _2089 * _2089;
    float _2091 = cbLight._m0[_1940].x + _792;
    float _2092 = cbLight._m0[_1940].y + _793;
    float _2093 = cbLight._m0[_1940].z + _794;
    float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
    float _2098 = _2097 * _2091;
    float _2099 = _2097 * _2092;
    float _2100 = _2097 * _2093;
    float _2101 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_1940].xyz));
    float _4264 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _2105 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2106 = dot(vec3(_712, _713, _714), vec3(_2098, _2099, _2100));
    float _4286 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2110 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2098, _2099, _2100));
    float _4297 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2114 = _2090 * _2090;
    float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
    float _2129 = (exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2130 = 1.0 - _2090;
    float _2141 = (0.5 / (((_2105 * ((_2104 * _2130) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2130) + _2090) * _2104))) * _2104;
    float _4308 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2143 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
    uint _2154 = _1940 + 9u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _715) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_1977].x + _792;
    float _2168 = cbLight._m0[_1977].y + _793;
    float _2169 = cbLight._m0[_1977].z + _794;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_1977].xyz));
    float _4319 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2181 = dot(vec3(_712, _713, _714), vec3(_2174, _2175, _2176));
    float _4330 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2185 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2174, _2175, _2176));
    float _4341 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = _2166 * _2166;
    float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
    float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2203 = 1.0 - _2166;
    float _2213 = (0.5 / (((_2105 * ((_2180 * _2203) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2203) + _2166) * _2180))) * _2180;
    float _4352 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2215 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
    float _2225 = (((_2202 * cbLight._m0[_2154].x) * _2215) * _1963) + (((_2129 * cbLight._m0[_2076].x) * _2143) * _1973);
    float _2226 = (((_2202 * cbLight._m0[_2154].y) * _2215) * _1963) + (((_2129 * cbLight._m0[_2076].y) * _2143) * _1973);
    float _2227 = (((_2202 * cbLight._m0[_2154].z) * _2215) * _1963) + (((_2129 * cbLight._m0[_2076].z) * _2143) * _1973);
    float _2289;
    float _2291;
    float _2293;
    if (_2013)
    {
        _2289 = _2225;
        _2291 = _2226;
        _2293 = _2227;
    }
    else
    {
        uint _2295 = _1940 + 2u;
        uint _2299 = _1940 + 10u;
        float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _715) * 0.949999988079071044921875);
        float _2314 = _2313 * _2313;
        float _2315 = cbLight._m0[_2295].x + _792;
        float _2316 = cbLight._m0[_2295].y + _793;
        float _2317 = cbLight._m0[_2295].z + _794;
        float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
        float _2322 = _2321 * _2315;
        float _2323 = _2321 * _2316;
        float _2324 = _2321 * _2317;
        float _2325 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2295].xyz));
        float _4363 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2329 = dot(vec3(_712, _713, _714), vec3(_2322, _2323, _2324));
        float _4374 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2333 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2322, _2323, _2324));
        float _4385 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2337 = _2314 * _2314;
        float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
        float _2350 = (exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2351 = 1.0 - _2314;
        float _2361 = (0.5 / (((_2105 * ((_2328 * _2351) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2351) + _2314) * _2328))) * _2328;
        float _4396 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2363 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
        float _2364 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2289 = (((_2350 * cbLight._m0[_2299].x) * _2363) * _2364) + _2225;
        _2291 = (((_2350 * cbLight._m0[_2299].y) * _2363) * _2364) + _2226;
        _2293 = (((_2350 * cbLight._m0[_2299].z) * _2363) * _2364) + _2227;
    }
    float _2399;
    float _2401;
    float _2403;
    if (_2031)
    {
        _2399 = _2289;
        _2401 = _2291;
        _2403 = _2293;
    }
    else
    {
        uint _2410 = _1940 + 3u;
        uint _2414 = _1940 + 11u;
        float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _715) * 0.949999988079071044921875);
        float _2429 = _2428 * _2428;
        float _2430 = cbLight._m0[_2410].x + _792;
        float _2431 = cbLight._m0[_2410].y + _793;
        float _2432 = cbLight._m0[_2410].z + _794;
        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
        float _2437 = _2436 * _2430;
        float _2438 = _2436 * _2431;
        float _2439 = _2436 * _2432;
        float _2440 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2410].xyz));
        float _4412 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2444 = dot(vec3(_712, _713, _714), vec3(_2437, _2438, _2439));
        float _4423 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2448 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2437, _2438, _2439));
        float _4434 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2452 = _2429 * _2429;
        float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
        float _2465 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2466 = 1.0 - _2429;
        float _2476 = (0.5 / (((_2105 * ((_2443 * _2466) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2466) + _2429) * _2443))) * _2443;
        float _4445 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2478 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
        float _2479 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2399 = (((_2465 * cbLight._m0[_2414].x) * _2478) * _2479) + _2289;
        _2401 = (((_2465 * cbLight._m0[_2414].y) * _2478) * _2479) + _2291;
        _2403 = (((_2465 * cbLight._m0[_2414].z) * _2478) * _2479) + _2293;
    }
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    if (_1938.y == 0u)
    {
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2554;
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2554;
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2554;
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.x;
        uint _2581 = uint((float(_2569.y) * floor(float(uint(cbSceneParam._m0[85u].y * _813) / _2570))) + floor(float(uint(cbSceneParam._m0[85u].x * _812) / _2570)));
        float _2591 = (log2(_2557 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2592 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        uint _2595 = uint(isnan(14.0) ? _2592 : (isnan(_2592) ? 14.0 : min(_2592, 14.0)));
        uvec4 _2600 = texelFetch(g_lightClusterGridBuffer, int(((_2595 << 2u) + (_2581 << 6u)) >> 2u));
        uint _2601 = _2600.x;
        uint _2602 = _2569.z;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((((1u << ((_2602 >> 4u) & 15u)) + 4294967295u) & _2601) == 0u) || ((_2602 & 240u) == 0u))
        {
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
        }
        else
        {
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            uint _2861 = 0u;
            uint _2870;
            bool _2871;
            for (;;)
            {
                _2870 = texelFetch(g_lightClassification, int((((_2595 << 5u) + (_2581 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                _2871 = _2870 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2871)
                {
                    frontier_phi_66_pred = _2855;
                    frontier_phi_66_pred_1 = _2860;
                    frontier_phi_66_pred_2 = _2859;
                    frontier_phi_66_pred_3 = _2858;
                    frontier_phi_66_pred_4 = _2857;
                    frontier_phi_66_pred_5 = _2856;
                }
                else
                {
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    uint _3006;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2870;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    for (;;)
                    {
                        uint _3010 = uint(findLSB(_3006)) + (_2861 << 5u);
                        uint _3007 = (_3006 + 4294967295u) & _3006;
                        uint _3012 = _3010 * 48u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3032 = (_3010 * 48u) + 4u;
                        vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3051 = (_3010 * 48u) + 8u;
                        vec3 _3062 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x));
                        float _3066 = _3026.x - _2555;
                        float _3067 = _3026.y - _2556;
                        float _3068 = _3026.z - _2557;
                        float _3069 = dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068));
                        float _3072 = inversesqrt(_3069);
                        float _3073 = _3072 * _3066;
                        float _3074 = _3072 * _3067;
                        float _3075 = _3072 * _3068;
                        float _3076 = dot(vec3(_831, _834, _837), vec3(_3073, _3074, _3075));
                        float _3081 = 1.0 - (_3069 * _3026.w);
                        float _4471 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3083 = sqrt(_3069) * _3045.w;
                        float _3086 = 1.39999997615814208984375 / (_3083 + 1.39999997615814208984375);
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3076) + _3087;
                        float _3093 = _3083 * _3083;
                        float _3097 = ((isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))) * _3082) / ((_3093 * 0.699999988079071044921875) + 1.0);
                        float _3101 = (-0.0) - _2555;
                        float _3102 = (-0.0) - _2556;
                        float _3103 = (-0.0) - _2557;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3118 = exp2(log2(1.0 / ((_3093 * 3.5) + 5.0)) * 0.25);
                        float _3119 = 1.0 - _891;
                        float _3126 = sqrt(1.0 - ((1.0 - (_3119 * _3119)) * (1.0 - (_3118 * _3118))));
                        float _3127 = _3126 * _3126;
                        float _3128 = _3127 * _3127;
                        float _3129 = _3108 + _3073;
                        float _3130 = _3109 + _3074;
                        float _3131 = _3110 + _3075;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3139 = dot(vec3(_831, _834, _837), vec3(_3108, _3109, _3110));
                        float _4487 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3143 = dot(vec3(_831, _834, _837), vec3(_3135 * _3129, _3135 * _3130, _3135 * _3131));
                        float _4498 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3150 = ((_3146 * _3146) * (_3128 + (-1.0))) + 1.0;
                        float _3151 = _3086 * _3127;
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3076) + _3152;
                        float _4509 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3157 = 1.0 - _3127;
                        float _3167 = (0.5 / (((_3156 * ((_3142 * _3157) + _3127)) + 9.9999999392252902907785028219223e-09) + (((_3156 * _3157) + _3127) * _3142))) * _3156;
                        float _4520 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3178 = (((_3128 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3150 * _3150) * ((_3093 * 2.1991131305694580078125) + 3.141590118408203125))) * _3082;
                        _2930 = (_3097 * _3045.x) + _3003;
                        _2931 = (_3097 * _3045.y) + _3004;
                        _2932 = (_3097 * _3045.z) + _3005;
                        _2927 = (_3178 * _3062.x) + _3000;
                        _2928 = (_3178 * _3062.y) + _3001;
                        _2929 = (_3178 * _3062.z) + _3002;
                        if (_3007 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _3007;
                        }
                    }
                    frontier_phi_66_pred = _2927;
                    frontier_phi_66_pred_1 = _2932;
                    frontier_phi_66_pred_2 = _2931;
                    frontier_phi_66_pred_3 = _2930;
                    frontier_phi_66_pred_4 = _2929;
                    frontier_phi_66_pred_5 = _2928;
                }
                _2703 = frontier_phi_66_pred;
                _2713 = frontier_phi_66_pred_1;
                _2711 = frontier_phi_66_pred_2;
                _2709 = frontier_phi_66_pred_3;
                _2707 = frontier_phi_66_pred_4;
                _2705 = frontier_phi_66_pred_5;
                uint _2862 = _2861 + 1u;
                if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2855 = _2703;
                    _2856 = _2705;
                    _2857 = _2707;
                    _2858 = _2709;
                    _2859 = _2711;
                    _2860 = _2713;
                    _2861 = _2862;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
        }
        uvec4 _2716 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2717 = _2716.z;
        uint _2719 = (_2717 >> 8u) & 15u;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((4294967295u << _2719) & _2601) == 0u)
        {
            _2823 = _2702;
            _2825 = _2704;
            _2827 = _2706;
            _2829 = _2708;
            _2831 = _2710;
            _2833 = _2712;
        }
        else
        {
            float _2848 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
            float _2849 = _2848 * _2555;
            float _2850 = _2848 * _2556;
            float _2851 = _2848 * _2557;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2719 < ((_2717 >> 12u) & 15u))
            {
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2983 = _2702;
                float _2984 = _2704;
                float _2985 = _2706;
                float _2986 = _2708;
                float _2987 = _2710;
                float _2988 = _2712;
                uint _2989 = _2719;
                uint _2998;
                bool _2999;
                for (;;)
                {
                    _2998 = texelFetch(g_lightClassification, int((((_2595 << 5u) + (_2581 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                    _2999 = _2998 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2999)
                    {
                        frontier_phi_77_pred = _2988;
                        frontier_phi_77_pred_1 = _2987;
                        frontier_phi_77_pred_2 = _2986;
                        frontier_phi_77_pred_3 = _2985;
                        frontier_phi_77_pred_4 = _2984;
                        frontier_phi_77_pred_5 = _2983;
                    }
                    else
                    {
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        float _3207 = _2985;
                        float _3208 = _2986;
                        float _3209 = _2987;
                        float _3210 = _2988;
                        uint _3211 = _2998;
                        uint _3212;
                        vec4 _3237;
                        float _3238;
                        vec4 _3253;
                        vec3 _3265;
                        vec4 _3280;
                        vec4 _3295;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3222 = ((_2989 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3211));
                            _3212 = (_3211 + 4294967295u) & _3211;
                            uint _3224 = _3222 * 40u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3238 = _3237.w;
                            uint _3240 = (_3222 * 40u) + 4u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3222 * 40u) + 8u;
                            _3265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x));
                            uint _3267 = (_3222 * 40u) + 16u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3222 * 40u) + 20u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3222 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3222 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_2557, _3329.z, fma(_2556, _3329.y, _3329.x * _2555)) + _3329.w;
                            _3342 = !((fma(_2557, _3310.z, fma(_2556, _3310.y, _3310.x * _2555)) + _3310.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3237.x - _2555;
                                float _3370 = _3237.y - _2556;
                                float _3371 = _3237.z - _2557;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3238 * _3238));
                                float _4531 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3387 = sqrt(_3372) * _3253.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_831, _834, _837))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_2557, _3280.z, fma(_2556, _3280.y, _3280.x * _2555)) + _3280.w) / _3341;
                                float _3401 = (fma(_2557, _3295.z, fma(_2556, _3295.y, _3295.x * _2555)) + _3295.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4547 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3420 = 1.0 - _891;
                                float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                                float _3428 = _3427 * _3427;
                                float _3429 = _3428 * _3428;
                                float _3430 = _3376 - _2849;
                                float _3431 = _3377 - _2850;
                                float _3432 = _3378 - _2851;
                                float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                                float _3440 = dot(vec3(_831, _834, _837), vec3((-0.0) - _2849, (-0.0) - _2850, (-0.0) - _2851));
                                float _4558 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3444 = dot(vec3(_831, _834, _837), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                                float _4569 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                                float _3452 = _3389 * _3428;
                                float _3453 = _3452 * _3452;
                                float _3459 = ((1.0 - _3453) * dot(vec3(_831, _834, _837), vec3(_3376, _3377, _3378))) + _3453;
                                float _4580 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3461 = 1.0 - _3428;
                                float _3471 = (0.5 / (((_3460 * ((_3443 * _3461) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3428) * _3443))) * _3460;
                                float _4591 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3481 = (_3406 * _3383) * (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3451 * _3451) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3407 * _3253.y;
                                frontier_phi_83_pred_1 = _3407 * _3253.x;
                                frontier_phi_83_pred_2 = _3481 * _3265.z;
                                frontier_phi_83_pred_3 = _3481 * _3265.y;
                                frontier_phi_83_pred_4 = _3481 * _3265.x;
                                frontier_phi_83_pred_5 = _3407 * _3253.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3489 = frontier_phi_83_pred;
                            _3488 = frontier_phi_83_pred_1;
                            _3487 = frontier_phi_83_pred_2;
                            _3486 = frontier_phi_83_pred_3;
                            _3485 = frontier_phi_83_pred_4;
                            _3490 = frontier_phi_83_pred_5;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            _3192 = _3485 + _3205;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            if (_3212 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3212;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3197;
                        frontier_phi_77_pred_1 = _3196;
                        frontier_phi_77_pred_2 = _3195;
                        frontier_phi_77_pred_3 = _3194;
                        frontier_phi_77_pred_4 = _3193;
                        frontier_phi_77_pred_5 = _3192;
                    }
                    _2834 = frontier_phi_77_pred;
                    _2832 = frontier_phi_77_pred_1;
                    _2830 = frontier_phi_77_pred_2;
                    _2828 = frontier_phi_77_pred_3;
                    _2826 = frontier_phi_77_pred_4;
                    _2824 = frontier_phi_77_pred_5;
                    uint _2990 = _2989 + 1u;
                    if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2983 = _2824;
                        _2984 = _2826;
                        _2985 = _2828;
                        _2986 = _2830;
                        _2987 = _2832;
                        _2988 = _2834;
                        _2989 = _2990;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2828;
                frontier_phi_58_59_ladder_1 = _2834;
                frontier_phi_58_59_ladder_2 = _2832;
                frontier_phi_58_59_ladder_3 = _2830;
                frontier_phi_58_59_ladder_4 = _2826;
                frontier_phi_58_59_ladder_5 = _2824;
            }
            else
            {
                frontier_phi_58_59_ladder = _2706;
                frontier_phi_58_59_ladder_1 = _2712;
                frontier_phi_58_59_ladder_2 = _2710;
                frontier_phi_58_59_ladder_3 = _2708;
                frontier_phi_58_59_ladder_4 = _2704;
                frontier_phi_58_59_ladder_5 = _2702;
            }
            _2823 = frontier_phi_58_59_ladder_5;
            _2825 = frontier_phi_58_59_ladder_4;
            _2827 = frontier_phi_58_59_ladder;
            _2829 = frontier_phi_58_59_ladder_3;
            _2831 = frontier_phi_58_59_ladder_2;
            _2833 = frontier_phi_58_59_ladder_1;
        }
        float _2838 = isnan(1.0) ? _875 : (isnan(_875) ? 1.0 : min(_875, 1.0));
        _2614 = (_2838 * _2829) + _2069;
        _2616 = (_2838 * _2831) + _2071;
        _2618 = (_2838 * _2833) + _2073;
        _2620 = ((_2823 * 0.039999999105930328369140625) * _2838) + _2399;
        _2622 = ((_2825 * 0.039999999105930328369140625) * _2838) + _2401;
        _2624 = ((_2827 * 0.039999999105930328369140625) * _2838) + _2403;
    }
    else
    {
        _2614 = _2069;
        _2616 = _2071;
        _2618 = _2073;
        _2620 = _2399;
        _2622 = _2401;
        _2624 = _2403;
    }
    float _4607 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4618 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4629 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _2641 = ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2614 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _875))) + ((_2620 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2642 = ((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2616 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _875))) + ((_2622 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2643 = ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2618 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _875))) + ((_2624 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    uint _2644 = _268 + 6u;
    float _2652 = _812 / cbSceneParam._m0[86u].x;
    float _2653 = _813 / cbSceneParam._m0[86u].y;
    vec4 _2667 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2652, _2653, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2669 = _2667.x;
    float _2670 = _2667.y;
    float _2671 = _2667.z;
    float _2672 = _2667.w;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _2727 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _2728 = _2727 / _733;
        float _2739 = _2728 * _785;
        float _2740 = _786 * _2728;
        float _2741 = (-0.0) - _2740;
        float _2743 = _2728 * _787;
        float _2745 = (cbSceneParam._m0[77u].w * _2741) / _2727;
        float _2746 = _2745 + cbSceneParam._m0[79u].w;
        float _2747 = cbSceneParam._m0[79u].w - _2740;
        float _2753 = sqrt(((_2739 * _2739) + (_2740 * _2740)) + (_2743 * _2743));
        float _2756 = (1.0 - (cbSceneParam._m0[77u].w / _2727)) * _2753;
        float _2761 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2763 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2940;
        if (abs((_2741 - _2745) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2940 = ((((_2746 > 0.0) ? exp2(_2761 * _2746) : (2.0 - exp2(_2763 * _2746))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2756;
        }
        else
        {
            float _2884 = 1.0 / cbSceneParam._m0[80u].x;
            float _2885 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : max(_2746, _2747));
            float _2886 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : min(_2746, _2747));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            _2940 = ((abs(_2753 / _2741) * cbSceneParam._m0[80u].y) * ((((_2895 - _2896) * 2.0) - ((exp2(_2761 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0)))) - exp2(_2761 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))))) * _2884)) - ((exp2(_2763 * _2895) - exp2(_2763 * _2896)) * _2884))) + (_2756 * cbSceneParam._m0[80u].z);
        }
        vec4 _2942 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2652, _2653, 1.0), 0.0);
        float _2951 = exp2((_2940 * (-1.44269502162933349609375)) * (1.0 - _2942.w));
        float _2952 = log2(_2951);
        float _2968 = log2(_2672);
        _2765 = (exp2(_2968 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].x)) * _2942.x) / cbSceneParam._m0[78u].x)) + _2669;
        _2767 = (exp2(_2968 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].y)) * _2942.y) / cbSceneParam._m0[78u].y)) + _2670;
        _2769 = (exp2(_2968 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].z)) * _2942.z) / cbSceneParam._m0[78u].z)) + _2671;
        _2771 = _2951 * _2672;
    }
    else
    {
        _2765 = _2669;
        _2767 = _2670;
        _2769 = _2671;
        _2771 = _2672;
    }
    bool _2978;
    vec4 _2781;
    vec4 _2803;
    float _2805;
    float _2809;
    float _2810;
    float _2811;
    float _2812;
    bool _2822;
    for (;;)
    {
        _2781 = cbMatDynParam._m0[0u];
        float _2783 = roundEven(_2781.y);
        bool _2784 = _2783 == 3.0;
        float _2785 = log2(_2771);
        float _2792 = exp2(_2785 * cbSceneParam._m0[78u].x) * _2641;
        float _2793 = exp2(_2785 * cbSceneParam._m0[78u].y) * _2642;
        float _2794 = exp2(_2785 * cbSceneParam._m0[78u].z) * _2643;
        float _2801 = _801 + (-0.5);
        _2803 = cbMtdParam._m0[1u];
        _2805 = _2803.y * _2801;
        float _2808 = (_2783 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2809 = _2808 * (_2784 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2765)));
        _2810 = _2808 * (_2784 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2767)));
        _2811 = _2808 * (_2784 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2769)));
        _2812 = _2801 * 0.999000012874603271484375;
        _2822 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2822)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _2812) < 0.5)
            {
                _2978 = true;
                break;
            }
        }
        uint _2919 = _850 + uint(_2781.w);
        if ((cbInstanceData._m0[_2919].w < 1.0) && ((cbInstanceData._m0[_2919].w + _2812) < 0.5))
        {
            _2978 = true;
            break;
        }
        if ((_2805 + 1.0) < _2803.x)
        {
            _2978 = true;
            break;
        }
        _2978 = false;
        break;
    }
    float _3183;
    if (_2978)
    {
        discard_state = true;
        _3183 = 0.0;
    }
    else
    {
        _3183 = cbInstanceData._m0[_2644].w;
    }
    SV_Target.x = _2809;
    SV_Target.y = _2810;
    SV_Target.z = _2811;
    SV_Target.w = _3183;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2644].w;
    discard_exit();
}


