#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1258;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _328.x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[24u].z) + _379) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3844 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _404 = (_397 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _405 = (_397 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _406 = (_397 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _423 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _455 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _469 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _328.y) * 2.0) - ((((_445 - _455) * cbMtdParam._m0[24u].z) + _455) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3855 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _477 = (_470 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _478 = (_470 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _479 = (_470 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _539 = _535.z;
    float _546 = ((_518.x - _537) * _397) + _537;
    float _547 = ((_518.y - _538) * _397) + _538;
    float _548 = ((_518.z - _539) * _397) + _539;
    vec4 _560 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _573 = ((_560.z - _548) * _470) + _548;
    float _576 = ((((_560.x - _546) * _470) + _546) * 2.0) + (-1.0);
    float _578 = ((((_560.y - _547) * _470) + _547) * 2.0) + (-1.0);
    float _579 = dot(vec2(_576, _578), vec2(_576, _578));
    float _3866 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _584 = sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _610 = (((_598.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _576;
    float _611 = (((_598.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _578;
    float _614 = fma(_584, _228, fma(_611, _235, _610 * _221));
    float _617 = fma(_584, _229, fma(_611, _236, _610 * _222));
    float _620 = fma(_584, _230, fma(_611, _237, _610 * _223));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _653 = _651.x;
    float _654 = 1.0 - _653;
    float _660 = (cbMtdParam._m0[19u].x + dot(vec4(_624 * _614, _624 * _617, _624 * _620, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_653 - _654) * cbMtdParam._m0[24u].w) + _654) * cbMtdParam._m0[21u].z);
    float _3877 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _668 = (_661 * ((_498.x * cbMtdParam._m0[18u].x) - _477)) + _477;
    float _669 = (_661 * ((_498.y * cbMtdParam._m0[18u].y) - _478)) + _478;
    float _670 = (_661 * ((_498.z * cbMtdParam._m0[18u].z) - _479)) + _479;
    float _674 = (cbMtdParam._m0[19u].w * (_598.z - _573)) + _573;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _694 = (_687.x * 2.0) + (-1.0);
    float _695 = (_687.y * 2.0) + (-1.0);
    float _696 = dot(vec2(_694, _695), vec2(_694, _695));
    float _3888 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _704 = ((_687.z - _674) * _661) + _674;
    float _714 = ((sqrt(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) - _584) * _661) + _584;
    float _717 = (((_694 - _610) * _661) + _610) + (cbMtdParam._m0[21u].x * _610);
    float _718 = (((_695 - _611) * _661) + _611) + (cbMtdParam._m0[21u].x * _611);
    float _722 = cbMtdParam._m0[22u].x + _598.w;
    float _725 = fma(_714, _228, fma(_718, _235, _717 * _221));
    float _728 = fma(_714, _229, fma(_718, _236, _717 * _222));
    float _731 = fma(_714, _230, fma(_718, _237, _717 * _223));
    float _735 = inversesqrt(dot(vec3(_725, _728, _731), vec3(_725, _728, _731)));
    float _736 = _735 * _725;
    float _737 = _735 * _728;
    float _738 = _735 * _731;
    float _3899 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _739 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _3921 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3932 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _3943 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _757 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _809 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _799);
    float _810 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _799);
    float _811 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _799);
    float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
    float _816 = _809 * _815;
    float _817 = _810 * _815;
    float _818 = _811 * _815;
    float _824 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _825 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _843 = fma(_738, cbSceneParam._m0[5u].z, fma(_737, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _736));
    float _846 = fma(_738, cbSceneParam._m0[6u].z, fma(_737, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _736));
    float _849 = fma(_738, cbSceneParam._m0[7u].z, fma(_737, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _736));
    uint _863 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _869 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_863].x;
    float _870 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * cbInstanceData._m0[_863].y;
    float _871 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * cbInstanceData._m0[_863].z;
    float _3954 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    vec4 _883 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _824, cbSceneParam._m0[86u].y * _825));
    float _887 = ((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * TEXCOORD_5.w) * _883.x;
    float _888 = dot(vec3(_736, _737, _738), vec3(_816, _817, _818));
    float _891 = _888 * 2.0;
    float _895 = (_891 * _736) - _816;
    float _896 = (_891 * _737) - _817;
    float _897 = (_891 * _738) - _818;
    float _901 = abs(dot(vec3(_816, _817, _818), vec3(_736, _737, _738)));
    float _3987 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _903 = sqrt(_739);
    float _916 = exp2((_903 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_903 * 3.0));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1257;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _982 = fma(_956, cbModelParam._m0[26u].z, fma(_952, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948));
        float _986 = fma(_956, cbModelParam._m0[27u].z, fma(_952, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948));
        float _990 = fma(_956, cbModelParam._m0[28u].z, fma(_952, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948));
        float _1015 = _948 + _736;
        float _1016 = _952 + _737;
        float _1017 = _956 + _738;
        float _1027 = fma(_1017, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015)) - _982;
        float _1028 = fma(_1017, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015)) - _986;
        float _1029 = fma(_1017, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015)) - _990;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_982 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_986 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[34u].z) + ((((((_990 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1051.x + (-0.5));
        float _1087 = _1085 * (_1051.y + (-0.5));
        float _1088 = _1085 * (_1051.z + (-0.5));
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1058.x + (-0.5));
        float _1097 = _1095 * (_1058.y + (-0.5));
        float _1098 = _1095 * (_1058.z + (-0.5));
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1065.x + (-0.5));
        float _1107 = _1105 * (_1065.y + (-0.5));
        float _1108 = _1105 * (_1065.z + (-0.5));
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1139 = (dot(vec3(_736, _737, _738), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1149 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _4035 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1151 + 1.0))) + _1156) * _1119;
        float _1166 = _1087 * 0.5;
        float _1167 = _1097 * 0.5;
        float _1168 = _1107 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_736, _737, _738), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _4068 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1193 + 1.0))) + _1198) * _1120;
        float _1208 = _1088 * 0.5;
        float _1209 = _1098 * 0.5;
        float _1210 = _1108 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_736, _737, _738), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4101 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1235 + 1.0))) + _1240) * _1121;
        _1257 = _1088;
        _1259 = _1087;
        _1260 = _1086;
        _1261 = _1098;
        _1262 = _1097;
        _1263 = _1096;
        _1264 = _1108;
        _1265 = _1107;
        _1266 = _1106;
        _1267 = _1121;
        _1268 = _1120;
        _1269 = _1119;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _1258;
        _1259 = _1258;
        _1260 = _1258;
        _1261 = _1258;
        _1262 = _1258;
        _1263 = _1258;
        _1264 = _1258;
        _1265 = _1258;
        _1266 = _1258;
        _1267 = _1258;
        _1268 = _1258;
        _1269 = _1258;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1296 = fma(_956, cbModelParam._m0[30u].z, fma(_952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _948));
        float _1300 = fma(_956, cbModelParam._m0[31u].z, fma(_952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _948));
        float _1304 = fma(_956, cbModelParam._m0[32u].z, fma(_952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _948));
        float _1327 = _948 + _736;
        float _1328 = _952 + _737;
        float _1329 = _956 + _738;
        float _1339 = fma(_1329, cbModelParam._m0[30u].z, fma(_1328, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1327)) - _1296;
        float _1340 = fma(_1329, cbModelParam._m0[31u].z, fma(_1328, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1327)) - _1300;
        float _1341 = fma(_1329, cbModelParam._m0[32u].z, fma(_1328, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1327)) - _1304;
        float _1345 = inversesqrt(dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341)));
        float _1358 = ((_1345 * _1339) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1296 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1345 * _1340) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1300 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1345 * _1341) / cbModelParam._m0[35u].z) + ((((((_1304 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        float _1395 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1362.x + (-0.5));
        float _1397 = _1395 * (_1362.y + (-0.5));
        float _1398 = _1395 * (_1362.z + (-0.5));
        float _1405 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1369.x + (-0.5));
        float _1407 = _1405 * (_1369.y + (-0.5));
        float _1408 = _1405 * (_1369.z + (-0.5));
        float _1415 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1376.x + (-0.5));
        float _1417 = _1415 * (_1376.y + (-0.5));
        float _1418 = _1415 * (_1376.z + (-0.5));
        float _1425 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1383.x + (-0.5));
        float _1427 = _1425 * (_1383.y + (-0.5));
        float _1428 = _1425 * (_1383.z + (-0.5));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = _1396 * 0.5;
        float _1433 = _1406 * 0.5;
        float _1434 = _1416 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_736, _737, _738), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4164 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1459 + 1.0))) + _1464) * _1429;
        float _1474 = _1397 * 0.5;
        float _1475 = _1407 * 0.5;
        float _1476 = _1417 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_736, _737, _738), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4197 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1501 + 1.0))) + _1506) * _1430;
        float _1516 = _1398 * 0.5;
        float _1517 = _1408 * 0.5;
        float _1518 = _1418 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_736, _737, _738), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4230 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1543 + 1.0))) + _1548) * _1431;
        _1565 = _1398;
        _1566 = _1397;
        _1567 = _1396;
        _1568 = _1408;
        _1569 = _1407;
        _1570 = _1406;
        _1571 = _1418;
        _1572 = _1417;
        _1573 = _1416;
        _1574 = _1431;
        _1575 = _1430;
        _1576 = _1429;
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
    }
    else
    {
        _1565 = _1258;
        _1566 = _1258;
        _1567 = _1258;
        _1568 = _1258;
        _1569 = _1258;
        _1570 = _1258;
        _1571 = _1258;
        _1572 = _1258;
        _1573 = _1258;
        _1574 = _1258;
        _1575 = _1258;
        _1576 = _1258;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1270)) + _1270;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1271)) + _1271;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1272)) + _1272;
    float _1612 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1615 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1618 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1589));
    float _1633 = _895 * 0.5;
    float _1634 = _896 * 0.5;
    float _1635 = _897 * 0.5;
    float _1636 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1639 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1642 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1676;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1649 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1257, _1261, _1264, _1267));
        float _1653 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1657 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1664 = dot(vec4(cbModelParam._m0[39u]), vec4(_1633, _1634, _1635, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1687;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1678 = dot(vec4(cbModelParam._m0[40u]), vec4(_1633, _1634, _1635, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1691 = (_1687 * cbModelParam._m0[1u].x) + (_1676 * (1.0 - cbModelParam._m0[1u].x));
    float _1701 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _739);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1701 : min(cbModelParam._m0[25u].z, _1701));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1749 = fma(_956, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948)) + cbModelParam._m0[13u].w;
        float _1753 = fma(_956, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948)) + cbModelParam._m0[14u].w;
        float _1757 = fma(_956, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948)) + cbModelParam._m0[15u].w;
        float _1760 = fma(_897, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _895));
        float _1763 = fma(_897, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _895));
        float _1766 = fma(_897, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _895));
        float _1794;
        if (_1760 > 0.0)
        {
            _1794 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1794 = frontier_phi_14_12_ladder;
        }
        float _1963;
        if (_1763 > 0.0)
        {
            _1963 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1963 = frontier_phi_23_19_ladder;
        }
        float _2258;
        if (_1766 > 0.0)
        {
            _2258 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2258 = frontier_phi_35_30_ladder;
        }
        float _2260 = isnan(_1963) ? _1794 : (isnan(_1794) ? _1963 : min(_1794, _1963));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1760) + _1749;
        float _2266 = (_2261 * _1763) + _1753;
        float _2267 = (_2261 * _1766) + _1757;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2268;
        float _2272 = _2268 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 > _2272) || ((_2266 < _2270) || ((_2265 < _2270) || (_2265 > _2272))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2267, cbModelParam._m0[9u].z, fma(_2266, cbModelParam._m0[9u].y, _2265 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2267, cbModelParam._m0[10u].z, fma(_2266, cbModelParam._m0[10u].y, _2265 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2267, cbModelParam._m0[11u].z, fma(_2266, cbModelParam._m0[11u].y, _2265 * cbModelParam._m0[11u].x))), _1702);
            frontier_phi_13_35_ladder = _2412.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2412.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2412.x * cbModelParam._m0[1u].y;
        }
        _1782 = frontier_phi_13_35_ladder_2;
        _1784 = frontier_phi_13_35_ladder_1;
        _1786 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_895, _896, _897), _1702);
        _1782 = _1770.x * cbModelParam._m0[1u].y;
        _1784 = _1770.y * cbModelParam._m0[1u].y;
        _1786 = _1770.z * cbModelParam._m0[1u].y;
    }
    float _1790 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _739);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1790 : min(cbModelParam._m0[25u].w, _1790));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_956, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_956, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_956, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_897, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _895));
        float _1858 = fma(_897, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _895));
        float _1861 = fma(_897, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _895));
        float _1968;
        if (_1855 > 0.0)
        {
            _1968 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1968 = frontier_phi_25_21_ladder;
        }
        float _2285;
        if (_1858 > 0.0)
        {
            _2285 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2285 = frontier_phi_37_32_ladder;
        }
        float _2612;
        if (_1861 > 0.0)
        {
            _2612 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2612 = frontier_phi_47_44_ladder;
        }
        float _2614 = isnan(_2285) ? _1968 : (isnan(_1968) ? _2285 : min(_1968, _2285));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _1855) + _1844;
        float _2620 = (_2615 * _1858) + _1848;
        float _2621 = (_2615 * _1861) + _1852;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2623 = (-1.0) - _2622;
        float _2625 = _2622 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2621 > _2625) || ((_2621 < _2623) || ((_2620 > _2625) || ((_2620 < _2623) || ((_2619 < _2623) || (_2619 > _2625))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2621, cbModelParam._m0[17u].z, fma(_2620, cbModelParam._m0[17u].y, _2619 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2621, cbModelParam._m0[18u].z, fma(_2620, cbModelParam._m0[18u].y, _2619 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2621, cbModelParam._m0[19u].z, fma(_2620, cbModelParam._m0[19u].y, _2619 * cbModelParam._m0[19u].x))), _1791);
            frontier_phi_22_47_ladder = _2739.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2739.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2739.x * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_22_47_ladder_2;
        _1882 = frontier_phi_22_47_ladder_1;
        _1884 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_895, _896, _897), _1791);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1896 = ((((1.0 - _916) * ((_903 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_916 * _903)) * _887;
    float _1897 = _1896 * ((cbModelParam._m0[1u].w * (_1880 - _1782)) + _1782);
    float _1898 = _1896 * ((cbModelParam._m0[1u].w * (_1882 - _1784)) + _1784);
    float _1899 = _1896 * ((cbModelParam._m0[1u].w * (_1884 - _1786)) + _1786);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    float _1942 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1955 = _1942 / _1954;
    float _1956 = _1946 / _1954;
    float _1957 = _1950 / _1954;
    float _2104;
    float _2105;
    float _2106;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1984 = ((uint(_1957 > cbSceneParam._m0[59u].y) + uint(_1957 > cbSceneParam._m0[59u].x)) + uint(_1957 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1985 = _1984 + 43u;
        uint _1993 = _1984 + 44u;
        uint _2001 = _1984 + 45u;
        uint _2009 = _1984 + 46u;
        float _2020 = fma(_1954, cbSceneParam._m0[_1985].w, fma(_1950, cbSceneParam._m0[_1985].z, fma(_1946, cbSceneParam._m0[_1985].y, _1942 * cbSceneParam._m0[_1985].x)));
        float _2024 = fma(_1954, cbSceneParam._m0[_1993].w, fma(_1950, cbSceneParam._m0[_1993].z, fma(_1946, cbSceneParam._m0[_1993].y, _1942 * cbSceneParam._m0[_1993].x)));
        float _2032 = fma(_1954, cbSceneParam._m0[_2009].w, fma(_1950, cbSceneParam._m0[_2009].z, fma(_1946, cbSceneParam._m0[_2009].y, _1942 * cbSceneParam._m0[_2009].x)));
        float _2037 = cbSceneParam._m0[33u].z * _2032;
        float _2039 = cbSceneParam._m0[33u].w * _2032;
        float _2042 = fma(_1954, cbSceneParam._m0[_2001].w, fma(_1950, cbSceneParam._m0[_2001].z, fma(_1946, cbSceneParam._m0[_2001].y, _1942 * cbSceneParam._m0[_2001].x))) / _2032;
        float _2090 = (cbSceneParam._m0[33u].x - sqrt(((_1956 * _1956) + (_1955 * _1955)) + (_1957 * _1957))) * cbSceneParam._m0[33u].y;
        float _4356 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2097 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2037 + _2020) / _2032, (_2039 + _2024) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 + _2020) / _2032, (_2024 - _2037) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 - _2037) / _2032, (_2024 - _2039) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 - _2039) / _2032, (_2037 + _2024) / _2032), _2042), 0.0)).x), vec4(0.25)));
        _2104 = 1.0 - (_2097 * cbSceneParam._m0[34u].x);
        _2105 = 1.0 - (_2097 * cbSceneParam._m0[34u].y);
        _2106 = 1.0 - (_2097 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2104 = 1.0;
        _2105 = 1.0;
        _2106 = 1.0;
    }
    float _2170;
    float _2172;
    float _2174;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2158 = fma(_1954, cbSceneParam._m0[63u].w, fma(_1950, cbSceneParam._m0[63u].z, fma(_1946, cbSceneParam._m0[63u].y, _1942 * cbSceneParam._m0[63u].x)));
        float _2159 = fma(_1954, cbSceneParam._m0[60u].w, fma(_1950, cbSceneParam._m0[60u].z, fma(_1946, cbSceneParam._m0[60u].y, _1942 * cbSceneParam._m0[60u].x))) / _2158;
        float _2160 = fma(_1954, cbSceneParam._m0[61u].w, fma(_1950, cbSceneParam._m0[61u].z, fma(_1946, cbSceneParam._m0[61u].y, _1942 * cbSceneParam._m0[61u].x))) / _2158;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2159 >= cbSceneParam._m0[64u].x) && (_2160 >= cbSceneParam._m0[64u].y)) && (_2159 <= cbSceneParam._m0[64u].z)) && (_2160 <= cbSceneParam._m0[64u].w))
        {
            float _2298 = fma(_1954, cbSceneParam._m0[62u].w, fma(_1950, cbSceneParam._m0[62u].z, fma(_1946, cbSceneParam._m0[62u].y, _1942 * cbSceneParam._m0[62u].x))) / _2158;
            float _2302 = isnan(cbSceneParam._m0[41u].w) ? _2298 : (isnan(_2298) ? cbSceneParam._m0[41u].w : max(_2298, cbSceneParam._m0[41u].w));
            float _2345 = (cbSceneParam._m0[33u].x - sqrt(((_1956 * _1956) + (_1955 * _1955)) + (_1957 * _1957))) * cbSceneParam._m0[33u].y;
            float _4372 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
            float _2352 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2159, cbSceneParam._m0[33u].w + _2160), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2159, _2160 - cbSceneParam._m0[33u].z), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2159 - cbSceneParam._m0[33u].z, _2160 - cbSceneParam._m0[33u].w), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2159 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2160), _2302), 0.0)).x), vec4(0.25)));
            float _2356 = 1.0 - (_2352 * cbSceneParam._m0[34u].x);
            float _2357 = 1.0 - (_2352 * cbSceneParam._m0[34u].y);
            float _2358 = 1.0 - (_2352 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2358) ? _2106 : (isnan(_2106) ? _2358 : min(_2106, _2358));
            frontier_phi_34_33_ladder_1 = isnan(_2357) ? _2105 : (isnan(_2105) ? _2357 : min(_2105, _2357));
            frontier_phi_34_33_ladder_2 = isnan(_2356) ? _2104 : (isnan(_2104) ? _2356 : min(_2104, _2356));
        }
        else
        {
            frontier_phi_34_33_ladder = _2106;
            frontier_phi_34_33_ladder_1 = _2105;
            frontier_phi_34_33_ladder_2 = _2104;
        }
        _2170 = frontier_phi_34_33_ladder_2;
        _2172 = frontier_phi_34_33_ladder_1;
        _2174 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2170 = _2104;
        _2172 = _2105;
        _2174 = _2106;
    }
    uvec4 _2179 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2181 = _2179.x * 14u;
    uint _2182 = _2181 + 13u;
    float _2189 = _887 + (-1.0);
    float _2194 = (cbLight._m0[_2182].x * _2189) + 1.0;
    float _2195 = (cbLight._m0[_2182].y * _2189) + 1.0;
    float _2196 = (cbLight._m0[_2182].z * _2189) + 1.0;
    float _2197 = (cbLight._m0[_2182].w * _2189) + 1.0;
    uint _2198 = _2181 + 5u;
    float _2204 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
    uint _2208 = _2181 + 4u;
    float _2217 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2221 = _2181 | 1u;
    float _2232 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_736, _737, _738));
    float _2235 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_736, _737, _738));
    float _4408 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _4419 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2240 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * 0.3183098733425140380859375;
    float _2242 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * 0.3183098733425140380859375;
    float _2249 = ((cbLight._m0[_2198].x * _2204) * _2242) + (((cbLight._m0[_2208].x * _2170) * _2217) * _2240);
    float _2250 = ((_2204 * cbLight._m0[_2198].y) * _2242) + (((cbLight._m0[_2208].y * _2172) * _2217) * _2240);
    float _2251 = ((_2204 * cbLight._m0[_2198].z) * _2242) + (((cbLight._m0[_2208].z * _2174) * _2217) * _2240);
    uvec4 _2255 = floatBitsToUint(cbLight._m0[_2181 + 12u]);
    bool _2257 = _2255.x == 0u;
    float _2359;
    float _2361;
    float _2363;
    if (_2257)
    {
        _2359 = _2249;
        _2361 = _2250;
        _2363 = _2251;
    }
    else
    {
        uint _2367 = _2181 + 6u;
        float _2383 = (dot(vec3(cbLight._m0[_2181 + 2u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2384 = _2383 * _2383;
        float _4430 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2385 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2386 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2359 = (((cbLight._m0[_2367].x * 0.3183098733425140380859375) * _2385) * _2386) + _2249;
        _2361 = (((cbLight._m0[_2367].y * 0.3183098733425140380859375) * _2385) * _2386) + _2250;
        _2363 = (((cbLight._m0[_2367].z * 0.3183098733425140380859375) * _2385) * _2386) + _2251;
    }
    bool _2366 = _2255.y == 0u;
    float _2421;
    float _2423;
    float _2425;
    if (_2366)
    {
        _2421 = _2359;
        _2423 = _2361;
        _2425 = _2363;
    }
    else
    {
        uint _2583 = _2181 + 7u;
        float _2599 = (dot(vec3(cbLight._m0[_2181 + 3u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2600 = _2599 * _2599;
        float _4446 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2601 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2602 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2421 = (((cbLight._m0[_2583].x * 0.3183098733425140380859375) * _2601) * _2602) + _2359;
        _2423 = (((cbLight._m0[_2583].y * 0.3183098733425140380859375) * _2601) * _2602) + _2361;
        _2425 = (((cbLight._m0[_2583].z * 0.3183098733425140380859375) * _2601) * _2602) + _2363;
    }
    uint _2428 = _2181 + 8u;
    float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _739) * 0.949999988079071044921875);
    float _2442 = _2441 * _2441;
    float _2443 = cbLight._m0[_2181].x + _816;
    float _2444 = cbLight._m0[_2181].y + _817;
    float _2445 = cbLight._m0[_2181].z + _818;
    float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
    float _2450 = _2449 * _2443;
    float _2451 = _2449 * _2444;
    float _2452 = _2449 * _2445;
    float _2453 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2181].xyz));
    float _4462 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _4473 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _2457 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2458 = dot(vec3(_736, _737, _738), vec3(_2450, _2451, _2452));
    float _4484 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2450, _2451, _2452));
    float _4495 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2442 * _2442;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2482 = 1.0 - _2442;
    float _2493 = (0.5 / (((_2457 * ((_2456 * _2482) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2482) + _2442) * _2456))) * _2456;
    float _4506 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2495 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    uint _2509 = _2181 + 9u;
    float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _739) * 0.949999988079071044921875);
    float _2521 = _2520 * _2520;
    float _2522 = cbLight._m0[_2221].x + _816;
    float _2523 = cbLight._m0[_2221].y + _817;
    float _2524 = cbLight._m0[_2221].z + _818;
    float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
    float _2529 = _2528 * _2522;
    float _2530 = _2528 * _2523;
    float _2531 = _2528 * _2524;
    float _2532 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2221].xyz));
    float _4517 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2536 = dot(vec3(_736, _737, _738), vec3(_2529, _2530, _2531));
    float _4528 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2540 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2529, _2530, _2531));
    float _4539 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2544 = _2521 * _2521;
    float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
    float _2557 = (exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2558 = 1.0 - _2521;
    float _2568 = (0.5 / (((_2457 * ((_2535 * _2558) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2558) + _2521) * _2535))) * _2535;
    float _4550 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2570 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
    float _2580 = (((_2557 * cbLight._m0[_2509].x) * _2570) * _2204) + ((((cbLight._m0[_2428].x * _2170) * _2481) * _2495) * _2217);
    float _2581 = (((_2557 * cbLight._m0[_2509].y) * _2570) * _2204) + ((((cbLight._m0[_2428].y * _2172) * _2481) * _2495) * _2217);
    float _2582 = (((_2557 * cbLight._m0[_2509].z) * _2570) * _2204) + ((((cbLight._m0[_2428].z * _2174) * _2481) * _2495) * _2217);
    float _2638;
    float _2640;
    float _2642;
    if (_2257)
    {
        _2638 = _2580;
        _2640 = _2581;
        _2642 = _2582;
    }
    else
    {
        uint _2644 = _2181 + 2u;
        uint _2648 = _2181 + 10u;
        float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2644].w)) * _739) * 0.949999988079071044921875);
        float _2663 = _2662 * _2662;
        float _2664 = cbLight._m0[_2644].x + _816;
        float _2665 = cbLight._m0[_2644].y + _817;
        float _2666 = cbLight._m0[_2644].z + _818;
        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
        float _2671 = _2670 * _2664;
        float _2672 = _2670 * _2665;
        float _2673 = _2670 * _2666;
        float _2674 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2644].xyz));
        float _4561 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2678 = dot(vec3(_736, _737, _738), vec3(_2671, _2672, _2673));
        float _4572 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2682 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_2671, _2672, _2673));
        float _4583 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2686 = _2663 * _2663;
        float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
        float _2699 = (exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2700 = 1.0 - _2663;
        float _2710 = (0.5 / (((_2457 * ((_2677 * _2700) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2700) + _2663) * _2677))) * _2677;
        float _4594 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2712 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
        float _2713 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2638 = (((_2699 * cbLight._m0[_2648].x) * _2712) * _2713) + _2580;
        _2640 = (((_2699 * cbLight._m0[_2648].y) * _2712) * _2713) + _2581;
        _2642 = (((_2699 * cbLight._m0[_2648].z) * _2712) * _2713) + _2582;
    }
    float _2744;
    float _2746;
    float _2748;
    if (_2366)
    {
        _2744 = _2638;
        _2746 = _2640;
        _2748 = _2642;
    }
    else
    {
        uint _2755 = _2181 + 3u;
        uint _2759 = _2181 + 11u;
        float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2755].w)) * _739) * 0.949999988079071044921875);
        float _2774 = _2773 * _2773;
        float _2775 = cbLight._m0[_2755].x + _816;
        float _2776 = cbLight._m0[_2755].y + _817;
        float _2777 = cbLight._m0[_2755].z + _818;
        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
        float _2782 = _2781 * _2775;
        float _2783 = _2781 * _2776;
        float _2784 = _2781 * _2777;
        float _2785 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2755].xyz));
        float _4610 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2789 = dot(vec3(_736, _737, _738), vec3(_2782, _2783, _2784));
        float _4621 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2793 = dot(vec3(cbLight._m0[_2755].xyz), vec3(_2782, _2783, _2784));
        float _4632 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2797 = _2774 * _2774;
        float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
        float _2810 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2811 = 1.0 - _2774;
        float _2821 = (0.5 / (((_2457 * ((_2788 * _2811) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2811) + _2774) * _2788))) * _2788;
        float _4643 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2823 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
        float _2824 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2744 = (((_2810 * cbLight._m0[_2759].x) * _2823) * _2824) + _2638;
        _2746 = (((_2810 * cbLight._m0[_2759].y) * _2823) * _2824) + _2640;
        _2748 = (((_2810 * cbLight._m0[_2759].z) * _2823) * _2824) + _2642;
    }
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_2179.y == 0u)
    {
        uvec4 _2845 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2846 = _2845.x;
        uint _2857 = uint((float(_2845.y) * floor(float(uint(cbSceneParam._m0[85u].y * _825) / _2846))) + floor(float(uint(cbSceneParam._m0[85u].x * _824) / _2846)));
        float _2867 = (log2(_1957 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2868 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        uint _2871 = uint(isnan(14.0) ? _2868 : (isnan(_2868) ? 14.0 : min(_2868, 14.0)));
        uvec4 _2876 = texelFetch(g_lightClusterGridBuffer, int(((_2871 << 2u) + (_2857 << 6u)) >> 2u));
        uint _2877 = _2876.x;
        uint _2878 = _2845.z;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        if (((((1u << ((_2878 >> 4u) & 15u)) + 4294967295u) & _2877) == 0u) || ((_2878 & 240u) == 0u))
        {
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
        }
        else
        {
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            uint _3108 = 0u;
            uint _3117;
            bool _3118;
            for (;;)
            {
                _3117 = texelFetch(g_lightClassification, int((((_2871 << 5u) + (_2857 << 9u)) + (_3108 << 2u)) >> 2u)).x;
                _3118 = _3117 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3118)
                {
                    frontier_phi_66_pred = _3107;
                    frontier_phi_66_pred_1 = _3106;
                    frontier_phi_66_pred_2 = _3105;
                    frontier_phi_66_pred_3 = _3104;
                    frontier_phi_66_pred_4 = _3103;
                    frontier_phi_66_pred_5 = _3102;
                }
                else
                {
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    uint _3232;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3117;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    for (;;)
                    {
                        uint _3236 = uint(findLSB(_3232)) + (_3108 << 5u);
                        uint _3233 = (_3232 + 4294967295u) & _3232;
                        uint _3238 = _3236 * 48u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3258 = (_3236 * 48u) + 4u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3277 = (_3236 * 48u) + 8u;
                        vec3 _3288 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x));
                        float _3292 = _3252.x - _1955;
                        float _3293 = _3252.y - _1956;
                        float _3294 = _3252.z - _1957;
                        float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                        float _3298 = inversesqrt(_3295);
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3302 = dot(vec3(_843, _846, _849), vec3(_3299, _3300, _3301));
                        float _3307 = 1.0 - (_3295 * _3252.w);
                        float _4669 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3309 = sqrt(_3295) * _3271.w;
                        float _3312 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3302) + _3313;
                        float _3319 = _3309 * _3309;
                        float _3323 = ((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3308) / ((_3319 * 0.699999988079071044921875) + 1.0);
                        float _3327 = (-0.0) - _1955;
                        float _3328 = (-0.0) - _1956;
                        float _3329 = (-0.0) - _1957;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3343 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                        float _3344 = 1.0 - _903;
                        float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                        float _3352 = _3351 * _3351;
                        float _3353 = _3352 * _3352;
                        float _3354 = _3334 + _3299;
                        float _3355 = _3335 + _3300;
                        float _3356 = _3336 + _3301;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3364 = dot(vec3(_843, _846, _849), vec3(_3334, _3335, _3336));
                        float _4685 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3367 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3368 = dot(vec3(_843, _846, _849), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                        float _4696 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3371 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                        float _3376 = _3312 * _3352;
                        float _3377 = _3376 * _3376;
                        float _3380 = ((1.0 - _3377) * _3302) + _3377;
                        float _4707 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3381 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                        float _3382 = 1.0 - _3352;
                        float _3392 = (0.5 / (((_3381 * ((_3367 * _3382) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3352) * _3367))) * _3381;
                        float _4718 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3403 = (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) / ((_3375 * _3375) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125))) * _3308;
                        _3161 = (_3323 * _3271.x) + _3229;
                        _3162 = (_3323 * _3271.y) + _3230;
                        _3163 = (_3323 * _3271.z) + _3231;
                        _3158 = (_3403 * _3288.x) + _3226;
                        _3159 = (_3403 * _3288.y) + _3227;
                        _3160 = (_3403 * _3288.z) + _3228;
                        if (_3233 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3233;
                        }
                    }
                    frontier_phi_66_pred = _3163;
                    frontier_phi_66_pred_1 = _3162;
                    frontier_phi_66_pred_2 = _3161;
                    frontier_phi_66_pred_3 = _3160;
                    frontier_phi_66_pred_4 = _3159;
                    frontier_phi_66_pred_5 = _3158;
                }
                _2968 = frontier_phi_66_pred;
                _2966 = frontier_phi_66_pred_1;
                _2964 = frontier_phi_66_pred_2;
                _2962 = frontier_phi_66_pred_3;
                _2960 = frontier_phi_66_pred_4;
                _2958 = frontier_phi_66_pred_5;
                uint _3109 = _3108 + 1u;
                if (_3109 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3102 = _2958;
                    _3103 = _2960;
                    _3104 = _2962;
                    _3105 = _2964;
                    _3106 = _2966;
                    _3107 = _2968;
                    _3108 = _3109;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
        }
        uvec4 _2971 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2972 = _2971.z;
        uint _2974 = (_2972 >> 8u) & 15u;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((4294967295u << _2974) & _2877) == 0u)
        {
            _3070 = _2957;
            _3072 = _2959;
            _3074 = _2961;
            _3076 = _2963;
            _3078 = _2965;
            _3080 = _2967;
        }
        else
        {
            float _3095 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
            float _3096 = _3095 * _1955;
            float _3097 = _3095 * _1956;
            float _3098 = _3095 * _1957;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2974 < ((_2972 >> 12u) & 15u))
            {
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3209 = _2957;
                float _3210 = _2959;
                float _3211 = _2961;
                float _3212 = _2963;
                float _3213 = _2965;
                float _3214 = _2967;
                uint _3215 = _2974;
                uint _3224;
                bool _3225;
                for (;;)
                {
                    _3224 = texelFetch(g_lightClassification, int((((_2871 << 5u) + (_2857 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                    _3225 = _3224 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3225)
                    {
                        frontier_phi_72_pred = _3214;
                        frontier_phi_72_pred_1 = _3213;
                        frontier_phi_72_pred_2 = _3212;
                        frontier_phi_72_pred_3 = _3211;
                        frontier_phi_72_pred_4 = _3210;
                        frontier_phi_72_pred_5 = _3209;
                    }
                    else
                    {
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3421 = _3209;
                        float _3422 = _3210;
                        float _3423 = _3211;
                        float _3424 = _3212;
                        float _3425 = _3213;
                        float _3426 = _3214;
                        uint _3427 = _3224;
                        uint _3428;
                        vec4 _3453;
                        float _3454;
                        vec4 _3469;
                        vec3 _3481;
                        vec4 _3496;
                        vec4 _3511;
                        float _3557;
                        bool _3558;
                        for (;;)
                        {
                            uint _3438 = ((_3215 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3427));
                            _3428 = (_3427 + 4294967295u) & _3427;
                            uint _3440 = _3438 * 40u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            _3454 = _3453.w;
                            uint _3456 = (_3438 * 40u) + 4u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3438 * 40u) + 8u;
                            _3481 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x));
                            uint _3483 = (_3438 * 40u) + 16u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3438 * 40u) + 20u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3513 = (_3438 * 40u) + 24u;
                            vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3532 = (_3438 * 40u) + 28u;
                            vec4 _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            _3557 = fma(_1957, _3545.z, fma(_1956, _3545.y, _3545.x * _1955)) + _3545.w;
                            _3558 = !((fma(_1957, _3526.z, fma(_1956, _3526.y, _3526.x * _1955)) + _3526.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3558)
                            {
                                float _3585 = _3453.x - _1955;
                                float _3586 = _3453.y - _1956;
                                float _3587 = _3453.z - _1957;
                                float _3588 = dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587));
                                float _3591 = inversesqrt(_3588);
                                float _3592 = _3591 * _3585;
                                float _3593 = _3591 * _3586;
                                float _3594 = _3591 * _3587;
                                float _3598 = 1.0 - (_3588 / (_3454 * _3454));
                                float _4729 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3603 = sqrt(_3588) * _3469.w;
                                float _3605 = 1.39999997615814208984375 / (_3603 + 1.39999997615814208984375);
                                float _3606 = _3605 * _3605;
                                float _3609 = ((1.0 - _3606) * dot(vec3(_3592, _3593, _3594), vec3(_843, _846, _849))) + _3606;
                                float _3612 = _3603 * _3603;
                                float _3616 = (fma(_1957, _3496.z, fma(_1956, _3496.y, _3496.x * _1955)) + _3496.w) / _3557;
                                float _3617 = (fma(_1957, _3511.z, fma(_1956, _3511.y, _3511.x * _1955)) + _3511.w) / _3557;
                                float _3621 = 1.0 - dot(vec2(_3616, _3617), vec2(_3616, _3617));
                                float _4745 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3623 = _3622 * (((isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0))) * _3599) / ((_3612 * 0.699999988079071044921875) + 1.0));
                                float _3635 = exp2(log2(1.0 / ((_3612 * 3.5) + 5.0)) * 0.25);
                                float _3636 = 1.0 - _903;
                                float _3643 = sqrt(1.0 - ((1.0 - (_3636 * _3636)) * (1.0 - (_3635 * _3635))));
                                float _3644 = _3643 * _3643;
                                float _3645 = _3644 * _3644;
                                float _3646 = _3592 - _3096;
                                float _3647 = _3593 - _3097;
                                float _3648 = _3594 - _3098;
                                float _3652 = inversesqrt(dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648)));
                                float _3656 = dot(vec3(_843, _846, _849), vec3((-0.0) - _3096, (-0.0) - _3097, (-0.0) - _3098));
                                float _4756 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3659 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3660 = dot(vec3(_843, _846, _849), vec3(_3652 * _3646, _3652 * _3647, _3652 * _3648));
                                float _4767 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3663 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3667 = ((_3663 * _3663) * (_3645 + (-1.0))) + 1.0;
                                float _3668 = _3605 * _3644;
                                float _3669 = _3668 * _3668;
                                float _3675 = ((1.0 - _3669) * dot(vec3(_843, _846, _849), vec3(_3592, _3593, _3594))) + _3669;
                                float _4778 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3677 = 1.0 - _3644;
                                float _3687 = (0.5 / (((_3676 * ((_3659 * _3677) + _3644)) + 9.9999999392252902907785028219223e-09) + (((_3676 * _3677) + _3644) * _3659))) * _3676;
                                float _4789 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3697 = (_3622 * _3599) * (((_3645 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3667 * _3667) * ((_3612 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3623 * _3469.y;
                                frontier_phi_78_pred_1 = _3623 * _3469.x;
                                frontier_phi_78_pred_2 = _3697 * _3481.z;
                                frontier_phi_78_pred_3 = _3697 * _3481.y;
                                frontier_phi_78_pred_4 = _3697 * _3481.x;
                                frontier_phi_78_pred_5 = _3623 * _3469.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3705 = frontier_phi_78_pred;
                            _3704 = frontier_phi_78_pred_1;
                            _3703 = frontier_phi_78_pred_2;
                            _3702 = frontier_phi_78_pred_3;
                            _3701 = frontier_phi_78_pred_4;
                            _3706 = frontier_phi_78_pred_5;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            if (_3428 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3428;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3413;
                        frontier_phi_72_pred_1 = _3412;
                        frontier_phi_72_pred_2 = _3411;
                        frontier_phi_72_pred_3 = _3410;
                        frontier_phi_72_pred_4 = _3409;
                        frontier_phi_72_pred_5 = _3408;
                    }
                    _3081 = frontier_phi_72_pred;
                    _3079 = frontier_phi_72_pred_1;
                    _3077 = frontier_phi_72_pred_2;
                    _3075 = frontier_phi_72_pred_3;
                    _3073 = frontier_phi_72_pred_4;
                    _3071 = frontier_phi_72_pred_5;
                    uint _3216 = _3215 + 1u;
                    if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3209 = _3071;
                        _3210 = _3073;
                        _3211 = _3075;
                        _3212 = _3077;
                        _3213 = _3079;
                        _3214 = _3081;
                        _3215 = _3216;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3081;
                frontier_phi_60_61_ladder_1 = _3079;
                frontier_phi_60_61_ladder_2 = _3075;
                frontier_phi_60_61_ladder_3 = _3073;
                frontier_phi_60_61_ladder_4 = _3071;
                frontier_phi_60_61_ladder_5 = _3077;
            }
            else
            {
                frontier_phi_60_61_ladder = _2967;
                frontier_phi_60_61_ladder_1 = _2965;
                frontier_phi_60_61_ladder_2 = _2961;
                frontier_phi_60_61_ladder_3 = _2959;
                frontier_phi_60_61_ladder_4 = _2957;
                frontier_phi_60_61_ladder_5 = _2963;
            }
            _3070 = frontier_phi_60_61_ladder_4;
            _3072 = frontier_phi_60_61_ladder_3;
            _3074 = frontier_phi_60_61_ladder_2;
            _3076 = frontier_phi_60_61_ladder_5;
            _3078 = frontier_phi_60_61_ladder_1;
            _3080 = frontier_phi_60_61_ladder;
        }
        float _3085 = isnan(1.0) ? _887 : (isnan(_887) ? 1.0 : min(_887, 1.0));
        _2890 = (_3085 * _3076) + _2421;
        _2892 = (_3085 * _3078) + _2423;
        _2894 = (_3085 * _3080) + _2425;
        _2896 = ((_3070 * 0.039999999105930328369140625) * _3085) + _2744;
        _2898 = ((_3072 * 0.039999999105930328369140625) * _3085) + _2746;
        _2900 = ((_3074 * 0.039999999105930328369140625) * _3085) + _2748;
    }
    else
    {
        _2890 = _2421;
        _2892 = _2423;
        _2894 = _2425;
        _2896 = _2744;
        _2898 = _2746;
        _2900 = _2748;
    }
    float _4805 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4816 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4827 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    uint _2920 = _240 + 6u;
    float _2928 = _824 / cbSceneParam._m0[86u].x;
    float _2929 = _825 / cbSceneParam._m0[86u].y;
    vec4 _2943 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2928, _2929, (log2((isnan(cbSceneParam._m0[77u].w) ? _757 : (isnan(_757) ? cbSceneParam._m0[77u].w : min(_757, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2945 = _2943.x;
    float _2946 = _2943.y;
    float _2947 = _2943.z;
    float _2948 = _2943.w;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_757 > cbSceneParam._m0[78u].w)
    {
        float _2982 = isnan(_757) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _757 : min(cbSceneParam._m0[80u].w, _757));
        float _2983 = _2982 / _757;
        float _2994 = _2983 * _809;
        float _2995 = _810 * _2983;
        float _2996 = (-0.0) - _2995;
        float _2998 = _2983 * _811;
        float _3000 = (cbSceneParam._m0[77u].w * _2996) / _2982;
        float _3001 = _3000 + cbSceneParam._m0[79u].w;
        float _3002 = cbSceneParam._m0[79u].w - _2995;
        float _3008 = sqrt(((_2994 * _2994) + (_2995 * _2995)) + (_2998 * _2998));
        float _3011 = (1.0 - (cbSceneParam._m0[77u].w / _2982)) * _3008;
        float _3016 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3018 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3171;
        if (abs((_2996 - _3000) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3171 = ((((_3001 > 0.0) ? exp2(_3016 * _3001) : (2.0 - exp2(_3018 * _3001))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3011;
        }
        else
        {
            float _3131 = 1.0 / cbSceneParam._m0[80u].x;
            float _3132 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : max(_3001, _3002));
            float _3133 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : min(_3001, _3002));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            _3171 = ((abs(_3008 / _2996) * cbSceneParam._m0[80u].y) * ((((_3142 - _3143) * 2.0) - ((exp2(_3016 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0)))) - exp2(_3016 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))))) * _3131)) - ((exp2(_3018 * _3142) - exp2(_3018 * _3143)) * _3131))) + (_3011 * cbSceneParam._m0[80u].z);
        }
        vec4 _3173 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2928, _2929, 1.0), 0.0);
        float _3182 = exp2((_3171 * (-1.44269502162933349609375)) * (1.0 - _3173.w));
        float _3183 = log2(_3182);
        float _3199 = log2(_2948);
        _3020 = (exp2(_3199 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].x)) * _3173.x) / cbSceneParam._m0[78u].x)) + _2945;
        _3022 = (exp2(_3199 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].y)) * _3173.y) / cbSceneParam._m0[78u].y)) + _2946;
        _3024 = (exp2(_3199 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].z)) * _3173.z) / cbSceneParam._m0[78u].z)) + _2947;
        _3026 = _3182 * _2948;
    }
    else
    {
        _3020 = _2945;
        _3022 = _2946;
        _3024 = _2947;
        _3026 = _2948;
    }
    float _3038 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3039 = _3038 == 3.0;
    float _3040 = log2(_3026);
    float _3047 = exp2(_3040 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2890 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _887))) + ((_2896 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _3048 = exp2(_3040 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2892 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _887))) + ((_2898 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _3049 = exp2(_3040 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2894 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _887))) + ((_2900 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _3058 = (_3038 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3058 * (_3039 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.y = _3058 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3022)));
    SV_Target.z = _3058 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3024)));
    SV_Target.w = cbInstanceData._m0[_2920].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2920].w;
}


