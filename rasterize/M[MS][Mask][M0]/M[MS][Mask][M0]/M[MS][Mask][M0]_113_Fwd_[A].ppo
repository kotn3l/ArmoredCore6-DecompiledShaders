#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1458;
float _3815;
float _3816;
float _3817;
float _3818;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3827 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3838 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3849 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[24u].z) + _432) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3860 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _457 = (_450 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _458 = (_450 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _459 = (_450 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3871 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _297) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _298) + cbTextureTilingScale._m0[24u].w));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _569 = _567.x;
    float _579 = dot(vec4(_569, _567.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _591 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _380.z) * 2.0) - ((((_569 - _579) * cbMtdParam._m0[24u].z) + _579) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3882 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _599 = (_592 * ((_550.x * cbMtdParam._m0[14u].x) - _530)) + _530;
    float _600 = (_592 * ((_550.y * cbMtdParam._m0[14u].y) - _531)) + _531;
    float _601 = (_592 * ((_550.z * cbMtdParam._m0[14u].z) - _532)) + _532;
    float _605 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _599;
    float _608 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _600;
    float _611 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _601;
    float _618 = ((_599 - _605) * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) + _605;
    float _619 = ((_600 - _608) * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) + _608;
    float _620 = ((_601 - _611) * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) + _611;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _679 = _677.x;
    float _680 = _677.y;
    float _681 = _677.z;
    float _688 = ((_660.x - _679) * _450) + _679;
    float _689 = ((_660.y - _680) * _450) + _680;
    float _690 = ((_660.z - _681) * _450) + _681;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _713 = ((_702.x - _688) * _523) + _688;
    float _714 = ((_702.y - _689) * _523) + _689;
    float _715 = ((_702.z - _690) * _523) + _690;
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _297) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _298) + cbTextureTilingScale._m0[23u].w));
    float _740 = ((_727.z - _715) * _592) + _715;
    float _743 = ((((_727.x - _713) * _592) + _713) * 2.0) + (-1.0);
    float _744 = ((((_727.y - _714) * _592) + _714) * 2.0) + (-1.0);
    float _745 = dot(vec2(_743, _744), vec2(_743, _744));
    float _3893 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _750 = sqrt(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))));
    vec4 _764 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _789 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _791 = _789.x;
    float _792 = 1.0 - _791;
    float _805 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_791 - _792) * cbMtdParam._m0[24u].w) + _792) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3904 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _806 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _813 = (_806 * (cbMtdParam._m0[17u].x - _618)) + _618;
    float _814 = (_806 * (cbMtdParam._m0[17u].y - _619)) + _619;
    float _815 = (_806 * (cbMtdParam._m0[17u].z - _620)) + _620;
    float _820 = (((_637.z - _740) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _740;
    float _824 = ((_764.z - _820) * cbMtdParam._m0[19u].w) + _820;
    vec4 _837 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _844 = (_837.x * 2.0) + (-1.0);
    float _845 = (_837.y * 2.0) + (-1.0);
    float _846 = dot(vec2(_844, _845), vec2(_844, _845));
    float _3915 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _854 = (_806 * (_837.z - _824)) + _824;
    float _863 = (_743 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_637.x * 2.0) + (-1.0)))) + (((_764.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _864 = (_744 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_637.y * 2.0) + (-1.0)))) + (((_764.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _876 = (((_844 - _863) + (cbMtdParam._m0[21u].x * _863)) * _806) + _863;
    float _877 = (((_845 - _864) + (cbMtdParam._m0[21u].x * _864)) * _806) + _864;
    float _878 = (_806 * (sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) - _750)) + _750;
    float _882 = cbMtdParam._m0[22u].x + _764.w;
    float _885 = fma(_878, _244 * NORMAL.x, fma(_877, _251 * TANGENT.x, (_237 * _229) * _876));
    float _888 = fma(_878, _244 * NORMAL.y, fma(_877, _251 * TANGENT.y, (_237 * _230) * _876));
    float _891 = fma(_878, _244 * NORMAL.z, fma(_877, _251 * TANGENT.z, (_237 * _231) * _876));
    float _895 = inversesqrt(dot(vec3(_885, _888, _891), vec3(_885, _888, _891)));
    float _896 = _895 * _885;
    float _897 = _895 * _888;
    float _898 = _895 * _891;
    float _3926 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _899 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _3948 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _3959 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _3970 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _917 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _969 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _959);
    float _970 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _959);
    float _971 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _959);
    float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
    float _976 = _969 * _975;
    float _977 = _970 * _975;
    float _978 = _971 * _975;
    vec4 _983 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _985 = _983.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1139 = sqrt(((_969 * _969) + (_970 * _970)) + (_971 * _971));
        float _1145 = (cbMatDynParam._m0[5u].x * _1139) + cbMatDynParam._m0[5u].y;
        float _3981 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1150 = (cbMatDynParam._m0[5u].z * _1139) + cbMatDynParam._m0[5u].w;
        float _3992 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) - _1146)) + _1146) < ((_985 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _996 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _997 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1015 = fma(_898, cbSceneParam._m0[5u].z, fma(_897, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _896));
    float _1018 = fma(_898, cbSceneParam._m0[6u].z, fma(_897, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _896));
    float _1021 = fma(_898, cbSceneParam._m0[7u].z, fma(_897, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _896));
    uint _1034 = _278 + 9u;
    uint _1035 = _1034 + uint(cbMatDynParam._m0[0u].w);
    float _1041 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * cbInstanceData._m0[_1035].x;
    float _1042 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * cbInstanceData._m0[_1035].y;
    float _1043 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_1035].z;
    float _4003 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    vec4 _1055 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _996, cbSceneParam._m0[86u].y * _997));
    float _1059 = ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * TEXCOORD_5.w) * _1055.x;
    float _1060 = dot(vec3(_896, _897, _898), vec3(_976, _977, _978));
    float _1063 = _1060 * 2.0;
    float _1067 = (_1063 * _896) - _976;
    float _1068 = (_1063 * _897) - _977;
    float _1069 = (_1063 * _898) - _978;
    float _1073 = abs(dot(vec3(_976, _977, _978), vec3(_896, _897, _898)));
    float _4036 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1075 = sqrt(_899);
    float _1088 = exp2((_1075 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1075 * 3.0));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1457;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1182 = fma(_1128, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120));
        float _1186 = fma(_1128, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120));
        float _1190 = fma(_1128, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120));
        float _1215 = _1120 + _896;
        float _1216 = _1124 + _897;
        float _1217 = _1128 + _898;
        float _1227 = fma(_1217, cbModelParam._m0[26u].z, fma(_1216, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215)) - _1182;
        float _1228 = fma(_1217, cbModelParam._m0[27u].z, fma(_1216, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215)) - _1186;
        float _1229 = fma(_1217, cbModelParam._m0[28u].z, fma(_1216, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215)) - _1190;
        float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
        float _1246 = ((_1233 * _1227) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1182 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1233 * _1228) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1186 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1233 * _1229) / cbModelParam._m0[34u].z) + ((((((_1190 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        float _1285 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1251.x + (-0.5));
        float _1287 = _1285 * (_1251.y + (-0.5));
        float _1288 = _1285 * (_1251.z + (-0.5));
        float _1295 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1258.x + (-0.5));
        float _1297 = _1295 * (_1258.y + (-0.5));
        float _1298 = _1295 * (_1258.z + (-0.5));
        float _1305 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1265.x + (-0.5));
        float _1307 = _1305 * (_1265.y + (-0.5));
        float _1308 = _1305 * (_1265.z + (-0.5));
        float _1315 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1272.x + (-0.5));
        float _1317 = _1315 * (_1272.y + (-0.5));
        float _1318 = _1315 * (_1272.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1339 = (dot(vec3(_896, _897, _898), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1349 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4084 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1351 + 1.0))) + _1356) * _1319;
        float _1366 = _1287 * 0.5;
        float _1367 = _1297 * 0.5;
        float _1368 = _1307 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_896, _897, _898), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4117 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1393 + 1.0))) + _1398) * _1320;
        float _1408 = _1288 * 0.5;
        float _1409 = _1298 * 0.5;
        float _1410 = _1308 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_896, _897, _898), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4150 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1435 + 1.0))) + _1440) * _1321;
        _1457 = _1288;
        _1459 = _1287;
        _1460 = _1286;
        _1461 = _1298;
        _1462 = _1297;
        _1463 = _1296;
        _1464 = _1308;
        _1465 = _1307;
        _1466 = _1306;
        _1467 = _1321;
        _1468 = _1320;
        _1469 = _1319;
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1458;
        _1459 = _1458;
        _1460 = _1458;
        _1461 = _1458;
        _1462 = _1458;
        _1463 = _1458;
        _1464 = _1458;
        _1465 = _1458;
        _1466 = _1458;
        _1467 = _1458;
        _1468 = _1458;
        _1469 = _1458;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1498 = fma(_1128, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120));
        float _1502 = fma(_1128, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120));
        float _1506 = fma(_1128, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120));
        float _1529 = _1120 + _896;
        float _1530 = _1124 + _897;
        float _1531 = _1128 + _898;
        float _1541 = fma(_1531, cbModelParam._m0[30u].z, fma(_1530, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1529)) - _1498;
        float _1542 = fma(_1531, cbModelParam._m0[31u].z, fma(_1530, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1529)) - _1502;
        float _1543 = fma(_1531, cbModelParam._m0[32u].z, fma(_1530, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1529)) - _1506;
        float _1547 = inversesqrt(dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543)));
        float _1560 = ((_1547 * _1541) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1498 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1547 * _1542) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1502 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1547 * _1543) / cbModelParam._m0[35u].z) + ((((((_1506 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        float _1597 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1564.x + (-0.5));
        float _1599 = _1597 * (_1564.y + (-0.5));
        float _1600 = _1597 * (_1564.z + (-0.5));
        float _1607 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1571.x + (-0.5));
        float _1609 = _1607 * (_1571.y + (-0.5));
        float _1610 = _1607 * (_1571.z + (-0.5));
        float _1617 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1578.x + (-0.5));
        float _1619 = _1617 * (_1578.y + (-0.5));
        float _1620 = _1617 * (_1578.z + (-0.5));
        float _1627 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1585.x + (-0.5));
        float _1629 = _1627 * (_1585.y + (-0.5));
        float _1630 = _1627 * (_1585.z + (-0.5));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = _1598 * 0.5;
        float _1635 = _1608 * 0.5;
        float _1636 = _1618 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_896, _897, _898), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4213 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1661 + 1.0))) + _1666) * _1631;
        float _1676 = _1599 * 0.5;
        float _1677 = _1609 * 0.5;
        float _1678 = _1619 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_896, _897, _898), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4246 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1703 + 1.0))) + _1708) * _1632;
        float _1718 = _1600 * 0.5;
        float _1719 = _1610 * 0.5;
        float _1720 = _1620 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_896, _897, _898), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4279 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1745 + 1.0))) + _1750) * _1633;
        _1767 = _1600;
        _1768 = _1599;
        _1769 = _1598;
        _1770 = _1610;
        _1771 = _1609;
        _1772 = _1608;
        _1773 = _1620;
        _1774 = _1619;
        _1775 = _1618;
        _1776 = _1633;
        _1777 = _1632;
        _1778 = _1631;
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
    }
    else
    {
        _1767 = _1458;
        _1768 = _1458;
        _1769 = _1458;
        _1770 = _1458;
        _1771 = _1458;
        _1772 = _1458;
        _1773 = _1458;
        _1774 = _1458;
        _1775 = _1458;
        _1776 = _1458;
        _1777 = _1458;
        _1778 = _1458;
        _1779 = 0.0;
        _1780 = 0.0;
        _1781 = 0.0;
    }
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1470)) + _1470;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1471)) + _1471;
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1472)) + _1472;
    float _1814 = fma(_1793, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1791 * cbSceneParam._m0[89u].x));
    float _1817 = fma(_1793, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1791 * cbSceneParam._m0[90u].x));
    float _1820 = fma(_1793, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1791));
    float _1835 = _1067 * 0.5;
    float _1836 = _1068 * 0.5;
    float _1837 = _1069 * 0.5;
    float _1838 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1841 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1844 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1878;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1851 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1457, _1461, _1464, _1467));
        float _1855 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1859 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1460, _1463, _1466, _1469));
        float _1866 = dot(vec4(cbModelParam._m0[39u]), vec4(_1835, _1836, _1837, 1.0));
        _1878 = dot(vec3(isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1866) ? 0.0 : (isnan(0.0) ? _1866 : max(0.0, _1866))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1878 = 1.0;
    }
    float _1889;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1880 = dot(vec4(cbModelParam._m0[40u]), vec4(_1835, _1836, _1837, 1.0));
        _1889 = dot(vec3(isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1880) ? 0.0 : (isnan(0.0) ? _1880 : max(0.0, _1880))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1889 = 1.0;
    }
    float _1893 = (_1889 * cbModelParam._m0[1u].x) + (_1878 * (1.0 - cbModelParam._m0[1u].x));
    float _1903 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _899);
    float _1904 = isnan(_1903) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1903 : min(cbModelParam._m0[25u].z, _1903));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1951 = fma(_1128, cbModelParam._m0[13u].z, fma(_1124, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120)) + cbModelParam._m0[13u].w;
        float _1955 = fma(_1128, cbModelParam._m0[14u].z, fma(_1124, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120)) + cbModelParam._m0[14u].w;
        float _1959 = fma(_1128, cbModelParam._m0[15u].z, fma(_1124, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120)) + cbModelParam._m0[15u].w;
        float _1962 = fma(_1069, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067));
        float _1965 = fma(_1069, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067));
        float _1968 = fma(_1069, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067));
        float _1996;
        if (_1962 > 0.0)
        {
            _1996 = abs((1.0 - _1951) / _1962);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1951 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1996 = frontier_phi_17_15_ladder;
        }
        float _2197;
        if (_1965 > 0.0)
        {
            _2197 = abs((1.0 - _1955) / _1965);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1955 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2197 = frontier_phi_26_22_ladder;
        }
        float _2440;
        if (_1968 > 0.0)
        {
            _2440 = abs((1.0 - _1959) / _1968);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1959 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2440 = frontier_phi_38_33_ladder;
        }
        float _2442 = isnan(_2197) ? _1996 : (isnan(_1996) ? _2197 : min(_1996, _2197));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1962) + _1951;
        float _2448 = (_2443 * _1965) + _1955;
        float _2449 = (_2443 * _1968) + _1959;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2450;
        float _2454 = _2450 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 > _2454) || ((_2448 < _2452) || ((_2447 < _2452) || (_2447 > _2454))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2449, cbModelParam._m0[9u].z, fma(_2448, cbModelParam._m0[9u].y, _2447 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2449, cbModelParam._m0[10u].z, fma(_2448, cbModelParam._m0[10u].y, _2447 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2449, cbModelParam._m0[11u].z, fma(_2448, cbModelParam._m0[11u].y, _2447 * cbModelParam._m0[11u].x))), _1904);
            frontier_phi_16_38_ladder = _2573.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2573.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2573.x * cbModelParam._m0[1u].y;
        }
        _1984 = frontier_phi_16_38_ladder_2;
        _1986 = frontier_phi_16_38_ladder_1;
        _1988 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1972 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1067, _1068, _1069), _1904);
        _1984 = _1972.x * cbModelParam._m0[1u].y;
        _1986 = _1972.y * cbModelParam._m0[1u].y;
        _1988 = _1972.z * cbModelParam._m0[1u].y;
    }
    float _1992 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _899);
    float _1993 = isnan(_1992) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1992 : min(cbModelParam._m0[25u].w, _1992));
    float _2083;
    float _2085;
    float _2087;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2047 = fma(_1128, cbModelParam._m0[21u].z, fma(_1124, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120)) + cbModelParam._m0[21u].w;
        float _2051 = fma(_1128, cbModelParam._m0[22u].z, fma(_1124, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120)) + cbModelParam._m0[22u].w;
        float _2055 = fma(_1128, cbModelParam._m0[23u].z, fma(_1124, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120)) + cbModelParam._m0[23u].w;
        float _2058 = fma(_1069, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067));
        float _2061 = fma(_1069, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067));
        float _2064 = fma(_1069, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067));
        float _2202;
        if (_2058 > 0.0)
        {
            _2202 = abs((1.0 - _2047) / _2058);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2047 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2202 = frontier_phi_28_24_ladder;
        }
        float _2467;
        if (_2061 > 0.0)
        {
            _2467 = abs((1.0 - _2051) / _2061);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2051 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2467 = frontier_phi_40_35_ladder;
        }
        float _2672;
        if (_2064 > 0.0)
        {
            _2672 = abs((1.0 - _2055) / _2064);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2055 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2672 = frontier_phi_49_46_ladder;
        }
        float _2674 = isnan(_2467) ? _2202 : (isnan(_2202) ? _2467 : min(_2202, _2467));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _2058) + _2047;
        float _2680 = (_2675 * _2061) + _2051;
        float _2681 = (_2675 * _2064) + _2055;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1993);
            frontier_phi_25_49_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _2083 = frontier_phi_25_49_ladder_2;
        _2085 = frontier_phi_25_49_ladder_1;
        _2087 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2067 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1067, _1068, _1069), _1993);
        _2083 = _2067.x * cbModelParam._m0[1u].z;
        _2085 = _2067.y * cbModelParam._m0[1u].z;
        _2087 = _2067.z * cbModelParam._m0[1u].z;
    }
    float _2099 = ((((1.0 - _1088) * ((_1075 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1088 * _1075)) * _1059;
    float _2100 = _2099 * ((cbModelParam._m0[1u].w * (_2083 - _1984)) + _1984);
    float _2101 = _2099 * ((cbModelParam._m0[1u].w * (_2085 - _1986)) + _1986);
    float _2102 = _2099 * ((cbModelParam._m0[1u].w * (_2087 - _1988)) + _1988);
    float _2105 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2101, cbSceneParam._m0[89u].y, _2100 * cbSceneParam._m0[89u].x));
    float _2108 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2101, cbSceneParam._m0[90u].y, _2100 * cbSceneParam._m0[90u].x));
    float _2111 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2101, cbSceneParam._m0[91u].y, _2100 * cbSceneParam._m0[91u].x));
    uvec4 _2121 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2123 = _2121.x * 14u;
    uint _2124 = _2123 + 13u;
    float _2131 = _1059 + (-1.0);
    float _2136 = (cbLight._m0[_2124].x * _2131) + 1.0;
    float _2137 = (cbLight._m0[_2124].y * _2131) + 1.0;
    float _2138 = (cbLight._m0[_2124].z * _2131) + 1.0;
    float _2139 = (cbLight._m0[_2124].w * _2131) + 1.0;
    uint _2140 = _2123 + 5u;
    float _2146 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
    uint _2150 = _2123 + 4u;
    float _2156 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2160 = _2123 | 1u;
    float _2171 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_896, _897, _898));
    float _2174 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_896, _897, _898));
    float _4415 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _4426 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2179 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * 0.3183098733425140380859375;
    float _2181 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * 0.3183098733425140380859375;
    float _2188 = ((cbLight._m0[_2140].x * _2146) * _2181) + ((cbLight._m0[_2150].x * _2156) * _2179);
    float _2189 = ((_2146 * cbLight._m0[_2140].y) * _2181) + ((_2156 * cbLight._m0[_2150].y) * _2179);
    float _2190 = ((_2146 * cbLight._m0[_2140].z) * _2181) + ((_2156 * cbLight._m0[_2150].z) * _2179);
    uvec4 _2194 = floatBitsToUint(cbLight._m0[_2123 + 12u]);
    bool _2196 = _2194.x == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2196)
    {
        _2207 = _2188;
        _2209 = _2189;
        _2211 = _2190;
    }
    else
    {
        uint _2215 = _2123 + 6u;
        float _2231 = (dot(vec3(cbLight._m0[_2123 + 2u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2232 = _2231 * _2231;
        float _4437 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2233 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2234 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2207 = (((cbLight._m0[_2215].x * 0.3183098733425140380859375) * _2233) * _2234) + _2188;
        _2209 = (((cbLight._m0[_2215].y * 0.3183098733425140380859375) * _2233) * _2234) + _2189;
        _2211 = (((cbLight._m0[_2215].z * 0.3183098733425140380859375) * _2233) * _2234) + _2190;
    }
    bool _2214 = _2194.y == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2214)
    {
        _2252 = _2207;
        _2254 = _2209;
        _2256 = _2211;
    }
    else
    {
        uint _2411 = _2123 + 7u;
        float _2427 = (dot(vec3(cbLight._m0[_2123 + 3u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4453 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2430 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2252 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2207;
        _2254 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2209;
        _2256 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2211;
    }
    uint _2259 = _2123 + 8u;
    float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _899) * 0.949999988079071044921875);
    float _2273 = _2272 * _2272;
    float _2274 = cbLight._m0[_2123].x + _976;
    float _2275 = cbLight._m0[_2123].y + _977;
    float _2276 = cbLight._m0[_2123].z + _978;
    float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
    float _2281 = _2280 * _2274;
    float _2282 = _2280 * _2275;
    float _2283 = _2280 * _2276;
    float _2284 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2123].xyz));
    float _4469 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _4480 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2288 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2289 = dot(vec3(_896, _897, _898), vec3(_2281, _2282, _2283));
    float _4491 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2281, _2282, _2283));
    float _4502 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2273 * _2273;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2312 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2313 = 1.0 - _2273;
    float _2324 = (0.5 / (((_2288 * ((_2287 * _2313) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2313) + _2273) * _2287))) * _2287;
    float _4513 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2326 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    uint _2337 = _2123 + 9u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _899) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2160].x + _976;
    float _2351 = cbLight._m0[_2160].y + _977;
    float _2352 = cbLight._m0[_2160].z + _978;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2160].xyz));
    float _4524 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2364 = dot(vec3(_896, _897, _898), vec3(_2357, _2358, _2359));
    float _4535 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2357, _2358, _2359));
    float _4546 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2349 * _2349;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2385 = (exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2386 = 1.0 - _2349;
    float _2396 = (0.5 / (((_2288 * ((_2363 * _2386) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2386) + _2349) * _2363))) * _2363;
    float _4557 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    float _2408 = (((_2385 * cbLight._m0[_2337].x) * _2398) * _2146) + (((_2312 * cbLight._m0[_2259].x) * _2326) * _2156);
    float _2409 = (((_2385 * cbLight._m0[_2337].y) * _2398) * _2146) + (((_2312 * cbLight._m0[_2259].y) * _2326) * _2156);
    float _2410 = (((_2385 * cbLight._m0[_2337].z) * _2398) * _2146) + (((_2312 * cbLight._m0[_2259].z) * _2326) * _2156);
    float _2472;
    float _2474;
    float _2476;
    if (_2196)
    {
        _2472 = _2408;
        _2474 = _2409;
        _2476 = _2410;
    }
    else
    {
        uint _2478 = _2123 + 2u;
        uint _2482 = _2123 + 10u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _899) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _976;
        float _2499 = cbLight._m0[_2478].y + _977;
        float _2500 = cbLight._m0[_2478].z + _978;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2478].xyz));
        float _4568 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2512 = dot(vec3(_896, _897, _898), vec3(_2505, _2506, _2507));
        float _4579 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4590 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2533 = (exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2534 = 1.0 - _2497;
        float _2544 = (0.5 / (((_2288 * ((_2511 * _2534) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2534) + _2497) * _2511))) * _2511;
        float _4601 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2472 = (((_2533 * cbLight._m0[_2482].x) * _2546) * _2547) + _2408;
        _2474 = (((_2533 * cbLight._m0[_2482].y) * _2546) * _2547) + _2409;
        _2476 = (((_2533 * cbLight._m0[_2482].z) * _2546) * _2547) + _2410;
    }
    float _2582;
    float _2584;
    float _2586;
    if (_2214)
    {
        _2582 = _2472;
        _2584 = _2474;
        _2586 = _2476;
    }
    else
    {
        uint _2593 = _2123 + 3u;
        uint _2597 = _2123 + 11u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _899) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _976;
        float _2614 = cbLight._m0[_2593].y + _977;
        float _2615 = cbLight._m0[_2593].z + _978;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2593].xyz));
        float _4617 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2627 = dot(vec3(_896, _897, _898), vec3(_2620, _2621, _2622));
        float _4628 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4639 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2648 = (exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2649 = 1.0 - _2612;
        float _2659 = (0.5 / (((_2288 * ((_2626 * _2649) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2649) + _2612) * _2626))) * _2626;
        float _4650 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2582 = (((_2648 * cbLight._m0[_2597].x) * _2661) * _2662) + _2472;
        _2584 = (((_2648 * cbLight._m0[_2597].y) * _2661) * _2662) + _2474;
        _2586 = (((_2648 * cbLight._m0[_2597].z) * _2661) * _2662) + _2476;
    }
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_2121.y == 0u)
    {
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2737;
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2737;
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2737;
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.x;
        uint _2764 = uint((float(_2752.y) * floor(float(uint(cbSceneParam._m0[85u].y * _997) / _2753))) + floor(float(uint(cbSceneParam._m0[85u].x * _996) / _2753)));
        float _2774 = (log2(_2740 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2775 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        uint _2778 = uint(isnan(14.0) ? _2775 : (isnan(_2775) ? 14.0 : min(_2775, 14.0)));
        uvec4 _2783 = texelFetch(g_lightClusterGridBuffer, int(((_2778 << 2u) + (_2764 << 6u)) >> 2u));
        uint _2784 = _2783.x;
        uint _2785 = _2752.z;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((((1u << ((_2785 >> 4u) & 15u)) + 4294967295u) & _2784) == 0u) || ((_2785 & 240u) == 0u))
        {
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
        }
        else
        {
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            uint _3044 = 0u;
            uint _3053;
            bool _3054;
            for (;;)
            {
                _3053 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                _3054 = _3053 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3054)
                {
                    frontier_phi_66_pred = _3038;
                    frontier_phi_66_pred_1 = _3043;
                    frontier_phi_66_pred_2 = _3042;
                    frontier_phi_66_pred_3 = _3041;
                    frontier_phi_66_pred_4 = _3040;
                    frontier_phi_66_pred_5 = _3039;
                }
                else
                {
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    uint _3189;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3053;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    for (;;)
                    {
                        uint _3193 = uint(findLSB(_3189)) + (_3044 << 5u);
                        uint _3190 = (_3189 + 4294967295u) & _3189;
                        uint _3195 = _3193 * 48u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3215 = (_3193 * 48u) + 4u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3234 = (_3193 * 48u) + 8u;
                        vec3 _3245 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x));
                        float _3249 = _3209.x - _2738;
                        float _3250 = _3209.y - _2739;
                        float _3251 = _3209.z - _2740;
                        float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                        float _3255 = inversesqrt(_3252);
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3259 = dot(vec3(_1015, _1018, _1021), vec3(_3256, _3257, _3258));
                        float _3264 = 1.0 - (_3252 * _3209.w);
                        float _4676 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3266 = sqrt(_3252) * _3228.w;
                        float _3269 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3259) + _3270;
                        float _3276 = _3266 * _3266;
                        float _3280 = ((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3265) / ((_3276 * 0.699999988079071044921875) + 1.0);
                        float _3284 = (-0.0) - _2738;
                        float _3285 = (-0.0) - _2739;
                        float _3286 = (-0.0) - _2740;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3291 = _3290 * _3284;
                        float _3292 = _3290 * _3285;
                        float _3293 = _3290 * _3286;
                        float _3301 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                        float _3302 = 1.0 - _1075;
                        float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                        float _3310 = _3309 * _3309;
                        float _3311 = _3310 * _3310;
                        float _3312 = _3291 + _3256;
                        float _3313 = _3292 + _3257;
                        float _3314 = _3293 + _3258;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3322 = dot(vec3(_1015, _1018, _1021), vec3(_3291, _3292, _3293));
                        float _4692 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3326 = dot(vec3(_1015, _1018, _1021), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                        float _4703 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                        float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                        float _3334 = _3269 * _3310;
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3259) + _3335;
                        float _4714 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3340 = 1.0 - _3310;
                        float _3350 = (0.5 / (((_3339 * ((_3325 * _3340) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3310) * _3325))) * _3339;
                        float _4725 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3361 = (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) / ((_3333 * _3333) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125))) * _3265;
                        _3113 = (_3280 * _3228.x) + _3186;
                        _3114 = (_3280 * _3228.y) + _3187;
                        _3115 = (_3280 * _3228.z) + _3188;
                        _3110 = (_3361 * _3245.x) + _3183;
                        _3111 = (_3361 * _3245.y) + _3184;
                        _3112 = (_3361 * _3245.z) + _3185;
                        if (_3190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3190;
                        }
                    }
                    frontier_phi_66_pred = _3110;
                    frontier_phi_66_pred_1 = _3115;
                    frontier_phi_66_pred_2 = _3114;
                    frontier_phi_66_pred_3 = _3113;
                    frontier_phi_66_pred_4 = _3112;
                    frontier_phi_66_pred_5 = _3111;
                }
                _2886 = frontier_phi_66_pred;
                _2896 = frontier_phi_66_pred_1;
                _2894 = frontier_phi_66_pred_2;
                _2892 = frontier_phi_66_pred_3;
                _2890 = frontier_phi_66_pred_4;
                _2888 = frontier_phi_66_pred_5;
                uint _3045 = _3044 + 1u;
                if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3038 = _2886;
                    _3039 = _2888;
                    _3040 = _2890;
                    _3041 = _2892;
                    _3042 = _2894;
                    _3043 = _2896;
                    _3044 = _3045;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
        }
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.z;
        uint _2902 = (_2900 >> 8u) & 15u;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        if (((4294967295u << _2902) & _2784) == 0u)
        {
            _3006 = _2885;
            _3008 = _2887;
            _3010 = _2889;
            _3012 = _2891;
            _3014 = _2893;
            _3016 = _2895;
        }
        else
        {
            float _3031 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
            float _3032 = _3031 * _2738;
            float _3033 = _3031 * _2739;
            float _3034 = _3031 * _2740;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2902 < ((_2900 >> 12u) & 15u))
            {
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3166 = _2885;
                float _3167 = _2887;
                float _3168 = _2889;
                float _3169 = _2891;
                float _3170 = _2893;
                float _3171 = _2895;
                uint _3172 = _2902;
                uint _3181;
                bool _3182;
                for (;;)
                {
                    _3181 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                    _3182 = _3181 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3182)
                    {
                        frontier_phi_77_pred = _3171;
                        frontier_phi_77_pred_1 = _3170;
                        frontier_phi_77_pred_2 = _3169;
                        frontier_phi_77_pred_3 = _3168;
                        frontier_phi_77_pred_4 = _3167;
                        frontier_phi_77_pred_5 = _3166;
                    }
                    else
                    {
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3388 = _3166;
                        float _3389 = _3167;
                        float _3390 = _3168;
                        float _3391 = _3169;
                        float _3392 = _3170;
                        float _3393 = _3171;
                        uint _3394 = _3181;
                        uint _3395;
                        vec4 _3420;
                        float _3421;
                        vec4 _3436;
                        vec3 _3448;
                        vec4 _3463;
                        vec4 _3478;
                        float _3524;
                        bool _3525;
                        for (;;)
                        {
                            uint _3405 = ((_3172 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3394));
                            _3395 = (_3394 + 4294967295u) & _3394;
                            uint _3407 = _3405 * 40u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            _3421 = _3420.w;
                            uint _3423 = (_3405 * 40u) + 4u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3405 * 40u) + 8u;
                            _3448 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x));
                            uint _3450 = (_3405 * 40u) + 16u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3405 * 40u) + 20u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3405 * 40u) + 24u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3499 = (_3405 * 40u) + 28u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3524 = fma(_2740, _3512.z, fma(_2739, _3512.y, _3512.x * _2738)) + _3512.w;
                            _3525 = !((fma(_2740, _3493.z, fma(_2739, _3493.y, _3493.x * _2738)) + _3493.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3525)
                            {
                                float _3552 = _3420.x - _2738;
                                float _3553 = _3420.y - _2739;
                                float _3554 = _3420.z - _2740;
                                float _3555 = dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554));
                                float _3558 = inversesqrt(_3555);
                                float _3559 = _3558 * _3552;
                                float _3560 = _3558 * _3553;
                                float _3561 = _3558 * _3554;
                                float _3565 = 1.0 - (_3555 / (_3421 * _3421));
                                float _4736 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3570 = sqrt(_3555) * _3436.w;
                                float _3572 = 1.39999997615814208984375 / (_3570 + 1.39999997615814208984375);
                                float _3573 = _3572 * _3572;
                                float _3576 = ((1.0 - _3573) * dot(vec3(_3559, _3560, _3561), vec3(_1015, _1018, _1021))) + _3573;
                                float _3579 = _3570 * _3570;
                                float _3583 = (fma(_2740, _3463.z, fma(_2739, _3463.y, _3463.x * _2738)) + _3463.w) / _3524;
                                float _3584 = (fma(_2740, _3478.z, fma(_2739, _3478.y, _3478.x * _2738)) + _3478.w) / _3524;
                                float _3588 = 1.0 - dot(vec2(_3583, _3584), vec2(_3583, _3584));
                                float _4752 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3590 = _3589 * (((isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * _3566) / ((_3579 * 0.699999988079071044921875) + 1.0));
                                float _3602 = exp2(log2(1.0 / ((_3579 * 3.5) + 5.0)) * 0.25);
                                float _3603 = 1.0 - _1075;
                                float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                                float _3611 = _3610 * _3610;
                                float _3612 = _3611 * _3611;
                                float _3613 = _3559 - _3032;
                                float _3614 = _3560 - _3033;
                                float _3615 = _3561 - _3034;
                                float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                                float _3623 = dot(vec3(_1015, _1018, _1021), vec3((-0.0) - _3032, (-0.0) - _3033, (-0.0) - _3034));
                                float _4763 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3627 = dot(vec3(_1015, _1018, _1021), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                                float _4774 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                                float _3635 = _3572 * _3611;
                                float _3636 = _3635 * _3635;
                                float _3642 = ((1.0 - _3636) * dot(vec3(_1015, _1018, _1021), vec3(_3559, _3560, _3561))) + _3636;
                                float _4785 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3644 = 1.0 - _3611;
                                float _3654 = (0.5 / (((_3643 * ((_3626 * _3644) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3643 * _3644) + _3611) * _3626))) * _3643;
                                float _4796 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3664 = (_3589 * _3566) * (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) / ((_3634 * _3634) * ((_3579 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3590 * _3436.y;
                                frontier_phi_83_pred_1 = _3590 * _3436.x;
                                frontier_phi_83_pred_2 = _3664 * _3448.z;
                                frontier_phi_83_pred_3 = _3664 * _3448.y;
                                frontier_phi_83_pred_4 = _3664 * _3448.x;
                                frontier_phi_83_pred_5 = _3590 * _3436.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3672 = frontier_phi_83_pred;
                            _3671 = frontier_phi_83_pred_1;
                            _3670 = frontier_phi_83_pred_2;
                            _3669 = frontier_phi_83_pred_3;
                            _3668 = frontier_phi_83_pred_4;
                            _3673 = frontier_phi_83_pred_5;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            if (_3395 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3395;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3380;
                        frontier_phi_77_pred_1 = _3379;
                        frontier_phi_77_pred_2 = _3378;
                        frontier_phi_77_pred_3 = _3377;
                        frontier_phi_77_pred_4 = _3376;
                        frontier_phi_77_pred_5 = _3375;
                    }
                    _3017 = frontier_phi_77_pred;
                    _3015 = frontier_phi_77_pred_1;
                    _3013 = frontier_phi_77_pred_2;
                    _3011 = frontier_phi_77_pred_3;
                    _3009 = frontier_phi_77_pred_4;
                    _3007 = frontier_phi_77_pred_5;
                    uint _3173 = _3172 + 1u;
                    if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3166 = _3007;
                        _3167 = _3009;
                        _3168 = _3011;
                        _3169 = _3013;
                        _3170 = _3015;
                        _3171 = _3017;
                        _3172 = _3173;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3011;
                frontier_phi_58_59_ladder_1 = _3017;
                frontier_phi_58_59_ladder_2 = _3015;
                frontier_phi_58_59_ladder_3 = _3013;
                frontier_phi_58_59_ladder_4 = _3009;
                frontier_phi_58_59_ladder_5 = _3007;
            }
            else
            {
                frontier_phi_58_59_ladder = _2889;
                frontier_phi_58_59_ladder_1 = _2895;
                frontier_phi_58_59_ladder_2 = _2893;
                frontier_phi_58_59_ladder_3 = _2891;
                frontier_phi_58_59_ladder_4 = _2887;
                frontier_phi_58_59_ladder_5 = _2885;
            }
            _3006 = frontier_phi_58_59_ladder_5;
            _3008 = frontier_phi_58_59_ladder_4;
            _3010 = frontier_phi_58_59_ladder;
            _3012 = frontier_phi_58_59_ladder_3;
            _3014 = frontier_phi_58_59_ladder_2;
            _3016 = frontier_phi_58_59_ladder_1;
        }
        float _3021 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
        _2797 = (_3021 * _3012) + _2252;
        _2799 = (_3021 * _3014) + _2254;
        _2801 = (_3021 * _3016) + _2256;
        _2803 = ((_3006 * 0.039999999105930328369140625) * _3021) + _2582;
        _2805 = ((_3008 * 0.039999999105930328369140625) * _3021) + _2584;
        _2807 = ((_3010 * 0.039999999105930328369140625) * _3021) + _2586;
    }
    else
    {
        _2797 = _2252;
        _2799 = _2254;
        _2801 = _2256;
        _2803 = _2582;
        _2805 = _2584;
        _2807 = _2586;
    }
    float _4812 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4823 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _4834 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _2824 = ((isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2797 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1059))) + ((_2803 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1893)) * cbPerFrame._m0[3u].x);
    float _2825 = ((isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2799 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1059))) + ((_2805 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1893)) * cbPerFrame._m0[3u].x);
    float _2826 = ((isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2801 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1059))) + ((_2807 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1893)) * cbPerFrame._m0[3u].x);
    uint _2827 = _278 + 6u;
    float _2835 = _996 / cbSceneParam._m0[86u].x;
    float _2836 = _997 / cbSceneParam._m0[86u].y;
    vec4 _2850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, (log2((isnan(cbSceneParam._m0[77u].w) ? _917 : (isnan(_917) ? cbSceneParam._m0[77u].w : min(_917, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2852 = _2850.x;
    float _2853 = _2850.y;
    float _2854 = _2850.z;
    float _2855 = _2850.w;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_917 > cbSceneParam._m0[78u].w)
    {
        float _2910 = isnan(_917) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _917 : min(cbSceneParam._m0[80u].w, _917));
        float _2911 = _2910 / _917;
        float _2922 = _2911 * _969;
        float _2923 = _970 * _2911;
        float _2924 = (-0.0) - _2923;
        float _2926 = _2911 * _971;
        float _2928 = (cbSceneParam._m0[77u].w * _2924) / _2910;
        float _2929 = _2928 + cbSceneParam._m0[79u].w;
        float _2930 = cbSceneParam._m0[79u].w - _2923;
        float _2936 = sqrt(((_2922 * _2922) + (_2923 * _2923)) + (_2926 * _2926));
        float _2939 = (1.0 - (cbSceneParam._m0[77u].w / _2910)) * _2936;
        float _2944 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2946 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3123;
        if (abs((_2924 - _2928) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3123 = ((((_2929 > 0.0) ? exp2(_2944 * _2929) : (2.0 - exp2(_2946 * _2929))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2939;
        }
        else
        {
            float _3067 = 1.0 / cbSceneParam._m0[80u].x;
            float _3068 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : max(_2929, _2930));
            float _3069 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : min(_2929, _2930));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            _3123 = ((abs(_2936 / _2924) * cbSceneParam._m0[80u].y) * ((((_3078 - _3079) * 2.0) - ((exp2(_2944 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0)))) - exp2(_2944 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))))) * _3067)) - ((exp2(_2946 * _3078) - exp2(_2946 * _3079)) * _3067))) + (_2939 * cbSceneParam._m0[80u].z);
        }
        vec4 _3125 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, 1.0), 0.0);
        float _3134 = exp2((_3123 * (-1.44269502162933349609375)) * (1.0 - _3125.w));
        float _3135 = log2(_3134);
        float _3151 = log2(_2855);
        _2948 = (exp2(_3151 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].x)) * _3125.x) / cbSceneParam._m0[78u].x)) + _2852;
        _2950 = (exp2(_3151 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].y)) * _3125.y) / cbSceneParam._m0[78u].y)) + _2853;
        _2952 = (exp2(_3151 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].z)) * _3125.z) / cbSceneParam._m0[78u].z)) + _2854;
        _2954 = _3134 * _2855;
    }
    else
    {
        _2948 = _2852;
        _2950 = _2853;
        _2952 = _2854;
        _2954 = _2855;
    }
    bool _3161;
    vec4 _2964;
    vec4 _2986;
    float _2988;
    float _2992;
    float _2993;
    float _2994;
    float _2995;
    bool _3005;
    for (;;)
    {
        _2964 = cbMatDynParam._m0[0u];
        float _2966 = roundEven(_2964.y);
        bool _2967 = _2966 == 3.0;
        float _2968 = log2(_2954);
        float _2975 = exp2(_2968 * cbSceneParam._m0[78u].x) * _2824;
        float _2976 = exp2(_2968 * cbSceneParam._m0[78u].y) * _2825;
        float _2977 = exp2(_2968 * cbSceneParam._m0[78u].z) * _2826;
        float _2984 = _985 + (-0.5);
        _2986 = cbMtdParam._m0[1u];
        _2988 = _2986.y * _2984;
        float _2991 = (_2966 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2992 = _2991 * (_2967 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2948)));
        _2993 = _2991 * (_2967 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2950)));
        _2994 = _2991 * (_2967 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2952)));
        _2995 = _2984 * 0.999000012874603271484375;
        _3005 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3005)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _2995) < 0.5)
            {
                _3161 = true;
                break;
            }
        }
        uint _3102 = _1034 + uint(_2964.w);
        if ((cbInstanceData._m0[_3102].w < 1.0) && ((cbInstanceData._m0[_3102].w + _2995) < 0.5))
        {
            _3161 = true;
            break;
        }
        if ((_2988 + 1.0) < _2986.x)
        {
            _3161 = true;
            break;
        }
        _3161 = false;
        break;
    }
    float _3366;
    if (_3161)
    {
        discard_state = true;
        _3366 = 0.0;
    }
    else
    {
        _3366 = cbInstanceData._m0[_2827].w;
    }
    SV_Target.x = _2992;
    SV_Target.y = _2993;
    SV_Target.z = _2994;
    SV_Target.w = _3366;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2827].w;
    discard_exit();
}


