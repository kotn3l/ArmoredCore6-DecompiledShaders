#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1304;
float _3946;
float _3947;
float _3948;
float _3949;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _356.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].z) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3958 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _435 = (_428 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _436 = (_428 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _437 = (_428 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _356.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[24u].z) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3969 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    vec4 _528 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _266) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _267) + cbTextureTilingScale._m0[24u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _547 = _545.x;
    float _557 = dot(vec4(_547, _545.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _569 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _356.z) * 2.0) - ((((_547 - _557) * cbMtdParam._m0[24u].z) + _557) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3980 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _583 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_570 * ((_528.x * cbMtdParam._m0[14u].x) - _508)) + _508);
    float _586 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_570 * ((_528.y * cbMtdParam._m0[14u].y) - _509)) + _509);
    float _589 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_570 * ((_528.z * cbMtdParam._m0[14u].z) - _510)) + _510);
    vec4 _602 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _621 = _619.x;
    float _622 = _619.y;
    float _623 = _619.z;
    float _630 = ((_602.x - _621) * _428) + _621;
    float _631 = ((_602.y - _622) * _428) + _622;
    float _632 = ((_602.z - _623) * _428) + _623;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _655 = ((_644.x - _630) * _501) + _630;
    float _656 = ((_644.y - _631) * _501) + _631;
    float _657 = ((_644.z - _632) * _501) + _632;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _266) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _267) + cbTextureTilingScale._m0[23u].w));
    float _682 = ((_669.z - _657) * _570) + _657;
    float _685 = ((((_669.x - _655) * _570) + _655) * 2.0) + (-1.0);
    float _687 = ((((_669.y - _656) * _570) + _656) * 2.0) + (-1.0);
    float _688 = dot(vec2(_685, _687), vec2(_685, _687));
    float _3991 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _693 = sqrt(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _719 = (((_707.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _685;
    float _720 = (((_707.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _687;
    float _724 = (cbMtdParam._m0[19u].w * (_707.z - _682)) + _682;
    float _728 = cbMtdParam._m0[22u].x + _707.w;
    float _731 = fma(_693, _233 * NORMAL.x, fma(_720, _240 * TANGENT.x, (_226 * _218) * _719));
    float _734 = fma(_693, _233 * NORMAL.y, fma(_720, _240 * TANGENT.y, (_226 * _219) * _719));
    float _737 = fma(_693, _233 * NORMAL.z, fma(_720, _240 * TANGENT.z, (_226 * _220) * _719));
    float _741 = inversesqrt(dot(vec3(_731, _734, _737), vec3(_731, _734, _737)));
    float _742 = _741 * _731;
    float _743 = _741 * _734;
    float _744 = _741 * _737;
    float _4002 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _745 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4024 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4035 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4046 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _763 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _814 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _804);
    float _815 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _804);
    float _816 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _804);
    float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
    float _821 = _814 * _820;
    float _822 = _815 * _820;
    float _823 = _816 * _820;
    vec4 _828 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _830 = _828.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _984 = sqrt(((_814 * _814) + (_815 * _815)) + (_816 * _816));
        float _990 = (cbMatDynParam._m0[5u].x * _984) + cbMatDynParam._m0[5u].y;
        float _4057 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _995 = (cbMatDynParam._m0[5u].z * _984) + cbMatDynParam._m0[5u].w;
        float _4068 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) - _991)) + _991) < ((_830 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _841 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _842 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _860 = fma(_744, cbSceneParam._m0[5u].z, fma(_743, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _742));
    float _863 = fma(_744, cbSceneParam._m0[6u].z, fma(_743, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _742));
    float _866 = fma(_744, cbSceneParam._m0[7u].z, fma(_743, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _742));
    uint _879 = _246 + 9u;
    uint _880 = _879 + uint(cbMatDynParam._m0[0u].w);
    float _886 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_880].x;
    float _887 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_880].y;
    float _888 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_880].z;
    float _4079 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    vec4 _900 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _841, cbSceneParam._m0[86u].y * _842));
    float _904 = ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * TEXCOORD_5.w) * _900.x;
    float _905 = dot(vec3(_742, _743, _744), vec3(_821, _822, _823));
    float _908 = _905 * 2.0;
    float _912 = (_908 * _742) - _821;
    float _913 = (_908 * _743) - _822;
    float _914 = (_908 * _744) - _823;
    float _918 = abs(dot(vec3(_821, _822, _823), vec3(_742, _743, _744)));
    float _4112 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _920 = sqrt(_745);
    float _933 = exp2((_920 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_920 * 3.0));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1303;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1028 = fma(_973, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965));
        float _1032 = fma(_973, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965));
        float _1036 = fma(_973, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965));
        float _1061 = _965 + _742;
        float _1062 = _969 + _743;
        float _1063 = _973 + _744;
        float _1073 = fma(_1063, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061)) - _1028;
        float _1074 = fma(_1063, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061)) - _1032;
        float _1075 = fma(_1063, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061)) - _1036;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1028 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1032 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[34u].z) + ((((((_1036 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1131 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1097.x + (-0.5));
        float _1133 = _1131 * (_1097.y + (-0.5));
        float _1134 = _1131 * (_1097.z + (-0.5));
        float _1141 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1104.x + (-0.5));
        float _1143 = _1141 * (_1104.y + (-0.5));
        float _1144 = _1141 * (_1104.z + (-0.5));
        float _1151 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1111.x + (-0.5));
        float _1153 = _1151 * (_1111.y + (-0.5));
        float _1154 = _1151 * (_1111.z + (-0.5));
        float _1161 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1118.x + (-0.5));
        float _1163 = _1161 * (_1118.y + (-0.5));
        float _1164 = _1161 * (_1118.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1185 = (dot(vec3(_742, _743, _744), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1195 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _4160 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1197 + 1.0))) + _1202) * _1165;
        float _1212 = _1133 * 0.5;
        float _1213 = _1143 * 0.5;
        float _1214 = _1153 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_742, _743, _744), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4193 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1239 + 1.0))) + _1244) * _1166;
        float _1254 = _1134 * 0.5;
        float _1255 = _1144 * 0.5;
        float _1256 = _1154 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_742, _743, _744), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4226 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1281 + 1.0))) + _1286) * _1167;
        _1303 = _1134;
        _1305 = _1133;
        _1306 = _1132;
        _1307 = _1144;
        _1308 = _1143;
        _1309 = _1142;
        _1310 = _1154;
        _1311 = _1153;
        _1312 = _1152;
        _1313 = _1167;
        _1314 = _1166;
        _1315 = _1165;
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _1304;
        _1305 = _1304;
        _1306 = _1304;
        _1307 = _1304;
        _1308 = _1304;
        _1309 = _1304;
        _1310 = _1304;
        _1311 = _1304;
        _1312 = _1304;
        _1313 = _1304;
        _1314 = _1304;
        _1315 = _1304;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1344 = fma(_973, cbModelParam._m0[30u].z, fma(_969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965));
        float _1348 = fma(_973, cbModelParam._m0[31u].z, fma(_969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965));
        float _1352 = fma(_973, cbModelParam._m0[32u].z, fma(_969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965));
        float _1375 = _965 + _742;
        float _1376 = _969 + _743;
        float _1377 = _973 + _744;
        float _1387 = fma(_1377, cbModelParam._m0[30u].z, fma(_1376, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1375)) - _1344;
        float _1388 = fma(_1377, cbModelParam._m0[31u].z, fma(_1376, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1375)) - _1348;
        float _1389 = fma(_1377, cbModelParam._m0[32u].z, fma(_1376, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1375)) - _1352;
        float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
        float _1406 = ((_1393 * _1387) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1344 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1393 * _1388) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1348 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1393 * _1389) / cbModelParam._m0[35u].z) + ((((((_1352 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1443 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1410.x + (-0.5));
        float _1445 = _1443 * (_1410.y + (-0.5));
        float _1446 = _1443 * (_1410.z + (-0.5));
        float _1453 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1417.x + (-0.5));
        float _1455 = _1453 * (_1417.y + (-0.5));
        float _1456 = _1453 * (_1417.z + (-0.5));
        float _1463 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1424.x + (-0.5));
        float _1465 = _1463 * (_1424.y + (-0.5));
        float _1466 = _1463 * (_1424.z + (-0.5));
        float _1473 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1431.x + (-0.5));
        float _1475 = _1473 * (_1431.y + (-0.5));
        float _1476 = _1473 * (_1431.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_742, _743, _744), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4289 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1507 + 1.0))) + _1512) * _1477;
        float _1522 = _1445 * 0.5;
        float _1523 = _1455 * 0.5;
        float _1524 = _1465 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_742, _743, _744), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4322 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1549 + 1.0))) + _1554) * _1478;
        float _1564 = _1446 * 0.5;
        float _1565 = _1456 * 0.5;
        float _1566 = _1466 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_742, _743, _744), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4355 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1591 + 1.0))) + _1596) * _1479;
        _1613 = _1446;
        _1614 = _1445;
        _1615 = _1444;
        _1616 = _1456;
        _1617 = _1455;
        _1618 = _1454;
        _1619 = _1466;
        _1620 = _1465;
        _1621 = _1464;
        _1622 = _1479;
        _1623 = _1478;
        _1624 = _1477;
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1304;
        _1614 = _1304;
        _1615 = _1304;
        _1616 = _1304;
        _1617 = _1304;
        _1618 = _1304;
        _1619 = _1304;
        _1620 = _1304;
        _1621 = _1304;
        _1622 = _1304;
        _1623 = _1304;
        _1624 = _1304;
        _1625 = 0.0;
        _1626 = 0.0;
        _1627 = 0.0;
    }
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1316)) + _1316;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1317)) + _1317;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1318)) + _1318;
    float _1660 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1637));
    float _1681 = _912 * 0.5;
    float _1682 = _913 * 0.5;
    float _1683 = _914 * 0.5;
    float _1684 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1687 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1690 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1724;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1697 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1303, _1307, _1310, _1313));
        float _1701 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1705 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1712 = dot(vec4(cbModelParam._m0[39u]), vec4(_1681, _1682, _1683, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1735;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1726 = dot(vec4(cbModelParam._m0[40u]), vec4(_1681, _1682, _1683, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1739 = (_1735 * cbModelParam._m0[1u].x) + (_1724 * (1.0 - cbModelParam._m0[1u].x));
    float _1749 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _745);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1749 : min(cbModelParam._m0[25u].z, _1749));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_973, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_973, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_973, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_914, cbModelParam._m0[13u].z, fma(_913, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _912));
        float _1812 = fma(_914, cbModelParam._m0[14u].z, fma(_913, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _912));
        float _1815 = fma(_914, cbModelParam._m0[15u].z, fma(_913, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _912));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1843 = frontier_phi_17_15_ladder;
        }
        float _2014;
        if (_1812 > 0.0)
        {
            _2014 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2014 = frontier_phi_26_22_ladder;
        }
        float _2309;
        if (_1815 > 0.0)
        {
            _2309 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2309 = frontier_phi_38_33_ladder;
        }
        float _2311 = isnan(_2014) ? _1843 : (isnan(_1843) ? _2014 : min(_1843, _2014));
        float _2312 = isnan(_2309) ? _2311 : (isnan(_2311) ? _2309 : min(_2311, _2309));
        float _2316 = (_2312 * _1809) + _1798;
        float _2317 = (_2312 * _1812) + _1802;
        float _2318 = (_2312 * _1815) + _1806;
        float _2319 = _2312 * 9.9999997473787516355514526367188e-05;
        float _2321 = (-1.0) - _2319;
        float _2323 = _2319 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2318 > _2323) || ((_2318 < _2321) || ((_2317 > _2323) || ((_2317 < _2321) || ((_2316 < _2321) || (_2316 > _2323))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2318, cbModelParam._m0[9u].z, fma(_2317, cbModelParam._m0[9u].y, _2316 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2318, cbModelParam._m0[10u].z, fma(_2317, cbModelParam._m0[10u].y, _2316 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2318, cbModelParam._m0[11u].z, fma(_2317, cbModelParam._m0[11u].y, _2316 * cbModelParam._m0[11u].x))), _1750);
            frontier_phi_16_38_ladder = _2463.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2463.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2463.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_16_38_ladder_2;
        _1833 = frontier_phi_16_38_ladder_1;
        _1835 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_912, _913, _914), _1750);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _745);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1895 = fma(_973, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965)) + cbModelParam._m0[21u].w;
        float _1899 = fma(_973, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965)) + cbModelParam._m0[22u].w;
        float _1903 = fma(_973, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965)) + cbModelParam._m0[23u].w;
        float _1906 = fma(_914, cbModelParam._m0[21u].z, fma(_913, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _912));
        float _1909 = fma(_914, cbModelParam._m0[22u].z, fma(_913, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _912));
        float _1912 = fma(_914, cbModelParam._m0[23u].z, fma(_913, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _912));
        float _2019;
        if (_1906 > 0.0)
        {
            _2019 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2019 = frontier_phi_28_24_ladder;
        }
        float _2336;
        if (_1909 > 0.0)
        {
            _2336 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2336 = frontier_phi_40_35_ladder;
        }
        float _2663;
        if (_1912 > 0.0)
        {
            _2663 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2663 = frontier_phi_50_47_ladder;
        }
        float _2665 = isnan(_2336) ? _2019 : (isnan(_2019) ? _2336 : min(_2019, _2336));
        float _2666 = isnan(_2663) ? _2665 : (isnan(_2665) ? _2663 : min(_2665, _2663));
        float _2670 = (_2666 * _1906) + _1895;
        float _2671 = (_2666 * _1909) + _1899;
        float _2672 = (_2666 * _1912) + _1903;
        float _2673 = _2666 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2673;
        float _2676 = _2673 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2672 > _2676) || ((_2672 < _2674) || ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 < _2674) || (_2670 > _2676))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2672, cbModelParam._m0[17u].z, fma(_2671, cbModelParam._m0[17u].y, _2670 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2672, cbModelParam._m0[18u].z, fma(_2671, cbModelParam._m0[18u].y, _2670 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2672, cbModelParam._m0[19u].z, fma(_2671, cbModelParam._m0[19u].y, _2670 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_25_50_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1931 = frontier_phi_25_50_ladder_2;
        _1933 = frontier_phi_25_50_ladder_1;
        _1935 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1915 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_912, _913, _914), _1840);
        _1931 = _1915.x * cbModelParam._m0[1u].z;
        _1933 = _1915.y * cbModelParam._m0[1u].z;
        _1935 = _1915.z * cbModelParam._m0[1u].z;
    }
    float _1947 = ((((1.0 - _933) * ((_920 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_933 * _920)) * _904;
    float _1948 = _1947 * ((cbModelParam._m0[1u].w * (_1931 - _1831)) + _1831);
    float _1949 = _1947 * ((cbModelParam._m0[1u].w * (_1933 - _1833)) + _1833);
    float _1950 = _1947 * ((cbModelParam._m0[1u].w * (_1935 - _1835)) + _1835);
    float _1953 = fma(_1950, cbSceneParam._m0[89u].z, fma(_1949, cbSceneParam._m0[89u].y, _1948 * cbSceneParam._m0[89u].x));
    float _1956 = fma(_1950, cbSceneParam._m0[90u].z, fma(_1949, cbSceneParam._m0[90u].y, _1948 * cbSceneParam._m0[90u].x));
    float _1959 = fma(_1950, cbSceneParam._m0[91u].z, fma(_1949, cbSceneParam._m0[91u].y, _1948 * cbSceneParam._m0[91u].x));
    float _1993 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2001 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2005 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2006 = _1993 / _2005;
    float _2007 = _1997 / _2005;
    float _2008 = _2001 / _2005;
    float _2155;
    float _2156;
    float _2157;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2035 = ((uint(_2008 > cbSceneParam._m0[59u].y) + uint(_2008 > cbSceneParam._m0[59u].x)) + uint(_2008 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2036 = _2035 + 43u;
        uint _2044 = _2035 + 44u;
        uint _2052 = _2035 + 45u;
        uint _2060 = _2035 + 46u;
        float _2071 = fma(_2005, cbSceneParam._m0[_2036].w, fma(_2001, cbSceneParam._m0[_2036].z, fma(_1997, cbSceneParam._m0[_2036].y, _1993 * cbSceneParam._m0[_2036].x)));
        float _2075 = fma(_2005, cbSceneParam._m0[_2044].w, fma(_2001, cbSceneParam._m0[_2044].z, fma(_1997, cbSceneParam._m0[_2044].y, _1993 * cbSceneParam._m0[_2044].x)));
        float _2083 = fma(_2005, cbSceneParam._m0[_2060].w, fma(_2001, cbSceneParam._m0[_2060].z, fma(_1997, cbSceneParam._m0[_2060].y, _1993 * cbSceneParam._m0[_2060].x)));
        float _2088 = cbSceneParam._m0[33u].z * _2083;
        float _2090 = cbSceneParam._m0[33u].w * _2083;
        float _2093 = fma(_2005, cbSceneParam._m0[_2052].w, fma(_2001, cbSceneParam._m0[_2052].z, fma(_1997, cbSceneParam._m0[_2052].y, _1993 * cbSceneParam._m0[_2052].x))) / _2083;
        float _2141 = (cbSceneParam._m0[33u].x - sqrt(((_2007 * _2007) + (_2006 * _2006)) + (_2008 * _2008))) * cbSceneParam._m0[33u].y;
        float _4481 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2148 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2088 + _2071) / _2083, (_2090 + _2075) / _2083), _2093), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 + _2071) / _2083, (_2075 - _2088) / _2083), _2093), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 - _2088) / _2083, (_2075 - _2090) / _2083), _2093), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 - _2090) / _2083, (_2088 + _2075) / _2083), _2093), 0.0)).x), vec4(0.25)));
        _2155 = 1.0 - (_2148 * cbSceneParam._m0[34u].x);
        _2156 = 1.0 - (_2148 * cbSceneParam._m0[34u].y);
        _2157 = 1.0 - (_2148 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2155 = 1.0;
        _2156 = 1.0;
        _2157 = 1.0;
    }
    float _2221;
    float _2223;
    float _2225;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2209 = fma(_2005, cbSceneParam._m0[63u].w, fma(_2001, cbSceneParam._m0[63u].z, fma(_1997, cbSceneParam._m0[63u].y, _1993 * cbSceneParam._m0[63u].x)));
        float _2210 = fma(_2005, cbSceneParam._m0[60u].w, fma(_2001, cbSceneParam._m0[60u].z, fma(_1997, cbSceneParam._m0[60u].y, _1993 * cbSceneParam._m0[60u].x))) / _2209;
        float _2211 = fma(_2005, cbSceneParam._m0[61u].w, fma(_2001, cbSceneParam._m0[61u].z, fma(_1997, cbSceneParam._m0[61u].y, _1993 * cbSceneParam._m0[61u].x))) / _2209;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2210 >= cbSceneParam._m0[64u].x) && (_2211 >= cbSceneParam._m0[64u].y)) && (_2210 <= cbSceneParam._m0[64u].z)) && (_2211 <= cbSceneParam._m0[64u].w))
        {
            float _2349 = fma(_2005, cbSceneParam._m0[62u].w, fma(_2001, cbSceneParam._m0[62u].z, fma(_1997, cbSceneParam._m0[62u].y, _1993 * cbSceneParam._m0[62u].x))) / _2209;
            float _2353 = isnan(cbSceneParam._m0[41u].w) ? _2349 : (isnan(_2349) ? cbSceneParam._m0[41u].w : max(_2349, cbSceneParam._m0[41u].w));
            float _2396 = (cbSceneParam._m0[33u].x - sqrt(((_2007 * _2007) + (_2006 * _2006)) + (_2008 * _2008))) * cbSceneParam._m0[33u].y;
            float _4497 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
            float _2403 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2210, cbSceneParam._m0[33u].w + _2211), _2353), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2210, _2211 - cbSceneParam._m0[33u].z), _2353), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2210 - cbSceneParam._m0[33u].z, _2211 - cbSceneParam._m0[33u].w), _2353), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2210 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2211), _2353), 0.0)).x), vec4(0.25)));
            float _2407 = 1.0 - (_2403 * cbSceneParam._m0[34u].x);
            float _2408 = 1.0 - (_2403 * cbSceneParam._m0[34u].y);
            float _2409 = 1.0 - (_2403 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2409) ? _2157 : (isnan(_2157) ? _2409 : min(_2157, _2409));
            frontier_phi_37_36_ladder_1 = isnan(_2408) ? _2156 : (isnan(_2156) ? _2408 : min(_2156, _2408));
            frontier_phi_37_36_ladder_2 = isnan(_2407) ? _2155 : (isnan(_2155) ? _2407 : min(_2155, _2407));
        }
        else
        {
            frontier_phi_37_36_ladder = _2157;
            frontier_phi_37_36_ladder_1 = _2156;
            frontier_phi_37_36_ladder_2 = _2155;
        }
        _2221 = frontier_phi_37_36_ladder_2;
        _2223 = frontier_phi_37_36_ladder_1;
        _2225 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2221 = _2155;
        _2223 = _2156;
        _2225 = _2157;
    }
    uvec4 _2230 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2232 = _2230.x * 14u;
    uint _2233 = _2232 + 13u;
    float _2240 = _904 + (-1.0);
    float _2245 = (cbLight._m0[_2233].x * _2240) + 1.0;
    float _2246 = (cbLight._m0[_2233].y * _2240) + 1.0;
    float _2247 = (cbLight._m0[_2233].z * _2240) + 1.0;
    float _2248 = (cbLight._m0[_2233].w * _2240) + 1.0;
    uint _2249 = _2232 + 5u;
    float _2255 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
    uint _2259 = _2232 + 4u;
    float _2268 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
    uint _2272 = _2232 | 1u;
    float _2283 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_742, _743, _744));
    float _2286 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_742, _743, _744));
    float _4533 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _4544 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2291 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * 0.3183098733425140380859375;
    float _2293 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * 0.3183098733425140380859375;
    float _2300 = ((cbLight._m0[_2249].x * _2255) * _2293) + (((cbLight._m0[_2259].x * _2221) * _2268) * _2291);
    float _2301 = ((_2255 * cbLight._m0[_2249].y) * _2293) + (((cbLight._m0[_2259].y * _2223) * _2268) * _2291);
    float _2302 = ((_2255 * cbLight._m0[_2249].z) * _2293) + (((cbLight._m0[_2259].z * _2225) * _2268) * _2291);
    uvec4 _2306 = floatBitsToUint(cbLight._m0[_2232 + 12u]);
    bool _2308 = _2306.x == 0u;
    float _2410;
    float _2412;
    float _2414;
    if (_2308)
    {
        _2410 = _2300;
        _2412 = _2301;
        _2414 = _2302;
    }
    else
    {
        uint _2418 = _2232 + 6u;
        float _2434 = (dot(vec3(cbLight._m0[_2232 + 2u].xyz), vec3(_742, _743, _744)) * 0.5) + 0.5;
        float _2435 = _2434 * _2434;
        float _4555 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2436 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2437 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
        _2410 = (((cbLight._m0[_2418].x * 0.3183098733425140380859375) * _2436) * _2437) + _2300;
        _2412 = (((cbLight._m0[_2418].y * 0.3183098733425140380859375) * _2436) * _2437) + _2301;
        _2414 = (((cbLight._m0[_2418].z * 0.3183098733425140380859375) * _2436) * _2437) + _2302;
    }
    bool _2417 = _2306.y == 0u;
    float _2472;
    float _2474;
    float _2476;
    if (_2417)
    {
        _2472 = _2410;
        _2474 = _2412;
        _2476 = _2414;
    }
    else
    {
        uint _2634 = _2232 + 7u;
        float _2650 = (dot(vec3(cbLight._m0[_2232 + 3u].xyz), vec3(_742, _743, _744)) * 0.5) + 0.5;
        float _2651 = _2650 * _2650;
        float _4571 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2652 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2653 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2472 = (((cbLight._m0[_2634].x * 0.3183098733425140380859375) * _2652) * _2653) + _2410;
        _2474 = (((cbLight._m0[_2634].y * 0.3183098733425140380859375) * _2652) * _2653) + _2412;
        _2476 = (((cbLight._m0[_2634].z * 0.3183098733425140380859375) * _2652) * _2653) + _2414;
    }
    uint _2479 = _2232 + 8u;
    float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _745) * 0.949999988079071044921875);
    float _2493 = _2492 * _2492;
    float _2494 = cbLight._m0[_2232].x + _821;
    float _2495 = cbLight._m0[_2232].y + _822;
    float _2496 = cbLight._m0[_2232].z + _823;
    float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
    float _2501 = _2500 * _2494;
    float _2502 = _2500 * _2495;
    float _2503 = _2500 * _2496;
    float _2504 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2232].xyz));
    float _4587 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _4598 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _2508 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2509 = dot(vec3(_742, _743, _744), vec3(_2501, _2502, _2503));
    float _4609 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2513 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2501, _2502, _2503));
    float _4620 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2517 = _2493 * _2493;
    float _2521 = ((_2512 * _2512) * (_2517 + (-1.0))) + 1.0;
    float _2532 = (exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2533 = 1.0 - _2493;
    float _2544 = (0.5 / (((_2508 * ((_2507 * _2533) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2508 * _2533) + _2493) * _2507))) * _2507;
    float _4631 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2517 / ((_2521 * _2521) * 3.141590118408203125));
    uint _2560 = _2232 + 9u;
    float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _745) * 0.949999988079071044921875);
    float _2572 = _2571 * _2571;
    float _2573 = cbLight._m0[_2272].x + _821;
    float _2574 = cbLight._m0[_2272].y + _822;
    float _2575 = cbLight._m0[_2272].z + _823;
    float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
    float _2580 = _2579 * _2573;
    float _2581 = _2579 * _2574;
    float _2582 = _2579 * _2575;
    float _2583 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2272].xyz));
    float _4642 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2587 = dot(vec3(_742, _743, _744), vec3(_2580, _2581, _2582));
    float _4653 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2591 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2580, _2581, _2582));
    float _4664 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = _2572 * _2572;
    float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
    float _2608 = (exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2609 = 1.0 - _2572;
    float _2619 = (0.5 / (((_2508 * ((_2586 * _2609) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2508 * _2609) + _2572) * _2586))) * _2586;
    float _4675 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2621 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
    float _2631 = (((_2608 * cbLight._m0[_2560].x) * _2621) * _2255) + ((((cbLight._m0[_2479].x * _2221) * _2532) * _2546) * _2268);
    float _2632 = (((_2608 * cbLight._m0[_2560].y) * _2621) * _2255) + ((((cbLight._m0[_2479].y * _2223) * _2532) * _2546) * _2268);
    float _2633 = (((_2608 * cbLight._m0[_2560].z) * _2621) * _2255) + ((((cbLight._m0[_2479].z * _2225) * _2532) * _2546) * _2268);
    float _2689;
    float _2691;
    float _2693;
    if (_2308)
    {
        _2689 = _2631;
        _2691 = _2632;
        _2693 = _2633;
    }
    else
    {
        uint _2695 = _2232 + 2u;
        uint _2699 = _2232 + 10u;
        float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2695].w)) * _745) * 0.949999988079071044921875);
        float _2714 = _2713 * _2713;
        float _2715 = cbLight._m0[_2695].x + _821;
        float _2716 = cbLight._m0[_2695].y + _822;
        float _2717 = cbLight._m0[_2695].z + _823;
        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
        float _2722 = _2721 * _2715;
        float _2723 = _2721 * _2716;
        float _2724 = _2721 * _2717;
        float _2725 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2695].xyz));
        float _4686 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2729 = dot(vec3(_742, _743, _744), vec3(_2722, _2723, _2724));
        float _4697 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2733 = dot(vec3(cbLight._m0[_2695].xyz), vec3(_2722, _2723, _2724));
        float _4708 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2737 = _2714 * _2714;
        float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
        float _2750 = (exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2751 = 1.0 - _2714;
        float _2761 = (0.5 / (((_2508 * ((_2728 * _2751) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2508 * _2751) + _2714) * _2728))) * _2728;
        float _4719 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
        _2689 = (((_2750 * cbLight._m0[_2699].x) * _2763) * _2764) + _2631;
        _2691 = (((_2750 * cbLight._m0[_2699].y) * _2763) * _2764) + _2632;
        _2693 = (((_2750 * cbLight._m0[_2699].z) * _2763) * _2764) + _2633;
    }
    float _2795;
    float _2797;
    float _2799;
    if (_2417)
    {
        _2795 = _2689;
        _2797 = _2691;
        _2799 = _2693;
    }
    else
    {
        uint _2806 = _2232 + 3u;
        uint _2810 = _2232 + 11u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _745) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _821;
        float _2827 = cbLight._m0[_2806].y + _822;
        float _2828 = cbLight._m0[_2806].z + _823;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2806].xyz));
        float _4735 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2840 = dot(vec3(_742, _743, _744), vec3(_2833, _2834, _2835));
        float _4746 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4757 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2861 = (exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2862 = 1.0 - _2825;
        float _2872 = (0.5 / (((_2508 * ((_2839 * _2862) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2508 * _2862) + _2825) * _2839))) * _2839;
        float _4768 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2874 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2875 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2795 = (((_2861 * cbLight._m0[_2810].x) * _2874) * _2875) + _2689;
        _2797 = (((_2861 * cbLight._m0[_2810].y) * _2874) * _2875) + _2691;
        _2799 = (((_2861 * cbLight._m0[_2810].z) * _2874) * _2875) + _2693;
    }
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_2230.y == 0u)
    {
        uvec4 _2896 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2897 = _2896.x;
        uint _2908 = uint((float(_2896.y) * floor(float(uint(cbSceneParam._m0[85u].y * _842) / _2897))) + floor(float(uint(cbSceneParam._m0[85u].x * _841) / _2897)));
        float _2918 = (log2(_2008 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2919 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        uint _2922 = uint(isnan(14.0) ? _2919 : (isnan(_2919) ? 14.0 : min(_2919, 14.0)));
        uvec4 _2927 = texelFetch(g_lightClusterGridBuffer, int(((_2922 << 2u) + (_2908 << 6u)) >> 2u));
        uint _2928 = _2927.x;
        uint _2929 = _2896.z;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((((1u << ((_2929 >> 4u) & 15u)) + 4294967295u) & _2928) == 0u) || ((_2929 & 240u) == 0u))
        {
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
        }
        else
        {
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            uint _3167 = 0u;
            uint _3176;
            bool _3177;
            for (;;)
            {
                _3176 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3167 << 2u)) >> 2u)).x;
                _3177 = _3176 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3177)
                {
                    frontier_phi_71_pred = _3166;
                    frontier_phi_71_pred_1 = _3165;
                    frontier_phi_71_pred_2 = _3164;
                    frontier_phi_71_pred_3 = _3163;
                    frontier_phi_71_pred_4 = _3162;
                    frontier_phi_71_pred_5 = _3161;
                }
                else
                {
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    uint _3312;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3176;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    for (;;)
                    {
                        uint _3316 = uint(findLSB(_3312)) + (_3167 << 5u);
                        uint _3313 = (_3312 + 4294967295u) & _3312;
                        uint _3318 = _3316 * 48u;
                        vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3338 = (_3316 * 48u) + 4u;
                        vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3357 = (_3316 * 48u) + 8u;
                        vec3 _3368 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3357)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 2u)).x));
                        float _3372 = _3332.x - _2006;
                        float _3373 = _3332.y - _2007;
                        float _3374 = _3332.z - _2008;
                        float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                        float _3378 = inversesqrt(_3375);
                        float _3379 = _3378 * _3372;
                        float _3380 = _3378 * _3373;
                        float _3381 = _3378 * _3374;
                        float _3382 = dot(vec3(_860, _863, _866), vec3(_3379, _3380, _3381));
                        float _3387 = 1.0 - (_3375 * _3332.w);
                        float _4794 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3388 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3389 = sqrt(_3375) * _3351.w;
                        float _3392 = 1.39999997615814208984375 / (_3389 + 1.39999997615814208984375);
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3382) + _3393;
                        float _3399 = _3389 * _3389;
                        float _3403 = ((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3388) / ((_3399 * 0.699999988079071044921875) + 1.0);
                        float _3407 = (-0.0) - _2006;
                        float _3408 = (-0.0) - _2007;
                        float _3409 = (-0.0) - _2008;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3414 = _3413 * _3407;
                        float _3415 = _3413 * _3408;
                        float _3416 = _3413 * _3409;
                        float _3423 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                        float _3424 = 1.0 - _920;
                        float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                        float _3432 = _3431 * _3431;
                        float _3433 = _3432 * _3432;
                        float _3434 = _3414 + _3379;
                        float _3435 = _3415 + _3380;
                        float _3436 = _3416 + _3381;
                        float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                        float _3444 = dot(vec3(_860, _863, _866), vec3(_3414, _3415, _3416));
                        float _4810 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3447 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3448 = dot(vec3(_860, _863, _866), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                        float _4821 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3451 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                        float _3456 = _3392 * _3432;
                        float _3457 = _3456 * _3456;
                        float _3460 = ((1.0 - _3457) * _3382) + _3457;
                        float _4832 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3461 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3462 = 1.0 - _3432;
                        float _3472 = (0.5 / (((_3461 * ((_3447 * _3462) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3432) * _3447))) * _3461;
                        float _4843 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3483 = (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) / ((_3455 * _3455) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125))) * _3388;
                        _3236 = (_3403 * _3351.x) + _3309;
                        _3237 = (_3403 * _3351.y) + _3310;
                        _3238 = (_3403 * _3351.z) + _3311;
                        _3233 = (_3483 * _3368.x) + _3306;
                        _3234 = (_3483 * _3368.y) + _3307;
                        _3235 = (_3483 * _3368.z) + _3308;
                        if (_3313 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3313;
                        }
                    }
                    frontier_phi_71_pred = _3238;
                    frontier_phi_71_pred_1 = _3237;
                    frontier_phi_71_pred_2 = _3236;
                    frontier_phi_71_pred_3 = _3235;
                    frontier_phi_71_pred_4 = _3234;
                    frontier_phi_71_pred_5 = _3233;
                }
                _3019 = frontier_phi_71_pred;
                _3017 = frontier_phi_71_pred_1;
                _3015 = frontier_phi_71_pred_2;
                _3013 = frontier_phi_71_pred_3;
                _3011 = frontier_phi_71_pred_4;
                _3009 = frontier_phi_71_pred_5;
                uint _3168 = _3167 + 1u;
                if (_3168 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3161 = _3009;
                    _3162 = _3011;
                    _3163 = _3013;
                    _3164 = _3015;
                    _3165 = _3017;
                    _3166 = _3019;
                    _3167 = _3168;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
        }
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.z;
        uint _3025 = (_3023 >> 8u) & 15u;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        if (((4294967295u << _3025) & _2928) == 0u)
        {
            _3129 = _3008;
            _3131 = _3010;
            _3133 = _3012;
            _3135 = _3014;
            _3137 = _3016;
            _3139 = _3018;
        }
        else
        {
            float _3154 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
            float _3155 = _3154 * _2006;
            float _3156 = _3154 * _2007;
            float _3157 = _3154 * _2008;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3025 < ((_3023 >> 12u) & 15u))
            {
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3289 = _3008;
                float _3290 = _3010;
                float _3291 = _3012;
                float _3292 = _3014;
                float _3293 = _3016;
                float _3294 = _3018;
                uint _3295 = _3025;
                uint _3304;
                bool _3305;
                for (;;)
                {
                    _3304 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3295 << 2u)) >> 2u)).x;
                    _3305 = _3304 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3305)
                    {
                        frontier_phi_82_pred = _3294;
                        frontier_phi_82_pred_1 = _3293;
                        frontier_phi_82_pred_2 = _3292;
                        frontier_phi_82_pred_3 = _3291;
                        frontier_phi_82_pred_4 = _3290;
                        frontier_phi_82_pred_5 = _3289;
                    }
                    else
                    {
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3510 = _3289;
                        float _3511 = _3290;
                        float _3512 = _3291;
                        float _3513 = _3292;
                        float _3514 = _3293;
                        float _3515 = _3294;
                        uint _3516 = _3304;
                        uint _3517;
                        vec4 _3542;
                        float _3543;
                        vec4 _3558;
                        vec3 _3570;
                        vec4 _3585;
                        vec4 _3600;
                        float _3646;
                        bool _3647;
                        for (;;)
                        {
                            uint _3527 = ((_3295 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3516));
                            _3517 = (_3516 + 4294967295u) & _3516;
                            uint _3529 = _3527 * 40u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            _3543 = _3542.w;
                            uint _3545 = (_3527 * 40u) + 4u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3527 * 40u) + 8u;
                            _3570 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x));
                            uint _3572 = (_3527 * 40u) + 16u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3587 = (_3527 * 40u) + 20u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3527 * 40u) + 24u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3621 = (_3527 * 40u) + 28u;
                            vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3646 = fma(_2008, _3634.z, fma(_2007, _3634.y, _3634.x * _2006)) + _3634.w;
                            _3647 = !((fma(_2008, _3615.z, fma(_2007, _3615.y, _3615.x * _2006)) + _3615.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3647)
                            {
                                float _3674 = _3542.x - _2006;
                                float _3675 = _3542.y - _2007;
                                float _3676 = _3542.z - _2008;
                                float _3677 = dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676));
                                float _3680 = inversesqrt(_3677);
                                float _3681 = _3680 * _3674;
                                float _3682 = _3680 * _3675;
                                float _3683 = _3680 * _3676;
                                float _3687 = 1.0 - (_3677 / (_3543 * _3543));
                                float _4854 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3692 = sqrt(_3677) * _3558.w;
                                float _3694 = 1.39999997615814208984375 / (_3692 + 1.39999997615814208984375);
                                float _3695 = _3694 * _3694;
                                float _3698 = ((1.0 - _3695) * dot(vec3(_3681, _3682, _3683), vec3(_860, _863, _866))) + _3695;
                                float _3701 = _3692 * _3692;
                                float _3705 = (fma(_2008, _3585.z, fma(_2007, _3585.y, _3585.x * _2006)) + _3585.w) / _3646;
                                float _3706 = (fma(_2008, _3600.z, fma(_2007, _3600.y, _3600.x * _2006)) + _3600.w) / _3646;
                                float _3710 = 1.0 - dot(vec2(_3705, _3706), vec2(_3705, _3706));
                                float _4870 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3712 = _3711 * (((isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0))) * _3688) / ((_3701 * 0.699999988079071044921875) + 1.0));
                                float _3724 = exp2(log2(1.0 / ((_3701 * 3.5) + 5.0)) * 0.25);
                                float _3725 = 1.0 - _920;
                                float _3732 = sqrt(1.0 - ((1.0 - (_3725 * _3725)) * (1.0 - (_3724 * _3724))));
                                float _3733 = _3732 * _3732;
                                float _3734 = _3733 * _3733;
                                float _3735 = _3681 - _3155;
                                float _3736 = _3682 - _3156;
                                float _3737 = _3683 - _3157;
                                float _3741 = inversesqrt(dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737)));
                                float _3745 = dot(vec3(_860, _863, _866), vec3((-0.0) - _3155, (-0.0) - _3156, (-0.0) - _3157));
                                float _4881 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3749 = dot(vec3(_860, _863, _866), vec3(_3741 * _3735, _3741 * _3736, _3741 * _3737));
                                float _4892 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3756 = ((_3752 * _3752) * (_3734 + (-1.0))) + 1.0;
                                float _3757 = _3694 * _3733;
                                float _3758 = _3757 * _3757;
                                float _3764 = ((1.0 - _3758) * dot(vec3(_860, _863, _866), vec3(_3681, _3682, _3683))) + _3758;
                                float _4903 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3765 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3766 = 1.0 - _3733;
                                float _3776 = (0.5 / (((_3765 * ((_3748 * _3766) + _3733)) + 9.9999999392252902907785028219223e-09) + (((_3765 * _3766) + _3733) * _3748))) * _3765;
                                float _4914 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3786 = (_3711 * _3688) * (((_3734 * 3.1415927410125732421875) * (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0)))) / ((_3756 * _3756) * ((_3701 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3712 * _3558.z;
                                frontier_phi_88_pred_1 = _3712 * _3558.y;
                                frontier_phi_88_pred_2 = _3712 * _3558.x;
                                frontier_phi_88_pred_3 = _3786 * _3570.z;
                                frontier_phi_88_pred_4 = _3786 * _3570.y;
                                frontier_phi_88_pred_5 = _3786 * _3570.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3795 = frontier_phi_88_pred;
                            _3794 = frontier_phi_88_pred_1;
                            _3793 = frontier_phi_88_pred_2;
                            _3792 = frontier_phi_88_pred_3;
                            _3791 = frontier_phi_88_pred_4;
                            _3790 = frontier_phi_88_pred_5;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            if (_3517 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3517;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3502;
                        frontier_phi_82_pred_1 = _3501;
                        frontier_phi_82_pred_2 = _3500;
                        frontier_phi_82_pred_3 = _3499;
                        frontier_phi_82_pred_4 = _3498;
                        frontier_phi_82_pred_5 = _3497;
                    }
                    _3140 = frontier_phi_82_pred;
                    _3138 = frontier_phi_82_pred_1;
                    _3136 = frontier_phi_82_pred_2;
                    _3134 = frontier_phi_82_pred_3;
                    _3132 = frontier_phi_82_pred_4;
                    _3130 = frontier_phi_82_pred_5;
                    uint _3296 = _3295 + 1u;
                    if (_3296 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3289 = _3130;
                        _3290 = _3132;
                        _3291 = _3134;
                        _3292 = _3136;
                        _3293 = _3138;
                        _3294 = _3140;
                        _3295 = _3296;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3136;
                frontier_phi_63_64_ladder_1 = _3140;
                frontier_phi_63_64_ladder_2 = _3138;
                frontier_phi_63_64_ladder_3 = _3134;
                frontier_phi_63_64_ladder_4 = _3132;
                frontier_phi_63_64_ladder_5 = _3130;
            }
            else
            {
                frontier_phi_63_64_ladder = _3014;
                frontier_phi_63_64_ladder_1 = _3018;
                frontier_phi_63_64_ladder_2 = _3016;
                frontier_phi_63_64_ladder_3 = _3012;
                frontier_phi_63_64_ladder_4 = _3010;
                frontier_phi_63_64_ladder_5 = _3008;
            }
            _3129 = frontier_phi_63_64_ladder_5;
            _3131 = frontier_phi_63_64_ladder_4;
            _3133 = frontier_phi_63_64_ladder_3;
            _3135 = frontier_phi_63_64_ladder;
            _3137 = frontier_phi_63_64_ladder_2;
            _3139 = frontier_phi_63_64_ladder_1;
        }
        float _3144 = isnan(1.0) ? _904 : (isnan(_904) ? 1.0 : min(_904, 1.0));
        _2941 = (_3144 * _3135) + _2472;
        _2943 = (_3144 * _3137) + _2474;
        _2945 = (_3144 * _3139) + _2476;
        _2947 = ((_3129 * 0.039999999105930328369140625) * _3144) + _2795;
        _2949 = ((_3131 * 0.039999999105930328369140625) * _3144) + _2797;
        _2951 = ((_3133 * 0.039999999105930328369140625) * _3144) + _2799;
    }
    else
    {
        _2941 = _2472;
        _2943 = _2474;
        _2945 = _2476;
        _2947 = _2795;
        _2949 = _2797;
        _2951 = _2799;
    }
    float _4930 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4941 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4952 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2968 = ((isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2941 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _904))) + ((_2947 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    float _2969 = ((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2943 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _904))) + ((_2949 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    float _2970 = ((isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2945 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _904))) + ((_2951 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    uint _2971 = _246 + 6u;
    float _2979 = _841 / cbSceneParam._m0[86u].x;
    float _2980 = _842 / cbSceneParam._m0[86u].y;
    vec4 _2994 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, (log2((isnan(cbSceneParam._m0[77u].w) ? _763 : (isnan(_763) ? cbSceneParam._m0[77u].w : min(_763, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2996 = _2994.x;
    float _2997 = _2994.y;
    float _2998 = _2994.z;
    float _2999 = _2994.w;
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    if (_763 > cbSceneParam._m0[78u].w)
    {
        float _3033 = isnan(_763) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _763 : min(cbSceneParam._m0[80u].w, _763));
        float _3034 = _3033 / _763;
        float _3045 = _3034 * _814;
        float _3046 = _815 * _3034;
        float _3047 = (-0.0) - _3046;
        float _3049 = _3034 * _816;
        float _3051 = (cbSceneParam._m0[77u].w * _3047) / _3033;
        float _3052 = _3051 + cbSceneParam._m0[79u].w;
        float _3053 = cbSceneParam._m0[79u].w - _3046;
        float _3059 = sqrt(((_3045 * _3045) + (_3046 * _3046)) + (_3049 * _3049));
        float _3062 = (1.0 - (cbSceneParam._m0[77u].w / _3033)) * _3059;
        float _3067 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3069 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3246;
        if (abs((_3047 - _3051) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3246 = ((((_3052 > 0.0) ? exp2(_3067 * _3052) : (2.0 - exp2(_3069 * _3052))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3062;
        }
        else
        {
            float _3190 = 1.0 / cbSceneParam._m0[80u].x;
            float _3191 = isnan(_3053) ? _3052 : (isnan(_3052) ? _3053 : max(_3052, _3053));
            float _3192 = isnan(_3053) ? _3052 : (isnan(_3052) ? _3053 : min(_3052, _3053));
            float _3201 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : min(_3191, 0.0));
            float _3202 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : min(_3192, 0.0));
            _3246 = ((abs(_3059 / _3047) * cbSceneParam._m0[80u].y) * ((((_3201 - _3202) * 2.0) - ((exp2(_3067 * (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0)))) - exp2(_3067 * (isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))))) * _3190)) - ((exp2(_3069 * _3201) - exp2(_3069 * _3202)) * _3190))) + (_3062 * cbSceneParam._m0[80u].z);
        }
        vec4 _3248 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, 1.0), 0.0);
        float _3257 = exp2((_3246 * (-1.44269502162933349609375)) * (1.0 - _3248.w));
        float _3258 = log2(_3257);
        float _3274 = log2(_2999);
        _3071 = (exp2(_3274 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].x)) * _3248.x) / cbSceneParam._m0[78u].x)) + _2996;
        _3073 = (exp2(_3274 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].y)) * _3248.y) / cbSceneParam._m0[78u].y)) + _2997;
        _3075 = (exp2(_3274 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].z)) * _3248.z) / cbSceneParam._m0[78u].z)) + _2998;
        _3077 = _3257 * _2999;
    }
    else
    {
        _3071 = _2996;
        _3073 = _2997;
        _3075 = _2998;
        _3077 = _2999;
    }
    bool _3284;
    vec4 _3087;
    vec4 _3109;
    float _3111;
    float _3115;
    float _3116;
    float _3117;
    float _3118;
    bool _3128;
    for (;;)
    {
        _3087 = cbMatDynParam._m0[0u];
        float _3089 = roundEven(_3087.y);
        bool _3090 = _3089 == 3.0;
        float _3091 = log2(_3077);
        float _3098 = exp2(_3091 * cbSceneParam._m0[78u].x) * _2968;
        float _3099 = exp2(_3091 * cbSceneParam._m0[78u].y) * _2969;
        float _3100 = exp2(_3091 * cbSceneParam._m0[78u].z) * _2970;
        float _3107 = _830 + (-0.5);
        _3109 = cbMtdParam._m0[1u];
        _3111 = _3109.y * _3107;
        float _3114 = (_3089 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3115 = _3114 * (_3090 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3071)));
        _3116 = _3114 * (_3090 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3073)));
        _3117 = _3114 * (_3090 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3075)));
        _3118 = _3107 * 0.999000012874603271484375;
        _3128 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3128)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _3118) < 0.5)
            {
                _3284 = true;
                break;
            }
        }
        uint _3225 = _879 + uint(_3087.w);
        if ((cbInstanceData._m0[_3225].w < 1.0) && ((cbInstanceData._m0[_3225].w + _3118) < 0.5))
        {
            _3284 = true;
            break;
        }
        if ((_3111 + 1.0) < _3109.x)
        {
            _3284 = true;
            break;
        }
        _3284 = false;
        break;
    }
    float _3488;
    if (_3284)
    {
        discard_state = true;
        _3488 = 0.0;
    }
    else
    {
        _3488 = cbInstanceData._m0[_2971].w;
    }
    SV_Target.x = _3115;
    SV_Target.y = _3116;
    SV_Target.z = _3117;
    SV_Target.w = _3488;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2971].w;
    discard_exit();
}


