#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1474;
float _3833;
float _3834;
float _3835;
float _3836;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3845 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3856 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3867 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _387.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[24u].z) + _439) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3878 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _464 = (_457 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _465 = (_457 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _466 = (_457 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _387.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[24u].z) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3889 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _304) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _305) + cbTextureTilingScale._m0[24u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _576 = _574.x;
    float _586 = dot(vec4(_576, _574.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _598 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _387.z) * 2.0) - ((((_576 - _586) * cbMtdParam._m0[24u].z) + _586) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3900 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _606 = (_599 * ((_557.x * cbMtdParam._m0[14u].x) - _537)) + _537;
    float _607 = (_599 * ((_557.y * cbMtdParam._m0[14u].y) - _538)) + _538;
    float _608 = (_599 * ((_557.z * cbMtdParam._m0[14u].z) - _539)) + _539;
    float _612 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _606;
    float _615 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _607;
    float _618 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _608;
    float _625 = ((_606 - _612) * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) + _612;
    float _626 = ((_607 - _615) * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) + _615;
    float _627 = ((_608 - _618) * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) + _618;
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _681 = _679.x;
    float _682 = _679.y;
    float _683 = _679.z;
    float _690 = ((_662.x - _681) * _457) + _681;
    float _691 = ((_662.y - _682) * _457) + _682;
    float _692 = ((_662.z - _683) * _457) + _683;
    vec4 _704 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _715 = ((_704.x - _690) * _530) + _690;
    float _716 = ((_704.y - _691) * _530) + _691;
    float _717 = ((_704.z - _692) * _530) + _692;
    vec4 _729 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _304) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _305) + cbTextureTilingScale._m0[23u].w));
    float _742 = ((_729.z - _717) * _599) + _717;
    float _745 = ((((_729.x - _715) * _599) + _715) * 2.0) + (-1.0);
    float _746 = ((((_729.y - _716) * _599) + _716) * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _3911 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _752 = sqrt(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))));
    vec4 _772 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _784 = (_745 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_639.x * 2.0) + (-1.0)))) + (((_772.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _785 = (_746 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_639.y * 2.0) + (-1.0)))) + (((_772.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _799 = _797.x;
    float _800 = 1.0 - _799;
    float _826 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_799 - _800) * cbMtdParam._m0[24u].y) + _800) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3922 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _827 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _835 = ((((cbMtdParam._m0[10u].x - _625) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _827) + _625;
    float _836 = ((((cbMtdParam._m0[10u].y - _626) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _827) + _626;
    float _837 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _627)) * _827) + _627;
    float _842 = (((_639.z - _742) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _742;
    float _846 = ((_772.z - _842) * cbMtdParam._m0[19u].w) + _842;
    float _850 = ((cbMtdParam._m0[23u].y - _846) * _827) + _846;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _877 = (_871.x * 2.0) + (-1.0);
    float _878 = (_871.y * 2.0) + (-1.0);
    float _879 = dot(vec2(_877, _878), vec2(_877, _878));
    float _3933 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _895 = (_827 * (((cbMtdParam._m0[22u].z * _784) - _784) + _877)) + _784;
    float _896 = (_827 * (((cbMtdParam._m0[22u].z * _785) - _785) + _878)) + _785;
    float _897 = (_827 * (sqrt(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) - _752)) + _752;
    float _899 = cbMtdParam._m0[22u].x + _772.w;
    float _902 = fma(_897, _253 * NORMAL.x, fma(_896, _260 * TANGENT.x, (_246 * _238) * _895));
    float _905 = fma(_897, _253 * NORMAL.y, fma(_896, _260 * TANGENT.y, (_246 * _239) * _895));
    float _908 = fma(_897, _253 * NORMAL.z, fma(_896, _260 * TANGENT.z, (_246 * _240) * _895));
    float _912 = inversesqrt(dot(vec3(_902, _905, _908), vec3(_902, _905, _908)));
    float _913 = _912 * _902;
    float _914 = _912 * _905;
    float _915 = _912 * _908;
    float _3944 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _916 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _3966 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _3977 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _3988 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _934 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _985 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _975);
    float _986 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _975);
    float _987 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _975);
    float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
    float _992 = _985 * _991;
    float _993 = _986 * _991;
    float _994 = _987 * _991;
    vec4 _999 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1001 = _999.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1155 = sqrt(((_985 * _985) + (_986 * _986)) + (_987 * _987));
        float _1161 = (cbMatDynParam._m0[5u].x * _1155) + cbMatDynParam._m0[5u].y;
        float _3999 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1166 = (cbMatDynParam._m0[5u].z * _1155) + cbMatDynParam._m0[5u].w;
        float _4010 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) - _1162)) + _1162) < ((_1001 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1012 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1013 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1031 = fma(_915, cbSceneParam._m0[5u].z, fma(_914, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _913));
    float _1034 = fma(_915, cbSceneParam._m0[6u].z, fma(_914, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _913));
    float _1037 = fma(_915, cbSceneParam._m0[7u].z, fma(_914, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _913));
    uint _1050 = _285 + 9u;
    uint _1051 = _1050 + uint(cbMatDynParam._m0[0u].w);
    float _1057 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * cbInstanceData._m0[_1051].x;
    float _1058 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_1051].y;
    float _1059 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_1051].z;
    float _4021 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    vec4 _1071 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1012, cbSceneParam._m0[86u].y * _1013));
    float _1075 = ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * TEXCOORD_5.w) * _1071.x;
    float _1076 = dot(vec3(_913, _914, _915), vec3(_992, _993, _994));
    float _1079 = _1076 * 2.0;
    float _1083 = (_1079 * _913) - _992;
    float _1084 = (_1079 * _914) - _993;
    float _1085 = (_1079 * _915) - _994;
    float _1089 = abs(dot(vec3(_992, _993, _994), vec3(_913, _914, _915)));
    float _4054 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1091 = sqrt(_916);
    float _1104 = exp2((_1091 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1091 * 3.0));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1473;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1198 = fma(_1144, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136));
        float _1202 = fma(_1144, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136));
        float _1206 = fma(_1144, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136));
        float _1231 = _1136 + _913;
        float _1232 = _1140 + _914;
        float _1233 = _1144 + _915;
        float _1243 = fma(_1233, cbModelParam._m0[26u].z, fma(_1232, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231)) - _1198;
        float _1244 = fma(_1233, cbModelParam._m0[27u].z, fma(_1232, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231)) - _1202;
        float _1245 = fma(_1233, cbModelParam._m0[28u].z, fma(_1232, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231)) - _1206;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1262 = ((_1249 * _1243) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1198 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1244) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1202 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1249 * _1245) / cbModelParam._m0[34u].z) + ((((((_1206 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1301 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1267.x + (-0.5));
        float _1303 = _1301 * (_1267.y + (-0.5));
        float _1304 = _1301 * (_1267.z + (-0.5));
        float _1311 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1274.x + (-0.5));
        float _1313 = _1311 * (_1274.y + (-0.5));
        float _1314 = _1311 * (_1274.z + (-0.5));
        float _1321 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1281.x + (-0.5));
        float _1323 = _1321 * (_1281.y + (-0.5));
        float _1324 = _1321 * (_1281.z + (-0.5));
        float _1331 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1288.x + (-0.5));
        float _1333 = _1331 * (_1288.y + (-0.5));
        float _1334 = _1331 * (_1288.z + (-0.5));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = _1302 * 0.5;
        float _1339 = _1312 * 0.5;
        float _1340 = _1322 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1355 = (dot(vec3(_913, _914, _915), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1365 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4102 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1367 + 1.0))) + _1372) * _1335;
        float _1382 = _1303 * 0.5;
        float _1383 = _1313 * 0.5;
        float _1384 = _1323 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_913, _914, _915), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4135 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1409 + 1.0))) + _1414) * _1336;
        float _1424 = _1304 * 0.5;
        float _1425 = _1314 * 0.5;
        float _1426 = _1324 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_913, _914, _915), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4168 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1451 + 1.0))) + _1456) * _1337;
        _1473 = _1304;
        _1475 = _1303;
        _1476 = _1302;
        _1477 = _1314;
        _1478 = _1313;
        _1479 = _1312;
        _1480 = _1324;
        _1481 = _1323;
        _1482 = _1322;
        _1483 = _1337;
        _1484 = _1336;
        _1485 = _1335;
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
    }
    else
    {
        _1473 = _1474;
        _1475 = _1474;
        _1476 = _1474;
        _1477 = _1474;
        _1478 = _1474;
        _1479 = _1474;
        _1480 = _1474;
        _1481 = _1474;
        _1482 = _1474;
        _1483 = _1474;
        _1484 = _1474;
        _1485 = _1474;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1514 = fma(_1144, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136));
        float _1518 = fma(_1144, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136));
        float _1522 = fma(_1144, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136));
        float _1545 = _1136 + _913;
        float _1546 = _1140 + _914;
        float _1547 = _1144 + _915;
        float _1557 = fma(_1547, cbModelParam._m0[30u].z, fma(_1546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1545)) - _1514;
        float _1558 = fma(_1547, cbModelParam._m0[31u].z, fma(_1546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1545)) - _1518;
        float _1559 = fma(_1547, cbModelParam._m0[32u].z, fma(_1546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1545)) - _1522;
        float _1563 = inversesqrt(dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559)));
        float _1576 = ((_1563 * _1557) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1514 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1563 * _1558) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1518 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1578 = ((_1563 * _1559) / cbModelParam._m0[35u].z) + ((((((_1522 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        float _1613 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1580.x + (-0.5));
        float _1615 = _1613 * (_1580.y + (-0.5));
        float _1616 = _1613 * (_1580.z + (-0.5));
        float _1623 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1587.x + (-0.5));
        float _1625 = _1623 * (_1587.y + (-0.5));
        float _1626 = _1623 * (_1587.z + (-0.5));
        float _1633 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1594.x + (-0.5));
        float _1635 = _1633 * (_1594.y + (-0.5));
        float _1636 = _1633 * (_1594.z + (-0.5));
        float _1643 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1601.x + (-0.5));
        float _1645 = _1643 * (_1601.y + (-0.5));
        float _1646 = _1643 * (_1601.z + (-0.5));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = _1614 * 0.5;
        float _1651 = _1624 * 0.5;
        float _1652 = _1634 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_913, _914, _915), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4231 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1677 + 1.0))) + _1682) * _1647;
        float _1692 = _1615 * 0.5;
        float _1693 = _1625 * 0.5;
        float _1694 = _1635 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_913, _914, _915), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4264 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1719 + 1.0))) + _1724) * _1648;
        float _1734 = _1616 * 0.5;
        float _1735 = _1626 * 0.5;
        float _1736 = _1636 * 0.5;
        float _1737 = dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736));
        float _1742 = (_1737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1737);
        float _1750 = (dot(vec3(_913, _914, _915), vec3(_1742 * _1734, _1742 * _1735, _1742 * _1736)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1759 = sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1761 = _1760 * 2.0;
        float _1765 = (1.0 - _1760) / (_1760 + 1.0);
        float _4297 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1775 = ((((1.0 - _1766) * (_1761 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1761 + 1.0))) + _1766) * _1649;
        _1783 = _1616;
        _1784 = _1615;
        _1785 = _1614;
        _1786 = _1626;
        _1787 = _1625;
        _1788 = _1624;
        _1789 = _1636;
        _1790 = _1635;
        _1791 = _1634;
        _1792 = _1649;
        _1793 = _1648;
        _1794 = _1647;
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)));
    }
    else
    {
        _1783 = _1474;
        _1784 = _1474;
        _1785 = _1474;
        _1786 = _1474;
        _1787 = _1474;
        _1788 = _1474;
        _1789 = _1474;
        _1790 = _1474;
        _1791 = _1474;
        _1792 = _1474;
        _1793 = _1474;
        _1794 = _1474;
        _1795 = 0.0;
        _1796 = 0.0;
        _1797 = 0.0;
    }
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1486)) + _1486;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1487)) + _1487;
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1488)) + _1488;
    float _1830 = fma(_1809, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1807 * cbSceneParam._m0[89u].x));
    float _1833 = fma(_1809, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1807 * cbSceneParam._m0[90u].x));
    float _1836 = fma(_1809, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1807));
    float _1851 = _1083 * 0.5;
    float _1852 = _1084 * 0.5;
    float _1853 = _1085 * 0.5;
    float _1854 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1857 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1860 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1894;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1867 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1473, _1477, _1480, _1483));
        float _1871 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1875 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1882 = dot(vec4(cbModelParam._m0[39u]), vec4(_1851, _1852, _1853, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1905;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1896 = dot(vec4(cbModelParam._m0[40u]), vec4(_1851, _1852, _1853, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1896) ? 0.0 : (isnan(0.0) ? _1896 : max(0.0, _1896))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1909 = (_1905 * cbModelParam._m0[1u].x) + (_1894 * (1.0 - cbModelParam._m0[1u].x));
    float _1919 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _916);
    float _1920 = isnan(_1919) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1919 : min(cbModelParam._m0[25u].z, _1919));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1968 = fma(_1144, cbModelParam._m0[13u].z, fma(_1140, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136)) + cbModelParam._m0[13u].w;
        float _1972 = fma(_1144, cbModelParam._m0[14u].z, fma(_1140, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136)) + cbModelParam._m0[14u].w;
        float _1976 = fma(_1144, cbModelParam._m0[15u].z, fma(_1140, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136)) + cbModelParam._m0[15u].w;
        float _1979 = fma(_1085, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083));
        float _1982 = fma(_1085, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083));
        float _1985 = fma(_1085, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083));
        float _2013;
        if (_1979 > 0.0)
        {
            _2013 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2013 = frontier_phi_17_15_ladder;
        }
        float _2215;
        if (_1982 > 0.0)
        {
            _2215 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2215 = frontier_phi_26_22_ladder;
        }
        float _2458;
        if (_1985 > 0.0)
        {
            _2458 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2458 = frontier_phi_38_33_ladder;
        }
        float _2460 = isnan(_2215) ? _2013 : (isnan(_2013) ? _2215 : min(_2013, _2215));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1979) + _1968;
        float _2466 = (_2461 * _1982) + _1972;
        float _2467 = (_2461 * _1985) + _1976;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2468;
        float _2472 = _2468 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 > _2472) || ((_2466 < _2470) || ((_2465 < _2470) || (_2465 > _2472))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2467, cbModelParam._m0[9u].z, fma(_2466, cbModelParam._m0[9u].y, _2465 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2467, cbModelParam._m0[10u].z, fma(_2466, cbModelParam._m0[10u].y, _2465 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2467, cbModelParam._m0[11u].z, fma(_2466, cbModelParam._m0[11u].y, _2465 * cbModelParam._m0[11u].x))), _1920);
            frontier_phi_16_38_ladder = _2591.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2591.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2591.x * cbModelParam._m0[1u].y;
        }
        _2001 = frontier_phi_16_38_ladder_2;
        _2003 = frontier_phi_16_38_ladder_1;
        _2005 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1083, _1084, _1085), _1920);
        _2001 = _1989.x * cbModelParam._m0[1u].y;
        _2003 = _1989.y * cbModelParam._m0[1u].y;
        _2005 = _1989.z * cbModelParam._m0[1u].y;
    }
    float _2009 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _916);
    float _2010 = isnan(_2009) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2009 : min(cbModelParam._m0[25u].w, _2009));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2065 = fma(_1144, cbModelParam._m0[21u].z, fma(_1140, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136)) + cbModelParam._m0[21u].w;
        float _2069 = fma(_1144, cbModelParam._m0[22u].z, fma(_1140, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136)) + cbModelParam._m0[22u].w;
        float _2073 = fma(_1144, cbModelParam._m0[23u].z, fma(_1140, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136)) + cbModelParam._m0[23u].w;
        float _2076 = fma(_1085, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083));
        float _2079 = fma(_1085, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083));
        float _2082 = fma(_1085, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083));
        float _2220;
        if (_2076 > 0.0)
        {
            _2220 = abs((1.0 - _2065) / _2076);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2065 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2220 = frontier_phi_28_24_ladder;
        }
        float _2485;
        if (_2079 > 0.0)
        {
            _2485 = abs((1.0 - _2069) / _2079);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2069 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2485 = frontier_phi_40_35_ladder;
        }
        float _2690;
        if (_2082 > 0.0)
        {
            _2690 = abs((1.0 - _2073) / _2082);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2073 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2690 = frontier_phi_49_46_ladder;
        }
        float _2692 = isnan(_2485) ? _2220 : (isnan(_2220) ? _2485 : min(_2220, _2485));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _2076) + _2065;
        float _2698 = (_2693 * _2079) + _2069;
        float _2699 = (_2693 * _2082) + _2073;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2701 = (-1.0) - _2700;
        float _2703 = _2700 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2699 > _2703) || ((_2699 < _2701) || ((_2698 > _2703) || ((_2698 < _2701) || ((_2697 < _2701) || (_2697 > _2703))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2699, cbModelParam._m0[17u].z, fma(_2698, cbModelParam._m0[17u].y, _2697 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2699, cbModelParam._m0[18u].z, fma(_2698, cbModelParam._m0[18u].y, _2697 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2699, cbModelParam._m0[19u].z, fma(_2698, cbModelParam._m0[19u].y, _2697 * cbModelParam._m0[19u].x))), _2010);
            frontier_phi_25_49_ladder = _2898.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2898.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2898.x * cbModelParam._m0[1u].z;
        }
        _2101 = frontier_phi_25_49_ladder_2;
        _2103 = frontier_phi_25_49_ladder_1;
        _2105 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2085 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1083, _1084, _1085), _2010);
        _2101 = _2085.x * cbModelParam._m0[1u].z;
        _2103 = _2085.y * cbModelParam._m0[1u].z;
        _2105 = _2085.z * cbModelParam._m0[1u].z;
    }
    float _2117 = ((((1.0 - _1104) * ((_1091 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1104 * _1091)) * _1075;
    float _2118 = _2117 * ((cbModelParam._m0[1u].w * (_2101 - _2001)) + _2001);
    float _2119 = _2117 * ((cbModelParam._m0[1u].w * (_2103 - _2003)) + _2003);
    float _2120 = _2117 * ((cbModelParam._m0[1u].w * (_2105 - _2005)) + _2005);
    float _2123 = fma(_2120, cbSceneParam._m0[89u].z, fma(_2119, cbSceneParam._m0[89u].y, _2118 * cbSceneParam._m0[89u].x));
    float _2126 = fma(_2120, cbSceneParam._m0[90u].z, fma(_2119, cbSceneParam._m0[90u].y, _2118 * cbSceneParam._m0[90u].x));
    float _2129 = fma(_2120, cbSceneParam._m0[91u].z, fma(_2119, cbSceneParam._m0[91u].y, _2118 * cbSceneParam._m0[91u].x));
    uvec4 _2139 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2141 = _2139.x * 14u;
    uint _2142 = _2141 + 13u;
    float _2149 = _1075 + (-1.0);
    float _2154 = (cbLight._m0[_2142].x * _2149) + 1.0;
    float _2155 = (cbLight._m0[_2142].y * _2149) + 1.0;
    float _2156 = (cbLight._m0[_2142].z * _2149) + 1.0;
    float _2157 = (cbLight._m0[_2142].w * _2149) + 1.0;
    uint _2158 = _2141 + 5u;
    float _2164 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
    uint _2168 = _2141 + 4u;
    float _2174 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
    uint _2178 = _2141 | 1u;
    float _2189 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_913, _914, _915));
    float _2192 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_913, _914, _915));
    float _4433 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _4444 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2197 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
    float _2199 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2206 = ((cbLight._m0[_2158].x * _2164) * _2199) + ((cbLight._m0[_2168].x * _2174) * _2197);
    float _2207 = ((_2164 * cbLight._m0[_2158].y) * _2199) + ((_2174 * cbLight._m0[_2168].y) * _2197);
    float _2208 = ((_2164 * cbLight._m0[_2158].z) * _2199) + ((_2174 * cbLight._m0[_2168].z) * _2197);
    uvec4 _2212 = floatBitsToUint(cbLight._m0[_2141 + 12u]);
    bool _2214 = _2212.x == 0u;
    float _2225;
    float _2227;
    float _2229;
    if (_2214)
    {
        _2225 = _2206;
        _2227 = _2207;
        _2229 = _2208;
    }
    else
    {
        uint _2233 = _2141 + 6u;
        float _2249 = (dot(vec3(cbLight._m0[_2141 + 2u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4455 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2252 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2225 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2206;
        _2227 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2207;
        _2229 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2208;
    }
    bool _2232 = _2212.y == 0u;
    float _2270;
    float _2272;
    float _2274;
    if (_2232)
    {
        _2270 = _2225;
        _2272 = _2227;
        _2274 = _2229;
    }
    else
    {
        uint _2429 = _2141 + 7u;
        float _2445 = (dot(vec3(cbLight._m0[_2141 + 3u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2446 = _2445 * _2445;
        float _4471 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2447 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2448 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2270 = (((cbLight._m0[_2429].x * 0.3183098733425140380859375) * _2447) * _2448) + _2225;
        _2272 = (((cbLight._m0[_2429].y * 0.3183098733425140380859375) * _2447) * _2448) + _2227;
        _2274 = (((cbLight._m0[_2429].z * 0.3183098733425140380859375) * _2447) * _2448) + _2229;
    }
    uint _2277 = _2141 + 8u;
    float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _916) * 0.949999988079071044921875);
    float _2291 = _2290 * _2290;
    float _2292 = cbLight._m0[_2141].x + _992;
    float _2293 = cbLight._m0[_2141].y + _993;
    float _2294 = cbLight._m0[_2141].z + _994;
    float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
    float _2299 = _2298 * _2292;
    float _2300 = _2298 * _2293;
    float _2301 = _2298 * _2294;
    float _2302 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2141].xyz));
    float _4487 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _4498 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2306 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2307 = dot(vec3(_913, _914, _915), vec3(_2299, _2300, _2301));
    float _4509 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2311 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2299, _2300, _2301));
    float _4520 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = _2291 * _2291;
    float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
    float _2330 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2331 = 1.0 - _2291;
    float _2342 = (0.5 / (((_2306 * ((_2305 * _2331) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2331) + _2291) * _2305))) * _2305;
    float _4531 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2344 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
    uint _2355 = _2141 + 9u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _916) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2178].x + _992;
    float _2369 = cbLight._m0[_2178].y + _993;
    float _2370 = cbLight._m0[_2178].z + _994;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2178].xyz));
    float _4542 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2382 = dot(vec3(_913, _914, _915), vec3(_2375, _2376, _2377));
    float _4553 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2375, _2376, _2377));
    float _4564 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2367 * _2367;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2404 = 1.0 - _2367;
    float _2414 = (0.5 / (((_2306 * ((_2381 * _2404) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2404) + _2367) * _2381))) * _2381;
    float _4575 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    float _2426 = (((_2403 * cbLight._m0[_2355].x) * _2416) * _2164) + (((_2330 * cbLight._m0[_2277].x) * _2344) * _2174);
    float _2427 = (((_2403 * cbLight._m0[_2355].y) * _2416) * _2164) + (((_2330 * cbLight._m0[_2277].y) * _2344) * _2174);
    float _2428 = (((_2403 * cbLight._m0[_2355].z) * _2416) * _2164) + (((_2330 * cbLight._m0[_2277].z) * _2344) * _2174);
    float _2490;
    float _2492;
    float _2494;
    if (_2214)
    {
        _2490 = _2426;
        _2492 = _2427;
        _2494 = _2428;
    }
    else
    {
        uint _2496 = _2141 + 2u;
        uint _2500 = _2141 + 10u;
        float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _916) * 0.949999988079071044921875);
        float _2515 = _2514 * _2514;
        float _2516 = cbLight._m0[_2496].x + _992;
        float _2517 = cbLight._m0[_2496].y + _993;
        float _2518 = cbLight._m0[_2496].z + _994;
        float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
        float _2523 = _2522 * _2516;
        float _2524 = _2522 * _2517;
        float _2525 = _2522 * _2518;
        float _2526 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2496].xyz));
        float _4586 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2530 = dot(vec3(_913, _914, _915), vec3(_2523, _2524, _2525));
        float _4597 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2534 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2523, _2524, _2525));
        float _4608 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2538 = _2515 * _2515;
        float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
        float _2551 = (exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2552 = 1.0 - _2515;
        float _2562 = (0.5 / (((_2306 * ((_2529 * _2552) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2552) + _2515) * _2529))) * _2529;
        float _4619 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2564 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
        float _2565 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2490 = (((_2551 * cbLight._m0[_2500].x) * _2564) * _2565) + _2426;
        _2492 = (((_2551 * cbLight._m0[_2500].y) * _2564) * _2565) + _2427;
        _2494 = (((_2551 * cbLight._m0[_2500].z) * _2564) * _2565) + _2428;
    }
    float _2600;
    float _2602;
    float _2604;
    if (_2232)
    {
        _2600 = _2490;
        _2602 = _2492;
        _2604 = _2494;
    }
    else
    {
        uint _2611 = _2141 + 3u;
        uint _2615 = _2141 + 11u;
        float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _916) * 0.949999988079071044921875);
        float _2630 = _2629 * _2629;
        float _2631 = cbLight._m0[_2611].x + _992;
        float _2632 = cbLight._m0[_2611].y + _993;
        float _2633 = cbLight._m0[_2611].z + _994;
        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
        float _2638 = _2637 * _2631;
        float _2639 = _2637 * _2632;
        float _2640 = _2637 * _2633;
        float _2641 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2611].xyz));
        float _4635 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2645 = dot(vec3(_913, _914, _915), vec3(_2638, _2639, _2640));
        float _4646 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2649 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2638, _2639, _2640));
        float _4657 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2653 = _2630 * _2630;
        float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
        float _2666 = (exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2667 = 1.0 - _2630;
        float _2677 = (0.5 / (((_2306 * ((_2644 * _2667) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2667) + _2630) * _2644))) * _2644;
        float _4668 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2679 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
        float _2680 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2600 = (((_2666 * cbLight._m0[_2615].x) * _2679) * _2680) + _2490;
        _2602 = (((_2666 * cbLight._m0[_2615].y) * _2679) * _2680) + _2492;
        _2604 = (((_2666 * cbLight._m0[_2615].z) * _2679) * _2680) + _2494;
    }
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_2139.y == 0u)
    {
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2755;
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2755;
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2755;
        uvec4 _2770 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2771 = _2770.x;
        uint _2782 = uint((float(_2770.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1013) / _2771))) + floor(float(uint(cbSceneParam._m0[85u].x * _1012) / _2771)));
        float _2792 = (log2(_2758 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2793 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        uint _2796 = uint(isnan(14.0) ? _2793 : (isnan(_2793) ? 14.0 : min(_2793, 14.0)));
        uvec4 _2801 = texelFetch(g_lightClusterGridBuffer, int(((_2796 << 2u) + (_2782 << 6u)) >> 2u));
        uint _2802 = _2801.x;
        uint _2803 = _2770.z;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((((1u << ((_2803 >> 4u) & 15u)) + 4294967295u) & _2802) == 0u) || ((_2803 & 240u) == 0u))
        {
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
        }
        else
        {
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            uint _3062 = 0u;
            uint _3071;
            bool _3072;
            for (;;)
            {
                _3071 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                _3072 = _3071 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3072)
                {
                    frontier_phi_66_pred = _3056;
                    frontier_phi_66_pred_1 = _3061;
                    frontier_phi_66_pred_2 = _3060;
                    frontier_phi_66_pred_3 = _3059;
                    frontier_phi_66_pred_4 = _3058;
                    frontier_phi_66_pred_5 = _3057;
                }
                else
                {
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    uint _3207;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3071;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    for (;;)
                    {
                        uint _3211 = uint(findLSB(_3207)) + (_3062 << 5u);
                        uint _3208 = (_3207 + 4294967295u) & _3207;
                        uint _3213 = _3211 * 48u;
                        vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3233 = (_3211 * 48u) + 4u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 3u)).x));
                        uint _3252 = (_3211 * 48u) + 8u;
                        vec3 _3263 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x));
                        float _3267 = _3227.x - _2756;
                        float _3268 = _3227.y - _2757;
                        float _3269 = _3227.z - _2758;
                        float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                        float _3273 = inversesqrt(_3270);
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3277 = dot(vec3(_1031, _1034, _1037), vec3(_3274, _3275, _3276));
                        float _3282 = 1.0 - (_3270 * _3227.w);
                        float _4694 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3284 = sqrt(_3270) * _3246.w;
                        float _3287 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3277) + _3288;
                        float _3294 = _3284 * _3284;
                        float _3298 = ((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3283) / ((_3294 * 0.699999988079071044921875) + 1.0);
                        float _3302 = (-0.0) - _2756;
                        float _3303 = (-0.0) - _2757;
                        float _3304 = (-0.0) - _2758;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3319 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                        float _3320 = 1.0 - _1091;
                        float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                        float _3328 = _3327 * _3327;
                        float _3329 = _3328 * _3328;
                        float _3330 = _3309 + _3274;
                        float _3331 = _3310 + _3275;
                        float _3332 = _3311 + _3276;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3340 = dot(vec3(_1031, _1034, _1037), vec3(_3309, _3310, _3311));
                        float _4710 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3343 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3344 = dot(vec3(_1031, _1034, _1037), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                        float _4721 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                        float _3352 = _3287 * _3328;
                        float _3353 = _3352 * _3352;
                        float _3356 = ((1.0 - _3353) * _3277) + _3353;
                        float _4732 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3357 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3358 = 1.0 - _3328;
                        float _3368 = (0.5 / (((_3357 * ((_3343 * _3358) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3328) * _3343))) * _3357;
                        float _4743 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3379 = (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3351 * _3351) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125))) * _3283;
                        _3131 = (_3298 * _3246.x) + _3204;
                        _3132 = (_3298 * _3246.y) + _3205;
                        _3133 = (_3298 * _3246.z) + _3206;
                        _3128 = (_3379 * _3263.x) + _3201;
                        _3129 = (_3379 * _3263.y) + _3202;
                        _3130 = (_3379 * _3263.z) + _3203;
                        if (_3208 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3208;
                        }
                    }
                    frontier_phi_66_pred = _3128;
                    frontier_phi_66_pred_1 = _3133;
                    frontier_phi_66_pred_2 = _3132;
                    frontier_phi_66_pred_3 = _3131;
                    frontier_phi_66_pred_4 = _3130;
                    frontier_phi_66_pred_5 = _3129;
                }
                _2904 = frontier_phi_66_pred;
                _2914 = frontier_phi_66_pred_1;
                _2912 = frontier_phi_66_pred_2;
                _2910 = frontier_phi_66_pred_3;
                _2908 = frontier_phi_66_pred_4;
                _2906 = frontier_phi_66_pred_5;
                uint _3063 = _3062 + 1u;
                if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3056 = _2904;
                    _3057 = _2906;
                    _3058 = _2908;
                    _3059 = _2910;
                    _3060 = _2912;
                    _3061 = _2914;
                    _3062 = _3063;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
        }
        uvec4 _2917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2918 = _2917.z;
        uint _2920 = (_2918 >> 8u) & 15u;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((4294967295u << _2920) & _2802) == 0u)
        {
            _3024 = _2903;
            _3026 = _2905;
            _3028 = _2907;
            _3030 = _2909;
            _3032 = _2911;
            _3034 = _2913;
        }
        else
        {
            float _3049 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
            float _3050 = _3049 * _2756;
            float _3051 = _3049 * _2757;
            float _3052 = _3049 * _2758;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2920 < ((_2918 >> 12u) & 15u))
            {
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3184 = _2903;
                float _3185 = _2905;
                float _3186 = _2907;
                float _3187 = _2909;
                float _3188 = _2911;
                float _3189 = _2913;
                uint _3190 = _2920;
                uint _3199;
                bool _3200;
                for (;;)
                {
                    _3199 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                    _3200 = _3199 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3200)
                    {
                        frontier_phi_77_pred = _3189;
                        frontier_phi_77_pred_1 = _3188;
                        frontier_phi_77_pred_2 = _3187;
                        frontier_phi_77_pred_3 = _3186;
                        frontier_phi_77_pred_4 = _3185;
                        frontier_phi_77_pred_5 = _3184;
                    }
                    else
                    {
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3406 = _3184;
                        float _3407 = _3185;
                        float _3408 = _3186;
                        float _3409 = _3187;
                        float _3410 = _3188;
                        float _3411 = _3189;
                        uint _3412 = _3199;
                        uint _3413;
                        vec4 _3438;
                        float _3439;
                        vec4 _3454;
                        vec3 _3466;
                        vec4 _3481;
                        vec4 _3496;
                        float _3542;
                        bool _3543;
                        for (;;)
                        {
                            uint _3423 = ((_3190 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3412));
                            _3413 = (_3412 + 4294967295u) & _3412;
                            uint _3425 = _3423 * 40u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3439 = _3438.w;
                            uint _3441 = (_3423 * 40u) + 4u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3423 * 40u) + 8u;
                            _3466 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x));
                            uint _3468 = (_3423 * 40u) + 16u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3423 * 40u) + 20u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3423 * 40u) + 24u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3517 = (_3423 * 40u) + 28u;
                            vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            _3542 = fma(_2758, _3530.z, fma(_2757, _3530.y, _3530.x * _2756)) + _3530.w;
                            _3543 = !((fma(_2758, _3511.z, fma(_2757, _3511.y, _3511.x * _2756)) + _3511.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3543)
                            {
                                float _3570 = _3438.x - _2756;
                                float _3571 = _3438.y - _2757;
                                float _3572 = _3438.z - _2758;
                                float _3573 = dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572));
                                float _3576 = inversesqrt(_3573);
                                float _3577 = _3576 * _3570;
                                float _3578 = _3576 * _3571;
                                float _3579 = _3576 * _3572;
                                float _3583 = 1.0 - (_3573 / (_3439 * _3439));
                                float _4754 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3588 = sqrt(_3573) * _3454.w;
                                float _3590 = 1.39999997615814208984375 / (_3588 + 1.39999997615814208984375);
                                float _3591 = _3590 * _3590;
                                float _3594 = ((1.0 - _3591) * dot(vec3(_3577, _3578, _3579), vec3(_1031, _1034, _1037))) + _3591;
                                float _3597 = _3588 * _3588;
                                float _3601 = (fma(_2758, _3481.z, fma(_2757, _3481.y, _3481.x * _2756)) + _3481.w) / _3542;
                                float _3602 = (fma(_2758, _3496.z, fma(_2757, _3496.y, _3496.x * _2756)) + _3496.w) / _3542;
                                float _3606 = 1.0 - dot(vec2(_3601, _3602), vec2(_3601, _3602));
                                float _4770 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3608 = _3607 * (((isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0))) * _3584) / ((_3597 * 0.699999988079071044921875) + 1.0));
                                float _3620 = exp2(log2(1.0 / ((_3597 * 3.5) + 5.0)) * 0.25);
                                float _3621 = 1.0 - _1091;
                                float _3628 = sqrt(1.0 - ((1.0 - (_3621 * _3621)) * (1.0 - (_3620 * _3620))));
                                float _3629 = _3628 * _3628;
                                float _3630 = _3629 * _3629;
                                float _3631 = _3577 - _3050;
                                float _3632 = _3578 - _3051;
                                float _3633 = _3579 - _3052;
                                float _3637 = inversesqrt(dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633)));
                                float _3641 = dot(vec3(_1031, _1034, _1037), vec3((-0.0) - _3050, (-0.0) - _3051, (-0.0) - _3052));
                                float _4781 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3644 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3645 = dot(vec3(_1031, _1034, _1037), vec3(_3637 * _3631, _3637 * _3632, _3637 * _3633));
                                float _4792 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3648 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3652 = ((_3648 * _3648) * (_3630 + (-1.0))) + 1.0;
                                float _3653 = _3590 * _3629;
                                float _3654 = _3653 * _3653;
                                float _3660 = ((1.0 - _3654) * dot(vec3(_1031, _1034, _1037), vec3(_3577, _3578, _3579))) + _3654;
                                float _4803 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3662 = 1.0 - _3629;
                                float _3672 = (0.5 / (((_3661 * ((_3644 * _3662) + _3629)) + 9.9999999392252902907785028219223e-09) + (((_3661 * _3662) + _3629) * _3644))) * _3661;
                                float _4814 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3682 = (_3607 * _3584) * (((_3630 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3652 * _3652) * ((_3597 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3608 * _3454.y;
                                frontier_phi_83_pred_1 = _3608 * _3454.x;
                                frontier_phi_83_pred_2 = _3682 * _3466.z;
                                frontier_phi_83_pred_3 = _3682 * _3466.y;
                                frontier_phi_83_pred_4 = _3682 * _3466.x;
                                frontier_phi_83_pred_5 = _3608 * _3454.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3690 = frontier_phi_83_pred;
                            _3689 = frontier_phi_83_pred_1;
                            _3688 = frontier_phi_83_pred_2;
                            _3687 = frontier_phi_83_pred_3;
                            _3686 = frontier_phi_83_pred_4;
                            _3691 = frontier_phi_83_pred_5;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            if (_3413 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3413;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3398;
                        frontier_phi_77_pred_1 = _3397;
                        frontier_phi_77_pred_2 = _3396;
                        frontier_phi_77_pred_3 = _3395;
                        frontier_phi_77_pred_4 = _3394;
                        frontier_phi_77_pred_5 = _3393;
                    }
                    _3035 = frontier_phi_77_pred;
                    _3033 = frontier_phi_77_pred_1;
                    _3031 = frontier_phi_77_pred_2;
                    _3029 = frontier_phi_77_pred_3;
                    _3027 = frontier_phi_77_pred_4;
                    _3025 = frontier_phi_77_pred_5;
                    uint _3191 = _3190 + 1u;
                    if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3184 = _3025;
                        _3185 = _3027;
                        _3186 = _3029;
                        _3187 = _3031;
                        _3188 = _3033;
                        _3189 = _3035;
                        _3190 = _3191;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3029;
                frontier_phi_58_59_ladder_1 = _3035;
                frontier_phi_58_59_ladder_2 = _3033;
                frontier_phi_58_59_ladder_3 = _3031;
                frontier_phi_58_59_ladder_4 = _3027;
                frontier_phi_58_59_ladder_5 = _3025;
            }
            else
            {
                frontier_phi_58_59_ladder = _2907;
                frontier_phi_58_59_ladder_1 = _2913;
                frontier_phi_58_59_ladder_2 = _2911;
                frontier_phi_58_59_ladder_3 = _2909;
                frontier_phi_58_59_ladder_4 = _2905;
                frontier_phi_58_59_ladder_5 = _2903;
            }
            _3024 = frontier_phi_58_59_ladder_5;
            _3026 = frontier_phi_58_59_ladder_4;
            _3028 = frontier_phi_58_59_ladder;
            _3030 = frontier_phi_58_59_ladder_3;
            _3032 = frontier_phi_58_59_ladder_2;
            _3034 = frontier_phi_58_59_ladder_1;
        }
        float _3039 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _2815 = (_3039 * _3030) + _2270;
        _2817 = (_3039 * _3032) + _2272;
        _2819 = (_3039 * _3034) + _2274;
        _2821 = ((_3024 * 0.039999999105930328369140625) * _3039) + _2600;
        _2823 = ((_3026 * 0.039999999105930328369140625) * _3039) + _2602;
        _2825 = ((_3028 * 0.039999999105930328369140625) * _3039) + _2604;
    }
    else
    {
        _2815 = _2270;
        _2817 = _2272;
        _2819 = _2274;
        _2821 = _2600;
        _2823 = _2602;
        _2825 = _2604;
    }
    float _4830 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _4841 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _4852 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2842 = ((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2815 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1075))) + ((_2821 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1909)) * cbPerFrame._m0[3u].x);
    float _2843 = ((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2817 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1075))) + ((_2823 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1909)) * cbPerFrame._m0[3u].x);
    float _2844 = ((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2819 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1075))) + ((_2825 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1909)) * cbPerFrame._m0[3u].x);
    uint _2845 = _285 + 6u;
    float _2853 = _1012 / cbSceneParam._m0[86u].x;
    float _2854 = _1013 / cbSceneParam._m0[86u].y;
    vec4 _2868 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, (log2((isnan(cbSceneParam._m0[77u].w) ? _934 : (isnan(_934) ? cbSceneParam._m0[77u].w : min(_934, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2870 = _2868.x;
    float _2871 = _2868.y;
    float _2872 = _2868.z;
    float _2873 = _2868.w;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    if (_934 > cbSceneParam._m0[78u].w)
    {
        float _2928 = isnan(_934) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _934 : min(cbSceneParam._m0[80u].w, _934));
        float _2929 = _2928 / _934;
        float _2940 = _2929 * _985;
        float _2941 = _986 * _2929;
        float _2942 = (-0.0) - _2941;
        float _2944 = _2929 * _987;
        float _2946 = (cbSceneParam._m0[77u].w * _2942) / _2928;
        float _2947 = _2946 + cbSceneParam._m0[79u].w;
        float _2948 = cbSceneParam._m0[79u].w - _2941;
        float _2954 = sqrt(((_2940 * _2940) + (_2941 * _2941)) + (_2944 * _2944));
        float _2957 = (1.0 - (cbSceneParam._m0[77u].w / _2928)) * _2954;
        float _2962 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2964 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3141;
        if (abs((_2942 - _2946) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3141 = ((((_2947 > 0.0) ? exp2(_2962 * _2947) : (2.0 - exp2(_2964 * _2947))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2957;
        }
        else
        {
            float _3085 = 1.0 / cbSceneParam._m0[80u].x;
            float _3086 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : max(_2947, _2948));
            float _3087 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : min(_2947, _2948));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            _3141 = ((abs(_2954 / _2942) * cbSceneParam._m0[80u].y) * ((((_3096 - _3097) * 2.0) - ((exp2(_2962 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0)))) - exp2(_2962 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))))) * _3085)) - ((exp2(_2964 * _3096) - exp2(_2964 * _3097)) * _3085))) + (_2957 * cbSceneParam._m0[80u].z);
        }
        vec4 _3143 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, 1.0), 0.0);
        float _3152 = exp2((_3141 * (-1.44269502162933349609375)) * (1.0 - _3143.w));
        float _3153 = log2(_3152);
        float _3169 = log2(_2873);
        _2966 = (exp2(_3169 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].x)) * _3143.x) / cbSceneParam._m0[78u].x)) + _2870;
        _2968 = (exp2(_3169 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].y)) * _3143.y) / cbSceneParam._m0[78u].y)) + _2871;
        _2970 = (exp2(_3169 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].z)) * _3143.z) / cbSceneParam._m0[78u].z)) + _2872;
        _2972 = _3152 * _2873;
    }
    else
    {
        _2966 = _2870;
        _2968 = _2871;
        _2970 = _2872;
        _2972 = _2873;
    }
    bool _3179;
    vec4 _2982;
    vec4 _3004;
    float _3006;
    float _3010;
    float _3011;
    float _3012;
    float _3013;
    bool _3023;
    for (;;)
    {
        _2982 = cbMatDynParam._m0[0u];
        float _2984 = roundEven(_2982.y);
        bool _2985 = _2984 == 3.0;
        float _2986 = log2(_2972);
        float _2993 = exp2(_2986 * cbSceneParam._m0[78u].x) * _2842;
        float _2994 = exp2(_2986 * cbSceneParam._m0[78u].y) * _2843;
        float _2995 = exp2(_2986 * cbSceneParam._m0[78u].z) * _2844;
        float _3002 = _1001 + (-0.5);
        _3004 = cbMtdParam._m0[1u];
        _3006 = _3004.y * _3002;
        float _3009 = (_2984 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3010 = _3009 * (_2985 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2966)));
        _3011 = _3009 * (_2985 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2968)));
        _3012 = _3009 * (_2985 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2970)));
        _3013 = _3002 * 0.999000012874603271484375;
        _3023 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3023)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3013) < 0.5)
            {
                _3179 = true;
                break;
            }
        }
        uint _3120 = _1050 + uint(_2982.w);
        if ((cbInstanceData._m0[_3120].w < 1.0) && ((cbInstanceData._m0[_3120].w + _3013) < 0.5))
        {
            _3179 = true;
            break;
        }
        if ((_3006 + 1.0) < _3004.x)
        {
            _3179 = true;
            break;
        }
        _3179 = false;
        break;
    }
    float _3384;
    if (_3179)
    {
        discard_state = true;
        _3384 = 0.0;
    }
    else
    {
        _3384 = cbInstanceData._m0[_2845].w;
    }
    SV_Target.x = _3010;
    SV_Target.y = _3011;
    SV_Target.z = _3012;
    SV_Target.w = _3384;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2845].w;
    discard_exit();
}


