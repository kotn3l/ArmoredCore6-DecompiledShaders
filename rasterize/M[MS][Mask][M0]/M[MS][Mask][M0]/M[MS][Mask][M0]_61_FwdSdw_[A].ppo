#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1264;
float _3906;
float _3907;
float _3908;
float _3909;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _371 = _369.x;
    float _383 = dot(vec4(_371, _369.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _400 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _332.x) * 2.0) - ((((_371 - _383) * cbMtdParam._m0[24u].z) + _383) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3918 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _408 = (_401 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _409 = (_401 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _410 = (_401 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _427 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _459 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _473 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _332.y) * 2.0) - ((((_449 - _459) * cbMtdParam._m0[24u].z) + _459) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3929 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _481 = (_474 * ((_427.x * cbMtdParam._m0[13u].x) - _408)) + _408;
    float _482 = (_474 * ((_427.y * cbMtdParam._m0[13u].y) - _409)) + _409;
    float _483 = (_474 * ((_427.z * cbMtdParam._m0[13u].z) - _410)) + _410;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _520 = _518.x;
    float _521 = _518.y;
    float _522 = _518.z;
    float _529 = ((_501.x - _520) * _401) + _520;
    float _530 = ((_501.y - _521) * _401) + _521;
    float _531 = ((_501.z - _522) * _401) + _522;
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _556 = ((_543.z - _531) * _474) + _531;
    float _559 = ((((_543.x - _529) * _474) + _529) * 2.0) + (-1.0);
    float _561 = ((((_543.y - _530) * _474) + _530) * 2.0) + (-1.0);
    float _562 = dot(vec2(_559, _561), vec2(_559, _561));
    float _3940 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _567 = sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))));
    vec4 _581 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _622 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_608 - _609) * cbMtdParam._m0[24u].w) + _609) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3951 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _630 = (_623 * (cbMtdParam._m0[17u].x - _481)) + _481;
    float _631 = (_623 * (cbMtdParam._m0[17u].y - _482)) + _482;
    float _632 = (_623 * (cbMtdParam._m0[17u].z - _483)) + _483;
    float _636 = (cbMtdParam._m0[19u].w * (_581.z - _556)) + _556;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _656 = (_649.x * 2.0) + (-1.0);
    float _657 = (_649.y * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3962 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _666 = (_623 * (_649.z - _636)) + _636;
    float _669 = (((_581.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _559;
    float _670 = (((_581.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _561;
    float _682 = (((_656 - _669) + (cbMtdParam._m0[21u].x * _669)) * _623) + _669;
    float _683 = (((_657 - _670) + (cbMtdParam._m0[21u].x * _670)) * _623) + _670;
    float _684 = (_623 * (sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) - _567)) + _567;
    float _688 = cbMtdParam._m0[22u].x + _581.w;
    float _691 = fma(_684, _231 * NORMAL.x, fma(_683, _238 * TANGENT.x, (_224 * _216) * _682));
    float _694 = fma(_684, _231 * NORMAL.y, fma(_683, _238 * TANGENT.y, (_224 * _217) * _682));
    float _697 = fma(_684, _231 * NORMAL.z, fma(_683, _238 * TANGENT.z, (_224 * _218) * _682));
    float _701 = inversesqrt(dot(vec3(_691, _694, _697), vec3(_691, _694, _697)));
    float _702 = _701 * _691;
    float _703 = _701 * _694;
    float _704 = _701 * _697;
    float _3973 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _705 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3995 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4006 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4017 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _723 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _775 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _765);
    float _776 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _765);
    float _777 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _765);
    float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
    float _782 = _775 * _781;
    float _783 = _776 * _781;
    float _784 = _777 * _781;
    vec4 _789 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _791 = _789.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _945 = sqrt(((_775 * _775) + (_776 * _776)) + (_777 * _777));
        float _951 = (cbMatDynParam._m0[5u].x * _945) + cbMatDynParam._m0[5u].y;
        float _4028 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _956 = (cbMatDynParam._m0[5u].z * _945) + cbMatDynParam._m0[5u].w;
        float _4039 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) - _952)) + _952) < ((_791 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _802 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _803 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _821 = fma(_704, cbSceneParam._m0[5u].z, fma(_703, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _702));
    float _824 = fma(_704, cbSceneParam._m0[6u].z, fma(_703, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _702));
    float _827 = fma(_704, cbSceneParam._m0[7u].z, fma(_703, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _702));
    uint _840 = _244 + 9u;
    uint _841 = _840 + uint(cbMatDynParam._m0[0u].w);
    float _847 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_841].x;
    float _848 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_841].y;
    float _849 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_841].z;
    float _4050 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    vec4 _861 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _802, cbSceneParam._m0[86u].y * _803));
    float _865 = ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * TEXCOORD_5.w) * _861.x;
    float _866 = dot(vec3(_702, _703, _704), vec3(_782, _783, _784));
    float _869 = _866 * 2.0;
    float _873 = (_869 * _702) - _782;
    float _874 = (_869 * _703) - _783;
    float _875 = (_869 * _704) - _784;
    float _879 = abs(dot(vec3(_782, _783, _784), vec3(_702, _703, _704)));
    float _4083 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _881 = sqrt(_705);
    float _894 = exp2((_881 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_881 * 3.0));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1263;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _988 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _992 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _996 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _1021 = _926 + _702;
        float _1022 = _930 + _703;
        float _1023 = _934 + _704;
        float _1033 = fma(_1023, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021)) - _988;
        float _1034 = fma(_1023, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021)) - _992;
        float _1035 = fma(_1023, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021)) - _996;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_988 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_992 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[34u].z) + ((((((_996 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1091 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1057.x + (-0.5));
        float _1093 = _1091 * (_1057.y + (-0.5));
        float _1094 = _1091 * (_1057.z + (-0.5));
        float _1101 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1064.x + (-0.5));
        float _1103 = _1101 * (_1064.y + (-0.5));
        float _1104 = _1101 * (_1064.z + (-0.5));
        float _1111 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1071.x + (-0.5));
        float _1113 = _1111 * (_1071.y + (-0.5));
        float _1114 = _1111 * (_1071.z + (-0.5));
        float _1121 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1078.x + (-0.5));
        float _1123 = _1121 * (_1078.y + (-0.5));
        float _1124 = _1121 * (_1078.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1145 = (dot(vec3(_702, _703, _704), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1155 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _4131 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1157 + 1.0))) + _1162) * _1125;
        float _1172 = _1093 * 0.5;
        float _1173 = _1103 * 0.5;
        float _1174 = _1113 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_702, _703, _704), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _4164 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1199 + 1.0))) + _1204) * _1126;
        float _1214 = _1094 * 0.5;
        float _1215 = _1104 * 0.5;
        float _1216 = _1114 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_702, _703, _704), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _4197 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1241 + 1.0))) + _1246) * _1127;
        _1263 = _1094;
        _1265 = _1093;
        _1266 = _1092;
        _1267 = _1104;
        _1268 = _1103;
        _1269 = _1102;
        _1270 = _1114;
        _1271 = _1113;
        _1272 = _1112;
        _1273 = _1127;
        _1274 = _1126;
        _1275 = _1125;
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _1264;
        _1265 = _1264;
        _1266 = _1264;
        _1267 = _1264;
        _1268 = _1264;
        _1269 = _1264;
        _1270 = _1264;
        _1271 = _1264;
        _1272 = _1264;
        _1273 = _1264;
        _1274 = _1264;
        _1275 = _1264;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1305 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1309 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1313 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1336 = _926 + _702;
        float _1337 = _930 + _703;
        float _1338 = _934 + _704;
        float _1348 = fma(_1338, cbModelParam._m0[30u].z, fma(_1337, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1336)) - _1305;
        float _1349 = fma(_1338, cbModelParam._m0[31u].z, fma(_1337, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1336)) - _1309;
        float _1350 = fma(_1338, cbModelParam._m0[32u].z, fma(_1337, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1336)) - _1313;
        float _1354 = inversesqrt(dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350)));
        float _1367 = ((_1354 * _1348) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1305 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1354 * _1349) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1309 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1354 * _1350) / cbModelParam._m0[35u].z) + ((((((_1313 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        float _1404 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1371.x + (-0.5));
        float _1406 = _1404 * (_1371.y + (-0.5));
        float _1407 = _1404 * (_1371.z + (-0.5));
        float _1414 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1378.x + (-0.5));
        float _1416 = _1414 * (_1378.y + (-0.5));
        float _1417 = _1414 * (_1378.z + (-0.5));
        float _1424 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1385.x + (-0.5));
        float _1426 = _1424 * (_1385.y + (-0.5));
        float _1427 = _1424 * (_1385.z + (-0.5));
        float _1434 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1392.x + (-0.5));
        float _1436 = _1434 * (_1392.y + (-0.5));
        float _1437 = _1434 * (_1392.z + (-0.5));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = _1405 * 0.5;
        float _1442 = _1415 * 0.5;
        float _1443 = _1425 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_702, _703, _704), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4260 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1468 + 1.0))) + _1473) * _1438;
        float _1483 = _1406 * 0.5;
        float _1484 = _1416 * 0.5;
        float _1485 = _1426 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_702, _703, _704), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4293 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1510 + 1.0))) + _1515) * _1439;
        float _1525 = _1407 * 0.5;
        float _1526 = _1417 * 0.5;
        float _1527 = _1427 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_702, _703, _704), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4326 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1552 + 1.0))) + _1557) * _1440;
        _1574 = _1407;
        _1575 = _1406;
        _1576 = _1405;
        _1577 = _1417;
        _1578 = _1416;
        _1579 = _1415;
        _1580 = _1427;
        _1581 = _1426;
        _1582 = _1425;
        _1583 = _1440;
        _1584 = _1439;
        _1585 = _1438;
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
    }
    else
    {
        _1574 = _1264;
        _1575 = _1264;
        _1576 = _1264;
        _1577 = _1264;
        _1578 = _1264;
        _1579 = _1264;
        _1580 = _1264;
        _1581 = _1264;
        _1582 = _1264;
        _1583 = _1264;
        _1584 = _1264;
        _1585 = _1264;
        _1586 = 0.0;
        _1587 = 0.0;
        _1588 = 0.0;
    }
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1276)) + _1276;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1277)) + _1277;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1278)) + _1278;
    float _1621 = fma(_1600, cbSceneParam._m0[89u].z, fma(_1599, cbSceneParam._m0[89u].y, _1598 * cbSceneParam._m0[89u].x));
    float _1624 = fma(_1600, cbSceneParam._m0[90u].z, fma(_1599, cbSceneParam._m0[90u].y, _1598 * cbSceneParam._m0[90u].x));
    float _1627 = fma(_1600, cbSceneParam._m0[91u].z, fma(_1599, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1598));
    float _1642 = _873 * 0.5;
    float _1643 = _874 * 0.5;
    float _1644 = _875 * 0.5;
    float _1645 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1648 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1651 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1685;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1658 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1263, _1267, _1270, _1273));
        float _1662 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1666 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1673 = dot(vec4(cbModelParam._m0[39u]), vec4(_1642, _1643, _1644, 1.0));
        _1685 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1673) ? 0.0 : (isnan(0.0) ? _1673 : max(0.0, _1673))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1685 = 1.0;
    }
    float _1696;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1687 = dot(vec4(cbModelParam._m0[40u]), vec4(_1642, _1643, _1644, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1687) ? 0.0 : (isnan(0.0) ? _1687 : max(0.0, _1687))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1700 = (_1696 * cbModelParam._m0[1u].x) + (_1685 * (1.0 - cbModelParam._m0[1u].x));
    float _1710 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _705);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1710 : min(cbModelParam._m0[25u].z, _1710));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1759 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1763 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1767 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1770 = fma(_875, cbModelParam._m0[13u].z, fma(_874, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873));
        float _1773 = fma(_875, cbModelParam._m0[14u].z, fma(_874, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873));
        float _1776 = fma(_875, cbModelParam._m0[15u].z, fma(_874, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873));
        float _1804;
        if (_1770 > 0.0)
        {
            _1804 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1804 = frontier_phi_17_15_ladder;
        }
        float _1974;
        if (_1773 > 0.0)
        {
            _1974 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1974 = frontier_phi_26_22_ladder;
        }
        float _2269;
        if (_1776 > 0.0)
        {
            _2269 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2269 = frontier_phi_38_33_ladder;
        }
        float _2271 = isnan(_1974) ? _1804 : (isnan(_1804) ? _1974 : min(_1804, _1974));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1770) + _1759;
        float _2277 = (_2272 * _1773) + _1763;
        float _2278 = (_2272 * _1776) + _1767;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2279;
        float _2283 = _2279 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 > _2283) || ((_2277 < _2281) || ((_2276 < _2281) || (_2276 > _2283))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2278, cbModelParam._m0[9u].z, fma(_2277, cbModelParam._m0[9u].y, _2276 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2278, cbModelParam._m0[10u].z, fma(_2277, cbModelParam._m0[10u].y, _2276 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2278, cbModelParam._m0[11u].z, fma(_2277, cbModelParam._m0[11u].y, _2276 * cbModelParam._m0[11u].x))), _1711);
            frontier_phi_16_38_ladder = _2423.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2423.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2423.x * cbModelParam._m0[1u].y;
        }
        _1792 = frontier_phi_16_38_ladder_2;
        _1794 = frontier_phi_16_38_ladder_1;
        _1796 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_873, _874, _875), _1711);
        _1792 = _1780.x * cbModelParam._m0[1u].y;
        _1794 = _1780.y * cbModelParam._m0[1u].y;
        _1796 = _1780.z * cbModelParam._m0[1u].y;
    }
    float _1800 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _705);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1800 : min(cbModelParam._m0[25u].w, _1800));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1855 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1859 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1863 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1866 = fma(_875, cbModelParam._m0[21u].z, fma(_874, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873));
        float _1869 = fma(_875, cbModelParam._m0[22u].z, fma(_874, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873));
        float _1872 = fma(_875, cbModelParam._m0[23u].z, fma(_874, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873));
        float _1979;
        if (_1866 > 0.0)
        {
            _1979 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1979 = frontier_phi_28_24_ladder;
        }
        float _2296;
        if (_1869 > 0.0)
        {
            _2296 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2296 = frontier_phi_40_35_ladder;
        }
        float _2623;
        if (_1872 > 0.0)
        {
            _2623 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2623 = frontier_phi_50_47_ladder;
        }
        float _2625 = isnan(_2296) ? _1979 : (isnan(_1979) ? _2296 : min(_1979, _2296));
        float _2626 = isnan(_2623) ? _2625 : (isnan(_2625) ? _2623 : min(_2625, _2623));
        float _2630 = (_2626 * _1866) + _1855;
        float _2631 = (_2626 * _1869) + _1859;
        float _2632 = (_2626 * _1872) + _1863;
        float _2633 = _2626 * 9.9999997473787516355514526367188e-05;
        float _2634 = (-1.0) - _2633;
        float _2636 = _2633 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2632 > _2636) || ((_2632 < _2634) || ((_2631 > _2636) || ((_2631 < _2634) || ((_2630 < _2634) || (_2630 > _2636))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2750 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2632, cbModelParam._m0[17u].z, fma(_2631, cbModelParam._m0[17u].y, _2630 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2632, cbModelParam._m0[18u].z, fma(_2631, cbModelParam._m0[18u].y, _2630 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2632, cbModelParam._m0[19u].z, fma(_2631, cbModelParam._m0[19u].y, _2630 * cbModelParam._m0[19u].x))), _1801);
            frontier_phi_25_50_ladder = _2750.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2750.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2750.x * cbModelParam._m0[1u].z;
        }
        _1891 = frontier_phi_25_50_ladder_2;
        _1893 = frontier_phi_25_50_ladder_1;
        _1895 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_873, _874, _875), _1801);
        _1891 = _1875.x * cbModelParam._m0[1u].z;
        _1893 = _1875.y * cbModelParam._m0[1u].z;
        _1895 = _1875.z * cbModelParam._m0[1u].z;
    }
    float _1907 = ((((1.0 - _894) * ((_881 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_894 * _881)) * _865;
    float _1908 = _1907 * ((cbModelParam._m0[1u].w * (_1891 - _1792)) + _1792);
    float _1909 = _1907 * ((cbModelParam._m0[1u].w * (_1893 - _1794)) + _1794);
    float _1910 = _1907 * ((cbModelParam._m0[1u].w * (_1895 - _1796)) + _1796);
    float _1913 = fma(_1910, cbSceneParam._m0[89u].z, fma(_1909, cbSceneParam._m0[89u].y, _1908 * cbSceneParam._m0[89u].x));
    float _1916 = fma(_1910, cbSceneParam._m0[90u].z, fma(_1909, cbSceneParam._m0[90u].y, _1908 * cbSceneParam._m0[90u].x));
    float _1919 = fma(_1910, cbSceneParam._m0[91u].z, fma(_1909, cbSceneParam._m0[91u].y, _1908 * cbSceneParam._m0[91u].x));
    float _1953 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1966 = _1953 / _1965;
    float _1967 = _1957 / _1965;
    float _1968 = _1961 / _1965;
    float _2115;
    float _2116;
    float _2117;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1995 = ((uint(_1968 > cbSceneParam._m0[59u].y) + uint(_1968 > cbSceneParam._m0[59u].x)) + uint(_1968 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1996 = _1995 + 43u;
        uint _2004 = _1995 + 44u;
        uint _2012 = _1995 + 45u;
        uint _2020 = _1995 + 46u;
        float _2031 = fma(_1965, cbSceneParam._m0[_1996].w, fma(_1961, cbSceneParam._m0[_1996].z, fma(_1957, cbSceneParam._m0[_1996].y, _1953 * cbSceneParam._m0[_1996].x)));
        float _2035 = fma(_1965, cbSceneParam._m0[_2004].w, fma(_1961, cbSceneParam._m0[_2004].z, fma(_1957, cbSceneParam._m0[_2004].y, _1953 * cbSceneParam._m0[_2004].x)));
        float _2043 = fma(_1965, cbSceneParam._m0[_2020].w, fma(_1961, cbSceneParam._m0[_2020].z, fma(_1957, cbSceneParam._m0[_2020].y, _1953 * cbSceneParam._m0[_2020].x)));
        float _2048 = cbSceneParam._m0[33u].z * _2043;
        float _2050 = cbSceneParam._m0[33u].w * _2043;
        float _2053 = fma(_1965, cbSceneParam._m0[_2012].w, fma(_1961, cbSceneParam._m0[_2012].z, fma(_1957, cbSceneParam._m0[_2012].y, _1953 * cbSceneParam._m0[_2012].x))) / _2043;
        float _2101 = (cbSceneParam._m0[33u].x - sqrt(((_1967 * _1967) + (_1966 * _1966)) + (_1968 * _1968))) * cbSceneParam._m0[33u].y;
        float _4452 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2108 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2048 + _2031) / _2043, (_2050 + _2035) / _2043), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2050 + _2031) / _2043, (_2035 - _2048) / _2043), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2031 - _2048) / _2043, (_2035 - _2050) / _2043), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2031 - _2050) / _2043, (_2048 + _2035) / _2043), _2053), 0.0)).x), vec4(0.25)));
        _2115 = 1.0 - (_2108 * cbSceneParam._m0[34u].x);
        _2116 = 1.0 - (_2108 * cbSceneParam._m0[34u].y);
        _2117 = 1.0 - (_2108 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2115 = 1.0;
        _2116 = 1.0;
        _2117 = 1.0;
    }
    float _2181;
    float _2183;
    float _2185;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2169 = fma(_1965, cbSceneParam._m0[63u].w, fma(_1961, cbSceneParam._m0[63u].z, fma(_1957, cbSceneParam._m0[63u].y, _1953 * cbSceneParam._m0[63u].x)));
        float _2170 = fma(_1965, cbSceneParam._m0[60u].w, fma(_1961, cbSceneParam._m0[60u].z, fma(_1957, cbSceneParam._m0[60u].y, _1953 * cbSceneParam._m0[60u].x))) / _2169;
        float _2171 = fma(_1965, cbSceneParam._m0[61u].w, fma(_1961, cbSceneParam._m0[61u].z, fma(_1957, cbSceneParam._m0[61u].y, _1953 * cbSceneParam._m0[61u].x))) / _2169;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2170 >= cbSceneParam._m0[64u].x) && (_2171 >= cbSceneParam._m0[64u].y)) && (_2170 <= cbSceneParam._m0[64u].z)) && (_2171 <= cbSceneParam._m0[64u].w))
        {
            float _2309 = fma(_1965, cbSceneParam._m0[62u].w, fma(_1961, cbSceneParam._m0[62u].z, fma(_1957, cbSceneParam._m0[62u].y, _1953 * cbSceneParam._m0[62u].x))) / _2169;
            float _2313 = isnan(cbSceneParam._m0[41u].w) ? _2309 : (isnan(_2309) ? cbSceneParam._m0[41u].w : max(_2309, cbSceneParam._m0[41u].w));
            float _2356 = (cbSceneParam._m0[33u].x - sqrt(((_1967 * _1967) + (_1966 * _1966)) + (_1968 * _1968))) * cbSceneParam._m0[33u].y;
            float _4468 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
            float _2363 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2170, cbSceneParam._m0[33u].w + _2171), _2313), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2170, _2171 - cbSceneParam._m0[33u].z), _2313), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2170 - cbSceneParam._m0[33u].z, _2171 - cbSceneParam._m0[33u].w), _2313), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2170 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2171), _2313), 0.0)).x), vec4(0.25)));
            float _2367 = 1.0 - (_2363 * cbSceneParam._m0[34u].x);
            float _2368 = 1.0 - (_2363 * cbSceneParam._m0[34u].y);
            float _2369 = 1.0 - (_2363 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2369) ? _2117 : (isnan(_2117) ? _2369 : min(_2117, _2369));
            frontier_phi_37_36_ladder_1 = isnan(_2368) ? _2116 : (isnan(_2116) ? _2368 : min(_2116, _2368));
            frontier_phi_37_36_ladder_2 = isnan(_2367) ? _2115 : (isnan(_2115) ? _2367 : min(_2115, _2367));
        }
        else
        {
            frontier_phi_37_36_ladder = _2117;
            frontier_phi_37_36_ladder_1 = _2116;
            frontier_phi_37_36_ladder_2 = _2115;
        }
        _2181 = frontier_phi_37_36_ladder_2;
        _2183 = frontier_phi_37_36_ladder_1;
        _2185 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2181 = _2115;
        _2183 = _2116;
        _2185 = _2117;
    }
    uvec4 _2190 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2192 = _2190.x * 14u;
    uint _2193 = _2192 + 13u;
    float _2200 = _865 + (-1.0);
    float _2205 = (cbLight._m0[_2193].x * _2200) + 1.0;
    float _2206 = (cbLight._m0[_2193].y * _2200) + 1.0;
    float _2207 = (cbLight._m0[_2193].z * _2200) + 1.0;
    float _2208 = (cbLight._m0[_2193].w * _2200) + 1.0;
    uint _2209 = _2192 + 5u;
    float _2215 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2219 = _2192 + 4u;
    float _2228 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2232 = _2192 | 1u;
    float _2243 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_702, _703, _704));
    float _2246 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_702, _703, _704));
    float _4504 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _4515 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2251 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2253 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2260 = ((cbLight._m0[_2209].x * _2215) * _2253) + (((cbLight._m0[_2219].x * _2181) * _2228) * _2251);
    float _2261 = ((_2215 * cbLight._m0[_2209].y) * _2253) + (((cbLight._m0[_2219].y * _2183) * _2228) * _2251);
    float _2262 = ((_2215 * cbLight._m0[_2209].z) * _2253) + (((cbLight._m0[_2219].z * _2185) * _2228) * _2251);
    uvec4 _2266 = floatBitsToUint(cbLight._m0[_2192 + 12u]);
    bool _2268 = _2266.x == 0u;
    float _2370;
    float _2372;
    float _2374;
    if (_2268)
    {
        _2370 = _2260;
        _2372 = _2261;
        _2374 = _2262;
    }
    else
    {
        uint _2378 = _2192 + 6u;
        float _2394 = (dot(vec3(cbLight._m0[_2192 + 2u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2395 = _2394 * _2394;
        float _4526 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2396 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2397 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2370 = (((cbLight._m0[_2378].x * 0.3183098733425140380859375) * _2396) * _2397) + _2260;
        _2372 = (((cbLight._m0[_2378].y * 0.3183098733425140380859375) * _2396) * _2397) + _2261;
        _2374 = (((cbLight._m0[_2378].z * 0.3183098733425140380859375) * _2396) * _2397) + _2262;
    }
    bool _2377 = _2266.y == 0u;
    float _2432;
    float _2434;
    float _2436;
    if (_2377)
    {
        _2432 = _2370;
        _2434 = _2372;
        _2436 = _2374;
    }
    else
    {
        uint _2594 = _2192 + 7u;
        float _2610 = (dot(vec3(cbLight._m0[_2192 + 3u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2611 = _2610 * _2610;
        float _4542 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2612 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2613 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2432 = (((cbLight._m0[_2594].x * 0.3183098733425140380859375) * _2612) * _2613) + _2370;
        _2434 = (((cbLight._m0[_2594].y * 0.3183098733425140380859375) * _2612) * _2613) + _2372;
        _2436 = (((cbLight._m0[_2594].z * 0.3183098733425140380859375) * _2612) * _2613) + _2374;
    }
    uint _2439 = _2192 + 8u;
    float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _705) * 0.949999988079071044921875);
    float _2453 = _2452 * _2452;
    float _2454 = cbLight._m0[_2192].x + _782;
    float _2455 = cbLight._m0[_2192].y + _783;
    float _2456 = cbLight._m0[_2192].z + _784;
    float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
    float _2461 = _2460 * _2454;
    float _2462 = _2460 * _2455;
    float _2463 = _2460 * _2456;
    float _2464 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2192].xyz));
    float _4558 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _4569 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _2468 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2469 = dot(vec3(_702, _703, _704), vec3(_2461, _2462, _2463));
    float _4580 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2472 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2473 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2461, _2462, _2463));
    float _4591 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2477 = _2453 * _2453;
    float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
    float _2492 = (exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2493 = 1.0 - _2453;
    float _2504 = (0.5 / (((_2468 * ((_2467 * _2493) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2493) + _2453) * _2467))) * _2467;
    float _4602 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2506 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
    uint _2520 = _2192 + 9u;
    float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _705) * 0.949999988079071044921875);
    float _2532 = _2531 * _2531;
    float _2533 = cbLight._m0[_2232].x + _782;
    float _2534 = cbLight._m0[_2232].y + _783;
    float _2535 = cbLight._m0[_2232].z + _784;
    float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
    float _2540 = _2539 * _2533;
    float _2541 = _2539 * _2534;
    float _2542 = _2539 * _2535;
    float _2543 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2232].xyz));
    float _4613 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2547 = dot(vec3(_702, _703, _704), vec3(_2540, _2541, _2542));
    float _4624 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2551 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2540, _2541, _2542));
    float _4635 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2555 = _2532 * _2532;
    float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
    float _2568 = (exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2569 = 1.0 - _2532;
    float _2579 = (0.5 / (((_2468 * ((_2546 * _2569) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2569) + _2532) * _2546))) * _2546;
    float _4646 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2581 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
    float _2591 = (((_2568 * cbLight._m0[_2520].x) * _2581) * _2215) + ((((cbLight._m0[_2439].x * _2181) * _2492) * _2506) * _2228);
    float _2592 = (((_2568 * cbLight._m0[_2520].y) * _2581) * _2215) + ((((cbLight._m0[_2439].y * _2183) * _2492) * _2506) * _2228);
    float _2593 = (((_2568 * cbLight._m0[_2520].z) * _2581) * _2215) + ((((cbLight._m0[_2439].z * _2185) * _2492) * _2506) * _2228);
    float _2649;
    float _2651;
    float _2653;
    if (_2268)
    {
        _2649 = _2591;
        _2651 = _2592;
        _2653 = _2593;
    }
    else
    {
        uint _2655 = _2192 + 2u;
        uint _2659 = _2192 + 10u;
        float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2655].w)) * _705) * 0.949999988079071044921875);
        float _2674 = _2673 * _2673;
        float _2675 = cbLight._m0[_2655].x + _782;
        float _2676 = cbLight._m0[_2655].y + _783;
        float _2677 = cbLight._m0[_2655].z + _784;
        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
        float _2682 = _2681 * _2675;
        float _2683 = _2681 * _2676;
        float _2684 = _2681 * _2677;
        float _2685 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2655].xyz));
        float _4657 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2689 = dot(vec3(_702, _703, _704), vec3(_2682, _2683, _2684));
        float _4668 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2693 = dot(vec3(cbLight._m0[_2655].xyz), vec3(_2682, _2683, _2684));
        float _4679 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2697 = _2674 * _2674;
        float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
        float _2710 = (exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2711 = 1.0 - _2674;
        float _2721 = (0.5 / (((_2468 * ((_2688 * _2711) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2711) + _2674) * _2688))) * _2688;
        float _4690 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2723 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
        float _2724 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2649 = (((_2710 * cbLight._m0[_2659].x) * _2723) * _2724) + _2591;
        _2651 = (((_2710 * cbLight._m0[_2659].y) * _2723) * _2724) + _2592;
        _2653 = (((_2710 * cbLight._m0[_2659].z) * _2723) * _2724) + _2593;
    }
    float _2755;
    float _2757;
    float _2759;
    if (_2377)
    {
        _2755 = _2649;
        _2757 = _2651;
        _2759 = _2653;
    }
    else
    {
        uint _2766 = _2192 + 3u;
        uint _2770 = _2192 + 11u;
        float _2784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2766].w)) * _705) * 0.949999988079071044921875);
        float _2785 = _2784 * _2784;
        float _2786 = cbLight._m0[_2766].x + _782;
        float _2787 = cbLight._m0[_2766].y + _783;
        float _2788 = cbLight._m0[_2766].z + _784;
        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
        float _2793 = _2792 * _2786;
        float _2794 = _2792 * _2787;
        float _2795 = _2792 * _2788;
        float _2796 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2766].xyz));
        float _4706 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2800 = dot(vec3(_702, _703, _704), vec3(_2793, _2794, _2795));
        float _4717 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2804 = dot(vec3(cbLight._m0[_2766].xyz), vec3(_2793, _2794, _2795));
        float _4728 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2808 = _2785 * _2785;
        float _2812 = ((_2803 * _2803) * (_2808 + (-1.0))) + 1.0;
        float _2821 = (exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2822 = 1.0 - _2785;
        float _2832 = (0.5 / (((_2468 * ((_2799 * _2822) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2822) + _2785) * _2799))) * _2799;
        float _4739 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2834 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2808 / ((_2812 * _2812) * 3.141590118408203125));
        float _2835 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2755 = (((_2821 * cbLight._m0[_2770].x) * _2834) * _2835) + _2649;
        _2757 = (((_2821 * cbLight._m0[_2770].y) * _2834) * _2835) + _2651;
        _2759 = (((_2821 * cbLight._m0[_2770].z) * _2834) * _2835) + _2653;
    }
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_2190.y == 0u)
    {
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.x;
        uint _2868 = uint((float(_2856.y) * floor(float(uint(cbSceneParam._m0[85u].y * _803) / _2857))) + floor(float(uint(cbSceneParam._m0[85u].x * _802) / _2857)));
        float _2878 = (log2(_1968 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2879 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        uint _2882 = uint(isnan(14.0) ? _2879 : (isnan(_2879) ? 14.0 : min(_2879, 14.0)));
        uvec4 _2887 = texelFetch(g_lightClusterGridBuffer, int(((_2882 << 2u) + (_2868 << 6u)) >> 2u));
        uint _2888 = _2887.x;
        uint _2889 = _2856.z;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        if (((((1u << ((_2889 >> 4u) & 15u)) + 4294967295u) & _2888) == 0u) || ((_2889 & 240u) == 0u))
        {
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
        }
        else
        {
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            uint _3127 = 0u;
            uint _3136;
            bool _3137;
            for (;;)
            {
                _3136 = texelFetch(g_lightClassification, int((((_2882 << 5u) + (_2868 << 9u)) + (_3127 << 2u)) >> 2u)).x;
                _3137 = _3136 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3137)
                {
                    frontier_phi_71_pred = _3126;
                    frontier_phi_71_pred_1 = _3125;
                    frontier_phi_71_pred_2 = _3124;
                    frontier_phi_71_pred_3 = _3123;
                    frontier_phi_71_pred_4 = _3122;
                    frontier_phi_71_pred_5 = _3121;
                }
                else
                {
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    uint _3272;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3136;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    for (;;)
                    {
                        uint _3276 = uint(findLSB(_3272)) + (_3127 << 5u);
                        uint _3273 = (_3272 + 4294967295u) & _3272;
                        uint _3278 = _3276 * 48u;
                        vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 3u)).x));
                        uint _3298 = (_3276 * 48u) + 4u;
                        vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 3u)).x));
                        uint _3317 = (_3276 * 48u) + 8u;
                        vec3 _3328 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3317)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 2u)).x));
                        float _3332 = _3292.x - _1966;
                        float _3333 = _3292.y - _1967;
                        float _3334 = _3292.z - _1968;
                        float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                        float _3338 = inversesqrt(_3335);
                        float _3339 = _3338 * _3332;
                        float _3340 = _3338 * _3333;
                        float _3341 = _3338 * _3334;
                        float _3342 = dot(vec3(_821, _824, _827), vec3(_3339, _3340, _3341));
                        float _3347 = 1.0 - (_3335 * _3292.w);
                        float _4765 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3348 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3349 = sqrt(_3335) * _3311.w;
                        float _3352 = 1.39999997615814208984375 / (_3349 + 1.39999997615814208984375);
                        float _3353 = _3352 * _3352;
                        float _3356 = ((1.0 - _3353) * _3342) + _3353;
                        float _3359 = _3349 * _3349;
                        float _3363 = ((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3348) / ((_3359 * 0.699999988079071044921875) + 1.0);
                        float _3367 = (-0.0) - _1966;
                        float _3368 = (-0.0) - _1967;
                        float _3369 = (-0.0) - _1968;
                        float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                        float _3374 = _3373 * _3367;
                        float _3375 = _3373 * _3368;
                        float _3376 = _3373 * _3369;
                        float _3383 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                        float _3384 = 1.0 - _881;
                        float _3391 = sqrt(1.0 - ((1.0 - (_3384 * _3384)) * (1.0 - (_3383 * _3383))));
                        float _3392 = _3391 * _3391;
                        float _3393 = _3392 * _3392;
                        float _3394 = _3374 + _3339;
                        float _3395 = _3375 + _3340;
                        float _3396 = _3376 + _3341;
                        float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                        float _3404 = dot(vec3(_821, _824, _827), vec3(_3374, _3375, _3376));
                        float _4781 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3407 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3408 = dot(vec3(_821, _824, _827), vec3(_3400 * _3394, _3400 * _3395, _3400 * _3396));
                        float _4792 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3411 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3415 = ((_3411 * _3411) * (_3393 + (-1.0))) + 1.0;
                        float _3416 = _3352 * _3392;
                        float _3417 = _3416 * _3416;
                        float _3420 = ((1.0 - _3417) * _3342) + _3417;
                        float _4803 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3421 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3422 = 1.0 - _3392;
                        float _3432 = (0.5 / (((_3421 * ((_3407 * _3422) + _3392)) + 9.9999999392252902907785028219223e-09) + (((_3421 * _3422) + _3392) * _3407))) * _3421;
                        float _4814 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3443 = (((_3393 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3415 * _3415) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125))) * _3348;
                        _3196 = (_3363 * _3311.x) + _3269;
                        _3197 = (_3363 * _3311.y) + _3270;
                        _3198 = (_3363 * _3311.z) + _3271;
                        _3193 = (_3443 * _3328.x) + _3266;
                        _3194 = (_3443 * _3328.y) + _3267;
                        _3195 = (_3443 * _3328.z) + _3268;
                        if (_3273 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3273;
                        }
                    }
                    frontier_phi_71_pred = _3198;
                    frontier_phi_71_pred_1 = _3197;
                    frontier_phi_71_pred_2 = _3196;
                    frontier_phi_71_pred_3 = _3195;
                    frontier_phi_71_pred_4 = _3194;
                    frontier_phi_71_pred_5 = _3193;
                }
                _2979 = frontier_phi_71_pred;
                _2977 = frontier_phi_71_pred_1;
                _2975 = frontier_phi_71_pred_2;
                _2973 = frontier_phi_71_pred_3;
                _2971 = frontier_phi_71_pred_4;
                _2969 = frontier_phi_71_pred_5;
                uint _3128 = _3127 + 1u;
                if (_3128 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3121 = _2969;
                    _3122 = _2971;
                    _3123 = _2973;
                    _3124 = _2975;
                    _3125 = _2977;
                    _3126 = _2979;
                    _3127 = _3128;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
        }
        uvec4 _2982 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2983 = _2982.z;
        uint _2985 = (_2983 >> 8u) & 15u;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        if (((4294967295u << _2985) & _2888) == 0u)
        {
            _3089 = _2968;
            _3091 = _2970;
            _3093 = _2972;
            _3095 = _2974;
            _3097 = _2976;
            _3099 = _2978;
        }
        else
        {
            float _3114 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
            float _3115 = _3114 * _1966;
            float _3116 = _3114 * _1967;
            float _3117 = _3114 * _1968;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2985 < ((_2983 >> 12u) & 15u))
            {
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3098;
                float _3100;
                float _3249 = _2968;
                float _3250 = _2970;
                float _3251 = _2972;
                float _3252 = _2974;
                float _3253 = _2976;
                float _3254 = _2978;
                uint _3255 = _2985;
                uint _3264;
                bool _3265;
                for (;;)
                {
                    _3264 = texelFetch(g_lightClassification, int((((_2882 << 5u) + (_2868 << 9u)) + (_3255 << 2u)) >> 2u)).x;
                    _3265 = _3264 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3265)
                    {
                        frontier_phi_82_pred = _3254;
                        frontier_phi_82_pred_1 = _3253;
                        frontier_phi_82_pred_2 = _3252;
                        frontier_phi_82_pred_3 = _3251;
                        frontier_phi_82_pred_4 = _3250;
                        frontier_phi_82_pred_5 = _3249;
                    }
                    else
                    {
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3470 = _3249;
                        float _3471 = _3250;
                        float _3472 = _3251;
                        float _3473 = _3252;
                        float _3474 = _3253;
                        float _3475 = _3254;
                        uint _3476 = _3264;
                        uint _3477;
                        vec4 _3502;
                        float _3503;
                        vec4 _3518;
                        vec3 _3530;
                        vec4 _3545;
                        vec4 _3560;
                        float _3606;
                        bool _3607;
                        for (;;)
                        {
                            uint _3487 = ((_3255 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3476));
                            _3477 = (_3476 + 4294967295u) & _3476;
                            uint _3489 = _3487 * 40u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            _3503 = _3502.w;
                            uint _3505 = (_3487 * 40u) + 4u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3487 * 40u) + 8u;
                            _3530 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x));
                            uint _3532 = (_3487 * 40u) + 16u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3487 * 40u) + 20u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3487 * 40u) + 24u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3581 = (_3487 * 40u) + 28u;
                            vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            _3606 = fma(_1968, _3594.z, fma(_1967, _3594.y, _3594.x * _1966)) + _3594.w;
                            _3607 = !((fma(_1968, _3575.z, fma(_1967, _3575.y, _3575.x * _1966)) + _3575.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3607)
                            {
                                float _3634 = _3502.x - _1966;
                                float _3635 = _3502.y - _1967;
                                float _3636 = _3502.z - _1968;
                                float _3637 = dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636));
                                float _3640 = inversesqrt(_3637);
                                float _3641 = _3640 * _3634;
                                float _3642 = _3640 * _3635;
                                float _3643 = _3640 * _3636;
                                float _3647 = 1.0 - (_3637 / (_3503 * _3503));
                                float _4825 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3648 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3652 = sqrt(_3637) * _3518.w;
                                float _3654 = 1.39999997615814208984375 / (_3652 + 1.39999997615814208984375);
                                float _3655 = _3654 * _3654;
                                float _3658 = ((1.0 - _3655) * dot(vec3(_3641, _3642, _3643), vec3(_821, _824, _827))) + _3655;
                                float _3661 = _3652 * _3652;
                                float _3665 = (fma(_1968, _3545.z, fma(_1967, _3545.y, _3545.x * _1966)) + _3545.w) / _3606;
                                float _3666 = (fma(_1968, _3560.z, fma(_1967, _3560.y, _3560.x * _1966)) + _3560.w) / _3606;
                                float _3670 = 1.0 - dot(vec2(_3665, _3666), vec2(_3665, _3666));
                                float _4841 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3672 = _3671 * (((isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0))) * _3648) / ((_3661 * 0.699999988079071044921875) + 1.0));
                                float _3684 = exp2(log2(1.0 / ((_3661 * 3.5) + 5.0)) * 0.25);
                                float _3685 = 1.0 - _881;
                                float _3692 = sqrt(1.0 - ((1.0 - (_3685 * _3685)) * (1.0 - (_3684 * _3684))));
                                float _3693 = _3692 * _3692;
                                float _3694 = _3693 * _3693;
                                float _3695 = _3641 - _3115;
                                float _3696 = _3642 - _3116;
                                float _3697 = _3643 - _3117;
                                float _3701 = inversesqrt(dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697)));
                                float _3705 = dot(vec3(_821, _824, _827), vec3((-0.0) - _3115, (-0.0) - _3116, (-0.0) - _3117));
                                float _4852 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3708 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3709 = dot(vec3(_821, _824, _827), vec3(_3701 * _3695, _3701 * _3696, _3701 * _3697));
                                float _4863 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3712 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3716 = ((_3712 * _3712) * (_3694 + (-1.0))) + 1.0;
                                float _3717 = _3654 * _3693;
                                float _3718 = _3717 * _3717;
                                float _3724 = ((1.0 - _3718) * dot(vec3(_821, _824, _827), vec3(_3641, _3642, _3643))) + _3718;
                                float _4874 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3726 = 1.0 - _3693;
                                float _3736 = (0.5 / (((_3725 * ((_3708 * _3726) + _3693)) + 9.9999999392252902907785028219223e-09) + (((_3725 * _3726) + _3693) * _3708))) * _3725;
                                float _4885 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3746 = (_3671 * _3648) * (((_3694 * 3.1415927410125732421875) * (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) / ((_3716 * _3716) * ((_3661 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3672 * _3518.z;
                                frontier_phi_88_pred_1 = _3672 * _3518.y;
                                frontier_phi_88_pred_2 = _3672 * _3518.x;
                                frontier_phi_88_pred_3 = _3746 * _3530.z;
                                frontier_phi_88_pred_4 = _3746 * _3530.y;
                                frontier_phi_88_pred_5 = _3746 * _3530.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3755 = frontier_phi_88_pred;
                            _3754 = frontier_phi_88_pred_1;
                            _3753 = frontier_phi_88_pred_2;
                            _3752 = frontier_phi_88_pred_3;
                            _3751 = frontier_phi_88_pred_4;
                            _3750 = frontier_phi_88_pred_5;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            _3462 = _3755 + _3475;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            if (_3477 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3477;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3462;
                        frontier_phi_82_pred_1 = _3461;
                        frontier_phi_82_pred_2 = _3460;
                        frontier_phi_82_pred_3 = _3459;
                        frontier_phi_82_pred_4 = _3458;
                        frontier_phi_82_pred_5 = _3457;
                    }
                    _3100 = frontier_phi_82_pred;
                    _3098 = frontier_phi_82_pred_1;
                    _3096 = frontier_phi_82_pred_2;
                    _3094 = frontier_phi_82_pred_3;
                    _3092 = frontier_phi_82_pred_4;
                    _3090 = frontier_phi_82_pred_5;
                    uint _3256 = _3255 + 1u;
                    if (_3256 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3249 = _3090;
                        _3250 = _3092;
                        _3251 = _3094;
                        _3252 = _3096;
                        _3253 = _3098;
                        _3254 = _3100;
                        _3255 = _3256;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3096;
                frontier_phi_63_64_ladder_1 = _3100;
                frontier_phi_63_64_ladder_2 = _3098;
                frontier_phi_63_64_ladder_3 = _3094;
                frontier_phi_63_64_ladder_4 = _3092;
                frontier_phi_63_64_ladder_5 = _3090;
            }
            else
            {
                frontier_phi_63_64_ladder = _2974;
                frontier_phi_63_64_ladder_1 = _2978;
                frontier_phi_63_64_ladder_2 = _2976;
                frontier_phi_63_64_ladder_3 = _2972;
                frontier_phi_63_64_ladder_4 = _2970;
                frontier_phi_63_64_ladder_5 = _2968;
            }
            _3089 = frontier_phi_63_64_ladder_5;
            _3091 = frontier_phi_63_64_ladder_4;
            _3093 = frontier_phi_63_64_ladder_3;
            _3095 = frontier_phi_63_64_ladder;
            _3097 = frontier_phi_63_64_ladder_2;
            _3099 = frontier_phi_63_64_ladder_1;
        }
        float _3104 = isnan(1.0) ? _865 : (isnan(_865) ? 1.0 : min(_865, 1.0));
        _2901 = (_3104 * _3095) + _2432;
        _2903 = (_3104 * _3097) + _2434;
        _2905 = (_3104 * _3099) + _2436;
        _2907 = ((_3089 * 0.039999999105930328369140625) * _3104) + _2755;
        _2909 = ((_3091 * 0.039999999105930328369140625) * _3104) + _2757;
        _2911 = ((_3093 * 0.039999999105930328369140625) * _3104) + _2759;
    }
    else
    {
        _2901 = _2432;
        _2903 = _2434;
        _2905 = _2436;
        _2907 = _2755;
        _2909 = _2757;
        _2911 = _2759;
    }
    float _4901 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4912 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4923 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _2928 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2901 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _865))) + ((_2907 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1700)) * cbPerFrame._m0[3u].x);
    float _2929 = ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2903 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _865))) + ((_2909 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1700)) * cbPerFrame._m0[3u].x);
    float _2930 = ((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2905 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _865))) + ((_2911 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1700)) * cbPerFrame._m0[3u].x);
    uint _2931 = _244 + 6u;
    float _2939 = _802 / cbSceneParam._m0[86u].x;
    float _2940 = _803 / cbSceneParam._m0[86u].y;
    vec4 _2954 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2939, _2940, (log2((isnan(cbSceneParam._m0[77u].w) ? _723 : (isnan(_723) ? cbSceneParam._m0[77u].w : min(_723, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2956 = _2954.x;
    float _2957 = _2954.y;
    float _2958 = _2954.z;
    float _2959 = _2954.w;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    if (_723 > cbSceneParam._m0[78u].w)
    {
        float _2993 = isnan(_723) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _723 : min(cbSceneParam._m0[80u].w, _723));
        float _2994 = _2993 / _723;
        float _3005 = _2994 * _775;
        float _3006 = _776 * _2994;
        float _3007 = (-0.0) - _3006;
        float _3009 = _2994 * _777;
        float _3011 = (cbSceneParam._m0[77u].w * _3007) / _2993;
        float _3012 = _3011 + cbSceneParam._m0[79u].w;
        float _3013 = cbSceneParam._m0[79u].w - _3006;
        float _3019 = sqrt(((_3005 * _3005) + (_3006 * _3006)) + (_3009 * _3009));
        float _3022 = (1.0 - (cbSceneParam._m0[77u].w / _2993)) * _3019;
        float _3027 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3029 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3206;
        if (abs((_3007 - _3011) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3206 = ((((_3012 > 0.0) ? exp2(_3027 * _3012) : (2.0 - exp2(_3029 * _3012))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3022;
        }
        else
        {
            float _3150 = 1.0 / cbSceneParam._m0[80u].x;
            float _3151 = isnan(_3013) ? _3012 : (isnan(_3012) ? _3013 : max(_3012, _3013));
            float _3152 = isnan(_3013) ? _3012 : (isnan(_3012) ? _3013 : min(_3012, _3013));
            float _3161 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : min(_3151, 0.0));
            float _3162 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : min(_3152, 0.0));
            _3206 = ((abs(_3019 / _3007) * cbSceneParam._m0[80u].y) * ((((_3161 - _3162) * 2.0) - ((exp2(_3027 * (isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0)))) - exp2(_3027 * (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))))) * _3150)) - ((exp2(_3029 * _3161) - exp2(_3029 * _3162)) * _3150))) + (_3022 * cbSceneParam._m0[80u].z);
        }
        vec4 _3208 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2939, _2940, 1.0), 0.0);
        float _3217 = exp2((_3206 * (-1.44269502162933349609375)) * (1.0 - _3208.w));
        float _3218 = log2(_3217);
        float _3234 = log2(_2959);
        _3031 = (exp2(_3234 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3218 * cbSceneParam._m0[78u].x)) * _3208.x) / cbSceneParam._m0[78u].x)) + _2956;
        _3033 = (exp2(_3234 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3218 * cbSceneParam._m0[78u].y)) * _3208.y) / cbSceneParam._m0[78u].y)) + _2957;
        _3035 = (exp2(_3234 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3218 * cbSceneParam._m0[78u].z)) * _3208.z) / cbSceneParam._m0[78u].z)) + _2958;
        _3037 = _3217 * _2959;
    }
    else
    {
        _3031 = _2956;
        _3033 = _2957;
        _3035 = _2958;
        _3037 = _2959;
    }
    bool _3244;
    vec4 _3047;
    vec4 _3069;
    float _3071;
    float _3075;
    float _3076;
    float _3077;
    float _3078;
    bool _3088;
    for (;;)
    {
        _3047 = cbMatDynParam._m0[0u];
        float _3049 = roundEven(_3047.y);
        bool _3050 = _3049 == 3.0;
        float _3051 = log2(_3037);
        float _3058 = exp2(_3051 * cbSceneParam._m0[78u].x) * _2928;
        float _3059 = exp2(_3051 * cbSceneParam._m0[78u].y) * _2929;
        float _3060 = exp2(_3051 * cbSceneParam._m0[78u].z) * _2930;
        float _3067 = _791 + (-0.5);
        _3069 = cbMtdParam._m0[1u];
        _3071 = _3069.y * _3067;
        float _3074 = (_3049 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3075 = _3074 * (_3050 ? _3058 : (_3058 + (cbSceneParam._m0[72u].w * _3031)));
        _3076 = _3074 * (_3050 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3033)));
        _3077 = _3074 * (_3050 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3035)));
        _3078 = _3067 * 0.999000012874603271484375;
        _3088 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3088)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _3078) < 0.5)
            {
                _3244 = true;
                break;
            }
        }
        uint _3185 = _840 + uint(_3047.w);
        if ((cbInstanceData._m0[_3185].w < 1.0) && ((cbInstanceData._m0[_3185].w + _3078) < 0.5))
        {
            _3244 = true;
            break;
        }
        if ((_3071 + 1.0) < _3069.x)
        {
            _3244 = true;
            break;
        }
        _3244 = false;
        break;
    }
    float _3448;
    if (_3244)
    {
        discard_state = true;
        _3448 = 0.0;
    }
    else
    {
        _3448 = cbInstanceData._m0[_2931].w;
    }
    SV_Target.x = _3075;
    SV_Target.y = _3076;
    SV_Target.z = _3077;
    SV_Target.w = _3448;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2931].w;
    discard_exit();
}


