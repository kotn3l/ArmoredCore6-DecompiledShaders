#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1407;
float _4051;
float _4052;
float _4053;
float _4054;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4063 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4074 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4085 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _412.x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[24u].z) + _461) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4096 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _486 = (_479 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372;
    float _487 = (_479 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373;
    float _488 = (_479 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374;
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _527 = _525.x;
    float _537 = dot(vec4(_527, _525.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _551 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _412.y) * 2.0) - ((((_527 - _537) * cbMtdParam._m0[24u].z) + _537) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4107 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _562 = (_341.x * cbMtdParam._m0[9u].x) * ((_552 * ((_505.x * cbMtdParam._m0[13u].x) - _486)) + _486);
    float _563 = (_341.y * cbMtdParam._m0[9u].y) * ((_552 * ((_505.y * cbMtdParam._m0[13u].y) - _487)) + _487);
    float _564 = (_341.z * cbMtdParam._m0[9u].z) * ((_552 * ((_505.z * cbMtdParam._m0[13u].z) - _488)) + _488);
    float _568 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _562;
    float _571 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _563;
    float _574 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _564;
    float _582 = (((_562 - _568) * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) + _568) * 4.55000019073486328125;
    float _584 = (((_563 - _571) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) + _571) * 4.55000019073486328125;
    float _586 = (((_564 - _574) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) + _574) * 4.55000019073486328125;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _638 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _642 = _638.z;
    float _649 = ((_621.x - _640) * _479) + _640;
    float _650 = ((_621.y - _641) * _479) + _641;
    float _651 = ((_621.z - _642) * _479) + _642;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _676 = ((_663.z - _651) * _552) + _651;
    float _679 = ((((_663.x - _649) * _552) + _649) * 2.0) + (-1.0);
    float _680 = ((((_663.y - _650) * _552) + _650) * 2.0) + (-1.0);
    float _681 = dot(vec2(_679, _680), vec2(_679, _680));
    float _4118 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _686 = sqrt(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))));
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _718 = (_679 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_598.x * 2.0) + (-1.0)))) + (((_706.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _719 = (_680 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_598.y * 2.0) + (-1.0)))) + (((_706.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _731 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _733 = _731.x;
    float _734 = 1.0 - _733;
    float _760 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_733 - _734) * cbMtdParam._m0[24u].y) + _734) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4129 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _761 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _769 = ((((cbMtdParam._m0[10u].x - _582) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _761) + _582;
    float _770 = ((((cbMtdParam._m0[10u].y - _584) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _761) + _584;
    float _771 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _586)) * _761) + _586;
    float _776 = (((_598.z - _676) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _676;
    float _780 = ((_706.z - _776) * cbMtdParam._m0[19u].w) + _776;
    float _784 = ((cbMtdParam._m0[23u].y - _780) * _761) + _780;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _809 = (_803.x * 2.0) + (-1.0);
    float _810 = (_803.y * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _4140 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _827 = (_761 * (((cbMtdParam._m0[22u].z * _718) - _718) + _809)) + _718;
    float _828 = (_761 * (((cbMtdParam._m0[22u].z * _719) - _719) + _810)) + _719;
    float _829 = (_761 * (sqrt(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) - _686)) + _686;
    float _833 = cbMtdParam._m0[22u].x + _706.w;
    float _836 = fma(_829, _253 * NORMAL.x, fma(_828, _260 * TANGENT.x, (_246 * _238) * _827));
    float _839 = fma(_829, _253 * NORMAL.y, fma(_828, _260 * TANGENT.y, (_246 * _239) * _827));
    float _842 = fma(_829, _253 * NORMAL.z, fma(_828, _260 * TANGENT.z, (_246 * _240) * _827));
    float _846 = inversesqrt(dot(vec3(_836, _839, _842), vec3(_836, _839, _842)));
    float _847 = _846 * _836;
    float _848 = _846 * _839;
    float _849 = _846 * _842;
    float _4151 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _850 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _4162 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4173 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4184 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4195 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _868 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _918 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _908);
    float _919 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _908);
    float _920 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _908);
    float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
    float _925 = _918 * _924;
    float _926 = _919 * _924;
    float _927 = _920 * _924;
    vec4 _932 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _934 = _932.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1088 = sqrt(((_918 * _918) + (_919 * _919)) + (_920 * _920));
        float _1094 = (cbMatDynParam._m0[5u].x * _1088) + cbMatDynParam._m0[5u].y;
        float _4206 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1099 = (cbMatDynParam._m0[5u].z * _1088) + cbMatDynParam._m0[5u].w;
        float _4217 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) - _1095)) + _1095) < ((_934 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _945 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _946 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _964 = fma(_849, cbSceneParam._m0[5u].z, fma(_848, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _847));
    float _967 = fma(_849, cbSceneParam._m0[6u].z, fma(_848, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _847));
    float _970 = fma(_849, cbSceneParam._m0[7u].z, fma(_848, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _847));
    uint _983 = _285 + 9u;
    uint _984 = _983 + uint(cbMatDynParam._m0[0u].w);
    float _990 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_984].x;
    float _991 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_984].y;
    float _992 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * cbInstanceData._m0[_984].z;
    float _4228 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _945, cbSceneParam._m0[86u].y * _946));
    float _1008 = ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * TEXCOORD_5.w) * _1004.x;
    float _1009 = dot(vec3(_847, _848, _849), vec3(_925, _926, _927));
    float _1012 = _1009 * 2.0;
    float _1016 = (_1012 * _847) - _925;
    float _1017 = (_1012 * _848) - _926;
    float _1018 = (_1012 * _849) - _927;
    float _1022 = abs(dot(vec3(_925, _926, _927), vec3(_847, _848, _849)));
    float _4261 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1024 = sqrt(_850);
    float _1037 = exp2((_1024 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1024 * 3.0));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1406;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1131 = fma(_1077, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1069));
        float _1135 = fma(_1077, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1069));
        float _1139 = fma(_1077, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1069));
        float _1164 = _1069 + _847;
        float _1165 = _1073 + _848;
        float _1166 = _1077 + _849;
        float _1176 = fma(_1166, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164)) - _1131;
        float _1177 = fma(_1166, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164)) - _1135;
        float _1178 = fma(_1166, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164)) - _1139;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1131 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1135 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[34u].z) + ((((((_1139 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1234 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1200.x + (-0.5));
        float _1236 = _1234 * (_1200.y + (-0.5));
        float _1237 = _1234 * (_1200.z + (-0.5));
        float _1244 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1207.x + (-0.5));
        float _1246 = _1244 * (_1207.y + (-0.5));
        float _1247 = _1244 * (_1207.z + (-0.5));
        float _1254 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1214.x + (-0.5));
        float _1256 = _1254 * (_1214.y + (-0.5));
        float _1257 = _1254 * (_1214.z + (-0.5));
        float _1264 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1221.x + (-0.5));
        float _1266 = _1264 * (_1221.y + (-0.5));
        float _1267 = _1264 * (_1221.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1288 = (dot(vec3(_847, _848, _849), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1298 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4309 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1300 + 1.0))) + _1305) * _1268;
        float _1315 = _1236 * 0.5;
        float _1316 = _1246 * 0.5;
        float _1317 = _1256 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_847, _848, _849), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4342 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1342 + 1.0))) + _1347) * _1269;
        float _1357 = _1237 * 0.5;
        float _1358 = _1247 * 0.5;
        float _1359 = _1257 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_847, _848, _849), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4375 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1384 + 1.0))) + _1389) * _1270;
        _1406 = _1237;
        _1408 = _1236;
        _1409 = _1235;
        _1410 = _1247;
        _1411 = _1246;
        _1412 = _1245;
        _1413 = _1257;
        _1414 = _1256;
        _1415 = _1255;
        _1416 = _1270;
        _1417 = _1269;
        _1418 = _1268;
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1407;
        _1408 = _1407;
        _1409 = _1407;
        _1410 = _1407;
        _1411 = _1407;
        _1412 = _1407;
        _1413 = _1407;
        _1414 = _1407;
        _1415 = _1407;
        _1416 = _1407;
        _1417 = _1407;
        _1418 = _1407;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1448 = fma(_1077, cbModelParam._m0[30u].z, fma(_1073, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069));
        float _1452 = fma(_1077, cbModelParam._m0[31u].z, fma(_1073, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069));
        float _1456 = fma(_1077, cbModelParam._m0[32u].z, fma(_1073, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069));
        float _1479 = _1069 + _847;
        float _1480 = _1073 + _848;
        float _1481 = _1077 + _849;
        float _1491 = fma(_1481, cbModelParam._m0[30u].z, fma(_1480, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1479)) - _1448;
        float _1492 = fma(_1481, cbModelParam._m0[31u].z, fma(_1480, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1479)) - _1452;
        float _1493 = fma(_1481, cbModelParam._m0[32u].z, fma(_1480, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1479)) - _1456;
        float _1497 = inversesqrt(dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493)));
        float _1510 = ((_1497 * _1491) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1448 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1497 * _1492) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1452 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1497 * _1493) / cbModelParam._m0[35u].z) + ((((((_1456 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        float _1547 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1514.x + (-0.5));
        float _1549 = _1547 * (_1514.y + (-0.5));
        float _1550 = _1547 * (_1514.z + (-0.5));
        float _1557 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1521.x + (-0.5));
        float _1559 = _1557 * (_1521.y + (-0.5));
        float _1560 = _1557 * (_1521.z + (-0.5));
        float _1567 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1528.x + (-0.5));
        float _1569 = _1567 * (_1528.y + (-0.5));
        float _1570 = _1567 * (_1528.z + (-0.5));
        float _1577 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1535.x + (-0.5));
        float _1579 = _1577 * (_1535.y + (-0.5));
        float _1580 = _1577 * (_1535.z + (-0.5));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = _1548 * 0.5;
        float _1585 = _1558 * 0.5;
        float _1586 = _1568 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_847, _848, _849), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4438 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1611 + 1.0))) + _1616) * _1581;
        float _1626 = _1549 * 0.5;
        float _1627 = _1559 * 0.5;
        float _1628 = _1569 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_847, _848, _849), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4471 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1653 + 1.0))) + _1658) * _1582;
        float _1668 = _1550 * 0.5;
        float _1669 = _1560 * 0.5;
        float _1670 = _1570 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_847, _848, _849), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4504 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1695 + 1.0))) + _1700) * _1583;
        _1717 = _1550;
        _1718 = _1549;
        _1719 = _1548;
        _1720 = _1560;
        _1721 = _1559;
        _1722 = _1558;
        _1723 = _1570;
        _1724 = _1569;
        _1725 = _1568;
        _1726 = _1583;
        _1727 = _1582;
        _1728 = _1581;
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
    }
    else
    {
        _1717 = _1407;
        _1718 = _1407;
        _1719 = _1407;
        _1720 = _1407;
        _1721 = _1407;
        _1722 = _1407;
        _1723 = _1407;
        _1724 = _1407;
        _1725 = _1407;
        _1726 = _1407;
        _1727 = _1407;
        _1728 = _1407;
        _1729 = 0.0;
        _1730 = 0.0;
        _1731 = 0.0;
    }
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1419)) + _1419;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1420)) + _1420;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1421)) + _1421;
    float _1764 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1741));
    float _1785 = _1016 * 0.5;
    float _1786 = _1017 * 0.5;
    float _1787 = _1018 * 0.5;
    float _1788 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1791 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1794 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1828;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1801 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1406, _1410, _1413, _1416));
        float _1805 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1809 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1816 = dot(vec4(cbModelParam._m0[39u]), vec4(_1785, _1786, _1787, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1839;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1830 = dot(vec4(cbModelParam._m0[40u]), vec4(_1785, _1786, _1787, 1.0));
        _1839 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1839 = 1.0;
    }
    float _1843 = (_1839 * cbModelParam._m0[1u].x) + (_1828 * (1.0 - cbModelParam._m0[1u].x));
    float _1853 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _850);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1853 : min(cbModelParam._m0[25u].z, _1853));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1903 = fma(_1077, cbModelParam._m0[13u].z, fma(_1073, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069)) + cbModelParam._m0[13u].w;
        float _1907 = fma(_1077, cbModelParam._m0[14u].z, fma(_1073, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069)) + cbModelParam._m0[14u].w;
        float _1911 = fma(_1077, cbModelParam._m0[15u].z, fma(_1073, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069)) + cbModelParam._m0[15u].w;
        float _1914 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1917 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1920 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1948;
        if (_1914 > 0.0)
        {
            _1948 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1948 = frontier_phi_17_15_ladder;
        }
        float _2119;
        if (_1917 > 0.0)
        {
            _2119 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2119 = frontier_phi_26_22_ladder;
        }
        float _2414;
        if (_1920 > 0.0)
        {
            _2414 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2414 = frontier_phi_38_33_ladder;
        }
        float _2416 = isnan(_2119) ? _1948 : (isnan(_1948) ? _2119 : min(_1948, _2119));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1914) + _1903;
        float _2422 = (_2417 * _1917) + _1907;
        float _2423 = (_2417 * _1920) + _1911;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1854);
            frontier_phi_16_38_ladder = _2568.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2568.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2568.x * cbModelParam._m0[1u].y;
        }
        _1936 = frontier_phi_16_38_ladder_2;
        _1938 = frontier_phi_16_38_ladder_1;
        _1940 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1854);
        _1936 = _1924.x * cbModelParam._m0[1u].y;
        _1938 = _1924.y * cbModelParam._m0[1u].y;
        _1940 = _1924.z * cbModelParam._m0[1u].y;
    }
    float _1944 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _850);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1944 : min(cbModelParam._m0[25u].w, _1944));
    float _2036;
    float _2038;
    float _2040;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2000 = fma(_1077, cbModelParam._m0[21u].z, fma(_1073, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069)) + cbModelParam._m0[21u].w;
        float _2004 = fma(_1077, cbModelParam._m0[22u].z, fma(_1073, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069)) + cbModelParam._m0[22u].w;
        float _2008 = fma(_1077, cbModelParam._m0[23u].z, fma(_1073, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069)) + cbModelParam._m0[23u].w;
        float _2011 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _2014 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _2017 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2124;
        if (_2011 > 0.0)
        {
            _2124 = abs((1.0 - _2000) / _2011);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2000 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2124 = frontier_phi_28_24_ladder;
        }
        float _2441;
        if (_2014 > 0.0)
        {
            _2441 = abs((1.0 - _2004) / _2014);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2004 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2441 = frontier_phi_40_35_ladder;
        }
        float _2768;
        if (_2017 > 0.0)
        {
            _2768 = abs((1.0 - _2008) / _2017);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2008 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2768 = frontier_phi_50_47_ladder;
        }
        float _2770 = isnan(_2441) ? _2124 : (isnan(_2124) ? _2441 : min(_2124, _2441));
        float _2771 = isnan(_2768) ? _2770 : (isnan(_2770) ? _2768 : min(_2770, _2768));
        float _2775 = (_2771 * _2011) + _2000;
        float _2776 = (_2771 * _2014) + _2004;
        float _2777 = (_2771 * _2017) + _2008;
        float _2778 = _2771 * 9.9999997473787516355514526367188e-05;
        float _2779 = (-1.0) - _2778;
        float _2781 = _2778 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2777 > _2781) || ((_2777 < _2779) || ((_2776 > _2781) || ((_2776 < _2779) || ((_2775 < _2779) || (_2775 > _2781))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2777, cbModelParam._m0[17u].z, fma(_2776, cbModelParam._m0[17u].y, _2775 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2777, cbModelParam._m0[18u].z, fma(_2776, cbModelParam._m0[18u].y, _2775 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2777, cbModelParam._m0[19u].z, fma(_2776, cbModelParam._m0[19u].y, _2775 * cbModelParam._m0[19u].x))), _1945);
            frontier_phi_25_50_ladder = _2895.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2895.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2895.x * cbModelParam._m0[1u].z;
        }
        _2036 = frontier_phi_25_50_ladder_2;
        _2038 = frontier_phi_25_50_ladder_1;
        _2040 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1945);
        _2036 = _2020.x * cbModelParam._m0[1u].z;
        _2038 = _2020.y * cbModelParam._m0[1u].z;
        _2040 = _2020.z * cbModelParam._m0[1u].z;
    }
    float _2052 = ((((1.0 - _1037) * ((_1024 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1037 * _1024)) * _1008;
    float _2053 = _2052 * ((cbModelParam._m0[1u].w * (_2036 - _1936)) + _1936);
    float _2054 = _2052 * ((cbModelParam._m0[1u].w * (_2038 - _1938)) + _1938);
    float _2055 = _2052 * ((cbModelParam._m0[1u].w * (_2040 - _1940)) + _1940);
    float _2058 = fma(_2055, cbSceneParam._m0[89u].z, fma(_2054, cbSceneParam._m0[89u].y, _2053 * cbSceneParam._m0[89u].x));
    float _2061 = fma(_2055, cbSceneParam._m0[90u].z, fma(_2054, cbSceneParam._m0[90u].y, _2053 * cbSceneParam._m0[90u].x));
    float _2064 = fma(_2055, cbSceneParam._m0[91u].z, fma(_2054, cbSceneParam._m0[91u].y, _2053 * cbSceneParam._m0[91u].x));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2106 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2111 = _2098 / _2110;
    float _2112 = _2102 / _2110;
    float _2113 = _2106 / _2110;
    float _2260;
    float _2261;
    float _2262;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2140 = ((uint(_2113 > cbSceneParam._m0[59u].y) + uint(_2113 > cbSceneParam._m0[59u].x)) + uint(_2113 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2141 = _2140 + 43u;
        uint _2149 = _2140 + 44u;
        uint _2157 = _2140 + 45u;
        uint _2165 = _2140 + 46u;
        float _2176 = fma(_2110, cbSceneParam._m0[_2141].w, fma(_2106, cbSceneParam._m0[_2141].z, fma(_2102, cbSceneParam._m0[_2141].y, _2098 * cbSceneParam._m0[_2141].x)));
        float _2180 = fma(_2110, cbSceneParam._m0[_2149].w, fma(_2106, cbSceneParam._m0[_2149].z, fma(_2102, cbSceneParam._m0[_2149].y, _2098 * cbSceneParam._m0[_2149].x)));
        float _2188 = fma(_2110, cbSceneParam._m0[_2165].w, fma(_2106, cbSceneParam._m0[_2165].z, fma(_2102, cbSceneParam._m0[_2165].y, _2098 * cbSceneParam._m0[_2165].x)));
        float _2193 = cbSceneParam._m0[33u].z * _2188;
        float _2195 = cbSceneParam._m0[33u].w * _2188;
        float _2198 = fma(_2110, cbSceneParam._m0[_2157].w, fma(_2106, cbSceneParam._m0[_2157].z, fma(_2102, cbSceneParam._m0[_2157].y, _2098 * cbSceneParam._m0[_2157].x))) / _2188;
        float _2246 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
        float _4630 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2253 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 + _2176) / _2188, (_2195 + _2180) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 + _2176) / _2188, (_2180 - _2193) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2193) / _2188, (_2180 - _2195) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2195) / _2188, (_2193 + _2180) / _2188), _2198), 0.0)).x), vec4(0.25)));
        _2260 = 1.0 - (_2253 * cbSceneParam._m0[34u].x);
        _2261 = 1.0 - (_2253 * cbSceneParam._m0[34u].y);
        _2262 = 1.0 - (_2253 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2260 = 1.0;
        _2261 = 1.0;
        _2262 = 1.0;
    }
    float _2326;
    float _2328;
    float _2330;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2314 = fma(_2110, cbSceneParam._m0[63u].w, fma(_2106, cbSceneParam._m0[63u].z, fma(_2102, cbSceneParam._m0[63u].y, _2098 * cbSceneParam._m0[63u].x)));
        float _2315 = fma(_2110, cbSceneParam._m0[60u].w, fma(_2106, cbSceneParam._m0[60u].z, fma(_2102, cbSceneParam._m0[60u].y, _2098 * cbSceneParam._m0[60u].x))) / _2314;
        float _2316 = fma(_2110, cbSceneParam._m0[61u].w, fma(_2106, cbSceneParam._m0[61u].z, fma(_2102, cbSceneParam._m0[61u].y, _2098 * cbSceneParam._m0[61u].x))) / _2314;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2315 >= cbSceneParam._m0[64u].x) && (_2316 >= cbSceneParam._m0[64u].y)) && (_2315 <= cbSceneParam._m0[64u].z)) && (_2316 <= cbSceneParam._m0[64u].w))
        {
            float _2454 = fma(_2110, cbSceneParam._m0[62u].w, fma(_2106, cbSceneParam._m0[62u].z, fma(_2102, cbSceneParam._m0[62u].y, _2098 * cbSceneParam._m0[62u].x))) / _2314;
            float _2458 = isnan(cbSceneParam._m0[41u].w) ? _2454 : (isnan(_2454) ? cbSceneParam._m0[41u].w : max(_2454, cbSceneParam._m0[41u].w));
            float _2501 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
            float _4646 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
            float _2508 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2315, cbSceneParam._m0[33u].w + _2316), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2315, _2316 - cbSceneParam._m0[33u].z), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].z, _2316 - cbSceneParam._m0[33u].w), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2316), _2458), 0.0)).x), vec4(0.25)));
            float _2512 = 1.0 - (_2508 * cbSceneParam._m0[34u].x);
            float _2513 = 1.0 - (_2508 * cbSceneParam._m0[34u].y);
            float _2514 = 1.0 - (_2508 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
            frontier_phi_37_36_ladder_1 = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
            frontier_phi_37_36_ladder_2 = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
        }
        else
        {
            frontier_phi_37_36_ladder = _2262;
            frontier_phi_37_36_ladder_1 = _2261;
            frontier_phi_37_36_ladder_2 = _2260;
        }
        _2326 = frontier_phi_37_36_ladder_2;
        _2328 = frontier_phi_37_36_ladder_1;
        _2330 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2326 = _2260;
        _2328 = _2261;
        _2330 = _2262;
    }
    uvec4 _2335 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2337 = _2335.x * 14u;
    uint _2338 = _2337 + 13u;
    float _2345 = _1008 + (-1.0);
    float _2350 = (cbLight._m0[_2338].x * _2345) + 1.0;
    float _2351 = (cbLight._m0[_2338].y * _2345) + 1.0;
    float _2352 = (cbLight._m0[_2338].z * _2345) + 1.0;
    float _2353 = (cbLight._m0[_2338].w * _2345) + 1.0;
    uint _2354 = _2337 + 5u;
    float _2360 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
    uint _2364 = _2337 + 4u;
    float _2373 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2377 = _2337 | 1u;
    float _2388 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_847, _848, _849));
    float _2391 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_847, _848, _849));
    float _4682 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _4693 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2396 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2398 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * 0.3183098733425140380859375;
    float _2405 = ((cbLight._m0[_2354].x * _2360) * _2398) + (((cbLight._m0[_2364].x * _2326) * _2373) * _2396);
    float _2406 = ((_2360 * cbLight._m0[_2354].y) * _2398) + (((cbLight._m0[_2364].y * _2328) * _2373) * _2396);
    float _2407 = ((_2360 * cbLight._m0[_2354].z) * _2398) + (((cbLight._m0[_2364].z * _2330) * _2373) * _2396);
    uvec4 _2411 = floatBitsToUint(cbLight._m0[_2337 + 12u]);
    bool _2413 = _2411.x == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2413)
    {
        _2515 = _2405;
        _2517 = _2406;
        _2519 = _2407;
    }
    else
    {
        uint _2523 = _2337 + 6u;
        float _2539 = (dot(vec3(cbLight._m0[_2337 + 2u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4704 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2542 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2515 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2405;
        _2517 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2406;
        _2519 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2407;
    }
    bool _2522 = _2411.y == 0u;
    float _2577;
    float _2579;
    float _2581;
    if (_2522)
    {
        _2577 = _2515;
        _2579 = _2517;
        _2581 = _2519;
    }
    else
    {
        uint _2739 = _2337 + 7u;
        float _2755 = (dot(vec3(cbLight._m0[_2337 + 3u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2756 = _2755 * _2755;
        float _4720 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2757 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2758 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2577 = (((cbLight._m0[_2739].x * 0.3183098733425140380859375) * _2757) * _2758) + _2515;
        _2579 = (((cbLight._m0[_2739].y * 0.3183098733425140380859375) * _2757) * _2758) + _2517;
        _2581 = (((cbLight._m0[_2739].z * 0.3183098733425140380859375) * _2757) * _2758) + _2519;
    }
    uint _2584 = _2337 + 8u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _850) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2337].x + _925;
    float _2600 = cbLight._m0[_2337].y + _926;
    float _2601 = cbLight._m0[_2337].z + _927;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2337].xyz));
    float _4736 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _4747 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2613 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2614 = dot(vec3(_847, _848, _849), vec3(_2606, _2607, _2608));
    float _4758 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2618 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2606, _2607, _2608));
    float _4769 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2622 = _2598 * _2598;
    float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
    float _2637 = (exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2638 = 1.0 - _2598;
    float _2649 = (0.5 / (((_2613 * ((_2612 * _2638) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2638) + _2598) * _2612))) * _2612;
    float _4780 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
    uint _2665 = _2337 + 9u;
    float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _850) * 0.949999988079071044921875);
    float _2677 = _2676 * _2676;
    float _2678 = cbLight._m0[_2377].x + _925;
    float _2679 = cbLight._m0[_2377].y + _926;
    float _2680 = cbLight._m0[_2377].z + _927;
    float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
    float _2685 = _2684 * _2678;
    float _2686 = _2684 * _2679;
    float _2687 = _2684 * _2680;
    float _2688 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2377].xyz));
    float _4791 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2692 = dot(vec3(_847, _848, _849), vec3(_2685, _2686, _2687));
    float _4802 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2695 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2696 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2685, _2686, _2687));
    float _4813 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2700 = _2677 * _2677;
    float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
    float _2713 = (exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2714 = 1.0 - _2677;
    float _2724 = (0.5 / (((_2613 * ((_2691 * _2714) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2714) + _2677) * _2691))) * _2691;
    float _4824 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2726 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
    float _2736 = (((_2713 * cbLight._m0[_2665].x) * _2726) * _2360) + ((((cbLight._m0[_2584].x * _2326) * _2637) * _2651) * _2373);
    float _2737 = (((_2713 * cbLight._m0[_2665].y) * _2726) * _2360) + ((((cbLight._m0[_2584].y * _2328) * _2637) * _2651) * _2373);
    float _2738 = (((_2713 * cbLight._m0[_2665].z) * _2726) * _2360) + ((((cbLight._m0[_2584].z * _2330) * _2637) * _2651) * _2373);
    float _2794;
    float _2796;
    float _2798;
    if (_2413)
    {
        _2794 = _2736;
        _2796 = _2737;
        _2798 = _2738;
    }
    else
    {
        uint _2800 = _2337 + 2u;
        uint _2804 = _2337 + 10u;
        float _2818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2800].w)) * _850) * 0.949999988079071044921875);
        float _2819 = _2818 * _2818;
        float _2820 = cbLight._m0[_2800].x + _925;
        float _2821 = cbLight._m0[_2800].y + _926;
        float _2822 = cbLight._m0[_2800].z + _927;
        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
        float _2827 = _2826 * _2820;
        float _2828 = _2826 * _2821;
        float _2829 = _2826 * _2822;
        float _2830 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2800].xyz));
        float _4835 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2834 = dot(vec3(_847, _848, _849), vec3(_2827, _2828, _2829));
        float _4846 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2838 = dot(vec3(cbLight._m0[_2800].xyz), vec3(_2827, _2828, _2829));
        float _4857 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2842 = _2819 * _2819;
        float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
        float _2855 = (exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2856 = 1.0 - _2819;
        float _2866 = (0.5 / (((_2613 * ((_2833 * _2856) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2856) + _2819) * _2833))) * _2833;
        float _4868 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2868 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
        float _2869 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2794 = (((_2855 * cbLight._m0[_2804].x) * _2868) * _2869) + _2736;
        _2796 = (((_2855 * cbLight._m0[_2804].y) * _2868) * _2869) + _2737;
        _2798 = (((_2855 * cbLight._m0[_2804].z) * _2868) * _2869) + _2738;
    }
    float _2900;
    float _2902;
    float _2904;
    if (_2522)
    {
        _2900 = _2794;
        _2902 = _2796;
        _2904 = _2798;
    }
    else
    {
        uint _2911 = _2337 + 3u;
        uint _2915 = _2337 + 11u;
        float _2929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2911].w)) * _850) * 0.949999988079071044921875);
        float _2930 = _2929 * _2929;
        float _2931 = cbLight._m0[_2911].x + _925;
        float _2932 = cbLight._m0[_2911].y + _926;
        float _2933 = cbLight._m0[_2911].z + _927;
        float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
        float _2938 = _2937 * _2931;
        float _2939 = _2937 * _2932;
        float _2940 = _2937 * _2933;
        float _2941 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2911].xyz));
        float _4884 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2944 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2945 = dot(vec3(_847, _848, _849), vec3(_2938, _2939, _2940));
        float _4895 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2948 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2949 = dot(vec3(cbLight._m0[_2911].xyz), vec3(_2938, _2939, _2940));
        float _4906 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2953 = _2930 * _2930;
        float _2957 = ((_2948 * _2948) * (_2953 + (-1.0))) + 1.0;
        float _2966 = (exp2(log2(1.0 - (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2967 = 1.0 - _2930;
        float _2977 = (0.5 / (((_2613 * ((_2944 * _2967) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2967) + _2930) * _2944))) * _2944;
        float _4917 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        float _2979 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2953 / ((_2957 * _2957) * 3.141590118408203125));
        float _2980 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2900 = (((_2966 * cbLight._m0[_2915].x) * _2979) * _2980) + _2794;
        _2902 = (((_2966 * cbLight._m0[_2915].y) * _2979) * _2980) + _2796;
        _2904 = (((_2966 * cbLight._m0[_2915].z) * _2979) * _2980) + _2798;
    }
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    if (_2335.y == 0u)
    {
        uvec4 _3001 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3002 = _3001.x;
        uint _3013 = uint((float(_3001.y) * floor(float(uint(cbSceneParam._m0[85u].y * _946) / _3002))) + floor(float(uint(cbSceneParam._m0[85u].x * _945) / _3002)));
        float _3023 = (log2(_2113 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3024 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        uint _3027 = uint(isnan(14.0) ? _3024 : (isnan(_3024) ? 14.0 : min(_3024, 14.0)));
        uvec4 _3032 = texelFetch(g_lightClusterGridBuffer, int(((_3027 << 2u) + (_3013 << 6u)) >> 2u));
        uint _3033 = _3032.x;
        uint _3034 = _3001.z;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        if (((((1u << ((_3034 >> 4u) & 15u)) + 4294967295u) & _3033) == 0u) || ((_3034 & 240u) == 0u))
        {
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
        }
        else
        {
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            float _3271 = 0.0;
            uint _3272 = 0u;
            uint _3281;
            bool _3282;
            for (;;)
            {
                _3281 = texelFetch(g_lightClassification, int((((_3027 << 5u) + (_3013 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                _3282 = _3281 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3282)
                {
                    frontier_phi_71_pred = _3271;
                    frontier_phi_71_pred_1 = _3270;
                    frontier_phi_71_pred_2 = _3269;
                    frontier_phi_71_pred_3 = _3268;
                    frontier_phi_71_pred_4 = _3267;
                    frontier_phi_71_pred_5 = _3266;
                }
                else
                {
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    uint _3417;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3270;
                    _3416 = _3271;
                    _3417 = _3281;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    for (;;)
                    {
                        uint _3421 = uint(findLSB(_3417)) + (_3272 << 5u);
                        uint _3418 = (_3417 + 4294967295u) & _3417;
                        uint _3423 = _3421 * 48u;
                        vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3423)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 3u)).x));
                        uint _3443 = (_3421 * 48u) + 4u;
                        vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3443)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 3u)).x));
                        uint _3462 = (_3421 * 48u) + 8u;
                        vec3 _3473 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3462)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 2u)).x));
                        float _3477 = _3437.x - _2111;
                        float _3478 = _3437.y - _2112;
                        float _3479 = _3437.z - _2113;
                        float _3480 = dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479));
                        float _3483 = inversesqrt(_3480);
                        float _3484 = _3483 * _3477;
                        float _3485 = _3483 * _3478;
                        float _3486 = _3483 * _3479;
                        float _3487 = dot(vec3(_964, _967, _970), vec3(_3484, _3485, _3486));
                        float _3492 = 1.0 - (_3480 * _3437.w);
                        float _4943 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3493 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3494 = sqrt(_3480) * _3456.w;
                        float _3497 = 1.39999997615814208984375 / (_3494 + 1.39999997615814208984375);
                        float _3498 = _3497 * _3497;
                        float _3501 = ((1.0 - _3498) * _3487) + _3498;
                        float _3504 = _3494 * _3494;
                        float _3508 = ((isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0))) * _3493) / ((_3504 * 0.699999988079071044921875) + 1.0);
                        float _3512 = (-0.0) - _2111;
                        float _3513 = (-0.0) - _2112;
                        float _3514 = (-0.0) - _2113;
                        float _3518 = inversesqrt(dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514)));
                        float _3519 = _3518 * _3512;
                        float _3520 = _3518 * _3513;
                        float _3521 = _3518 * _3514;
                        float _3528 = exp2(log2(1.0 / ((_3504 * 3.5) + 5.0)) * 0.25);
                        float _3529 = 1.0 - _1024;
                        float _3536 = sqrt(1.0 - ((1.0 - (_3529 * _3529)) * (1.0 - (_3528 * _3528))));
                        float _3537 = _3536 * _3536;
                        float _3538 = _3537 * _3537;
                        float _3539 = _3519 + _3484;
                        float _3540 = _3520 + _3485;
                        float _3541 = _3521 + _3486;
                        float _3545 = inversesqrt(dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541)));
                        float _3549 = dot(vec3(_964, _967, _970), vec3(_3519, _3520, _3521));
                        float _4959 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3552 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3553 = dot(vec3(_964, _967, _970), vec3(_3545 * _3539, _3545 * _3540, _3545 * _3541));
                        float _4970 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3556 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3560 = ((_3556 * _3556) * (_3538 + (-1.0))) + 1.0;
                        float _3561 = _3497 * _3537;
                        float _3562 = _3561 * _3561;
                        float _3565 = ((1.0 - _3562) * _3487) + _3562;
                        float _4981 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3566 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3567 = 1.0 - _3537;
                        float _3577 = (0.5 / (((_3566 * ((_3552 * _3567) + _3537)) + 9.9999999392252902907785028219223e-09) + (((_3566 * _3567) + _3537) * _3552))) * _3566;
                        float _4992 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3588 = (((_3538 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3560 * _3560) * ((_3504 * 2.1991131305694580078125) + 3.141590118408203125))) * _3493;
                        _3341 = (_3508 * _3456.x) + _3414;
                        _3342 = (_3508 * _3456.y) + _3415;
                        _3343 = (_3508 * _3456.z) + _3416;
                        _3338 = (_3588 * _3473.x) + _3411;
                        _3339 = (_3588 * _3473.y) + _3412;
                        _3340 = (_3588 * _3473.z) + _3413;
                        if (_3418 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3342;
                            _3416 = _3343;
                            _3417 = _3418;
                        }
                    }
                    frontier_phi_71_pred = _3343;
                    frontier_phi_71_pred_1 = _3342;
                    frontier_phi_71_pred_2 = _3341;
                    frontier_phi_71_pred_3 = _3340;
                    frontier_phi_71_pred_4 = _3339;
                    frontier_phi_71_pred_5 = _3338;
                }
                _3124 = frontier_phi_71_pred;
                _3122 = frontier_phi_71_pred_1;
                _3120 = frontier_phi_71_pred_2;
                _3118 = frontier_phi_71_pred_3;
                _3116 = frontier_phi_71_pred_4;
                _3114 = frontier_phi_71_pred_5;
                uint _3273 = _3272 + 1u;
                if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3266 = _3114;
                    _3267 = _3116;
                    _3268 = _3118;
                    _3269 = _3120;
                    _3270 = _3122;
                    _3271 = _3124;
                    _3272 = _3273;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
        }
        uvec4 _3127 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3128 = _3127.z;
        uint _3130 = (_3128 >> 8u) & 15u;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        if (((4294967295u << _3130) & _3033) == 0u)
        {
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
            _3240 = _3119;
            _3242 = _3121;
            _3244 = _3123;
        }
        else
        {
            float _3259 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
            float _3260 = _3259 * _2111;
            float _3261 = _3259 * _2112;
            float _3262 = _3259 * _2113;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3130 < ((_3128 >> 12u) & 15u))
            {
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3245;
                float _3394 = _3113;
                float _3395 = _3115;
                float _3396 = _3117;
                float _3397 = _3119;
                float _3398 = _3121;
                float _3399 = _3123;
                uint _3400 = _3130;
                uint _3409;
                bool _3410;
                for (;;)
                {
                    _3409 = texelFetch(g_lightClassification, int((((_3027 << 5u) + (_3013 << 9u)) + (_3400 << 2u)) >> 2u)).x;
                    _3410 = _3409 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3410)
                    {
                        frontier_phi_82_pred = _3399;
                        frontier_phi_82_pred_1 = _3398;
                        frontier_phi_82_pred_2 = _3397;
                        frontier_phi_82_pred_3 = _3396;
                        frontier_phi_82_pred_4 = _3395;
                        frontier_phi_82_pred_5 = _3394;
                    }
                    else
                    {
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3615 = _3394;
                        float _3616 = _3395;
                        float _3617 = _3396;
                        float _3618 = _3397;
                        float _3619 = _3398;
                        float _3620 = _3399;
                        uint _3621 = _3409;
                        uint _3622;
                        vec4 _3647;
                        float _3648;
                        vec4 _3663;
                        vec3 _3675;
                        vec4 _3690;
                        vec4 _3705;
                        float _3751;
                        bool _3752;
                        for (;;)
                        {
                            uint _3632 = ((_3400 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3621));
                            _3622 = (_3621 + 4294967295u) & _3621;
                            uint _3634 = _3632 * 40u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            _3648 = _3647.w;
                            uint _3650 = (_3632 * 40u) + 4u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3632 * 40u) + 8u;
                            _3675 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x));
                            uint _3677 = (_3632 * 40u) + 16u;
                            _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            uint _3692 = (_3632 * 40u) + 20u;
                            _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            uint _3707 = (_3632 * 40u) + 24u;
                            vec4 _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            uint _3726 = (_3632 * 40u) + 28u;
                            vec4 _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            _3751 = fma(_2113, _3739.z, fma(_2112, _3739.y, _3739.x * _2111)) + _3739.w;
                            _3752 = !((fma(_2113, _3720.z, fma(_2112, _3720.y, _3720.x * _2111)) + _3720.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3752)
                            {
                                float _3779 = _3647.x - _2111;
                                float _3780 = _3647.y - _2112;
                                float _3781 = _3647.z - _2113;
                                float _3782 = dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781));
                                float _3785 = inversesqrt(_3782);
                                float _3786 = _3785 * _3779;
                                float _3787 = _3785 * _3780;
                                float _3788 = _3785 * _3781;
                                float _3792 = 1.0 - (_3782 / (_3648 * _3648));
                                float _5003 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3793 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3797 = sqrt(_3782) * _3663.w;
                                float _3799 = 1.39999997615814208984375 / (_3797 + 1.39999997615814208984375);
                                float _3800 = _3799 * _3799;
                                float _3803 = ((1.0 - _3800) * dot(vec3(_3786, _3787, _3788), vec3(_964, _967, _970))) + _3800;
                                float _3806 = _3797 * _3797;
                                float _3810 = (fma(_2113, _3690.z, fma(_2112, _3690.y, _3690.x * _2111)) + _3690.w) / _3751;
                                float _3811 = (fma(_2113, _3705.z, fma(_2112, _3705.y, _3705.x * _2111)) + _3705.w) / _3751;
                                float _3815 = 1.0 - dot(vec2(_3810, _3811), vec2(_3810, _3811));
                                float _5019 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3817 = _3816 * (((isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0))) * _3793) / ((_3806 * 0.699999988079071044921875) + 1.0));
                                float _3829 = exp2(log2(1.0 / ((_3806 * 3.5) + 5.0)) * 0.25);
                                float _3830 = 1.0 - _1024;
                                float _3837 = sqrt(1.0 - ((1.0 - (_3830 * _3830)) * (1.0 - (_3829 * _3829))));
                                float _3838 = _3837 * _3837;
                                float _3839 = _3838 * _3838;
                                float _3840 = _3786 - _3260;
                                float _3841 = _3787 - _3261;
                                float _3842 = _3788 - _3262;
                                float _3846 = inversesqrt(dot(vec3(_3840, _3841, _3842), vec3(_3840, _3841, _3842)));
                                float _3850 = dot(vec3(_964, _967, _970), vec3((-0.0) - _3260, (-0.0) - _3261, (-0.0) - _3262));
                                float _5030 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3853 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3854 = dot(vec3(_964, _967, _970), vec3(_3846 * _3840, _3846 * _3841, _3846 * _3842));
                                float _5041 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3857 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3861 = ((_3857 * _3857) * (_3839 + (-1.0))) + 1.0;
                                float _3862 = _3799 * _3838;
                                float _3863 = _3862 * _3862;
                                float _3869 = ((1.0 - _3863) * dot(vec3(_964, _967, _970), vec3(_3786, _3787, _3788))) + _3863;
                                float _5052 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3870 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3871 = 1.0 - _3838;
                                float _3881 = (0.5 / (((_3870 * ((_3853 * _3871) + _3838)) + 9.9999999392252902907785028219223e-09) + (((_3870 * _3871) + _3838) * _3853))) * _3870;
                                float _5063 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3891 = (_3816 * _3793) * (((_3839 * 3.1415927410125732421875) * (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0)))) / ((_3861 * _3861) * ((_3806 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3817 * _3663.z;
                                frontier_phi_88_pred_1 = _3817 * _3663.y;
                                frontier_phi_88_pred_2 = _3817 * _3663.x;
                                frontier_phi_88_pred_3 = _3891 * _3675.z;
                                frontier_phi_88_pred_4 = _3891 * _3675.y;
                                frontier_phi_88_pred_5 = _3891 * _3675.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3900 = frontier_phi_88_pred;
                            _3899 = frontier_phi_88_pred_1;
                            _3898 = frontier_phi_88_pred_2;
                            _3897 = frontier_phi_88_pred_3;
                            _3896 = frontier_phi_88_pred_4;
                            _3895 = frontier_phi_88_pred_5;
                            _3605 = _3898 + _3618;
                            _3606 = _3899 + _3619;
                            _3607 = _3900 + _3620;
                            _3602 = _3895 + _3615;
                            _3603 = _3896 + _3616;
                            _3604 = _3897 + _3617;
                            if (_3622 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3622;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3607;
                        frontier_phi_82_pred_1 = _3606;
                        frontier_phi_82_pred_2 = _3605;
                        frontier_phi_82_pred_3 = _3604;
                        frontier_phi_82_pred_4 = _3603;
                        frontier_phi_82_pred_5 = _3602;
                    }
                    _3245 = frontier_phi_82_pred;
                    _3243 = frontier_phi_82_pred_1;
                    _3241 = frontier_phi_82_pred_2;
                    _3239 = frontier_phi_82_pred_3;
                    _3237 = frontier_phi_82_pred_4;
                    _3235 = frontier_phi_82_pred_5;
                    uint _3401 = _3400 + 1u;
                    if (_3401 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3394 = _3235;
                        _3395 = _3237;
                        _3396 = _3239;
                        _3397 = _3241;
                        _3398 = _3243;
                        _3399 = _3245;
                        _3400 = _3401;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3241;
                frontier_phi_63_64_ladder_1 = _3245;
                frontier_phi_63_64_ladder_2 = _3243;
                frontier_phi_63_64_ladder_3 = _3239;
                frontier_phi_63_64_ladder_4 = _3237;
                frontier_phi_63_64_ladder_5 = _3235;
            }
            else
            {
                frontier_phi_63_64_ladder = _3119;
                frontier_phi_63_64_ladder_1 = _3123;
                frontier_phi_63_64_ladder_2 = _3121;
                frontier_phi_63_64_ladder_3 = _3117;
                frontier_phi_63_64_ladder_4 = _3115;
                frontier_phi_63_64_ladder_5 = _3113;
            }
            _3234 = frontier_phi_63_64_ladder_5;
            _3236 = frontier_phi_63_64_ladder_4;
            _3238 = frontier_phi_63_64_ladder_3;
            _3240 = frontier_phi_63_64_ladder;
            _3242 = frontier_phi_63_64_ladder_2;
            _3244 = frontier_phi_63_64_ladder_1;
        }
        float _3249 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
        _3046 = (_3249 * _3240) + _2577;
        _3048 = (_3249 * _3242) + _2579;
        _3050 = (_3249 * _3244) + _2581;
        _3052 = ((_3234 * 0.039999999105930328369140625) * _3249) + _2900;
        _3054 = ((_3236 * 0.039999999105930328369140625) * _3249) + _2902;
        _3056 = ((_3238 * 0.039999999105930328369140625) * _3249) + _2904;
    }
    else
    {
        _3046 = _2577;
        _3048 = _2579;
        _3050 = _2581;
        _3052 = _2900;
        _3054 = _2902;
        _3056 = _2904;
    }
    float _5079 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _5090 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _5101 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _3073 = ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3046 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1008))) + ((_3052 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    float _3074 = ((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3048 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1008))) + ((_3054 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    float _3075 = ((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3050 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1008))) + ((_3056 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    uint _3076 = _285 + 6u;
    float _3084 = _945 / cbSceneParam._m0[86u].x;
    float _3085 = _946 / cbSceneParam._m0[86u].y;
    vec4 _3099 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3084, _3085, (log2((isnan(cbSceneParam._m0[77u].w) ? _868 : (isnan(_868) ? cbSceneParam._m0[77u].w : min(_868, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3101 = _3099.x;
    float _3102 = _3099.y;
    float _3103 = _3099.z;
    float _3104 = _3099.w;
    float _3176;
    float _3178;
    float _3180;
    float _3182;
    if (_868 > cbSceneParam._m0[78u].w)
    {
        float _3138 = isnan(_868) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _868 : min(cbSceneParam._m0[80u].w, _868));
        float _3139 = _3138 / _868;
        float _3150 = _3139 * _918;
        float _3151 = _919 * _3139;
        float _3152 = (-0.0) - _3151;
        float _3154 = _3139 * _920;
        float _3156 = (cbSceneParam._m0[77u].w * _3152) / _3138;
        float _3157 = _3156 + cbSceneParam._m0[79u].w;
        float _3158 = cbSceneParam._m0[79u].w - _3151;
        float _3164 = sqrt(((_3150 * _3150) + (_3151 * _3151)) + (_3154 * _3154));
        float _3167 = (1.0 - (cbSceneParam._m0[77u].w / _3138)) * _3164;
        float _3172 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3174 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3351;
        if (abs((_3152 - _3156) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3351 = ((((_3157 > 0.0) ? exp2(_3172 * _3157) : (2.0 - exp2(_3174 * _3157))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3167;
        }
        else
        {
            float _3295 = 1.0 / cbSceneParam._m0[80u].x;
            float _3296 = isnan(_3158) ? _3157 : (isnan(_3157) ? _3158 : max(_3157, _3158));
            float _3297 = isnan(_3158) ? _3157 : (isnan(_3157) ? _3158 : min(_3157, _3158));
            float _3306 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : min(_3296, 0.0));
            float _3307 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : min(_3297, 0.0));
            _3351 = ((abs(_3164 / _3152) * cbSceneParam._m0[80u].y) * ((((_3306 - _3307) * 2.0) - ((exp2(_3172 * (isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0)))) - exp2(_3172 * (isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))))) * _3295)) - ((exp2(_3174 * _3306) - exp2(_3174 * _3307)) * _3295))) + (_3167 * cbSceneParam._m0[80u].z);
        }
        vec4 _3353 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3084, _3085, 1.0), 0.0);
        float _3362 = exp2((_3351 * (-1.44269502162933349609375)) * (1.0 - _3353.w));
        float _3363 = log2(_3362);
        float _3379 = log2(_3104);
        _3176 = (exp2(_3379 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].x)) * _3353.x) / cbSceneParam._m0[78u].x)) + _3101;
        _3178 = (exp2(_3379 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].y)) * _3353.y) / cbSceneParam._m0[78u].y)) + _3102;
        _3180 = (exp2(_3379 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].z)) * _3353.z) / cbSceneParam._m0[78u].z)) + _3103;
        _3182 = _3362 * _3104;
    }
    else
    {
        _3176 = _3101;
        _3178 = _3102;
        _3180 = _3103;
        _3182 = _3104;
    }
    bool _3389;
    vec4 _3192;
    vec4 _3214;
    float _3216;
    float _3220;
    float _3221;
    float _3222;
    float _3223;
    bool _3233;
    for (;;)
    {
        _3192 = cbMatDynParam._m0[0u];
        float _3194 = roundEven(_3192.y);
        bool _3195 = _3194 == 3.0;
        float _3196 = log2(_3182);
        float _3203 = exp2(_3196 * cbSceneParam._m0[78u].x) * _3073;
        float _3204 = exp2(_3196 * cbSceneParam._m0[78u].y) * _3074;
        float _3205 = exp2(_3196 * cbSceneParam._m0[78u].z) * _3075;
        float _3212 = _934 + (-0.5);
        _3214 = cbMtdParam._m0[1u];
        _3216 = _3214.y * _3212;
        float _3219 = (_3194 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3220 = _3219 * (_3195 ? _3203 : (_3203 + (cbSceneParam._m0[72u].w * _3176)));
        _3221 = _3219 * (_3195 ? _3204 : (_3204 + (cbSceneParam._m0[72u].w * _3178)));
        _3222 = _3219 * (_3195 ? _3205 : (_3205 + (cbSceneParam._m0[72u].w * _3180)));
        _3223 = _3212 * 0.999000012874603271484375;
        _3233 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3233)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3223) < 0.5)
            {
                _3389 = true;
                break;
            }
        }
        uint _3330 = _983 + uint(_3192.w);
        if ((cbInstanceData._m0[_3330].w < 1.0) && ((cbInstanceData._m0[_3330].w + _3223) < 0.5))
        {
            _3389 = true;
            break;
        }
        if ((_3216 + 1.0) < _3214.x)
        {
            _3389 = true;
            break;
        }
        _3389 = false;
        break;
    }
    float _3593;
    if (_3389)
    {
        discard_state = true;
        _3593 = 0.0;
    }
    else
    {
        _3593 = cbInstanceData._m0[_3076].w;
    }
    SV_Target.x = _3220;
    SV_Target.y = _3221;
    SV_Target.z = _3222;
    SV_Target.w = _3593;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3076].w;
    discard_exit();
}


