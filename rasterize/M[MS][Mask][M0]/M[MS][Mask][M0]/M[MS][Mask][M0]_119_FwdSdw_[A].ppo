#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1628;
float _4268;
float _4269;
float _4270;
float _4271;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4280 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4291 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4302 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _464 = _462.x;
    float _476 = dot(vec4(_464, _462.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _493 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_464 - _476) * cbMtdParam._m0[24u].z) + _476) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4313 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _501 = (_494 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _502 = (_494 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _503 = (_494 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _542 = _540.x;
    float _552 = dot(vec4(_542, _540.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _566 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_542 - _552) * cbMtdParam._m0[24u].z) + _552) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4324 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _574 = (_567 * ((_520.x * cbMtdParam._m0[13u].x) - _501)) + _501;
    float _575 = (_567 * ((_520.y * cbMtdParam._m0[13u].y) - _502)) + _502;
    float _576 = (_567 * ((_520.z * cbMtdParam._m0[13u].z) - _503)) + _503;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _613 = _611.x;
    float _623 = dot(vec4(_613, _611.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _635 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _424.z) * 2.0) - ((((_613 - _623) * cbMtdParam._m0[24u].z) + _623) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4335 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _646 = (_353.x * cbMtdParam._m0[9u].x) * ((_636 * ((_594.x * cbMtdParam._m0[14u].x) - _574)) + _574);
    float _647 = (_353.y * cbMtdParam._m0[9u].y) * ((_636 * ((_594.y * cbMtdParam._m0[14u].y) - _575)) + _575);
    float _648 = (_353.z * cbMtdParam._m0[9u].z) * ((_636 * ((_594.z * cbMtdParam._m0[14u].z) - _576)) + _576);
    float _652 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _646;
    float _655 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _647;
    float _658 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _648;
    float _666 = (((_646 - _652) * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) + _652) * 4.55000019073486328125;
    float _668 = (((_647 - _655) * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) + _655) * 4.55000019073486328125;
    float _670 = (((_648 - _658) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) + _658) * 4.55000019073486328125;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _729 = _727.x;
    float _730 = _727.y;
    float _731 = _727.z;
    float _738 = ((_710.x - _729) * _494) + _729;
    float _739 = ((_710.y - _730) * _494) + _730;
    float _740 = ((_710.z - _731) * _494) + _731;
    vec4 _752 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _763 = ((_752.x - _738) * _567) + _738;
    float _764 = ((_752.y - _739) * _567) + _739;
    float _765 = ((_752.z - _740) * _567) + _740;
    vec4 _777 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _790 = ((_777.z - _765) * _636) + _765;
    float _793 = ((((_777.x - _763) * _636) + _763) * 2.0) + (-1.0);
    float _794 = ((((_777.y - _764) * _636) + _764) * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _4346 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _800 = sqrt(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))));
    vec4 _814 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _839 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _841 = _839.x;
    float _842 = 1.0 - _841;
    float _848 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _851 = ((isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : min(_848, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _860 = (_851 - ((((((_841 - _842) * cbMtdParam._m0[24u].w) + _842) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _851))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4367 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _861 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _868 = (_861 * (cbMtdParam._m0[17u].x - _666)) + _666;
    float _869 = (_861 * (cbMtdParam._m0[17u].y - _668)) + _668;
    float _870 = (_861 * (cbMtdParam._m0[17u].z - _670)) + _670;
    float _885 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _886 = _885 * TEXCOORD.z;
    float _887 = _885 * TEXCOORD.w;
    vec4 _899 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _886) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _887) + cbTextureTilingScale._m0[19u].w));
    float _901 = _899.x;
    float _902 = 1.0 - _901;
    float _929 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_901 - _902) * cbMtdParam._m0[24u].y) + _902) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4378 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _930 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _938 = ((((cbMtdParam._m0[10u].x - _868) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _930) + _868;
    float _939 = ((((cbMtdParam._m0[10u].y - _869) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _930) + _869;
    float _940 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _870)) * _930) + _870;
    float _945 = (((_687.z - _790) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _790;
    float _949 = ((_814.z - _945) * cbMtdParam._m0[19u].w) + _945;
    vec4 _963 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _970 = (_963.x * 2.0) + (-1.0);
    float _971 = (_963.y * 2.0) + (-1.0);
    float _972 = dot(vec2(_970, _971), vec2(_970, _971));
    float _4389 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _980 = (_861 * (_963.z - _949)) + _949;
    float _983 = ((cbMtdParam._m0[23u].y - _980) * _930) + _980;
    vec4 _1002 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _886) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _887) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1008 = (_1002.x * 2.0) + (-1.0);
    float _1009 = (_1002.y * 2.0) + (-1.0);
    float _1010 = dot(vec2(_1008, _1009), vec2(_1008, _1009));
    float _4400 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1024 = (_793 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_687.x * 2.0) + (-1.0)))) + (((_814.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1025 = (_794 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_687.y * 2.0) + (-1.0)))) + (((_814.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1037 = (((_970 - _1024) + (cbMtdParam._m0[21u].x * _1024)) * _861) + _1024;
    float _1038 = (((_971 - _1025) + (cbMtdParam._m0[21u].x * _1025)) * _861) + _1025;
    float _1039 = (_861 * (sqrt(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) - _800)) + _800;
    float _1050 = (((_1008 - _1037) + (_1037 * cbMtdParam._m0[22u].z)) * _930) + _1037;
    float _1051 = (((_1009 - _1038) + (_1038 * cbMtdParam._m0[22u].z)) * _930) + _1038;
    float _1052 = ((sqrt(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) - _1039) * _930) + _1039;
    float _1054 = cbMtdParam._m0[22u].x + _814.w;
    float _1057 = fma(_1052, _265 * NORMAL.x, fma(_1051, _272 * TANGENT.x, (_258 * _250) * _1050));
    float _1060 = fma(_1052, _265 * NORMAL.y, fma(_1051, _272 * TANGENT.y, (_258 * _251) * _1050));
    float _1063 = fma(_1052, _265 * NORMAL.z, fma(_1051, _272 * TANGENT.z, (_258 * _252) * _1050));
    float _1067 = inversesqrt(dot(vec3(_1057, _1060, _1063), vec3(_1057, _1060, _1063)));
    float _1068 = _1067 * _1057;
    float _1069 = _1067 * _1060;
    float _1070 = _1067 * _1063;
    float _4411 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _1071 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _4422 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _4433 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4444 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4455 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _1089 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1139 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1129);
    float _1140 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1129);
    float _1141 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1129);
    float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
    float _1146 = _1139 * _1145;
    float _1147 = _1140 * _1145;
    float _1148 = _1141 * _1145;
    vec4 _1153 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1155 = _1153.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1309 = sqrt(((_1139 * _1139) + (_1140 * _1140)) + (_1141 * _1141));
        float _1315 = (cbMatDynParam._m0[5u].x * _1309) + cbMatDynParam._m0[5u].y;
        float _4466 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1320 = (cbMatDynParam._m0[5u].z * _1309) + cbMatDynParam._m0[5u].w;
        float _4477 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) - _1316)) + _1316) < ((_1155 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1166 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1167 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1185 = fma(_1070, cbSceneParam._m0[5u].z, fma(_1069, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1068));
    float _1188 = fma(_1070, cbSceneParam._m0[6u].z, fma(_1069, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1068));
    float _1191 = fma(_1070, cbSceneParam._m0[7u].z, fma(_1069, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1068));
    uint _1204 = _297 + 9u;
    uint _1205 = _1204 + uint(cbMatDynParam._m0[0u].w);
    float _1211 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * cbInstanceData._m0[_1205].x;
    float _1212 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * cbInstanceData._m0[_1205].y;
    float _1213 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * cbInstanceData._m0[_1205].z;
    float _4488 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _4499 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1215 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _4510 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1216 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    vec4 _1225 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1166, cbSceneParam._m0[86u].y * _1167));
    float _1229 = ((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * TEXCOORD_5.w) * _1225.x;
    float _1230 = dot(vec3(_1068, _1069, _1070), vec3(_1146, _1147, _1148));
    float _1233 = _1230 * 2.0;
    float _1237 = (_1233 * _1068) - _1146;
    float _1238 = (_1233 * _1069) - _1147;
    float _1239 = (_1233 * _1070) - _1148;
    float _1243 = abs(dot(vec3(_1146, _1147, _1148), vec3(_1068, _1069, _1070)));
    float _4521 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
    float _1245 = sqrt(_1071);
    float _1258 = exp2((_1245 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1245 * 3.0));
    float _1290 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1294 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1298 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1627;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1352 = fma(_1298, cbModelParam._m0[26u].z, fma(_1294, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1290));
        float _1356 = fma(_1298, cbModelParam._m0[27u].z, fma(_1294, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1290));
        float _1360 = fma(_1298, cbModelParam._m0[28u].z, fma(_1294, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1290));
        float _1385 = _1290 + _1068;
        float _1386 = _1294 + _1069;
        float _1387 = _1298 + _1070;
        float _1397 = fma(_1387, cbModelParam._m0[26u].z, fma(_1386, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1385)) - _1352;
        float _1398 = fma(_1387, cbModelParam._m0[27u].z, fma(_1386, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1385)) - _1356;
        float _1399 = fma(_1387, cbModelParam._m0[28u].z, fma(_1386, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1385)) - _1360;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1352 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1356 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[34u].z) + ((((((_1360 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1455 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1421.x + (-0.5));
        float _1457 = _1455 * (_1421.y + (-0.5));
        float _1458 = _1455 * (_1421.z + (-0.5));
        float _1465 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1428.x + (-0.5));
        float _1467 = _1465 * (_1428.y + (-0.5));
        float _1468 = _1465 * (_1428.z + (-0.5));
        float _1475 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1435.x + (-0.5));
        float _1477 = _1475 * (_1435.y + (-0.5));
        float _1478 = _1475 * (_1435.z + (-0.5));
        float _1485 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1442.x + (-0.5));
        float _1487 = _1485 * (_1442.y + (-0.5));
        float _1488 = _1485 * (_1442.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1509 = (dot(vec3(_1068, _1069, _1070), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4547 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1519 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4558 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4569 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_1521 + 1.0))) + _1526) * _1489;
        float _1536 = _1457 * 0.5;
        float _1537 = _1467 * 0.5;
        float _1538 = _1477 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_1068, _1069, _1070), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4580 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4591 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4602 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_1563 + 1.0))) + _1568) * _1490;
        float _1578 = _1458 * 0.5;
        float _1579 = _1468 * 0.5;
        float _1580 = _1478 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_1068, _1069, _1070), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4613 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4624 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4635 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_1605 + 1.0))) + _1610) * _1491;
        _1627 = _1458;
        _1629 = _1457;
        _1630 = _1456;
        _1631 = _1468;
        _1632 = _1467;
        _1633 = _1466;
        _1634 = _1478;
        _1635 = _1477;
        _1636 = _1476;
        _1637 = _1491;
        _1638 = _1490;
        _1639 = _1489;
        _1640 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1641 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1642 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1628;
        _1629 = _1628;
        _1630 = _1628;
        _1631 = _1628;
        _1632 = _1628;
        _1633 = _1628;
        _1634 = _1628;
        _1635 = _1628;
        _1636 = _1628;
        _1637 = _1628;
        _1638 = _1628;
        _1639 = _1628;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1668 = fma(_1298, cbModelParam._m0[30u].z, fma(_1294, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290));
        float _1672 = fma(_1298, cbModelParam._m0[31u].z, fma(_1294, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290));
        float _1676 = fma(_1298, cbModelParam._m0[32u].z, fma(_1294, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290));
        float _1699 = _1290 + _1068;
        float _1700 = _1294 + _1069;
        float _1701 = _1298 + _1070;
        float _1711 = fma(_1701, cbModelParam._m0[30u].z, fma(_1700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1699)) - _1668;
        float _1712 = fma(_1701, cbModelParam._m0[31u].z, fma(_1700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1699)) - _1672;
        float _1713 = fma(_1701, cbModelParam._m0[32u].z, fma(_1700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1699)) - _1676;
        float _1717 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
        float _1730 = ((_1717 * _1711) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1668 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1731 = ((_1717 * _1712) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1672 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1732 = ((_1717 * _1713) / cbModelParam._m0[35u].z) + ((((((_1676 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1734 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        vec4 _1741 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        vec4 _1748 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        vec4 _1755 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        float _1767 = exp2((_1734.w + (-0.5)) * 20.0) * 2.0;
        float _1768 = _1767 * (_1734.x + (-0.5));
        float _1769 = _1767 * (_1734.y + (-0.5));
        float _1770 = _1767 * (_1734.z + (-0.5));
        float _1777 = exp2((_1741.w + (-0.5)) * 20.0) * 2.0;
        float _1778 = _1777 * (_1741.x + (-0.5));
        float _1779 = _1777 * (_1741.y + (-0.5));
        float _1780 = _1777 * (_1741.z + (-0.5));
        float _1787 = exp2((_1748.w + (-0.5)) * 20.0) * 2.0;
        float _1788 = _1787 * (_1748.x + (-0.5));
        float _1789 = _1787 * (_1748.y + (-0.5));
        float _1790 = _1787 * (_1748.z + (-0.5));
        float _1797 = exp2((_1755.w + (-0.5)) * 20.0) * 2.0;
        float _1798 = _1797 * (_1755.x + (-0.5));
        float _1799 = _1797 * (_1755.y + (-0.5));
        float _1800 = _1797 * (_1755.z + (-0.5));
        float _1801 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1803 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1804 = _1768 * 0.5;
        float _1805 = _1778 * 0.5;
        float _1806 = _1788 * 0.5;
        float _1807 = dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806));
        float _1812 = (_1807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1807);
        float _1820 = (dot(vec3(_1068, _1069, _1070), vec3(_1812 * _1804, _1812 * _1805, _1812 * _1806)) + 1.0) * 0.5;
        float _4676 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1829 = sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806)) / (_1801 + 9.9999997473787516355514526367188e-06);
        float _4687 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _1831 = _1830 * 2.0;
        float _1835 = (1.0 - _1830) / (_1830 + 1.0);
        float _4698 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _1845 = ((((1.0 - _1836) * (_1831 + 2.0)) * exp2(log2(isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_1831 + 1.0))) + _1836) * _1801;
        float _1846 = _1769 * 0.5;
        float _1847 = _1779 * 0.5;
        float _1848 = _1789 * 0.5;
        float _1849 = dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848));
        float _1854 = (_1849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1849);
        float _1862 = (dot(vec3(_1068, _1069, _1070), vec3(_1854 * _1846, _1854 * _1847, _1854 * _1848)) + 1.0) * 0.5;
        float _4709 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1871 = sqrt(((_1847 * _1847) + (_1846 * _1846)) + (_1848 * _1848)) / (_1802 + 9.9999997473787516355514526367188e-06);
        float _4720 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _1873 = _1872 * 2.0;
        float _1877 = (1.0 - _1872) / (_1872 + 1.0);
        float _4731 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _1887 = ((((1.0 - _1878) * (_1873 + 2.0)) * exp2(log2(isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_1873 + 1.0))) + _1878) * _1802;
        float _1888 = _1770 * 0.5;
        float _1889 = _1780 * 0.5;
        float _1890 = _1790 * 0.5;
        float _1891 = dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890));
        float _1896 = (_1891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1891);
        float _1904 = (dot(vec3(_1068, _1069, _1070), vec3(_1896 * _1888, _1896 * _1889, _1896 * _1890)) + 1.0) * 0.5;
        float _4742 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1913 = sqrt(((_1889 * _1889) + (_1888 * _1888)) + (_1890 * _1890)) / (_1803 + 9.9999997473787516355514526367188e-06);
        float _4753 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _1915 = _1914 * 2.0;
        float _1919 = (1.0 - _1914) / (_1914 + 1.0);
        float _4764 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _1929 = ((((1.0 - _1920) * (_1915 + 2.0)) * exp2(log2(isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_1915 + 1.0))) + _1920) * _1803;
        _1937 = _1770;
        _1938 = _1769;
        _1939 = _1768;
        _1940 = _1780;
        _1941 = _1779;
        _1942 = _1778;
        _1943 = _1790;
        _1944 = _1789;
        _1945 = _1788;
        _1946 = _1803;
        _1947 = _1802;
        _1948 = _1801;
        _1949 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)));
        _1950 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)));
        _1951 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)));
    }
    else
    {
        _1937 = _1628;
        _1938 = _1628;
        _1939 = _1628;
        _1940 = _1628;
        _1941 = _1628;
        _1942 = _1628;
        _1943 = _1628;
        _1944 = _1628;
        _1945 = _1628;
        _1946 = _1628;
        _1947 = _1628;
        _1948 = _1628;
        _1949 = 0.0;
        _1950 = 0.0;
        _1951 = 0.0;
    }
    float _1961 = (cbModelParam._m0[1u].x * (_1949 - _1640)) + _1640;
    float _1962 = (cbModelParam._m0[1u].x * (_1950 - _1641)) + _1641;
    float _1963 = (cbModelParam._m0[1u].x * (_1951 - _1642)) + _1642;
    float _1984 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1962, cbSceneParam._m0[89u].y, _1961 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1962, cbSceneParam._m0[90u].y, _1961 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1962, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1961));
    float _2005 = _1237 * 0.5;
    float _2006 = _1238 * 0.5;
    float _2007 = _1239 * 0.5;
    float _2008 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1939, _1942, _1945, _1948));
    float _2011 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1938, _1941, _1944, _1947));
    float _2014 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1937, _1940, _1943, _1946));
    float _2048;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2021 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1627, _1631, _1634, _1637));
        float _2025 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1629, _1632, _1635, _1638));
        float _2029 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1630, _1633, _1636, _1639));
        float _2036 = dot(vec4(cbModelParam._m0[39u]), vec4(_2005, _2006, _2007, 1.0));
        _2048 = dot(vec3(isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)), isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)), isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2036) ? 0.0 : (isnan(0.0) ? _2036 : max(0.0, _2036))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2048 = 1.0;
    }
    float _2059;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2050 = dot(vec4(cbModelParam._m0[40u]), vec4(_2005, _2006, _2007, 1.0));
        _2059 = dot(vec3(isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)), isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)), isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2050) ? 0.0 : (isnan(0.0) ? _2050 : max(0.0, _2050))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2059 = 1.0;
    }
    float _2063 = (_2059 * cbModelParam._m0[1u].x) + (_2048 * (1.0 - cbModelParam._m0[1u].x));
    float _2073 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1071);
    float _2074 = isnan(_2073) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2073 : min(cbModelParam._m0[25u].z, _2073));
    float _2154;
    float _2156;
    float _2158;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2121 = fma(_1298, cbModelParam._m0[13u].z, fma(_1294, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1290)) + cbModelParam._m0[13u].w;
        float _2125 = fma(_1298, cbModelParam._m0[14u].z, fma(_1294, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1290)) + cbModelParam._m0[14u].w;
        float _2129 = fma(_1298, cbModelParam._m0[15u].z, fma(_1294, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1290)) + cbModelParam._m0[15u].w;
        float _2132 = fma(_1239, cbModelParam._m0[13u].z, fma(_1238, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1237));
        float _2135 = fma(_1239, cbModelParam._m0[14u].z, fma(_1238, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1237));
        float _2138 = fma(_1239, cbModelParam._m0[15u].z, fma(_1238, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1237));
        float _2166;
        if (_2132 > 0.0)
        {
            _2166 = abs((1.0 - _2121) / _2132);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2121 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2166 = frontier_phi_17_15_ladder;
        }
        float _2336;
        if (_2135 > 0.0)
        {
            _2336 = abs((1.0 - _2125) / _2135);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2125 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2336 = frontier_phi_26_22_ladder;
        }
        float _2631;
        if (_2138 > 0.0)
        {
            _2631 = abs((1.0 - _2129) / _2138);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2129 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2631 = frontier_phi_38_33_ladder;
        }
        float _2633 = isnan(_2336) ? _2166 : (isnan(_2166) ? _2336 : min(_2166, _2336));
        float _2634 = isnan(_2631) ? _2633 : (isnan(_2633) ? _2631 : min(_2633, _2631));
        float _2638 = (_2634 * _2132) + _2121;
        float _2639 = (_2634 * _2135) + _2125;
        float _2640 = (_2634 * _2138) + _2129;
        float _2641 = _2634 * 9.9999997473787516355514526367188e-05;
        float _2643 = (-1.0) - _2641;
        float _2645 = _2641 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2640 > _2645) || ((_2640 < _2643) || ((_2639 > _2645) || ((_2639 < _2643) || ((_2638 < _2643) || (_2638 > _2645))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2640, cbModelParam._m0[9u].z, fma(_2639, cbModelParam._m0[9u].y, _2638 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2640, cbModelParam._m0[10u].z, fma(_2639, cbModelParam._m0[10u].y, _2638 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2640, cbModelParam._m0[11u].z, fma(_2639, cbModelParam._m0[11u].y, _2638 * cbModelParam._m0[11u].x))), _2074);
            frontier_phi_16_38_ladder = _2785.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2785.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2785.x * cbModelParam._m0[1u].y;
        }
        _2154 = frontier_phi_16_38_ladder_2;
        _2156 = frontier_phi_16_38_ladder_1;
        _2158 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2142 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1237, _1238, _1239), _2074);
        _2154 = _2142.x * cbModelParam._m0[1u].y;
        _2156 = _2142.y * cbModelParam._m0[1u].y;
        _2158 = _2142.z * cbModelParam._m0[1u].y;
    }
    float _2162 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1071);
    float _2163 = isnan(_2162) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2162 : min(cbModelParam._m0[25u].w, _2162));
    float _2253;
    float _2255;
    float _2257;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2217 = fma(_1298, cbModelParam._m0[21u].z, fma(_1294, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1290)) + cbModelParam._m0[21u].w;
        float _2221 = fma(_1298, cbModelParam._m0[22u].z, fma(_1294, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1290)) + cbModelParam._m0[22u].w;
        float _2225 = fma(_1298, cbModelParam._m0[23u].z, fma(_1294, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1290)) + cbModelParam._m0[23u].w;
        float _2228 = fma(_1239, cbModelParam._m0[21u].z, fma(_1238, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1237));
        float _2231 = fma(_1239, cbModelParam._m0[22u].z, fma(_1238, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1237));
        float _2234 = fma(_1239, cbModelParam._m0[23u].z, fma(_1238, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1237));
        float _2341;
        if (_2228 > 0.0)
        {
            _2341 = abs((1.0 - _2217) / _2228);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2228 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2217 + 1.0) / _2228);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2341 = frontier_phi_28_24_ladder;
        }
        float _2658;
        if (_2231 > 0.0)
        {
            _2658 = abs((1.0 - _2221) / _2231);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2231 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2221 + 1.0) / _2231);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2658 = frontier_phi_40_35_ladder;
        }
        float _2985;
        if (_2234 > 0.0)
        {
            _2985 = abs((1.0 - _2225) / _2234);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2234 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2225 + 1.0) / _2234);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2985 = frontier_phi_50_47_ladder;
        }
        float _2987 = isnan(_2658) ? _2341 : (isnan(_2341) ? _2658 : min(_2341, _2658));
        float _2988 = isnan(_2985) ? _2987 : (isnan(_2987) ? _2985 : min(_2987, _2985));
        float _2992 = (_2988 * _2228) + _2217;
        float _2993 = (_2988 * _2231) + _2221;
        float _2994 = (_2988 * _2234) + _2225;
        float _2995 = _2988 * 9.9999997473787516355514526367188e-05;
        float _2996 = (-1.0) - _2995;
        float _2998 = _2995 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2994 > _2998) || ((_2994 < _2996) || ((_2993 > _2998) || ((_2993 < _2996) || ((_2992 < _2996) || (_2992 > _2998))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2994, cbModelParam._m0[17u].z, fma(_2993, cbModelParam._m0[17u].y, _2992 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2994, cbModelParam._m0[18u].z, fma(_2993, cbModelParam._m0[18u].y, _2992 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2994, cbModelParam._m0[19u].z, fma(_2993, cbModelParam._m0[19u].y, _2992 * cbModelParam._m0[19u].x))), _2163);
            frontier_phi_25_50_ladder = _3112.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3112.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3112.x * cbModelParam._m0[1u].z;
        }
        _2253 = frontier_phi_25_50_ladder_2;
        _2255 = frontier_phi_25_50_ladder_1;
        _2257 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2237 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1237, _1238, _1239), _2163);
        _2253 = _2237.x * cbModelParam._m0[1u].z;
        _2255 = _2237.y * cbModelParam._m0[1u].z;
        _2257 = _2237.z * cbModelParam._m0[1u].z;
    }
    float _2269 = ((((1.0 - _1258) * ((_1245 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1258 * _1245)) * _1229;
    float _2270 = _2269 * ((cbModelParam._m0[1u].w * (_2253 - _2154)) + _2154);
    float _2271 = _2269 * ((cbModelParam._m0[1u].w * (_2255 - _2156)) + _2156);
    float _2272 = _2269 * ((cbModelParam._m0[1u].w * (_2257 - _2158)) + _2158);
    float _2275 = fma(_2272, cbSceneParam._m0[89u].z, fma(_2271, cbSceneParam._m0[89u].y, _2270 * cbSceneParam._m0[89u].x));
    float _2278 = fma(_2272, cbSceneParam._m0[90u].z, fma(_2271, cbSceneParam._m0[90u].y, _2270 * cbSceneParam._m0[90u].x));
    float _2281 = fma(_2272, cbSceneParam._m0[91u].z, fma(_2271, cbSceneParam._m0[91u].y, _2270 * cbSceneParam._m0[91u].x));
    float _2315 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2319 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2323 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2327 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2328 = _2315 / _2327;
    float _2329 = _2319 / _2327;
    float _2330 = _2323 / _2327;
    float _2477;
    float _2478;
    float _2479;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2357 = ((uint(_2330 > cbSceneParam._m0[59u].y) + uint(_2330 > cbSceneParam._m0[59u].x)) + uint(_2330 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2358 = _2357 + 43u;
        uint _2366 = _2357 + 44u;
        uint _2374 = _2357 + 45u;
        uint _2382 = _2357 + 46u;
        float _2393 = fma(_2327, cbSceneParam._m0[_2358].w, fma(_2323, cbSceneParam._m0[_2358].z, fma(_2319, cbSceneParam._m0[_2358].y, _2315 * cbSceneParam._m0[_2358].x)));
        float _2397 = fma(_2327, cbSceneParam._m0[_2366].w, fma(_2323, cbSceneParam._m0[_2366].z, fma(_2319, cbSceneParam._m0[_2366].y, _2315 * cbSceneParam._m0[_2366].x)));
        float _2405 = fma(_2327, cbSceneParam._m0[_2382].w, fma(_2323, cbSceneParam._m0[_2382].z, fma(_2319, cbSceneParam._m0[_2382].y, _2315 * cbSceneParam._m0[_2382].x)));
        float _2410 = cbSceneParam._m0[33u].z * _2405;
        float _2412 = cbSceneParam._m0[33u].w * _2405;
        float _2415 = fma(_2327, cbSceneParam._m0[_2374].w, fma(_2323, cbSceneParam._m0[_2374].z, fma(_2319, cbSceneParam._m0[_2374].y, _2315 * cbSceneParam._m0[_2374].x))) / _2405;
        float _2463 = (cbSceneParam._m0[33u].x - sqrt(((_2329 * _2329) + (_2328 * _2328)) + (_2330 * _2330))) * cbSceneParam._m0[33u].y;
        float _4890 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2470 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2410 + _2393) / _2405, (_2412 + _2397) / _2405), _2415), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2412 + _2393) / _2405, (_2397 - _2410) / _2405), _2415), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2393 - _2410) / _2405, (_2397 - _2412) / _2405), _2415), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2393 - _2412) / _2405, (_2410 + _2397) / _2405), _2415), 0.0)).x), vec4(0.25)));
        _2477 = 1.0 - (_2470 * cbSceneParam._m0[34u].x);
        _2478 = 1.0 - (_2470 * cbSceneParam._m0[34u].y);
        _2479 = 1.0 - (_2470 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2477 = 1.0;
        _2478 = 1.0;
        _2479 = 1.0;
    }
    float _2543;
    float _2545;
    float _2547;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2531 = fma(_2327, cbSceneParam._m0[63u].w, fma(_2323, cbSceneParam._m0[63u].z, fma(_2319, cbSceneParam._m0[63u].y, _2315 * cbSceneParam._m0[63u].x)));
        float _2532 = fma(_2327, cbSceneParam._m0[60u].w, fma(_2323, cbSceneParam._m0[60u].z, fma(_2319, cbSceneParam._m0[60u].y, _2315 * cbSceneParam._m0[60u].x))) / _2531;
        float _2533 = fma(_2327, cbSceneParam._m0[61u].w, fma(_2323, cbSceneParam._m0[61u].z, fma(_2319, cbSceneParam._m0[61u].y, _2315 * cbSceneParam._m0[61u].x))) / _2531;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2532 >= cbSceneParam._m0[64u].x) && (_2533 >= cbSceneParam._m0[64u].y)) && (_2532 <= cbSceneParam._m0[64u].z)) && (_2533 <= cbSceneParam._m0[64u].w))
        {
            float _2671 = fma(_2327, cbSceneParam._m0[62u].w, fma(_2323, cbSceneParam._m0[62u].z, fma(_2319, cbSceneParam._m0[62u].y, _2315 * cbSceneParam._m0[62u].x))) / _2531;
            float _2675 = isnan(cbSceneParam._m0[41u].w) ? _2671 : (isnan(_2671) ? cbSceneParam._m0[41u].w : max(_2671, cbSceneParam._m0[41u].w));
            float _2718 = (cbSceneParam._m0[33u].x - sqrt(((_2329 * _2329) + (_2328 * _2328)) + (_2330 * _2330))) * cbSceneParam._m0[33u].y;
            float _4906 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
            float _2725 = (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2532, cbSceneParam._m0[33u].w + _2533), _2675), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2532, _2533 - cbSceneParam._m0[33u].z), _2675), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2532 - cbSceneParam._m0[33u].z, _2533 - cbSceneParam._m0[33u].w), _2675), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2532 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2533), _2675), 0.0)).x), vec4(0.25)));
            float _2729 = 1.0 - (_2725 * cbSceneParam._m0[34u].x);
            float _2730 = 1.0 - (_2725 * cbSceneParam._m0[34u].y);
            float _2731 = 1.0 - (_2725 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2731) ? _2479 : (isnan(_2479) ? _2731 : min(_2479, _2731));
            frontier_phi_37_36_ladder_1 = isnan(_2730) ? _2478 : (isnan(_2478) ? _2730 : min(_2478, _2730));
            frontier_phi_37_36_ladder_2 = isnan(_2729) ? _2477 : (isnan(_2477) ? _2729 : min(_2477, _2729));
        }
        else
        {
            frontier_phi_37_36_ladder = _2479;
            frontier_phi_37_36_ladder_1 = _2478;
            frontier_phi_37_36_ladder_2 = _2477;
        }
        _2543 = frontier_phi_37_36_ladder_2;
        _2545 = frontier_phi_37_36_ladder_1;
        _2547 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2543 = _2477;
        _2545 = _2478;
        _2547 = _2479;
    }
    uvec4 _2552 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2554 = _2552.x * 14u;
    uint _2555 = _2554 + 13u;
    float _2562 = _1229 + (-1.0);
    float _2567 = (cbLight._m0[_2555].x * _2562) + 1.0;
    float _2568 = (cbLight._m0[_2555].y * _2562) + 1.0;
    float _2569 = (cbLight._m0[_2555].z * _2562) + 1.0;
    float _2570 = (cbLight._m0[_2555].w * _2562) + 1.0;
    uint _2571 = _2554 + 5u;
    float _2577 = isnan(1.0) ? _2568 : (isnan(_2568) ? 1.0 : min(_2568, 1.0));
    uint _2581 = _2554 + 4u;
    float _2590 = isnan(1.0) ? _2567 : (isnan(_2567) ? 1.0 : min(_2567, 1.0));
    uint _2594 = _2554 | 1u;
    float _2605 = dot(vec3(cbLight._m0[_2554].xyz), vec3(_1068, _1069, _1070));
    float _2608 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_1068, _1069, _1070));
    float _4942 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _4953 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2613 = (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * 0.3183098733425140380859375;
    float _2615 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * 0.3183098733425140380859375;
    float _2622 = ((cbLight._m0[_2571].x * _2577) * _2615) + (((cbLight._m0[_2581].x * _2543) * _2590) * _2613);
    float _2623 = ((_2577 * cbLight._m0[_2571].y) * _2615) + (((cbLight._m0[_2581].y * _2545) * _2590) * _2613);
    float _2624 = ((_2577 * cbLight._m0[_2571].z) * _2615) + (((cbLight._m0[_2581].z * _2547) * _2590) * _2613);
    uvec4 _2628 = floatBitsToUint(cbLight._m0[_2554 + 12u]);
    bool _2630 = _2628.x == 0u;
    float _2732;
    float _2734;
    float _2736;
    if (_2630)
    {
        _2732 = _2622;
        _2734 = _2623;
        _2736 = _2624;
    }
    else
    {
        uint _2740 = _2554 + 6u;
        float _2756 = (dot(vec3(cbLight._m0[_2554 + 2u].xyz), vec3(_1068, _1069, _1070)) * 0.5) + 0.5;
        float _2757 = _2756 * _2756;
        float _4964 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2758 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _2759 = isnan(1.0) ? _2569 : (isnan(_2569) ? 1.0 : min(_2569, 1.0));
        _2732 = (((cbLight._m0[_2740].x * 0.3183098733425140380859375) * _2758) * _2759) + _2622;
        _2734 = (((cbLight._m0[_2740].y * 0.3183098733425140380859375) * _2758) * _2759) + _2623;
        _2736 = (((cbLight._m0[_2740].z * 0.3183098733425140380859375) * _2758) * _2759) + _2624;
    }
    bool _2739 = _2628.y == 0u;
    float _2794;
    float _2796;
    float _2798;
    if (_2739)
    {
        _2794 = _2732;
        _2796 = _2734;
        _2798 = _2736;
    }
    else
    {
        uint _2956 = _2554 + 7u;
        float _2972 = (dot(vec3(cbLight._m0[_2554 + 3u].xyz), vec3(_1068, _1069, _1070)) * 0.5) + 0.5;
        float _2973 = _2972 * _2972;
        float _4980 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2974 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
        float _2975 = isnan(1.0) ? _2570 : (isnan(_2570) ? 1.0 : min(_2570, 1.0));
        _2794 = (((cbLight._m0[_2956].x * 0.3183098733425140380859375) * _2974) * _2975) + _2732;
        _2796 = (((cbLight._m0[_2956].y * 0.3183098733425140380859375) * _2974) * _2975) + _2734;
        _2798 = (((cbLight._m0[_2956].z * 0.3183098733425140380859375) * _2974) * _2975) + _2736;
    }
    uint _2801 = _2554 + 8u;
    float _2814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2554].w)) * _1071) * 0.949999988079071044921875);
    float _2815 = _2814 * _2814;
    float _2816 = cbLight._m0[_2554].x + _1146;
    float _2817 = cbLight._m0[_2554].y + _1147;
    float _2818 = cbLight._m0[_2554].z + _1148;
    float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
    float _2823 = _2822 * _2816;
    float _2824 = _2822 * _2817;
    float _2825 = _2822 * _2818;
    float _2826 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_2554].xyz));
    float _4996 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
    float _2829 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
    float _5007 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
    float _2830 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
    float _2831 = dot(vec3(_1068, _1069, _1070), vec3(_2823, _2824, _2825));
    float _5018 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
    float _2834 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
    float _2835 = dot(vec3(cbLight._m0[_2554].xyz), vec3(_2823, _2824, _2825));
    float _5029 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
    float _2839 = _2815 * _2815;
    float _2843 = ((_2834 * _2834) * (_2839 + (-1.0))) + 1.0;
    float _2854 = (exp2(log2(1.0 - (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2855 = 1.0 - _2815;
    float _2866 = (0.5 / (((_2830 * ((_2829 * _2855) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2830 * _2855) + _2815) * _2829))) * _2829;
    float _5040 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
    float _2868 = (isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_2839 / ((_2843 * _2843) * 3.141590118408203125));
    uint _2882 = _2554 + 9u;
    float _2893 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2594].w)) * _1071) * 0.949999988079071044921875);
    float _2894 = _2893 * _2893;
    float _2895 = cbLight._m0[_2594].x + _1146;
    float _2896 = cbLight._m0[_2594].y + _1147;
    float _2897 = cbLight._m0[_2594].z + _1148;
    float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
    float _2902 = _2901 * _2895;
    float _2903 = _2901 * _2896;
    float _2904 = _2901 * _2897;
    float _2905 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_2594].xyz));
    float _5051 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
    float _2908 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
    float _2909 = dot(vec3(_1068, _1069, _1070), vec3(_2902, _2903, _2904));
    float _5062 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
    float _2912 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
    float _2913 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_2902, _2903, _2904));
    float _5073 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
    float _2917 = _2894 * _2894;
    float _2921 = ((_2912 * _2912) * (_2917 + (-1.0))) + 1.0;
    float _2930 = (exp2(log2(1.0 - (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2931 = 1.0 - _2894;
    float _2941 = (0.5 / (((_2830 * ((_2908 * _2931) + _2894)) + 9.9999999392252902907785028219223e-09) + (((_2830 * _2931) + _2894) * _2908))) * _2908;
    float _5084 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
    float _2943 = (isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (_2917 / ((_2921 * _2921) * 3.141590118408203125));
    float _2953 = (((_2930 * cbLight._m0[_2882].x) * _2943) * _2577) + ((((cbLight._m0[_2801].x * _2543) * _2854) * _2868) * _2590);
    float _2954 = (((_2930 * cbLight._m0[_2882].y) * _2943) * _2577) + ((((cbLight._m0[_2801].y * _2545) * _2854) * _2868) * _2590);
    float _2955 = (((_2930 * cbLight._m0[_2882].z) * _2943) * _2577) + ((((cbLight._m0[_2801].z * _2547) * _2854) * _2868) * _2590);
    float _3011;
    float _3013;
    float _3015;
    if (_2630)
    {
        _3011 = _2953;
        _3013 = _2954;
        _3015 = _2955;
    }
    else
    {
        uint _3017 = _2554 + 2u;
        uint _3021 = _2554 + 10u;
        float _3035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3017].w)) * _1071) * 0.949999988079071044921875);
        float _3036 = _3035 * _3035;
        float _3037 = cbLight._m0[_3017].x + _1146;
        float _3038 = cbLight._m0[_3017].y + _1147;
        float _3039 = cbLight._m0[_3017].z + _1148;
        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
        float _3044 = _3043 * _3037;
        float _3045 = _3043 * _3038;
        float _3046 = _3043 * _3039;
        float _3047 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_3017].xyz));
        float _5095 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
        float _3050 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
        float _3051 = dot(vec3(_1068, _1069, _1070), vec3(_3044, _3045, _3046));
        float _5106 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        float _3054 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
        float _3055 = dot(vec3(cbLight._m0[_3017].xyz), vec3(_3044, _3045, _3046));
        float _5117 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        float _3059 = _3036 * _3036;
        float _3063 = ((_3054 * _3054) * (_3059 + (-1.0))) + 1.0;
        float _3072 = (exp2(log2(1.0 - (isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3073 = 1.0 - _3036;
        float _3083 = (0.5 / (((_2830 * ((_3050 * _3073) + _3036)) + 9.9999999392252902907785028219223e-09) + (((_2830 * _3073) + _3036) * _3050))) * _3050;
        float _5128 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3085 = (isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0))) * (_3059 / ((_3063 * _3063) * 3.141590118408203125));
        float _3086 = isnan(1.0) ? _2569 : (isnan(_2569) ? 1.0 : min(_2569, 1.0));
        _3011 = (((_3072 * cbLight._m0[_3021].x) * _3085) * _3086) + _2953;
        _3013 = (((_3072 * cbLight._m0[_3021].y) * _3085) * _3086) + _2954;
        _3015 = (((_3072 * cbLight._m0[_3021].z) * _3085) * _3086) + _2955;
    }
    float _3117;
    float _3119;
    float _3121;
    if (_2739)
    {
        _3117 = _3011;
        _3119 = _3013;
        _3121 = _3015;
    }
    else
    {
        uint _3128 = _2554 + 3u;
        uint _3132 = _2554 + 11u;
        float _3146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3128].w)) * _1071) * 0.949999988079071044921875);
        float _3147 = _3146 * _3146;
        float _3148 = cbLight._m0[_3128].x + _1146;
        float _3149 = cbLight._m0[_3128].y + _1147;
        float _3150 = cbLight._m0[_3128].z + _1148;
        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
        float _3155 = _3154 * _3148;
        float _3156 = _3154 * _3149;
        float _3157 = _3154 * _3150;
        float _3158 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_3128].xyz));
        float _5144 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
        float _3161 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
        float _3162 = dot(vec3(_1068, _1069, _1070), vec3(_3155, _3156, _3157));
        float _5155 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
        float _3165 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
        float _3166 = dot(vec3(cbLight._m0[_3128].xyz), vec3(_3155, _3156, _3157));
        float _5166 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
        float _3170 = _3147 * _3147;
        float _3174 = ((_3165 * _3165) * (_3170 + (-1.0))) + 1.0;
        float _3183 = (exp2(log2(1.0 - (isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3184 = 1.0 - _3147;
        float _3194 = (0.5 / (((_2830 * ((_3161 * _3184) + _3147)) + 9.9999999392252902907785028219223e-09) + (((_2830 * _3184) + _3147) * _3161))) * _3161;
        float _5177 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
        float _3196 = (isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0))) * (_3170 / ((_3174 * _3174) * 3.141590118408203125));
        float _3197 = isnan(1.0) ? _2570 : (isnan(_2570) ? 1.0 : min(_2570, 1.0));
        _3117 = (((_3183 * cbLight._m0[_3132].x) * _3196) * _3197) + _3011;
        _3119 = (((_3183 * cbLight._m0[_3132].y) * _3196) * _3197) + _3013;
        _3121 = (((_3183 * cbLight._m0[_3132].z) * _3196) * _3197) + _3015;
    }
    float _3263;
    float _3265;
    float _3267;
    float _3269;
    float _3271;
    float _3273;
    if (_2552.y == 0u)
    {
        uvec4 _3218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3219 = _3218.x;
        uint _3230 = uint((float(_3218.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1167) / _3219))) + floor(float(uint(cbSceneParam._m0[85u].x * _1166) / _3219)));
        float _3240 = (log2(_2330 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3241 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
        uint _3244 = uint(isnan(14.0) ? _3241 : (isnan(_3241) ? 14.0 : min(_3241, 14.0)));
        uvec4 _3249 = texelFetch(g_lightClusterGridBuffer, int(((_3244 << 2u) + (_3230 << 6u)) >> 2u));
        uint _3250 = _3249.x;
        uint _3251 = _3218.z;
        float _3330;
        float _3332;
        float _3334;
        float _3336;
        float _3338;
        float _3340;
        if (((((1u << ((_3251 >> 4u) & 15u)) + 4294967295u) & _3250) == 0u) || ((_3251 & 240u) == 0u))
        {
            _3330 = 0.0;
            _3332 = 0.0;
            _3334 = 0.0;
            _3336 = 0.0;
            _3338 = 0.0;
            _3340 = 0.0;
        }
        else
        {
            float _3331;
            float _3333;
            float _3335;
            float _3337;
            float _3339;
            float _3341;
            float _3483 = 0.0;
            float _3484 = 0.0;
            float _3485 = 0.0;
            float _3486 = 0.0;
            float _3487 = 0.0;
            float _3488 = 0.0;
            uint _3489 = 0u;
            uint _3498;
            bool _3499;
            for (;;)
            {
                _3498 = texelFetch(g_lightClassification, int((((_3244 << 5u) + (_3230 << 9u)) + (_3489 << 2u)) >> 2u)).x;
                _3499 = _3498 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3499)
                {
                    frontier_phi_71_pred = _3488;
                    frontier_phi_71_pred_1 = _3487;
                    frontier_phi_71_pred_2 = _3486;
                    frontier_phi_71_pred_3 = _3485;
                    frontier_phi_71_pred_4 = _3484;
                    frontier_phi_71_pred_5 = _3483;
                }
                else
                {
                    float _3628;
                    float _3629;
                    float _3630;
                    float _3631;
                    float _3632;
                    float _3633;
                    uint _3634;
                    _3628 = _3483;
                    _3629 = _3484;
                    _3630 = _3485;
                    _3631 = _3486;
                    _3632 = _3487;
                    _3633 = _3488;
                    _3634 = _3498;
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    float _3559;
                    float _3560;
                    for (;;)
                    {
                        uint _3638 = uint(findLSB(_3634)) + (_3489 << 5u);
                        uint _3635 = (_3634 + 4294967295u) & _3634;
                        uint _3640 = _3638 * 48u;
                        vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3640)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 3u)).x));
                        uint _3660 = (_3638 * 48u) + 4u;
                        vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3660)).x, texelFetch(g_PointLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3660 + 3u)).x));
                        uint _3679 = (_3638 * 48u) + 8u;
                        vec3 _3690 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3679)).x, texelFetch(g_PointLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3679 + 2u)).x));
                        float _3694 = _3654.x - _2328;
                        float _3695 = _3654.y - _2329;
                        float _3696 = _3654.z - _2330;
                        float _3697 = dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696));
                        float _3700 = inversesqrt(_3697);
                        float _3701 = _3700 * _3694;
                        float _3702 = _3700 * _3695;
                        float _3703 = _3700 * _3696;
                        float _3704 = dot(vec3(_1185, _1188, _1191), vec3(_3701, _3702, _3703));
                        float _3709 = 1.0 - (_3697 * _3654.w);
                        float _5203 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                        float _3710 = isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0));
                        float _3711 = sqrt(_3697) * _3673.w;
                        float _3714 = 1.39999997615814208984375 / (_3711 + 1.39999997615814208984375);
                        float _3715 = _3714 * _3714;
                        float _3718 = ((1.0 - _3715) * _3704) + _3715;
                        float _3721 = _3711 * _3711;
                        float _3725 = ((isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0))) * _3710) / ((_3721 * 0.699999988079071044921875) + 1.0);
                        float _3729 = (-0.0) - _2328;
                        float _3730 = (-0.0) - _2329;
                        float _3731 = (-0.0) - _2330;
                        float _3735 = inversesqrt(dot(vec3(_3729, _3730, _3731), vec3(_3729, _3730, _3731)));
                        float _3736 = _3735 * _3729;
                        float _3737 = _3735 * _3730;
                        float _3738 = _3735 * _3731;
                        float _3745 = exp2(log2(1.0 / ((_3721 * 3.5) + 5.0)) * 0.25);
                        float _3746 = 1.0 - _1245;
                        float _3753 = sqrt(1.0 - ((1.0 - (_3746 * _3746)) * (1.0 - (_3745 * _3745))));
                        float _3754 = _3753 * _3753;
                        float _3755 = _3754 * _3754;
                        float _3756 = _3736 + _3701;
                        float _3757 = _3737 + _3702;
                        float _3758 = _3738 + _3703;
                        float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                        float _3766 = dot(vec3(_1185, _1188, _1191), vec3(_3736, _3737, _3738));
                        float _5219 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                        float _3769 = isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0));
                        float _3770 = dot(vec3(_1185, _1188, _1191), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                        float _5230 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                        float _3773 = isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0));
                        float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                        float _3778 = _3714 * _3754;
                        float _3779 = _3778 * _3778;
                        float _3782 = ((1.0 - _3779) * _3704) + _3779;
                        float _5241 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                        float _3783 = isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0));
                        float _3784 = 1.0 - _3754;
                        float _3794 = (0.5 / (((_3783 * ((_3769 * _3784) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3783 * _3784) + _3754) * _3769))) * _3783;
                        float _5252 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                        float _3805 = (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0)))) / ((_3777 * _3777) * ((_3721 * 2.1991131305694580078125) + 3.141590118408203125))) * _3710;
                        _3558 = (_3725 * _3673.x) + _3631;
                        _3559 = (_3725 * _3673.y) + _3632;
                        _3560 = (_3725 * _3673.z) + _3633;
                        _3555 = (_3805 * _3690.x) + _3628;
                        _3556 = (_3805 * _3690.y) + _3629;
                        _3557 = (_3805 * _3690.z) + _3630;
                        if (_3635 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3628 = _3555;
                            _3629 = _3556;
                            _3630 = _3557;
                            _3631 = _3558;
                            _3632 = _3559;
                            _3633 = _3560;
                            _3634 = _3635;
                        }
                    }
                    frontier_phi_71_pred = _3560;
                    frontier_phi_71_pred_1 = _3559;
                    frontier_phi_71_pred_2 = _3558;
                    frontier_phi_71_pred_3 = _3557;
                    frontier_phi_71_pred_4 = _3556;
                    frontier_phi_71_pred_5 = _3555;
                }
                _3341 = frontier_phi_71_pred;
                _3339 = frontier_phi_71_pred_1;
                _3337 = frontier_phi_71_pred_2;
                _3335 = frontier_phi_71_pred_3;
                _3333 = frontier_phi_71_pred_4;
                _3331 = frontier_phi_71_pred_5;
                uint _3490 = _3489 + 1u;
                if (_3490 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3483 = _3331;
                    _3484 = _3333;
                    _3485 = _3335;
                    _3486 = _3337;
                    _3487 = _3339;
                    _3488 = _3341;
                    _3489 = _3490;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3330 = _3331;
            _3332 = _3333;
            _3334 = _3335;
            _3336 = _3337;
            _3338 = _3339;
            _3340 = _3341;
        }
        uvec4 _3344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3345 = _3344.z;
        uint _3347 = (_3345 >> 8u) & 15u;
        float _3451;
        float _3453;
        float _3455;
        float _3457;
        float _3459;
        float _3461;
        if (((4294967295u << _3347) & _3250) == 0u)
        {
            _3451 = _3330;
            _3453 = _3332;
            _3455 = _3334;
            _3457 = _3336;
            _3459 = _3338;
            _3461 = _3340;
        }
        else
        {
            float _3476 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
            float _3477 = _3476 * _2328;
            float _3478 = _3476 * _2329;
            float _3479 = _3476 * _2330;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3347 < ((_3345 >> 12u) & 15u))
            {
                float _3452;
                float _3454;
                float _3456;
                float _3458;
                float _3460;
                float _3462;
                float _3611 = _3330;
                float _3612 = _3332;
                float _3613 = _3334;
                float _3614 = _3336;
                float _3615 = _3338;
                float _3616 = _3340;
                uint _3617 = _3347;
                uint _3626;
                bool _3627;
                for (;;)
                {
                    _3626 = texelFetch(g_lightClassification, int((((_3244 << 5u) + (_3230 << 9u)) + (_3617 << 2u)) >> 2u)).x;
                    _3627 = _3626 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3627)
                    {
                        frontier_phi_82_pred = _3616;
                        frontier_phi_82_pred_1 = _3615;
                        frontier_phi_82_pred_2 = _3614;
                        frontier_phi_82_pred_3 = _3613;
                        frontier_phi_82_pred_4 = _3612;
                        frontier_phi_82_pred_5 = _3611;
                    }
                    else
                    {
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _4112;
                        float _4113;
                        float _4114;
                        float _4115;
                        float _4116;
                        float _4117;
                        float _3832 = _3611;
                        float _3833 = _3612;
                        float _3834 = _3613;
                        float _3835 = _3614;
                        float _3836 = _3615;
                        float _3837 = _3616;
                        uint _3838 = _3626;
                        uint _3839;
                        vec4 _3864;
                        float _3865;
                        vec4 _3880;
                        vec3 _3892;
                        vec4 _3907;
                        vec4 _3922;
                        float _3968;
                        bool _3969;
                        for (;;)
                        {
                            uint _3849 = ((_3617 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3838));
                            _3839 = (_3838 + 4294967295u) & _3838;
                            uint _3851 = _3849 * 40u;
                            _3864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 3u)).x));
                            _3865 = _3864.w;
                            uint _3867 = (_3849 * 40u) + 4u;
                            _3880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 3u)).x));
                            uint _3882 = (_3849 * 40u) + 8u;
                            _3892 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3882 + 2u)).x));
                            uint _3894 = (_3849 * 40u) + 16u;
                            _3907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 3u)).x));
                            uint _3909 = (_3849 * 40u) + 20u;
                            _3922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 3u)).x));
                            uint _3924 = (_3849 * 40u) + 24u;
                            vec4 _3937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 3u)).x));
                            uint _3943 = (_3849 * 40u) + 28u;
                            vec4 _3956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 3u)).x));
                            _3968 = fma(_2330, _3956.z, fma(_2329, _3956.y, _3956.x * _2328)) + _3956.w;
                            _3969 = !((fma(_2330, _3937.z, fma(_2329, _3937.y, _3937.x * _2328)) + _3937.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3969)
                            {
                                float _3996 = _3864.x - _2328;
                                float _3997 = _3864.y - _2329;
                                float _3998 = _3864.z - _2330;
                                float _3999 = dot(vec3(_3996, _3997, _3998), vec3(_3996, _3997, _3998));
                                float _4002 = inversesqrt(_3999);
                                float _4003 = _4002 * _3996;
                                float _4004 = _4002 * _3997;
                                float _4005 = _4002 * _3998;
                                float _4009 = 1.0 - (_3999 / (_3865 * _3865));
                                float _5263 = isnan(0.0) ? _4009 : (isnan(_4009) ? 0.0 : max(_4009, 0.0));
                                float _4010 = isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0));
                                float _4014 = sqrt(_3999) * _3880.w;
                                float _4016 = 1.39999997615814208984375 / (_4014 + 1.39999997615814208984375);
                                float _4017 = _4016 * _4016;
                                float _4020 = ((1.0 - _4017) * dot(vec3(_4003, _4004, _4005), vec3(_1185, _1188, _1191))) + _4017;
                                float _4023 = _4014 * _4014;
                                float _4027 = (fma(_2330, _3907.z, fma(_2329, _3907.y, _3907.x * _2328)) + _3907.w) / _3968;
                                float _4028 = (fma(_2330, _3922.z, fma(_2329, _3922.y, _3922.x * _2328)) + _3922.w) / _3968;
                                float _4032 = 1.0 - dot(vec2(_4027, _4028), vec2(_4027, _4028));
                                float _5279 = isnan(0.0) ? _4032 : (isnan(_4032) ? 0.0 : max(_4032, 0.0));
                                float _4033 = isnan(1.0) ? _5279 : (isnan(_5279) ? 1.0 : min(_5279, 1.0));
                                float _4034 = _4033 * (((isnan(0.0) ? _4020 : (isnan(_4020) ? 0.0 : max(_4020, 0.0))) * _4010) / ((_4023 * 0.699999988079071044921875) + 1.0));
                                float _4046 = exp2(log2(1.0 / ((_4023 * 3.5) + 5.0)) * 0.25);
                                float _4047 = 1.0 - _1245;
                                float _4054 = sqrt(1.0 - ((1.0 - (_4047 * _4047)) * (1.0 - (_4046 * _4046))));
                                float _4055 = _4054 * _4054;
                                float _4056 = _4055 * _4055;
                                float _4057 = _4003 - _3477;
                                float _4058 = _4004 - _3478;
                                float _4059 = _4005 - _3479;
                                float _4063 = inversesqrt(dot(vec3(_4057, _4058, _4059), vec3(_4057, _4058, _4059)));
                                float _4067 = dot(vec3(_1185, _1188, _1191), vec3((-0.0) - _3477, (-0.0) - _3478, (-0.0) - _3479));
                                float _5290 = isnan(0.0) ? _4067 : (isnan(_4067) ? 0.0 : max(_4067, 0.0));
                                float _4070 = isnan(1.0) ? _5290 : (isnan(_5290) ? 1.0 : min(_5290, 1.0));
                                float _4071 = dot(vec3(_1185, _1188, _1191), vec3(_4063 * _4057, _4063 * _4058, _4063 * _4059));
                                float _5301 = isnan(0.0) ? _4071 : (isnan(_4071) ? 0.0 : max(_4071, 0.0));
                                float _4074 = isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0));
                                float _4078 = ((_4074 * _4074) * (_4056 + (-1.0))) + 1.0;
                                float _4079 = _4016 * _4055;
                                float _4080 = _4079 * _4079;
                                float _4086 = ((1.0 - _4080) * dot(vec3(_1185, _1188, _1191), vec3(_4003, _4004, _4005))) + _4080;
                                float _5312 = isnan(0.0) ? _4086 : (isnan(_4086) ? 0.0 : max(_4086, 0.0));
                                float _4087 = isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0));
                                float _4088 = 1.0 - _4055;
                                float _4098 = (0.5 / (((_4087 * ((_4070 * _4088) + _4055)) + 9.9999999392252902907785028219223e-09) + (((_4087 * _4088) + _4055) * _4070))) * _4087;
                                float _5323 = isnan(0.0) ? _4098 : (isnan(_4098) ? 0.0 : max(_4098, 0.0));
                                float _4108 = (_4033 * _4010) * (((_4056 * 3.1415927410125732421875) * (isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0)))) / ((_4078 * _4078) * ((_4023 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4034 * _3880.z;
                                frontier_phi_88_pred_1 = _4034 * _3880.y;
                                frontier_phi_88_pred_2 = _4034 * _3880.x;
                                frontier_phi_88_pred_3 = _4108 * _3892.z;
                                frontier_phi_88_pred_4 = _4108 * _3892.y;
                                frontier_phi_88_pred_5 = _4108 * _3892.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4117 = frontier_phi_88_pred;
                            _4116 = frontier_phi_88_pred_1;
                            _4115 = frontier_phi_88_pred_2;
                            _4114 = frontier_phi_88_pred_3;
                            _4113 = frontier_phi_88_pred_4;
                            _4112 = frontier_phi_88_pred_5;
                            _3822 = _4115 + _3835;
                            _3823 = _4116 + _3836;
                            _3824 = _4117 + _3837;
                            _3819 = _4112 + _3832;
                            _3820 = _4113 + _3833;
                            _3821 = _4114 + _3834;
                            if (_3839 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3832 = _3819;
                                _3833 = _3820;
                                _3834 = _3821;
                                _3835 = _3822;
                                _3836 = _3823;
                                _3837 = _3824;
                                _3838 = _3839;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3824;
                        frontier_phi_82_pred_1 = _3823;
                        frontier_phi_82_pred_2 = _3822;
                        frontier_phi_82_pred_3 = _3821;
                        frontier_phi_82_pred_4 = _3820;
                        frontier_phi_82_pred_5 = _3819;
                    }
                    _3462 = frontier_phi_82_pred;
                    _3460 = frontier_phi_82_pred_1;
                    _3458 = frontier_phi_82_pred_2;
                    _3456 = frontier_phi_82_pred_3;
                    _3454 = frontier_phi_82_pred_4;
                    _3452 = frontier_phi_82_pred_5;
                    uint _3618 = _3617 + 1u;
                    if (_3618 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3611 = _3452;
                        _3612 = _3454;
                        _3613 = _3456;
                        _3614 = _3458;
                        _3615 = _3460;
                        _3616 = _3462;
                        _3617 = _3618;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3458;
                frontier_phi_63_64_ladder_1 = _3462;
                frontier_phi_63_64_ladder_2 = _3460;
                frontier_phi_63_64_ladder_3 = _3456;
                frontier_phi_63_64_ladder_4 = _3454;
                frontier_phi_63_64_ladder_5 = _3452;
            }
            else
            {
                frontier_phi_63_64_ladder = _3336;
                frontier_phi_63_64_ladder_1 = _3340;
                frontier_phi_63_64_ladder_2 = _3338;
                frontier_phi_63_64_ladder_3 = _3334;
                frontier_phi_63_64_ladder_4 = _3332;
                frontier_phi_63_64_ladder_5 = _3330;
            }
            _3451 = frontier_phi_63_64_ladder_5;
            _3453 = frontier_phi_63_64_ladder_4;
            _3455 = frontier_phi_63_64_ladder_3;
            _3457 = frontier_phi_63_64_ladder;
            _3459 = frontier_phi_63_64_ladder_2;
            _3461 = frontier_phi_63_64_ladder_1;
        }
        float _3466 = isnan(1.0) ? _1229 : (isnan(_1229) ? 1.0 : min(_1229, 1.0));
        _3263 = (_3466 * _3457) + _2794;
        _3265 = (_3466 * _3459) + _2796;
        _3267 = (_3466 * _3461) + _2798;
        _3269 = ((_3451 * 0.039999999105930328369140625) * _3466) + _3117;
        _3271 = ((_3453 * 0.039999999105930328369140625) * _3466) + _3119;
        _3273 = ((_3455 * 0.039999999105930328369140625) * _3466) + _3121;
    }
    else
    {
        _3263 = _2794;
        _3265 = _2796;
        _3267 = _2798;
        _3269 = _3117;
        _3271 = _3119;
        _3273 = _3121;
    }
    float _5339 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _5350 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _5361 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _3290 = ((isnan(1.0) ? _5339 : (isnan(_5339) ? 1.0 : min(_5339, 1.0))) * (_3263 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1229))) + ((_3269 + ((isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0))) * _2063)) * cbPerFrame._m0[3u].x);
    float _3291 = ((isnan(1.0) ? _5350 : (isnan(_5350) ? 1.0 : min(_5350, 1.0))) * (_3265 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1229))) + ((_3271 + ((isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0))) * _2063)) * cbPerFrame._m0[3u].x);
    float _3292 = ((isnan(1.0) ? _5361 : (isnan(_5361) ? 1.0 : min(_5361, 1.0))) * (_3267 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1229))) + ((_3273 + ((isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))) * _2063)) * cbPerFrame._m0[3u].x);
    uint _3293 = _297 + 6u;
    float _3301 = _1166 / cbSceneParam._m0[86u].x;
    float _3302 = _1167 / cbSceneParam._m0[86u].y;
    vec4 _3316 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3301, _3302, (log2((isnan(cbSceneParam._m0[77u].w) ? _1089 : (isnan(_1089) ? cbSceneParam._m0[77u].w : min(_1089, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3318 = _3316.x;
    float _3319 = _3316.y;
    float _3320 = _3316.z;
    float _3321 = _3316.w;
    float _3393;
    float _3395;
    float _3397;
    float _3399;
    if (_1089 > cbSceneParam._m0[78u].w)
    {
        float _3355 = isnan(_1089) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1089 : min(cbSceneParam._m0[80u].w, _1089));
        float _3356 = _3355 / _1089;
        float _3367 = _3356 * _1139;
        float _3368 = _1140 * _3356;
        float _3369 = (-0.0) - _3368;
        float _3371 = _3356 * _1141;
        float _3373 = (cbSceneParam._m0[77u].w * _3369) / _3355;
        float _3374 = _3373 + cbSceneParam._m0[79u].w;
        float _3375 = cbSceneParam._m0[79u].w - _3368;
        float _3381 = sqrt(((_3367 * _3367) + (_3368 * _3368)) + (_3371 * _3371));
        float _3384 = (1.0 - (cbSceneParam._m0[77u].w / _3355)) * _3381;
        float _3389 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3391 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3568;
        if (abs((_3369 - _3373) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3568 = ((((_3374 > 0.0) ? exp2(_3389 * _3374) : (2.0 - exp2(_3391 * _3374))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3384;
        }
        else
        {
            float _3512 = 1.0 / cbSceneParam._m0[80u].x;
            float _3513 = isnan(_3375) ? _3374 : (isnan(_3374) ? _3375 : max(_3374, _3375));
            float _3514 = isnan(_3375) ? _3374 : (isnan(_3374) ? _3375 : min(_3374, _3375));
            float _3523 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : min(_3513, 0.0));
            float _3524 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : min(_3514, 0.0));
            _3568 = ((abs(_3381 / _3369) * cbSceneParam._m0[80u].y) * ((((_3523 - _3524) * 2.0) - ((exp2(_3389 * (isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0)))) - exp2(_3389 * (isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0))))) * _3512)) - ((exp2(_3391 * _3523) - exp2(_3391 * _3524)) * _3512))) + (_3384 * cbSceneParam._m0[80u].z);
        }
        vec4 _3570 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3301, _3302, 1.0), 0.0);
        float _3579 = exp2((_3568 * (-1.44269502162933349609375)) * (1.0 - _3570.w));
        float _3580 = log2(_3579);
        float _3596 = log2(_3321);
        _3393 = (exp2(_3596 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3580 * cbSceneParam._m0[78u].x)) * _3570.x) / cbSceneParam._m0[78u].x)) + _3318;
        _3395 = (exp2(_3596 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3580 * cbSceneParam._m0[78u].y)) * _3570.y) / cbSceneParam._m0[78u].y)) + _3319;
        _3397 = (exp2(_3596 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3580 * cbSceneParam._m0[78u].z)) * _3570.z) / cbSceneParam._m0[78u].z)) + _3320;
        _3399 = _3579 * _3321;
    }
    else
    {
        _3393 = _3318;
        _3395 = _3319;
        _3397 = _3320;
        _3399 = _3321;
    }
    bool _3606;
    vec4 _3409;
    vec4 _3431;
    float _3433;
    float _3437;
    float _3438;
    float _3439;
    float _3440;
    bool _3450;
    for (;;)
    {
        _3409 = cbMatDynParam._m0[0u];
        float _3411 = roundEven(_3409.y);
        bool _3412 = _3411 == 3.0;
        float _3413 = log2(_3399);
        float _3420 = exp2(_3413 * cbSceneParam._m0[78u].x) * _3290;
        float _3421 = exp2(_3413 * cbSceneParam._m0[78u].y) * _3291;
        float _3422 = exp2(_3413 * cbSceneParam._m0[78u].z) * _3292;
        float _3429 = _1155 + (-0.5);
        _3431 = cbMtdParam._m0[1u];
        _3433 = _3431.y * _3429;
        float _3436 = (_3411 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3437 = _3436 * (_3412 ? _3420 : (_3420 + (cbSceneParam._m0[72u].w * _3393)));
        _3438 = _3436 * (_3412 ? _3421 : (_3421 + (cbSceneParam._m0[72u].w * _3395)));
        _3439 = _3436 * (_3412 ? _3422 : (_3422 + (cbSceneParam._m0[72u].w * _3397)));
        _3440 = _3429 * 0.999000012874603271484375;
        _3450 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3450)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3440) < 0.5)
            {
                _3606 = true;
                break;
            }
        }
        uint _3547 = _1204 + uint(_3409.w);
        if ((cbInstanceData._m0[_3547].w < 1.0) && ((cbInstanceData._m0[_3547].w + _3440) < 0.5))
        {
            _3606 = true;
            break;
        }
        if ((_3433 + 1.0) < _3431.x)
        {
            _3606 = true;
            break;
        }
        _3606 = false;
        break;
    }
    float _3810;
    if (_3606)
    {
        discard_state = true;
        _3810 = 0.0;
    }
    else
    {
        _3810 = cbInstanceData._m0[_3293].w;
    }
    SV_Target.x = _3437;
    SV_Target.y = _3438;
    SV_Target.z = _3439;
    SV_Target.w = _3810;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3293].w;
    discard_exit();
}


