#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1235;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _377 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _326.x) * 2.0) - ((((_365 - _377) * cbMtdParam._m0[24u].z) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3823 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _402 = (_395 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _403 = (_395 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _404 = (_395 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _421 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _326.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].z) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3834 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _514 = _512.x;
    float _515 = _512.y;
    float _516 = _512.z;
    float _523 = ((_495.x - _514) * _395) + _514;
    float _524 = ((_495.y - _515) * _395) + _515;
    float _525 = ((_495.z - _516) * _395) + _516;
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _550 = ((_537.z - _525) * _468) + _525;
    float _553 = ((((_537.x - _523) * _468) + _523) * 2.0) + (-1.0);
    float _555 = ((((_537.y - _524) * _468) + _524) * 2.0) + (-1.0);
    float _556 = dot(vec2(_553, _555), vec2(_553, _555));
    float _3845 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _587 = (((_575.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _553;
    float _588 = (((_575.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _555;
    float _591 = fma(_561, _226, fma(_588, _233, _587 * _219));
    float _594 = fma(_561, _227, fma(_588, _234, _587 * _220));
    float _597 = fma(_561, _228, fma(_588, _235, _587 * _221));
    float _601 = inversesqrt(dot(vec3(_591, _594, _597), vec3(_591, _594, _597)));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _630 = _628.x;
    float _631 = 1.0 - _630;
    float _637 = (cbMtdParam._m0[19u].x + dot(vec4(_601 * _591, _601 * _594, _601 * _597, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_630 - _631) * cbMtdParam._m0[24u].w) + _631) * cbMtdParam._m0[21u].z);
    float _3856 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _645 = (_638 * (cbMtdParam._m0[17u].x - _475)) + _475;
    float _646 = (_638 * (cbMtdParam._m0[17u].y - _476)) + _476;
    float _647 = (_638 * (cbMtdParam._m0[17u].z - _477)) + _477;
    float _651 = (cbMtdParam._m0[19u].w * (_575.z - _550)) + _550;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _671 = (_664.x * 2.0) + (-1.0);
    float _672 = (_664.y * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _3867 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _681 = ((_664.z - _651) * _638) + _651;
    float _691 = ((sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) - _561) * _638) + _561;
    float _694 = (((_671 - _587) * _638) + _587) + (cbMtdParam._m0[21u].x * _587);
    float _695 = (((_672 - _588) * _638) + _588) + (cbMtdParam._m0[21u].x * _588);
    float _699 = cbMtdParam._m0[22u].x + _575.w;
    float _702 = fma(_691, _226, fma(_695, _233, _694 * _219));
    float _705 = fma(_691, _227, fma(_695, _234, _694 * _220));
    float _708 = fma(_691, _228, fma(_695, _235, _694 * _221));
    float _712 = inversesqrt(dot(vec3(_702, _705, _708), vec3(_702, _705, _708)));
    float _713 = _712 * _702;
    float _714 = _712 * _705;
    float _715 = _712 * _708;
    float _3878 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _716 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _3900 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3911 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3922 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _734 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _786 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _776);
    float _787 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _776);
    float _788 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _776);
    float _792 = inversesqrt(dot(vec3(_786, _787, _788), vec3(_786, _787, _788)));
    float _793 = _786 * _792;
    float _794 = _787 * _792;
    float _795 = _788 * _792;
    float _801 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _802 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _820 = fma(_715, cbSceneParam._m0[5u].z, fma(_714, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _713));
    float _823 = fma(_715, cbSceneParam._m0[6u].z, fma(_714, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _713));
    float _826 = fma(_715, cbSceneParam._m0[7u].z, fma(_714, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _713));
    uint _840 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _846 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_840].x;
    float _847 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_840].y;
    float _848 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_840].z;
    float _3933 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    vec4 _860 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _801, cbSceneParam._m0[86u].y * _802));
    float _864 = ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * TEXCOORD_5.w) * _860.x;
    float _865 = dot(vec3(_713, _714, _715), vec3(_793, _794, _795));
    float _868 = _865 * 2.0;
    float _872 = (_868 * _713) - _793;
    float _873 = (_868 * _714) - _794;
    float _874 = (_868 * _715) - _795;
    float _878 = abs(dot(vec3(_793, _794, _795), vec3(_713, _714, _715)));
    float _3966 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _880 = sqrt(_716);
    float _893 = exp2((_880 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_880 * 3.0));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1234;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = fma(_933, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925));
        float _963 = fma(_933, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925));
        float _967 = fma(_933, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925));
        float _992 = _925 + _713;
        float _993 = _929 + _714;
        float _994 = _933 + _715;
        float _1004 = fma(_994, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992)) - _959;
        float _1005 = fma(_994, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992)) - _963;
        float _1006 = fma(_994, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992)) - _967;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_959 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_963 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[34u].z) + ((((((_967 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1062 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1028.x + (-0.5));
        float _1064 = _1062 * (_1028.y + (-0.5));
        float _1065 = _1062 * (_1028.z + (-0.5));
        float _1072 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1035.x + (-0.5));
        float _1074 = _1072 * (_1035.y + (-0.5));
        float _1075 = _1072 * (_1035.z + (-0.5));
        float _1082 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1042.x + (-0.5));
        float _1084 = _1082 * (_1042.y + (-0.5));
        float _1085 = _1082 * (_1042.z + (-0.5));
        float _1092 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1049.x + (-0.5));
        float _1094 = _1092 * (_1049.y + (-0.5));
        float _1095 = _1092 * (_1049.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1116 = (dot(vec3(_713, _714, _715), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1126 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _4014 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1128 + 1.0))) + _1133) * _1096;
        float _1143 = _1064 * 0.5;
        float _1144 = _1074 * 0.5;
        float _1145 = _1084 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_713, _714, _715), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _4047 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1170 + 1.0))) + _1175) * _1097;
        float _1185 = _1065 * 0.5;
        float _1186 = _1075 * 0.5;
        float _1187 = _1085 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_713, _714, _715), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4080 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1212 + 1.0))) + _1217) * _1098;
        _1234 = _1065;
        _1236 = _1064;
        _1237 = _1063;
        _1238 = _1075;
        _1239 = _1074;
        _1240 = _1073;
        _1241 = _1085;
        _1242 = _1084;
        _1243 = _1083;
        _1244 = _1098;
        _1245 = _1097;
        _1246 = _1096;
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _1235;
        _1236 = _1235;
        _1237 = _1235;
        _1238 = _1235;
        _1239 = _1235;
        _1240 = _1235;
        _1241 = _1235;
        _1242 = _1235;
        _1243 = _1235;
        _1244 = _1235;
        _1245 = _1235;
        _1246 = _1235;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1273 = fma(_933, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _925));
        float _1277 = fma(_933, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _925));
        float _1281 = fma(_933, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _925));
        float _1304 = _925 + _713;
        float _1305 = _929 + _714;
        float _1306 = _933 + _715;
        float _1316 = fma(_1306, cbModelParam._m0[30u].z, fma(_1305, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1304)) - _1273;
        float _1317 = fma(_1306, cbModelParam._m0[31u].z, fma(_1305, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1304)) - _1277;
        float _1318 = fma(_1306, cbModelParam._m0[32u].z, fma(_1305, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1304)) - _1281;
        float _1322 = inversesqrt(dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318)));
        float _1335 = ((_1322 * _1316) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1273 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1322 * _1317) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1277 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1322 * _1318) / cbModelParam._m0[35u].z) + ((((((_1281 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        float _1372 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1339.x + (-0.5));
        float _1374 = _1372 * (_1339.y + (-0.5));
        float _1375 = _1372 * (_1339.z + (-0.5));
        float _1382 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1346.x + (-0.5));
        float _1384 = _1382 * (_1346.y + (-0.5));
        float _1385 = _1382 * (_1346.z + (-0.5));
        float _1392 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1353.x + (-0.5));
        float _1394 = _1392 * (_1353.y + (-0.5));
        float _1395 = _1392 * (_1353.z + (-0.5));
        float _1402 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1360.x + (-0.5));
        float _1404 = _1402 * (_1360.y + (-0.5));
        float _1405 = _1402 * (_1360.z + (-0.5));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = _1373 * 0.5;
        float _1410 = _1383 * 0.5;
        float _1411 = _1393 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_713, _714, _715), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4143 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1436 + 1.0))) + _1441) * _1406;
        float _1451 = _1374 * 0.5;
        float _1452 = _1384 * 0.5;
        float _1453 = _1394 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_713, _714, _715), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4176 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1478 + 1.0))) + _1483) * _1407;
        float _1493 = _1375 * 0.5;
        float _1494 = _1385 * 0.5;
        float _1495 = _1395 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_713, _714, _715), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4209 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1520 + 1.0))) + _1525) * _1408;
        _1542 = _1375;
        _1543 = _1374;
        _1544 = _1373;
        _1545 = _1385;
        _1546 = _1384;
        _1547 = _1383;
        _1548 = _1395;
        _1549 = _1394;
        _1550 = _1393;
        _1551 = _1408;
        _1552 = _1407;
        _1553 = _1406;
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
    }
    else
    {
        _1542 = _1235;
        _1543 = _1235;
        _1544 = _1235;
        _1545 = _1235;
        _1546 = _1235;
        _1547 = _1235;
        _1548 = _1235;
        _1549 = _1235;
        _1550 = _1235;
        _1551 = _1235;
        _1552 = _1235;
        _1553 = _1235;
        _1554 = 0.0;
        _1555 = 0.0;
        _1556 = 0.0;
    }
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1247)) + _1247;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1248)) + _1248;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1249)) + _1249;
    float _1589 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1566));
    float _1610 = _872 * 0.5;
    float _1611 = _873 * 0.5;
    float _1612 = _874 * 0.5;
    float _1613 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1616 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1619 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1653;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1626 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1234, _1238, _1241, _1244));
        float _1630 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1634 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1641 = dot(vec4(cbModelParam._m0[39u]), vec4(_1610, _1611, _1612, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1664;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1655 = dot(vec4(cbModelParam._m0[40u]), vec4(_1610, _1611, _1612, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1668 = (_1664 * cbModelParam._m0[1u].x) + (_1653 * (1.0 - cbModelParam._m0[1u].x));
    float _1678 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _716);
    float _1679 = isnan(_1678) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1678 : min(cbModelParam._m0[25u].z, _1678));
    float _1760;
    float _1762;
    float _1764;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1727 = fma(_933, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925)) + cbModelParam._m0[13u].w;
        float _1731 = fma(_933, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925)) + cbModelParam._m0[14u].w;
        float _1735 = fma(_933, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925)) + cbModelParam._m0[15u].w;
        float _1738 = fma(_874, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872));
        float _1741 = fma(_874, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872));
        float _1744 = fma(_874, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872));
        float _1772;
        if (_1738 > 0.0)
        {
            _1772 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1772 = frontier_phi_14_12_ladder;
        }
        float _1942;
        if (_1741 > 0.0)
        {
            _1942 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1942 = frontier_phi_23_19_ladder;
        }
        float _2237;
        if (_1744 > 0.0)
        {
            _2237 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2237 = frontier_phi_35_30_ladder;
        }
        float _2239 = isnan(_1942) ? _1772 : (isnan(_1772) ? _1942 : min(_1772, _1942));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1738) + _1727;
        float _2245 = (_2240 * _1741) + _1731;
        float _2246 = (_2240 * _1744) + _1735;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2247;
        float _2251 = _2247 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 > _2251) || ((_2245 < _2249) || ((_2244 < _2249) || (_2244 > _2251))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2246, cbModelParam._m0[9u].z, fma(_2245, cbModelParam._m0[9u].y, _2244 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2246, cbModelParam._m0[10u].z, fma(_2245, cbModelParam._m0[10u].y, _2244 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2246, cbModelParam._m0[11u].z, fma(_2245, cbModelParam._m0[11u].y, _2244 * cbModelParam._m0[11u].x))), _1679);
            frontier_phi_13_35_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1760 = frontier_phi_13_35_ladder_2;
        _1762 = frontier_phi_13_35_ladder_1;
        _1764 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1748 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_872, _873, _874), _1679);
        _1760 = _1748.x * cbModelParam._m0[1u].y;
        _1762 = _1748.y * cbModelParam._m0[1u].y;
        _1764 = _1748.z * cbModelParam._m0[1u].y;
    }
    float _1768 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _716);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1768 : min(cbModelParam._m0[25u].w, _1768));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1823 = fma(_933, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925)) + cbModelParam._m0[21u].w;
        float _1827 = fma(_933, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925)) + cbModelParam._m0[22u].w;
        float _1831 = fma(_933, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925)) + cbModelParam._m0[23u].w;
        float _1834 = fma(_874, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872));
        float _1837 = fma(_874, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872));
        float _1840 = fma(_874, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872));
        float _1947;
        if (_1834 > 0.0)
        {
            _1947 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1947 = frontier_phi_25_21_ladder;
        }
        float _2264;
        if (_1837 > 0.0)
        {
            _2264 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2264 = frontier_phi_37_32_ladder;
        }
        float _2591;
        if (_1840 > 0.0)
        {
            _2591 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2591 = frontier_phi_47_44_ladder;
        }
        float _2593 = isnan(_2264) ? _1947 : (isnan(_1947) ? _2264 : min(_1947, _2264));
        float _2594 = isnan(_2591) ? _2593 : (isnan(_2593) ? _2591 : min(_2593, _2591));
        float _2598 = (_2594 * _1834) + _1823;
        float _2599 = (_2594 * _1837) + _1827;
        float _2600 = (_2594 * _1840) + _1831;
        float _2601 = _2594 * 9.9999997473787516355514526367188e-05;
        float _2602 = (-1.0) - _2601;
        float _2604 = _2601 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2600 > _2604) || ((_2600 < _2602) || ((_2599 > _2604) || ((_2599 < _2602) || ((_2598 < _2602) || (_2598 > _2604))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2718 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2600, cbModelParam._m0[17u].z, fma(_2599, cbModelParam._m0[17u].y, _2598 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2600, cbModelParam._m0[18u].z, fma(_2599, cbModelParam._m0[18u].y, _2598 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2600, cbModelParam._m0[19u].z, fma(_2599, cbModelParam._m0[19u].y, _2598 * cbModelParam._m0[19u].x))), _1769);
            frontier_phi_22_47_ladder = _2718.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2718.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2718.x * cbModelParam._m0[1u].z;
        }
        _1859 = frontier_phi_22_47_ladder_2;
        _1861 = frontier_phi_22_47_ladder_1;
        _1863 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_872, _873, _874), _1769);
        _1859 = _1843.x * cbModelParam._m0[1u].z;
        _1861 = _1843.y * cbModelParam._m0[1u].z;
        _1863 = _1843.z * cbModelParam._m0[1u].z;
    }
    float _1875 = ((((1.0 - _893) * ((_880 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_893 * _880)) * _864;
    float _1876 = _1875 * ((cbModelParam._m0[1u].w * (_1859 - _1760)) + _1760);
    float _1877 = _1875 * ((cbModelParam._m0[1u].w * (_1861 - _1762)) + _1762);
    float _1878 = _1875 * ((cbModelParam._m0[1u].w * (_1863 - _1764)) + _1764);
    float _1881 = fma(_1878, cbSceneParam._m0[89u].z, fma(_1877, cbSceneParam._m0[89u].y, _1876 * cbSceneParam._m0[89u].x));
    float _1884 = fma(_1878, cbSceneParam._m0[90u].z, fma(_1877, cbSceneParam._m0[90u].y, _1876 * cbSceneParam._m0[90u].x));
    float _1887 = fma(_1878, cbSceneParam._m0[91u].z, fma(_1877, cbSceneParam._m0[91u].y, _1876 * cbSceneParam._m0[91u].x));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1929 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1933 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1934 = _1921 / _1933;
    float _1935 = _1925 / _1933;
    float _1936 = _1929 / _1933;
    float _2083;
    float _2084;
    float _2085;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1963 = ((uint(_1936 > cbSceneParam._m0[59u].y) + uint(_1936 > cbSceneParam._m0[59u].x)) + uint(_1936 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1964 = _1963 + 43u;
        uint _1972 = _1963 + 44u;
        uint _1980 = _1963 + 45u;
        uint _1988 = _1963 + 46u;
        float _1999 = fma(_1933, cbSceneParam._m0[_1964].w, fma(_1929, cbSceneParam._m0[_1964].z, fma(_1925, cbSceneParam._m0[_1964].y, _1921 * cbSceneParam._m0[_1964].x)));
        float _2003 = fma(_1933, cbSceneParam._m0[_1972].w, fma(_1929, cbSceneParam._m0[_1972].z, fma(_1925, cbSceneParam._m0[_1972].y, _1921 * cbSceneParam._m0[_1972].x)));
        float _2011 = fma(_1933, cbSceneParam._m0[_1988].w, fma(_1929, cbSceneParam._m0[_1988].z, fma(_1925, cbSceneParam._m0[_1988].y, _1921 * cbSceneParam._m0[_1988].x)));
        float _2016 = cbSceneParam._m0[33u].z * _2011;
        float _2018 = cbSceneParam._m0[33u].w * _2011;
        float _2021 = fma(_1933, cbSceneParam._m0[_1980].w, fma(_1929, cbSceneParam._m0[_1980].z, fma(_1925, cbSceneParam._m0[_1980].y, _1921 * cbSceneParam._m0[_1980].x))) / _2011;
        float _2069 = (cbSceneParam._m0[33u].x - sqrt(((_1935 * _1935) + (_1934 * _1934)) + (_1936 * _1936))) * cbSceneParam._m0[33u].y;
        float _4335 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2076 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2016 + _1999) / _2011, (_2018 + _2003) / _2011), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2018 + _1999) / _2011, (_2003 - _2016) / _2011), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1999 - _2016) / _2011, (_2003 - _2018) / _2011), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1999 - _2018) / _2011, (_2016 + _2003) / _2011), _2021), 0.0)).x), vec4(0.25)));
        _2083 = 1.0 - (_2076 * cbSceneParam._m0[34u].x);
        _2084 = 1.0 - (_2076 * cbSceneParam._m0[34u].y);
        _2085 = 1.0 - (_2076 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2083 = 1.0;
        _2084 = 1.0;
        _2085 = 1.0;
    }
    float _2149;
    float _2151;
    float _2153;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2137 = fma(_1933, cbSceneParam._m0[63u].w, fma(_1929, cbSceneParam._m0[63u].z, fma(_1925, cbSceneParam._m0[63u].y, _1921 * cbSceneParam._m0[63u].x)));
        float _2138 = fma(_1933, cbSceneParam._m0[60u].w, fma(_1929, cbSceneParam._m0[60u].z, fma(_1925, cbSceneParam._m0[60u].y, _1921 * cbSceneParam._m0[60u].x))) / _2137;
        float _2139 = fma(_1933, cbSceneParam._m0[61u].w, fma(_1929, cbSceneParam._m0[61u].z, fma(_1925, cbSceneParam._m0[61u].y, _1921 * cbSceneParam._m0[61u].x))) / _2137;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2138 >= cbSceneParam._m0[64u].x) && (_2139 >= cbSceneParam._m0[64u].y)) && (_2138 <= cbSceneParam._m0[64u].z)) && (_2139 <= cbSceneParam._m0[64u].w))
        {
            float _2277 = fma(_1933, cbSceneParam._m0[62u].w, fma(_1929, cbSceneParam._m0[62u].z, fma(_1925, cbSceneParam._m0[62u].y, _1921 * cbSceneParam._m0[62u].x))) / _2137;
            float _2281 = isnan(cbSceneParam._m0[41u].w) ? _2277 : (isnan(_2277) ? cbSceneParam._m0[41u].w : max(_2277, cbSceneParam._m0[41u].w));
            float _2324 = (cbSceneParam._m0[33u].x - sqrt(((_1935 * _1935) + (_1934 * _1934)) + (_1936 * _1936))) * cbSceneParam._m0[33u].y;
            float _4351 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
            float _2331 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2138, cbSceneParam._m0[33u].w + _2139), _2281), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2138, _2139 - cbSceneParam._m0[33u].z), _2281), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2138 - cbSceneParam._m0[33u].z, _2139 - cbSceneParam._m0[33u].w), _2281), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2138 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2139), _2281), 0.0)).x), vec4(0.25)));
            float _2335 = 1.0 - (_2331 * cbSceneParam._m0[34u].x);
            float _2336 = 1.0 - (_2331 * cbSceneParam._m0[34u].y);
            float _2337 = 1.0 - (_2331 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2337) ? _2085 : (isnan(_2085) ? _2337 : min(_2085, _2337));
            frontier_phi_34_33_ladder_1 = isnan(_2336) ? _2084 : (isnan(_2084) ? _2336 : min(_2084, _2336));
            frontier_phi_34_33_ladder_2 = isnan(_2335) ? _2083 : (isnan(_2083) ? _2335 : min(_2083, _2335));
        }
        else
        {
            frontier_phi_34_33_ladder = _2085;
            frontier_phi_34_33_ladder_1 = _2084;
            frontier_phi_34_33_ladder_2 = _2083;
        }
        _2149 = frontier_phi_34_33_ladder_2;
        _2151 = frontier_phi_34_33_ladder_1;
        _2153 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2149 = _2083;
        _2151 = _2084;
        _2153 = _2085;
    }
    uvec4 _2158 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2160 = _2158.x * 14u;
    uint _2161 = _2160 + 13u;
    float _2168 = _864 + (-1.0);
    float _2173 = (cbLight._m0[_2161].x * _2168) + 1.0;
    float _2174 = (cbLight._m0[_2161].y * _2168) + 1.0;
    float _2175 = (cbLight._m0[_2161].z * _2168) + 1.0;
    float _2176 = (cbLight._m0[_2161].w * _2168) + 1.0;
    uint _2177 = _2160 + 5u;
    float _2183 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
    uint _2187 = _2160 + 4u;
    float _2196 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2200 = _2160 | 1u;
    float _2211 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_713, _714, _715));
    float _2214 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_713, _714, _715));
    float _4387 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _4398 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2219 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * 0.3183098733425140380859375;
    float _2221 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2228 = ((cbLight._m0[_2177].x * _2183) * _2221) + (((cbLight._m0[_2187].x * _2149) * _2196) * _2219);
    float _2229 = ((_2183 * cbLight._m0[_2177].y) * _2221) + (((cbLight._m0[_2187].y * _2151) * _2196) * _2219);
    float _2230 = ((_2183 * cbLight._m0[_2177].z) * _2221) + (((cbLight._m0[_2187].z * _2153) * _2196) * _2219);
    uvec4 _2234 = floatBitsToUint(cbLight._m0[_2160 + 12u]);
    bool _2236 = _2234.x == 0u;
    float _2338;
    float _2340;
    float _2342;
    if (_2236)
    {
        _2338 = _2228;
        _2340 = _2229;
        _2342 = _2230;
    }
    else
    {
        uint _2346 = _2160 + 6u;
        float _2362 = (dot(vec3(cbLight._m0[_2160 + 2u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2363 = _2362 * _2362;
        float _4409 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2364 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2365 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2338 = (((cbLight._m0[_2346].x * 0.3183098733425140380859375) * _2364) * _2365) + _2228;
        _2340 = (((cbLight._m0[_2346].y * 0.3183098733425140380859375) * _2364) * _2365) + _2229;
        _2342 = (((cbLight._m0[_2346].z * 0.3183098733425140380859375) * _2364) * _2365) + _2230;
    }
    bool _2345 = _2234.y == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2345)
    {
        _2400 = _2338;
        _2402 = _2340;
        _2404 = _2342;
    }
    else
    {
        uint _2562 = _2160 + 7u;
        float _2578 = (dot(vec3(cbLight._m0[_2160 + 3u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2579 = _2578 * _2578;
        float _4425 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2580 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2581 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2400 = (((cbLight._m0[_2562].x * 0.3183098733425140380859375) * _2580) * _2581) + _2338;
        _2402 = (((cbLight._m0[_2562].y * 0.3183098733425140380859375) * _2580) * _2581) + _2340;
        _2404 = (((cbLight._m0[_2562].z * 0.3183098733425140380859375) * _2580) * _2581) + _2342;
    }
    uint _2407 = _2160 + 8u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _716) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2160].x + _793;
    float _2423 = cbLight._m0[_2160].y + _794;
    float _2424 = cbLight._m0[_2160].z + _795;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2160].xyz));
    float _4441 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _4452 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2436 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2437 = dot(vec3(_713, _714, _715), vec3(_2429, _2430, _2431));
    float _4463 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2429, _2430, _2431));
    float _4474 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2421 * _2421;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2460 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2461 = 1.0 - _2421;
    float _2472 = (0.5 / (((_2436 * ((_2435 * _2461) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2461) + _2421) * _2435))) * _2435;
    float _4485 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2474 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    uint _2488 = _2160 + 9u;
    float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _716) * 0.949999988079071044921875);
    float _2500 = _2499 * _2499;
    float _2501 = cbLight._m0[_2200].x + _793;
    float _2502 = cbLight._m0[_2200].y + _794;
    float _2503 = cbLight._m0[_2200].z + _795;
    float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
    float _2508 = _2507 * _2501;
    float _2509 = _2507 * _2502;
    float _2510 = _2507 * _2503;
    float _2511 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2200].xyz));
    float _4496 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2515 = dot(vec3(_713, _714, _715), vec3(_2508, _2509, _2510));
    float _4507 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2519 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2508, _2509, _2510));
    float _4518 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2523 = _2500 * _2500;
    float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
    float _2536 = (exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2537 = 1.0 - _2500;
    float _2547 = (0.5 / (((_2436 * ((_2514 * _2537) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2537) + _2500) * _2514))) * _2514;
    float _4529 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2549 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
    float _2559 = (((_2536 * cbLight._m0[_2488].x) * _2549) * _2183) + ((((cbLight._m0[_2407].x * _2149) * _2460) * _2474) * _2196);
    float _2560 = (((_2536 * cbLight._m0[_2488].y) * _2549) * _2183) + ((((cbLight._m0[_2407].y * _2151) * _2460) * _2474) * _2196);
    float _2561 = (((_2536 * cbLight._m0[_2488].z) * _2549) * _2183) + ((((cbLight._m0[_2407].z * _2153) * _2460) * _2474) * _2196);
    float _2617;
    float _2619;
    float _2621;
    if (_2236)
    {
        _2617 = _2559;
        _2619 = _2560;
        _2621 = _2561;
    }
    else
    {
        uint _2623 = _2160 + 2u;
        uint _2627 = _2160 + 10u;
        float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2623].w)) * _716) * 0.949999988079071044921875);
        float _2642 = _2641 * _2641;
        float _2643 = cbLight._m0[_2623].x + _793;
        float _2644 = cbLight._m0[_2623].y + _794;
        float _2645 = cbLight._m0[_2623].z + _795;
        float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
        float _2650 = _2649 * _2643;
        float _2651 = _2649 * _2644;
        float _2652 = _2649 * _2645;
        float _2653 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2623].xyz));
        float _4540 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2657 = dot(vec3(_713, _714, _715), vec3(_2650, _2651, _2652));
        float _4551 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2661 = dot(vec3(cbLight._m0[_2623].xyz), vec3(_2650, _2651, _2652));
        float _4562 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2665 = _2642 * _2642;
        float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
        float _2678 = (exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2679 = 1.0 - _2642;
        float _2689 = (0.5 / (((_2436 * ((_2656 * _2679) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2679) + _2642) * _2656))) * _2656;
        float _4573 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2691 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
        float _2692 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2617 = (((_2678 * cbLight._m0[_2627].x) * _2691) * _2692) + _2559;
        _2619 = (((_2678 * cbLight._m0[_2627].y) * _2691) * _2692) + _2560;
        _2621 = (((_2678 * cbLight._m0[_2627].z) * _2691) * _2692) + _2561;
    }
    float _2723;
    float _2725;
    float _2727;
    if (_2345)
    {
        _2723 = _2617;
        _2725 = _2619;
        _2727 = _2621;
    }
    else
    {
        uint _2734 = _2160 + 3u;
        uint _2738 = _2160 + 11u;
        float _2752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2734].w)) * _716) * 0.949999988079071044921875);
        float _2753 = _2752 * _2752;
        float _2754 = cbLight._m0[_2734].x + _793;
        float _2755 = cbLight._m0[_2734].y + _794;
        float _2756 = cbLight._m0[_2734].z + _795;
        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
        float _2761 = _2760 * _2754;
        float _2762 = _2760 * _2755;
        float _2763 = _2760 * _2756;
        float _2764 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2734].xyz));
        float _4589 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2768 = dot(vec3(_713, _714, _715), vec3(_2761, _2762, _2763));
        float _4600 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2771 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2772 = dot(vec3(cbLight._m0[_2734].xyz), vec3(_2761, _2762, _2763));
        float _4611 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2776 = _2753 * _2753;
        float _2780 = ((_2771 * _2771) * (_2776 + (-1.0))) + 1.0;
        float _2789 = (exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2790 = 1.0 - _2753;
        float _2800 = (0.5 / (((_2436 * ((_2767 * _2790) + _2753)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2790) + _2753) * _2767))) * _2767;
        float _4622 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2802 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2776 / ((_2780 * _2780) * 3.141590118408203125));
        float _2803 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2723 = (((_2789 * cbLight._m0[_2738].x) * _2802) * _2803) + _2617;
        _2725 = (((_2789 * cbLight._m0[_2738].y) * _2802) * _2803) + _2619;
        _2727 = (((_2789 * cbLight._m0[_2738].z) * _2802) * _2803) + _2621;
    }
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_2158.y == 0u)
    {
        uvec4 _2824 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2825 = _2824.x;
        uint _2836 = uint((float(_2824.y) * floor(float(uint(cbSceneParam._m0[85u].y * _802) / _2825))) + floor(float(uint(cbSceneParam._m0[85u].x * _801) / _2825)));
        float _2846 = (log2(_1936 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2847 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        uint _2850 = uint(isnan(14.0) ? _2847 : (isnan(_2847) ? 14.0 : min(_2847, 14.0)));
        uvec4 _2855 = texelFetch(g_lightClusterGridBuffer, int(((_2850 << 2u) + (_2836 << 6u)) >> 2u));
        uint _2856 = _2855.x;
        uint _2857 = _2824.z;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        if (((((1u << ((_2857 >> 4u) & 15u)) + 4294967295u) & _2856) == 0u) || ((_2857 & 240u) == 0u))
        {
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
        }
        else
        {
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            uint _3087 = 0u;
            uint _3096;
            bool _3097;
            for (;;)
            {
                _3096 = texelFetch(g_lightClassification, int((((_2850 << 5u) + (_2836 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                _3097 = _3096 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3097)
                {
                    frontier_phi_66_pred = _3086;
                    frontier_phi_66_pred_1 = _3085;
                    frontier_phi_66_pred_2 = _3084;
                    frontier_phi_66_pred_3 = _3083;
                    frontier_phi_66_pred_4 = _3082;
                    frontier_phi_66_pred_5 = _3081;
                }
                else
                {
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    uint _3211;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3085;
                    _3210 = _3086;
                    _3211 = _3096;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    for (;;)
                    {
                        uint _3215 = uint(findLSB(_3211)) + (_3087 << 5u);
                        uint _3212 = (_3211 + 4294967295u) & _3211;
                        uint _3217 = _3215 * 48u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 3u)).x));
                        uint _3237 = (_3215 * 48u) + 4u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3256 = (_3215 * 48u) + 8u;
                        vec3 _3267 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x));
                        float _3271 = _3231.x - _1934;
                        float _3272 = _3231.y - _1935;
                        float _3273 = _3231.z - _1936;
                        float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                        float _3277 = inversesqrt(_3274);
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3281 = dot(vec3(_820, _823, _826), vec3(_3278, _3279, _3280));
                        float _3286 = 1.0 - (_3274 * _3231.w);
                        float _4648 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3288 = sqrt(_3274) * _3250.w;
                        float _3291 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3281) + _3292;
                        float _3298 = _3288 * _3288;
                        float _3302 = ((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3287) / ((_3298 * 0.699999988079071044921875) + 1.0);
                        float _3306 = (-0.0) - _1934;
                        float _3307 = (-0.0) - _1935;
                        float _3308 = (-0.0) - _1936;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3313 = _3312 * _3306;
                        float _3314 = _3312 * _3307;
                        float _3315 = _3312 * _3308;
                        float _3322 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                        float _3323 = 1.0 - _880;
                        float _3330 = sqrt(1.0 - ((1.0 - (_3323 * _3323)) * (1.0 - (_3322 * _3322))));
                        float _3331 = _3330 * _3330;
                        float _3332 = _3331 * _3331;
                        float _3333 = _3313 + _3278;
                        float _3334 = _3314 + _3279;
                        float _3335 = _3315 + _3280;
                        float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                        float _3343 = dot(vec3(_820, _823, _826), vec3(_3313, _3314, _3315));
                        float _4664 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3346 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3347 = dot(vec3(_820, _823, _826), vec3(_3339 * _3333, _3339 * _3334, _3339 * _3335));
                        float _4675 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3350 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3354 = ((_3350 * _3350) * (_3332 + (-1.0))) + 1.0;
                        float _3355 = _3291 * _3331;
                        float _3356 = _3355 * _3355;
                        float _3359 = ((1.0 - _3356) * _3281) + _3356;
                        float _4686 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3360 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3361 = 1.0 - _3331;
                        float _3371 = (0.5 / (((_3360 * ((_3346 * _3361) + _3331)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3331) * _3346))) * _3360;
                        float _4697 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3382 = (((_3332 * 3.1415927410125732421875) * (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) / ((_3354 * _3354) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125))) * _3287;
                        _3140 = (_3302 * _3250.x) + _3208;
                        _3141 = (_3302 * _3250.y) + _3209;
                        _3142 = (_3302 * _3250.z) + _3210;
                        _3137 = (_3382 * _3267.x) + _3205;
                        _3138 = (_3382 * _3267.y) + _3206;
                        _3139 = (_3382 * _3267.z) + _3207;
                        if (_3212 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3141;
                            _3210 = _3142;
                            _3211 = _3212;
                        }
                    }
                    frontier_phi_66_pred = _3142;
                    frontier_phi_66_pred_1 = _3141;
                    frontier_phi_66_pred_2 = _3140;
                    frontier_phi_66_pred_3 = _3139;
                    frontier_phi_66_pred_4 = _3138;
                    frontier_phi_66_pred_5 = _3137;
                }
                _2947 = frontier_phi_66_pred;
                _2945 = frontier_phi_66_pred_1;
                _2943 = frontier_phi_66_pred_2;
                _2941 = frontier_phi_66_pred_3;
                _2939 = frontier_phi_66_pred_4;
                _2937 = frontier_phi_66_pred_5;
                uint _3088 = _3087 + 1u;
                if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3081 = _2937;
                    _3082 = _2939;
                    _3083 = _2941;
                    _3084 = _2943;
                    _3085 = _2945;
                    _3086 = _2947;
                    _3087 = _3088;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
        }
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.z;
        uint _2953 = (_2951 >> 8u) & 15u;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((4294967295u << _2953) & _2856) == 0u)
        {
            _3049 = _2936;
            _3051 = _2938;
            _3053 = _2940;
            _3055 = _2942;
            _3057 = _2944;
            _3059 = _2946;
        }
        else
        {
            float _3074 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
            float _3075 = _3074 * _1934;
            float _3076 = _3074 * _1935;
            float _3077 = _3074 * _1936;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2953 < ((_2951 >> 12u) & 15u))
            {
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3188 = _2936;
                float _3189 = _2938;
                float _3190 = _2940;
                float _3191 = _2942;
                float _3192 = _2944;
                float _3193 = _2946;
                uint _3194 = _2953;
                uint _3203;
                bool _3204;
                for (;;)
                {
                    _3203 = texelFetch(g_lightClassification, int((((_2850 << 5u) + (_2836 << 9u)) + (_3194 << 2u)) >> 2u)).x;
                    _3204 = _3203 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3204)
                    {
                        frontier_phi_72_pred = _3193;
                        frontier_phi_72_pred_1 = _3192;
                        frontier_phi_72_pred_2 = _3191;
                        frontier_phi_72_pred_3 = _3190;
                        frontier_phi_72_pred_4 = _3189;
                        frontier_phi_72_pred_5 = _3188;
                    }
                    else
                    {
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3400 = _3188;
                        float _3401 = _3189;
                        float _3402 = _3190;
                        float _3403 = _3191;
                        float _3404 = _3192;
                        float _3405 = _3193;
                        uint _3406 = _3203;
                        uint _3407;
                        vec4 _3432;
                        float _3433;
                        vec4 _3448;
                        vec3 _3460;
                        vec4 _3475;
                        vec4 _3490;
                        float _3536;
                        bool _3537;
                        for (;;)
                        {
                            uint _3417 = ((_3194 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3406));
                            _3407 = (_3406 + 4294967295u) & _3406;
                            uint _3419 = _3417 * 40u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            _3433 = _3432.w;
                            uint _3435 = (_3417 * 40u) + 4u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3417 * 40u) + 8u;
                            _3460 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x));
                            uint _3462 = (_3417 * 40u) + 16u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3417 * 40u) + 20u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3417 * 40u) + 24u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3511 = (_3417 * 40u) + 28u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3536 = fma(_1936, _3524.z, fma(_1935, _3524.y, _3524.x * _1934)) + _3524.w;
                            _3537 = !((fma(_1936, _3505.z, fma(_1935, _3505.y, _3505.x * _1934)) + _3505.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3537)
                            {
                                float _3564 = _3432.x - _1934;
                                float _3565 = _3432.y - _1935;
                                float _3566 = _3432.z - _1936;
                                float _3567 = dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566));
                                float _3570 = inversesqrt(_3567);
                                float _3571 = _3570 * _3564;
                                float _3572 = _3570 * _3565;
                                float _3573 = _3570 * _3566;
                                float _3577 = 1.0 - (_3567 / (_3433 * _3433));
                                float _4708 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3582 = sqrt(_3567) * _3448.w;
                                float _3584 = 1.39999997615814208984375 / (_3582 + 1.39999997615814208984375);
                                float _3585 = _3584 * _3584;
                                float _3588 = ((1.0 - _3585) * dot(vec3(_3571, _3572, _3573), vec3(_820, _823, _826))) + _3585;
                                float _3591 = _3582 * _3582;
                                float _3595 = (fma(_1936, _3475.z, fma(_1935, _3475.y, _3475.x * _1934)) + _3475.w) / _3536;
                                float _3596 = (fma(_1936, _3490.z, fma(_1935, _3490.y, _3490.x * _1934)) + _3490.w) / _3536;
                                float _3600 = 1.0 - dot(vec2(_3595, _3596), vec2(_3595, _3596));
                                float _4724 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3602 = _3601 * (((isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0))) * _3578) / ((_3591 * 0.699999988079071044921875) + 1.0));
                                float _3614 = exp2(log2(1.0 / ((_3591 * 3.5) + 5.0)) * 0.25);
                                float _3615 = 1.0 - _880;
                                float _3622 = sqrt(1.0 - ((1.0 - (_3615 * _3615)) * (1.0 - (_3614 * _3614))));
                                float _3623 = _3622 * _3622;
                                float _3624 = _3623 * _3623;
                                float _3625 = _3571 - _3075;
                                float _3626 = _3572 - _3076;
                                float _3627 = _3573 - _3077;
                                float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                                float _3635 = dot(vec3(_820, _823, _826), vec3((-0.0) - _3075, (-0.0) - _3076, (-0.0) - _3077));
                                float _4735 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3639 = dot(vec3(_820, _823, _826), vec3(_3631 * _3625, _3631 * _3626, _3631 * _3627));
                                float _4746 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3646 = ((_3642 * _3642) * (_3624 + (-1.0))) + 1.0;
                                float _3647 = _3584 * _3623;
                                float _3648 = _3647 * _3647;
                                float _3654 = ((1.0 - _3648) * dot(vec3(_820, _823, _826), vec3(_3571, _3572, _3573))) + _3648;
                                float _4757 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3656 = 1.0 - _3623;
                                float _3666 = (0.5 / (((_3655 * ((_3638 * _3656) + _3623)) + 9.9999999392252902907785028219223e-09) + (((_3655 * _3656) + _3623) * _3638))) * _3655;
                                float _4768 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3676 = (_3601 * _3578) * (((_3624 * 3.1415927410125732421875) * (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) / ((_3646 * _3646) * ((_3591 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3602 * _3448.y;
                                frontier_phi_78_pred_1 = _3602 * _3448.x;
                                frontier_phi_78_pred_2 = _3676 * _3460.z;
                                frontier_phi_78_pred_3 = _3676 * _3460.y;
                                frontier_phi_78_pred_4 = _3676 * _3460.x;
                                frontier_phi_78_pred_5 = _3602 * _3448.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3684 = frontier_phi_78_pred;
                            _3683 = frontier_phi_78_pred_1;
                            _3682 = frontier_phi_78_pred_2;
                            _3681 = frontier_phi_78_pred_3;
                            _3680 = frontier_phi_78_pred_4;
                            _3685 = frontier_phi_78_pred_5;
                            _3390 = _3683 + _3403;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            _3387 = _3680 + _3400;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            if (_3407 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3407;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3392;
                        frontier_phi_72_pred_1 = _3391;
                        frontier_phi_72_pred_2 = _3390;
                        frontier_phi_72_pred_3 = _3389;
                        frontier_phi_72_pred_4 = _3388;
                        frontier_phi_72_pred_5 = _3387;
                    }
                    _3060 = frontier_phi_72_pred;
                    _3058 = frontier_phi_72_pred_1;
                    _3056 = frontier_phi_72_pred_2;
                    _3054 = frontier_phi_72_pred_3;
                    _3052 = frontier_phi_72_pred_4;
                    _3050 = frontier_phi_72_pred_5;
                    uint _3195 = _3194 + 1u;
                    if (_3195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3188 = _3050;
                        _3189 = _3052;
                        _3190 = _3054;
                        _3191 = _3056;
                        _3192 = _3058;
                        _3193 = _3060;
                        _3194 = _3195;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3060;
                frontier_phi_60_61_ladder_1 = _3058;
                frontier_phi_60_61_ladder_2 = _3054;
                frontier_phi_60_61_ladder_3 = _3052;
                frontier_phi_60_61_ladder_4 = _3050;
                frontier_phi_60_61_ladder_5 = _3056;
            }
            else
            {
                frontier_phi_60_61_ladder = _2946;
                frontier_phi_60_61_ladder_1 = _2944;
                frontier_phi_60_61_ladder_2 = _2940;
                frontier_phi_60_61_ladder_3 = _2938;
                frontier_phi_60_61_ladder_4 = _2936;
                frontier_phi_60_61_ladder_5 = _2942;
            }
            _3049 = frontier_phi_60_61_ladder_4;
            _3051 = frontier_phi_60_61_ladder_3;
            _3053 = frontier_phi_60_61_ladder_2;
            _3055 = frontier_phi_60_61_ladder_5;
            _3057 = frontier_phi_60_61_ladder_1;
            _3059 = frontier_phi_60_61_ladder;
        }
        float _3064 = isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0));
        _2869 = (_3064 * _3055) + _2400;
        _2871 = (_3064 * _3057) + _2402;
        _2873 = (_3064 * _3059) + _2404;
        _2875 = ((_3049 * 0.039999999105930328369140625) * _3064) + _2723;
        _2877 = ((_3051 * 0.039999999105930328369140625) * _3064) + _2725;
        _2879 = ((_3053 * 0.039999999105930328369140625) * _3064) + _2727;
    }
    else
    {
        _2869 = _2400;
        _2871 = _2402;
        _2873 = _2404;
        _2875 = _2723;
        _2877 = _2725;
        _2879 = _2727;
    }
    float _4784 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4795 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4806 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    uint _2899 = _238 + 6u;
    float _2907 = _801 / cbSceneParam._m0[86u].x;
    float _2908 = _802 / cbSceneParam._m0[86u].y;
    vec4 _2922 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2907, _2908, (log2((isnan(cbSceneParam._m0[77u].w) ? _734 : (isnan(_734) ? cbSceneParam._m0[77u].w : min(_734, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2924 = _2922.x;
    float _2925 = _2922.y;
    float _2926 = _2922.z;
    float _2927 = _2922.w;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    if (_734 > cbSceneParam._m0[78u].w)
    {
        float _2961 = isnan(_734) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _734 : min(cbSceneParam._m0[80u].w, _734));
        float _2962 = _2961 / _734;
        float _2973 = _2962 * _786;
        float _2974 = _787 * _2962;
        float _2975 = (-0.0) - _2974;
        float _2977 = _2962 * _788;
        float _2979 = (cbSceneParam._m0[77u].w * _2975) / _2961;
        float _2980 = _2979 + cbSceneParam._m0[79u].w;
        float _2981 = cbSceneParam._m0[79u].w - _2974;
        float _2987 = sqrt(((_2973 * _2973) + (_2974 * _2974)) + (_2977 * _2977));
        float _2990 = (1.0 - (cbSceneParam._m0[77u].w / _2961)) * _2987;
        float _2995 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2997 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3150;
        if (abs((_2975 - _2979) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3150 = ((((_2980 > 0.0) ? exp2(_2995 * _2980) : (2.0 - exp2(_2997 * _2980))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2990;
        }
        else
        {
            float _3110 = 1.0 / cbSceneParam._m0[80u].x;
            float _3111 = isnan(_2981) ? _2980 : (isnan(_2980) ? _2981 : max(_2980, _2981));
            float _3112 = isnan(_2981) ? _2980 : (isnan(_2980) ? _2981 : min(_2980, _2981));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            _3150 = ((abs(_2987 / _2975) * cbSceneParam._m0[80u].y) * ((((_3121 - _3122) * 2.0) - ((exp2(_2995 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0)))) - exp2(_2995 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))))) * _3110)) - ((exp2(_2997 * _3121) - exp2(_2997 * _3122)) * _3110))) + (_2990 * cbSceneParam._m0[80u].z);
        }
        vec4 _3152 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2907, _2908, 1.0), 0.0);
        float _3161 = exp2((_3150 * (-1.44269502162933349609375)) * (1.0 - _3152.w));
        float _3162 = log2(_3161);
        float _3178 = log2(_2927);
        _2999 = (exp2(_3178 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].x)) * _3152.x) / cbSceneParam._m0[78u].x)) + _2924;
        _3001 = (exp2(_3178 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].y)) * _3152.y) / cbSceneParam._m0[78u].y)) + _2925;
        _3003 = (exp2(_3178 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].z)) * _3152.z) / cbSceneParam._m0[78u].z)) + _2926;
        _3005 = _3161 * _2927;
    }
    else
    {
        _2999 = _2924;
        _3001 = _2925;
        _3003 = _2926;
        _3005 = _2927;
    }
    float _3017 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3018 = _3017 == 3.0;
    float _3019 = log2(_3005);
    float _3026 = exp2(_3019 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2869 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _864))) + ((_2875 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1668)) * cbPerFrame._m0[3u].x));
    float _3027 = exp2(_3019 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2871 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _864))) + ((_2877 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1668)) * cbPerFrame._m0[3u].x));
    float _3028 = exp2(_3019 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2873 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _864))) + ((_2879 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1668)) * cbPerFrame._m0[3u].x));
    float _3037 = (_3017 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3037 * (_3018 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _2999)));
    SV_Target.y = _3037 * (_3018 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3001)));
    SV_Target.z = _3037 * (_3018 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3003)));
    SV_Target.w = cbInstanceData._m0[_2899].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2899].w;
}


