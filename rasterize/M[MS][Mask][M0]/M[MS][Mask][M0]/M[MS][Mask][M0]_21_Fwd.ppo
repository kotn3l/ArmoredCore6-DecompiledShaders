#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1126;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].z) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3433 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _389 = (_382 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _390 = (_382 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _391 = (_382 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    float _439 = ((_409.z - _430) * _382) + _430;
    float _442 = ((((_409.x - _428) * _382) + _428) * 2.0) + (-1.0);
    float _444 = ((((_409.y - _429) * _382) + _429) * 2.0) + (-1.0);
    float _445 = dot(vec2(_442, _444), vec2(_442, _444));
    float _3444 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _450 = sqrt(1.0 - (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))));
    vec4 _466 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _478 = (((_466.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _442;
    float _479 = (((_466.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _444;
    float _482 = fma(_450, _216, fma(_479, _223, _478 * _209));
    float _485 = fma(_450, _217, fma(_479, _224, _478 * _210));
    float _488 = fma(_450, _218, fma(_479, _225, _478 * _211));
    float _492 = inversesqrt(dot(vec3(_482, _485, _488), vec3(_482, _485, _488)));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _521 = _519.x;
    float _522 = 1.0 - _521;
    float _528 = (cbMtdParam._m0[19u].x + dot(vec4(_492 * _482, _492 * _485, _492 * _488, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_521 - _522) * cbMtdParam._m0[24u].w) + _522) * cbMtdParam._m0[21u].z);
    float _3455 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _536 = (_529 * (cbMtdParam._m0[17u].x - _389)) + _389;
    float _537 = (_529 * (cbMtdParam._m0[17u].y - _390)) + _390;
    float _538 = (_529 * (cbMtdParam._m0[17u].z - _391)) + _391;
    float _542 = (cbMtdParam._m0[19u].w * (_466.z - _439)) + _439;
    vec4 _555 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _562 = (_555.x * 2.0) + (-1.0);
    float _563 = (_555.y * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3466 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _572 = ((_555.z - _542) * _529) + _542;
    float _582 = ((sqrt(1.0 - (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) - _450) * _529) + _450;
    float _585 = (((_562 - _478) * _529) + _478) + (cbMtdParam._m0[21u].x * _478);
    float _586 = (((_563 - _479) * _529) + _479) + (cbMtdParam._m0[21u].x * _479);
    float _590 = cbMtdParam._m0[22u].x + _466.w;
    float _593 = fma(_582, _216, fma(_586, _223, _585 * _209));
    float _596 = fma(_582, _217, fma(_586, _224, _585 * _210));
    float _599 = fma(_582, _218, fma(_586, _225, _585 * _211));
    float _603 = inversesqrt(dot(vec3(_593, _596, _599), vec3(_593, _596, _599)));
    float _604 = _603 * _593;
    float _605 = _603 * _596;
    float _606 = _603 * _599;
    float _3477 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _607 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3499 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3510 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3521 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _625 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _677 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _667);
    float _678 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _667);
    float _679 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _667);
    float _683 = inversesqrt(dot(vec3(_677, _678, _679), vec3(_677, _678, _679)));
    float _684 = _677 * _683;
    float _685 = _678 * _683;
    float _686 = _679 * _683;
    float _692 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _693 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _711 = fma(_606, cbSceneParam._m0[5u].z, fma(_605, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _604));
    float _714 = fma(_606, cbSceneParam._m0[6u].z, fma(_605, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _604));
    float _717 = fma(_606, cbSceneParam._m0[7u].z, fma(_605, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _604));
    uint _731 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _737 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_731].x;
    float _738 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_731].y;
    float _739 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_731].z;
    float _3532 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    vec4 _751 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _692, cbSceneParam._m0[86u].y * _693));
    float _755 = ((isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * TEXCOORD_5.w) * _751.x;
    float _756 = dot(vec3(_604, _605, _606), vec3(_684, _685, _686));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _604) - _684;
    float _764 = (_759 * _605) - _685;
    float _765 = (_759 * _606) - _686;
    float _769 = abs(dot(vec3(_684, _685, _686), vec3(_604, _605, _606)));
    float _3565 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_607);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1125;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _850 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _854 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _858 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _883 = _816 + _604;
        float _884 = _820 + _605;
        float _885 = _824 + _606;
        float _895 = fma(_885, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883)) - _850;
        float _896 = fma(_885, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883)) - _854;
        float _897 = fma(_885, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883)) - _858;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_850 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_854 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[34u].z) + ((((((_858 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_919.x + (-0.5));
        float _955 = _953 * (_919.y + (-0.5));
        float _956 = _953 * (_919.z + (-0.5));
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_926.x + (-0.5));
        float _965 = _963 * (_926.y + (-0.5));
        float _966 = _963 * (_926.z + (-0.5));
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_933.x + (-0.5));
        float _975 = _973 * (_933.y + (-0.5));
        float _976 = _973 * (_933.z + (-0.5));
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1007 = (dot(vec3(_604, _605, _606), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1017 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3613 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1019 + 1.0))) + _1024) * _987;
        float _1034 = _955 * 0.5;
        float _1035 = _965 * 0.5;
        float _1036 = _975 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_604, _605, _606), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3646 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1061 + 1.0))) + _1066) * _988;
        float _1076 = _956 * 0.5;
        float _1077 = _966 * 0.5;
        float _1078 = _976 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_604, _605, _606), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3679 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1103 + 1.0))) + _1108) * _989;
        _1125 = _956;
        _1127 = _955;
        _1128 = _954;
        _1129 = _966;
        _1130 = _965;
        _1131 = _964;
        _1132 = _976;
        _1133 = _975;
        _1134 = _974;
        _1135 = _989;
        _1136 = _988;
        _1137 = _987;
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _1126;
        _1127 = _1126;
        _1128 = _1126;
        _1129 = _1126;
        _1130 = _1126;
        _1131 = _1126;
        _1132 = _1126;
        _1133 = _1126;
        _1134 = _1126;
        _1135 = _1126;
        _1136 = _1126;
        _1137 = _1126;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1165 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1169 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1173 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1196 = _816 + _604;
        float _1197 = _820 + _605;
        float _1198 = _824 + _606;
        float _1208 = fma(_1198, cbModelParam._m0[30u].z, fma(_1197, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1196)) - _1165;
        float _1209 = fma(_1198, cbModelParam._m0[31u].z, fma(_1197, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1196)) - _1169;
        float _1210 = fma(_1198, cbModelParam._m0[32u].z, fma(_1197, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1196)) - _1173;
        float _1214 = inversesqrt(dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210)));
        float _1227 = ((_1214 * _1208) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1165 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1214 * _1209) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1169 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1214 * _1210) / cbModelParam._m0[35u].z) + ((((((_1173 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        float _1264 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1231.x + (-0.5));
        float _1266 = _1264 * (_1231.y + (-0.5));
        float _1267 = _1264 * (_1231.z + (-0.5));
        float _1274 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1238.x + (-0.5));
        float _1276 = _1274 * (_1238.y + (-0.5));
        float _1277 = _1274 * (_1238.z + (-0.5));
        float _1284 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1245.x + (-0.5));
        float _1286 = _1284 * (_1245.y + (-0.5));
        float _1287 = _1284 * (_1245.z + (-0.5));
        float _1294 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1252.x + (-0.5));
        float _1296 = _1294 * (_1252.y + (-0.5));
        float _1297 = _1294 * (_1252.z + (-0.5));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = _1265 * 0.5;
        float _1302 = _1275 * 0.5;
        float _1303 = _1285 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_604, _605, _606), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3742 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1328 + 1.0))) + _1333) * _1298;
        float _1343 = _1266 * 0.5;
        float _1344 = _1276 * 0.5;
        float _1345 = _1286 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_604, _605, _606), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3775 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1370 + 1.0))) + _1375) * _1299;
        float _1385 = _1267 * 0.5;
        float _1386 = _1277 * 0.5;
        float _1387 = _1287 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_604, _605, _606), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3808 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1412 + 1.0))) + _1417) * _1300;
        _1434 = _1267;
        _1435 = _1266;
        _1436 = _1265;
        _1437 = _1277;
        _1438 = _1276;
        _1439 = _1275;
        _1440 = _1287;
        _1441 = _1286;
        _1442 = _1285;
        _1443 = _1300;
        _1444 = _1299;
        _1445 = _1298;
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
    }
    else
    {
        _1434 = _1126;
        _1435 = _1126;
        _1436 = _1126;
        _1437 = _1126;
        _1438 = _1126;
        _1439 = _1126;
        _1440 = _1126;
        _1441 = _1126;
        _1442 = _1126;
        _1443 = _1126;
        _1444 = _1126;
        _1445 = _1126;
        _1446 = 0.0;
        _1447 = 0.0;
        _1448 = 0.0;
    }
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1138)) + _1138;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1139)) + _1139;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1140)) + _1140;
    float _1481 = fma(_1460, cbSceneParam._m0[89u].z, fma(_1459, cbSceneParam._m0[89u].y, _1458 * cbSceneParam._m0[89u].x));
    float _1484 = fma(_1460, cbSceneParam._m0[90u].z, fma(_1459, cbSceneParam._m0[90u].y, _1458 * cbSceneParam._m0[90u].x));
    float _1487 = fma(_1460, cbSceneParam._m0[91u].z, fma(_1459, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1458));
    float _1502 = _763 * 0.5;
    float _1503 = _764 * 0.5;
    float _1504 = _765 * 0.5;
    float _1505 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1508 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1511 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1545;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1518 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1125, _1129, _1132, _1135));
        float _1522 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1526 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1533 = dot(vec4(cbModelParam._m0[39u]), vec4(_1502, _1503, _1504, 1.0));
        _1545 = dot(vec3(isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1533) ? 0.0 : (isnan(0.0) ? _1533 : max(0.0, _1533))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1545 = 1.0;
    }
    float _1556;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1547 = dot(vec4(cbModelParam._m0[40u]), vec4(_1502, _1503, _1504, 1.0));
        _1556 = dot(vec3(isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1547) ? 0.0 : (isnan(0.0) ? _1547 : max(0.0, _1547))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1556 = 1.0;
    }
    float _1560 = (_1556 * cbModelParam._m0[1u].x) + (_1545 * (1.0 - cbModelParam._m0[1u].x));
    float _1570 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _607);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1570 : min(cbModelParam._m0[25u].z, _1570));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1619 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1623 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1627 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1630 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1633 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1636 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1664;
        if (_1630 > 0.0)
        {
            _1664 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1664 = frontier_phi_14_12_ladder;
        }
        float _1865;
        if (_1633 > 0.0)
        {
            _1865 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1865 = frontier_phi_23_19_ladder;
        }
        float _2108;
        if (_1636 > 0.0)
        {
            _2108 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2108 = frontier_phi_35_30_ladder;
        }
        float _2110 = isnan(_1865) ? _1664 : (isnan(_1664) ? _1865 : min(_1664, _1865));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1630) + _1619;
        float _2116 = (_2111 * _1633) + _1623;
        float _2117 = (_2111 * _1636) + _1627;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2118;
        float _2122 = _2118 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 > _2122) || ((_2116 < _2120) || ((_2115 < _2120) || (_2115 > _2122))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2241 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2117, cbModelParam._m0[9u].z, fma(_2116, cbModelParam._m0[9u].y, _2115 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2117, cbModelParam._m0[10u].z, fma(_2116, cbModelParam._m0[10u].y, _2115 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2117, cbModelParam._m0[11u].z, fma(_2116, cbModelParam._m0[11u].y, _2115 * cbModelParam._m0[11u].x))), _1571);
            frontier_phi_13_35_ladder = _2241.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2241.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2241.x * cbModelParam._m0[1u].y;
        }
        _1652 = frontier_phi_13_35_ladder_2;
        _1654 = frontier_phi_13_35_ladder_1;
        _1656 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1571);
        _1652 = _1640.x * cbModelParam._m0[1u].y;
        _1654 = _1640.y * cbModelParam._m0[1u].y;
        _1656 = _1640.z * cbModelParam._m0[1u].y;
    }
    float _1660 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _607);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1660 : min(cbModelParam._m0[25u].w, _1660));
    float _1751;
    float _1753;
    float _1755;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1715 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1719 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1723 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1726 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1729 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1732 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _1870;
        if (_1726 > 0.0)
        {
            _1870 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1870 = frontier_phi_25_21_ladder;
        }
        float _2135;
        if (_1729 > 0.0)
        {
            _2135 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2135 = frontier_phi_37_32_ladder;
        }
        float _2340;
        if (_1732 > 0.0)
        {
            _2340 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2340 = frontier_phi_46_43_ladder;
        }
        float _2342 = isnan(_2135) ? _1870 : (isnan(_1870) ? _2135 : min(_1870, _2135));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1726) + _1715;
        float _2348 = (_2343 * _1729) + _1719;
        float _2349 = (_2343 * _1732) + _1723;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2350;
        float _2353 = _2350 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2349 > _2353) || ((_2349 < _2351) || ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 < _2351) || (_2347 > _2353))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2349, cbModelParam._m0[17u].z, fma(_2348, cbModelParam._m0[17u].y, _2347 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2349, cbModelParam._m0[18u].z, fma(_2348, cbModelParam._m0[18u].y, _2347 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2349, cbModelParam._m0[19u].z, fma(_2348, cbModelParam._m0[19u].y, _2347 * cbModelParam._m0[19u].x))), _1661);
            frontier_phi_22_46_ladder = _2548.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2548.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2548.x * cbModelParam._m0[1u].z;
        }
        _1751 = frontier_phi_22_46_ladder_2;
        _1753 = frontier_phi_22_46_ladder_1;
        _1755 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1661);
        _1751 = _1735.x * cbModelParam._m0[1u].z;
        _1753 = _1735.y * cbModelParam._m0[1u].z;
        _1755 = _1735.z * cbModelParam._m0[1u].z;
    }
    float _1767 = ((((1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_784 * _771)) * _755;
    float _1768 = _1767 * ((cbModelParam._m0[1u].w * (_1751 - _1652)) + _1652);
    float _1769 = _1767 * ((cbModelParam._m0[1u].w * (_1753 - _1654)) + _1654);
    float _1770 = _1767 * ((cbModelParam._m0[1u].w * (_1755 - _1656)) + _1656);
    float _1773 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1776 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1779 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, _1768 * cbSceneParam._m0[91u].x));
    uvec4 _1789 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1791 = _1789.x * 14u;
    uint _1792 = _1791 + 13u;
    float _1799 = _755 + (-1.0);
    float _1804 = (cbLight._m0[_1792].x * _1799) + 1.0;
    float _1805 = (cbLight._m0[_1792].y * _1799) + 1.0;
    float _1806 = (cbLight._m0[_1792].z * _1799) + 1.0;
    float _1807 = (cbLight._m0[_1792].w * _1799) + 1.0;
    uint _1808 = _1791 + 5u;
    float _1814 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1818 = _1791 + 4u;
    float _1824 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _1828 = _1791 | 1u;
    float _1839 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_604, _605, _606));
    float _1842 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_604, _605, _606));
    float _3944 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _3955 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1847 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * 0.3183098733425140380859375;
    float _1849 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.3183098733425140380859375;
    float _1856 = ((cbLight._m0[_1808].x * _1814) * _1849) + ((cbLight._m0[_1818].x * _1824) * _1847);
    float _1857 = ((_1814 * cbLight._m0[_1808].y) * _1849) + ((_1824 * cbLight._m0[_1818].y) * _1847);
    float _1858 = ((_1814 * cbLight._m0[_1808].z) * _1849) + ((_1824 * cbLight._m0[_1818].z) * _1847);
    uvec4 _1862 = floatBitsToUint(cbLight._m0[_1791 + 12u]);
    bool _1864 = _1862.x == 0u;
    float _1875;
    float _1877;
    float _1879;
    if (_1864)
    {
        _1875 = _1856;
        _1877 = _1857;
        _1879 = _1858;
    }
    else
    {
        uint _1883 = _1791 + 6u;
        float _1899 = (dot(vec3(cbLight._m0[_1791 + 2u].xyz), vec3(_604, _605, _606)) * 0.5) + 0.5;
        float _1900 = _1899 * _1899;
        float _3966 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1902 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _1875 = (((cbLight._m0[_1883].x * 0.3183098733425140380859375) * _1901) * _1902) + _1856;
        _1877 = (((cbLight._m0[_1883].y * 0.3183098733425140380859375) * _1901) * _1902) + _1857;
        _1879 = (((cbLight._m0[_1883].z * 0.3183098733425140380859375) * _1901) * _1902) + _1858;
    }
    bool _1882 = _1862.y == 0u;
    float _1920;
    float _1922;
    float _1924;
    if (_1882)
    {
        _1920 = _1875;
        _1922 = _1877;
        _1924 = _1879;
    }
    else
    {
        uint _2079 = _1791 + 7u;
        float _2095 = (dot(vec3(cbLight._m0[_1791 + 3u].xyz), vec3(_604, _605, _606)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _3982 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _2098 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1920 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _1875;
        _1922 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _1877;
        _1924 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _1879;
    }
    uint _1927 = _1791 + 8u;
    float _1940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _607) * 0.949999988079071044921875);
    float _1941 = _1940 * _1940;
    float _1942 = cbLight._m0[_1791].x + _684;
    float _1943 = cbLight._m0[_1791].y + _685;
    float _1944 = cbLight._m0[_1791].z + _686;
    float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
    float _1949 = _1948 * _1942;
    float _1950 = _1948 * _1943;
    float _1951 = _1948 * _1944;
    float _1952 = dot(vec3(_604, _605, _606), vec3(cbLight._m0[_1791].xyz));
    float _3998 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _1956 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1957 = dot(vec3(_604, _605, _606), vec3(_1949, _1950, _1951));
    float _4020 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _1961 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1949, _1950, _1951));
    float _4031 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1965 = _1941 * _1941;
    float _1969 = ((_1960 * _1960) * (_1965 + (-1.0))) + 1.0;
    float _1980 = (exp2(log2(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1981 = 1.0 - _1941;
    float _1992 = (0.5 / (((_1956 * ((_1955 * _1981) + _1941)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _1981) + _1941) * _1955))) * _1955;
    float _4042 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1994 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1965 / ((_1969 * _1969) * 3.141590118408203125));
    uint _2005 = _1791 + 9u;
    float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1828].w)) * _607) * 0.949999988079071044921875);
    float _2017 = _2016 * _2016;
    float _2018 = cbLight._m0[_1828].x + _684;
    float _2019 = cbLight._m0[_1828].y + _685;
    float _2020 = cbLight._m0[_1828].z + _686;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2025 = _2024 * _2018;
    float _2026 = _2024 * _2019;
    float _2027 = _2024 * _2020;
    float _2028 = dot(vec3(_604, _605, _606), vec3(cbLight._m0[_1828].xyz));
    float _4053 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _2032 = dot(vec3(_604, _605, _606), vec3(_2025, _2026, _2027));
    float _4064 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _2036 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_2025, _2026, _2027));
    float _4075 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2040 = _2017 * _2017;
    float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
    float _2053 = (exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2054 = 1.0 - _2017;
    float _2064 = (0.5 / (((_1956 * ((_2031 * _2054) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _2054) + _2017) * _2031))) * _2031;
    float _4086 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2066 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
    float _2076 = (((_2053 * cbLight._m0[_2005].x) * _2066) * _1814) + (((_1980 * cbLight._m0[_1927].x) * _1994) * _1824);
    float _2077 = (((_2053 * cbLight._m0[_2005].y) * _2066) * _1814) + (((_1980 * cbLight._m0[_1927].y) * _1994) * _1824);
    float _2078 = (((_2053 * cbLight._m0[_2005].z) * _2066) * _1814) + (((_1980 * cbLight._m0[_1927].z) * _1994) * _1824);
    float _2140;
    float _2142;
    float _2144;
    if (_1864)
    {
        _2140 = _2076;
        _2142 = _2077;
        _2144 = _2078;
    }
    else
    {
        uint _2146 = _1791 + 2u;
        uint _2150 = _1791 + 10u;
        float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _607) * 0.949999988079071044921875);
        float _2165 = _2164 * _2164;
        float _2166 = cbLight._m0[_2146].x + _684;
        float _2167 = cbLight._m0[_2146].y + _685;
        float _2168 = cbLight._m0[_2146].z + _686;
        float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
        float _2173 = _2172 * _2166;
        float _2174 = _2172 * _2167;
        float _2175 = _2172 * _2168;
        float _2176 = dot(vec3(_604, _605, _606), vec3(cbLight._m0[_2146].xyz));
        float _4097 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2180 = dot(vec3(_604, _605, _606), vec3(_2173, _2174, _2175));
        float _4108 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2184 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2173, _2174, _2175));
        float _4119 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2188 = _2165 * _2165;
        float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
        float _2201 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2202 = 1.0 - _2165;
        float _2212 = (0.5 / (((_1956 * ((_2179 * _2202) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _2202) + _2165) * _2179))) * _2179;
        float _4130 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2214 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
        float _2215 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2140 = (((_2201 * cbLight._m0[_2150].x) * _2214) * _2215) + _2076;
        _2142 = (((_2201 * cbLight._m0[_2150].y) * _2214) * _2215) + _2077;
        _2144 = (((_2201 * cbLight._m0[_2150].z) * _2214) * _2215) + _2078;
    }
    float _2250;
    float _2252;
    float _2254;
    if (_1882)
    {
        _2250 = _2140;
        _2252 = _2142;
        _2254 = _2144;
    }
    else
    {
        uint _2261 = _1791 + 3u;
        uint _2265 = _1791 + 11u;
        float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _607) * 0.949999988079071044921875);
        float _2280 = _2279 * _2279;
        float _2281 = cbLight._m0[_2261].x + _684;
        float _2282 = cbLight._m0[_2261].y + _685;
        float _2283 = cbLight._m0[_2261].z + _686;
        float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
        float _2288 = _2287 * _2281;
        float _2289 = _2287 * _2282;
        float _2290 = _2287 * _2283;
        float _2291 = dot(vec3(_604, _605, _606), vec3(cbLight._m0[_2261].xyz));
        float _4146 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2295 = dot(vec3(_604, _605, _606), vec3(_2288, _2289, _2290));
        float _4157 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2299 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2288, _2289, _2290));
        float _4168 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2303 = _2280 * _2280;
        float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
        float _2316 = (exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2317 = 1.0 - _2280;
        float _2327 = (0.5 / (((_1956 * ((_2294 * _2317) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_1956 * _2317) + _2280) * _2294))) * _2294;
        float _4179 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2329 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
        float _2330 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2250 = (((_2316 * cbLight._m0[_2265].x) * _2329) * _2330) + _2140;
        _2252 = (((_2316 * cbLight._m0[_2265].y) * _2329) * _2330) + _2142;
        _2254 = (((_2316 * cbLight._m0[_2265].z) * _2329) * _2330) + _2144;
    }
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_1789.y == 0u)
    {
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2405;
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2405;
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2405;
        uvec4 _2420 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2421 = _2420.x;
        uint _2432 = uint((float(_2420.y) * floor(float(uint(cbSceneParam._m0[85u].y * _693) / _2421))) + floor(float(uint(cbSceneParam._m0[85u].x * _692) / _2421)));
        float _2442 = (log2(_2408 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2443 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        uint _2446 = uint(isnan(14.0) ? _2443 : (isnan(_2443) ? 14.0 : min(_2443, 14.0)));
        uvec4 _2451 = texelFetch(g_lightClusterGridBuffer, int(((_2446 << 2u) + (_2432 << 6u)) >> 2u));
        uint _2452 = _2451.x;
        uint _2453 = _2420.z;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((((1u << ((_2453 >> 4u) & 15u)) + 4294967295u) & _2452) == 0u) || ((_2453 & 240u) == 0u))
        {
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
        }
        else
        {
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            uint _2704 = 0u;
            uint _2713;
            bool _2714;
            for (;;)
            {
                _2713 = texelFetch(g_lightClassification, int((((_2446 << 5u) + (_2432 << 9u)) + (_2704 << 2u)) >> 2u)).x;
                _2714 = _2713 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2714)
                {
                    frontier_phi_61_pred = _2698;
                    frontier_phi_61_pred_1 = _2703;
                    frontier_phi_61_pred_2 = _2702;
                    frontier_phi_61_pred_3 = _2701;
                    frontier_phi_61_pred_4 = _2700;
                    frontier_phi_61_pred_5 = _2699;
                }
                else
                {
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    uint _2828;
                    _2822 = _2698;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2713;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    for (;;)
                    {
                        uint _2832 = uint(findLSB(_2828)) + (_2704 << 5u);
                        uint _2829 = (_2828 + 4294967295u) & _2828;
                        uint _2834 = _2832 * 48u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2854 = (_2832 * 48u) + 4u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2873 = (_2832 * 48u) + 8u;
                        vec3 _2884 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x));
                        float _2888 = _2848.x - _2406;
                        float _2889 = _2848.y - _2407;
                        float _2890 = _2848.z - _2408;
                        float _2891 = dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890));
                        float _2894 = inversesqrt(_2891);
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2898 = dot(vec3(_711, _714, _717), vec3(_2895, _2896, _2897));
                        float _2903 = 1.0 - (_2891 * _2848.w);
                        float _4205 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2904 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _2905 = sqrt(_2891) * _2867.w;
                        float _2908 = 1.39999997615814208984375 / (_2905 + 1.39999997615814208984375);
                        float _2909 = _2908 * _2908;
                        float _2912 = ((1.0 - _2909) * _2898) + _2909;
                        float _2915 = _2905 * _2905;
                        float _2919 = ((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2904) / ((_2915 * 0.699999988079071044921875) + 1.0);
                        float _2923 = (-0.0) - _2406;
                        float _2924 = (-0.0) - _2407;
                        float _2925 = (-0.0) - _2408;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2940 = exp2(log2(1.0 / ((_2915 * 3.5) + 5.0)) * 0.25);
                        float _2941 = 1.0 - _771;
                        float _2948 = sqrt(1.0 - ((1.0 - (_2941 * _2941)) * (1.0 - (_2940 * _2940))));
                        float _2949 = _2948 * _2948;
                        float _2950 = _2949 * _2949;
                        float _2951 = _2930 + _2895;
                        float _2952 = _2931 + _2896;
                        float _2953 = _2932 + _2897;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2961 = dot(vec3(_711, _714, _717), vec3(_2930, _2931, _2932));
                        float _4221 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2965 = dot(vec3(_711, _714, _717), vec3(_2957 * _2951, _2957 * _2952, _2957 * _2953));
                        float _4232 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                        float _2972 = ((_2968 * _2968) * (_2950 + (-1.0))) + 1.0;
                        float _2973 = _2908 * _2949;
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2898) + _2974;
                        float _4243 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2979 = 1.0 - _2949;
                        float _2989 = (0.5 / (((_2978 * ((_2964 * _2979) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2978 * _2979) + _2949) * _2964))) * _2978;
                        float _4254 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _3000 = (((_2950 * 3.1415927410125732421875) * (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) / ((_2972 * _2972) * ((_2915 * 2.1991131305694580078125) + 3.141590118408203125))) * _2904;
                        _2757 = (_2919 * _2867.x) + _2825;
                        _2758 = (_2919 * _2867.y) + _2826;
                        _2759 = (_2919 * _2867.z) + _2827;
                        _2754 = (_3000 * _2884.x) + _2822;
                        _2755 = (_3000 * _2884.y) + _2823;
                        _2756 = (_3000 * _2884.z) + _2824;
                        if (_2829 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2829;
                        }
                    }
                    frontier_phi_61_pred = _2754;
                    frontier_phi_61_pred_1 = _2759;
                    frontier_phi_61_pred_2 = _2758;
                    frontier_phi_61_pred_3 = _2757;
                    frontier_phi_61_pred_4 = _2756;
                    frontier_phi_61_pred_5 = _2755;
                }
                _2554 = frontier_phi_61_pred;
                _2564 = frontier_phi_61_pred_1;
                _2562 = frontier_phi_61_pred_2;
                _2560 = frontier_phi_61_pred_3;
                _2558 = frontier_phi_61_pred_4;
                _2556 = frontier_phi_61_pred_5;
                uint _2705 = _2704 + 1u;
                if (_2705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2698 = _2554;
                    _2699 = _2556;
                    _2700 = _2558;
                    _2701 = _2560;
                    _2702 = _2562;
                    _2703 = _2564;
                    _2704 = _2705;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
        }
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.z;
        uint _2570 = (_2568 >> 8u) & 15u;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((4294967295u << _2570) & _2452) == 0u)
        {
            _2666 = _2553;
            _2668 = _2555;
            _2670 = _2557;
            _2672 = _2559;
            _2674 = _2561;
            _2676 = _2563;
        }
        else
        {
            float _2691 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
            float _2692 = _2691 * _2406;
            float _2693 = _2691 * _2407;
            float _2694 = _2691 * _2408;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2570 < ((_2568 >> 12u) & 15u))
            {
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2805 = _2553;
                float _2806 = _2555;
                float _2807 = _2557;
                float _2808 = _2559;
                float _2809 = _2561;
                float _2810 = _2563;
                uint _2811 = _2570;
                uint _2820;
                bool _2821;
                for (;;)
                {
                    _2820 = texelFetch(g_lightClassification, int((((_2446 << 5u) + (_2432 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                    _2821 = _2820 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2821)
                    {
                        frontier_phi_67_pred = _2808;
                        frontier_phi_67_pred_1 = _2809;
                        frontier_phi_67_pred_2 = _2810;
                        frontier_phi_67_pred_3 = _2807;
                        frontier_phi_67_pred_4 = _2806;
                        frontier_phi_67_pred_5 = _2805;
                    }
                    else
                    {
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3018 = _2805;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        uint _3024 = _2820;
                        uint _3025;
                        vec4 _3050;
                        float _3051;
                        vec4 _3066;
                        vec3 _3078;
                        vec4 _3093;
                        vec4 _3109;
                        float _3155;
                        bool _3156;
                        for (;;)
                        {
                            uint _3035 = ((_2811 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3024));
                            _3025 = (_3024 + 4294967295u) & _3024;
                            uint _3037 = _3035 * 40u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3051 = _3050.w;
                            uint _3053 = (_3035 * 40u) + 4u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_3035 * 40u) + 8u;
                            _3078 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x));
                            uint _3080 = (_3035 * 40u) + 16u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3096 = (_3035 * 40u) + 20u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3035 * 40u) + 24u;
                            vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3130 = (_3035 * 40u) + 28u;
                            vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            _3155 = fma(_2408, _3143.z, fma(_2407, _3143.y, _3143.x * _2406)) + _3143.w;
                            _3156 = !((fma(_2408, _3124.z, fma(_2407, _3124.y, _3124.x * _2406)) + _3124.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3156)
                            {
                                float _3183 = _3050.x - _2406;
                                float _3184 = _3050.y - _2407;
                                float _3185 = _3050.z - _2408;
                                float _3186 = dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185));
                                float _3189 = inversesqrt(_3186);
                                float _3190 = _3189 * _3183;
                                float _3191 = _3189 * _3184;
                                float _3192 = _3189 * _3185;
                                float _3196 = 1.0 - (_3186 / (_3051 * _3051));
                                float _4265 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3201 = sqrt(_3186) * _3066.w;
                                float _3203 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                                float _3204 = _3203 * _3203;
                                float _3207 = ((1.0 - _3204) * dot(vec3(_3190, _3191, _3192), vec3(_711, _714, _717))) + _3204;
                                float _3210 = _3201 * _3201;
                                float _3214 = (fma(_2408, _3093.z, fma(_2407, _3093.y, _3093.x * _2406)) + _3093.w) / _3155;
                                float _3215 = (fma(_2408, _3109.z, fma(_2407, _3109.y, _3109.x * _2406)) + _3109.w) / _3155;
                                float _3219 = 1.0 - dot(vec2(_3214, _3215), vec2(_3214, _3215));
                                float _4281 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3221 = _3220 * (((isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))) * _3197) / ((_3210 * 0.699999988079071044921875) + 1.0));
                                float _3233 = exp2(log2(1.0 / ((_3210 * 3.5) + 5.0)) * 0.25);
                                float _3234 = 1.0 - _771;
                                float _3241 = sqrt(1.0 - ((1.0 - (_3234 * _3234)) * (1.0 - (_3233 * _3233))));
                                float _3242 = _3241 * _3241;
                                float _3243 = _3242 * _3242;
                                float _3244 = _3190 - _2692;
                                float _3245 = _3191 - _2693;
                                float _3246 = _3192 - _2694;
                                float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                                float _3254 = dot(vec3(_711, _714, _717), vec3((-0.0) - _2692, (-0.0) - _2693, (-0.0) - _2694));
                                float _4292 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3257 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3258 = dot(vec3(_711, _714, _717), vec3(_3250 * _3244, _3250 * _3245, _3250 * _3246));
                                float _4303 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3265 = ((_3261 * _3261) * (_3243 + (-1.0))) + 1.0;
                                float _3266 = _3203 * _3242;
                                float _3267 = _3266 * _3266;
                                float _3273 = ((1.0 - _3267) * dot(vec3(_711, _714, _717), vec3(_3190, _3191, _3192))) + _3267;
                                float _4314 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3275 = 1.0 - _3242;
                                float _3285 = (0.5 / (((_3274 * ((_3257 * _3275) + _3242)) + 9.9999999392252902907785028219223e-09) + (((_3274 * _3275) + _3242) * _3257))) * _3274;
                                float _4325 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3295 = (_3220 * _3197) * (((_3243 * 3.1415927410125732421875) * (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) / ((_3265 * _3265) * ((_3210 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3295 * _3078.x;
                                frontier_phi_73_pred_1 = _3295 * _3078.y;
                                frontier_phi_73_pred_2 = _3221 * _3066.z;
                                frontier_phi_73_pred_3 = _3221 * _3066.y;
                                frontier_phi_73_pred_4 = _3221 * _3066.x;
                                frontier_phi_73_pred_5 = _3295 * _3078.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3299 = frontier_phi_73_pred;
                            _3300 = frontier_phi_73_pred_1;
                            _3304 = frontier_phi_73_pred_2;
                            _3303 = frontier_phi_73_pred_3;
                            _3302 = frontier_phi_73_pred_4;
                            _3301 = frontier_phi_73_pred_5;
                            _3008 = _3302 + _3021;
                            _3009 = _3303 + _3022;
                            _3010 = _3304 + _3023;
                            _3005 = _3299 + _3018;
                            _3006 = _3300 + _3019;
                            _3007 = _3301 + _3020;
                            if (_3025 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3025;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3008;
                        frontier_phi_67_pred_1 = _3009;
                        frontier_phi_67_pred_2 = _3010;
                        frontier_phi_67_pred_3 = _3007;
                        frontier_phi_67_pred_4 = _3006;
                        frontier_phi_67_pred_5 = _3005;
                    }
                    _2673 = frontier_phi_67_pred;
                    _2675 = frontier_phi_67_pred_1;
                    _2677 = frontier_phi_67_pred_2;
                    _2671 = frontier_phi_67_pred_3;
                    _2669 = frontier_phi_67_pred_4;
                    _2667 = frontier_phi_67_pred_5;
                    uint _2812 = _2811 + 1u;
                    if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2805 = _2667;
                        _2806 = _2669;
                        _2807 = _2671;
                        _2808 = _2673;
                        _2809 = _2675;
                        _2810 = _2677;
                        _2811 = _2812;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2675;
                frontier_phi_55_56_ladder_1 = _2677;
                frontier_phi_55_56_ladder_2 = _2673;
                frontier_phi_55_56_ladder_3 = _2671;
                frontier_phi_55_56_ladder_4 = _2669;
                frontier_phi_55_56_ladder_5 = _2667;
            }
            else
            {
                frontier_phi_55_56_ladder = _2561;
                frontier_phi_55_56_ladder_1 = _2563;
                frontier_phi_55_56_ladder_2 = _2559;
                frontier_phi_55_56_ladder_3 = _2557;
                frontier_phi_55_56_ladder_4 = _2555;
                frontier_phi_55_56_ladder_5 = _2553;
            }
            _2666 = frontier_phi_55_56_ladder_5;
            _2668 = frontier_phi_55_56_ladder_4;
            _2670 = frontier_phi_55_56_ladder_3;
            _2672 = frontier_phi_55_56_ladder_2;
            _2674 = frontier_phi_55_56_ladder;
            _2676 = frontier_phi_55_56_ladder_1;
        }
        float _2681 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2465 = (_2681 * _2672) + _1920;
        _2467 = (_2681 * _2674) + _1922;
        _2469 = (_2681 * _2676) + _1924;
        _2471 = ((_2666 * 0.039999999105930328369140625) * _2681) + _2250;
        _2473 = ((_2668 * 0.039999999105930328369140625) * _2681) + _2252;
        _2475 = ((_2670 * 0.039999999105930328369140625) * _2681) + _2254;
    }
    else
    {
        _2465 = _1920;
        _2467 = _1922;
        _2469 = _1924;
        _2471 = _2250;
        _2473 = _2252;
        _2475 = _2254;
    }
    float _4341 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4352 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4363 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    uint _2495 = _228 + 6u;
    float _2503 = _692 / cbSceneParam._m0[86u].x;
    float _2504 = _693 / cbSceneParam._m0[86u].y;
    vec4 _2518 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, (log2((isnan(cbSceneParam._m0[77u].w) ? _625 : (isnan(_625) ? cbSceneParam._m0[77u].w : min(_625, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2520 = _2518.x;
    float _2521 = _2518.y;
    float _2522 = _2518.z;
    float _2523 = _2518.w;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_625 > cbSceneParam._m0[78u].w)
    {
        float _2578 = isnan(_625) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _625 : min(cbSceneParam._m0[80u].w, _625));
        float _2579 = _2578 / _625;
        float _2590 = _2579 * _677;
        float _2591 = _678 * _2579;
        float _2592 = (-0.0) - _2591;
        float _2594 = _2579 * _679;
        float _2596 = (cbSceneParam._m0[77u].w * _2592) / _2578;
        float _2597 = _2596 + cbSceneParam._m0[79u].w;
        float _2598 = cbSceneParam._m0[79u].w - _2591;
        float _2604 = sqrt(((_2590 * _2590) + (_2591 * _2591)) + (_2594 * _2594));
        float _2607 = (1.0 - (cbSceneParam._m0[77u].w / _2578)) * _2604;
        float _2612 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2614 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2767;
        if (abs((_2592 - _2596) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2767 = ((((_2597 > 0.0) ? exp2(_2612 * _2597) : (2.0 - exp2(_2614 * _2597))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2607;
        }
        else
        {
            float _2727 = 1.0 / cbSceneParam._m0[80u].x;
            float _2728 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : max(_2597, _2598));
            float _2729 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : min(_2597, _2598));
            float _2738 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : min(_2728, 0.0));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            _2767 = ((abs(_2604 / _2592) * cbSceneParam._m0[80u].y) * ((((_2738 - _2739) * 2.0) - ((exp2(_2612 * (isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0)))) - exp2(_2612 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))))) * _2727)) - ((exp2(_2614 * _2738) - exp2(_2614 * _2739)) * _2727))) + (_2607 * cbSceneParam._m0[80u].z);
        }
        vec4 _2769 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, 1.0), 0.0);
        float _2778 = exp2((_2767 * (-1.44269502162933349609375)) * (1.0 - _2769.w));
        float _2779 = log2(_2778);
        float _2795 = log2(_2523);
        _2616 = (exp2(_2795 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].x)) * _2769.x) / cbSceneParam._m0[78u].x)) + _2520;
        _2618 = (exp2(_2795 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].y)) * _2769.y) / cbSceneParam._m0[78u].y)) + _2521;
        _2620 = (exp2(_2795 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].z)) * _2769.z) / cbSceneParam._m0[78u].z)) + _2522;
        _2622 = _2778 * _2523;
    }
    else
    {
        _2616 = _2520;
        _2618 = _2521;
        _2620 = _2522;
        _2622 = _2523;
    }
    float _2634 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2635 = _2634 == 3.0;
    float _2636 = log2(_2622);
    float _2643 = exp2(_2636 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2465 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _755))) + ((_2471 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1560)) * cbPerFrame._m0[3u].x));
    float _2644 = exp2(_2636 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2467 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _755))) + ((_2473 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1560)) * cbPerFrame._m0[3u].x));
    float _2645 = exp2(_2636 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2469 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _755))) + ((_2475 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1560)) * cbPerFrame._m0[3u].x));
    float _2654 = (_2634 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2654 * (_2635 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2616)));
    SV_Target.y = _2654 * (_2635 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2618)));
    SV_Target.z = _2654 * (_2635 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2620)));
    SV_Target.w = cbInstanceData._m0[_2495].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2495].w;
}


