#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1515;
float _3896;
float _3897;
float _3898;
float _3899;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].z) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3908 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _452 = (_445 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _453 = (_445 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _454 = (_445 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[24u].z) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3919 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _525 = (_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452;
    float _526 = (_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453;
    float _527 = (_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454;
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _564 = _562.x;
    float _574 = dot(vec4(_564, _562.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _586 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _373.z) * 2.0) - ((((_564 - _574) * cbMtdParam._m0[24u].z) + _574) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3930 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _600 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_587 * ((_545.x * cbMtdParam._m0[14u].x) - _525)) + _525);
    float _603 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_587 * ((_545.y * cbMtdParam._m0[14u].y) - _526)) + _526);
    float _606 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_587 * ((_545.z * cbMtdParam._m0[14u].z) - _527)) + _527);
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _643 = _641.x;
    float _644 = _641.y;
    float _645 = _641.z;
    float _652 = ((_624.x - _643) * _445) + _643;
    float _653 = ((_624.y - _644) * _445) + _644;
    float _654 = ((_624.z - _645) * _445) + _645;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _677 = ((_666.x - _652) * _518) + _652;
    float _678 = ((_666.y - _653) * _518) + _653;
    float _679 = ((_666.z - _654) * _518) + _654;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _704 = ((_691.z - _679) * _587) + _679;
    float _707 = ((((_691.x - _677) * _587) + _677) * 2.0) + (-1.0);
    float _709 = ((((_691.y - _678) * _587) + _678) * 2.0) + (-1.0);
    float _710 = dot(vec2(_707, _709), vec2(_707, _709));
    float _3941 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _715 = sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))));
    vec4 _729 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _754 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _756 = _754.x;
    float _757 = 1.0 - _756;
    float _763 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _766 = ((isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : min(_763, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _775 = (_766 - ((((((_756 - _757) * cbMtdParam._m0[24u].w) + _757) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _766))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3962 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _776 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _783 = (_776 * (cbMtdParam._m0[17u].x - _600)) + _600;
    float _784 = (_776 * (cbMtdParam._m0[17u].y - _603)) + _603;
    float _785 = (_776 * (cbMtdParam._m0[17u].z - _606)) + _606;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _799 = _797.x;
    float _800 = 1.0 - _799;
    float _827 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_799 - _800) * cbMtdParam._m0[24u].y) + _800) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3973 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _828 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _836 = ((((cbMtdParam._m0[10u].x - _783) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _828) + _783;
    float _837 = ((((cbMtdParam._m0[10u].y - _784) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _828) + _784;
    float _838 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _785)) * _828) + _785;
    float _842 = (cbMtdParam._m0[19u].w * (_729.z - _704)) + _704;
    vec4 _856 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _863 = (_856.x * 2.0) + (-1.0);
    float _864 = (_856.y * 2.0) + (-1.0);
    float _865 = dot(vec2(_863, _864), vec2(_863, _864));
    float _3984 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _873 = (_776 * (_856.z - _842)) + _842;
    float _876 = ((cbMtdParam._m0[23u].y - _873) * _828) + _873;
    vec4 _895 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _901 = (_895.x * 2.0) + (-1.0);
    float _902 = (_895.y * 2.0) + (-1.0);
    float _903 = dot(vec2(_901, _902), vec2(_901, _902));
    float _3995 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _911 = (((_729.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _707;
    float _912 = (((_729.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _709;
    float _924 = (((_863 - _911) + (cbMtdParam._m0[21u].x * _911)) * _776) + _911;
    float _925 = (((_864 - _912) + (cbMtdParam._m0[21u].x * _912)) * _776) + _912;
    float _926 = (_776 * (sqrt(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) - _715)) + _715;
    float _937 = (((_901 - _924) + (_924 * cbMtdParam._m0[22u].z)) * _828) + _924;
    float _938 = (((_902 - _925) + (_925 * cbMtdParam._m0[22u].z)) * _828) + _925;
    float _939 = ((sqrt(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) - _926) * _828) + _926;
    float _941 = cbMtdParam._m0[22u].x + _729.w;
    float _944 = fma(_939, _252 * NORMAL.x, fma(_938, _259 * TANGENT.x, (_245 * _237) * _937));
    float _947 = fma(_939, _252 * NORMAL.y, fma(_938, _259 * TANGENT.y, (_245 * _238) * _937));
    float _950 = fma(_939, _252 * NORMAL.z, fma(_938, _259 * TANGENT.z, (_245 * _239) * _937));
    float _954 = inversesqrt(dot(vec3(_944, _947, _950), vec3(_944, _947, _950)));
    float _955 = _954 * _944;
    float _956 = _954 * _947;
    float _957 = _954 * _950;
    float _4006 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _958 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4028 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4039 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4050 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _976 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1026 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1016);
    float _1027 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1016);
    float _1028 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1016);
    float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
    float _1033 = _1026 * _1032;
    float _1034 = _1027 * _1032;
    float _1035 = _1028 * _1032;
    vec4 _1040 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1042 = _1040.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1196 = sqrt(((_1026 * _1026) + (_1027 * _1027)) + (_1028 * _1028));
        float _1202 = (cbMatDynParam._m0[5u].x * _1196) + cbMatDynParam._m0[5u].y;
        float _4061 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1207 = (cbMatDynParam._m0[5u].z * _1196) + cbMatDynParam._m0[5u].w;
        float _4072 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) - _1203)) + _1203) < ((_1042 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1053 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1054 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1072 = fma(_957, cbSceneParam._m0[5u].z, fma(_956, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _955));
    float _1075 = fma(_957, cbSceneParam._m0[6u].z, fma(_956, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _955));
    float _1078 = fma(_957, cbSceneParam._m0[7u].z, fma(_956, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _955));
    uint _1091 = _265 + 9u;
    uint _1092 = _1091 + uint(cbMatDynParam._m0[0u].w);
    float _1098 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1092].x;
    float _1099 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_1092].y;
    float _1100 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * cbInstanceData._m0[_1092].z;
    float _4083 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    vec4 _1112 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1053, cbSceneParam._m0[86u].y * _1054));
    float _1116 = ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * TEXCOORD_5.w) * _1112.x;
    float _1117 = dot(vec3(_955, _956, _957), vec3(_1033, _1034, _1035));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _955) - _1033;
    float _1125 = (_1120 * _956) - _1034;
    float _1126 = (_1120 * _957) - _1035;
    float _1130 = abs(dot(vec3(_1033, _1034, _1035), vec3(_955, _956, _957)));
    float _4116 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_958);
    float _1145 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1185 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1514;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1239 = fma(_1185, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177));
        float _1243 = fma(_1185, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177));
        float _1247 = fma(_1185, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177));
        float _1272 = _1177 + _955;
        float _1273 = _1181 + _956;
        float _1274 = _1185 + _957;
        float _1284 = fma(_1274, cbModelParam._m0[26u].z, fma(_1273, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1272)) - _1239;
        float _1285 = fma(_1274, cbModelParam._m0[27u].z, fma(_1273, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1272)) - _1243;
        float _1286 = fma(_1274, cbModelParam._m0[28u].z, fma(_1273, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1272)) - _1247;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1303 = ((_1290 * _1284) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1239 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1290 * _1285) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1243 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1290 * _1286) / cbModelParam._m0[34u].z) + ((((((_1247 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        float _1342 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1308.x + (-0.5));
        float _1344 = _1342 * (_1308.y + (-0.5));
        float _1345 = _1342 * (_1308.z + (-0.5));
        float _1352 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1315.x + (-0.5));
        float _1354 = _1352 * (_1315.y + (-0.5));
        float _1355 = _1352 * (_1315.z + (-0.5));
        float _1362 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1322.x + (-0.5));
        float _1364 = _1362 * (_1322.y + (-0.5));
        float _1365 = _1362 * (_1322.z + (-0.5));
        float _1372 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1329.x + (-0.5));
        float _1374 = _1372 * (_1329.y + (-0.5));
        float _1375 = _1372 * (_1329.z + (-0.5));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = _1343 * 0.5;
        float _1380 = _1353 * 0.5;
        float _1381 = _1363 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1396 = (dot(vec3(_955, _956, _957), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1406 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4164 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1408 + 1.0))) + _1413) * _1376;
        float _1423 = _1344 * 0.5;
        float _1424 = _1354 * 0.5;
        float _1425 = _1364 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_955, _956, _957), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4197 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1450 + 1.0))) + _1455) * _1377;
        float _1465 = _1345 * 0.5;
        float _1466 = _1355 * 0.5;
        float _1467 = _1365 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_955, _956, _957), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4230 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1492 + 1.0))) + _1497) * _1378;
        _1514 = _1345;
        _1516 = _1344;
        _1517 = _1343;
        _1518 = _1355;
        _1519 = _1354;
        _1520 = _1353;
        _1521 = _1365;
        _1522 = _1364;
        _1523 = _1363;
        _1524 = _1378;
        _1525 = _1377;
        _1526 = _1376;
        _1527 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1528 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1529 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
    }
    else
    {
        _1514 = _1515;
        _1516 = _1515;
        _1517 = _1515;
        _1518 = _1515;
        _1519 = _1515;
        _1520 = _1515;
        _1521 = _1515;
        _1522 = _1515;
        _1523 = _1515;
        _1524 = _1515;
        _1525 = _1515;
        _1526 = _1515;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1555 = fma(_1185, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1177));
        float _1559 = fma(_1185, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1177));
        float _1563 = fma(_1185, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1177));
        float _1586 = _1177 + _955;
        float _1587 = _1181 + _956;
        float _1588 = _1185 + _957;
        float _1598 = fma(_1588, cbModelParam._m0[30u].z, fma(_1587, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1586)) - _1555;
        float _1599 = fma(_1588, cbModelParam._m0[31u].z, fma(_1587, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1586)) - _1559;
        float _1600 = fma(_1588, cbModelParam._m0[32u].z, fma(_1587, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1586)) - _1563;
        float _1604 = inversesqrt(dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600)));
        float _1617 = ((_1604 * _1598) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1555 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1618 = ((_1604 * _1599) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1559 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1619 = ((_1604 * _1600) / cbModelParam._m0[35u].z) + ((((((_1563 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        float _1654 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1621.x + (-0.5));
        float _1656 = _1654 * (_1621.y + (-0.5));
        float _1657 = _1654 * (_1621.z + (-0.5));
        float _1664 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1628.x + (-0.5));
        float _1666 = _1664 * (_1628.y + (-0.5));
        float _1667 = _1664 * (_1628.z + (-0.5));
        float _1674 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1635.x + (-0.5));
        float _1676 = _1674 * (_1635.y + (-0.5));
        float _1677 = _1674 * (_1635.z + (-0.5));
        float _1684 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1642.x + (-0.5));
        float _1686 = _1684 * (_1642.y + (-0.5));
        float _1687 = _1684 * (_1642.z + (-0.5));
        float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1689 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = _1655 * 0.5;
        float _1692 = _1665 * 0.5;
        float _1693 = _1675 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_955, _956, _957), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1688 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4293 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1718 + 1.0))) + _1723) * _1688;
        float _1733 = _1656 * 0.5;
        float _1734 = _1666 * 0.5;
        float _1735 = _1676 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_955, _956, _957), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1689 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4326 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1760 + 1.0))) + _1765) * _1689;
        float _1775 = _1657 * 0.5;
        float _1776 = _1667 * 0.5;
        float _1777 = _1677 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_955, _956, _957), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4359 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1802 + 1.0))) + _1807) * _1690;
        _1824 = _1657;
        _1825 = _1656;
        _1826 = _1655;
        _1827 = _1667;
        _1828 = _1666;
        _1829 = _1665;
        _1830 = _1677;
        _1831 = _1676;
        _1832 = _1675;
        _1833 = _1690;
        _1834 = _1689;
        _1835 = _1688;
        _1836 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1837 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
    }
    else
    {
        _1824 = _1515;
        _1825 = _1515;
        _1826 = _1515;
        _1827 = _1515;
        _1828 = _1515;
        _1829 = _1515;
        _1830 = _1515;
        _1831 = _1515;
        _1832 = _1515;
        _1833 = _1515;
        _1834 = _1515;
        _1835 = _1515;
        _1836 = 0.0;
        _1837 = 0.0;
        _1838 = 0.0;
    }
    float _1848 = (cbModelParam._m0[1u].x * (_1836 - _1527)) + _1527;
    float _1849 = (cbModelParam._m0[1u].x * (_1837 - _1528)) + _1528;
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1529)) + _1529;
    float _1871 = fma(_1850, cbSceneParam._m0[89u].z, fma(_1849, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1850, cbSceneParam._m0[90u].z, fma(_1849, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1850, cbSceneParam._m0[91u].z, fma(_1849, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1848));
    float _1892 = _1124 * 0.5;
    float _1893 = _1125 * 0.5;
    float _1894 = _1126 * 0.5;
    float _1895 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1898 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1825, _1828, _1831, _1834));
    float _1901 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1824, _1827, _1830, _1833));
    float _1935;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1908 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1514, _1518, _1521, _1524));
        float _1912 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1516, _1519, _1522, _1525));
        float _1916 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1517, _1520, _1523, _1526));
        float _1923 = dot(vec4(cbModelParam._m0[39u]), vec4(_1892, _1893, _1894, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1923) ? 0.0 : (isnan(0.0) ? _1923 : max(0.0, _1923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1946;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1937 = dot(vec4(cbModelParam._m0[40u]), vec4(_1892, _1893, _1894, 1.0));
        _1946 = dot(vec3(isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1946 = 1.0;
    }
    float _1950 = (_1946 * cbModelParam._m0[1u].x) + (_1935 * (1.0 - cbModelParam._m0[1u].x));
    float _1960 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1960 : min(cbModelParam._m0[25u].z, _1960));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2008 = fma(_1185, cbModelParam._m0[13u].z, fma(_1181, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177)) + cbModelParam._m0[13u].w;
        float _2012 = fma(_1185, cbModelParam._m0[14u].z, fma(_1181, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177)) + cbModelParam._m0[14u].w;
        float _2016 = fma(_1185, cbModelParam._m0[15u].z, fma(_1181, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177)) + cbModelParam._m0[15u].w;
        float _2019 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _2022 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _2025 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2053;
        if (_2019 > 0.0)
        {
            _2053 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2053 = frontier_phi_17_15_ladder;
        }
        float _2275;
        if (_2022 > 0.0)
        {
            _2275 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2275 = frontier_phi_26_22_ladder;
        }
        float _2521;
        if (_2025 > 0.0)
        {
            _2521 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2521 = frontier_phi_38_33_ladder;
        }
        float _2523 = isnan(_2275) ? _2053 : (isnan(_2053) ? _2275 : min(_2053, _2275));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _2019) + _2008;
        float _2529 = (_2524 * _2022) + _2012;
        float _2530 = (_2524 * _2025) + _2016;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2531;
        float _2535 = _2531 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 > _2535) || ((_2529 < _2533) || ((_2528 < _2533) || (_2528 > _2535))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2654 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2530, cbModelParam._m0[9u].z, fma(_2529, cbModelParam._m0[9u].y, _2528 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2530, cbModelParam._m0[10u].z, fma(_2529, cbModelParam._m0[10u].y, _2528 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2530, cbModelParam._m0[11u].z, fma(_2529, cbModelParam._m0[11u].y, _2528 * cbModelParam._m0[11u].x))), _1961);
            frontier_phi_16_38_ladder = _2654.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2654.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2654.x * cbModelParam._m0[1u].y;
        }
        _2041 = frontier_phi_16_38_ladder_2;
        _2043 = frontier_phi_16_38_ladder_1;
        _2045 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2029 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1961);
        _2041 = _2029.x * cbModelParam._m0[1u].y;
        _2043 = _2029.y * cbModelParam._m0[1u].y;
        _2045 = _2029.z * cbModelParam._m0[1u].y;
    }
    float _2049 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2049 : min(cbModelParam._m0[25u].w, _2049));
    float _2140;
    float _2142;
    float _2144;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2104 = fma(_1185, cbModelParam._m0[21u].z, fma(_1181, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177)) + cbModelParam._m0[21u].w;
        float _2108 = fma(_1185, cbModelParam._m0[22u].z, fma(_1181, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177)) + cbModelParam._m0[22u].w;
        float _2112 = fma(_1185, cbModelParam._m0[23u].z, fma(_1181, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177)) + cbModelParam._m0[23u].w;
        float _2115 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2118 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2121 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2280;
        if (_2115 > 0.0)
        {
            _2280 = abs((1.0 - _2104) / _2115);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2104 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2280 = frontier_phi_28_24_ladder;
        }
        float _2548;
        if (_2118 > 0.0)
        {
            _2548 = abs((1.0 - _2108) / _2118);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2108 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2548 = frontier_phi_40_35_ladder;
        }
        float _2753;
        if (_2121 > 0.0)
        {
            _2753 = abs((1.0 - _2112) / _2121);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2112 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2753 = frontier_phi_49_46_ladder;
        }
        float _2755 = isnan(_2548) ? _2280 : (isnan(_2280) ? _2548 : min(_2280, _2548));
        float _2756 = isnan(_2753) ? _2755 : (isnan(_2755) ? _2753 : min(_2755, _2753));
        float _2760 = (_2756 * _2115) + _2104;
        float _2761 = (_2756 * _2118) + _2108;
        float _2762 = (_2756 * _2121) + _2112;
        float _2763 = _2756 * 9.9999997473787516355514526367188e-05;
        float _2764 = (-1.0) - _2763;
        float _2766 = _2763 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2762 > _2766) || ((_2762 < _2764) || ((_2761 > _2766) || ((_2761 < _2764) || ((_2760 < _2764) || (_2760 > _2766))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2762, cbModelParam._m0[17u].z, fma(_2761, cbModelParam._m0[17u].y, _2760 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2762, cbModelParam._m0[18u].z, fma(_2761, cbModelParam._m0[18u].y, _2760 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2762, cbModelParam._m0[19u].z, fma(_2761, cbModelParam._m0[19u].y, _2760 * cbModelParam._m0[19u].x))), _2050);
            frontier_phi_25_49_ladder = _2961.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2961.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2961.x * cbModelParam._m0[1u].z;
        }
        _2140 = frontier_phi_25_49_ladder_2;
        _2142 = frontier_phi_25_49_ladder_1;
        _2144 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2124 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2050);
        _2140 = _2124.x * cbModelParam._m0[1u].z;
        _2142 = _2124.y * cbModelParam._m0[1u].z;
        _2144 = _2124.z * cbModelParam._m0[1u].z;
    }
    float _2156 = ((((1.0 - _1145) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1145 * _1132)) * _1116;
    float _2157 = _2156 * ((cbModelParam._m0[1u].w * (_2140 - _2041)) + _2041);
    float _2158 = _2156 * ((cbModelParam._m0[1u].w * (_2142 - _2043)) + _2043);
    float _2159 = _2156 * ((cbModelParam._m0[1u].w * (_2144 - _2045)) + _2045);
    float _2162 = fma(_2159, cbSceneParam._m0[89u].z, fma(_2158, cbSceneParam._m0[89u].y, _2157 * cbSceneParam._m0[89u].x));
    float _2165 = fma(_2159, cbSceneParam._m0[90u].z, fma(_2158, cbSceneParam._m0[90u].y, _2157 * cbSceneParam._m0[90u].x));
    float _2168 = fma(_2159, cbSceneParam._m0[91u].z, fma(_2158, cbSceneParam._m0[91u].y, _2157 * cbSceneParam._m0[91u].x));
    vec4 _2176 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1053, _1054));
    float _2178 = _2176.w;
    float _2190 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2178);
    float _2191 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2178);
    float _2192 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2178);
    uvec4 _2196 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2198 = _2196.x * 14u;
    uint _2199 = _2198 + 13u;
    float _2206 = _1116 + (-1.0);
    float _2211 = (cbLight._m0[_2199].x * _2206) + 1.0;
    float _2212 = (cbLight._m0[_2199].y * _2206) + 1.0;
    float _2213 = (cbLight._m0[_2199].z * _2206) + 1.0;
    float _2214 = (cbLight._m0[_2199].w * _2206) + 1.0;
    uint _2215 = _2198 + 5u;
    float _2221 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2225 = _2198 + 4u;
    float _2234 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
    uint _2238 = _2198 | 1u;
    float _2249 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_955, _956, _957));
    float _2252 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_955, _956, _957));
    float _4495 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _4506 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2257 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2259 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2266 = ((cbLight._m0[_2215].x * _2221) * _2259) + (((cbLight._m0[_2225].x * _2190) * _2234) * _2257);
    float _2267 = ((_2221 * cbLight._m0[_2215].y) * _2259) + (((cbLight._m0[_2225].y * _2191) * _2234) * _2257);
    float _2268 = ((_2221 * cbLight._m0[_2215].z) * _2259) + (((cbLight._m0[_2225].z * _2192) * _2234) * _2257);
    uvec4 _2272 = floatBitsToUint(cbLight._m0[_2198 + 12u]);
    bool _2274 = _2272.x == 0u;
    float _2285;
    float _2287;
    float _2289;
    if (_2274)
    {
        _2285 = _2266;
        _2287 = _2267;
        _2289 = _2268;
    }
    else
    {
        uint _2293 = _2198 + 6u;
        float _2309 = (dot(vec3(cbLight._m0[_2198 + 2u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2310 = _2309 * _2309;
        float _4517 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2311 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2312 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2285 = (((cbLight._m0[_2293].x * 0.3183098733425140380859375) * _2311) * _2312) + _2266;
        _2287 = (((cbLight._m0[_2293].y * 0.3183098733425140380859375) * _2311) * _2312) + _2267;
        _2289 = (((cbLight._m0[_2293].z * 0.3183098733425140380859375) * _2311) * _2312) + _2268;
    }
    bool _2292 = _2272.y == 0u;
    float _2330;
    float _2332;
    float _2334;
    if (_2292)
    {
        _2330 = _2285;
        _2332 = _2287;
        _2334 = _2289;
    }
    else
    {
        uint _2492 = _2198 + 7u;
        float _2508 = (dot(vec3(cbLight._m0[_2198 + 3u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4533 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2511 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2330 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2285;
        _2332 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2287;
        _2334 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2289;
    }
    uint _2337 = _2198 + 8u;
    float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _958) * 0.949999988079071044921875);
    float _2351 = _2350 * _2350;
    float _2352 = cbLight._m0[_2198].x + _1033;
    float _2353 = cbLight._m0[_2198].y + _1034;
    float _2354 = cbLight._m0[_2198].z + _1035;
    float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
    float _2359 = _2358 * _2352;
    float _2360 = _2358 * _2353;
    float _2361 = _2358 * _2354;
    float _2362 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2198].xyz));
    float _4549 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _4560 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2366 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2367 = dot(vec3(_955, _956, _957), vec3(_2359, _2360, _2361));
    float _4571 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2371 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2359, _2360, _2361));
    float _4582 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2375 = _2351 * _2351;
    float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
    float _2390 = (exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2391 = 1.0 - _2351;
    float _2402 = (0.5 / (((_2366 * ((_2365 * _2391) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2391) + _2351) * _2365))) * _2365;
    float _4593 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2404 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
    uint _2418 = _2198 + 9u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _958) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2238].x + _1033;
    float _2432 = cbLight._m0[_2238].y + _1034;
    float _2433 = cbLight._m0[_2238].z + _1035;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2238].xyz));
    float _4604 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2445 = dot(vec3(_955, _956, _957), vec3(_2438, _2439, _2440));
    float _4615 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2449 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2438, _2439, _2440));
    float _4626 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2453 = _2430 * _2430;
    float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
    float _2466 = (exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2467 = 1.0 - _2430;
    float _2477 = (0.5 / (((_2366 * ((_2444 * _2467) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2467) + _2430) * _2444))) * _2444;
    float _4637 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
    float _2489 = (((_2466 * cbLight._m0[_2418].x) * _2479) * _2221) + ((((cbLight._m0[_2337].x * _2190) * _2390) * _2404) * _2234);
    float _2490 = (((_2466 * cbLight._m0[_2418].y) * _2479) * _2221) + ((((cbLight._m0[_2337].y * _2191) * _2390) * _2404) * _2234);
    float _2491 = (((_2466 * cbLight._m0[_2418].z) * _2479) * _2221) + ((((cbLight._m0[_2337].z * _2192) * _2390) * _2404) * _2234);
    float _2553;
    float _2555;
    float _2557;
    if (_2274)
    {
        _2553 = _2489;
        _2555 = _2490;
        _2557 = _2491;
    }
    else
    {
        uint _2559 = _2198 + 2u;
        uint _2563 = _2198 + 10u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _958) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _1033;
        float _2580 = cbLight._m0[_2559].y + _1034;
        float _2581 = cbLight._m0[_2559].z + _1035;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2559].xyz));
        float _4648 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2593 = dot(vec3(_955, _956, _957), vec3(_2586, _2587, _2588));
        float _4659 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4670 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2614 = (exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2615 = 1.0 - _2578;
        float _2625 = (0.5 / (((_2366 * ((_2592 * _2615) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2615) + _2578) * _2592))) * _2592;
        float _4681 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2627 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2628 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2553 = (((_2614 * cbLight._m0[_2563].x) * _2627) * _2628) + _2489;
        _2555 = (((_2614 * cbLight._m0[_2563].y) * _2627) * _2628) + _2490;
        _2557 = (((_2614 * cbLight._m0[_2563].z) * _2627) * _2628) + _2491;
    }
    float _2663;
    float _2665;
    float _2667;
    if (_2292)
    {
        _2663 = _2553;
        _2665 = _2555;
        _2667 = _2557;
    }
    else
    {
        uint _2674 = _2198 + 3u;
        uint _2678 = _2198 + 11u;
        float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2674].w)) * _958) * 0.949999988079071044921875);
        float _2693 = _2692 * _2692;
        float _2694 = cbLight._m0[_2674].x + _1033;
        float _2695 = cbLight._m0[_2674].y + _1034;
        float _2696 = cbLight._m0[_2674].z + _1035;
        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
        float _2701 = _2700 * _2694;
        float _2702 = _2700 * _2695;
        float _2703 = _2700 * _2696;
        float _2704 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2674].xyz));
        float _4697 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2708 = dot(vec3(_955, _956, _957), vec3(_2701, _2702, _2703));
        float _4708 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2712 = dot(vec3(cbLight._m0[_2674].xyz), vec3(_2701, _2702, _2703));
        float _4719 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2716 = _2693 * _2693;
        float _2720 = ((_2711 * _2711) * (_2716 + (-1.0))) + 1.0;
        float _2729 = (exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2730 = 1.0 - _2693;
        float _2740 = (0.5 / (((_2366 * ((_2707 * _2730) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2730) + _2693) * _2707))) * _2707;
        float _4730 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2742 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2716 / ((_2720 * _2720) * 3.141590118408203125));
        float _2743 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2663 = (((_2729 * cbLight._m0[_2678].x) * _2742) * _2743) + _2553;
        _2665 = (((_2729 * cbLight._m0[_2678].y) * _2742) * _2743) + _2555;
        _2667 = (((_2729 * cbLight._m0[_2678].z) * _2742) * _2743) + _2557;
    }
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    if (_2196.y == 0u)
    {
        float _2818 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2819 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2818;
        float _2820 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2818;
        float _2821 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2818;
        uvec4 _2833 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2834 = _2833.x;
        uint _2845 = uint((float(_2833.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1054) / _2834))) + floor(float(uint(cbSceneParam._m0[85u].x * _1053) / _2834)));
        float _2855 = (log2(_2821 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2856 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        uint _2859 = uint(isnan(14.0) ? _2856 : (isnan(_2856) ? 14.0 : min(_2856, 14.0)));
        uvec4 _2864 = texelFetch(g_lightClusterGridBuffer, int(((_2859 << 2u) + (_2845 << 6u)) >> 2u));
        uint _2865 = _2864.x;
        uint _2866 = _2833.z;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((((1u << ((_2866 >> 4u) & 15u)) + 4294967295u) & _2865) == 0u) || ((_2866 & 240u) == 0u))
        {
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
        }
        else
        {
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            uint _3125 = 0u;
            uint _3134;
            bool _3135;
            for (;;)
            {
                _3134 = texelFetch(g_lightClassification, int((((_2859 << 5u) + (_2845 << 9u)) + (_3125 << 2u)) >> 2u)).x;
                _3135 = _3134 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3135)
                {
                    frontier_phi_66_pred = _3119;
                    frontier_phi_66_pred_1 = _3124;
                    frontier_phi_66_pred_2 = _3123;
                    frontier_phi_66_pred_3 = _3122;
                    frontier_phi_66_pred_4 = _3121;
                    frontier_phi_66_pred_5 = _3120;
                }
                else
                {
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    uint _3270;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3134;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    for (;;)
                    {
                        uint _3274 = uint(findLSB(_3270)) + (_3125 << 5u);
                        uint _3271 = (_3270 + 4294967295u) & _3270;
                        uint _3276 = _3274 * 48u;
                        vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 3u)).x));
                        uint _3296 = (_3274 * 48u) + 4u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 3u)).x));
                        uint _3315 = (_3274 * 48u) + 8u;
                        vec3 _3326 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x));
                        float _3330 = _3290.x - _2819;
                        float _3331 = _3290.y - _2820;
                        float _3332 = _3290.z - _2821;
                        float _3333 = dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332));
                        float _3336 = inversesqrt(_3333);
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3340 = dot(vec3(_1072, _1075, _1078), vec3(_3337, _3338, _3339));
                        float _3345 = 1.0 - (_3333 * _3290.w);
                        float _4756 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3346 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3347 = sqrt(_3333) * _3309.w;
                        float _3350 = 1.39999997615814208984375 / (_3347 + 1.39999997615814208984375);
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3340) + _3351;
                        float _3357 = _3347 * _3347;
                        float _3361 = ((isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0))) * _3346) / ((_3357 * 0.699999988079071044921875) + 1.0);
                        float _3365 = (-0.0) - _2819;
                        float _3366 = (-0.0) - _2820;
                        float _3367 = (-0.0) - _2821;
                        float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                        float _3372 = _3371 * _3365;
                        float _3373 = _3371 * _3366;
                        float _3374 = _3371 * _3367;
                        float _3382 = exp2(log2(1.0 / ((_3357 * 3.5) + 5.0)) * 0.25);
                        float _3383 = 1.0 - _1132;
                        float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                        float _3391 = _3390 * _3390;
                        float _3392 = _3391 * _3391;
                        float _3393 = _3372 + _3337;
                        float _3394 = _3373 + _3338;
                        float _3395 = _3374 + _3339;
                        float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                        float _3403 = dot(vec3(_1072, _1075, _1078), vec3(_3372, _3373, _3374));
                        float _4772 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3407 = dot(vec3(_1072, _1075, _1078), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                        float _4783 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3410 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                        float _3415 = _3350 * _3391;
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3340) + _3416;
                        float _4794 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3420 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3421 = 1.0 - _3391;
                        float _3431 = (0.5 / (((_3420 * ((_3406 * _3421) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3420 * _3421) + _3391) * _3406))) * _3420;
                        float _4805 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3442 = (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3414 * _3414) * ((_3357 * 2.1991131305694580078125) + 3.141590118408203125))) * _3346;
                        _3194 = (_3361 * _3309.x) + _3267;
                        _3195 = (_3361 * _3309.y) + _3268;
                        _3196 = (_3361 * _3309.z) + _3269;
                        _3191 = (_3442 * _3326.x) + _3264;
                        _3192 = (_3442 * _3326.y) + _3265;
                        _3193 = (_3442 * _3326.z) + _3266;
                        if (_3271 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3271;
                        }
                    }
                    frontier_phi_66_pred = _3191;
                    frontier_phi_66_pred_1 = _3196;
                    frontier_phi_66_pred_2 = _3195;
                    frontier_phi_66_pred_3 = _3194;
                    frontier_phi_66_pred_4 = _3193;
                    frontier_phi_66_pred_5 = _3192;
                }
                _2967 = frontier_phi_66_pred;
                _2977 = frontier_phi_66_pred_1;
                _2975 = frontier_phi_66_pred_2;
                _2973 = frontier_phi_66_pred_3;
                _2971 = frontier_phi_66_pred_4;
                _2969 = frontier_phi_66_pred_5;
                uint _3126 = _3125 + 1u;
                if (_3126 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3119 = _2967;
                    _3120 = _2969;
                    _3121 = _2971;
                    _3122 = _2973;
                    _3123 = _2975;
                    _3124 = _2977;
                    _3125 = _3126;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
        }
        uvec4 _2980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2981 = _2980.z;
        uint _2983 = (_2981 >> 8u) & 15u;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        if (((4294967295u << _2983) & _2865) == 0u)
        {
            _3087 = _2966;
            _3089 = _2968;
            _3091 = _2970;
            _3093 = _2972;
            _3095 = _2974;
            _3097 = _2976;
        }
        else
        {
            float _3112 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
            float _3113 = _3112 * _2819;
            float _3114 = _3112 * _2820;
            float _3115 = _3112 * _2821;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2983 < ((_2981 >> 12u) & 15u))
            {
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3098;
                float _3247 = _2966;
                float _3248 = _2968;
                float _3249 = _2970;
                float _3250 = _2972;
                float _3251 = _2974;
                float _3252 = _2976;
                uint _3253 = _2983;
                uint _3262;
                bool _3263;
                for (;;)
                {
                    _3262 = texelFetch(g_lightClassification, int((((_2859 << 5u) + (_2845 << 9u)) + (_3253 << 2u)) >> 2u)).x;
                    _3263 = _3262 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3263)
                    {
                        frontier_phi_77_pred = _3252;
                        frontier_phi_77_pred_1 = _3251;
                        frontier_phi_77_pred_2 = _3250;
                        frontier_phi_77_pred_3 = _3249;
                        frontier_phi_77_pred_4 = _3248;
                        frontier_phi_77_pred_5 = _3247;
                    }
                    else
                    {
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3469 = _3247;
                        float _3470 = _3248;
                        float _3471 = _3249;
                        float _3472 = _3250;
                        float _3473 = _3251;
                        float _3474 = _3252;
                        uint _3475 = _3262;
                        uint _3476;
                        vec4 _3501;
                        float _3502;
                        vec4 _3517;
                        vec3 _3529;
                        vec4 _3544;
                        vec4 _3559;
                        float _3605;
                        bool _3606;
                        for (;;)
                        {
                            uint _3486 = ((_3253 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3475));
                            _3476 = (_3475 + 4294967295u) & _3475;
                            uint _3488 = _3486 * 40u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            _3502 = _3501.w;
                            uint _3504 = (_3486 * 40u) + 4u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3519 = (_3486 * 40u) + 8u;
                            _3529 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x));
                            uint _3531 = (_3486 * 40u) + 16u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3486 * 40u) + 20u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3486 * 40u) + 24u;
                            vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3580 = (_3486 * 40u) + 28u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3605 = fma(_2821, _3593.z, fma(_2820, _3593.y, _3593.x * _2819)) + _3593.w;
                            _3606 = !((fma(_2821, _3574.z, fma(_2820, _3574.y, _3574.x * _2819)) + _3574.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3606)
                            {
                                float _3633 = _3501.x - _2819;
                                float _3634 = _3501.y - _2820;
                                float _3635 = _3501.z - _2821;
                                float _3636 = dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635));
                                float _3639 = inversesqrt(_3636);
                                float _3640 = _3639 * _3633;
                                float _3641 = _3639 * _3634;
                                float _3642 = _3639 * _3635;
                                float _3646 = 1.0 - (_3636 / (_3502 * _3502));
                                float _4816 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3651 = sqrt(_3636) * _3517.w;
                                float _3653 = 1.39999997615814208984375 / (_3651 + 1.39999997615814208984375);
                                float _3654 = _3653 * _3653;
                                float _3657 = ((1.0 - _3654) * dot(vec3(_3640, _3641, _3642), vec3(_1072, _1075, _1078))) + _3654;
                                float _3660 = _3651 * _3651;
                                float _3664 = (fma(_2821, _3544.z, fma(_2820, _3544.y, _3544.x * _2819)) + _3544.w) / _3605;
                                float _3665 = (fma(_2821, _3559.z, fma(_2820, _3559.y, _3559.x * _2819)) + _3559.w) / _3605;
                                float _3669 = 1.0 - dot(vec2(_3664, _3665), vec2(_3664, _3665));
                                float _4832 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3671 = _3670 * (((isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0))) * _3647) / ((_3660 * 0.699999988079071044921875) + 1.0));
                                float _3683 = exp2(log2(1.0 / ((_3660 * 3.5) + 5.0)) * 0.25);
                                float _3684 = 1.0 - _1132;
                                float _3691 = sqrt(1.0 - ((1.0 - (_3684 * _3684)) * (1.0 - (_3683 * _3683))));
                                float _3692 = _3691 * _3691;
                                float _3693 = _3692 * _3692;
                                float _3694 = _3640 - _3113;
                                float _3695 = _3641 - _3114;
                                float _3696 = _3642 - _3115;
                                float _3700 = inversesqrt(dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696)));
                                float _3704 = dot(vec3(_1072, _1075, _1078), vec3((-0.0) - _3113, (-0.0) - _3114, (-0.0) - _3115));
                                float _4843 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3708 = dot(vec3(_1072, _1075, _1078), vec3(_3700 * _3694, _3700 * _3695, _3700 * _3696));
                                float _4854 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3711 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3715 = ((_3711 * _3711) * (_3693 + (-1.0))) + 1.0;
                                float _3716 = _3653 * _3692;
                                float _3717 = _3716 * _3716;
                                float _3723 = ((1.0 - _3717) * dot(vec3(_1072, _1075, _1078), vec3(_3640, _3641, _3642))) + _3717;
                                float _4865 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3725 = 1.0 - _3692;
                                float _3735 = (0.5 / (((_3724 * ((_3707 * _3725) + _3692)) + 9.9999999392252902907785028219223e-09) + (((_3724 * _3725) + _3692) * _3707))) * _3724;
                                float _4876 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3745 = (_3670 * _3647) * (((_3693 * 3.1415927410125732421875) * (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) / ((_3715 * _3715) * ((_3660 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3671 * _3517.y;
                                frontier_phi_83_pred_1 = _3671 * _3517.x;
                                frontier_phi_83_pred_2 = _3745 * _3529.z;
                                frontier_phi_83_pred_3 = _3745 * _3529.y;
                                frontier_phi_83_pred_4 = _3745 * _3529.x;
                                frontier_phi_83_pred_5 = _3671 * _3517.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3753 = frontier_phi_83_pred;
                            _3752 = frontier_phi_83_pred_1;
                            _3751 = frontier_phi_83_pred_2;
                            _3750 = frontier_phi_83_pred_3;
                            _3749 = frontier_phi_83_pred_4;
                            _3754 = frontier_phi_83_pred_5;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            if (_3476 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3476;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3461;
                        frontier_phi_77_pred_1 = _3460;
                        frontier_phi_77_pred_2 = _3459;
                        frontier_phi_77_pred_3 = _3458;
                        frontier_phi_77_pred_4 = _3457;
                        frontier_phi_77_pred_5 = _3456;
                    }
                    _3098 = frontier_phi_77_pred;
                    _3096 = frontier_phi_77_pred_1;
                    _3094 = frontier_phi_77_pred_2;
                    _3092 = frontier_phi_77_pred_3;
                    _3090 = frontier_phi_77_pred_4;
                    _3088 = frontier_phi_77_pred_5;
                    uint _3254 = _3253 + 1u;
                    if (_3254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3247 = _3088;
                        _3248 = _3090;
                        _3249 = _3092;
                        _3250 = _3094;
                        _3251 = _3096;
                        _3252 = _3098;
                        _3253 = _3254;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3092;
                frontier_phi_58_59_ladder_1 = _3098;
                frontier_phi_58_59_ladder_2 = _3096;
                frontier_phi_58_59_ladder_3 = _3094;
                frontier_phi_58_59_ladder_4 = _3090;
                frontier_phi_58_59_ladder_5 = _3088;
            }
            else
            {
                frontier_phi_58_59_ladder = _2970;
                frontier_phi_58_59_ladder_1 = _2976;
                frontier_phi_58_59_ladder_2 = _2974;
                frontier_phi_58_59_ladder_3 = _2972;
                frontier_phi_58_59_ladder_4 = _2968;
                frontier_phi_58_59_ladder_5 = _2966;
            }
            _3087 = frontier_phi_58_59_ladder_5;
            _3089 = frontier_phi_58_59_ladder_4;
            _3091 = frontier_phi_58_59_ladder;
            _3093 = frontier_phi_58_59_ladder_3;
            _3095 = frontier_phi_58_59_ladder_2;
            _3097 = frontier_phi_58_59_ladder_1;
        }
        float _3102 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _2878 = (_3102 * _3093) + _2330;
        _2880 = (_3102 * _3095) + _2332;
        _2882 = (_3102 * _3097) + _2334;
        _2884 = ((_3087 * 0.039999999105930328369140625) * _3102) + _2663;
        _2886 = ((_3089 * 0.039999999105930328369140625) * _3102) + _2665;
        _2888 = ((_3091 * 0.039999999105930328369140625) * _3102) + _2667;
    }
    else
    {
        _2878 = _2330;
        _2880 = _2332;
        _2882 = _2334;
        _2884 = _2663;
        _2886 = _2665;
        _2888 = _2667;
    }
    float _4892 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _4903 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _4914 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _2905 = ((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2878 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1116))) + ((_2884 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1950)) * cbPerFrame._m0[3u].x);
    float _2906 = ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2880 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1116))) + ((_2886 + ((isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))) * _1950)) * cbPerFrame._m0[3u].x);
    float _2907 = ((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2882 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1116))) + ((_2888 + ((isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0))) * _1950)) * cbPerFrame._m0[3u].x);
    uint _2908 = _265 + 6u;
    float _2916 = _1053 / cbSceneParam._m0[86u].x;
    float _2917 = _1054 / cbSceneParam._m0[86u].y;
    vec4 _2931 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2916, _2917, (log2((isnan(cbSceneParam._m0[77u].w) ? _976 : (isnan(_976) ? cbSceneParam._m0[77u].w : min(_976, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2933 = _2931.x;
    float _2934 = _2931.y;
    float _2935 = _2931.z;
    float _2936 = _2931.w;
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    if (_976 > cbSceneParam._m0[78u].w)
    {
        float _2991 = isnan(_976) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _976 : min(cbSceneParam._m0[80u].w, _976));
        float _2992 = _2991 / _976;
        float _3003 = _2992 * _1026;
        float _3004 = _1027 * _2992;
        float _3005 = (-0.0) - _3004;
        float _3007 = _2992 * _1028;
        float _3009 = (cbSceneParam._m0[77u].w * _3005) / _2991;
        float _3010 = _3009 + cbSceneParam._m0[79u].w;
        float _3011 = cbSceneParam._m0[79u].w - _3004;
        float _3017 = sqrt(((_3003 * _3003) + (_3004 * _3004)) + (_3007 * _3007));
        float _3020 = (1.0 - (cbSceneParam._m0[77u].w / _2991)) * _3017;
        float _3025 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3027 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3204;
        if (abs((_3005 - _3009) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3204 = ((((_3010 > 0.0) ? exp2(_3025 * _3010) : (2.0 - exp2(_3027 * _3010))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3020;
        }
        else
        {
            float _3148 = 1.0 / cbSceneParam._m0[80u].x;
            float _3149 = isnan(_3011) ? _3010 : (isnan(_3010) ? _3011 : max(_3010, _3011));
            float _3150 = isnan(_3011) ? _3010 : (isnan(_3010) ? _3011 : min(_3010, _3011));
            float _3159 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : min(_3149, 0.0));
            float _3160 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : min(_3150, 0.0));
            _3204 = ((abs(_3017 / _3005) * cbSceneParam._m0[80u].y) * ((((_3159 - _3160) * 2.0) - ((exp2(_3025 * (isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0)))) - exp2(_3025 * (isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0))))) * _3148)) - ((exp2(_3027 * _3159) - exp2(_3027 * _3160)) * _3148))) + (_3020 * cbSceneParam._m0[80u].z);
        }
        vec4 _3206 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2916, _2917, 1.0), 0.0);
        float _3215 = exp2((_3204 * (-1.44269502162933349609375)) * (1.0 - _3206.w));
        float _3216 = log2(_3215);
        float _3232 = log2(_2936);
        _3029 = (exp2(_3232 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].x)) * _3206.x) / cbSceneParam._m0[78u].x)) + _2933;
        _3031 = (exp2(_3232 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].y)) * _3206.y) / cbSceneParam._m0[78u].y)) + _2934;
        _3033 = (exp2(_3232 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].z)) * _3206.z) / cbSceneParam._m0[78u].z)) + _2935;
        _3035 = _3215 * _2936;
    }
    else
    {
        _3029 = _2933;
        _3031 = _2934;
        _3033 = _2935;
        _3035 = _2936;
    }
    bool _3242;
    vec4 _3045;
    vec4 _3067;
    float _3069;
    float _3073;
    float _3074;
    float _3075;
    float _3076;
    bool _3086;
    for (;;)
    {
        _3045 = cbMatDynParam._m0[0u];
        float _3047 = roundEven(_3045.y);
        bool _3048 = _3047 == 3.0;
        float _3049 = log2(_3035);
        float _3056 = exp2(_3049 * cbSceneParam._m0[78u].x) * _2905;
        float _3057 = exp2(_3049 * cbSceneParam._m0[78u].y) * _2906;
        float _3058 = exp2(_3049 * cbSceneParam._m0[78u].z) * _2907;
        float _3065 = _1042 + (-0.5);
        _3067 = cbMtdParam._m0[1u];
        _3069 = _3067.y * _3065;
        float _3072 = (_3047 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3073 = _3072 * (_3048 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3029)));
        _3074 = _3072 * (_3048 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3031)));
        _3075 = _3072 * (_3048 ? _3058 : (_3058 + (cbSceneParam._m0[72u].w * _3033)));
        _3076 = _3065 * 0.999000012874603271484375;
        _3086 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3086)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3076) < 0.5)
            {
                _3242 = true;
                break;
            }
        }
        uint _3183 = _1091 + uint(_3045.w);
        if ((cbInstanceData._m0[_3183].w < 1.0) && ((cbInstanceData._m0[_3183].w + _3076) < 0.5))
        {
            _3242 = true;
            break;
        }
        if ((_3069 + 1.0) < _3067.x)
        {
            _3242 = true;
            break;
        }
        _3242 = false;
        break;
    }
    float _3447;
    if (_3242)
    {
        discard_state = true;
        _3447 = 0.0;
    }
    else
    {
        _3447 = cbInstanceData._m0[_2908].w;
    }
    SV_Target.x = _3073;
    SV_Target.y = _3074;
    SV_Target.z = _3075;
    SV_Target.w = _3447;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2908].w;
    discard_exit();
}


