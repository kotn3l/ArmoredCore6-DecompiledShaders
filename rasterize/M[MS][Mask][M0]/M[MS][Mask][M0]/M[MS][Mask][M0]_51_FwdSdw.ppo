#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1123;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _322.x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[24u].z) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3713 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _398 = (_391 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _399 = (_391 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _400 = (_391 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _417 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _254) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _255) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _449 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _463 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _322.y) * 2.0) - ((((_439 - _449) * cbMtdParam._m0[24u].z) + _449) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3724 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _471 = (_464 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398;
    float _472 = (_464 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399;
    float _473 = (_464 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400;
    vec4 _486 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _505 = _503.x;
    float _506 = _503.y;
    float _507 = _503.z;
    float _514 = ((_486.x - _505) * _391) + _505;
    float _515 = ((_486.y - _506) * _391) + _506;
    float _516 = ((_486.z - _507) * _391) + _507;
    vec4 _528 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _254) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _541 = ((_528.z - _516) * _464) + _516;
    float _544 = ((((_528.x - _514) * _464) + _514) * 2.0) + (-1.0);
    float _546 = ((((_528.y - _515) * _464) + _515) * 2.0) + (-1.0);
    float _547 = dot(vec2(_544, _546), vec2(_544, _546));
    float _3735 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _552 = sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _578 = (((_566.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _544;
    float _579 = (((_566.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _546;
    float _583 = (cbMtdParam._m0[19u].w * (_566.z - _541)) + _541;
    float _587 = cbMtdParam._m0[22u].x + _566.w;
    float _590 = fma(_552, _221 * NORMAL.x, fma(_579, _228 * TANGENT.x, (_214 * _206) * _578));
    float _593 = fma(_552, _221 * NORMAL.y, fma(_579, _228 * TANGENT.y, (_214 * _207) * _578));
    float _596 = fma(_552, _221 * NORMAL.z, fma(_579, _228 * TANGENT.z, (_214 * _208) * _578));
    float _600 = inversesqrt(dot(vec3(_590, _593, _596), vec3(_590, _593, _596)));
    float _601 = _600 * _590;
    float _602 = _600 * _593;
    float _603 = _600 * _596;
    float _3746 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _604 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3768 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3779 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3790 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _622 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _674 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _664);
    float _675 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _664);
    float _676 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _664);
    float _680 = inversesqrt(dot(vec3(_674, _675, _676), vec3(_674, _675, _676)));
    float _681 = _674 * _680;
    float _682 = _675 * _680;
    float _683 = _676 * _680;
    float _689 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _690 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _708 = fma(_603, cbSceneParam._m0[5u].z, fma(_602, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _601));
    float _711 = fma(_603, cbSceneParam._m0[6u].z, fma(_602, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _601));
    float _714 = fma(_603, cbSceneParam._m0[7u].z, fma(_602, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _601));
    uint _728 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _734 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_728].x;
    float _735 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_728].y;
    float _736 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_728].z;
    float _3801 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    vec4 _748 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _689, cbSceneParam._m0[86u].y * _690));
    float _752 = ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * TEXCOORD_5.w) * _748.x;
    float _753 = dot(vec3(_601, _602, _603), vec3(_681, _682, _683));
    float _756 = _753 * 2.0;
    float _760 = (_756 * _601) - _681;
    float _761 = (_756 * _602) - _682;
    float _762 = (_756 * _603) - _683;
    float _766 = abs(dot(vec3(_681, _682, _683), vec3(_601, _602, _603)));
    float _3834 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _768 = sqrt(_604);
    float _781 = exp2((_768 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_768 * 3.0));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1122;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _847 = fma(_821, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _813));
        float _851 = fma(_821, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _813));
        float _855 = fma(_821, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _813));
        float _880 = _813 + _601;
        float _881 = _817 + _602;
        float _882 = _821 + _603;
        float _892 = fma(_882, cbModelParam._m0[26u].z, fma(_881, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _880)) - _847;
        float _893 = fma(_882, cbModelParam._m0[27u].z, fma(_881, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _880)) - _851;
        float _894 = fma(_882, cbModelParam._m0[28u].z, fma(_881, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _880)) - _855;
        float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
        float _911 = ((_898 * _892) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_847 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_898 * _893) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_851 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_898 * _894) / cbModelParam._m0[34u].z) + ((((((_855 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        float _950 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_916.x + (-0.5));
        float _952 = _950 * (_916.y + (-0.5));
        float _953 = _950 * (_916.z + (-0.5));
        float _960 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_923.x + (-0.5));
        float _962 = _960 * (_923.y + (-0.5));
        float _963 = _960 * (_923.z + (-0.5));
        float _970 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_930.x + (-0.5));
        float _972 = _970 * (_930.y + (-0.5));
        float _973 = _970 * (_930.z + (-0.5));
        float _980 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_937.x + (-0.5));
        float _982 = _980 * (_937.y + (-0.5));
        float _983 = _980 * (_937.z + (-0.5));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = _951 * 0.5;
        float _988 = _961 * 0.5;
        float _989 = _971 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1004 = (dot(vec3(_601, _602, _603), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1014 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3882 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1016 + 1.0))) + _1021) * _984;
        float _1031 = _952 * 0.5;
        float _1032 = _962 * 0.5;
        float _1033 = _972 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_601, _602, _603), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3915 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1058 + 1.0))) + _1063) * _985;
        float _1073 = _953 * 0.5;
        float _1074 = _963 * 0.5;
        float _1075 = _973 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_601, _602, _603), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3948 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1100 + 1.0))) + _1105) * _986;
        _1122 = _953;
        _1124 = _952;
        _1125 = _951;
        _1126 = _963;
        _1127 = _962;
        _1128 = _961;
        _1129 = _973;
        _1130 = _972;
        _1131 = _971;
        _1132 = _986;
        _1133 = _985;
        _1134 = _984;
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
    }
    else
    {
        _1122 = _1123;
        _1124 = _1123;
        _1125 = _1123;
        _1126 = _1123;
        _1127 = _1123;
        _1128 = _1123;
        _1129 = _1123;
        _1130 = _1123;
        _1131 = _1123;
        _1132 = _1123;
        _1133 = _1123;
        _1134 = _1123;
        _1135 = 0.0;
        _1136 = 0.0;
        _1137 = 0.0;
    }
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1161 = fma(_821, cbModelParam._m0[30u].z, fma(_817, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _813));
        float _1165 = fma(_821, cbModelParam._m0[31u].z, fma(_817, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _813));
        float _1169 = fma(_821, cbModelParam._m0[32u].z, fma(_817, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _813));
        float _1192 = _813 + _601;
        float _1193 = _817 + _602;
        float _1194 = _821 + _603;
        float _1204 = fma(_1194, cbModelParam._m0[30u].z, fma(_1193, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1192)) - _1161;
        float _1205 = fma(_1194, cbModelParam._m0[31u].z, fma(_1193, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1192)) - _1165;
        float _1206 = fma(_1194, cbModelParam._m0[32u].z, fma(_1193, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1192)) - _1169;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1161 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1165 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[35u].z) + ((((((_1169 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1260 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1227.x + (-0.5));
        float _1262 = _1260 * (_1227.y + (-0.5));
        float _1263 = _1260 * (_1227.z + (-0.5));
        float _1270 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1234.x + (-0.5));
        float _1272 = _1270 * (_1234.y + (-0.5));
        float _1273 = _1270 * (_1234.z + (-0.5));
        float _1280 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1241.x + (-0.5));
        float _1282 = _1280 * (_1241.y + (-0.5));
        float _1283 = _1280 * (_1241.z + (-0.5));
        float _1290 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1248.x + (-0.5));
        float _1292 = _1290 * (_1248.y + (-0.5));
        float _1293 = _1290 * (_1248.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_601, _602, _603), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4011 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1324 + 1.0))) + _1329) * _1294;
        float _1339 = _1262 * 0.5;
        float _1340 = _1272 * 0.5;
        float _1341 = _1282 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_601, _602, _603), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4044 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1366 + 1.0))) + _1371) * _1295;
        float _1381 = _1263 * 0.5;
        float _1382 = _1273 * 0.5;
        float _1383 = _1283 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_601, _602, _603), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4077 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1408 + 1.0))) + _1413) * _1296;
        _1430 = _1263;
        _1431 = _1262;
        _1432 = _1261;
        _1433 = _1273;
        _1434 = _1272;
        _1435 = _1271;
        _1436 = _1283;
        _1437 = _1282;
        _1438 = _1281;
        _1439 = _1296;
        _1440 = _1295;
        _1441 = _1294;
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1123;
        _1431 = _1123;
        _1432 = _1123;
        _1433 = _1123;
        _1434 = _1123;
        _1435 = _1123;
        _1436 = _1123;
        _1437 = _1123;
        _1438 = _1123;
        _1439 = _1123;
        _1440 = _1123;
        _1441 = _1123;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1135)) + _1135;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1136)) + _1136;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1137)) + _1137;
    float _1477 = fma(_1456, cbSceneParam._m0[89u].z, fma(_1455, cbSceneParam._m0[89u].y, _1454 * cbSceneParam._m0[89u].x));
    float _1480 = fma(_1456, cbSceneParam._m0[90u].z, fma(_1455, cbSceneParam._m0[90u].y, _1454 * cbSceneParam._m0[90u].x));
    float _1483 = fma(_1456, cbSceneParam._m0[91u].z, fma(_1455, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1454));
    float _1498 = _760 * 0.5;
    float _1499 = _761 * 0.5;
    float _1500 = _762 * 0.5;
    float _1501 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1504 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1507 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1541;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1514 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1122, _1126, _1129, _1132));
        float _1518 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1124, _1127, _1130, _1133));
        float _1522 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1529 = dot(vec4(cbModelParam._m0[39u]), vec4(_1498, _1499, _1500, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1552;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1543 = dot(vec4(cbModelParam._m0[40u]), vec4(_1498, _1499, _1500, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1556 = (_1552 * cbModelParam._m0[1u].x) + (_1541 * (1.0 - cbModelParam._m0[1u].x));
    float _1566 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _604);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1566 : min(cbModelParam._m0[25u].z, _1566));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1616 = fma(_821, cbModelParam._m0[13u].z, fma(_817, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _813)) + cbModelParam._m0[13u].w;
        float _1620 = fma(_821, cbModelParam._m0[14u].z, fma(_817, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _813)) + cbModelParam._m0[14u].w;
        float _1624 = fma(_821, cbModelParam._m0[15u].z, fma(_817, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _813)) + cbModelParam._m0[15u].w;
        float _1627 = fma(_762, cbModelParam._m0[13u].z, fma(_761, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _760));
        float _1630 = fma(_762, cbModelParam._m0[14u].z, fma(_761, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _760));
        float _1633 = fma(_762, cbModelParam._m0[15u].z, fma(_761, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _760));
        float _1661;
        if (_1627 > 0.0)
        {
            _1661 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1661 = frontier_phi_14_12_ladder;
        }
        float _1832;
        if (_1630 > 0.0)
        {
            _1832 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1832 = frontier_phi_23_19_ladder;
        }
        float _2127;
        if (_1633 > 0.0)
        {
            _2127 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2127 = frontier_phi_35_30_ladder;
        }
        float _2129 = isnan(_1832) ? _1661 : (isnan(_1661) ? _1832 : min(_1661, _1832));
        float _2130 = isnan(_2127) ? _2129 : (isnan(_2129) ? _2127 : min(_2129, _2127));
        float _2134 = (_2130 * _1627) + _1616;
        float _2135 = (_2130 * _1630) + _1620;
        float _2136 = (_2130 * _1633) + _1624;
        float _2137 = _2130 * 9.9999997473787516355514526367188e-05;
        float _2139 = (-1.0) - _2137;
        float _2141 = _2137 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2136 > _2141) || ((_2136 < _2139) || ((_2135 > _2141) || ((_2135 < _2139) || ((_2134 < _2139) || (_2134 > _2141))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2281 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2136, cbModelParam._m0[9u].z, fma(_2135, cbModelParam._m0[9u].y, _2134 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2136, cbModelParam._m0[10u].z, fma(_2135, cbModelParam._m0[10u].y, _2134 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2136, cbModelParam._m0[11u].z, fma(_2135, cbModelParam._m0[11u].y, _2134 * cbModelParam._m0[11u].x))), _1567);
            frontier_phi_13_35_ladder = _2281.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2281.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2281.x * cbModelParam._m0[1u].y;
        }
        _1649 = frontier_phi_13_35_ladder_2;
        _1651 = frontier_phi_13_35_ladder_1;
        _1653 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_760, _761, _762), _1567);
        _1649 = _1637.x * cbModelParam._m0[1u].y;
        _1651 = _1637.y * cbModelParam._m0[1u].y;
        _1653 = _1637.z * cbModelParam._m0[1u].y;
    }
    float _1657 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _604);
    float _1658 = isnan(_1657) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1657 : min(cbModelParam._m0[25u].w, _1657));
    float _1749;
    float _1751;
    float _1753;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1713 = fma(_821, cbModelParam._m0[21u].z, fma(_817, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _813)) + cbModelParam._m0[21u].w;
        float _1717 = fma(_821, cbModelParam._m0[22u].z, fma(_817, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _813)) + cbModelParam._m0[22u].w;
        float _1721 = fma(_821, cbModelParam._m0[23u].z, fma(_817, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _813)) + cbModelParam._m0[23u].w;
        float _1724 = fma(_762, cbModelParam._m0[21u].z, fma(_761, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _760));
        float _1727 = fma(_762, cbModelParam._m0[22u].z, fma(_761, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _760));
        float _1730 = fma(_762, cbModelParam._m0[23u].z, fma(_761, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _760));
        float _1837;
        if (_1724 > 0.0)
        {
            _1837 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1837 = frontier_phi_25_21_ladder;
        }
        float _2154;
        if (_1727 > 0.0)
        {
            _2154 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2154 = frontier_phi_37_32_ladder;
        }
        float _2481;
        if (_1730 > 0.0)
        {
            _2481 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2481 = frontier_phi_47_44_ladder;
        }
        float _2483 = isnan(_2154) ? _1837 : (isnan(_1837) ? _2154 : min(_1837, _2154));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _1724) + _1713;
        float _2489 = (_2484 * _1727) + _1717;
        float _2490 = (_2484 * _1730) + _1721;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2492 = (-1.0) - _2491;
        float _2494 = _2491 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2490 > _2494) || ((_2490 < _2492) || ((_2489 > _2494) || ((_2489 < _2492) || ((_2488 < _2492) || (_2488 > _2494))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2490, cbModelParam._m0[17u].z, fma(_2489, cbModelParam._m0[17u].y, _2488 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2490, cbModelParam._m0[18u].z, fma(_2489, cbModelParam._m0[18u].y, _2488 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2490, cbModelParam._m0[19u].z, fma(_2489, cbModelParam._m0[19u].y, _2488 * cbModelParam._m0[19u].x))), _1658);
            frontier_phi_22_47_ladder = _2608.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2608.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2608.x * cbModelParam._m0[1u].z;
        }
        _1749 = frontier_phi_22_47_ladder_2;
        _1751 = frontier_phi_22_47_ladder_1;
        _1753 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_760, _761, _762), _1658);
        _1749 = _1733.x * cbModelParam._m0[1u].z;
        _1751 = _1733.y * cbModelParam._m0[1u].z;
        _1753 = _1733.z * cbModelParam._m0[1u].z;
    }
    float _1765 = ((((1.0 - _781) * ((_768 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_781 * _768)) * _752;
    float _1766 = _1765 * ((cbModelParam._m0[1u].w * (_1749 - _1649)) + _1649);
    float _1767 = _1765 * ((cbModelParam._m0[1u].w * (_1751 - _1651)) + _1651);
    float _1768 = _1765 * ((cbModelParam._m0[1u].w * (_1753 - _1653)) + _1653);
    float _1771 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1774 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1777 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, _1766 * cbSceneParam._m0[91u].x));
    float _1811 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1815 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1819 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1823 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1824 = _1811 / _1823;
    float _1825 = _1815 / _1823;
    float _1826 = _1819 / _1823;
    float _1973;
    float _1974;
    float _1975;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1853 = ((uint(_1826 > cbSceneParam._m0[59u].y) + uint(_1826 > cbSceneParam._m0[59u].x)) + uint(_1826 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1854 = _1853 + 43u;
        uint _1862 = _1853 + 44u;
        uint _1870 = _1853 + 45u;
        uint _1878 = _1853 + 46u;
        float _1889 = fma(_1823, cbSceneParam._m0[_1854].w, fma(_1819, cbSceneParam._m0[_1854].z, fma(_1815, cbSceneParam._m0[_1854].y, _1811 * cbSceneParam._m0[_1854].x)));
        float _1893 = fma(_1823, cbSceneParam._m0[_1862].w, fma(_1819, cbSceneParam._m0[_1862].z, fma(_1815, cbSceneParam._m0[_1862].y, _1811 * cbSceneParam._m0[_1862].x)));
        float _1901 = fma(_1823, cbSceneParam._m0[_1878].w, fma(_1819, cbSceneParam._m0[_1878].z, fma(_1815, cbSceneParam._m0[_1878].y, _1811 * cbSceneParam._m0[_1878].x)));
        float _1906 = cbSceneParam._m0[33u].z * _1901;
        float _1908 = cbSceneParam._m0[33u].w * _1901;
        float _1911 = fma(_1823, cbSceneParam._m0[_1870].w, fma(_1819, cbSceneParam._m0[_1870].z, fma(_1815, cbSceneParam._m0[_1870].y, _1811 * cbSceneParam._m0[_1870].x))) / _1901;
        float _1959 = (cbSceneParam._m0[33u].x - sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826))) * cbSceneParam._m0[33u].y;
        float _4203 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1966 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1906 + _1889) / _1901, (_1908 + _1893) / _1901), _1911), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1908 + _1889) / _1901, (_1893 - _1906) / _1901), _1911), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1889 - _1906) / _1901, (_1893 - _1908) / _1901), _1911), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1889 - _1908) / _1901, (_1906 + _1893) / _1901), _1911), 0.0)).x), vec4(0.25)));
        _1973 = 1.0 - (_1966 * cbSceneParam._m0[34u].x);
        _1974 = 1.0 - (_1966 * cbSceneParam._m0[34u].y);
        _1975 = 1.0 - (_1966 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1973 = 1.0;
        _1974 = 1.0;
        _1975 = 1.0;
    }
    float _2039;
    float _2041;
    float _2043;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2027 = fma(_1823, cbSceneParam._m0[63u].w, fma(_1819, cbSceneParam._m0[63u].z, fma(_1815, cbSceneParam._m0[63u].y, _1811 * cbSceneParam._m0[63u].x)));
        float _2028 = fma(_1823, cbSceneParam._m0[60u].w, fma(_1819, cbSceneParam._m0[60u].z, fma(_1815, cbSceneParam._m0[60u].y, _1811 * cbSceneParam._m0[60u].x))) / _2027;
        float _2029 = fma(_1823, cbSceneParam._m0[61u].w, fma(_1819, cbSceneParam._m0[61u].z, fma(_1815, cbSceneParam._m0[61u].y, _1811 * cbSceneParam._m0[61u].x))) / _2027;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2028 >= cbSceneParam._m0[64u].x) && (_2029 >= cbSceneParam._m0[64u].y)) && (_2028 <= cbSceneParam._m0[64u].z)) && (_2029 <= cbSceneParam._m0[64u].w))
        {
            float _2167 = fma(_1823, cbSceneParam._m0[62u].w, fma(_1819, cbSceneParam._m0[62u].z, fma(_1815, cbSceneParam._m0[62u].y, _1811 * cbSceneParam._m0[62u].x))) / _2027;
            float _2171 = isnan(cbSceneParam._m0[41u].w) ? _2167 : (isnan(_2167) ? cbSceneParam._m0[41u].w : max(_2167, cbSceneParam._m0[41u].w));
            float _2214 = (cbSceneParam._m0[33u].x - sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826))) * cbSceneParam._m0[33u].y;
            float _4219 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
            float _2221 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2028, cbSceneParam._m0[33u].w + _2029), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2028, _2029 - cbSceneParam._m0[33u].z), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2028 - cbSceneParam._m0[33u].z, _2029 - cbSceneParam._m0[33u].w), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2028 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2029), _2171), 0.0)).x), vec4(0.25)));
            float _2225 = 1.0 - (_2221 * cbSceneParam._m0[34u].x);
            float _2226 = 1.0 - (_2221 * cbSceneParam._m0[34u].y);
            float _2227 = 1.0 - (_2221 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2227) ? _1975 : (isnan(_1975) ? _2227 : min(_1975, _2227));
            frontier_phi_34_33_ladder_1 = isnan(_2226) ? _1974 : (isnan(_1974) ? _2226 : min(_1974, _2226));
            frontier_phi_34_33_ladder_2 = isnan(_2225) ? _1973 : (isnan(_1973) ? _2225 : min(_1973, _2225));
        }
        else
        {
            frontier_phi_34_33_ladder = _1975;
            frontier_phi_34_33_ladder_1 = _1974;
            frontier_phi_34_33_ladder_2 = _1973;
        }
        _2039 = frontier_phi_34_33_ladder_2;
        _2041 = frontier_phi_34_33_ladder_1;
        _2043 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2039 = _1973;
        _2041 = _1974;
        _2043 = _1975;
    }
    uvec4 _2048 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _2050 = _2048.x * 14u;
    uint _2051 = _2050 + 13u;
    float _2058 = _752 + (-1.0);
    float _2063 = (cbLight._m0[_2051].x * _2058) + 1.0;
    float _2064 = (cbLight._m0[_2051].y * _2058) + 1.0;
    float _2065 = (cbLight._m0[_2051].z * _2058) + 1.0;
    float _2066 = (cbLight._m0[_2051].w * _2058) + 1.0;
    uint _2067 = _2050 + 5u;
    float _2073 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2077 = _2050 + 4u;
    float _2086 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
    uint _2090 = _2050 | 1u;
    float _2101 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_601, _602, _603));
    float _2104 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_601, _602, _603));
    float _4255 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _4266 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2109 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2111 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2118 = ((cbLight._m0[_2067].x * _2073) * _2111) + (((cbLight._m0[_2077].x * _2039) * _2086) * _2109);
    float _2119 = ((_2073 * cbLight._m0[_2067].y) * _2111) + (((cbLight._m0[_2077].y * _2041) * _2086) * _2109);
    float _2120 = ((_2073 * cbLight._m0[_2067].z) * _2111) + (((cbLight._m0[_2077].z * _2043) * _2086) * _2109);
    uvec4 _2124 = floatBitsToUint(cbLight._m0[_2050 + 12u]);
    bool _2126 = _2124.x == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2126)
    {
        _2228 = _2118;
        _2230 = _2119;
        _2232 = _2120;
    }
    else
    {
        uint _2236 = _2050 + 6u;
        float _2252 = (dot(vec3(cbLight._m0[_2050 + 2u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4277 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2255 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2228 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2118;
        _2230 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2119;
        _2232 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2120;
    }
    bool _2235 = _2124.y == 0u;
    float _2290;
    float _2292;
    float _2294;
    if (_2235)
    {
        _2290 = _2228;
        _2292 = _2230;
        _2294 = _2232;
    }
    else
    {
        uint _2452 = _2050 + 7u;
        float _2468 = (dot(vec3(cbLight._m0[_2050 + 3u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _2469 = _2468 * _2468;
        float _4293 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2470 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2471 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2290 = (((cbLight._m0[_2452].x * 0.3183098733425140380859375) * _2470) * _2471) + _2228;
        _2292 = (((cbLight._m0[_2452].y * 0.3183098733425140380859375) * _2470) * _2471) + _2230;
        _2294 = (((cbLight._m0[_2452].z * 0.3183098733425140380859375) * _2470) * _2471) + _2232;
    }
    uint _2297 = _2050 + 8u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _604) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2050].x + _681;
    float _2313 = cbLight._m0[_2050].y + _682;
    float _2314 = cbLight._m0[_2050].z + _683;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2050].xyz));
    float _4309 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _4320 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _2326 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2327 = dot(vec3(_601, _602, _603), vec3(_2319, _2320, _2321));
    float _4331 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2331 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2319, _2320, _2321));
    float _4342 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2335 = _2311 * _2311;
    float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
    float _2350 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2351 = 1.0 - _2311;
    float _2362 = (0.5 / (((_2326 * ((_2325 * _2351) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2351) + _2311) * _2325))) * _2325;
    float _4353 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
    uint _2378 = _2050 + 9u;
    float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _604) * 0.949999988079071044921875);
    float _2390 = _2389 * _2389;
    float _2391 = cbLight._m0[_2090].x + _681;
    float _2392 = cbLight._m0[_2090].y + _682;
    float _2393 = cbLight._m0[_2090].z + _683;
    float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
    float _2398 = _2397 * _2391;
    float _2399 = _2397 * _2392;
    float _2400 = _2397 * _2393;
    float _2401 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2090].xyz));
    float _4364 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2405 = dot(vec3(_601, _602, _603), vec3(_2398, _2399, _2400));
    float _4375 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2398, _2399, _2400));
    float _4386 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2390 * _2390;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2427 = 1.0 - _2390;
    float _2437 = (0.5 / (((_2326 * ((_2404 * _2427) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2427) + _2390) * _2404))) * _2404;
    float _4397 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2439 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    float _2449 = (((_2426 * cbLight._m0[_2378].x) * _2439) * _2073) + ((((cbLight._m0[_2297].x * _2039) * _2350) * _2364) * _2086);
    float _2450 = (((_2426 * cbLight._m0[_2378].y) * _2439) * _2073) + ((((cbLight._m0[_2297].y * _2041) * _2350) * _2364) * _2086);
    float _2451 = (((_2426 * cbLight._m0[_2378].z) * _2439) * _2073) + ((((cbLight._m0[_2297].z * _2043) * _2350) * _2364) * _2086);
    float _2507;
    float _2509;
    float _2511;
    if (_2126)
    {
        _2507 = _2449;
        _2509 = _2450;
        _2511 = _2451;
    }
    else
    {
        uint _2513 = _2050 + 2u;
        uint _2517 = _2050 + 10u;
        float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _604) * 0.949999988079071044921875);
        float _2532 = _2531 * _2531;
        float _2533 = cbLight._m0[_2513].x + _681;
        float _2534 = cbLight._m0[_2513].y + _682;
        float _2535 = cbLight._m0[_2513].z + _683;
        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
        float _2540 = _2539 * _2533;
        float _2541 = _2539 * _2534;
        float _2542 = _2539 * _2535;
        float _2543 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2513].xyz));
        float _4408 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2547 = dot(vec3(_601, _602, _603), vec3(_2540, _2541, _2542));
        float _4419 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2551 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2540, _2541, _2542));
        float _4430 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _2532 * _2532;
        float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
        float _2568 = (exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2569 = 1.0 - _2532;
        float _2579 = (0.5 / (((_2326 * ((_2546 * _2569) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2569) + _2532) * _2546))) * _2546;
        float _4441 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2507 = (((_2568 * cbLight._m0[_2517].x) * _2581) * _2582) + _2449;
        _2509 = (((_2568 * cbLight._m0[_2517].y) * _2581) * _2582) + _2450;
        _2511 = (((_2568 * cbLight._m0[_2517].z) * _2581) * _2582) + _2451;
    }
    float _2613;
    float _2615;
    float _2617;
    if (_2235)
    {
        _2613 = _2507;
        _2615 = _2509;
        _2617 = _2511;
    }
    else
    {
        uint _2624 = _2050 + 3u;
        uint _2628 = _2050 + 11u;
        float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _604) * 0.949999988079071044921875);
        float _2643 = _2642 * _2642;
        float _2644 = cbLight._m0[_2624].x + _681;
        float _2645 = cbLight._m0[_2624].y + _682;
        float _2646 = cbLight._m0[_2624].z + _683;
        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
        float _2651 = _2650 * _2644;
        float _2652 = _2650 * _2645;
        float _2653 = _2650 * _2646;
        float _2654 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2624].xyz));
        float _4457 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2658 = dot(vec3(_601, _602, _603), vec3(_2651, _2652, _2653));
        float _4468 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2662 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2651, _2652, _2653));
        float _4479 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2666 = _2643 * _2643;
        float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
        float _2679 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2680 = 1.0 - _2643;
        float _2690 = (0.5 / (((_2326 * ((_2657 * _2680) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2680) + _2643) * _2657))) * _2657;
        float _4490 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2613 = (((_2679 * cbLight._m0[_2628].x) * _2692) * _2693) + _2507;
        _2615 = (((_2679 * cbLight._m0[_2628].y) * _2692) * _2693) + _2509;
        _2617 = (((_2679 * cbLight._m0[_2628].z) * _2692) * _2693) + _2511;
    }
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_2048.y == 0u)
    {
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.x;
        uint _2726 = uint((float(_2714.y) * floor(float(uint(cbSceneParam._m0[85u].y * _690) / _2715))) + floor(float(uint(cbSceneParam._m0[85u].x * _689) / _2715)));
        float _2736 = (log2(_1826 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2737 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        uint _2740 = uint(isnan(14.0) ? _2737 : (isnan(_2737) ? 14.0 : min(_2737, 14.0)));
        uvec4 _2745 = texelFetch(g_lightClusterGridBuffer, int(((_2740 << 2u) + (_2726 << 6u)) >> 2u));
        uint _2746 = _2745.x;
        uint _2747 = _2714.z;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        if (((((1u << ((_2747 >> 4u) & 15u)) + 4294967295u) & _2746) == 0u) || ((_2747 & 240u) == 0u))
        {
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
        }
        else
        {
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            uint _2977 = 0u;
            uint _2986;
            bool _2987;
            for (;;)
            {
                _2986 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_2977 << 2u)) >> 2u)).x;
                _2987 = _2986 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2987)
                {
                    frontier_phi_66_pred = _2976;
                    frontier_phi_66_pred_1 = _2975;
                    frontier_phi_66_pred_2 = _2974;
                    frontier_phi_66_pred_3 = _2973;
                    frontier_phi_66_pred_4 = _2972;
                    frontier_phi_66_pred_5 = _2971;
                }
                else
                {
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    uint _3101;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2976;
                    _3101 = _2986;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    for (;;)
                    {
                        uint _3105 = uint(findLSB(_3101)) + (_2977 << 5u);
                        uint _3102 = (_3101 + 4294967295u) & _3101;
                        uint _3107 = _3105 * 48u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3127 = (_3105 * 48u) + 4u;
                        vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 3u)).x));
                        uint _3146 = (_3105 * 48u) + 8u;
                        vec3 _3157 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x));
                        float _3161 = _3121.x - _1824;
                        float _3162 = _3121.y - _1825;
                        float _3163 = _3121.z - _1826;
                        float _3164 = dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163));
                        float _3167 = inversesqrt(_3164);
                        float _3168 = _3167 * _3161;
                        float _3169 = _3167 * _3162;
                        float _3170 = _3167 * _3163;
                        float _3171 = dot(vec3(_708, _711, _714), vec3(_3168, _3169, _3170));
                        float _3176 = 1.0 - (_3164 * _3121.w);
                        float _4516 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3178 = sqrt(_3164) * _3140.w;
                        float _3181 = 1.39999997615814208984375 / (_3178 + 1.39999997615814208984375);
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3171) + _3182;
                        float _3188 = _3178 * _3178;
                        float _3192 = ((isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))) * _3177) / ((_3188 * 0.699999988079071044921875) + 1.0);
                        float _3196 = (-0.0) - _1824;
                        float _3197 = (-0.0) - _1825;
                        float _3198 = (-0.0) - _1826;
                        float _3202 = inversesqrt(dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198)));
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3212 = exp2(log2(1.0 / ((_3188 * 3.5) + 5.0)) * 0.25);
                        float _3213 = 1.0 - _768;
                        float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                        float _3221 = _3220 * _3220;
                        float _3222 = _3221 * _3221;
                        float _3223 = _3203 + _3168;
                        float _3224 = _3204 + _3169;
                        float _3225 = _3205 + _3170;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3233 = dot(vec3(_708, _711, _714), vec3(_3203, _3204, _3205));
                        float _4532 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3236 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3237 = dot(vec3(_708, _711, _714), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                        float _4543 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3240 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                        float _3245 = _3181 * _3221;
                        float _3246 = _3245 * _3245;
                        float _3249 = ((1.0 - _3246) * _3171) + _3246;
                        float _4554 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3251 = 1.0 - _3221;
                        float _3261 = (0.5 / (((_3250 * ((_3236 * _3251) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3221) * _3236))) * _3250;
                        float _4565 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3272 = (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) / ((_3244 * _3244) * ((_3188 * 2.1991131305694580078125) + 3.141590118408203125))) * _3177;
                        _3030 = (_3192 * _3140.x) + _3098;
                        _3031 = (_3192 * _3140.y) + _3099;
                        _3032 = (_3192 * _3140.z) + _3100;
                        _3027 = (_3272 * _3157.x) + _3095;
                        _3028 = (_3272 * _3157.y) + _3096;
                        _3029 = (_3272 * _3157.z) + _3097;
                        if (_3102 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3032;
                            _3101 = _3102;
                        }
                    }
                    frontier_phi_66_pred = _3032;
                    frontier_phi_66_pred_1 = _3031;
                    frontier_phi_66_pred_2 = _3030;
                    frontier_phi_66_pred_3 = _3029;
                    frontier_phi_66_pred_4 = _3028;
                    frontier_phi_66_pred_5 = _3027;
                }
                _2837 = frontier_phi_66_pred;
                _2835 = frontier_phi_66_pred_1;
                _2833 = frontier_phi_66_pred_2;
                _2831 = frontier_phi_66_pred_3;
                _2829 = frontier_phi_66_pred_4;
                _2827 = frontier_phi_66_pred_5;
                uint _2978 = _2977 + 1u;
                if (_2978 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2971 = _2827;
                    _2972 = _2829;
                    _2973 = _2831;
                    _2974 = _2833;
                    _2975 = _2835;
                    _2976 = _2837;
                    _2977 = _2978;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
        }
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.z;
        uint _2843 = (_2841 >> 8u) & 15u;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        if (((4294967295u << _2843) & _2746) == 0u)
        {
            _2939 = _2826;
            _2941 = _2828;
            _2943 = _2830;
            _2945 = _2832;
            _2947 = _2834;
            _2949 = _2836;
        }
        else
        {
            float _2964 = inversesqrt(dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826)));
            float _2965 = _2964 * _1824;
            float _2966 = _2964 * _1825;
            float _2967 = _2964 * _1826;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2843 < ((_2841 >> 12u) & 15u))
            {
                float _2940;
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _3078 = _2826;
                float _3079 = _2828;
                float _3080 = _2830;
                float _3081 = _2832;
                float _3082 = _2834;
                float _3083 = _2836;
                uint _3084 = _2843;
                uint _3093;
                bool _3094;
                for (;;)
                {
                    _3093 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                    _3094 = _3093 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3094)
                    {
                        frontier_phi_72_pred = _3083;
                        frontier_phi_72_pred_1 = _3082;
                        frontier_phi_72_pred_2 = _3081;
                        frontier_phi_72_pred_3 = _3080;
                        frontier_phi_72_pred_4 = _3079;
                        frontier_phi_72_pred_5 = _3078;
                    }
                    else
                    {
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3290 = _3078;
                        float _3291 = _3079;
                        float _3292 = _3080;
                        float _3293 = _3081;
                        float _3294 = _3082;
                        float _3295 = _3083;
                        uint _3296 = _3093;
                        uint _3297;
                        vec4 _3322;
                        float _3323;
                        vec4 _3338;
                        vec3 _3350;
                        vec4 _3365;
                        vec4 _3380;
                        float _3426;
                        bool _3427;
                        for (;;)
                        {
                            uint _3307 = ((_3084 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3296));
                            _3297 = (_3296 + 4294967295u) & _3296;
                            uint _3309 = _3307 * 40u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            _3323 = _3322.w;
                            uint _3325 = (_3307 * 40u) + 4u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3307 * 40u) + 8u;
                            _3350 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x));
                            uint _3352 = (_3307 * 40u) + 16u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3367 = (_3307 * 40u) + 20u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3307 * 40u) + 24u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3401 = (_3307 * 40u) + 28u;
                            vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3426 = fma(_1826, _3414.z, fma(_1825, _3414.y, _3414.x * _1824)) + _3414.w;
                            _3427 = !((fma(_1826, _3395.z, fma(_1825, _3395.y, _3395.x * _1824)) + _3395.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3427)
                            {
                                float _3454 = _3322.x - _1824;
                                float _3455 = _3322.y - _1825;
                                float _3456 = _3322.z - _1826;
                                float _3457 = dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456));
                                float _3460 = inversesqrt(_3457);
                                float _3461 = _3460 * _3454;
                                float _3462 = _3460 * _3455;
                                float _3463 = _3460 * _3456;
                                float _3467 = 1.0 - (_3457 / (_3323 * _3323));
                                float _4576 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3472 = sqrt(_3457) * _3338.w;
                                float _3474 = 1.39999997615814208984375 / (_3472 + 1.39999997615814208984375);
                                float _3475 = _3474 * _3474;
                                float _3478 = ((1.0 - _3475) * dot(vec3(_3461, _3462, _3463), vec3(_708, _711, _714))) + _3475;
                                float _3481 = _3472 * _3472;
                                float _3485 = (fma(_1826, _3365.z, fma(_1825, _3365.y, _3365.x * _1824)) + _3365.w) / _3426;
                                float _3486 = (fma(_1826, _3380.z, fma(_1825, _3380.y, _3380.x * _1824)) + _3380.w) / _3426;
                                float _3490 = 1.0 - dot(vec2(_3485, _3486), vec2(_3485, _3486));
                                float _4592 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3492 = _3491 * (((isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))) * _3468) / ((_3481 * 0.699999988079071044921875) + 1.0));
                                float _3504 = exp2(log2(1.0 / ((_3481 * 3.5) + 5.0)) * 0.25);
                                float _3505 = 1.0 - _768;
                                float _3512 = sqrt(1.0 - ((1.0 - (_3505 * _3505)) * (1.0 - (_3504 * _3504))));
                                float _3513 = _3512 * _3512;
                                float _3514 = _3513 * _3513;
                                float _3515 = _3461 - _2965;
                                float _3516 = _3462 - _2966;
                                float _3517 = _3463 - _2967;
                                float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                                float _3525 = dot(vec3(_708, _711, _714), vec3((-0.0) - _2965, (-0.0) - _2966, (-0.0) - _2967));
                                float _4603 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3528 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3529 = dot(vec3(_708, _711, _714), vec3(_3521 * _3515, _3521 * _3516, _3521 * _3517));
                                float _4614 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3532 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3536 = ((_3532 * _3532) * (_3514 + (-1.0))) + 1.0;
                                float _3537 = _3474 * _3513;
                                float _3538 = _3537 * _3537;
                                float _3544 = ((1.0 - _3538) * dot(vec3(_708, _711, _714), vec3(_3461, _3462, _3463))) + _3538;
                                float _4625 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3546 = 1.0 - _3513;
                                float _3556 = (0.5 / (((_3545 * ((_3528 * _3546) + _3513)) + 9.9999999392252902907785028219223e-09) + (((_3545 * _3546) + _3513) * _3528))) * _3545;
                                float _4636 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3566 = (_3491 * _3468) * (((_3514 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3536 * _3536) * ((_3481 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3492 * _3338.y;
                                frontier_phi_78_pred_1 = _3492 * _3338.x;
                                frontier_phi_78_pred_2 = _3566 * _3350.z;
                                frontier_phi_78_pred_3 = _3566 * _3350.y;
                                frontier_phi_78_pred_4 = _3566 * _3350.x;
                                frontier_phi_78_pred_5 = _3492 * _3338.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3574 = frontier_phi_78_pred;
                            _3573 = frontier_phi_78_pred_1;
                            _3572 = frontier_phi_78_pred_2;
                            _3571 = frontier_phi_78_pred_3;
                            _3570 = frontier_phi_78_pred_4;
                            _3575 = frontier_phi_78_pred_5;
                            _3280 = _3573 + _3293;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            _3277 = _3570 + _3290;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            if (_3297 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3297;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3282;
                        frontier_phi_72_pred_1 = _3281;
                        frontier_phi_72_pred_2 = _3280;
                        frontier_phi_72_pred_3 = _3279;
                        frontier_phi_72_pred_4 = _3278;
                        frontier_phi_72_pred_5 = _3277;
                    }
                    _2950 = frontier_phi_72_pred;
                    _2948 = frontier_phi_72_pred_1;
                    _2946 = frontier_phi_72_pred_2;
                    _2944 = frontier_phi_72_pred_3;
                    _2942 = frontier_phi_72_pred_4;
                    _2940 = frontier_phi_72_pred_5;
                    uint _3085 = _3084 + 1u;
                    if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3078 = _2940;
                        _3079 = _2942;
                        _3080 = _2944;
                        _3081 = _2946;
                        _3082 = _2948;
                        _3083 = _2950;
                        _3084 = _3085;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2950;
                frontier_phi_60_61_ladder_1 = _2948;
                frontier_phi_60_61_ladder_2 = _2944;
                frontier_phi_60_61_ladder_3 = _2942;
                frontier_phi_60_61_ladder_4 = _2940;
                frontier_phi_60_61_ladder_5 = _2946;
            }
            else
            {
                frontier_phi_60_61_ladder = _2836;
                frontier_phi_60_61_ladder_1 = _2834;
                frontier_phi_60_61_ladder_2 = _2830;
                frontier_phi_60_61_ladder_3 = _2828;
                frontier_phi_60_61_ladder_4 = _2826;
                frontier_phi_60_61_ladder_5 = _2832;
            }
            _2939 = frontier_phi_60_61_ladder_4;
            _2941 = frontier_phi_60_61_ladder_3;
            _2943 = frontier_phi_60_61_ladder_2;
            _2945 = frontier_phi_60_61_ladder_5;
            _2947 = frontier_phi_60_61_ladder_1;
            _2949 = frontier_phi_60_61_ladder;
        }
        float _2954 = isnan(1.0) ? _752 : (isnan(_752) ? 1.0 : min(_752, 1.0));
        _2759 = (_2954 * _2945) + _2290;
        _2761 = (_2954 * _2947) + _2292;
        _2763 = (_2954 * _2949) + _2294;
        _2765 = ((_2939 * 0.039999999105930328369140625) * _2954) + _2613;
        _2767 = ((_2941 * 0.039999999105930328369140625) * _2954) + _2615;
        _2769 = ((_2943 * 0.039999999105930328369140625) * _2954) + _2617;
    }
    else
    {
        _2759 = _2290;
        _2761 = _2292;
        _2763 = _2294;
        _2765 = _2613;
        _2767 = _2615;
        _2769 = _2617;
    }
    float _4652 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4663 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4674 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    uint _2789 = _234 + 6u;
    float _2797 = _689 / cbSceneParam._m0[86u].x;
    float _2798 = _690 / cbSceneParam._m0[86u].y;
    vec4 _2812 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, (log2((isnan(cbSceneParam._m0[77u].w) ? _622 : (isnan(_622) ? cbSceneParam._m0[77u].w : min(_622, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2814 = _2812.x;
    float _2815 = _2812.y;
    float _2816 = _2812.z;
    float _2817 = _2812.w;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_622 > cbSceneParam._m0[78u].w)
    {
        float _2851 = isnan(_622) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _622 : min(cbSceneParam._m0[80u].w, _622));
        float _2852 = _2851 / _622;
        float _2863 = _2852 * _674;
        float _2864 = _675 * _2852;
        float _2865 = (-0.0) - _2864;
        float _2867 = _2852 * _676;
        float _2869 = (cbSceneParam._m0[77u].w * _2865) / _2851;
        float _2870 = _2869 + cbSceneParam._m0[79u].w;
        float _2871 = cbSceneParam._m0[79u].w - _2864;
        float _2877 = sqrt(((_2863 * _2863) + (_2864 * _2864)) + (_2867 * _2867));
        float _2880 = (1.0 - (cbSceneParam._m0[77u].w / _2851)) * _2877;
        float _2885 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2887 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3040;
        if (abs((_2865 - _2869) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3040 = ((((_2870 > 0.0) ? exp2(_2885 * _2870) : (2.0 - exp2(_2887 * _2870))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2880;
        }
        else
        {
            float _3000 = 1.0 / cbSceneParam._m0[80u].x;
            float _3001 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : max(_2870, _2871));
            float _3002 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : min(_2870, _2871));
            float _3011 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : min(_3001, 0.0));
            float _3012 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : min(_3002, 0.0));
            _3040 = ((abs(_2877 / _2865) * cbSceneParam._m0[80u].y) * ((((_3011 - _3012) * 2.0) - ((exp2(_2885 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0)))) - exp2(_2885 * (isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))))) * _3000)) - ((exp2(_2887 * _3011) - exp2(_2887 * _3012)) * _3000))) + (_2880 * cbSceneParam._m0[80u].z);
        }
        vec4 _3042 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, 1.0), 0.0);
        float _3051 = exp2((_3040 * (-1.44269502162933349609375)) * (1.0 - _3042.w));
        float _3052 = log2(_3051);
        float _3068 = log2(_2817);
        _2889 = (exp2(_3068 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3052 * cbSceneParam._m0[78u].x)) * _3042.x) / cbSceneParam._m0[78u].x)) + _2814;
        _2891 = (exp2(_3068 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3052 * cbSceneParam._m0[78u].y)) * _3042.y) / cbSceneParam._m0[78u].y)) + _2815;
        _2893 = (exp2(_3068 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3052 * cbSceneParam._m0[78u].z)) * _3042.z) / cbSceneParam._m0[78u].z)) + _2816;
        _2895 = _3051 * _2817;
    }
    else
    {
        _2889 = _2814;
        _2891 = _2815;
        _2893 = _2816;
        _2895 = _2817;
    }
    float _2907 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2908 = _2907 == 3.0;
    float _2909 = log2(_2895);
    float _2916 = exp2(_2909 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2759 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _752))) + ((_2765 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1556)) * cbPerFrame._m0[3u].x));
    float _2917 = exp2(_2909 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2761 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _752))) + ((_2767 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1556)) * cbPerFrame._m0[3u].x));
    float _2918 = exp2(_2909 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2763 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _752))) + ((_2769 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1556)) * cbPerFrame._m0[3u].x));
    float _2927 = (_2907 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2927 * (_2908 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2889)));
    SV_Target.y = _2927 * (_2908 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2891)));
    SV_Target.z = _2927 * (_2908 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2893)));
    SV_Target.w = cbInstanceData._m0[_2789].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2789].w;
}


