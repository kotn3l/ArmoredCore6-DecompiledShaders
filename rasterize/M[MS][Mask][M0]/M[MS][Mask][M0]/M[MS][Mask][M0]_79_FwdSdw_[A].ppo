#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1533;
float _4174;
float _4175;
float _4176;
float _4177;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4186 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4197 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4208 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _453 = _451.x;
    float _465 = dot(vec4(_453, _451.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _482 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _416.x) * 2.0) - ((((_453 - _465) * cbMtdParam._m0[24u].z) + _465) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4219 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _490 = (_483 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376;
    float _491 = (_483 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377;
    float _492 = (_483 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378;
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _531 = _529.x;
    float _541 = dot(vec4(_531, _529.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _555 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _416.y) * 2.0) - ((((_531 - _541) * cbMtdParam._m0[24u].z) + _541) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4230 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _566 = (_345.x * cbMtdParam._m0[9u].x) * ((_556 * ((_509.x * cbMtdParam._m0[13u].x) - _490)) + _490);
    float _567 = (_345.y * cbMtdParam._m0[9u].y) * ((_556 * ((_509.y * cbMtdParam._m0[13u].y) - _491)) + _491);
    float _568 = (_345.z * cbMtdParam._m0[9u].z) * ((_556 * ((_509.z * cbMtdParam._m0[13u].z) - _492)) + _492);
    float _572 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _566;
    float _575 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _567;
    float _578 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _568;
    float _586 = (((_566 - _572) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) + _572) * 4.55000019073486328125;
    float _588 = (((_567 - _575) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) + _575) * 4.55000019073486328125;
    float _590 = (((_568 - _578) * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) + _578) * 4.55000019073486328125;
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _651 = _649.x;
    float _652 = _649.y;
    float _653 = _649.z;
    float _660 = ((_632.x - _651) * _483) + _651;
    float _661 = ((_632.y - _652) * _483) + _652;
    float _662 = ((_632.z - _653) * _483) + _653;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _687 = ((_674.z - _662) * _556) + _662;
    float _690 = ((((_674.x - _660) * _556) + _660) * 2.0) + (-1.0);
    float _691 = ((((_674.y - _661) * _556) + _661) * 2.0) + (-1.0);
    float _692 = dot(vec2(_690, _691), vec2(_690, _691));
    float _4241 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _697 = sqrt(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _727 = (_690 + ((((_607.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_715.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _728 = (_691 + ((((_607.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_715.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _731 = fma(_697, _258, fma(_728, _265, _727 * _251));
    float _734 = fma(_697, _259, fma(_728, _266, _727 * _252));
    float _737 = fma(_697, _260, fma(_728, _267, _727 * _253));
    float _741 = inversesqrt(dot(vec3(_731, _734, _737), vec3(_731, _734, _737)));
    vec4 _768 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _770 = _768.x;
    float _771 = 1.0 - _770;
    float _777 = (cbMtdParam._m0[19u].x + dot(vec4(_741 * _731, _741 * _734, _741 * _737, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_770 - _771) * cbMtdParam._m0[24u].w) + _771) * cbMtdParam._m0[21u].z);
    float _4252 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _778 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _780 = (-0.0) - cbMtdParam._m0[24u].x;
    float _782 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _782 : (isnan(_782) ? 1.0 : min(_782, 1.0));
    float _790 = _778 - ((_778 * TEXCOORD_8.x) * _783);
    float _791 = _778 - ((_778 * TEXCOORD_8.y) * _783);
    float _792 = _778 - ((_778 * TEXCOORD_8.z) * _783);
    float _799 = (_790 * (cbMtdParam._m0[17u].x - _586)) + _586;
    float _800 = (_791 * (cbMtdParam._m0[17u].y - _588)) + _588;
    float _801 = (_792 * (cbMtdParam._m0[17u].z - _590)) + _590;
    vec4 _813 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _815 = _813.x;
    float _816 = 1.0 - _815;
    float _842 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_815 - _816) * cbMtdParam._m0[24u].y) + _816) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4273 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _843 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _851 = ((((cbMtdParam._m0[10u].x - _799) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _843) + _799;
    float _852 = ((((cbMtdParam._m0[10u].y - _800) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _843) + _800;
    float _853 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _801)) * _843) + _801;
    float _858 = (((_607.z - _687) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _687;
    float _862 = ((_715.z - _858) * cbMtdParam._m0[19u].w) + _858;
    vec4 _876 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _883 = (_876.x * 2.0) + (-1.0);
    float _884 = (_876.y * 2.0) + (-1.0);
    float _885 = dot(vec2(_883, _884), vec2(_883, _884));
    float _4284 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _893 = ((_876.z - _862) * _790) + _862;
    float _896 = ((cbMtdParam._m0[23u].y - _893) * _843) + _893;
    vec4 _917 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _923 = (_917.x * 2.0) + (-1.0);
    float _924 = (_917.y * 2.0) + (-1.0);
    float _925 = dot(vec2(_923, _924), vec2(_923, _924));
    float _4295 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _940 = ((sqrt(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) - _697) * _792) + _697;
    float _943 = (((_883 - _727) * _790) + _727) + (cbMtdParam._m0[21u].x * _727);
    float _944 = (((_884 - _728) * _791) + _728) + (cbMtdParam._m0[21u].x * _728);
    float _955 = (((_923 - _943) + (_943 * cbMtdParam._m0[22u].z)) * _843) + _943;
    float _956 = (((_924 - _944) + (_944 * cbMtdParam._m0[22u].z)) * _843) + _944;
    float _957 = (_843 * (sqrt(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) - _940)) + _940;
    float _959 = cbMtdParam._m0[22u].x + _715.w;
    float _962 = fma(_957, _258, fma(_956, _265, _955 * _251));
    float _965 = fma(_957, _259, fma(_956, _266, _955 * _252));
    float _968 = fma(_957, _260, fma(_956, _267, _955 * _253));
    float _972 = inversesqrt(dot(vec3(_962, _965, _968), vec3(_962, _965, _968)));
    float _973 = _972 * _962;
    float _974 = _972 * _965;
    float _975 = _972 * _968;
    float _4306 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _976 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4328 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4339 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4350 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _994 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1044 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1034);
    float _1045 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1034);
    float _1046 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1034);
    float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
    float _1051 = _1044 * _1050;
    float _1052 = _1045 * _1050;
    float _1053 = _1046 * _1050;
    vec4 _1058 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1060 = _1058.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1214 = sqrt(((_1044 * _1044) + (_1045 * _1045)) + (_1046 * _1046));
        float _1220 = (cbMatDynParam._m0[5u].x * _1214) + cbMatDynParam._m0[5u].y;
        float _4361 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1225 = (cbMatDynParam._m0[5u].z * _1214) + cbMatDynParam._m0[5u].w;
        float _4372 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) - _1221)) + _1221) < ((_1060 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1071 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1072 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1090 = fma(_975, cbSceneParam._m0[5u].z, fma(_974, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _973));
    float _1093 = fma(_975, cbSceneParam._m0[6u].z, fma(_974, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _973));
    float _1096 = fma(_975, cbSceneParam._m0[7u].z, fma(_974, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _973));
    uint _1109 = _289 + 9u;
    uint _1110 = _1109 + uint(cbMatDynParam._m0[0u].w);
    float _1116 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * cbInstanceData._m0[_1110].x;
    float _1117 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * cbInstanceData._m0[_1110].y;
    float _1118 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) * cbInstanceData._m0[_1110].z;
    float _4383 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1119 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1120 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _4405 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1121 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    vec4 _1130 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1071, cbSceneParam._m0[86u].y * _1072));
    float _1134 = ((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * TEXCOORD_5.w) * _1130.x;
    float _1135 = dot(vec3(_973, _974, _975), vec3(_1051, _1052, _1053));
    float _1138 = _1135 * 2.0;
    float _1142 = (_1138 * _973) - _1051;
    float _1143 = (_1138 * _974) - _1052;
    float _1144 = (_1138 * _975) - _1053;
    float _1148 = abs(dot(vec3(_1051, _1052, _1053), vec3(_973, _974, _975)));
    float _4416 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1150 = sqrt(_976);
    float _1163 = exp2((_1150 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1150 * 3.0));
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1532;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1257 = fma(_1203, cbModelParam._m0[26u].z, fma(_1199, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195));
        float _1261 = fma(_1203, cbModelParam._m0[27u].z, fma(_1199, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195));
        float _1265 = fma(_1203, cbModelParam._m0[28u].z, fma(_1199, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195));
        float _1290 = _1195 + _973;
        float _1291 = _1199 + _974;
        float _1292 = _1203 + _975;
        float _1302 = fma(_1292, cbModelParam._m0[26u].z, fma(_1291, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1290)) - _1257;
        float _1303 = fma(_1292, cbModelParam._m0[27u].z, fma(_1291, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1290)) - _1261;
        float _1304 = fma(_1292, cbModelParam._m0[28u].z, fma(_1291, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1290)) - _1265;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1257 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1261 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[34u].z) + ((((((_1265 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1360 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1326.x + (-0.5));
        float _1362 = _1360 * (_1326.y + (-0.5));
        float _1363 = _1360 * (_1326.z + (-0.5));
        float _1370 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1333.x + (-0.5));
        float _1372 = _1370 * (_1333.y + (-0.5));
        float _1373 = _1370 * (_1333.z + (-0.5));
        float _1380 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1340.x + (-0.5));
        float _1382 = _1380 * (_1340.y + (-0.5));
        float _1383 = _1380 * (_1340.z + (-0.5));
        float _1390 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1347.x + (-0.5));
        float _1392 = _1390 * (_1347.y + (-0.5));
        float _1393 = _1390 * (_1347.z + (-0.5));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = _1361 * 0.5;
        float _1398 = _1371 * 0.5;
        float _1399 = _1381 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1414 = (dot(vec3(_973, _974, _975), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1424 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4464 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1426 + 1.0))) + _1431) * _1394;
        float _1441 = _1362 * 0.5;
        float _1442 = _1372 * 0.5;
        float _1443 = _1382 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_973, _974, _975), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4475 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4486 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4497 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_1468 + 1.0))) + _1473) * _1395;
        float _1483 = _1363 * 0.5;
        float _1484 = _1373 * 0.5;
        float _1485 = _1383 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_973, _974, _975), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4508 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4519 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4530 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_1510 + 1.0))) + _1515) * _1396;
        _1532 = _1363;
        _1534 = _1362;
        _1535 = _1361;
        _1536 = _1373;
        _1537 = _1372;
        _1538 = _1371;
        _1539 = _1383;
        _1540 = _1382;
        _1541 = _1381;
        _1542 = _1396;
        _1543 = _1395;
        _1544 = _1394;
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _1533;
        _1534 = _1533;
        _1535 = _1533;
        _1536 = _1533;
        _1537 = _1533;
        _1538 = _1533;
        _1539 = _1533;
        _1540 = _1533;
        _1541 = _1533;
        _1542 = _1533;
        _1543 = _1533;
        _1544 = _1533;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1574 = fma(_1203, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195));
        float _1578 = fma(_1203, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195));
        float _1582 = fma(_1203, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195));
        float _1605 = _1195 + _973;
        float _1606 = _1199 + _974;
        float _1607 = _1203 + _975;
        float _1617 = fma(_1607, cbModelParam._m0[30u].z, fma(_1606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1605)) - _1574;
        float _1618 = fma(_1607, cbModelParam._m0[31u].z, fma(_1606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1605)) - _1578;
        float _1619 = fma(_1607, cbModelParam._m0[32u].z, fma(_1606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1605)) - _1582;
        float _1623 = inversesqrt(dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619)));
        float _1636 = ((_1623 * _1617) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1574 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1637 = ((_1623 * _1618) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1578 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1638 = ((_1623 * _1619) / cbModelParam._m0[35u].z) + ((((((_1582 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        float _1673 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1640.x + (-0.5));
        float _1675 = _1673 * (_1640.y + (-0.5));
        float _1676 = _1673 * (_1640.z + (-0.5));
        float _1683 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1647.x + (-0.5));
        float _1685 = _1683 * (_1647.y + (-0.5));
        float _1686 = _1683 * (_1647.z + (-0.5));
        float _1693 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1654.x + (-0.5));
        float _1695 = _1693 * (_1654.y + (-0.5));
        float _1696 = _1693 * (_1654.z + (-0.5));
        float _1703 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1661.x + (-0.5));
        float _1705 = _1703 * (_1661.y + (-0.5));
        float _1706 = _1703 * (_1661.z + (-0.5));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1710 = _1674 * 0.5;
        float _1711 = _1684 * 0.5;
        float _1712 = _1694 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_973, _974, _975), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4571 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4582 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4593 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_1737 + 1.0))) + _1742) * _1707;
        float _1752 = _1675 * 0.5;
        float _1753 = _1685 * 0.5;
        float _1754 = _1695 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_973, _974, _975), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4604 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4615 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4626 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_1779 + 1.0))) + _1784) * _1708;
        float _1794 = _1676 * 0.5;
        float _1795 = _1686 * 0.5;
        float _1796 = _1696 * 0.5;
        float _1797 = dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796));
        float _1802 = (_1797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1797);
        float _1810 = (dot(vec3(_973, _974, _975), vec3(_1802 * _1794, _1802 * _1795, _1802 * _1796)) + 1.0) * 0.5;
        float _4637 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796)) / (_1709 + 9.9999997473787516355514526367188e-06);
        float _4648 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _1821 = _1820 * 2.0;
        float _1825 = (1.0 - _1820) / (_1820 + 1.0);
        float _4659 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _1835 = ((((1.0 - _1826) * (_1821 + 2.0)) * exp2(log2(isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_1821 + 1.0))) + _1826) * _1709;
        _1843 = _1676;
        _1844 = _1675;
        _1845 = _1674;
        _1846 = _1686;
        _1847 = _1685;
        _1848 = _1684;
        _1849 = _1696;
        _1850 = _1695;
        _1851 = _1694;
        _1852 = _1709;
        _1853 = _1708;
        _1854 = _1707;
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
        _1857 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)));
    }
    else
    {
        _1843 = _1533;
        _1844 = _1533;
        _1845 = _1533;
        _1846 = _1533;
        _1847 = _1533;
        _1848 = _1533;
        _1849 = _1533;
        _1850 = _1533;
        _1851 = _1533;
        _1852 = _1533;
        _1853 = _1533;
        _1854 = _1533;
        _1855 = 0.0;
        _1856 = 0.0;
        _1857 = 0.0;
    }
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1545)) + _1545;
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1546)) + _1546;
    float _1869 = (cbModelParam._m0[1u].x * (_1857 - _1547)) + _1547;
    float _1890 = fma(_1869, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1867 * cbSceneParam._m0[89u].x));
    float _1893 = fma(_1869, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1867 * cbSceneParam._m0[90u].x));
    float _1896 = fma(_1869, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1867));
    float _1911 = _1142 * 0.5;
    float _1912 = _1143 * 0.5;
    float _1913 = _1144 * 0.5;
    float _1914 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1845, _1848, _1851, _1854));
    float _1917 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1920 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1954;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1927 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1532, _1536, _1539, _1542));
        float _1931 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1935 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1535, _1538, _1541, _1544));
        float _1942 = dot(vec4(cbModelParam._m0[39u]), vec4(_1911, _1912, _1913, 1.0));
        _1954 = dot(vec3(isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1942) ? 0.0 : (isnan(0.0) ? _1942 : max(0.0, _1942))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1954 = 1.0;
    }
    float _1965;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1956 = dot(vec4(cbModelParam._m0[40u]), vec4(_1911, _1912, _1913, 1.0));
        _1965 = dot(vec3(isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1956) ? 0.0 : (isnan(0.0) ? _1956 : max(0.0, _1956))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1965 = 1.0;
    }
    float _1969 = (_1965 * cbModelParam._m0[1u].x) + (_1954 * (1.0 - cbModelParam._m0[1u].x));
    float _1979 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _976);
    float _1980 = isnan(_1979) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1979 : min(cbModelParam._m0[25u].z, _1979));
    float _2061;
    float _2063;
    float _2065;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2028 = fma(_1203, cbModelParam._m0[13u].z, fma(_1199, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1195)) + cbModelParam._m0[13u].w;
        float _2032 = fma(_1203, cbModelParam._m0[14u].z, fma(_1199, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1195)) + cbModelParam._m0[14u].w;
        float _2036 = fma(_1203, cbModelParam._m0[15u].z, fma(_1199, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1195)) + cbModelParam._m0[15u].w;
        float _2039 = fma(_1144, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1142));
        float _2042 = fma(_1144, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1142));
        float _2045 = fma(_1144, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1142));
        float _2073;
        if (_2039 > 0.0)
        {
            _2073 = abs((1.0 - _2028) / _2039);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2028 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2073 = frontier_phi_17_15_ladder;
        }
        float _2243;
        if (_2042 > 0.0)
        {
            _2243 = abs((1.0 - _2032) / _2042);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2032 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2243 = frontier_phi_26_22_ladder;
        }
        float _2538;
        if (_2045 > 0.0)
        {
            _2538 = abs((1.0 - _2036) / _2045);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2036 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2538 = frontier_phi_38_33_ladder;
        }
        float _2540 = isnan(_2243) ? _2073 : (isnan(_2073) ? _2243 : min(_2073, _2243));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _2039) + _2028;
        float _2546 = (_2541 * _2042) + _2032;
        float _2547 = (_2541 * _2045) + _2036;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2548;
        float _2552 = _2548 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 > _2552) || ((_2546 < _2550) || ((_2545 < _2550) || (_2545 > _2552))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2547, cbModelParam._m0[9u].z, fma(_2546, cbModelParam._m0[9u].y, _2545 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2547, cbModelParam._m0[10u].z, fma(_2546, cbModelParam._m0[10u].y, _2545 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2547, cbModelParam._m0[11u].z, fma(_2546, cbModelParam._m0[11u].y, _2545 * cbModelParam._m0[11u].x))), _1980);
            frontier_phi_16_38_ladder = _2692.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2692.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2692.x * cbModelParam._m0[1u].y;
        }
        _2061 = frontier_phi_16_38_ladder_2;
        _2063 = frontier_phi_16_38_ladder_1;
        _2065 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2049 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1142, _1143, _1144), _1980);
        _2061 = _2049.x * cbModelParam._m0[1u].y;
        _2063 = _2049.y * cbModelParam._m0[1u].y;
        _2065 = _2049.z * cbModelParam._m0[1u].y;
    }
    float _2069 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _976);
    float _2070 = isnan(_2069) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2069 : min(cbModelParam._m0[25u].w, _2069));
    float _2160;
    float _2162;
    float _2164;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2124 = fma(_1203, cbModelParam._m0[21u].z, fma(_1199, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1195)) + cbModelParam._m0[21u].w;
        float _2128 = fma(_1203, cbModelParam._m0[22u].z, fma(_1199, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1195)) + cbModelParam._m0[22u].w;
        float _2132 = fma(_1203, cbModelParam._m0[23u].z, fma(_1199, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1195)) + cbModelParam._m0[23u].w;
        float _2135 = fma(_1144, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1142));
        float _2138 = fma(_1144, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1142));
        float _2141 = fma(_1144, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1142));
        float _2248;
        if (_2135 > 0.0)
        {
            _2248 = abs((1.0 - _2124) / _2135);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2124 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2248 = frontier_phi_28_24_ladder;
        }
        float _2565;
        if (_2138 > 0.0)
        {
            _2565 = abs((1.0 - _2128) / _2138);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2128 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2565 = frontier_phi_40_35_ladder;
        }
        float _2892;
        if (_2141 > 0.0)
        {
            _2892 = abs((1.0 - _2132) / _2141);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2141 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2132 + 1.0) / _2141);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2892 = frontier_phi_50_47_ladder;
        }
        float _2894 = isnan(_2565) ? _2248 : (isnan(_2248) ? _2565 : min(_2248, _2565));
        float _2895 = isnan(_2892) ? _2894 : (isnan(_2894) ? _2892 : min(_2894, _2892));
        float _2899 = (_2895 * _2135) + _2124;
        float _2900 = (_2895 * _2138) + _2128;
        float _2901 = (_2895 * _2141) + _2132;
        float _2902 = _2895 * 9.9999997473787516355514526367188e-05;
        float _2903 = (-1.0) - _2902;
        float _2905 = _2902 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2901 > _2905) || ((_2901 < _2903) || ((_2900 > _2905) || ((_2900 < _2903) || ((_2899 < _2903) || (_2899 > _2905))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2901, cbModelParam._m0[17u].z, fma(_2900, cbModelParam._m0[17u].y, _2899 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2901, cbModelParam._m0[18u].z, fma(_2900, cbModelParam._m0[18u].y, _2899 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2901, cbModelParam._m0[19u].z, fma(_2900, cbModelParam._m0[19u].y, _2899 * cbModelParam._m0[19u].x))), _2070);
            frontier_phi_25_50_ladder = _3019.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3019.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3019.x * cbModelParam._m0[1u].z;
        }
        _2160 = frontier_phi_25_50_ladder_2;
        _2162 = frontier_phi_25_50_ladder_1;
        _2164 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2144 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1142, _1143, _1144), _2070);
        _2160 = _2144.x * cbModelParam._m0[1u].z;
        _2162 = _2144.y * cbModelParam._m0[1u].z;
        _2164 = _2144.z * cbModelParam._m0[1u].z;
    }
    float _2176 = ((((1.0 - _1163) * ((_1150 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1163 * _1150)) * _1134;
    float _2177 = _2176 * ((cbModelParam._m0[1u].w * (_2160 - _2061)) + _2061);
    float _2178 = _2176 * ((cbModelParam._m0[1u].w * (_2162 - _2063)) + _2063);
    float _2179 = _2176 * ((cbModelParam._m0[1u].w * (_2164 - _2065)) + _2065);
    float _2182 = fma(_2179, cbSceneParam._m0[89u].z, fma(_2178, cbSceneParam._m0[89u].y, _2177 * cbSceneParam._m0[89u].x));
    float _2185 = fma(_2179, cbSceneParam._m0[90u].z, fma(_2178, cbSceneParam._m0[90u].y, _2177 * cbSceneParam._m0[90u].x));
    float _2188 = fma(_2179, cbSceneParam._m0[91u].z, fma(_2178, cbSceneParam._m0[91u].y, _2177 * cbSceneParam._m0[91u].x));
    float _2222 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2226 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2230 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2234 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2235 = _2222 / _2234;
    float _2236 = _2226 / _2234;
    float _2237 = _2230 / _2234;
    float _2384;
    float _2385;
    float _2386;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2264 = ((uint(_2237 > cbSceneParam._m0[59u].y) + uint(_2237 > cbSceneParam._m0[59u].x)) + uint(_2237 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2265 = _2264 + 43u;
        uint _2273 = _2264 + 44u;
        uint _2281 = _2264 + 45u;
        uint _2289 = _2264 + 46u;
        float _2300 = fma(_2234, cbSceneParam._m0[_2265].w, fma(_2230, cbSceneParam._m0[_2265].z, fma(_2226, cbSceneParam._m0[_2265].y, _2222 * cbSceneParam._m0[_2265].x)));
        float _2304 = fma(_2234, cbSceneParam._m0[_2273].w, fma(_2230, cbSceneParam._m0[_2273].z, fma(_2226, cbSceneParam._m0[_2273].y, _2222 * cbSceneParam._m0[_2273].x)));
        float _2312 = fma(_2234, cbSceneParam._m0[_2289].w, fma(_2230, cbSceneParam._m0[_2289].z, fma(_2226, cbSceneParam._m0[_2289].y, _2222 * cbSceneParam._m0[_2289].x)));
        float _2317 = cbSceneParam._m0[33u].z * _2312;
        float _2319 = cbSceneParam._m0[33u].w * _2312;
        float _2322 = fma(_2234, cbSceneParam._m0[_2281].w, fma(_2230, cbSceneParam._m0[_2281].z, fma(_2226, cbSceneParam._m0[_2281].y, _2222 * cbSceneParam._m0[_2281].x))) / _2312;
        float _2370 = (cbSceneParam._m0[33u].x - sqrt(((_2236 * _2236) + (_2235 * _2235)) + (_2237 * _2237))) * cbSceneParam._m0[33u].y;
        float _4785 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2377 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2317 + _2300) / _2312, (_2319 + _2304) / _2312), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2319 + _2300) / _2312, (_2304 - _2317) / _2312), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2300 - _2317) / _2312, (_2304 - _2319) / _2312), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2300 - _2319) / _2312, (_2317 + _2304) / _2312), _2322), 0.0)).x), vec4(0.25)));
        _2384 = 1.0 - (_2377 * cbSceneParam._m0[34u].x);
        _2385 = 1.0 - (_2377 * cbSceneParam._m0[34u].y);
        _2386 = 1.0 - (_2377 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2384 = 1.0;
        _2385 = 1.0;
        _2386 = 1.0;
    }
    float _2450;
    float _2452;
    float _2454;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2438 = fma(_2234, cbSceneParam._m0[63u].w, fma(_2230, cbSceneParam._m0[63u].z, fma(_2226, cbSceneParam._m0[63u].y, _2222 * cbSceneParam._m0[63u].x)));
        float _2439 = fma(_2234, cbSceneParam._m0[60u].w, fma(_2230, cbSceneParam._m0[60u].z, fma(_2226, cbSceneParam._m0[60u].y, _2222 * cbSceneParam._m0[60u].x))) / _2438;
        float _2440 = fma(_2234, cbSceneParam._m0[61u].w, fma(_2230, cbSceneParam._m0[61u].z, fma(_2226, cbSceneParam._m0[61u].y, _2222 * cbSceneParam._m0[61u].x))) / _2438;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2439 >= cbSceneParam._m0[64u].x) && (_2440 >= cbSceneParam._m0[64u].y)) && (_2439 <= cbSceneParam._m0[64u].z)) && (_2440 <= cbSceneParam._m0[64u].w))
        {
            float _2578 = fma(_2234, cbSceneParam._m0[62u].w, fma(_2230, cbSceneParam._m0[62u].z, fma(_2226, cbSceneParam._m0[62u].y, _2222 * cbSceneParam._m0[62u].x))) / _2438;
            float _2582 = isnan(cbSceneParam._m0[41u].w) ? _2578 : (isnan(_2578) ? cbSceneParam._m0[41u].w : max(_2578, cbSceneParam._m0[41u].w));
            float _2625 = (cbSceneParam._m0[33u].x - sqrt(((_2236 * _2236) + (_2235 * _2235)) + (_2237 * _2237))) * cbSceneParam._m0[33u].y;
            float _4801 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
            float _2632 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2439, cbSceneParam._m0[33u].w + _2440), _2582), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2439, _2440 - cbSceneParam._m0[33u].z), _2582), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2439 - cbSceneParam._m0[33u].z, _2440 - cbSceneParam._m0[33u].w), _2582), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2439 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2440), _2582), 0.0)).x), vec4(0.25)));
            float _2636 = 1.0 - (_2632 * cbSceneParam._m0[34u].x);
            float _2637 = 1.0 - (_2632 * cbSceneParam._m0[34u].y);
            float _2638 = 1.0 - (_2632 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2638) ? _2386 : (isnan(_2386) ? _2638 : min(_2386, _2638));
            frontier_phi_37_36_ladder_1 = isnan(_2637) ? _2385 : (isnan(_2385) ? _2637 : min(_2385, _2637));
            frontier_phi_37_36_ladder_2 = isnan(_2636) ? _2384 : (isnan(_2384) ? _2636 : min(_2384, _2636));
        }
        else
        {
            frontier_phi_37_36_ladder = _2386;
            frontier_phi_37_36_ladder_1 = _2385;
            frontier_phi_37_36_ladder_2 = _2384;
        }
        _2450 = frontier_phi_37_36_ladder_2;
        _2452 = frontier_phi_37_36_ladder_1;
        _2454 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2450 = _2384;
        _2452 = _2385;
        _2454 = _2386;
    }
    uvec4 _2459 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2461 = _2459.x * 14u;
    uint _2462 = _2461 + 13u;
    float _2469 = _1134 + (-1.0);
    float _2474 = (cbLight._m0[_2462].x * _2469) + 1.0;
    float _2475 = (cbLight._m0[_2462].y * _2469) + 1.0;
    float _2476 = (cbLight._m0[_2462].z * _2469) + 1.0;
    float _2477 = (cbLight._m0[_2462].w * _2469) + 1.0;
    uint _2478 = _2461 + 5u;
    float _2484 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
    uint _2488 = _2461 + 4u;
    float _2497 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
    uint _2501 = _2461 | 1u;
    float _2512 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_973, _974, _975));
    float _2515 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_973, _974, _975));
    float _4837 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _4848 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2520 = (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * 0.3183098733425140380859375;
    float _2522 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * 0.3183098733425140380859375;
    float _2529 = ((cbLight._m0[_2478].x * _2484) * _2522) + (((cbLight._m0[_2488].x * _2450) * _2497) * _2520);
    float _2530 = ((_2484 * cbLight._m0[_2478].y) * _2522) + (((cbLight._m0[_2488].y * _2452) * _2497) * _2520);
    float _2531 = ((_2484 * cbLight._m0[_2478].z) * _2522) + (((cbLight._m0[_2488].z * _2454) * _2497) * _2520);
    uvec4 _2535 = floatBitsToUint(cbLight._m0[_2461 + 12u]);
    bool _2537 = _2535.x == 0u;
    float _2639;
    float _2641;
    float _2643;
    if (_2537)
    {
        _2639 = _2529;
        _2641 = _2530;
        _2643 = _2531;
    }
    else
    {
        uint _2647 = _2461 + 6u;
        float _2663 = (dot(vec3(cbLight._m0[_2461 + 2u].xyz), vec3(_973, _974, _975)) * 0.5) + 0.5;
        float _2664 = _2663 * _2663;
        float _4859 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2665 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
        float _2666 = isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0));
        _2639 = (((cbLight._m0[_2647].x * 0.3183098733425140380859375) * _2665) * _2666) + _2529;
        _2641 = (((cbLight._m0[_2647].y * 0.3183098733425140380859375) * _2665) * _2666) + _2530;
        _2643 = (((cbLight._m0[_2647].z * 0.3183098733425140380859375) * _2665) * _2666) + _2531;
    }
    bool _2646 = _2535.y == 0u;
    float _2701;
    float _2703;
    float _2705;
    if (_2646)
    {
        _2701 = _2639;
        _2703 = _2641;
        _2705 = _2643;
    }
    else
    {
        uint _2863 = _2461 + 7u;
        float _2879 = (dot(vec3(cbLight._m0[_2461 + 3u].xyz), vec3(_973, _974, _975)) * 0.5) + 0.5;
        float _2880 = _2879 * _2879;
        float _4875 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2881 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2882 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
        _2701 = (((cbLight._m0[_2863].x * 0.3183098733425140380859375) * _2881) * _2882) + _2639;
        _2703 = (((cbLight._m0[_2863].y * 0.3183098733425140380859375) * _2881) * _2882) + _2641;
        _2705 = (((cbLight._m0[_2863].z * 0.3183098733425140380859375) * _2881) * _2882) + _2643;
    }
    uint _2708 = _2461 + 8u;
    float _2721 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _976) * 0.949999988079071044921875);
    float _2722 = _2721 * _2721;
    float _2723 = cbLight._m0[_2461].x + _1051;
    float _2724 = cbLight._m0[_2461].y + _1052;
    float _2725 = cbLight._m0[_2461].z + _1053;
    float _2729 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
    float _2730 = _2729 * _2723;
    float _2731 = _2729 * _2724;
    float _2732 = _2729 * _2725;
    float _2733 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2461].xyz));
    float _4891 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2736 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
    float _4902 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _2737 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
    float _2738 = dot(vec3(_973, _974, _975), vec3(_2730, _2731, _2732));
    float _4913 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2741 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
    float _2742 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2730, _2731, _2732));
    float _4924 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2746 = _2722 * _2722;
    float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
    float _2761 = (exp2(log2(1.0 - (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2762 = 1.0 - _2722;
    float _2773 = (0.5 / (((_2737 * ((_2736 * _2762) + _2722)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2762) + _2722) * _2736))) * _2736;
    float _4935 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
    float _2775 = (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
    uint _2789 = _2461 + 9u;
    float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2501].w)) * _976) * 0.949999988079071044921875);
    float _2801 = _2800 * _2800;
    float _2802 = cbLight._m0[_2501].x + _1051;
    float _2803 = cbLight._m0[_2501].y + _1052;
    float _2804 = cbLight._m0[_2501].z + _1053;
    float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
    float _2809 = _2808 * _2802;
    float _2810 = _2808 * _2803;
    float _2811 = _2808 * _2804;
    float _2812 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2501].xyz));
    float _4946 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2815 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
    float _2816 = dot(vec3(_973, _974, _975), vec3(_2809, _2810, _2811));
    float _4957 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
    float _2819 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
    float _2820 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_2809, _2810, _2811));
    float _4968 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
    float _2824 = _2801 * _2801;
    float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
    float _2837 = (exp2(log2(1.0 - (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2838 = 1.0 - _2801;
    float _2848 = (0.5 / (((_2737 * ((_2815 * _2838) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2838) + _2801) * _2815))) * _2815;
    float _4979 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
    float _2850 = (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
    float _2860 = (((_2837 * cbLight._m0[_2789].x) * _2850) * _2484) + ((((cbLight._m0[_2708].x * _2450) * _2761) * _2775) * _2497);
    float _2861 = (((_2837 * cbLight._m0[_2789].y) * _2850) * _2484) + ((((cbLight._m0[_2708].y * _2452) * _2761) * _2775) * _2497);
    float _2862 = (((_2837 * cbLight._m0[_2789].z) * _2850) * _2484) + ((((cbLight._m0[_2708].z * _2454) * _2761) * _2775) * _2497);
    float _2918;
    float _2920;
    float _2922;
    if (_2537)
    {
        _2918 = _2860;
        _2920 = _2861;
        _2922 = _2862;
    }
    else
    {
        uint _2924 = _2461 + 2u;
        uint _2928 = _2461 + 10u;
        float _2942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2924].w)) * _976) * 0.949999988079071044921875);
        float _2943 = _2942 * _2942;
        float _2944 = cbLight._m0[_2924].x + _1051;
        float _2945 = cbLight._m0[_2924].y + _1052;
        float _2946 = cbLight._m0[_2924].z + _1053;
        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
        float _2951 = _2950 * _2944;
        float _2952 = _2950 * _2945;
        float _2953 = _2950 * _2946;
        float _2954 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2924].xyz));
        float _4990 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2957 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
        float _2958 = dot(vec3(_973, _974, _975), vec3(_2951, _2952, _2953));
        float _5001 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2961 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
        float _2962 = dot(vec3(cbLight._m0[_2924].xyz), vec3(_2951, _2952, _2953));
        float _5012 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2966 = _2943 * _2943;
        float _2970 = ((_2961 * _2961) * (_2966 + (-1.0))) + 1.0;
        float _2979 = (exp2(log2(1.0 - (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2980 = 1.0 - _2943;
        float _2990 = (0.5 / (((_2737 * ((_2957 * _2980) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2980) + _2943) * _2957))) * _2957;
        float _5023 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2992 = (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0))) * (_2966 / ((_2970 * _2970) * 3.141590118408203125));
        float _2993 = isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0));
        _2918 = (((_2979 * cbLight._m0[_2928].x) * _2992) * _2993) + _2860;
        _2920 = (((_2979 * cbLight._m0[_2928].y) * _2992) * _2993) + _2861;
        _2922 = (((_2979 * cbLight._m0[_2928].z) * _2992) * _2993) + _2862;
    }
    float _3024;
    float _3026;
    float _3028;
    if (_2646)
    {
        _3024 = _2918;
        _3026 = _2920;
        _3028 = _2922;
    }
    else
    {
        uint _3035 = _2461 + 3u;
        uint _3039 = _2461 + 11u;
        float _3053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3035].w)) * _976) * 0.949999988079071044921875);
        float _3054 = _3053 * _3053;
        float _3055 = cbLight._m0[_3035].x + _1051;
        float _3056 = cbLight._m0[_3035].y + _1052;
        float _3057 = cbLight._m0[_3035].z + _1053;
        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
        float _3062 = _3061 * _3055;
        float _3063 = _3061 * _3056;
        float _3064 = _3061 * _3057;
        float _3065 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_3035].xyz));
        float _5039 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3068 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
        float _3069 = dot(vec3(_973, _974, _975), vec3(_3062, _3063, _3064));
        float _5050 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3072 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
        float _3073 = dot(vec3(cbLight._m0[_3035].xyz), vec3(_3062, _3063, _3064));
        float _5061 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
        float _3077 = _3054 * _3054;
        float _3081 = ((_3072 * _3072) * (_3077 + (-1.0))) + 1.0;
        float _3090 = (exp2(log2(1.0 - (isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3091 = 1.0 - _3054;
        float _3101 = (0.5 / (((_2737 * ((_3068 * _3091) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _3091) + _3054) * _3068))) * _3068;
        float _5072 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        float _3103 = (isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3077 / ((_3081 * _3081) * 3.141590118408203125));
        float _3104 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
        _3024 = (((_3090 * cbLight._m0[_3039].x) * _3103) * _3104) + _2918;
        _3026 = (((_3090 * cbLight._m0[_3039].y) * _3103) * _3104) + _2920;
        _3028 = (((_3090 * cbLight._m0[_3039].z) * _3103) * _3104) + _2922;
    }
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    float _3178;
    float _3180;
    if (_2459.y == 0u)
    {
        uvec4 _3125 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3126 = _3125.x;
        uint _3137 = uint((float(_3125.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1072) / _3126))) + floor(float(uint(cbSceneParam._m0[85u].x * _1071) / _3126)));
        float _3147 = (log2(_2237 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3148 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
        uint _3151 = uint(isnan(14.0) ? _3148 : (isnan(_3148) ? 14.0 : min(_3148, 14.0)));
        uvec4 _3156 = texelFetch(g_lightClusterGridBuffer, int(((_3151 << 2u) + (_3137 << 6u)) >> 2u));
        uint _3157 = _3156.x;
        uint _3158 = _3125.z;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        if (((((1u << ((_3158 >> 4u) & 15u)) + 4294967295u) & _3157) == 0u) || ((_3158 & 240u) == 0u))
        {
            _3237 = 0.0;
            _3239 = 0.0;
            _3241 = 0.0;
            _3243 = 0.0;
            _3245 = 0.0;
            _3247 = 0.0;
        }
        else
        {
            float _3238;
            float _3240;
            float _3242;
            float _3244;
            float _3246;
            float _3248;
            float _3389 = 0.0;
            float _3390 = 0.0;
            float _3391 = 0.0;
            float _3392 = 0.0;
            float _3393 = 0.0;
            float _3394 = 0.0;
            uint _3395 = 0u;
            uint _3404;
            bool _3405;
            for (;;)
            {
                _3404 = texelFetch(g_lightClassification, int((((_3151 << 5u) + (_3137 << 9u)) + (_3395 << 2u)) >> 2u)).x;
                _3405 = _3404 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3405)
                {
                    frontier_phi_71_pred = _3394;
                    frontier_phi_71_pred_1 = _3393;
                    frontier_phi_71_pred_2 = _3392;
                    frontier_phi_71_pred_3 = _3391;
                    frontier_phi_71_pred_4 = _3390;
                    frontier_phi_71_pred_5 = _3389;
                }
                else
                {
                    float _3534;
                    float _3535;
                    float _3536;
                    float _3537;
                    float _3538;
                    float _3539;
                    uint _3540;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3391;
                    _3537 = _3392;
                    _3538 = _3393;
                    _3539 = _3394;
                    _3540 = _3404;
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    for (;;)
                    {
                        uint _3544 = uint(findLSB(_3540)) + (_3395 << 5u);
                        uint _3541 = (_3540 + 4294967295u) & _3540;
                        uint _3546 = _3544 * 48u;
                        vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3546)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 3u)).x));
                        uint _3566 = (_3544 * 48u) + 4u;
                        vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3566)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 3u)).x));
                        uint _3585 = (_3544 * 48u) + 8u;
                        vec3 _3596 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3585)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 2u)).x));
                        float _3600 = _3560.x - _2235;
                        float _3601 = _3560.y - _2236;
                        float _3602 = _3560.z - _2237;
                        float _3603 = dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602));
                        float _3606 = inversesqrt(_3603);
                        float _3607 = _3606 * _3600;
                        float _3608 = _3606 * _3601;
                        float _3609 = _3606 * _3602;
                        float _3610 = dot(vec3(_1090, _1093, _1096), vec3(_3607, _3608, _3609));
                        float _3615 = 1.0 - (_3603 * _3560.w);
                        float _5098 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3616 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
                        float _3617 = sqrt(_3603) * _3579.w;
                        float _3620 = 1.39999997615814208984375 / (_3617 + 1.39999997615814208984375);
                        float _3621 = _3620 * _3620;
                        float _3624 = ((1.0 - _3621) * _3610) + _3621;
                        float _3627 = _3617 * _3617;
                        float _3631 = ((isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0))) * _3616) / ((_3627 * 0.699999988079071044921875) + 1.0);
                        float _3635 = (-0.0) - _2235;
                        float _3636 = (-0.0) - _2236;
                        float _3637 = (-0.0) - _2237;
                        float _3641 = inversesqrt(dot(vec3(_3635, _3636, _3637), vec3(_3635, _3636, _3637)));
                        float _3642 = _3641 * _3635;
                        float _3643 = _3641 * _3636;
                        float _3644 = _3641 * _3637;
                        float _3651 = exp2(log2(1.0 / ((_3627 * 3.5) + 5.0)) * 0.25);
                        float _3652 = 1.0 - _1150;
                        float _3659 = sqrt(1.0 - ((1.0 - (_3652 * _3652)) * (1.0 - (_3651 * _3651))));
                        float _3660 = _3659 * _3659;
                        float _3661 = _3660 * _3660;
                        float _3662 = _3642 + _3607;
                        float _3663 = _3643 + _3608;
                        float _3664 = _3644 + _3609;
                        float _3668 = inversesqrt(dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664)));
                        float _3672 = dot(vec3(_1090, _1093, _1096), vec3(_3642, _3643, _3644));
                        float _5114 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3675 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
                        float _3676 = dot(vec3(_1090, _1093, _1096), vec3(_3668 * _3662, _3668 * _3663, _3668 * _3664));
                        float _5125 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                        float _3679 = isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0));
                        float _3683 = ((_3679 * _3679) * (_3661 + (-1.0))) + 1.0;
                        float _3684 = _3620 * _3660;
                        float _3685 = _3684 * _3684;
                        float _3688 = ((1.0 - _3685) * _3610) + _3685;
                        float _5136 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                        float _3689 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
                        float _3690 = 1.0 - _3660;
                        float _3700 = (0.5 / (((_3689 * ((_3675 * _3690) + _3660)) + 9.9999999392252902907785028219223e-09) + (((_3689 * _3690) + _3660) * _3675))) * _3689;
                        float _5147 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                        float _3711 = (((_3661 * 3.1415927410125732421875) * (isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0)))) / ((_3683 * _3683) * ((_3627 * 2.1991131305694580078125) + 3.141590118408203125))) * _3616;
                        _3464 = (_3631 * _3579.x) + _3537;
                        _3465 = (_3631 * _3579.y) + _3538;
                        _3466 = (_3631 * _3579.z) + _3539;
                        _3461 = (_3711 * _3596.x) + _3534;
                        _3462 = (_3711 * _3596.y) + _3535;
                        _3463 = (_3711 * _3596.z) + _3536;
                        if (_3541 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3463;
                            _3537 = _3464;
                            _3538 = _3465;
                            _3539 = _3466;
                            _3540 = _3541;
                        }
                    }
                    frontier_phi_71_pred = _3466;
                    frontier_phi_71_pred_1 = _3465;
                    frontier_phi_71_pred_2 = _3464;
                    frontier_phi_71_pred_3 = _3463;
                    frontier_phi_71_pred_4 = _3462;
                    frontier_phi_71_pred_5 = _3461;
                }
                _3248 = frontier_phi_71_pred;
                _3246 = frontier_phi_71_pred_1;
                _3244 = frontier_phi_71_pred_2;
                _3242 = frontier_phi_71_pred_3;
                _3240 = frontier_phi_71_pred_4;
                _3238 = frontier_phi_71_pred_5;
                uint _3396 = _3395 + 1u;
                if (_3396 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3389 = _3238;
                    _3390 = _3240;
                    _3391 = _3242;
                    _3392 = _3244;
                    _3393 = _3246;
                    _3394 = _3248;
                    _3395 = _3396;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3237 = _3238;
            _3239 = _3240;
            _3241 = _3242;
            _3243 = _3244;
            _3245 = _3246;
            _3247 = _3248;
        }
        uvec4 _3251 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3252 = _3251.z;
        uint _3254 = (_3252 >> 8u) & 15u;
        float _3357;
        float _3359;
        float _3361;
        float _3363;
        float _3365;
        float _3367;
        if (((4294967295u << _3254) & _3157) == 0u)
        {
            _3357 = _3237;
            _3359 = _3239;
            _3361 = _3241;
            _3363 = _3243;
            _3365 = _3245;
            _3367 = _3247;
        }
        else
        {
            float _3382 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
            float _3383 = _3382 * _2235;
            float _3384 = _3382 * _2236;
            float _3385 = _3382 * _2237;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3254 < ((_3252 >> 12u) & 15u))
            {
                float _3358;
                float _3360;
                float _3362;
                float _3364;
                float _3366;
                float _3368;
                float _3517 = _3237;
                float _3518 = _3239;
                float _3519 = _3241;
                float _3520 = _3243;
                float _3521 = _3245;
                float _3522 = _3247;
                uint _3523 = _3254;
                uint _3532;
                bool _3533;
                for (;;)
                {
                    _3532 = texelFetch(g_lightClassification, int((((_3151 << 5u) + (_3137 << 9u)) + (_3523 << 2u)) >> 2u)).x;
                    _3533 = _3532 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3533)
                    {
                        frontier_phi_82_pred = _3522;
                        frontier_phi_82_pred_1 = _3521;
                        frontier_phi_82_pred_2 = _3520;
                        frontier_phi_82_pred_3 = _3519;
                        frontier_phi_82_pred_4 = _3518;
                        frontier_phi_82_pred_5 = _3517;
                    }
                    else
                    {
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _4022;
                        float _4023;
                        float _3738 = _3517;
                        float _3739 = _3518;
                        float _3740 = _3519;
                        float _3741 = _3520;
                        float _3742 = _3521;
                        float _3743 = _3522;
                        uint _3744 = _3532;
                        uint _3745;
                        vec4 _3770;
                        float _3771;
                        vec4 _3786;
                        vec3 _3798;
                        vec4 _3813;
                        vec4 _3828;
                        float _3874;
                        bool _3875;
                        for (;;)
                        {
                            uint _3755 = ((_3523 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3744));
                            _3745 = (_3744 + 4294967295u) & _3744;
                            uint _3757 = _3755 * 40u;
                            _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            _3771 = _3770.w;
                            uint _3773 = (_3755 * 40u) + 4u;
                            _3786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 3u)).x));
                            uint _3788 = (_3755 * 40u) + 8u;
                            _3798 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 2u)).x));
                            uint _3800 = (_3755 * 40u) + 16u;
                            _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            uint _3815 = (_3755 * 40u) + 20u;
                            _3828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 3u)).x));
                            uint _3830 = (_3755 * 40u) + 24u;
                            vec4 _3843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 3u)).x));
                            uint _3849 = (_3755 * 40u) + 28u;
                            vec4 _3862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 3u)).x));
                            _3874 = fma(_2237, _3862.z, fma(_2236, _3862.y, _3862.x * _2235)) + _3862.w;
                            _3875 = !((fma(_2237, _3843.z, fma(_2236, _3843.y, _3843.x * _2235)) + _3843.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3875)
                            {
                                float _3902 = _3770.x - _2235;
                                float _3903 = _3770.y - _2236;
                                float _3904 = _3770.z - _2237;
                                float _3905 = dot(vec3(_3902, _3903, _3904), vec3(_3902, _3903, _3904));
                                float _3908 = inversesqrt(_3905);
                                float _3909 = _3908 * _3902;
                                float _3910 = _3908 * _3903;
                                float _3911 = _3908 * _3904;
                                float _3915 = 1.0 - (_3905 / (_3771 * _3771));
                                float _5158 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3916 = isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0));
                                float _3920 = sqrt(_3905) * _3786.w;
                                float _3922 = 1.39999997615814208984375 / (_3920 + 1.39999997615814208984375);
                                float _3923 = _3922 * _3922;
                                float _3926 = ((1.0 - _3923) * dot(vec3(_3909, _3910, _3911), vec3(_1090, _1093, _1096))) + _3923;
                                float _3929 = _3920 * _3920;
                                float _3933 = (fma(_2237, _3813.z, fma(_2236, _3813.y, _3813.x * _2235)) + _3813.w) / _3874;
                                float _3934 = (fma(_2237, _3828.z, fma(_2236, _3828.y, _3828.x * _2235)) + _3828.w) / _3874;
                                float _3938 = 1.0 - dot(vec2(_3933, _3934), vec2(_3933, _3934));
                                float _5174 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3939 = isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0));
                                float _3940 = _3939 * (((isnan(0.0) ? _3926 : (isnan(_3926) ? 0.0 : max(_3926, 0.0))) * _3916) / ((_3929 * 0.699999988079071044921875) + 1.0));
                                float _3952 = exp2(log2(1.0 / ((_3929 * 3.5) + 5.0)) * 0.25);
                                float _3953 = 1.0 - _1150;
                                float _3960 = sqrt(1.0 - ((1.0 - (_3953 * _3953)) * (1.0 - (_3952 * _3952))));
                                float _3961 = _3960 * _3960;
                                float _3962 = _3961 * _3961;
                                float _3963 = _3909 - _3383;
                                float _3964 = _3910 - _3384;
                                float _3965 = _3911 - _3385;
                                float _3969 = inversesqrt(dot(vec3(_3963, _3964, _3965), vec3(_3963, _3964, _3965)));
                                float _3973 = dot(vec3(_1090, _1093, _1096), vec3((-0.0) - _3383, (-0.0) - _3384, (-0.0) - _3385));
                                float _5185 = isnan(0.0) ? _3973 : (isnan(_3973) ? 0.0 : max(_3973, 0.0));
                                float _3976 = isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0));
                                float _3977 = dot(vec3(_1090, _1093, _1096), vec3(_3969 * _3963, _3969 * _3964, _3969 * _3965));
                                float _5196 = isnan(0.0) ? _3977 : (isnan(_3977) ? 0.0 : max(_3977, 0.0));
                                float _3980 = isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0));
                                float _3984 = ((_3980 * _3980) * (_3962 + (-1.0))) + 1.0;
                                float _3985 = _3922 * _3961;
                                float _3986 = _3985 * _3985;
                                float _3992 = ((1.0 - _3986) * dot(vec3(_1090, _1093, _1096), vec3(_3909, _3910, _3911))) + _3986;
                                float _5207 = isnan(0.0) ? _3992 : (isnan(_3992) ? 0.0 : max(_3992, 0.0));
                                float _3993 = isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0));
                                float _3994 = 1.0 - _3961;
                                float _4004 = (0.5 / (((_3993 * ((_3976 * _3994) + _3961)) + 9.9999999392252902907785028219223e-09) + (((_3993 * _3994) + _3961) * _3976))) * _3993;
                                float _5218 = isnan(0.0) ? _4004 : (isnan(_4004) ? 0.0 : max(_4004, 0.0));
                                float _4014 = (_3939 * _3916) * (((_3962 * 3.1415927410125732421875) * (isnan(1.0) ? _5218 : (isnan(_5218) ? 1.0 : min(_5218, 1.0)))) / ((_3984 * _3984) * ((_3929 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3940 * _3786.z;
                                frontier_phi_88_pred_1 = _3940 * _3786.y;
                                frontier_phi_88_pred_2 = _3940 * _3786.x;
                                frontier_phi_88_pred_3 = _4014 * _3798.z;
                                frontier_phi_88_pred_4 = _4014 * _3798.y;
                                frontier_phi_88_pred_5 = _4014 * _3798.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4023 = frontier_phi_88_pred;
                            _4022 = frontier_phi_88_pred_1;
                            _4021 = frontier_phi_88_pred_2;
                            _4020 = frontier_phi_88_pred_3;
                            _4019 = frontier_phi_88_pred_4;
                            _4018 = frontier_phi_88_pred_5;
                            _3728 = _4021 + _3741;
                            _3729 = _4022 + _3742;
                            _3730 = _4023 + _3743;
                            _3725 = _4018 + _3738;
                            _3726 = _4019 + _3739;
                            _3727 = _4020 + _3740;
                            if (_3745 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3728;
                                _3742 = _3729;
                                _3743 = _3730;
                                _3744 = _3745;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3730;
                        frontier_phi_82_pred_1 = _3729;
                        frontier_phi_82_pred_2 = _3728;
                        frontier_phi_82_pred_3 = _3727;
                        frontier_phi_82_pred_4 = _3726;
                        frontier_phi_82_pred_5 = _3725;
                    }
                    _3368 = frontier_phi_82_pred;
                    _3366 = frontier_phi_82_pred_1;
                    _3364 = frontier_phi_82_pred_2;
                    _3362 = frontier_phi_82_pred_3;
                    _3360 = frontier_phi_82_pred_4;
                    _3358 = frontier_phi_82_pred_5;
                    uint _3524 = _3523 + 1u;
                    if (_3524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3517 = _3358;
                        _3518 = _3360;
                        _3519 = _3362;
                        _3520 = _3364;
                        _3521 = _3366;
                        _3522 = _3368;
                        _3523 = _3524;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3364;
                frontier_phi_63_64_ladder_1 = _3368;
                frontier_phi_63_64_ladder_2 = _3366;
                frontier_phi_63_64_ladder_3 = _3362;
                frontier_phi_63_64_ladder_4 = _3360;
                frontier_phi_63_64_ladder_5 = _3358;
            }
            else
            {
                frontier_phi_63_64_ladder = _3243;
                frontier_phi_63_64_ladder_1 = _3247;
                frontier_phi_63_64_ladder_2 = _3245;
                frontier_phi_63_64_ladder_3 = _3241;
                frontier_phi_63_64_ladder_4 = _3239;
                frontier_phi_63_64_ladder_5 = _3237;
            }
            _3357 = frontier_phi_63_64_ladder_5;
            _3359 = frontier_phi_63_64_ladder_4;
            _3361 = frontier_phi_63_64_ladder_3;
            _3363 = frontier_phi_63_64_ladder;
            _3365 = frontier_phi_63_64_ladder_2;
            _3367 = frontier_phi_63_64_ladder_1;
        }
        float _3372 = isnan(1.0) ? _1134 : (isnan(_1134) ? 1.0 : min(_1134, 1.0));
        _3170 = (_3372 * _3363) + _2701;
        _3172 = (_3372 * _3365) + _2703;
        _3174 = (_3372 * _3367) + _2705;
        _3176 = ((_3357 * 0.039999999105930328369140625) * _3372) + _3024;
        _3178 = ((_3359 * 0.039999999105930328369140625) * _3372) + _3026;
        _3180 = ((_3361 * 0.039999999105930328369140625) * _3372) + _3028;
    }
    else
    {
        _3170 = _2701;
        _3172 = _2703;
        _3174 = _2705;
        _3176 = _3024;
        _3178 = _3026;
        _3180 = _3028;
    }
    float _5234 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _5245 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _5256 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _3197 = ((isnan(1.0) ? _5234 : (isnan(_5234) ? 1.0 : min(_5234, 1.0))) * (_3170 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1134))) + ((_3176 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1969)) * cbPerFrame._m0[3u].x);
    float _3198 = ((isnan(1.0) ? _5245 : (isnan(_5245) ? 1.0 : min(_5245, 1.0))) * (_3172 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1134))) + ((_3178 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1969)) * cbPerFrame._m0[3u].x);
    float _3199 = ((isnan(1.0) ? _5256 : (isnan(_5256) ? 1.0 : min(_5256, 1.0))) * (_3174 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1134))) + ((_3180 + ((isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))) * _1969)) * cbPerFrame._m0[3u].x);
    uint _3200 = _289 + 6u;
    float _3208 = _1071 / cbSceneParam._m0[86u].x;
    float _3209 = _1072 / cbSceneParam._m0[86u].y;
    vec4 _3223 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3208, _3209, (log2((isnan(cbSceneParam._m0[77u].w) ? _994 : (isnan(_994) ? cbSceneParam._m0[77u].w : min(_994, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3225 = _3223.x;
    float _3226 = _3223.y;
    float _3227 = _3223.z;
    float _3228 = _3223.w;
    float _3299;
    float _3301;
    float _3303;
    float _3305;
    if (_994 > cbSceneParam._m0[78u].w)
    {
        float _3262 = isnan(_994) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _994 : min(cbSceneParam._m0[80u].w, _994));
        float _3263 = _3262 / _994;
        float _3274 = _3263 * _1044;
        float _3275 = _1045 * _3263;
        float _3276 = (-0.0) - _3275;
        float _3277 = _3263 * _1046;
        float _3279 = (cbSceneParam._m0[77u].w * _3276) / _3262;
        float _3280 = _3279 + cbSceneParam._m0[79u].w;
        float _3281 = cbSceneParam._m0[79u].w - _3275;
        float _3287 = sqrt(((_3274 * _3274) + (_3275 * _3275)) + (_3277 * _3277));
        float _3290 = (1.0 - (cbSceneParam._m0[77u].w / _3262)) * _3287;
        float _3295 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3297 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3474;
        if (abs((_3276 - _3279) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3474 = ((((_3280 > 0.0) ? exp2(_3295 * _3280) : (2.0 - exp2(_3297 * _3280))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3290;
        }
        else
        {
            float _3418 = 1.0 / cbSceneParam._m0[80u].x;
            float _3419 = isnan(_3281) ? _3280 : (isnan(_3280) ? _3281 : max(_3280, _3281));
            float _3420 = isnan(_3281) ? _3280 : (isnan(_3280) ? _3281 : min(_3280, _3281));
            float _3429 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : min(_3419, 0.0));
            float _3430 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : min(_3420, 0.0));
            _3474 = ((abs(_3287 / _3276) * cbSceneParam._m0[80u].y) * ((((_3429 - _3430) * 2.0) - ((exp2(_3295 * (isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0)))) - exp2(_3295 * (isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))))) * _3418)) - ((exp2(_3297 * _3429) - exp2(_3297 * _3430)) * _3418))) + (_3290 * cbSceneParam._m0[80u].z);
        }
        vec4 _3476 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3208, _3209, 1.0), 0.0);
        float _3485 = exp2((_3474 * (-1.44269502162933349609375)) * (1.0 - _3476.w));
        float _3486 = log2(_3485);
        float _3502 = log2(_3228);
        _3299 = (exp2(_3502 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3486 * cbSceneParam._m0[78u].x)) * _3476.x) / cbSceneParam._m0[78u].x)) + _3225;
        _3301 = (exp2(_3502 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3486 * cbSceneParam._m0[78u].y)) * _3476.y) / cbSceneParam._m0[78u].y)) + _3226;
        _3303 = (exp2(_3502 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3486 * cbSceneParam._m0[78u].z)) * _3476.z) / cbSceneParam._m0[78u].z)) + _3227;
        _3305 = _3485 * _3228;
    }
    else
    {
        _3299 = _3225;
        _3301 = _3226;
        _3303 = _3227;
        _3305 = _3228;
    }
    bool _3512;
    vec4 _3315;
    vec4 _3337;
    float _3339;
    float _3343;
    float _3344;
    float _3345;
    float _3346;
    bool _3356;
    for (;;)
    {
        _3315 = cbMatDynParam._m0[0u];
        float _3317 = roundEven(_3315.y);
        bool _3318 = _3317 == 3.0;
        float _3319 = log2(_3305);
        float _3326 = exp2(_3319 * cbSceneParam._m0[78u].x) * _3197;
        float _3327 = exp2(_3319 * cbSceneParam._m0[78u].y) * _3198;
        float _3328 = exp2(_3319 * cbSceneParam._m0[78u].z) * _3199;
        float _3335 = _1060 + (-0.5);
        _3337 = cbMtdParam._m0[1u];
        _3339 = _3337.y * _3335;
        float _3342 = (_3317 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3343 = _3342 * (_3318 ? _3326 : (_3326 + (cbSceneParam._m0[72u].w * _3299)));
        _3344 = _3342 * (_3318 ? _3327 : (_3327 + (cbSceneParam._m0[72u].w * _3301)));
        _3345 = _3342 * (_3318 ? _3328 : (_3328 + (cbSceneParam._m0[72u].w * _3303)));
        _3346 = _3335 * 0.999000012874603271484375;
        _3356 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3356)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3346) < 0.5)
            {
                _3512 = true;
                break;
            }
        }
        uint _3453 = _1109 + uint(_3315.w);
        if ((cbInstanceData._m0[_3453].w < 1.0) && ((cbInstanceData._m0[_3453].w + _3346) < 0.5))
        {
            _3512 = true;
            break;
        }
        if ((_3339 + 1.0) < _3337.x)
        {
            _3512 = true;
            break;
        }
        _3512 = false;
        break;
    }
    float _3716;
    if (_3512)
    {
        discard_state = true;
        _3716 = 0.0;
    }
    else
    {
        _3716 = cbInstanceData._m0[_3200].w;
    }
    SV_Target.x = _3343;
    SV_Target.y = _3344;
    SV_Target.z = _3345;
    SV_Target.w = _3716;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3200].w;
    discard_exit();
}


