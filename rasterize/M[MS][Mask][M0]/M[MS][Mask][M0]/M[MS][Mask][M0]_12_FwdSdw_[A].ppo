#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1192;
float _3836;
float _3837;
float _3838;
float _3839;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _304.x * cbMtdParam._m0[11u].x;
    float _310 = _304.y * cbMtdParam._m0[11u].y;
    float _311 = _304.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _386 = _384.x;
    float _398 = dot(vec4(_386, _384.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _415 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_386 - _398) * cbMtdParam._m0[24u].z) + _398) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3848 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _429 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _280.x) * ((_416 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309);
    float _432 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _280.y) * ((_416 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310);
    float _435 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _280.z) * ((_416 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311);
    vec4 _453 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    float _483 = ((_453.z - _474) * _416) + _474;
    float _486 = ((((_453.x - _472) * _416) + _472) * 2.0) + (-1.0);
    float _488 = ((((_453.y - _473) * _416) + _473) * 2.0) + (-1.0);
    float _489 = dot(vec2(_486, _488), vec2(_486, _488));
    float _3859 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _494 = sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))));
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _537 = _535.x;
    float _538 = 1.0 - _537;
    float _551 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_537 - _538) * cbMtdParam._m0[24u].w) + _538) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3870 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _559 = (_552 * (cbMtdParam._m0[17u].x - _429)) + _429;
    float _560 = (_552 * (cbMtdParam._m0[17u].y - _432)) + _432;
    float _561 = (_552 * (cbMtdParam._m0[17u].z - _435)) + _435;
    float _565 = (cbMtdParam._m0[19u].w * (_510.z - _483)) + _483;
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _585 = (_578.x * 2.0) + (-1.0);
    float _586 = (_578.y * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _3881 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _595 = (_552 * (_578.z - _565)) + _565;
    float _598 = (((_510.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _486;
    float _599 = (((_510.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _488;
    float _611 = (((_585 - _598) + (cbMtdParam._m0[21u].x * _598)) * _552) + _598;
    float _612 = (((_586 - _599) + (cbMtdParam._m0[21u].x * _599)) * _552) + _599;
    float _613 = (_552 * (sqrt(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) - _494)) + _494;
    float _617 = cbMtdParam._m0[22u].x + _510.w;
    float _620 = fma(_613, _227 * NORMAL.x, fma(_612, _234 * TANGENT.x, (_220 * _212) * _611));
    float _623 = fma(_613, _227 * NORMAL.y, fma(_612, _234 * TANGENT.y, (_220 * _213) * _611));
    float _626 = fma(_613, _227 * NORMAL.z, fma(_612, _234 * TANGENT.z, (_220 * _214) * _611));
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    float _631 = _630 * _620;
    float _632 = _630 * _623;
    float _633 = _630 * _626;
    float _3892 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _634 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3914 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3925 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3936 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _652 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _703 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _693);
    float _704 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _693);
    float _705 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _693);
    float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
    float _710 = _703 * _709;
    float _711 = _704 * _709;
    float _712 = _705 * _709;
    vec4 _717 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _719 = _717.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _873 = sqrt(((_703 * _703) + (_704 * _704)) + (_705 * _705));
        float _879 = (cbMatDynParam._m0[5u].x * _873) + cbMatDynParam._m0[5u].y;
        float _3947 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _884 = (cbMatDynParam._m0[5u].z * _873) + cbMatDynParam._m0[5u].w;
        float _3958 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) - _880)) + _880) < ((_719 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _749 = fma(_633, cbSceneParam._m0[5u].z, fma(_632, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _631));
    float _752 = fma(_633, cbSceneParam._m0[6u].z, fma(_632, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _631));
    float _755 = fma(_633, cbSceneParam._m0[7u].z, fma(_632, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _631));
    uint _768 = _240 + 9u;
    uint _769 = _768 + uint(cbMatDynParam._m0[0u].w);
    float _775 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_769].x;
    float _776 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_769].y;
    float _777 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_769].z;
    float _3969 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    vec4 _789 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _793 = ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * TEXCOORD_5.w) * _789.x;
    float _794 = dot(vec3(_631, _632, _633), vec3(_710, _711, _712));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _631) - _710;
    float _802 = (_797 * _632) - _711;
    float _803 = (_797 * _633) - _712;
    float _807 = abs(dot(vec3(_710, _711, _712), vec3(_631, _632, _633)));
    float _4002 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_634);
    float _822 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1191;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _916 = fma(_862, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _854));
        float _920 = fma(_862, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _854));
        float _924 = fma(_862, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _854));
        float _949 = _854 + _631;
        float _950 = _858 + _632;
        float _951 = _862 + _633;
        float _961 = fma(_951, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949)) - _916;
        float _962 = fma(_951, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949)) - _920;
        float _963 = fma(_951, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949)) - _924;
        float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
        float _980 = ((_967 * _961) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_916 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_967 * _962) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_920 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_967 * _963) / cbModelParam._m0[34u].z) + ((((((_924 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        float _1019 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_985.x + (-0.5));
        float _1021 = _1019 * (_985.y + (-0.5));
        float _1022 = _1019 * (_985.z + (-0.5));
        float _1029 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_992.x + (-0.5));
        float _1031 = _1029 * (_992.y + (-0.5));
        float _1032 = _1029 * (_992.z + (-0.5));
        float _1039 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_999.x + (-0.5));
        float _1041 = _1039 * (_999.y + (-0.5));
        float _1042 = _1039 * (_999.z + (-0.5));
        float _1049 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1006.x + (-0.5));
        float _1051 = _1049 * (_1006.y + (-0.5));
        float _1052 = _1049 * (_1006.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = _1020 * 0.5;
        float _1057 = _1030 * 0.5;
        float _1058 = _1040 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1073 = (dot(vec3(_631, _632, _633), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1083 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _4050 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1085 + 1.0))) + _1090) * _1053;
        float _1100 = _1021 * 0.5;
        float _1101 = _1031 * 0.5;
        float _1102 = _1041 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_631, _632, _633), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _4083 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1127 + 1.0))) + _1132) * _1054;
        float _1142 = _1022 * 0.5;
        float _1143 = _1032 * 0.5;
        float _1144 = _1042 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_631, _632, _633), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _4116 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1169 + 1.0))) + _1174) * _1055;
        _1191 = _1022;
        _1193 = _1021;
        _1194 = _1020;
        _1195 = _1032;
        _1196 = _1031;
        _1197 = _1030;
        _1198 = _1042;
        _1199 = _1041;
        _1200 = _1040;
        _1201 = _1055;
        _1202 = _1054;
        _1203 = _1053;
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _1192;
        _1193 = _1192;
        _1194 = _1192;
        _1195 = _1192;
        _1196 = _1192;
        _1197 = _1192;
        _1198 = _1192;
        _1199 = _1192;
        _1200 = _1192;
        _1201 = _1192;
        _1202 = _1192;
        _1203 = _1192;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1234 = fma(_862, cbModelParam._m0[30u].z, fma(_858, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _854));
        float _1238 = fma(_862, cbModelParam._m0[31u].z, fma(_858, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _854));
        float _1242 = fma(_862, cbModelParam._m0[32u].z, fma(_858, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _854));
        float _1265 = _854 + _631;
        float _1266 = _858 + _632;
        float _1267 = _862 + _633;
        float _1277 = fma(_1267, cbModelParam._m0[30u].z, fma(_1266, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1265)) - _1234;
        float _1278 = fma(_1267, cbModelParam._m0[31u].z, fma(_1266, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1265)) - _1238;
        float _1279 = fma(_1267, cbModelParam._m0[32u].z, fma(_1266, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1265)) - _1242;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1234 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1238 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[35u].z) + ((((((_1242 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1333 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1300.x + (-0.5));
        float _1335 = _1333 * (_1300.y + (-0.5));
        float _1336 = _1333 * (_1300.z + (-0.5));
        float _1343 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1307.x + (-0.5));
        float _1345 = _1343 * (_1307.y + (-0.5));
        float _1346 = _1343 * (_1307.z + (-0.5));
        float _1353 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1314.x + (-0.5));
        float _1355 = _1353 * (_1314.y + (-0.5));
        float _1356 = _1353 * (_1314.z + (-0.5));
        float _1363 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1321.x + (-0.5));
        float _1365 = _1363 * (_1321.y + (-0.5));
        float _1366 = _1363 * (_1321.z + (-0.5));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = _1334 * 0.5;
        float _1371 = _1344 * 0.5;
        float _1372 = _1354 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_631, _632, _633), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4179 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1397 + 1.0))) + _1402) * _1367;
        float _1412 = _1335 * 0.5;
        float _1413 = _1345 * 0.5;
        float _1414 = _1355 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_631, _632, _633), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4212 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1439 + 1.0))) + _1444) * _1368;
        float _1454 = _1336 * 0.5;
        float _1455 = _1346 * 0.5;
        float _1456 = _1356 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_631, _632, _633), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4245 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1481 + 1.0))) + _1486) * _1369;
        _1503 = _1336;
        _1504 = _1335;
        _1505 = _1334;
        _1506 = _1346;
        _1507 = _1345;
        _1508 = _1344;
        _1509 = _1356;
        _1510 = _1355;
        _1511 = _1354;
        _1512 = _1369;
        _1513 = _1368;
        _1514 = _1367;
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
    }
    else
    {
        _1503 = _1192;
        _1504 = _1192;
        _1505 = _1192;
        _1506 = _1192;
        _1507 = _1192;
        _1508 = _1192;
        _1509 = _1192;
        _1510 = _1192;
        _1511 = _1192;
        _1512 = _1192;
        _1513 = _1192;
        _1514 = _1192;
        _1515 = 0.0;
        _1516 = 0.0;
        _1517 = 0.0;
    }
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1204)) + _1204;
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1205)) + _1205;
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1206)) + _1206;
    float _1550 = fma(_1529, cbSceneParam._m0[89u].z, fma(_1528, cbSceneParam._m0[89u].y, _1527 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1529, cbSceneParam._m0[90u].z, fma(_1528, cbSceneParam._m0[90u].y, _1527 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1529, cbSceneParam._m0[91u].z, fma(_1528, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1527));
    float _1571 = _801 * 0.5;
    float _1572 = _802 * 0.5;
    float _1573 = _803 * 0.5;
    float _1574 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1577 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1580 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1614;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1587 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1191, _1195, _1198, _1201));
        float _1591 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1595 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1602 = dot(vec4(cbModelParam._m0[39u]), vec4(_1571, _1572, _1573, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1602) ? 0.0 : (isnan(0.0) ? _1602 : max(0.0, _1602))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1625;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1616 = dot(vec4(cbModelParam._m0[40u]), vec4(_1571, _1572, _1573, 1.0));
        _1625 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1625 = 1.0;
    }
    float _1629 = (_1625 * cbModelParam._m0[1u].x) + (_1614 * (1.0 - cbModelParam._m0[1u].x));
    float _1639 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1640 = isnan(_1639) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1639 : min(cbModelParam._m0[25u].z, _1639));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1688 = fma(_862, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854)) + cbModelParam._m0[13u].w;
        float _1692 = fma(_862, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854)) + cbModelParam._m0[14u].w;
        float _1696 = fma(_862, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854)) + cbModelParam._m0[15u].w;
        float _1699 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1702 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1705 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1733;
        if (_1699 > 0.0)
        {
            _1733 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1733 = frontier_phi_17_15_ladder;
        }
        float _1903;
        if (_1702 > 0.0)
        {
            _1903 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1903 = frontier_phi_26_22_ladder;
        }
        float _2198;
        if (_1705 > 0.0)
        {
            _2198 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2198 = frontier_phi_38_33_ladder;
        }
        float _2200 = isnan(_1903) ? _1733 : (isnan(_1733) ? _1903 : min(_1733, _1903));
        float _2201 = isnan(_2198) ? _2200 : (isnan(_2200) ? _2198 : min(_2200, _2198));
        float _2205 = (_2201 * _1699) + _1688;
        float _2206 = (_2201 * _1702) + _1692;
        float _2207 = (_2201 * _1705) + _1696;
        float _2208 = _2201 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2208;
        float _2212 = _2208 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 > _2212) || ((_2206 < _2210) || ((_2205 < _2210) || (_2205 > _2212))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2207, cbModelParam._m0[9u].z, fma(_2206, cbModelParam._m0[9u].y, _2205 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2207, cbModelParam._m0[10u].z, fma(_2206, cbModelParam._m0[10u].y, _2205 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2207, cbModelParam._m0[11u].z, fma(_2206, cbModelParam._m0[11u].y, _2205 * cbModelParam._m0[11u].x))), _1640);
            frontier_phi_16_38_ladder = _2352.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2352.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2352.x * cbModelParam._m0[1u].y;
        }
        _1721 = frontier_phi_16_38_ladder_2;
        _1723 = frontier_phi_16_38_ladder_1;
        _1725 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1640);
        _1721 = _1709.x * cbModelParam._m0[1u].y;
        _1723 = _1709.y * cbModelParam._m0[1u].y;
        _1725 = _1709.z * cbModelParam._m0[1u].y;
    }
    float _1729 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1729 : min(cbModelParam._m0[25u].w, _1729));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1784 = fma(_862, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854)) + cbModelParam._m0[21u].w;
        float _1788 = fma(_862, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854)) + cbModelParam._m0[22u].w;
        float _1792 = fma(_862, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854)) + cbModelParam._m0[23u].w;
        float _1795 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1798 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1801 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1908;
        if (_1795 > 0.0)
        {
            _1908 = abs((1.0 - _1784) / _1795);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1784 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1908 = frontier_phi_28_24_ladder;
        }
        float _2225;
        if (_1798 > 0.0)
        {
            _2225 = abs((1.0 - _1788) / _1798);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1788 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2225 = frontier_phi_40_35_ladder;
        }
        float _2552;
        if (_1801 > 0.0)
        {
            _2552 = abs((1.0 - _1792) / _1801);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1792 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2552 = frontier_phi_50_47_ladder;
        }
        float _2554 = isnan(_2225) ? _1908 : (isnan(_1908) ? _2225 : min(_1908, _2225));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _1795) + _1784;
        float _2560 = (_2555 * _1798) + _1788;
        float _2561 = (_2555 * _1801) + _1792;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2563 = (-1.0) - _2562;
        float _2565 = _2562 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2561 > _2565) || ((_2561 < _2563) || ((_2560 > _2565) || ((_2560 < _2563) || ((_2559 < _2563) || (_2559 > _2565))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2561, cbModelParam._m0[17u].z, fma(_2560, cbModelParam._m0[17u].y, _2559 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2561, cbModelParam._m0[18u].z, fma(_2560, cbModelParam._m0[18u].y, _2559 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2561, cbModelParam._m0[19u].z, fma(_2560, cbModelParam._m0[19u].y, _2559 * cbModelParam._m0[19u].x))), _1730);
            frontier_phi_25_50_ladder = _2679.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2679.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2679.x * cbModelParam._m0[1u].z;
        }
        _1820 = frontier_phi_25_50_ladder_2;
        _1822 = frontier_phi_25_50_ladder_1;
        _1824 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1730);
        _1820 = _1804.x * cbModelParam._m0[1u].z;
        _1822 = _1804.y * cbModelParam._m0[1u].z;
        _1824 = _1804.z * cbModelParam._m0[1u].z;
    }
    float _1836 = ((((1.0 - _822) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_822 * _809)) * _793;
    float _1837 = _1836 * ((cbModelParam._m0[1u].w * (_1820 - _1721)) + _1721);
    float _1838 = _1836 * ((cbModelParam._m0[1u].w * (_1822 - _1723)) + _1723);
    float _1839 = _1836 * ((cbModelParam._m0[1u].w * (_1824 - _1725)) + _1725);
    float _1842 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, _1837 * cbSceneParam._m0[91u].x));
    float _1882 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1894 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1895 = _1882 / _1894;
    float _1896 = _1886 / _1894;
    float _1897 = _1890 / _1894;
    float _2044;
    float _2045;
    float _2046;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1924 = ((uint(_1897 > cbSceneParam._m0[59u].y) + uint(_1897 > cbSceneParam._m0[59u].x)) + uint(_1897 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1925 = _1924 + 43u;
        uint _1933 = _1924 + 44u;
        uint _1941 = _1924 + 45u;
        uint _1949 = _1924 + 46u;
        float _1960 = fma(_1894, cbSceneParam._m0[_1925].w, fma(_1890, cbSceneParam._m0[_1925].z, fma(_1886, cbSceneParam._m0[_1925].y, _1882 * cbSceneParam._m0[_1925].x)));
        float _1964 = fma(_1894, cbSceneParam._m0[_1933].w, fma(_1890, cbSceneParam._m0[_1933].z, fma(_1886, cbSceneParam._m0[_1933].y, _1882 * cbSceneParam._m0[_1933].x)));
        float _1972 = fma(_1894, cbSceneParam._m0[_1949].w, fma(_1890, cbSceneParam._m0[_1949].z, fma(_1886, cbSceneParam._m0[_1949].y, _1882 * cbSceneParam._m0[_1949].x)));
        float _1977 = cbSceneParam._m0[33u].z * _1972;
        float _1979 = cbSceneParam._m0[33u].w * _1972;
        float _1982 = fma(_1894, cbSceneParam._m0[_1941].w, fma(_1890, cbSceneParam._m0[_1941].z, fma(_1886, cbSceneParam._m0[_1941].y, _1882 * cbSceneParam._m0[_1941].x))) / _1972;
        float _2030 = (cbSceneParam._m0[33u].x - sqrt(((_1896 * _1896) + (_1895 * _1895)) + (_1897 * _1897))) * cbSceneParam._m0[33u].y;
        float _4371 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2037 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1977 + _1960) / _1972, (_1979 + _1964) / _1972), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1979 + _1960) / _1972, (_1964 - _1977) / _1972), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 - _1977) / _1972, (_1964 - _1979) / _1972), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 - _1979) / _1972, (_1977 + _1964) / _1972), _1982), 0.0)).x), vec4(0.25)));
        _2044 = 1.0 - (_2037 * cbSceneParam._m0[34u].x);
        _2045 = 1.0 - (_2037 * cbSceneParam._m0[34u].y);
        _2046 = 1.0 - (_2037 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2044 = 1.0;
        _2045 = 1.0;
        _2046 = 1.0;
    }
    float _2110;
    float _2112;
    float _2114;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2098 = fma(_1894, cbSceneParam._m0[63u].w, fma(_1890, cbSceneParam._m0[63u].z, fma(_1886, cbSceneParam._m0[63u].y, _1882 * cbSceneParam._m0[63u].x)));
        float _2099 = fma(_1894, cbSceneParam._m0[60u].w, fma(_1890, cbSceneParam._m0[60u].z, fma(_1886, cbSceneParam._m0[60u].y, _1882 * cbSceneParam._m0[60u].x))) / _2098;
        float _2100 = fma(_1894, cbSceneParam._m0[61u].w, fma(_1890, cbSceneParam._m0[61u].z, fma(_1886, cbSceneParam._m0[61u].y, _1882 * cbSceneParam._m0[61u].x))) / _2098;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2099 >= cbSceneParam._m0[64u].x) && (_2100 >= cbSceneParam._m0[64u].y)) && (_2099 <= cbSceneParam._m0[64u].z)) && (_2100 <= cbSceneParam._m0[64u].w))
        {
            float _2238 = fma(_1894, cbSceneParam._m0[62u].w, fma(_1890, cbSceneParam._m0[62u].z, fma(_1886, cbSceneParam._m0[62u].y, _1882 * cbSceneParam._m0[62u].x))) / _2098;
            float _2242 = isnan(cbSceneParam._m0[41u].w) ? _2238 : (isnan(_2238) ? cbSceneParam._m0[41u].w : max(_2238, cbSceneParam._m0[41u].w));
            float _2285 = (cbSceneParam._m0[33u].x - sqrt(((_1896 * _1896) + (_1895 * _1895)) + (_1897 * _1897))) * cbSceneParam._m0[33u].y;
            float _4387 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
            float _2292 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2099, cbSceneParam._m0[33u].w + _2100), _2242), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2099, _2100 - cbSceneParam._m0[33u].z), _2242), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2099 - cbSceneParam._m0[33u].z, _2100 - cbSceneParam._m0[33u].w), _2242), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2099 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2100), _2242), 0.0)).x), vec4(0.25)));
            float _2296 = 1.0 - (_2292 * cbSceneParam._m0[34u].x);
            float _2297 = 1.0 - (_2292 * cbSceneParam._m0[34u].y);
            float _2298 = 1.0 - (_2292 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2298) ? _2046 : (isnan(_2046) ? _2298 : min(_2046, _2298));
            frontier_phi_37_36_ladder_1 = isnan(_2297) ? _2045 : (isnan(_2045) ? _2297 : min(_2045, _2297));
            frontier_phi_37_36_ladder_2 = isnan(_2296) ? _2044 : (isnan(_2044) ? _2296 : min(_2044, _2296));
        }
        else
        {
            frontier_phi_37_36_ladder = _2046;
            frontier_phi_37_36_ladder_1 = _2045;
            frontier_phi_37_36_ladder_2 = _2044;
        }
        _2110 = frontier_phi_37_36_ladder_2;
        _2112 = frontier_phi_37_36_ladder_1;
        _2114 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2110 = _2044;
        _2112 = _2045;
        _2114 = _2046;
    }
    uvec4 _2119 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2121 = _2119.x * 14u;
    uint _2122 = _2121 + 13u;
    float _2129 = _793 + (-1.0);
    float _2134 = (cbLight._m0[_2122].x * _2129) + 1.0;
    float _2135 = (cbLight._m0[_2122].y * _2129) + 1.0;
    float _2136 = (cbLight._m0[_2122].z * _2129) + 1.0;
    float _2137 = (cbLight._m0[_2122].w * _2129) + 1.0;
    uint _2138 = _2121 + 5u;
    float _2144 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2148 = _2121 + 4u;
    float _2157 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2161 = _2121 | 1u;
    float _2172 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_631, _632, _633));
    float _2175 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_631, _632, _633));
    float _4423 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _4434 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2180 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * 0.3183098733425140380859375;
    float _2182 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * 0.3183098733425140380859375;
    float _2189 = ((cbLight._m0[_2138].x * _2144) * _2182) + (((cbLight._m0[_2148].x * _2110) * _2157) * _2180);
    float _2190 = ((_2144 * cbLight._m0[_2138].y) * _2182) + (((cbLight._m0[_2148].y * _2112) * _2157) * _2180);
    float _2191 = ((_2144 * cbLight._m0[_2138].z) * _2182) + (((cbLight._m0[_2148].z * _2114) * _2157) * _2180);
    uvec4 _2195 = floatBitsToUint(cbLight._m0[_2121 + 12u]);
    bool _2197 = _2195.x == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2197)
    {
        _2299 = _2189;
        _2301 = _2190;
        _2303 = _2191;
    }
    else
    {
        uint _2307 = _2121 + 6u;
        float _2323 = (dot(vec3(cbLight._m0[_2121 + 2u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4445 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2326 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2299 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2189;
        _2301 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2190;
        _2303 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2191;
    }
    bool _2306 = _2195.y == 0u;
    float _2361;
    float _2363;
    float _2365;
    if (_2306)
    {
        _2361 = _2299;
        _2363 = _2301;
        _2365 = _2303;
    }
    else
    {
        uint _2523 = _2121 + 7u;
        float _2539 = (dot(vec3(cbLight._m0[_2121 + 3u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4461 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2542 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2361 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2299;
        _2363 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2301;
        _2365 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2303;
    }
    uint _2368 = _2121 + 8u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _634) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2121].x + _710;
    float _2384 = cbLight._m0[_2121].y + _711;
    float _2385 = cbLight._m0[_2121].z + _712;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2121].xyz));
    float _4477 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _4488 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2397 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2398 = dot(vec3(_631, _632, _633), vec3(_2390, _2391, _2392));
    float _4499 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2402 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2390, _2391, _2392));
    float _4510 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2406 = _2382 * _2382;
    float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
    float _2421 = (exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2422 = 1.0 - _2382;
    float _2433 = (0.5 / (((_2397 * ((_2396 * _2422) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2397 * _2422) + _2382) * _2396))) * _2396;
    float _4521 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2435 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
    uint _2449 = _2121 + 9u;
    float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _634) * 0.949999988079071044921875);
    float _2461 = _2460 * _2460;
    float _2462 = cbLight._m0[_2161].x + _710;
    float _2463 = cbLight._m0[_2161].y + _711;
    float _2464 = cbLight._m0[_2161].z + _712;
    float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
    float _2469 = _2468 * _2462;
    float _2470 = _2468 * _2463;
    float _2471 = _2468 * _2464;
    float _2472 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2161].xyz));
    float _4532 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2476 = dot(vec3(_631, _632, _633), vec3(_2469, _2470, _2471));
    float _4543 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2480 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2469, _2470, _2471));
    float _4554 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2484 = _2461 * _2461;
    float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
    float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2498 = 1.0 - _2461;
    float _2508 = (0.5 / (((_2397 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2397 * _2498) + _2461) * _2475))) * _2475;
    float _4565 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
    float _2520 = (((_2497 * cbLight._m0[_2449].x) * _2510) * _2144) + ((((cbLight._m0[_2368].x * _2110) * _2421) * _2435) * _2157);
    float _2521 = (((_2497 * cbLight._m0[_2449].y) * _2510) * _2144) + ((((cbLight._m0[_2368].y * _2112) * _2421) * _2435) * _2157);
    float _2522 = (((_2497 * cbLight._m0[_2449].z) * _2510) * _2144) + ((((cbLight._m0[_2368].z * _2114) * _2421) * _2435) * _2157);
    float _2578;
    float _2580;
    float _2582;
    if (_2197)
    {
        _2578 = _2520;
        _2580 = _2521;
        _2582 = _2522;
    }
    else
    {
        uint _2584 = _2121 + 2u;
        uint _2588 = _2121 + 10u;
        float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2584].w)) * _634) * 0.949999988079071044921875);
        float _2603 = _2602 * _2602;
        float _2604 = cbLight._m0[_2584].x + _710;
        float _2605 = cbLight._m0[_2584].y + _711;
        float _2606 = cbLight._m0[_2584].z + _712;
        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
        float _2611 = _2610 * _2604;
        float _2612 = _2610 * _2605;
        float _2613 = _2610 * _2606;
        float _2614 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2584].xyz));
        float _4576 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2618 = dot(vec3(_631, _632, _633), vec3(_2611, _2612, _2613));
        float _4587 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2622 = dot(vec3(cbLight._m0[_2584].xyz), vec3(_2611, _2612, _2613));
        float _4598 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2626 = _2603 * _2603;
        float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
        float _2639 = (exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2640 = 1.0 - _2603;
        float _2650 = (0.5 / (((_2397 * ((_2617 * _2640) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2397 * _2640) + _2603) * _2617))) * _2617;
        float _4609 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2652 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
        float _2653 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2578 = (((_2639 * cbLight._m0[_2588].x) * _2652) * _2653) + _2520;
        _2580 = (((_2639 * cbLight._m0[_2588].y) * _2652) * _2653) + _2521;
        _2582 = (((_2639 * cbLight._m0[_2588].z) * _2652) * _2653) + _2522;
    }
    float _2684;
    float _2686;
    float _2688;
    if (_2306)
    {
        _2684 = _2578;
        _2686 = _2580;
        _2688 = _2582;
    }
    else
    {
        uint _2695 = _2121 + 3u;
        uint _2699 = _2121 + 11u;
        float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2695].w)) * _634) * 0.949999988079071044921875);
        float _2714 = _2713 * _2713;
        float _2715 = cbLight._m0[_2695].x + _710;
        float _2716 = cbLight._m0[_2695].y + _711;
        float _2717 = cbLight._m0[_2695].z + _712;
        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
        float _2722 = _2721 * _2715;
        float _2723 = _2721 * _2716;
        float _2724 = _2721 * _2717;
        float _2725 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2695].xyz));
        float _4625 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2729 = dot(vec3(_631, _632, _633), vec3(_2722, _2723, _2724));
        float _4636 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2733 = dot(vec3(cbLight._m0[_2695].xyz), vec3(_2722, _2723, _2724));
        float _4647 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2737 = _2714 * _2714;
        float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
        float _2750 = (exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2751 = 1.0 - _2714;
        float _2761 = (0.5 / (((_2397 * ((_2728 * _2751) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2397 * _2751) + _2714) * _2728))) * _2728;
        float _4658 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2684 = (((_2750 * cbLight._m0[_2699].x) * _2763) * _2764) + _2578;
        _2686 = (((_2750 * cbLight._m0[_2699].y) * _2763) * _2764) + _2580;
        _2688 = (((_2750 * cbLight._m0[_2699].z) * _2763) * _2764) + _2582;
    }
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_2119.y == 0u)
    {
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.x;
        uint _2797 = uint((float(_2785.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2786))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2786)));
        float _2807 = (log2(_1897 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2808 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        uint _2811 = uint(isnan(14.0) ? _2808 : (isnan(_2808) ? 14.0 : min(_2808, 14.0)));
        uvec4 _2816 = texelFetch(g_lightClusterGridBuffer, int(((_2811 << 2u) + (_2797 << 6u)) >> 2u));
        uint _2817 = _2816.x;
        uint _2818 = _2785.z;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((((1u << ((_2818 >> 4u) & 15u)) + 4294967295u) & _2817) == 0u) || ((_2818 & 240u) == 0u))
        {
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
        }
        else
        {
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            uint _3056 = 0u;
            uint _3065;
            bool _3066;
            for (;;)
            {
                _3065 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3056 << 2u)) >> 2u)).x;
                _3066 = _3065 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3066)
                {
                    frontier_phi_71_pred = _3055;
                    frontier_phi_71_pred_1 = _3054;
                    frontier_phi_71_pred_2 = _3053;
                    frontier_phi_71_pred_3 = _3052;
                    frontier_phi_71_pred_4 = _3051;
                    frontier_phi_71_pred_5 = _3050;
                }
                else
                {
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    uint _3201;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3065;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    for (;;)
                    {
                        uint _3205 = uint(findLSB(_3201)) + (_3056 << 5u);
                        uint _3202 = (_3201 + 4294967295u) & _3201;
                        uint _3207 = _3205 * 48u;
                        vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3207)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 3u)).x));
                        uint _3227 = (_3205 * 48u) + 4u;
                        vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3227)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 3u)).x));
                        uint _3246 = (_3205 * 48u) + 8u;
                        vec3 _3257 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3246)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 2u)).x));
                        float _3261 = _3221.x - _1895;
                        float _3262 = _3221.y - _1896;
                        float _3263 = _3221.z - _1897;
                        float _3264 = dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263));
                        float _3267 = inversesqrt(_3264);
                        float _3268 = _3267 * _3261;
                        float _3269 = _3267 * _3262;
                        float _3270 = _3267 * _3263;
                        float _3271 = dot(vec3(_749, _752, _755), vec3(_3268, _3269, _3270));
                        float _3276 = 1.0 - (_3264 * _3221.w);
                        float _4684 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3277 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3278 = sqrt(_3264) * _3240.w;
                        float _3281 = 1.39999997615814208984375 / (_3278 + 1.39999997615814208984375);
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3271) + _3282;
                        float _3288 = _3278 * _3278;
                        float _3292 = ((isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))) * _3277) / ((_3288 * 0.699999988079071044921875) + 1.0);
                        float _3296 = (-0.0) - _1895;
                        float _3297 = (-0.0) - _1896;
                        float _3298 = (-0.0) - _1897;
                        float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                        float _3303 = _3302 * _3296;
                        float _3304 = _3302 * _3297;
                        float _3305 = _3302 * _3298;
                        float _3312 = exp2(log2(1.0 / ((_3288 * 3.5) + 5.0)) * 0.25);
                        float _3313 = 1.0 - _809;
                        float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                        float _3321 = _3320 * _3320;
                        float _3322 = _3321 * _3321;
                        float _3323 = _3303 + _3268;
                        float _3324 = _3304 + _3269;
                        float _3325 = _3305 + _3270;
                        float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                        float _3333 = dot(vec3(_749, _752, _755), vec3(_3303, _3304, _3305));
                        float _4700 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3336 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3337 = dot(vec3(_749, _752, _755), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                        float _4711 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3340 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                        float _3345 = _3281 * _3321;
                        float _3346 = _3345 * _3345;
                        float _3349 = ((1.0 - _3346) * _3271) + _3346;
                        float _4722 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3350 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3351 = 1.0 - _3321;
                        float _3361 = (0.5 / (((_3350 * ((_3336 * _3351) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3350 * _3351) + _3321) * _3336))) * _3350;
                        float _4733 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3372 = (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) / ((_3344 * _3344) * ((_3288 * 2.1991131305694580078125) + 3.141590118408203125))) * _3277;
                        _3125 = (_3292 * _3240.x) + _3198;
                        _3126 = (_3292 * _3240.y) + _3199;
                        _3127 = (_3292 * _3240.z) + _3200;
                        _3122 = (_3372 * _3257.x) + _3195;
                        _3123 = (_3372 * _3257.y) + _3196;
                        _3124 = (_3372 * _3257.z) + _3197;
                        if (_3202 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3202;
                        }
                    }
                    frontier_phi_71_pred = _3127;
                    frontier_phi_71_pred_1 = _3126;
                    frontier_phi_71_pred_2 = _3125;
                    frontier_phi_71_pred_3 = _3124;
                    frontier_phi_71_pred_4 = _3123;
                    frontier_phi_71_pred_5 = _3122;
                }
                _2908 = frontier_phi_71_pred;
                _2906 = frontier_phi_71_pred_1;
                _2904 = frontier_phi_71_pred_2;
                _2902 = frontier_phi_71_pred_3;
                _2900 = frontier_phi_71_pred_4;
                _2898 = frontier_phi_71_pred_5;
                uint _3057 = _3056 + 1u;
                if (_3057 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3050 = _2898;
                    _3051 = _2900;
                    _3052 = _2902;
                    _3053 = _2904;
                    _3054 = _2906;
                    _3055 = _2908;
                    _3056 = _3057;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
        }
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.z;
        uint _2914 = (_2912 >> 8u) & 15u;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        if (((4294967295u << _2914) & _2817) == 0u)
        {
            _3018 = _2897;
            _3020 = _2899;
            _3022 = _2901;
            _3024 = _2903;
            _3026 = _2905;
            _3028 = _2907;
        }
        else
        {
            float _3043 = inversesqrt(dot(vec3(_1895, _1896, _1897), vec3(_1895, _1896, _1897)));
            float _3044 = _3043 * _1895;
            float _3045 = _3043 * _1896;
            float _3046 = _3043 * _1897;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2914 < ((_2912 >> 12u) & 15u))
            {
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3178 = _2897;
                float _3179 = _2899;
                float _3180 = _2901;
                float _3181 = _2903;
                float _3182 = _2905;
                float _3183 = _2907;
                uint _3184 = _2914;
                uint _3193;
                bool _3194;
                for (;;)
                {
                    _3193 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3184 << 2u)) >> 2u)).x;
                    _3194 = _3193 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3194)
                    {
                        frontier_phi_82_pred = _3183;
                        frontier_phi_82_pred_1 = _3182;
                        frontier_phi_82_pred_2 = _3181;
                        frontier_phi_82_pred_3 = _3180;
                        frontier_phi_82_pred_4 = _3179;
                        frontier_phi_82_pred_5 = _3178;
                    }
                    else
                    {
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3399 = _3178;
                        float _3400 = _3179;
                        float _3401 = _3180;
                        float _3402 = _3181;
                        float _3403 = _3182;
                        float _3404 = _3183;
                        uint _3405 = _3193;
                        uint _3406;
                        vec4 _3431;
                        float _3432;
                        vec4 _3447;
                        vec3 _3459;
                        vec4 _3474;
                        vec4 _3490;
                        float _3536;
                        bool _3537;
                        for (;;)
                        {
                            uint _3416 = ((_3184 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3405));
                            _3406 = (_3405 + 4294967295u) & _3405;
                            uint _3418 = _3416 * 40u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3432 = _3431.w;
                            uint _3434 = (_3416 * 40u) + 4u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3416 * 40u) + 8u;
                            _3459 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x));
                            uint _3461 = (_3416 * 40u) + 16u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3477 = (_3416 * 40u) + 20u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3416 * 40u) + 24u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3511 = (_3416 * 40u) + 28u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3536 = fma(_1897, _3524.z, fma(_1896, _3524.y, _3524.x * _1895)) + _3524.w;
                            _3537 = !((fma(_1897, _3505.z, fma(_1896, _3505.y, _3505.x * _1895)) + _3505.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3537)
                            {
                                float _3564 = _3431.x - _1895;
                                float _3565 = _3431.y - _1896;
                                float _3566 = _3431.z - _1897;
                                float _3567 = dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566));
                                float _3570 = inversesqrt(_3567);
                                float _3571 = _3570 * _3564;
                                float _3572 = _3570 * _3565;
                                float _3573 = _3570 * _3566;
                                float _3577 = 1.0 - (_3567 / (_3432 * _3432));
                                float _4744 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3582 = sqrt(_3567) * _3447.w;
                                float _3584 = 1.39999997615814208984375 / (_3582 + 1.39999997615814208984375);
                                float _3585 = _3584 * _3584;
                                float _3588 = ((1.0 - _3585) * dot(vec3(_3571, _3572, _3573), vec3(_749, _752, _755))) + _3585;
                                float _3591 = _3582 * _3582;
                                float _3595 = (fma(_1897, _3474.z, fma(_1896, _3474.y, _3474.x * _1895)) + _3474.w) / _3536;
                                float _3596 = (fma(_1897, _3490.z, fma(_1896, _3490.y, _3490.x * _1895)) + _3490.w) / _3536;
                                float _3600 = 1.0 - dot(vec2(_3595, _3596), vec2(_3595, _3596));
                                float _4760 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3602 = _3601 * (((isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0))) * _3578) / ((_3591 * 0.699999988079071044921875) + 1.0));
                                float _3614 = exp2(log2(1.0 / ((_3591 * 3.5) + 5.0)) * 0.25);
                                float _3615 = 1.0 - _809;
                                float _3622 = sqrt(1.0 - ((1.0 - (_3615 * _3615)) * (1.0 - (_3614 * _3614))));
                                float _3623 = _3622 * _3622;
                                float _3624 = _3623 * _3623;
                                float _3625 = _3571 - _3044;
                                float _3626 = _3572 - _3045;
                                float _3627 = _3573 - _3046;
                                float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                                float _3635 = dot(vec3(_749, _752, _755), vec3((-0.0) - _3044, (-0.0) - _3045, (-0.0) - _3046));
                                float _4771 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3639 = dot(vec3(_749, _752, _755), vec3(_3631 * _3625, _3631 * _3626, _3631 * _3627));
                                float _4782 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3646 = ((_3642 * _3642) * (_3624 + (-1.0))) + 1.0;
                                float _3647 = _3584 * _3623;
                                float _3648 = _3647 * _3647;
                                float _3654 = ((1.0 - _3648) * dot(vec3(_749, _752, _755), vec3(_3571, _3572, _3573))) + _3648;
                                float _4793 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3656 = 1.0 - _3623;
                                float _3666 = (0.5 / (((_3655 * ((_3638 * _3656) + _3623)) + 9.9999999392252902907785028219223e-09) + (((_3655 * _3656) + _3623) * _3638))) * _3655;
                                float _4804 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3676 = (_3601 * _3578) * (((_3624 * 3.1415927410125732421875) * (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) / ((_3646 * _3646) * ((_3591 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3602 * _3447.z;
                                frontier_phi_88_pred_1 = _3602 * _3447.y;
                                frontier_phi_88_pred_2 = _3602 * _3447.x;
                                frontier_phi_88_pred_3 = _3676 * _3459.z;
                                frontier_phi_88_pred_4 = _3676 * _3459.y;
                                frontier_phi_88_pred_5 = _3676 * _3459.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3685 = frontier_phi_88_pred;
                            _3684 = frontier_phi_88_pred_1;
                            _3683 = frontier_phi_88_pred_2;
                            _3682 = frontier_phi_88_pred_3;
                            _3681 = frontier_phi_88_pred_4;
                            _3680 = frontier_phi_88_pred_5;
                            _3389 = _3683 + _3402;
                            _3390 = _3684 + _3403;
                            _3391 = _3685 + _3404;
                            _3386 = _3680 + _3399;
                            _3387 = _3681 + _3400;
                            _3388 = _3682 + _3401;
                            if (_3406 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3406;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3391;
                        frontier_phi_82_pred_1 = _3390;
                        frontier_phi_82_pred_2 = _3389;
                        frontier_phi_82_pred_3 = _3388;
                        frontier_phi_82_pred_4 = _3387;
                        frontier_phi_82_pred_5 = _3386;
                    }
                    _3029 = frontier_phi_82_pred;
                    _3027 = frontier_phi_82_pred_1;
                    _3025 = frontier_phi_82_pred_2;
                    _3023 = frontier_phi_82_pred_3;
                    _3021 = frontier_phi_82_pred_4;
                    _3019 = frontier_phi_82_pred_5;
                    uint _3185 = _3184 + 1u;
                    if (_3185 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3178 = _3019;
                        _3179 = _3021;
                        _3180 = _3023;
                        _3181 = _3025;
                        _3182 = _3027;
                        _3183 = _3029;
                        _3184 = _3185;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3025;
                frontier_phi_63_64_ladder_1 = _3029;
                frontier_phi_63_64_ladder_2 = _3027;
                frontier_phi_63_64_ladder_3 = _3023;
                frontier_phi_63_64_ladder_4 = _3021;
                frontier_phi_63_64_ladder_5 = _3019;
            }
            else
            {
                frontier_phi_63_64_ladder = _2903;
                frontier_phi_63_64_ladder_1 = _2907;
                frontier_phi_63_64_ladder_2 = _2905;
                frontier_phi_63_64_ladder_3 = _2901;
                frontier_phi_63_64_ladder_4 = _2899;
                frontier_phi_63_64_ladder_5 = _2897;
            }
            _3018 = frontier_phi_63_64_ladder_5;
            _3020 = frontier_phi_63_64_ladder_4;
            _3022 = frontier_phi_63_64_ladder_3;
            _3024 = frontier_phi_63_64_ladder;
            _3026 = frontier_phi_63_64_ladder_2;
            _3028 = frontier_phi_63_64_ladder_1;
        }
        float _3033 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2830 = (_3033 * _3024) + _2361;
        _2832 = (_3033 * _3026) + _2363;
        _2834 = (_3033 * _3028) + _2365;
        _2836 = ((_3018 * 0.039999999105930328369140625) * _3033) + _2684;
        _2838 = ((_3020 * 0.039999999105930328369140625) * _3033) + _2686;
        _2840 = ((_3022 * 0.039999999105930328369140625) * _3033) + _2688;
    }
    else
    {
        _2830 = _2361;
        _2832 = _2363;
        _2834 = _2365;
        _2836 = _2684;
        _2838 = _2686;
        _2840 = _2688;
    }
    float _4820 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4831 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4842 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _2857 = ((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2830 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _793))) + ((_2836 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1629)) * cbPerFrame._m0[3u].x);
    float _2858 = ((isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2832 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _793))) + ((_2838 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1629)) * cbPerFrame._m0[3u].x);
    float _2859 = ((isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2834 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _793))) + ((_2840 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1629)) * cbPerFrame._m0[3u].x);
    uint _2860 = _240 + 6u;
    float _2868 = _730 / cbSceneParam._m0[86u].x;
    float _2869 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2883 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, (log2((isnan(cbSceneParam._m0[77u].w) ? _652 : (isnan(_652) ? cbSceneParam._m0[77u].w : min(_652, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2885 = _2883.x;
    float _2886 = _2883.y;
    float _2887 = _2883.z;
    float _2888 = _2883.w;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_652 > cbSceneParam._m0[78u].w)
    {
        float _2922 = isnan(_652) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _652 : min(cbSceneParam._m0[80u].w, _652));
        float _2923 = _2922 / _652;
        float _2934 = _2923 * _703;
        float _2935 = _704 * _2923;
        float _2936 = (-0.0) - _2935;
        float _2938 = _2923 * _705;
        float _2940 = (cbSceneParam._m0[77u].w * _2936) / _2922;
        float _2941 = _2940 + cbSceneParam._m0[79u].w;
        float _2942 = cbSceneParam._m0[79u].w - _2935;
        float _2948 = sqrt(((_2934 * _2934) + (_2935 * _2935)) + (_2938 * _2938));
        float _2951 = (1.0 - (cbSceneParam._m0[77u].w / _2922)) * _2948;
        float _2956 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2958 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3135;
        if (abs((_2936 - _2940) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3135 = ((((_2941 > 0.0) ? exp2(_2956 * _2941) : (2.0 - exp2(_2958 * _2941))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2951;
        }
        else
        {
            float _3079 = 1.0 / cbSceneParam._m0[80u].x;
            float _3080 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : max(_2941, _2942));
            float _3081 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : min(_2941, _2942));
            float _3090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : min(_3080, 0.0));
            float _3091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : min(_3081, 0.0));
            _3135 = ((abs(_2948 / _2936) * cbSceneParam._m0[80u].y) * ((((_3090 - _3091) * 2.0) - ((exp2(_2956 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0)))) - exp2(_2956 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))))) * _3079)) - ((exp2(_2958 * _3090) - exp2(_2958 * _3091)) * _3079))) + (_2951 * cbSceneParam._m0[80u].z);
        }
        vec4 _3137 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, 1.0), 0.0);
        float _3146 = exp2((_3135 * (-1.44269502162933349609375)) * (1.0 - _3137.w));
        float _3147 = log2(_3146);
        float _3163 = log2(_2888);
        _2960 = (exp2(_3163 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].x)) * _3137.x) / cbSceneParam._m0[78u].x)) + _2885;
        _2962 = (exp2(_3163 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].y)) * _3137.y) / cbSceneParam._m0[78u].y)) + _2886;
        _2964 = (exp2(_3163 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].z)) * _3137.z) / cbSceneParam._m0[78u].z)) + _2887;
        _2966 = _3146 * _2888;
    }
    else
    {
        _2960 = _2885;
        _2962 = _2886;
        _2964 = _2887;
        _2966 = _2888;
    }
    bool _3173;
    vec4 _2976;
    vec4 _2998;
    float _3000;
    float _3004;
    float _3005;
    float _3006;
    float _3007;
    bool _3017;
    for (;;)
    {
        _2976 = cbMatDynParam._m0[0u];
        float _2978 = roundEven(_2976.y);
        bool _2979 = _2978 == 3.0;
        float _2980 = log2(_2966);
        float _2987 = exp2(_2980 * cbSceneParam._m0[78u].x) * _2857;
        float _2988 = exp2(_2980 * cbSceneParam._m0[78u].y) * _2858;
        float _2989 = exp2(_2980 * cbSceneParam._m0[78u].z) * _2859;
        float _2996 = _719 + (-0.5);
        _2998 = cbMtdParam._m0[1u];
        _3000 = _2998.y * _2996;
        float _3003 = (_2978 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3004 = _3003 * (_2979 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2960)));
        _3005 = _3003 * (_2979 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2962)));
        _3006 = _3003 * (_2979 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2964)));
        _3007 = _2996 * 0.999000012874603271484375;
        _3017 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3017)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _3007) < 0.5)
            {
                _3173 = true;
                break;
            }
        }
        uint _3114 = _768 + uint(_2976.w);
        if ((cbInstanceData._m0[_3114].w < 1.0) && ((cbInstanceData._m0[_3114].w + _3007) < 0.5))
        {
            _3173 = true;
            break;
        }
        if ((_3000 + 1.0) < _2998.x)
        {
            _3173 = true;
            break;
        }
        _3173 = false;
        break;
    }
    float _3377;
    if (_3173)
    {
        discard_state = true;
        _3377 = 0.0;
    }
    else
    {
        _3377 = cbInstanceData._m0[_2860].w;
    }
    SV_Target.x = _3004;
    SV_Target.y = _3005;
    SV_Target.z = _3006;
    SV_Target.w = _3377;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2860].w;
    discard_exit();
}


