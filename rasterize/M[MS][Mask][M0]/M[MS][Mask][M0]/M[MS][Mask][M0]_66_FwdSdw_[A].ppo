#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1381;
float _4023;
float _4024;
float _4025;
float _4026;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _384 = _382.x;
    float _396 = dot(vec4(_384, _382.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _413 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _345.x) * 2.0) - ((((_384 - _396) * cbMtdParam._m0[24u].z) + _396) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4035 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _421 = (_414 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _422 = (_414 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _423 = (_414 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _462 = _460.x;
    float _472 = dot(vec4(_462, _460.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _486 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _345.y) * 2.0) - ((((_462 - _472) * cbMtdParam._m0[24u].z) + _472) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4046 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _494 = (_487 * ((_440.x * cbMtdParam._m0[13u].x) - _421)) + _421;
    float _495 = (_487 * ((_440.y * cbMtdParam._m0[13u].y) - _422)) + _422;
    float _496 = (_487 * ((_440.z * cbMtdParam._m0[13u].z) - _423)) + _423;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _535 = _531.z;
    float _542 = ((_514.x - _533) * _414) + _533;
    float _543 = ((_514.y - _534) * _414) + _534;
    float _544 = ((_514.z - _535) * _414) + _535;
    vec4 _556 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _569 = ((_556.z - _544) * _487) + _544;
    float _572 = ((((_556.x - _542) * _487) + _542) * 2.0) + (-1.0);
    float _574 = ((((_556.y - _543) * _487) + _543) * 2.0) + (-1.0);
    float _575 = dot(vec2(_572, _574), vec2(_572, _574));
    float _4057 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _580 = sqrt(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _621 = _619.x;
    float _622 = 1.0 - _621;
    float _628 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _631 = ((isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : min(_628, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _640 = (_631 - ((((((_621 - _622) * cbMtdParam._m0[24u].w) + _622) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _631))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4078 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _648 = (_641 * (cbMtdParam._m0[17u].x - _494)) + _494;
    float _649 = (_641 * (cbMtdParam._m0[17u].y - _495)) + _495;
    float _650 = (_641 * (cbMtdParam._m0[17u].z - _496)) + _496;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _664 = _662.x;
    float _665 = 1.0 - _664;
    float _692 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_664 - _665) * cbMtdParam._m0[24u].y) + _665) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4089 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _693 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _701 = ((((cbMtdParam._m0[10u].x - _648) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _693) + _648;
    float _702 = ((((cbMtdParam._m0[10u].y - _649) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _693) + _649;
    float _703 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _650)) * _693) + _650;
    float _707 = (cbMtdParam._m0[19u].w * (_594.z - _569)) + _569;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _728 = (_721.x * 2.0) + (-1.0);
    float _729 = (_721.y * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _4100 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _738 = (_641 * (_721.z - _707)) + _707;
    float _741 = ((cbMtdParam._m0[23u].y - _738) * _693) + _738;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _766 = (_760.x * 2.0) + (-1.0);
    float _767 = (_760.y * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _4111 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _776 = (((_594.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _572;
    float _777 = (((_594.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _574;
    float _789 = (((_728 - _776) + (cbMtdParam._m0[21u].x * _776)) * _641) + _776;
    float _790 = (((_729 - _777) + (cbMtdParam._m0[21u].x * _777)) * _641) + _777;
    float _791 = (_641 * (sqrt(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) - _580)) + _580;
    float _802 = (((_766 - _789) + (_789 * cbMtdParam._m0[22u].z)) * _693) + _789;
    float _803 = (((_767 - _790) + (_790 * cbMtdParam._m0[22u].z)) * _693) + _790;
    float _804 = ((sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) - _791) * _693) + _791;
    float _806 = cbMtdParam._m0[22u].x + _594.w;
    float _809 = fma(_804, _246 * NORMAL.x, fma(_803, _253 * TANGENT.x, (_239 * _231) * _802));
    float _812 = fma(_804, _246 * NORMAL.y, fma(_803, _253 * TANGENT.y, (_239 * _232) * _802));
    float _815 = fma(_804, _246 * NORMAL.z, fma(_803, _253 * TANGENT.z, (_239 * _233) * _802));
    float _819 = inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815)));
    float _820 = _819 * _809;
    float _821 = _819 * _812;
    float _822 = _819 * _815;
    float _4122 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _823 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4144 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4155 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _4166 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _841 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    vec4 _906 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _908 = _906.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1062 = sqrt(((_892 * _892) + (_893 * _893)) + (_894 * _894));
        float _1068 = (cbMatDynParam._m0[5u].x * _1062) + cbMatDynParam._m0[5u].y;
        float _4177 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1073 = (cbMatDynParam._m0[5u].z * _1062) + cbMatDynParam._m0[5u].w;
        float _4188 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) - _1069)) + _1069) < ((_908 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_822, cbSceneParam._m0[5u].z, fma(_821, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _820));
    float _941 = fma(_822, cbSceneParam._m0[6u].z, fma(_821, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _820));
    float _944 = fma(_822, cbSceneParam._m0[7u].z, fma(_821, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _820));
    uint _957 = _259 + 9u;
    uint _958 = _957 + uint(cbMatDynParam._m0[0u].w);
    float _964 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_958].x;
    float _965 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_958].y;
    float _966 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_958].z;
    float _4199 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    vec4 _978 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _982 = ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * TEXCOORD_5.w) * _978.x;
    float _983 = dot(vec3(_820, _821, _822), vec3(_899, _900, _901));
    float _986 = _983 * 2.0;
    float _990 = (_986 * _820) - _899;
    float _991 = (_986 * _821) - _900;
    float _992 = (_986 * _822) - _901;
    float _996 = abs(dot(vec3(_899, _900, _901), vec3(_820, _821, _822)));
    float _4232 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _998 = sqrt(_823);
    float _1011 = exp2((_998 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_998 * 3.0));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1380;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1105 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1109 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1113 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1138 = _1043 + _820;
        float _1139 = _1047 + _821;
        float _1140 = _1051 + _822;
        float _1150 = fma(_1140, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138)) - _1105;
        float _1151 = fma(_1140, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138)) - _1109;
        float _1152 = fma(_1140, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138)) - _1113;
        float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
        float _1169 = ((_1156 * _1150) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1105 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1156 * _1151) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1109 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1156 * _1152) / cbModelParam._m0[34u].z) + ((((((_1113 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        float _1208 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1174.x + (-0.5));
        float _1210 = _1208 * (_1174.y + (-0.5));
        float _1211 = _1208 * (_1174.z + (-0.5));
        float _1218 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1181.x + (-0.5));
        float _1220 = _1218 * (_1181.y + (-0.5));
        float _1221 = _1218 * (_1181.z + (-0.5));
        float _1228 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1188.x + (-0.5));
        float _1230 = _1228 * (_1188.y + (-0.5));
        float _1231 = _1228 * (_1188.z + (-0.5));
        float _1238 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1195.x + (-0.5));
        float _1240 = _1238 * (_1195.y + (-0.5));
        float _1241 = _1238 * (_1195.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1262 = (dot(vec3(_820, _821, _822), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1272 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4280 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1274 + 1.0))) + _1279) * _1242;
        float _1289 = _1210 * 0.5;
        float _1290 = _1220 * 0.5;
        float _1291 = _1230 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_820, _821, _822), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4313 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1316 + 1.0))) + _1321) * _1243;
        float _1331 = _1211 * 0.5;
        float _1332 = _1221 * 0.5;
        float _1333 = _1231 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_820, _821, _822), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4346 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1358 + 1.0))) + _1363) * _1244;
        _1380 = _1211;
        _1382 = _1210;
        _1383 = _1209;
        _1384 = _1221;
        _1385 = _1220;
        _1386 = _1219;
        _1387 = _1231;
        _1388 = _1230;
        _1389 = _1229;
        _1390 = _1244;
        _1391 = _1243;
        _1392 = _1242;
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1381;
        _1382 = _1381;
        _1383 = _1381;
        _1384 = _1381;
        _1385 = _1381;
        _1386 = _1381;
        _1387 = _1381;
        _1388 = _1381;
        _1389 = _1381;
        _1390 = _1381;
        _1391 = _1381;
        _1392 = _1381;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1422 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1426 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1430 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1453 = _1043 + _820;
        float _1454 = _1047 + _821;
        float _1455 = _1051 + _822;
        float _1465 = fma(_1455, cbModelParam._m0[30u].z, fma(_1454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1453)) - _1422;
        float _1466 = fma(_1455, cbModelParam._m0[31u].z, fma(_1454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1453)) - _1426;
        float _1467 = fma(_1455, cbModelParam._m0[32u].z, fma(_1454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1453)) - _1430;
        float _1471 = inversesqrt(dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467)));
        float _1484 = ((_1471 * _1465) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1422 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1471 * _1466) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1426 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1471 * _1467) / cbModelParam._m0[35u].z) + ((((((_1430 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        float _1521 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1488.x + (-0.5));
        float _1523 = _1521 * (_1488.y + (-0.5));
        float _1524 = _1521 * (_1488.z + (-0.5));
        float _1531 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1495.x + (-0.5));
        float _1533 = _1531 * (_1495.y + (-0.5));
        float _1534 = _1531 * (_1495.z + (-0.5));
        float _1541 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1502.x + (-0.5));
        float _1543 = _1541 * (_1502.y + (-0.5));
        float _1544 = _1541 * (_1502.z + (-0.5));
        float _1551 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1509.x + (-0.5));
        float _1553 = _1551 * (_1509.y + (-0.5));
        float _1554 = _1551 * (_1509.z + (-0.5));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = _1522 * 0.5;
        float _1559 = _1532 * 0.5;
        float _1560 = _1542 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_820, _821, _822), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4409 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1585 + 1.0))) + _1590) * _1555;
        float _1600 = _1523 * 0.5;
        float _1601 = _1533 * 0.5;
        float _1602 = _1543 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_820, _821, _822), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4442 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1627 + 1.0))) + _1632) * _1556;
        float _1642 = _1524 * 0.5;
        float _1643 = _1534 * 0.5;
        float _1644 = _1544 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_820, _821, _822), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4475 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1669 + 1.0))) + _1674) * _1557;
        _1691 = _1524;
        _1692 = _1523;
        _1693 = _1522;
        _1694 = _1534;
        _1695 = _1533;
        _1696 = _1532;
        _1697 = _1544;
        _1698 = _1543;
        _1699 = _1542;
        _1700 = _1557;
        _1701 = _1556;
        _1702 = _1555;
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
    }
    else
    {
        _1691 = _1381;
        _1692 = _1381;
        _1693 = _1381;
        _1694 = _1381;
        _1695 = _1381;
        _1696 = _1381;
        _1697 = _1381;
        _1698 = _1381;
        _1699 = _1381;
        _1700 = _1381;
        _1701 = _1381;
        _1702 = _1381;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1393)) + _1393;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1394)) + _1394;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1395)) + _1395;
    float _1738 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1715));
    float _1759 = _990 * 0.5;
    float _1760 = _991 * 0.5;
    float _1761 = _992 * 0.5;
    float _1762 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1765 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1768 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1802;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1775 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1380, _1384, _1387, _1390));
        float _1779 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1783 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1790 = dot(vec4(cbModelParam._m0[39u]), vec4(_1759, _1760, _1761, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1813;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1804 = dot(vec4(cbModelParam._m0[40u]), vec4(_1759, _1760, _1761, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1817 = (_1813 * cbModelParam._m0[1u].x) + (_1802 * (1.0 - cbModelParam._m0[1u].x));
    float _1827 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _823);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1827 : min(cbModelParam._m0[25u].z, _1827));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_992, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990));
        float _1890 = fma(_992, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990));
        float _1893 = fma(_992, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1921 = frontier_phi_17_15_ladder;
        }
        float _2091;
        if (_1890 > 0.0)
        {
            _2091 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2091 = frontier_phi_26_22_ladder;
        }
        float _2386;
        if (_1893 > 0.0)
        {
            _2386 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2386 = frontier_phi_38_33_ladder;
        }
        float _2388 = isnan(_2091) ? _1921 : (isnan(_1921) ? _2091 : min(_1921, _2091));
        float _2389 = isnan(_2386) ? _2388 : (isnan(_2388) ? _2386 : min(_2388, _2386));
        float _2393 = (_2389 * _1887) + _1876;
        float _2394 = (_2389 * _1890) + _1880;
        float _2395 = (_2389 * _1893) + _1884;
        float _2396 = _2389 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2396;
        float _2400 = _2396 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 > _2400) || ((_2394 < _2398) || ((_2393 < _2398) || (_2393 > _2400))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2395, cbModelParam._m0[9u].z, fma(_2394, cbModelParam._m0[9u].y, _2393 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2395, cbModelParam._m0[10u].z, fma(_2394, cbModelParam._m0[10u].y, _2393 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2395, cbModelParam._m0[11u].z, fma(_2394, cbModelParam._m0[11u].y, _2393 * cbModelParam._m0[11u].x))), _1828);
            frontier_phi_16_38_ladder = _2540.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2540.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2540.x * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_16_38_ladder_2;
        _1911 = frontier_phi_16_38_ladder_1;
        _1913 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_990, _991, _992), _1828);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _823);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_992, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990));
        float _1986 = fma(_992, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990));
        float _1989 = fma(_992, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990));
        float _2096;
        if (_1983 > 0.0)
        {
            _2096 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2096 = frontier_phi_28_24_ladder;
        }
        float _2413;
        if (_1986 > 0.0)
        {
            _2413 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2413 = frontier_phi_40_35_ladder;
        }
        float _2740;
        if (_1989 > 0.0)
        {
            _2740 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2740 = frontier_phi_50_47_ladder;
        }
        float _2742 = isnan(_2413) ? _2096 : (isnan(_2096) ? _2413 : min(_2096, _2413));
        float _2743 = isnan(_2740) ? _2742 : (isnan(_2742) ? _2740 : min(_2742, _2740));
        float _2747 = (_2743 * _1983) + _1972;
        float _2748 = (_2743 * _1986) + _1976;
        float _2749 = (_2743 * _1989) + _1980;
        float _2750 = _2743 * 9.9999997473787516355514526367188e-05;
        float _2751 = (-1.0) - _2750;
        float _2753 = _2750 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2749 > _2753) || ((_2749 < _2751) || ((_2748 > _2753) || ((_2748 < _2751) || ((_2747 < _2751) || (_2747 > _2753))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2749, cbModelParam._m0[17u].z, fma(_2748, cbModelParam._m0[17u].y, _2747 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2749, cbModelParam._m0[18u].z, fma(_2748, cbModelParam._m0[18u].y, _2747 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2749, cbModelParam._m0[19u].z, fma(_2748, cbModelParam._m0[19u].y, _2747 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_25_50_ladder = _2867.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2867.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2867.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_25_50_ladder_2;
        _2010 = frontier_phi_25_50_ladder_1;
        _2012 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_990, _991, _992), _1918);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2024 = ((((1.0 - _1011) * ((_998 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1011 * _998)) * _982;
    float _2025 = _2024 * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2026 = _2024 * ((cbModelParam._m0[1u].w * (_2010 - _1911)) + _1911);
    float _2027 = _2024 * ((cbModelParam._m0[1u].w * (_2012 - _1913)) + _1913);
    float _2030 = fma(_2027, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2033 = fma(_2027, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2036 = fma(_2027, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2083 = _2070 / _2082;
    float _2084 = _2074 / _2082;
    float _2085 = _2078 / _2082;
    float _2232;
    float _2233;
    float _2234;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2112 = ((uint(_2085 > cbSceneParam._m0[59u].y) + uint(_2085 > cbSceneParam._m0[59u].x)) + uint(_2085 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2113 = _2112 + 43u;
        uint _2121 = _2112 + 44u;
        uint _2129 = _2112 + 45u;
        uint _2137 = _2112 + 46u;
        float _2148 = fma(_2082, cbSceneParam._m0[_2113].w, fma(_2078, cbSceneParam._m0[_2113].z, fma(_2074, cbSceneParam._m0[_2113].y, _2070 * cbSceneParam._m0[_2113].x)));
        float _2152 = fma(_2082, cbSceneParam._m0[_2121].w, fma(_2078, cbSceneParam._m0[_2121].z, fma(_2074, cbSceneParam._m0[_2121].y, _2070 * cbSceneParam._m0[_2121].x)));
        float _2160 = fma(_2082, cbSceneParam._m0[_2137].w, fma(_2078, cbSceneParam._m0[_2137].z, fma(_2074, cbSceneParam._m0[_2137].y, _2070 * cbSceneParam._m0[_2137].x)));
        float _2165 = cbSceneParam._m0[33u].z * _2160;
        float _2167 = cbSceneParam._m0[33u].w * _2160;
        float _2170 = fma(_2082, cbSceneParam._m0[_2129].w, fma(_2078, cbSceneParam._m0[_2129].z, fma(_2074, cbSceneParam._m0[_2129].y, _2070 * cbSceneParam._m0[_2129].x))) / _2160;
        float _2218 = (cbSceneParam._m0[33u].x - sqrt(((_2084 * _2084) + (_2083 * _2083)) + (_2085 * _2085))) * cbSceneParam._m0[33u].y;
        float _4601 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2225 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2148) / _2160, (_2167 + _2152) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 + _2148) / _2160, (_2152 - _2165) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 - _2165) / _2160, (_2152 - _2167) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 - _2167) / _2160, (_2165 + _2152) / _2160), _2170), 0.0)).x), vec4(0.25)));
        _2232 = 1.0 - (_2225 * cbSceneParam._m0[34u].x);
        _2233 = 1.0 - (_2225 * cbSceneParam._m0[34u].y);
        _2234 = 1.0 - (_2225 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2232 = 1.0;
        _2233 = 1.0;
        _2234 = 1.0;
    }
    float _2298;
    float _2300;
    float _2302;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2286 = fma(_2082, cbSceneParam._m0[63u].w, fma(_2078, cbSceneParam._m0[63u].z, fma(_2074, cbSceneParam._m0[63u].y, _2070 * cbSceneParam._m0[63u].x)));
        float _2287 = fma(_2082, cbSceneParam._m0[60u].w, fma(_2078, cbSceneParam._m0[60u].z, fma(_2074, cbSceneParam._m0[60u].y, _2070 * cbSceneParam._m0[60u].x))) / _2286;
        float _2288 = fma(_2082, cbSceneParam._m0[61u].w, fma(_2078, cbSceneParam._m0[61u].z, fma(_2074, cbSceneParam._m0[61u].y, _2070 * cbSceneParam._m0[61u].x))) / _2286;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2287 >= cbSceneParam._m0[64u].x) && (_2288 >= cbSceneParam._m0[64u].y)) && (_2287 <= cbSceneParam._m0[64u].z)) && (_2288 <= cbSceneParam._m0[64u].w))
        {
            float _2426 = fma(_2082, cbSceneParam._m0[62u].w, fma(_2078, cbSceneParam._m0[62u].z, fma(_2074, cbSceneParam._m0[62u].y, _2070 * cbSceneParam._m0[62u].x))) / _2286;
            float _2430 = isnan(cbSceneParam._m0[41u].w) ? _2426 : (isnan(_2426) ? cbSceneParam._m0[41u].w : max(_2426, cbSceneParam._m0[41u].w));
            float _2473 = (cbSceneParam._m0[33u].x - sqrt(((_2084 * _2084) + (_2083 * _2083)) + (_2085 * _2085))) * cbSceneParam._m0[33u].y;
            float _4617 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
            float _2480 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2287, cbSceneParam._m0[33u].w + _2288), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2287, _2288 - cbSceneParam._m0[33u].z), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2287 - cbSceneParam._m0[33u].z, _2288 - cbSceneParam._m0[33u].w), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2287 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2288), _2430), 0.0)).x), vec4(0.25)));
            float _2484 = 1.0 - (_2480 * cbSceneParam._m0[34u].x);
            float _2485 = 1.0 - (_2480 * cbSceneParam._m0[34u].y);
            float _2486 = 1.0 - (_2480 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
            frontier_phi_37_36_ladder_1 = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
            frontier_phi_37_36_ladder_2 = isnan(_2484) ? _2232 : (isnan(_2232) ? _2484 : min(_2232, _2484));
        }
        else
        {
            frontier_phi_37_36_ladder = _2234;
            frontier_phi_37_36_ladder_1 = _2233;
            frontier_phi_37_36_ladder_2 = _2232;
        }
        _2298 = frontier_phi_37_36_ladder_2;
        _2300 = frontier_phi_37_36_ladder_1;
        _2302 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2298 = _2232;
        _2300 = _2233;
        _2302 = _2234;
    }
    uvec4 _2307 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2309 = _2307.x * 14u;
    uint _2310 = _2309 + 13u;
    float _2317 = _982 + (-1.0);
    float _2322 = (cbLight._m0[_2310].x * _2317) + 1.0;
    float _2323 = (cbLight._m0[_2310].y * _2317) + 1.0;
    float _2324 = (cbLight._m0[_2310].z * _2317) + 1.0;
    float _2325 = (cbLight._m0[_2310].w * _2317) + 1.0;
    uint _2326 = _2309 + 5u;
    float _2332 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2336 = _2309 + 4u;
    float _2345 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2349 = _2309 | 1u;
    float _2360 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_820, _821, _822));
    float _2363 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_820, _821, _822));
    float _4653 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _4664 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2368 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2370 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * 0.3183098733425140380859375;
    float _2377 = ((cbLight._m0[_2326].x * _2332) * _2370) + (((cbLight._m0[_2336].x * _2298) * _2345) * _2368);
    float _2378 = ((_2332 * cbLight._m0[_2326].y) * _2370) + (((cbLight._m0[_2336].y * _2300) * _2345) * _2368);
    float _2379 = ((_2332 * cbLight._m0[_2326].z) * _2370) + (((cbLight._m0[_2336].z * _2302) * _2345) * _2368);
    uvec4 _2383 = floatBitsToUint(cbLight._m0[_2309 + 12u]);
    bool _2385 = _2383.x == 0u;
    float _2487;
    float _2489;
    float _2491;
    if (_2385)
    {
        _2487 = _2377;
        _2489 = _2378;
        _2491 = _2379;
    }
    else
    {
        uint _2495 = _2309 + 6u;
        float _2511 = (dot(vec3(cbLight._m0[_2309 + 2u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2512 = _2511 * _2511;
        float _4675 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2513 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2514 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2487 = (((cbLight._m0[_2495].x * 0.3183098733425140380859375) * _2513) * _2514) + _2377;
        _2489 = (((cbLight._m0[_2495].y * 0.3183098733425140380859375) * _2513) * _2514) + _2378;
        _2491 = (((cbLight._m0[_2495].z * 0.3183098733425140380859375) * _2513) * _2514) + _2379;
    }
    bool _2494 = _2383.y == 0u;
    float _2549;
    float _2551;
    float _2553;
    if (_2494)
    {
        _2549 = _2487;
        _2551 = _2489;
        _2553 = _2491;
    }
    else
    {
        uint _2711 = _2309 + 7u;
        float _2727 = (dot(vec3(cbLight._m0[_2309 + 3u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2728 = _2727 * _2727;
        float _4691 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2729 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2730 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2549 = (((cbLight._m0[_2711].x * 0.3183098733425140380859375) * _2729) * _2730) + _2487;
        _2551 = (((cbLight._m0[_2711].y * 0.3183098733425140380859375) * _2729) * _2730) + _2489;
        _2553 = (((cbLight._m0[_2711].z * 0.3183098733425140380859375) * _2729) * _2730) + _2491;
    }
    uint _2556 = _2309 + 8u;
    float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _823) * 0.949999988079071044921875);
    float _2570 = _2569 * _2569;
    float _2571 = cbLight._m0[_2309].x + _899;
    float _2572 = cbLight._m0[_2309].y + _900;
    float _2573 = cbLight._m0[_2309].z + _901;
    float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
    float _2578 = _2577 * _2571;
    float _2579 = _2577 * _2572;
    float _2580 = _2577 * _2573;
    float _2581 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2309].xyz));
    float _4707 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2584 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _4718 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _2585 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2586 = dot(vec3(_820, _821, _822), vec3(_2578, _2579, _2580));
    float _4729 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2590 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2578, _2579, _2580));
    float _4740 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2594 = _2570 * _2570;
    float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
    float _2609 = (exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2610 = 1.0 - _2570;
    float _2621 = (0.5 / (((_2585 * ((_2584 * _2610) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2610) + _2570) * _2584))) * _2584;
    float _4751 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
    uint _2637 = _2309 + 9u;
    float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _823) * 0.949999988079071044921875);
    float _2649 = _2648 * _2648;
    float _2650 = cbLight._m0[_2349].x + _899;
    float _2651 = cbLight._m0[_2349].y + _900;
    float _2652 = cbLight._m0[_2349].z + _901;
    float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
    float _2657 = _2656 * _2650;
    float _2658 = _2656 * _2651;
    float _2659 = _2656 * _2652;
    float _2660 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2349].xyz));
    float _4762 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2664 = dot(vec3(_820, _821, _822), vec3(_2657, _2658, _2659));
    float _4773 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2668 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2657, _2658, _2659));
    float _4784 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2672 = _2649 * _2649;
    float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
    float _2685 = (exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2686 = 1.0 - _2649;
    float _2696 = (0.5 / (((_2585 * ((_2663 * _2686) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2686) + _2649) * _2663))) * _2663;
    float _4795 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2698 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
    float _2708 = (((_2685 * cbLight._m0[_2637].x) * _2698) * _2332) + ((((cbLight._m0[_2556].x * _2298) * _2609) * _2623) * _2345);
    float _2709 = (((_2685 * cbLight._m0[_2637].y) * _2698) * _2332) + ((((cbLight._m0[_2556].y * _2300) * _2609) * _2623) * _2345);
    float _2710 = (((_2685 * cbLight._m0[_2637].z) * _2698) * _2332) + ((((cbLight._m0[_2556].z * _2302) * _2609) * _2623) * _2345);
    float _2766;
    float _2768;
    float _2770;
    if (_2385)
    {
        _2766 = _2708;
        _2768 = _2709;
        _2770 = _2710;
    }
    else
    {
        uint _2772 = _2309 + 2u;
        uint _2776 = _2309 + 10u;
        float _2790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2772].w)) * _823) * 0.949999988079071044921875);
        float _2791 = _2790 * _2790;
        float _2792 = cbLight._m0[_2772].x + _899;
        float _2793 = cbLight._m0[_2772].y + _900;
        float _2794 = cbLight._m0[_2772].z + _901;
        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
        float _2799 = _2798 * _2792;
        float _2800 = _2798 * _2793;
        float _2801 = _2798 * _2794;
        float _2802 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2772].xyz));
        float _4806 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2805 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2806 = dot(vec3(_820, _821, _822), vec3(_2799, _2800, _2801));
        float _4817 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2810 = dot(vec3(cbLight._m0[_2772].xyz), vec3(_2799, _2800, _2801));
        float _4828 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2814 = _2791 * _2791;
        float _2818 = ((_2809 * _2809) * (_2814 + (-1.0))) + 1.0;
        float _2827 = (exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2828 = 1.0 - _2791;
        float _2838 = (0.5 / (((_2585 * ((_2805 * _2828) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2828) + _2791) * _2805))) * _2805;
        float _4839 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2840 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2814 / ((_2818 * _2818) * 3.141590118408203125));
        float _2841 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2766 = (((_2827 * cbLight._m0[_2776].x) * _2840) * _2841) + _2708;
        _2768 = (((_2827 * cbLight._m0[_2776].y) * _2840) * _2841) + _2709;
        _2770 = (((_2827 * cbLight._m0[_2776].z) * _2840) * _2841) + _2710;
    }
    float _2872;
    float _2874;
    float _2876;
    if (_2494)
    {
        _2872 = _2766;
        _2874 = _2768;
        _2876 = _2770;
    }
    else
    {
        uint _2883 = _2309 + 3u;
        uint _2887 = _2309 + 11u;
        float _2901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2883].w)) * _823) * 0.949999988079071044921875);
        float _2902 = _2901 * _2901;
        float _2903 = cbLight._m0[_2883].x + _899;
        float _2904 = cbLight._m0[_2883].y + _900;
        float _2905 = cbLight._m0[_2883].z + _901;
        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
        float _2910 = _2909 * _2903;
        float _2911 = _2909 * _2904;
        float _2912 = _2909 * _2905;
        float _2913 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2883].xyz));
        float _4855 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2917 = dot(vec3(_820, _821, _822), vec3(_2910, _2911, _2912));
        float _4866 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2921 = dot(vec3(cbLight._m0[_2883].xyz), vec3(_2910, _2911, _2912));
        float _4877 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2925 = _2902 * _2902;
        float _2929 = ((_2920 * _2920) * (_2925 + (-1.0))) + 1.0;
        float _2938 = (exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2939 = 1.0 - _2902;
        float _2949 = (0.5 / (((_2585 * ((_2916 * _2939) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2939) + _2902) * _2916))) * _2916;
        float _4888 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2951 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2925 / ((_2929 * _2929) * 3.141590118408203125));
        float _2952 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2872 = (((_2938 * cbLight._m0[_2887].x) * _2951) * _2952) + _2766;
        _2874 = (((_2938 * cbLight._m0[_2887].y) * _2951) * _2952) + _2768;
        _2876 = (((_2938 * cbLight._m0[_2887].z) * _2951) * _2952) + _2770;
    }
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    if (_2307.y == 0u)
    {
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.x;
        uint _2985 = uint((float(_2973.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2974))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2974)));
        float _2995 = (log2(_2085 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2996 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        uint _2999 = uint(isnan(14.0) ? _2996 : (isnan(_2996) ? 14.0 : min(_2996, 14.0)));
        uvec4 _3004 = texelFetch(g_lightClusterGridBuffer, int(((_2999 << 2u) + (_2985 << 6u)) >> 2u));
        uint _3005 = _3004.x;
        uint _3006 = _2973.z;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((((1u << ((_3006 >> 4u) & 15u)) + 4294967295u) & _3005) == 0u) || ((_3006 & 240u) == 0u))
        {
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
        }
        else
        {
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            uint _3244 = 0u;
            uint _3253;
            bool _3254;
            for (;;)
            {
                _3253 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3244 << 2u)) >> 2u)).x;
                _3254 = _3253 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3254)
                {
                    frontier_phi_71_pred = _3243;
                    frontier_phi_71_pred_1 = _3242;
                    frontier_phi_71_pred_2 = _3241;
                    frontier_phi_71_pred_3 = _3240;
                    frontier_phi_71_pred_4 = _3239;
                    frontier_phi_71_pred_5 = _3238;
                }
                else
                {
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    uint _3389;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3253;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    for (;;)
                    {
                        uint _3393 = uint(findLSB(_3389)) + (_3244 << 5u);
                        uint _3390 = (_3389 + 4294967295u) & _3389;
                        uint _3395 = _3393 * 48u;
                        vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3395)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 3u)).x));
                        uint _3415 = (_3393 * 48u) + 4u;
                        vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 3u)).x));
                        uint _3434 = (_3393 * 48u) + 8u;
                        vec3 _3445 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3434)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 2u)).x));
                        float _3449 = _3409.x - _2083;
                        float _3450 = _3409.y - _2084;
                        float _3451 = _3409.z - _2085;
                        float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                        float _3455 = inversesqrt(_3452);
                        float _3456 = _3455 * _3449;
                        float _3457 = _3455 * _3450;
                        float _3458 = _3455 * _3451;
                        float _3459 = dot(vec3(_938, _941, _944), vec3(_3456, _3457, _3458));
                        float _3464 = 1.0 - (_3452 * _3409.w);
                        float _4914 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3465 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3466 = sqrt(_3452) * _3428.w;
                        float _3469 = 1.39999997615814208984375 / (_3466 + 1.39999997615814208984375);
                        float _3470 = _3469 * _3469;
                        float _3473 = ((1.0 - _3470) * _3459) + _3470;
                        float _3476 = _3466 * _3466;
                        float _3480 = ((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3465) / ((_3476 * 0.699999988079071044921875) + 1.0);
                        float _3484 = (-0.0) - _2083;
                        float _3485 = (-0.0) - _2084;
                        float _3486 = (-0.0) - _2085;
                        float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                        float _3491 = _3490 * _3484;
                        float _3492 = _3490 * _3485;
                        float _3493 = _3490 * _3486;
                        float _3500 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                        float _3501 = 1.0 - _998;
                        float _3508 = sqrt(1.0 - ((1.0 - (_3501 * _3501)) * (1.0 - (_3500 * _3500))));
                        float _3509 = _3508 * _3508;
                        float _3510 = _3509 * _3509;
                        float _3511 = _3491 + _3456;
                        float _3512 = _3492 + _3457;
                        float _3513 = _3493 + _3458;
                        float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                        float _3521 = dot(vec3(_938, _941, _944), vec3(_3491, _3492, _3493));
                        float _4930 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3524 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3525 = dot(vec3(_938, _941, _944), vec3(_3517 * _3511, _3517 * _3512, _3517 * _3513));
                        float _4941 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3528 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3532 = ((_3528 * _3528) * (_3510 + (-1.0))) + 1.0;
                        float _3533 = _3469 * _3509;
                        float _3534 = _3533 * _3533;
                        float _3537 = ((1.0 - _3534) * _3459) + _3534;
                        float _4952 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3538 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3539 = 1.0 - _3509;
                        float _3549 = (0.5 / (((_3538 * ((_3524 * _3539) + _3509)) + 9.9999999392252902907785028219223e-09) + (((_3538 * _3539) + _3509) * _3524))) * _3538;
                        float _4963 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3560 = (((_3510 * 3.1415927410125732421875) * (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) / ((_3532 * _3532) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125))) * _3465;
                        _3313 = (_3480 * _3428.x) + _3386;
                        _3314 = (_3480 * _3428.y) + _3387;
                        _3315 = (_3480 * _3428.z) + _3388;
                        _3310 = (_3560 * _3445.x) + _3383;
                        _3311 = (_3560 * _3445.y) + _3384;
                        _3312 = (_3560 * _3445.z) + _3385;
                        if (_3390 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3390;
                        }
                    }
                    frontier_phi_71_pred = _3315;
                    frontier_phi_71_pred_1 = _3314;
                    frontier_phi_71_pred_2 = _3313;
                    frontier_phi_71_pred_3 = _3312;
                    frontier_phi_71_pred_4 = _3311;
                    frontier_phi_71_pred_5 = _3310;
                }
                _3096 = frontier_phi_71_pred;
                _3094 = frontier_phi_71_pred_1;
                _3092 = frontier_phi_71_pred_2;
                _3090 = frontier_phi_71_pred_3;
                _3088 = frontier_phi_71_pred_4;
                _3086 = frontier_phi_71_pred_5;
                uint _3245 = _3244 + 1u;
                if (_3245 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3238 = _3086;
                    _3239 = _3088;
                    _3240 = _3090;
                    _3241 = _3092;
                    _3242 = _3094;
                    _3243 = _3096;
                    _3244 = _3245;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
        }
        uvec4 _3099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3100 = _3099.z;
        uint _3102 = (_3100 >> 8u) & 15u;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        if (((4294967295u << _3102) & _3005) == 0u)
        {
            _3206 = _3085;
            _3208 = _3087;
            _3210 = _3089;
            _3212 = _3091;
            _3214 = _3093;
            _3216 = _3095;
        }
        else
        {
            float _3231 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
            float _3232 = _3231 * _2083;
            float _3233 = _3231 * _2084;
            float _3234 = _3231 * _2085;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3102 < ((_3100 >> 12u) & 15u))
            {
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3366 = _3085;
                float _3367 = _3087;
                float _3368 = _3089;
                float _3369 = _3091;
                float _3370 = _3093;
                float _3371 = _3095;
                uint _3372 = _3102;
                uint _3381;
                bool _3382;
                for (;;)
                {
                    _3381 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3372 << 2u)) >> 2u)).x;
                    _3382 = _3381 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3382)
                    {
                        frontier_phi_82_pred = _3371;
                        frontier_phi_82_pred_1 = _3370;
                        frontier_phi_82_pred_2 = _3369;
                        frontier_phi_82_pred_3 = _3368;
                        frontier_phi_82_pred_4 = _3367;
                        frontier_phi_82_pred_5 = _3366;
                    }
                    else
                    {
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3587 = _3366;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        uint _3593 = _3381;
                        uint _3594;
                        vec4 _3619;
                        float _3620;
                        vec4 _3635;
                        vec3 _3647;
                        vec4 _3662;
                        vec4 _3677;
                        float _3723;
                        bool _3724;
                        for (;;)
                        {
                            uint _3604 = ((_3372 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3593));
                            _3594 = (_3593 + 4294967295u) & _3593;
                            uint _3606 = _3604 * 40u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            _3620 = _3619.w;
                            uint _3622 = (_3604 * 40u) + 4u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3604 * 40u) + 8u;
                            _3647 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x));
                            uint _3649 = (_3604 * 40u) + 16u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3664 = (_3604 * 40u) + 20u;
                            _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3679 = (_3604 * 40u) + 24u;
                            vec4 _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3698 = (_3604 * 40u) + 28u;
                            vec4 _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            _3723 = fma(_2085, _3711.z, fma(_2084, _3711.y, _3711.x * _2083)) + _3711.w;
                            _3724 = !((fma(_2085, _3692.z, fma(_2084, _3692.y, _3692.x * _2083)) + _3692.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3724)
                            {
                                float _3751 = _3619.x - _2083;
                                float _3752 = _3619.y - _2084;
                                float _3753 = _3619.z - _2085;
                                float _3754 = dot(vec3(_3751, _3752, _3753), vec3(_3751, _3752, _3753));
                                float _3757 = inversesqrt(_3754);
                                float _3758 = _3757 * _3751;
                                float _3759 = _3757 * _3752;
                                float _3760 = _3757 * _3753;
                                float _3764 = 1.0 - (_3754 / (_3620 * _3620));
                                float _4974 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3765 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3769 = sqrt(_3754) * _3635.w;
                                float _3771 = 1.39999997615814208984375 / (_3769 + 1.39999997615814208984375);
                                float _3772 = _3771 * _3771;
                                float _3775 = ((1.0 - _3772) * dot(vec3(_3758, _3759, _3760), vec3(_938, _941, _944))) + _3772;
                                float _3778 = _3769 * _3769;
                                float _3782 = (fma(_2085, _3662.z, fma(_2084, _3662.y, _3662.x * _2083)) + _3662.w) / _3723;
                                float _3783 = (fma(_2085, _3677.z, fma(_2084, _3677.y, _3677.x * _2083)) + _3677.w) / _3723;
                                float _3787 = 1.0 - dot(vec2(_3782, _3783), vec2(_3782, _3783));
                                float _4990 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3789 = _3788 * (((isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0))) * _3765) / ((_3778 * 0.699999988079071044921875) + 1.0));
                                float _3801 = exp2(log2(1.0 / ((_3778 * 3.5) + 5.0)) * 0.25);
                                float _3802 = 1.0 - _998;
                                float _3809 = sqrt(1.0 - ((1.0 - (_3802 * _3802)) * (1.0 - (_3801 * _3801))));
                                float _3810 = _3809 * _3809;
                                float _3811 = _3810 * _3810;
                                float _3812 = _3758 - _3232;
                                float _3813 = _3759 - _3233;
                                float _3814 = _3760 - _3234;
                                float _3818 = inversesqrt(dot(vec3(_3812, _3813, _3814), vec3(_3812, _3813, _3814)));
                                float _3822 = dot(vec3(_938, _941, _944), vec3((-0.0) - _3232, (-0.0) - _3233, (-0.0) - _3234));
                                float _5001 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3825 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3826 = dot(vec3(_938, _941, _944), vec3(_3818 * _3812, _3818 * _3813, _3818 * _3814));
                                float _5012 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3829 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3833 = ((_3829 * _3829) * (_3811 + (-1.0))) + 1.0;
                                float _3834 = _3771 * _3810;
                                float _3835 = _3834 * _3834;
                                float _3841 = ((1.0 - _3835) * dot(vec3(_938, _941, _944), vec3(_3758, _3759, _3760))) + _3835;
                                float _5023 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3843 = 1.0 - _3810;
                                float _3853 = (0.5 / (((_3842 * ((_3825 * _3843) + _3810)) + 9.9999999392252902907785028219223e-09) + (((_3842 * _3843) + _3810) * _3825))) * _3842;
                                float _5034 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3863 = (_3788 * _3765) * (((_3811 * 3.1415927410125732421875) * (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) / ((_3833 * _3833) * ((_3778 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3789 * _3635.z;
                                frontier_phi_88_pred_1 = _3789 * _3635.y;
                                frontier_phi_88_pred_2 = _3789 * _3635.x;
                                frontier_phi_88_pred_3 = _3863 * _3647.z;
                                frontier_phi_88_pred_4 = _3863 * _3647.y;
                                frontier_phi_88_pred_5 = _3863 * _3647.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3872 = frontier_phi_88_pred;
                            _3871 = frontier_phi_88_pred_1;
                            _3870 = frontier_phi_88_pred_2;
                            _3869 = frontier_phi_88_pred_3;
                            _3868 = frontier_phi_88_pred_4;
                            _3867 = frontier_phi_88_pred_5;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            _3579 = _3872 + _3592;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            if (_3594 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3594;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3579;
                        frontier_phi_82_pred_1 = _3578;
                        frontier_phi_82_pred_2 = _3577;
                        frontier_phi_82_pred_3 = _3576;
                        frontier_phi_82_pred_4 = _3575;
                        frontier_phi_82_pred_5 = _3574;
                    }
                    _3217 = frontier_phi_82_pred;
                    _3215 = frontier_phi_82_pred_1;
                    _3213 = frontier_phi_82_pred_2;
                    _3211 = frontier_phi_82_pred_3;
                    _3209 = frontier_phi_82_pred_4;
                    _3207 = frontier_phi_82_pred_5;
                    uint _3373 = _3372 + 1u;
                    if (_3373 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3366 = _3207;
                        _3367 = _3209;
                        _3368 = _3211;
                        _3369 = _3213;
                        _3370 = _3215;
                        _3371 = _3217;
                        _3372 = _3373;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3213;
                frontier_phi_63_64_ladder_1 = _3217;
                frontier_phi_63_64_ladder_2 = _3215;
                frontier_phi_63_64_ladder_3 = _3211;
                frontier_phi_63_64_ladder_4 = _3209;
                frontier_phi_63_64_ladder_5 = _3207;
            }
            else
            {
                frontier_phi_63_64_ladder = _3091;
                frontier_phi_63_64_ladder_1 = _3095;
                frontier_phi_63_64_ladder_2 = _3093;
                frontier_phi_63_64_ladder_3 = _3089;
                frontier_phi_63_64_ladder_4 = _3087;
                frontier_phi_63_64_ladder_5 = _3085;
            }
            _3206 = frontier_phi_63_64_ladder_5;
            _3208 = frontier_phi_63_64_ladder_4;
            _3210 = frontier_phi_63_64_ladder_3;
            _3212 = frontier_phi_63_64_ladder;
            _3214 = frontier_phi_63_64_ladder_2;
            _3216 = frontier_phi_63_64_ladder_1;
        }
        float _3221 = isnan(1.0) ? _982 : (isnan(_982) ? 1.0 : min(_982, 1.0));
        _3018 = (_3221 * _3212) + _2549;
        _3020 = (_3221 * _3214) + _2551;
        _3022 = (_3221 * _3216) + _2553;
        _3024 = ((_3206 * 0.039999999105930328369140625) * _3221) + _2872;
        _3026 = ((_3208 * 0.039999999105930328369140625) * _3221) + _2874;
        _3028 = ((_3210 * 0.039999999105930328369140625) * _3221) + _2876;
    }
    else
    {
        _3018 = _2549;
        _3020 = _2551;
        _3022 = _2553;
        _3024 = _2872;
        _3026 = _2874;
        _3028 = _2876;
    }
    float _5050 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _5061 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _5072 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _3045 = ((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3018 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _982))) + ((_3024 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _3046 = ((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3020 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _982))) + ((_3026 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _3047 = ((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3022 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _982))) + ((_3028 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    uint _3048 = _259 + 6u;
    float _3056 = _919 / cbSceneParam._m0[86u].x;
    float _3057 = _920 / cbSceneParam._m0[86u].y;
    vec4 _3071 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3056, _3057, (log2((isnan(cbSceneParam._m0[77u].w) ? _841 : (isnan(_841) ? cbSceneParam._m0[77u].w : min(_841, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3073 = _3071.x;
    float _3074 = _3071.y;
    float _3075 = _3071.z;
    float _3076 = _3071.w;
    float _3148;
    float _3150;
    float _3152;
    float _3154;
    if (_841 > cbSceneParam._m0[78u].w)
    {
        float _3110 = isnan(_841) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _841 : min(cbSceneParam._m0[80u].w, _841));
        float _3111 = _3110 / _841;
        float _3122 = _3111 * _892;
        float _3123 = _893 * _3111;
        float _3124 = (-0.0) - _3123;
        float _3126 = _3111 * _894;
        float _3128 = (cbSceneParam._m0[77u].w * _3124) / _3110;
        float _3129 = _3128 + cbSceneParam._m0[79u].w;
        float _3130 = cbSceneParam._m0[79u].w - _3123;
        float _3136 = sqrt(((_3122 * _3122) + (_3123 * _3123)) + (_3126 * _3126));
        float _3139 = (1.0 - (cbSceneParam._m0[77u].w / _3110)) * _3136;
        float _3144 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3146 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3323;
        if (abs((_3124 - _3128) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3323 = ((((_3129 > 0.0) ? exp2(_3144 * _3129) : (2.0 - exp2(_3146 * _3129))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3139;
        }
        else
        {
            float _3267 = 1.0 / cbSceneParam._m0[80u].x;
            float _3268 = isnan(_3130) ? _3129 : (isnan(_3129) ? _3130 : max(_3129, _3130));
            float _3269 = isnan(_3130) ? _3129 : (isnan(_3129) ? _3130 : min(_3129, _3130));
            float _3278 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : min(_3268, 0.0));
            float _3279 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : min(_3269, 0.0));
            _3323 = ((abs(_3136 / _3124) * cbSceneParam._m0[80u].y) * ((((_3278 - _3279) * 2.0) - ((exp2(_3144 * (isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0)))) - exp2(_3144 * (isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))))) * _3267)) - ((exp2(_3146 * _3278) - exp2(_3146 * _3279)) * _3267))) + (_3139 * cbSceneParam._m0[80u].z);
        }
        vec4 _3325 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3056, _3057, 1.0), 0.0);
        float _3334 = exp2((_3323 * (-1.44269502162933349609375)) * (1.0 - _3325.w));
        float _3335 = log2(_3334);
        float _3351 = log2(_3076);
        _3148 = (exp2(_3351 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3335 * cbSceneParam._m0[78u].x)) * _3325.x) / cbSceneParam._m0[78u].x)) + _3073;
        _3150 = (exp2(_3351 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3335 * cbSceneParam._m0[78u].y)) * _3325.y) / cbSceneParam._m0[78u].y)) + _3074;
        _3152 = (exp2(_3351 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3335 * cbSceneParam._m0[78u].z)) * _3325.z) / cbSceneParam._m0[78u].z)) + _3075;
        _3154 = _3334 * _3076;
    }
    else
    {
        _3148 = _3073;
        _3150 = _3074;
        _3152 = _3075;
        _3154 = _3076;
    }
    bool _3361;
    vec4 _3164;
    vec4 _3186;
    float _3188;
    float _3192;
    float _3193;
    float _3194;
    float _3195;
    bool _3205;
    for (;;)
    {
        _3164 = cbMatDynParam._m0[0u];
        float _3166 = roundEven(_3164.y);
        bool _3167 = _3166 == 3.0;
        float _3168 = log2(_3154);
        float _3175 = exp2(_3168 * cbSceneParam._m0[78u].x) * _3045;
        float _3176 = exp2(_3168 * cbSceneParam._m0[78u].y) * _3046;
        float _3177 = exp2(_3168 * cbSceneParam._m0[78u].z) * _3047;
        float _3184 = _908 + (-0.5);
        _3186 = cbMtdParam._m0[1u];
        _3188 = _3186.y * _3184;
        float _3191 = (_3166 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3192 = _3191 * (_3167 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3148)));
        _3193 = _3191 * (_3167 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3150)));
        _3194 = _3191 * (_3167 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3152)));
        _3195 = _3184 * 0.999000012874603271484375;
        _3205 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3205)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3195) < 0.5)
            {
                _3361 = true;
                break;
            }
        }
        uint _3302 = _957 + uint(_3164.w);
        if ((cbInstanceData._m0[_3302].w < 1.0) && ((cbInstanceData._m0[_3302].w + _3195) < 0.5))
        {
            _3361 = true;
            break;
        }
        if ((_3188 + 1.0) < _3186.x)
        {
            _3361 = true;
            break;
        }
        _3361 = false;
        break;
    }
    float _3565;
    if (_3361)
    {
        discard_state = true;
        _3565 = 0.0;
    }
    else
    {
        _3565 = cbInstanceData._m0[_3048].w;
    }
    SV_Target.x = _3192;
    SV_Target.y = _3193;
    SV_Target.z = _3194;
    SV_Target.w = _3565;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3048].w;
    discard_exit();
}


