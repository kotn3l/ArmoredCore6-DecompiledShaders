#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1462;
float _4102;
float _4103;
float _4104;
float _4105;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4114 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4125 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4136 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _384.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[24u].z) + _436) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4147 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _461 = (_454 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _462 = (_454 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _463 = (_454 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _384.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[24u].z) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4158 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _301) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _302) + cbTextureTilingScale._m0[24u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _573 = _571.x;
    float _583 = dot(vec4(_573, _571.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _595 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _384.z) * 2.0) - ((((_573 - _583) * cbMtdParam._m0[24u].z) + _583) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4169 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _603 = (_596 * ((_554.x * cbMtdParam._m0[14u].x) - _534)) + _534;
    float _604 = (_596 * ((_554.y * cbMtdParam._m0[14u].y) - _535)) + _535;
    float _605 = (_596 * ((_554.z * cbMtdParam._m0[14u].z) - _536)) + _536;
    float _609 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _603;
    float _612 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _604;
    float _615 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _605;
    float _622 = ((_603 - _609) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) + _609;
    float _623 = ((_604 - _612) * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) + _612;
    float _624 = ((_605 - _615) * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) + _615;
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _683 = _681.x;
    float _684 = _681.y;
    float _685 = _681.z;
    float _692 = ((_664.x - _683) * _454) + _683;
    float _693 = ((_664.y - _684) * _454) + _684;
    float _694 = ((_664.z - _685) * _454) + _685;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _717 = ((_706.x - _692) * _527) + _692;
    float _718 = ((_706.y - _693) * _527) + _693;
    float _719 = ((_706.z - _694) * _527) + _694;
    vec4 _731 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _301) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _302) + cbTextureTilingScale._m0[23u].w));
    float _744 = ((_731.z - _719) * _596) + _719;
    float _747 = ((((_731.x - _717) * _596) + _717) * 2.0) + (-1.0);
    float _748 = ((((_731.y - _718) * _596) + _718) * 2.0) + (-1.0);
    float _749 = dot(vec2(_747, _748), vec2(_747, _748));
    float _4180 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _754 = sqrt(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))));
    vec4 _768 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _793 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _795 = _793.x;
    float _796 = 1.0 - _795;
    float _809 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_795 - _796) * cbMtdParam._m0[24u].w) + _796) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4191 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _810 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _817 = (_810 * (cbMtdParam._m0[17u].x - _622)) + _622;
    float _818 = (_810 * (cbMtdParam._m0[17u].y - _623)) + _623;
    float _819 = (_810 * (cbMtdParam._m0[17u].z - _624)) + _624;
    float _824 = (((_641.z - _744) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _744;
    float _828 = ((_768.z - _824) * cbMtdParam._m0[19u].w) + _824;
    vec4 _841 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _848 = (_841.x * 2.0) + (-1.0);
    float _849 = (_841.y * 2.0) + (-1.0);
    float _850 = dot(vec2(_848, _849), vec2(_848, _849));
    float _4202 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _858 = (_810 * (_841.z - _828)) + _828;
    float _867 = (_747 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_641.x * 2.0) + (-1.0)))) + (((_768.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _868 = (_748 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_641.y * 2.0) + (-1.0)))) + (((_768.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _880 = (((_848 - _867) + (cbMtdParam._m0[21u].x * _867)) * _810) + _867;
    float _881 = (((_849 - _868) + (cbMtdParam._m0[21u].x * _868)) * _810) + _868;
    float _882 = (_810 * (sqrt(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) - _754)) + _754;
    float _886 = cbMtdParam._m0[22u].x + _768.w;
    float _889 = fma(_882, _248 * NORMAL.x, fma(_881, _255 * TANGENT.x, (_241 * _233) * _880));
    float _892 = fma(_882, _248 * NORMAL.y, fma(_881, _255 * TANGENT.y, (_241 * _234) * _880));
    float _895 = fma(_882, _248 * NORMAL.z, fma(_881, _255 * TANGENT.z, (_241 * _235) * _880));
    float _899 = inversesqrt(dot(vec3(_889, _892, _895), vec3(_889, _892, _895)));
    float _900 = _899 * _889;
    float _901 = _899 * _892;
    float _902 = _899 * _895;
    float _4213 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _903 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4235 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4246 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4257 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _921 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _973 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _963);
    float _974 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _963);
    float _975 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _963);
    float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
    float _980 = _973 * _979;
    float _981 = _974 * _979;
    float _982 = _975 * _979;
    vec4 _987 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _989 = _987.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1143 = sqrt(((_973 * _973) + (_974 * _974)) + (_975 * _975));
        float _1149 = (cbMatDynParam._m0[5u].x * _1143) + cbMatDynParam._m0[5u].y;
        float _4268 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1154 = (cbMatDynParam._m0[5u].z * _1143) + cbMatDynParam._m0[5u].w;
        float _4279 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) - _1150)) + _1150) < ((_989 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1000 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1001 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1019 = fma(_902, cbSceneParam._m0[5u].z, fma(_901, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _900));
    float _1022 = fma(_902, cbSceneParam._m0[6u].z, fma(_901, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _900));
    float _1025 = fma(_902, cbSceneParam._m0[7u].z, fma(_901, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _900));
    uint _1038 = _282 + 9u;
    uint _1039 = _1038 + uint(cbMatDynParam._m0[0u].w);
    float _1045 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * cbInstanceData._m0[_1039].x;
    float _1046 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * cbInstanceData._m0[_1039].y;
    float _1047 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * cbInstanceData._m0[_1039].z;
    float _4290 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _4312 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    vec4 _1059 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1000, cbSceneParam._m0[86u].y * _1001));
    float _1063 = ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * TEXCOORD_5.w) * _1059.x;
    float _1064 = dot(vec3(_900, _901, _902), vec3(_980, _981, _982));
    float _1067 = _1064 * 2.0;
    float _1071 = (_1067 * _900) - _980;
    float _1072 = (_1067 * _901) - _981;
    float _1073 = (_1067 * _902) - _982;
    float _1077 = abs(dot(vec3(_980, _981, _982), vec3(_900, _901, _902)));
    float _4323 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1079 = sqrt(_903);
    float _1092 = exp2((_1079 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1079 * 3.0));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1461;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1186 = fma(_1132, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124));
        float _1190 = fma(_1132, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124));
        float _1194 = fma(_1132, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124));
        float _1219 = _1124 + _900;
        float _1220 = _1128 + _901;
        float _1221 = _1132 + _902;
        float _1231 = fma(_1221, cbModelParam._m0[26u].z, fma(_1220, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219)) - _1186;
        float _1232 = fma(_1221, cbModelParam._m0[27u].z, fma(_1220, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219)) - _1190;
        float _1233 = fma(_1221, cbModelParam._m0[28u].z, fma(_1220, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219)) - _1194;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1186 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1190 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[34u].z) + ((((((_1194 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1289 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1255.x + (-0.5));
        float _1291 = _1289 * (_1255.y + (-0.5));
        float _1292 = _1289 * (_1255.z + (-0.5));
        float _1299 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1262.x + (-0.5));
        float _1301 = _1299 * (_1262.y + (-0.5));
        float _1302 = _1299 * (_1262.z + (-0.5));
        float _1309 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1269.x + (-0.5));
        float _1311 = _1309 * (_1269.y + (-0.5));
        float _1312 = _1309 * (_1269.z + (-0.5));
        float _1319 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1276.x + (-0.5));
        float _1321 = _1319 * (_1276.y + (-0.5));
        float _1322 = _1319 * (_1276.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1343 = (dot(vec3(_900, _901, _902), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1353 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4371 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1355 + 1.0))) + _1360) * _1323;
        float _1370 = _1291 * 0.5;
        float _1371 = _1301 * 0.5;
        float _1372 = _1311 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_900, _901, _902), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4382 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4393 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_1397 + 1.0))) + _1402) * _1324;
        float _1412 = _1292 * 0.5;
        float _1413 = _1302 * 0.5;
        float _1414 = _1312 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_900, _901, _902), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4437 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1439 + 1.0))) + _1444) * _1325;
        _1461 = _1292;
        _1463 = _1291;
        _1464 = _1290;
        _1465 = _1302;
        _1466 = _1301;
        _1467 = _1300;
        _1468 = _1312;
        _1469 = _1311;
        _1470 = _1310;
        _1471 = _1325;
        _1472 = _1324;
        _1473 = _1323;
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1462;
        _1463 = _1462;
        _1464 = _1462;
        _1465 = _1462;
        _1466 = _1462;
        _1467 = _1462;
        _1468 = _1462;
        _1469 = _1462;
        _1470 = _1462;
        _1471 = _1462;
        _1472 = _1462;
        _1473 = _1462;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1502 = fma(_1132, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124));
        float _1506 = fma(_1132, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124));
        float _1510 = fma(_1132, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124));
        float _1533 = _1124 + _900;
        float _1534 = _1128 + _901;
        float _1535 = _1132 + _902;
        float _1545 = fma(_1535, cbModelParam._m0[30u].z, fma(_1534, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1533)) - _1502;
        float _1546 = fma(_1535, cbModelParam._m0[31u].z, fma(_1534, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1533)) - _1506;
        float _1547 = fma(_1535, cbModelParam._m0[32u].z, fma(_1534, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1533)) - _1510;
        float _1551 = inversesqrt(dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547)));
        float _1564 = ((_1551 * _1545) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1502 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1565 = ((_1551 * _1546) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1506 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1551 * _1547) / cbModelParam._m0[35u].z) + ((((((_1510 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        float _1601 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1568.x + (-0.5));
        float _1603 = _1601 * (_1568.y + (-0.5));
        float _1604 = _1601 * (_1568.z + (-0.5));
        float _1611 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1575.x + (-0.5));
        float _1613 = _1611 * (_1575.y + (-0.5));
        float _1614 = _1611 * (_1575.z + (-0.5));
        float _1621 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1582.x + (-0.5));
        float _1623 = _1621 * (_1582.y + (-0.5));
        float _1624 = _1621 * (_1582.z + (-0.5));
        float _1631 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1589.x + (-0.5));
        float _1633 = _1631 * (_1589.y + (-0.5));
        float _1634 = _1631 * (_1589.z + (-0.5));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = _1602 * 0.5;
        float _1639 = _1612 * 0.5;
        float _1640 = _1622 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_900, _901, _902), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4478 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4489 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4500 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_1665 + 1.0))) + _1670) * _1635;
        float _1680 = _1603 * 0.5;
        float _1681 = _1613 * 0.5;
        float _1682 = _1623 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_900, _901, _902), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4511 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4522 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4533 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_1707 + 1.0))) + _1712) * _1636;
        float _1722 = _1604 * 0.5;
        float _1723 = _1614 * 0.5;
        float _1724 = _1624 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_900, _901, _902), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4544 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4555 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4566 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_1749 + 1.0))) + _1754) * _1637;
        _1771 = _1604;
        _1772 = _1603;
        _1773 = _1602;
        _1774 = _1614;
        _1775 = _1613;
        _1776 = _1612;
        _1777 = _1624;
        _1778 = _1623;
        _1779 = _1622;
        _1780 = _1637;
        _1781 = _1636;
        _1782 = _1635;
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
    }
    else
    {
        _1771 = _1462;
        _1772 = _1462;
        _1773 = _1462;
        _1774 = _1462;
        _1775 = _1462;
        _1776 = _1462;
        _1777 = _1462;
        _1778 = _1462;
        _1779 = _1462;
        _1780 = _1462;
        _1781 = _1462;
        _1782 = _1462;
        _1783 = 0.0;
        _1784 = 0.0;
        _1785 = 0.0;
    }
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1474)) + _1474;
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1475)) + _1475;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1476)) + _1476;
    float _1818 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1795));
    float _1839 = _1071 * 0.5;
    float _1840 = _1072 * 0.5;
    float _1841 = _1073 * 0.5;
    float _1842 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1845 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1848 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1882;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1855 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1461, _1465, _1468, _1471));
        float _1859 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1863 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1870 = dot(vec4(cbModelParam._m0[39u]), vec4(_1839, _1840, _1841, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1870) ? 0.0 : (isnan(0.0) ? _1870 : max(0.0, _1870))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1893;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1884 = dot(vec4(cbModelParam._m0[40u]), vec4(_1839, _1840, _1841, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1897 = (_1893 * cbModelParam._m0[1u].x) + (_1882 * (1.0 - cbModelParam._m0[1u].x));
    float _1907 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _903);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1907 : min(cbModelParam._m0[25u].z, _1907));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1955 = fma(_1132, cbModelParam._m0[13u].z, fma(_1128, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124)) + cbModelParam._m0[13u].w;
        float _1959 = fma(_1132, cbModelParam._m0[14u].z, fma(_1128, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124)) + cbModelParam._m0[14u].w;
        float _1963 = fma(_1132, cbModelParam._m0[15u].z, fma(_1128, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124)) + cbModelParam._m0[15u].w;
        float _1966 = fma(_1073, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071));
        float _1969 = fma(_1073, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071));
        float _1972 = fma(_1073, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071));
        float _2000;
        if (_1966 > 0.0)
        {
            _2000 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2000 = frontier_phi_17_15_ladder;
        }
        float _2170;
        if (_1969 > 0.0)
        {
            _2170 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2170 = frontier_phi_26_22_ladder;
        }
        float _2465;
        if (_1972 > 0.0)
        {
            _2465 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2465 = frontier_phi_38_33_ladder;
        }
        float _2467 = isnan(_2170) ? _2000 : (isnan(_2000) ? _2170 : min(_2000, _2170));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1966) + _1955;
        float _2473 = (_2468 * _1969) + _1959;
        float _2474 = (_2468 * _1972) + _1963;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2475;
        float _2479 = _2475 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 > _2479) || ((_2473 < _2477) || ((_2472 < _2477) || (_2472 > _2479))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2619 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2474, cbModelParam._m0[9u].z, fma(_2473, cbModelParam._m0[9u].y, _2472 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2474, cbModelParam._m0[10u].z, fma(_2473, cbModelParam._m0[10u].y, _2472 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2474, cbModelParam._m0[11u].z, fma(_2473, cbModelParam._m0[11u].y, _2472 * cbModelParam._m0[11u].x))), _1908);
            frontier_phi_16_38_ladder = _2619.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2619.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2619.x * cbModelParam._m0[1u].y;
        }
        _1988 = frontier_phi_16_38_ladder_2;
        _1990 = frontier_phi_16_38_ladder_1;
        _1992 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1071, _1072, _1073), _1908);
        _1988 = _1976.x * cbModelParam._m0[1u].y;
        _1990 = _1976.y * cbModelParam._m0[1u].y;
        _1992 = _1976.z * cbModelParam._m0[1u].y;
    }
    float _1996 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _903);
    float _1997 = isnan(_1996) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1996 : min(cbModelParam._m0[25u].w, _1996));
    float _2087;
    float _2089;
    float _2091;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2051 = fma(_1132, cbModelParam._m0[21u].z, fma(_1128, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124)) + cbModelParam._m0[21u].w;
        float _2055 = fma(_1132, cbModelParam._m0[22u].z, fma(_1128, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124)) + cbModelParam._m0[22u].w;
        float _2059 = fma(_1132, cbModelParam._m0[23u].z, fma(_1128, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124)) + cbModelParam._m0[23u].w;
        float _2062 = fma(_1073, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071));
        float _2065 = fma(_1073, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071));
        float _2068 = fma(_1073, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071));
        float _2175;
        if (_2062 > 0.0)
        {
            _2175 = abs((1.0 - _2051) / _2062);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2051 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2175 = frontier_phi_28_24_ladder;
        }
        float _2492;
        if (_2065 > 0.0)
        {
            _2492 = abs((1.0 - _2055) / _2065);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2055 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2492 = frontier_phi_40_35_ladder;
        }
        float _2819;
        if (_2068 > 0.0)
        {
            _2819 = abs((1.0 - _2059) / _2068);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2059 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2819 = frontier_phi_50_47_ladder;
        }
        float _2821 = isnan(_2492) ? _2175 : (isnan(_2175) ? _2492 : min(_2175, _2492));
        float _2822 = isnan(_2819) ? _2821 : (isnan(_2821) ? _2819 : min(_2821, _2819));
        float _2826 = (_2822 * _2062) + _2051;
        float _2827 = (_2822 * _2065) + _2055;
        float _2828 = (_2822 * _2068) + _2059;
        float _2829 = _2822 * 9.9999997473787516355514526367188e-05;
        float _2830 = (-1.0) - _2829;
        float _2832 = _2829 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2828 > _2832) || ((_2828 < _2830) || ((_2827 > _2832) || ((_2827 < _2830) || ((_2826 < _2830) || (_2826 > _2832))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2828, cbModelParam._m0[17u].z, fma(_2827, cbModelParam._m0[17u].y, _2826 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2828, cbModelParam._m0[18u].z, fma(_2827, cbModelParam._m0[18u].y, _2826 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2828, cbModelParam._m0[19u].z, fma(_2827, cbModelParam._m0[19u].y, _2826 * cbModelParam._m0[19u].x))), _1997);
            frontier_phi_25_50_ladder = _2946.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2946.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2946.x * cbModelParam._m0[1u].z;
        }
        _2087 = frontier_phi_25_50_ladder_2;
        _2089 = frontier_phi_25_50_ladder_1;
        _2091 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1071, _1072, _1073), _1997);
        _2087 = _2071.x * cbModelParam._m0[1u].z;
        _2089 = _2071.y * cbModelParam._m0[1u].z;
        _2091 = _2071.z * cbModelParam._m0[1u].z;
    }
    float _2103 = ((((1.0 - _1092) * ((_1079 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1092 * _1079)) * _1063;
    float _2104 = _2103 * ((cbModelParam._m0[1u].w * (_2087 - _1988)) + _1988);
    float _2105 = _2103 * ((cbModelParam._m0[1u].w * (_2089 - _1990)) + _1990);
    float _2106 = _2103 * ((cbModelParam._m0[1u].w * (_2091 - _1992)) + _1992);
    float _2109 = fma(_2106, cbSceneParam._m0[89u].z, fma(_2105, cbSceneParam._m0[89u].y, _2104 * cbSceneParam._m0[89u].x));
    float _2112 = fma(_2106, cbSceneParam._m0[90u].z, fma(_2105, cbSceneParam._m0[90u].y, _2104 * cbSceneParam._m0[90u].x));
    float _2115 = fma(_2106, cbSceneParam._m0[91u].z, fma(_2105, cbSceneParam._m0[91u].y, _2104 * cbSceneParam._m0[91u].x));
    float _2149 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2153 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2157 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2161 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2162 = _2149 / _2161;
    float _2163 = _2153 / _2161;
    float _2164 = _2157 / _2161;
    float _2311;
    float _2312;
    float _2313;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2191 = ((uint(_2164 > cbSceneParam._m0[59u].y) + uint(_2164 > cbSceneParam._m0[59u].x)) + uint(_2164 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2192 = _2191 + 43u;
        uint _2200 = _2191 + 44u;
        uint _2208 = _2191 + 45u;
        uint _2216 = _2191 + 46u;
        float _2227 = fma(_2161, cbSceneParam._m0[_2192].w, fma(_2157, cbSceneParam._m0[_2192].z, fma(_2153, cbSceneParam._m0[_2192].y, _2149 * cbSceneParam._m0[_2192].x)));
        float _2231 = fma(_2161, cbSceneParam._m0[_2200].w, fma(_2157, cbSceneParam._m0[_2200].z, fma(_2153, cbSceneParam._m0[_2200].y, _2149 * cbSceneParam._m0[_2200].x)));
        float _2239 = fma(_2161, cbSceneParam._m0[_2216].w, fma(_2157, cbSceneParam._m0[_2216].z, fma(_2153, cbSceneParam._m0[_2216].y, _2149 * cbSceneParam._m0[_2216].x)));
        float _2244 = cbSceneParam._m0[33u].z * _2239;
        float _2246 = cbSceneParam._m0[33u].w * _2239;
        float _2249 = fma(_2161, cbSceneParam._m0[_2208].w, fma(_2157, cbSceneParam._m0[_2208].z, fma(_2153, cbSceneParam._m0[_2208].y, _2149 * cbSceneParam._m0[_2208].x))) / _2239;
        float _2297 = (cbSceneParam._m0[33u].x - sqrt(((_2163 * _2163) + (_2162 * _2162)) + (_2164 * _2164))) * cbSceneParam._m0[33u].y;
        float _4692 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2304 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2244 + _2227) / _2239, (_2246 + _2231) / _2239), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2246 + _2227) / _2239, (_2231 - _2244) / _2239), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2227 - _2244) / _2239, (_2231 - _2246) / _2239), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2227 - _2246) / _2239, (_2244 + _2231) / _2239), _2249), 0.0)).x), vec4(0.25)));
        _2311 = 1.0 - (_2304 * cbSceneParam._m0[34u].x);
        _2312 = 1.0 - (_2304 * cbSceneParam._m0[34u].y);
        _2313 = 1.0 - (_2304 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2311 = 1.0;
        _2312 = 1.0;
        _2313 = 1.0;
    }
    float _2377;
    float _2379;
    float _2381;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2365 = fma(_2161, cbSceneParam._m0[63u].w, fma(_2157, cbSceneParam._m0[63u].z, fma(_2153, cbSceneParam._m0[63u].y, _2149 * cbSceneParam._m0[63u].x)));
        float _2366 = fma(_2161, cbSceneParam._m0[60u].w, fma(_2157, cbSceneParam._m0[60u].z, fma(_2153, cbSceneParam._m0[60u].y, _2149 * cbSceneParam._m0[60u].x))) / _2365;
        float _2367 = fma(_2161, cbSceneParam._m0[61u].w, fma(_2157, cbSceneParam._m0[61u].z, fma(_2153, cbSceneParam._m0[61u].y, _2149 * cbSceneParam._m0[61u].x))) / _2365;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2366 >= cbSceneParam._m0[64u].x) && (_2367 >= cbSceneParam._m0[64u].y)) && (_2366 <= cbSceneParam._m0[64u].z)) && (_2367 <= cbSceneParam._m0[64u].w))
        {
            float _2505 = fma(_2161, cbSceneParam._m0[62u].w, fma(_2157, cbSceneParam._m0[62u].z, fma(_2153, cbSceneParam._m0[62u].y, _2149 * cbSceneParam._m0[62u].x))) / _2365;
            float _2509 = isnan(cbSceneParam._m0[41u].w) ? _2505 : (isnan(_2505) ? cbSceneParam._m0[41u].w : max(_2505, cbSceneParam._m0[41u].w));
            float _2552 = (cbSceneParam._m0[33u].x - sqrt(((_2163 * _2163) + (_2162 * _2162)) + (_2164 * _2164))) * cbSceneParam._m0[33u].y;
            float _4708 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
            float _2559 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2366, cbSceneParam._m0[33u].w + _2367), _2509), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2366, _2367 - cbSceneParam._m0[33u].z), _2509), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2366 - cbSceneParam._m0[33u].z, _2367 - cbSceneParam._m0[33u].w), _2509), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2366 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2367), _2509), 0.0)).x), vec4(0.25)));
            float _2563 = 1.0 - (_2559 * cbSceneParam._m0[34u].x);
            float _2564 = 1.0 - (_2559 * cbSceneParam._m0[34u].y);
            float _2565 = 1.0 - (_2559 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2565) ? _2313 : (isnan(_2313) ? _2565 : min(_2313, _2565));
            frontier_phi_37_36_ladder_1 = isnan(_2564) ? _2312 : (isnan(_2312) ? _2564 : min(_2312, _2564));
            frontier_phi_37_36_ladder_2 = isnan(_2563) ? _2311 : (isnan(_2311) ? _2563 : min(_2311, _2563));
        }
        else
        {
            frontier_phi_37_36_ladder = _2313;
            frontier_phi_37_36_ladder_1 = _2312;
            frontier_phi_37_36_ladder_2 = _2311;
        }
        _2377 = frontier_phi_37_36_ladder_2;
        _2379 = frontier_phi_37_36_ladder_1;
        _2381 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2377 = _2311;
        _2379 = _2312;
        _2381 = _2313;
    }
    uvec4 _2386 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2388 = _2386.x * 14u;
    uint _2389 = _2388 + 13u;
    float _2396 = _1063 + (-1.0);
    float _2401 = (cbLight._m0[_2389].x * _2396) + 1.0;
    float _2402 = (cbLight._m0[_2389].y * _2396) + 1.0;
    float _2403 = (cbLight._m0[_2389].z * _2396) + 1.0;
    float _2404 = (cbLight._m0[_2389].w * _2396) + 1.0;
    uint _2405 = _2388 + 5u;
    float _2411 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
    uint _2415 = _2388 + 4u;
    float _2424 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
    uint _2428 = _2388 | 1u;
    float _2439 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_900, _901, _902));
    float _2442 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_900, _901, _902));
    float _4744 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _4755 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2447 = (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * 0.3183098733425140380859375;
    float _2449 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * 0.3183098733425140380859375;
    float _2456 = ((cbLight._m0[_2405].x * _2411) * _2449) + (((cbLight._m0[_2415].x * _2377) * _2424) * _2447);
    float _2457 = ((_2411 * cbLight._m0[_2405].y) * _2449) + (((cbLight._m0[_2415].y * _2379) * _2424) * _2447);
    float _2458 = ((_2411 * cbLight._m0[_2405].z) * _2449) + (((cbLight._m0[_2415].z * _2381) * _2424) * _2447);
    uvec4 _2462 = floatBitsToUint(cbLight._m0[_2388 + 12u]);
    bool _2464 = _2462.x == 0u;
    float _2566;
    float _2568;
    float _2570;
    if (_2464)
    {
        _2566 = _2456;
        _2568 = _2457;
        _2570 = _2458;
    }
    else
    {
        uint _2574 = _2388 + 6u;
        float _2590 = (dot(vec3(cbLight._m0[_2388 + 2u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2591 = _2590 * _2590;
        float _4766 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2592 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2593 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        _2566 = (((cbLight._m0[_2574].x * 0.3183098733425140380859375) * _2592) * _2593) + _2456;
        _2568 = (((cbLight._m0[_2574].y * 0.3183098733425140380859375) * _2592) * _2593) + _2457;
        _2570 = (((cbLight._m0[_2574].z * 0.3183098733425140380859375) * _2592) * _2593) + _2458;
    }
    bool _2573 = _2462.y == 0u;
    float _2628;
    float _2630;
    float _2632;
    if (_2573)
    {
        _2628 = _2566;
        _2630 = _2568;
        _2632 = _2570;
    }
    else
    {
        uint _2790 = _2388 + 7u;
        float _2806 = (dot(vec3(cbLight._m0[_2388 + 3u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2807 = _2806 * _2806;
        float _4782 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2808 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2809 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        _2628 = (((cbLight._m0[_2790].x * 0.3183098733425140380859375) * _2808) * _2809) + _2566;
        _2630 = (((cbLight._m0[_2790].y * 0.3183098733425140380859375) * _2808) * _2809) + _2568;
        _2632 = (((cbLight._m0[_2790].z * 0.3183098733425140380859375) * _2808) * _2809) + _2570;
    }
    uint _2635 = _2388 + 8u;
    float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _903) * 0.949999988079071044921875);
    float _2649 = _2648 * _2648;
    float _2650 = cbLight._m0[_2388].x + _980;
    float _2651 = cbLight._m0[_2388].y + _981;
    float _2652 = cbLight._m0[_2388].z + _982;
    float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
    float _2657 = _2656 * _2650;
    float _2658 = _2656 * _2651;
    float _2659 = _2656 * _2652;
    float _2660 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2388].xyz));
    float _4798 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
    float _4809 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2664 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
    float _2665 = dot(vec3(_900, _901, _902), vec3(_2657, _2658, _2659));
    float _4820 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
    float _2669 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2657, _2658, _2659));
    float _4831 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2673 = _2649 * _2649;
    float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
    float _2688 = (exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2689 = 1.0 - _2649;
    float _2700 = (0.5 / (((_2664 * ((_2663 * _2689) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2664 * _2689) + _2649) * _2663))) * _2663;
    float _4842 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2702 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
    uint _2716 = _2388 + 9u;
    float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2428].w)) * _903) * 0.949999988079071044921875);
    float _2728 = _2727 * _2727;
    float _2729 = cbLight._m0[_2428].x + _980;
    float _2730 = cbLight._m0[_2428].y + _981;
    float _2731 = cbLight._m0[_2428].z + _982;
    float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
    float _2736 = _2735 * _2729;
    float _2737 = _2735 * _2730;
    float _2738 = _2735 * _2731;
    float _2739 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2428].xyz));
    float _4853 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2742 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
    float _2743 = dot(vec3(_900, _901, _902), vec3(_2736, _2737, _2738));
    float _4864 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2746 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
    float _2747 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_2736, _2737, _2738));
    float _4875 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2751 = _2728 * _2728;
    float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
    float _2764 = (exp2(log2(1.0 - (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2765 = 1.0 - _2728;
    float _2775 = (0.5 / (((_2664 * ((_2742 * _2765) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2664 * _2765) + _2728) * _2742))) * _2742;
    float _4886 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2777 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
    float _2787 = (((_2764 * cbLight._m0[_2716].x) * _2777) * _2411) + ((((cbLight._m0[_2635].x * _2377) * _2688) * _2702) * _2424);
    float _2788 = (((_2764 * cbLight._m0[_2716].y) * _2777) * _2411) + ((((cbLight._m0[_2635].y * _2379) * _2688) * _2702) * _2424);
    float _2789 = (((_2764 * cbLight._m0[_2716].z) * _2777) * _2411) + ((((cbLight._m0[_2635].z * _2381) * _2688) * _2702) * _2424);
    float _2845;
    float _2847;
    float _2849;
    if (_2464)
    {
        _2845 = _2787;
        _2847 = _2788;
        _2849 = _2789;
    }
    else
    {
        uint _2851 = _2388 + 2u;
        uint _2855 = _2388 + 10u;
        float _2869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2851].w)) * _903) * 0.949999988079071044921875);
        float _2870 = _2869 * _2869;
        float _2871 = cbLight._m0[_2851].x + _980;
        float _2872 = cbLight._m0[_2851].y + _981;
        float _2873 = cbLight._m0[_2851].z + _982;
        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
        float _2878 = _2877 * _2871;
        float _2879 = _2877 * _2872;
        float _2880 = _2877 * _2873;
        float _2881 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2851].xyz));
        float _4897 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
        float _2885 = dot(vec3(_900, _901, _902), vec3(_2878, _2879, _2880));
        float _4908 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2888 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
        float _2889 = dot(vec3(cbLight._m0[_2851].xyz), vec3(_2878, _2879, _2880));
        float _4919 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2893 = _2870 * _2870;
        float _2897 = ((_2888 * _2888) * (_2893 + (-1.0))) + 1.0;
        float _2906 = (exp2(log2(1.0 - (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2907 = 1.0 - _2870;
        float _2917 = (0.5 / (((_2664 * ((_2884 * _2907) + _2870)) + 9.9999999392252902907785028219223e-09) + (((_2664 * _2907) + _2870) * _2884))) * _2884;
        float _4930 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2919 = (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2893 / ((_2897 * _2897) * 3.141590118408203125));
        float _2920 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        _2845 = (((_2906 * cbLight._m0[_2855].x) * _2919) * _2920) + _2787;
        _2847 = (((_2906 * cbLight._m0[_2855].y) * _2919) * _2920) + _2788;
        _2849 = (((_2906 * cbLight._m0[_2855].z) * _2919) * _2920) + _2789;
    }
    float _2951;
    float _2953;
    float _2955;
    if (_2573)
    {
        _2951 = _2845;
        _2953 = _2847;
        _2955 = _2849;
    }
    else
    {
        uint _2962 = _2388 + 3u;
        uint _2966 = _2388 + 11u;
        float _2980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2962].w)) * _903) * 0.949999988079071044921875);
        float _2981 = _2980 * _2980;
        float _2982 = cbLight._m0[_2962].x + _980;
        float _2983 = cbLight._m0[_2962].y + _981;
        float _2984 = cbLight._m0[_2962].z + _982;
        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
        float _2989 = _2988 * _2982;
        float _2990 = _2988 * _2983;
        float _2991 = _2988 * _2984;
        float _2992 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2962].xyz));
        float _4946 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2995 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
        float _2996 = dot(vec3(_900, _901, _902), vec3(_2989, _2990, _2991));
        float _4957 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2999 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
        float _3000 = dot(vec3(cbLight._m0[_2962].xyz), vec3(_2989, _2990, _2991));
        float _4968 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3004 = _2981 * _2981;
        float _3008 = ((_2999 * _2999) * (_3004 + (-1.0))) + 1.0;
        float _3017 = (exp2(log2(1.0 - (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3018 = 1.0 - _2981;
        float _3028 = (0.5 / (((_2664 * ((_2995 * _3018) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_2664 * _3018) + _2981) * _2995))) * _2995;
        float _4979 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3030 = (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_3004 / ((_3008 * _3008) * 3.141590118408203125));
        float _3031 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        _2951 = (((_3017 * cbLight._m0[_2966].x) * _3030) * _3031) + _2845;
        _2953 = (((_3017 * cbLight._m0[_2966].y) * _3030) * _3031) + _2847;
        _2955 = (((_3017 * cbLight._m0[_2966].z) * _3030) * _3031) + _2849;
    }
    float _3097;
    float _3099;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    if (_2386.y == 0u)
    {
        uvec4 _3052 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3053 = _3052.x;
        uint _3064 = uint((float(_3052.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1001) / _3053))) + floor(float(uint(cbSceneParam._m0[85u].x * _1000) / _3053)));
        float _3074 = (log2(_2164 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3075 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
        uint _3078 = uint(isnan(14.0) ? _3075 : (isnan(_3075) ? 14.0 : min(_3075, 14.0)));
        uvec4 _3083 = texelFetch(g_lightClusterGridBuffer, int(((_3078 << 2u) + (_3064 << 6u)) >> 2u));
        uint _3084 = _3083.x;
        uint _3085 = _3052.z;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        if (((((1u << ((_3085 >> 4u) & 15u)) + 4294967295u) & _3084) == 0u) || ((_3085 & 240u) == 0u))
        {
            _3164 = 0.0;
            _3166 = 0.0;
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
        }
        else
        {
            float _3165;
            float _3167;
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            uint _3323 = 0u;
            uint _3332;
            bool _3333;
            for (;;)
            {
                _3332 = texelFetch(g_lightClassification, int((((_3078 << 5u) + (_3064 << 9u)) + (_3323 << 2u)) >> 2u)).x;
                _3333 = _3332 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3333)
                {
                    frontier_phi_71_pred = _3322;
                    frontier_phi_71_pred_1 = _3321;
                    frontier_phi_71_pred_2 = _3320;
                    frontier_phi_71_pred_3 = _3319;
                    frontier_phi_71_pred_4 = _3318;
                    frontier_phi_71_pred_5 = _3317;
                }
                else
                {
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    float _3467;
                    uint _3468;
                    _3462 = _3317;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3320;
                    _3466 = _3321;
                    _3467 = _3322;
                    _3468 = _3332;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    for (;;)
                    {
                        uint _3472 = uint(findLSB(_3468)) + (_3323 << 5u);
                        uint _3469 = (_3468 + 4294967295u) & _3468;
                        uint _3474 = _3472 * 48u;
                        vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 3u)).x));
                        uint _3494 = (_3472 * 48u) + 4u;
                        vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3494)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 3u)).x));
                        uint _3513 = (_3472 * 48u) + 8u;
                        vec3 _3524 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x));
                        float _3528 = _3488.x - _2162;
                        float _3529 = _3488.y - _2163;
                        float _3530 = _3488.z - _2164;
                        float _3531 = dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530));
                        float _3534 = inversesqrt(_3531);
                        float _3535 = _3534 * _3528;
                        float _3536 = _3534 * _3529;
                        float _3537 = _3534 * _3530;
                        float _3538 = dot(vec3(_1019, _1022, _1025), vec3(_3535, _3536, _3537));
                        float _3543 = 1.0 - (_3531 * _3488.w);
                        float _5005 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3544 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                        float _3545 = sqrt(_3531) * _3507.w;
                        float _3548 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                        float _3549 = _3548 * _3548;
                        float _3552 = ((1.0 - _3549) * _3538) + _3549;
                        float _3555 = _3545 * _3545;
                        float _3559 = ((isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))) * _3544) / ((_3555 * 0.699999988079071044921875) + 1.0);
                        float _3563 = (-0.0) - _2162;
                        float _3564 = (-0.0) - _2163;
                        float _3565 = (-0.0) - _2164;
                        float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                        float _3570 = _3569 * _3563;
                        float _3571 = _3569 * _3564;
                        float _3572 = _3569 * _3565;
                        float _3579 = exp2(log2(1.0 / ((_3555 * 3.5) + 5.0)) * 0.25);
                        float _3580 = 1.0 - _1079;
                        float _3587 = sqrt(1.0 - ((1.0 - (_3580 * _3580)) * (1.0 - (_3579 * _3579))));
                        float _3588 = _3587 * _3587;
                        float _3589 = _3588 * _3588;
                        float _3590 = _3570 + _3535;
                        float _3591 = _3571 + _3536;
                        float _3592 = _3572 + _3537;
                        float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                        float _3600 = dot(vec3(_1019, _1022, _1025), vec3(_3570, _3571, _3572));
                        float _5021 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3603 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                        float _3604 = dot(vec3(_1019, _1022, _1025), vec3(_3596 * _3590, _3596 * _3591, _3596 * _3592));
                        float _5032 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3607 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                        float _3611 = ((_3607 * _3607) * (_3589 + (-1.0))) + 1.0;
                        float _3612 = _3548 * _3588;
                        float _3613 = _3612 * _3612;
                        float _3616 = ((1.0 - _3613) * _3538) + _3613;
                        float _5043 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3617 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                        float _3618 = 1.0 - _3588;
                        float _3628 = (0.5 / (((_3617 * ((_3603 * _3618) + _3588)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3588) * _3603))) * _3617;
                        float _5054 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                        float _3639 = (((_3589 * 3.1415927410125732421875) * (isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0)))) / ((_3611 * _3611) * ((_3555 * 2.1991131305694580078125) + 3.141590118408203125))) * _3544;
                        _3392 = (_3559 * _3507.x) + _3465;
                        _3393 = (_3559 * _3507.y) + _3466;
                        _3394 = (_3559 * _3507.z) + _3467;
                        _3389 = (_3639 * _3524.x) + _3462;
                        _3390 = (_3639 * _3524.y) + _3463;
                        _3391 = (_3639 * _3524.z) + _3464;
                        if (_3469 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3462 = _3389;
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3392;
                            _3466 = _3393;
                            _3467 = _3394;
                            _3468 = _3469;
                        }
                    }
                    frontier_phi_71_pred = _3394;
                    frontier_phi_71_pred_1 = _3393;
                    frontier_phi_71_pred_2 = _3392;
                    frontier_phi_71_pred_3 = _3391;
                    frontier_phi_71_pred_4 = _3390;
                    frontier_phi_71_pred_5 = _3389;
                }
                _3175 = frontier_phi_71_pred;
                _3173 = frontier_phi_71_pred_1;
                _3171 = frontier_phi_71_pred_2;
                _3169 = frontier_phi_71_pred_3;
                _3167 = frontier_phi_71_pred_4;
                _3165 = frontier_phi_71_pred_5;
                uint _3324 = _3323 + 1u;
                if (_3324 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3317 = _3165;
                    _3318 = _3167;
                    _3319 = _3169;
                    _3320 = _3171;
                    _3321 = _3173;
                    _3322 = _3175;
                    _3323 = _3324;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3164 = _3165;
            _3166 = _3167;
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
        }
        uvec4 _3178 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3179 = _3178.z;
        uint _3181 = (_3179 >> 8u) & 15u;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        float _3293;
        float _3295;
        if (((4294967295u << _3181) & _3084) == 0u)
        {
            _3285 = _3164;
            _3287 = _3166;
            _3289 = _3168;
            _3291 = _3170;
            _3293 = _3172;
            _3295 = _3174;
        }
        else
        {
            float _3310 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
            float _3311 = _3310 * _2162;
            float _3312 = _3310 * _2163;
            float _3313 = _3310 * _2164;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3181 < ((_3179 >> 12u) & 15u))
            {
                float _3286;
                float _3288;
                float _3290;
                float _3292;
                float _3294;
                float _3296;
                float _3445 = _3164;
                float _3446 = _3166;
                float _3447 = _3168;
                float _3448 = _3170;
                float _3449 = _3172;
                float _3450 = _3174;
                uint _3451 = _3181;
                uint _3460;
                bool _3461;
                for (;;)
                {
                    _3460 = texelFetch(g_lightClassification, int((((_3078 << 5u) + (_3064 << 9u)) + (_3451 << 2u)) >> 2u)).x;
                    _3461 = _3460 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3461)
                    {
                        frontier_phi_82_pred = _3450;
                        frontier_phi_82_pred_1 = _3449;
                        frontier_phi_82_pred_2 = _3448;
                        frontier_phi_82_pred_3 = _3447;
                        frontier_phi_82_pred_4 = _3446;
                        frontier_phi_82_pred_5 = _3445;
                    }
                    else
                    {
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3946;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3666 = _3445;
                        float _3667 = _3446;
                        float _3668 = _3447;
                        float _3669 = _3448;
                        float _3670 = _3449;
                        float _3671 = _3450;
                        uint _3672 = _3460;
                        uint _3673;
                        vec4 _3698;
                        float _3699;
                        vec4 _3714;
                        vec3 _3726;
                        vec4 _3741;
                        vec4 _3756;
                        float _3802;
                        bool _3803;
                        for (;;)
                        {
                            uint _3683 = ((_3451 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3672));
                            _3673 = (_3672 + 4294967295u) & _3672;
                            uint _3685 = _3683 * 40u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            _3699 = _3698.w;
                            uint _3701 = (_3683 * 40u) + 4u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3716 = (_3683 * 40u) + 8u;
                            _3726 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x));
                            uint _3728 = (_3683 * 40u) + 16u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3743 = (_3683 * 40u) + 20u;
                            _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3758 = (_3683 * 40u) + 24u;
                            vec4 _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            uint _3777 = (_3683 * 40u) + 28u;
                            vec4 _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            _3802 = fma(_2164, _3790.z, fma(_2163, _3790.y, _3790.x * _2162)) + _3790.w;
                            _3803 = !((fma(_2164, _3771.z, fma(_2163, _3771.y, _3771.x * _2162)) + _3771.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3803)
                            {
                                float _3830 = _3698.x - _2162;
                                float _3831 = _3698.y - _2163;
                                float _3832 = _3698.z - _2164;
                                float _3833 = dot(vec3(_3830, _3831, _3832), vec3(_3830, _3831, _3832));
                                float _3836 = inversesqrt(_3833);
                                float _3837 = _3836 * _3830;
                                float _3838 = _3836 * _3831;
                                float _3839 = _3836 * _3832;
                                float _3843 = 1.0 - (_3833 / (_3699 * _3699));
                                float _5065 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                                float _3848 = sqrt(_3833) * _3714.w;
                                float _3850 = 1.39999997615814208984375 / (_3848 + 1.39999997615814208984375);
                                float _3851 = _3850 * _3850;
                                float _3854 = ((1.0 - _3851) * dot(vec3(_3837, _3838, _3839), vec3(_1019, _1022, _1025))) + _3851;
                                float _3857 = _3848 * _3848;
                                float _3861 = (fma(_2164, _3741.z, fma(_2163, _3741.y, _3741.x * _2162)) + _3741.w) / _3802;
                                float _3862 = (fma(_2164, _3756.z, fma(_2163, _3756.y, _3756.x * _2162)) + _3756.w) / _3802;
                                float _3866 = 1.0 - dot(vec2(_3861, _3862), vec2(_3861, _3862));
                                float _5081 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                                float _3868 = _3867 * (((isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0))) * _3844) / ((_3857 * 0.699999988079071044921875) + 1.0));
                                float _3880 = exp2(log2(1.0 / ((_3857 * 3.5) + 5.0)) * 0.25);
                                float _3881 = 1.0 - _1079;
                                float _3888 = sqrt(1.0 - ((1.0 - (_3881 * _3881)) * (1.0 - (_3880 * _3880))));
                                float _3889 = _3888 * _3888;
                                float _3890 = _3889 * _3889;
                                float _3891 = _3837 - _3311;
                                float _3892 = _3838 - _3312;
                                float _3893 = _3839 - _3313;
                                float _3897 = inversesqrt(dot(vec3(_3891, _3892, _3893), vec3(_3891, _3892, _3893)));
                                float _3901 = dot(vec3(_1019, _1022, _1025), vec3((-0.0) - _3311, (-0.0) - _3312, (-0.0) - _3313));
                                float _5092 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3904 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                                float _3905 = dot(vec3(_1019, _1022, _1025), vec3(_3897 * _3891, _3897 * _3892, _3897 * _3893));
                                float _5103 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3908 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                                float _3912 = ((_3908 * _3908) * (_3890 + (-1.0))) + 1.0;
                                float _3913 = _3850 * _3889;
                                float _3914 = _3913 * _3913;
                                float _3920 = ((1.0 - _3914) * dot(vec3(_1019, _1022, _1025), vec3(_3837, _3838, _3839))) + _3914;
                                float _5114 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3921 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
                                float _3922 = 1.0 - _3889;
                                float _3932 = (0.5 / (((_3921 * ((_3904 * _3922) + _3889)) + 9.9999999392252902907785028219223e-09) + (((_3921 * _3922) + _3889) * _3904))) * _3921;
                                float _5125 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3942 = (_3867 * _3844) * (((_3890 * 3.1415927410125732421875) * (isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0)))) / ((_3912 * _3912) * ((_3857 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3868 * _3714.z;
                                frontier_phi_88_pred_1 = _3868 * _3714.y;
                                frontier_phi_88_pred_2 = _3868 * _3714.x;
                                frontier_phi_88_pred_3 = _3942 * _3726.z;
                                frontier_phi_88_pred_4 = _3942 * _3726.y;
                                frontier_phi_88_pred_5 = _3942 * _3726.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3951 = frontier_phi_88_pred;
                            _3950 = frontier_phi_88_pred_1;
                            _3949 = frontier_phi_88_pred_2;
                            _3948 = frontier_phi_88_pred_3;
                            _3947 = frontier_phi_88_pred_4;
                            _3946 = frontier_phi_88_pred_5;
                            _3656 = _3949 + _3669;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            _3653 = _3946 + _3666;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            if (_3673 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3673;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3658;
                        frontier_phi_82_pred_1 = _3657;
                        frontier_phi_82_pred_2 = _3656;
                        frontier_phi_82_pred_3 = _3655;
                        frontier_phi_82_pred_4 = _3654;
                        frontier_phi_82_pred_5 = _3653;
                    }
                    _3296 = frontier_phi_82_pred;
                    _3294 = frontier_phi_82_pred_1;
                    _3292 = frontier_phi_82_pred_2;
                    _3290 = frontier_phi_82_pred_3;
                    _3288 = frontier_phi_82_pred_4;
                    _3286 = frontier_phi_82_pred_5;
                    uint _3452 = _3451 + 1u;
                    if (_3452 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3445 = _3286;
                        _3446 = _3288;
                        _3447 = _3290;
                        _3448 = _3292;
                        _3449 = _3294;
                        _3450 = _3296;
                        _3451 = _3452;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3292;
                frontier_phi_63_64_ladder_1 = _3296;
                frontier_phi_63_64_ladder_2 = _3294;
                frontier_phi_63_64_ladder_3 = _3290;
                frontier_phi_63_64_ladder_4 = _3288;
                frontier_phi_63_64_ladder_5 = _3286;
            }
            else
            {
                frontier_phi_63_64_ladder = _3170;
                frontier_phi_63_64_ladder_1 = _3174;
                frontier_phi_63_64_ladder_2 = _3172;
                frontier_phi_63_64_ladder_3 = _3168;
                frontier_phi_63_64_ladder_4 = _3166;
                frontier_phi_63_64_ladder_5 = _3164;
            }
            _3285 = frontier_phi_63_64_ladder_5;
            _3287 = frontier_phi_63_64_ladder_4;
            _3289 = frontier_phi_63_64_ladder_3;
            _3291 = frontier_phi_63_64_ladder;
            _3293 = frontier_phi_63_64_ladder_2;
            _3295 = frontier_phi_63_64_ladder_1;
        }
        float _3300 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
        _3097 = (_3300 * _3291) + _2628;
        _3099 = (_3300 * _3293) + _2630;
        _3101 = (_3300 * _3295) + _2632;
        _3103 = ((_3285 * 0.039999999105930328369140625) * _3300) + _2951;
        _3105 = ((_3287 * 0.039999999105930328369140625) * _3300) + _2953;
        _3107 = ((_3289 * 0.039999999105930328369140625) * _3300) + _2955;
    }
    else
    {
        _3097 = _2628;
        _3099 = _2630;
        _3101 = _2632;
        _3103 = _2951;
        _3105 = _2953;
        _3107 = _2955;
    }
    float _5141 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _5152 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _5163 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _3124 = ((isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0))) * (_3097 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1063))) + ((_3103 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1897)) * cbPerFrame._m0[3u].x);
    float _3125 = ((isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0))) * (_3099 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1063))) + ((_3105 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1897)) * cbPerFrame._m0[3u].x);
    float _3126 = ((isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0))) * (_3101 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1063))) + ((_3107 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1897)) * cbPerFrame._m0[3u].x);
    uint _3127 = _282 + 6u;
    float _3135 = _1000 / cbSceneParam._m0[86u].x;
    float _3136 = _1001 / cbSceneParam._m0[86u].y;
    vec4 _3150 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3135, _3136, (log2((isnan(cbSceneParam._m0[77u].w) ? _921 : (isnan(_921) ? cbSceneParam._m0[77u].w : min(_921, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3152 = _3150.x;
    float _3153 = _3150.y;
    float _3154 = _3150.z;
    float _3155 = _3150.w;
    float _3227;
    float _3229;
    float _3231;
    float _3233;
    if (_921 > cbSceneParam._m0[78u].w)
    {
        float _3189 = isnan(_921) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _921 : min(cbSceneParam._m0[80u].w, _921));
        float _3190 = _3189 / _921;
        float _3201 = _3190 * _973;
        float _3202 = _974 * _3190;
        float _3203 = (-0.0) - _3202;
        float _3205 = _3190 * _975;
        float _3207 = (cbSceneParam._m0[77u].w * _3203) / _3189;
        float _3208 = _3207 + cbSceneParam._m0[79u].w;
        float _3209 = cbSceneParam._m0[79u].w - _3202;
        float _3215 = sqrt(((_3201 * _3201) + (_3202 * _3202)) + (_3205 * _3205));
        float _3218 = (1.0 - (cbSceneParam._m0[77u].w / _3189)) * _3215;
        float _3223 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3225 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3402;
        if (abs((_3203 - _3207) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3402 = ((((_3208 > 0.0) ? exp2(_3223 * _3208) : (2.0 - exp2(_3225 * _3208))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3218;
        }
        else
        {
            float _3346 = 1.0 / cbSceneParam._m0[80u].x;
            float _3347 = isnan(_3209) ? _3208 : (isnan(_3208) ? _3209 : max(_3208, _3209));
            float _3348 = isnan(_3209) ? _3208 : (isnan(_3208) ? _3209 : min(_3208, _3209));
            float _3357 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : min(_3347, 0.0));
            float _3358 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : min(_3348, 0.0));
            _3402 = ((abs(_3215 / _3203) * cbSceneParam._m0[80u].y) * ((((_3357 - _3358) * 2.0) - ((exp2(_3223 * (isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0)))) - exp2(_3223 * (isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))))) * _3346)) - ((exp2(_3225 * _3357) - exp2(_3225 * _3358)) * _3346))) + (_3218 * cbSceneParam._m0[80u].z);
        }
        vec4 _3404 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3135, _3136, 1.0), 0.0);
        float _3413 = exp2((_3402 * (-1.44269502162933349609375)) * (1.0 - _3404.w));
        float _3414 = log2(_3413);
        float _3430 = log2(_3155);
        _3227 = (exp2(_3430 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].x)) * _3404.x) / cbSceneParam._m0[78u].x)) + _3152;
        _3229 = (exp2(_3430 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].y)) * _3404.y) / cbSceneParam._m0[78u].y)) + _3153;
        _3231 = (exp2(_3430 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].z)) * _3404.z) / cbSceneParam._m0[78u].z)) + _3154;
        _3233 = _3413 * _3155;
    }
    else
    {
        _3227 = _3152;
        _3229 = _3153;
        _3231 = _3154;
        _3233 = _3155;
    }
    bool _3440;
    vec4 _3243;
    vec4 _3265;
    float _3267;
    float _3271;
    float _3272;
    float _3273;
    float _3274;
    bool _3284;
    for (;;)
    {
        _3243 = cbMatDynParam._m0[0u];
        float _3245 = roundEven(_3243.y);
        bool _3246 = _3245 == 3.0;
        float _3247 = log2(_3233);
        float _3254 = exp2(_3247 * cbSceneParam._m0[78u].x) * _3124;
        float _3255 = exp2(_3247 * cbSceneParam._m0[78u].y) * _3125;
        float _3256 = exp2(_3247 * cbSceneParam._m0[78u].z) * _3126;
        float _3263 = _989 + (-0.5);
        _3265 = cbMtdParam._m0[1u];
        _3267 = _3265.y * _3263;
        float _3270 = (_3245 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3271 = _3270 * (_3246 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3227)));
        _3272 = _3270 * (_3246 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3229)));
        _3273 = _3270 * (_3246 ? _3256 : (_3256 + (cbSceneParam._m0[72u].w * _3231)));
        _3274 = _3263 * 0.999000012874603271484375;
        _3284 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3284)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3274) < 0.5)
            {
                _3440 = true;
                break;
            }
        }
        uint _3381 = _1038 + uint(_3243.w);
        if ((cbInstanceData._m0[_3381].w < 1.0) && ((cbInstanceData._m0[_3381].w + _3274) < 0.5))
        {
            _3440 = true;
            break;
        }
        if ((_3267 + 1.0) < _3265.x)
        {
            _3440 = true;
            break;
        }
        _3440 = false;
        break;
    }
    float _3644;
    if (_3440)
    {
        discard_state = true;
        _3644 = 0.0;
    }
    else
    {
        _3644 = cbInstanceData._m0[_3127].w;
    }
    SV_Target.x = _3271;
    SV_Target.y = _3272;
    SV_Target.z = _3273;
    SV_Target.w = _3644;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3127].w;
    discard_exit();
}


