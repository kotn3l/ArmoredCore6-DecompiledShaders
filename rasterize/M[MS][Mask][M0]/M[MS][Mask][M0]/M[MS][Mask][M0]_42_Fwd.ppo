#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1182;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _296.x * cbMtdParam._m0[11u].x;
    float _302 = _296.y * cbMtdParam._m0[11u].y;
    float _303 = _296.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[24u].z) + _390) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3487 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _421 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _272.x) * ((_408 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301);
    float _424 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _272.y) * ((_408 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302);
    float _427 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _272.z) * ((_408 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303);
    vec4 _446 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _466 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _485 = _483.x;
    float _486 = _483.y;
    float _487 = _483.z;
    float _496 = ((_466.z - _487) * _408) + _487;
    float _499 = ((((_466.x - _485) * _408) + _485) * 2.0) + (-1.0);
    float _501 = ((((_466.y - _486) * _408) + _486) * 2.0) + (-1.0);
    float _502 = dot(vec2(_499, _501), vec2(_499, _501));
    float _3498 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _507 = sqrt(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _535 = (((_523.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _499;
    float _536 = (((_523.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _501;
    float _539 = fma(_507, _220, fma(_536, _227, _535 * _213));
    float _542 = fma(_507, _221, fma(_536, _228, _535 * _214));
    float _545 = fma(_507, _222, fma(_536, _229, _535 * _215));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _578 = _576.x;
    float _579 = 1.0 - _578;
    float _585 = (cbMtdParam._m0[19u].x + dot(vec4(_549 * _539, _549 * _542, _549 * _545, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_578 - _579) * cbMtdParam._m0[24u].w) + _579) * cbMtdParam._m0[21u].z);
    float _3509 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _593 = (_586 * ((_446.x * cbMtdParam._m0[18u].x) - _421)) + _421;
    float _594 = (_586 * ((_446.y * cbMtdParam._m0[18u].y) - _424)) + _424;
    float _595 = (_586 * ((_446.z * cbMtdParam._m0[18u].z) - _427)) + _427;
    float _599 = (cbMtdParam._m0[19u].w * (_523.z - _496)) + _496;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _619 = (_612.x * 2.0) + (-1.0);
    float _620 = (_612.y * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3520 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _629 = ((_612.z - _599) * _586) + _599;
    float _639 = ((sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) - _507) * _586) + _507;
    float _642 = (((_619 - _535) * _586) + _535) + (cbMtdParam._m0[21u].x * _535);
    float _643 = (((_620 - _536) * _586) + _536) + (cbMtdParam._m0[21u].x * _536);
    float _647 = cbMtdParam._m0[22u].x + _523.w;
    float _650 = fma(_639, _220, fma(_643, _227, _642 * _213));
    float _653 = fma(_639, _221, fma(_643, _228, _642 * _214));
    float _656 = fma(_639, _222, fma(_643, _229, _642 * _215));
    float _660 = inversesqrt(dot(vec3(_650, _653, _656), vec3(_650, _653, _656)));
    float _661 = _660 * _650;
    float _662 = _660 * _653;
    float _663 = _660 * _656;
    float _3531 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _664 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3553 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3564 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3575 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _682 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _733 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _723);
    float _734 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _723);
    float _735 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _723);
    float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
    float _740 = _733 * _739;
    float _741 = _734 * _739;
    float _742 = _735 * _739;
    float _748 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _749 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _767 = fma(_663, cbSceneParam._m0[5u].z, fma(_662, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _661));
    float _770 = fma(_663, cbSceneParam._m0[6u].z, fma(_662, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _661));
    float _773 = fma(_663, cbSceneParam._m0[7u].z, fma(_662, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _661));
    uint _787 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _793 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_787].x;
    float _794 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_787].y;
    float _795 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_787].z;
    float _3586 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    vec4 _807 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _748, cbSceneParam._m0[86u].y * _749));
    float _811 = ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * TEXCOORD_5.w) * _807.x;
    float _812 = dot(vec3(_661, _662, _663), vec3(_740, _741, _742));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _661) - _740;
    float _820 = (_815 * _662) - _741;
    float _821 = (_815 * _663) - _742;
    float _825 = abs(dot(vec3(_740, _741, _742), vec3(_661, _662, _663)));
    float _3619 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _827 = sqrt(_664);
    float _840 = exp2((_827 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_827 * 3.0));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1181;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _906 = fma(_880, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872));
        float _910 = fma(_880, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872));
        float _914 = fma(_880, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872));
        float _939 = _872 + _661;
        float _940 = _876 + _662;
        float _941 = _880 + _663;
        float _951 = fma(_941, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939)) - _906;
        float _952 = fma(_941, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939)) - _910;
        float _953 = fma(_941, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939)) - _914;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_906 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_910 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[34u].z) + ((((((_914 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1009 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_975.x + (-0.5));
        float _1011 = _1009 * (_975.y + (-0.5));
        float _1012 = _1009 * (_975.z + (-0.5));
        float _1019 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_982.x + (-0.5));
        float _1021 = _1019 * (_982.y + (-0.5));
        float _1022 = _1019 * (_982.z + (-0.5));
        float _1029 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_989.x + (-0.5));
        float _1031 = _1029 * (_989.y + (-0.5));
        float _1032 = _1029 * (_989.z + (-0.5));
        float _1039 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_996.x + (-0.5));
        float _1041 = _1039 * (_996.y + (-0.5));
        float _1042 = _1039 * (_996.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1063 = (dot(vec3(_661, _662, _663), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1073 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3667 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1075 + 1.0))) + _1080) * _1043;
        float _1090 = _1011 * 0.5;
        float _1091 = _1021 * 0.5;
        float _1092 = _1031 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_661, _662, _663), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3700 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1117 + 1.0))) + _1122) * _1044;
        float _1132 = _1012 * 0.5;
        float _1133 = _1022 * 0.5;
        float _1134 = _1032 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_661, _662, _663), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3733 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1159 + 1.0))) + _1164) * _1045;
        _1181 = _1012;
        _1183 = _1011;
        _1184 = _1010;
        _1185 = _1022;
        _1186 = _1021;
        _1187 = _1020;
        _1188 = _1032;
        _1189 = _1031;
        _1190 = _1030;
        _1191 = _1045;
        _1192 = _1044;
        _1193 = _1043;
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _1182;
        _1183 = _1182;
        _1184 = _1182;
        _1185 = _1182;
        _1186 = _1182;
        _1187 = _1182;
        _1188 = _1182;
        _1189 = _1182;
        _1190 = _1182;
        _1191 = _1182;
        _1192 = _1182;
        _1193 = _1182;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1221 = fma(_880, cbModelParam._m0[30u].z, fma(_876, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872));
        float _1225 = fma(_880, cbModelParam._m0[31u].z, fma(_876, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872));
        float _1229 = fma(_880, cbModelParam._m0[32u].z, fma(_876, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872));
        float _1252 = _872 + _661;
        float _1253 = _876 + _662;
        float _1254 = _880 + _663;
        float _1264 = fma(_1254, cbModelParam._m0[30u].z, fma(_1253, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1252)) - _1221;
        float _1265 = fma(_1254, cbModelParam._m0[31u].z, fma(_1253, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1252)) - _1225;
        float _1266 = fma(_1254, cbModelParam._m0[32u].z, fma(_1253, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1252)) - _1229;
        float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
        float _1283 = ((_1270 * _1264) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1221 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1270 * _1265) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1225 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1270 * _1266) / cbModelParam._m0[35u].z) + ((((((_1229 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        float _1320 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1287.x + (-0.5));
        float _1322 = _1320 * (_1287.y + (-0.5));
        float _1323 = _1320 * (_1287.z + (-0.5));
        float _1330 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1294.x + (-0.5));
        float _1332 = _1330 * (_1294.y + (-0.5));
        float _1333 = _1330 * (_1294.z + (-0.5));
        float _1340 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1301.x + (-0.5));
        float _1342 = _1340 * (_1301.y + (-0.5));
        float _1343 = _1340 * (_1301.z + (-0.5));
        float _1350 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1308.x + (-0.5));
        float _1352 = _1350 * (_1308.y + (-0.5));
        float _1353 = _1350 * (_1308.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_661, _662, _663), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3796 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1384 + 1.0))) + _1389) * _1354;
        float _1399 = _1322 * 0.5;
        float _1400 = _1332 * 0.5;
        float _1401 = _1342 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_661, _662, _663), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _3829 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1426 + 1.0))) + _1431) * _1355;
        float _1441 = _1323 * 0.5;
        float _1442 = _1333 * 0.5;
        float _1443 = _1343 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_661, _662, _663), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _3862 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1468 + 1.0))) + _1473) * _1356;
        _1490 = _1323;
        _1491 = _1322;
        _1492 = _1321;
        _1493 = _1333;
        _1494 = _1332;
        _1495 = _1331;
        _1496 = _1343;
        _1497 = _1342;
        _1498 = _1341;
        _1499 = _1356;
        _1500 = _1355;
        _1501 = _1354;
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
    }
    else
    {
        _1490 = _1182;
        _1491 = _1182;
        _1492 = _1182;
        _1493 = _1182;
        _1494 = _1182;
        _1495 = _1182;
        _1496 = _1182;
        _1497 = _1182;
        _1498 = _1182;
        _1499 = _1182;
        _1500 = _1182;
        _1501 = _1182;
        _1502 = 0.0;
        _1503 = 0.0;
        _1504 = 0.0;
    }
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1194)) + _1194;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1195)) + _1195;
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1196)) + _1196;
    float _1537 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1515, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1515, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1515, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1514));
    float _1558 = _819 * 0.5;
    float _1559 = _820 * 0.5;
    float _1560 = _821 * 0.5;
    float _1561 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1564 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1567 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1601;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1574 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1181, _1185, _1188, _1191));
        float _1578 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1582 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1589 = dot(vec4(cbModelParam._m0[39u]), vec4(_1558, _1559, _1560, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1612;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1603 = dot(vec4(cbModelParam._m0[40u]), vec4(_1558, _1559, _1560, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1603) ? 0.0 : (isnan(0.0) ? _1603 : max(0.0, _1603))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1616 = (_1612 * cbModelParam._m0[1u].x) + (_1601 * (1.0 - cbModelParam._m0[1u].x));
    float _1626 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _664);
    float _1627 = isnan(_1626) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1626 : min(cbModelParam._m0[25u].z, _1626));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1674 = fma(_880, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872)) + cbModelParam._m0[13u].w;
        float _1678 = fma(_880, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872)) + cbModelParam._m0[14u].w;
        float _1682 = fma(_880, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872)) + cbModelParam._m0[15u].w;
        float _1685 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1688 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1691 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1719;
        if (_1685 > 0.0)
        {
            _1719 = abs((1.0 - _1674) / _1685);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1674 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1719 = frontier_phi_14_12_ladder;
        }
        float _1919;
        if (_1688 > 0.0)
        {
            _1919 = abs((1.0 - _1678) / _1688);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1678 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1919 = frontier_phi_23_19_ladder;
        }
        float _2162;
        if (_1691 > 0.0)
        {
            _2162 = abs((1.0 - _1682) / _1691);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1682 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2162 = frontier_phi_35_30_ladder;
        }
        float _2164 = isnan(_1919) ? _1719 : (isnan(_1719) ? _1919 : min(_1719, _1919));
        float _2165 = isnan(_2162) ? _2164 : (isnan(_2164) ? _2162 : min(_2164, _2162));
        float _2169 = (_2165 * _1685) + _1674;
        float _2170 = (_2165 * _1688) + _1678;
        float _2171 = (_2165 * _1691) + _1682;
        float _2172 = _2165 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2172;
        float _2176 = _2172 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 > _2176) || ((_2170 < _2174) || ((_2169 < _2174) || (_2169 > _2176))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2295 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2171, cbModelParam._m0[9u].z, fma(_2170, cbModelParam._m0[9u].y, _2169 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2171, cbModelParam._m0[10u].z, fma(_2170, cbModelParam._m0[10u].y, _2169 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2171, cbModelParam._m0[11u].z, fma(_2170, cbModelParam._m0[11u].y, _2169 * cbModelParam._m0[11u].x))), _1627);
            frontier_phi_13_35_ladder = _2295.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2295.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2295.x * cbModelParam._m0[1u].y;
        }
        _1707 = frontier_phi_13_35_ladder_2;
        _1709 = frontier_phi_13_35_ladder_1;
        _1711 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1627);
        _1707 = _1695.x * cbModelParam._m0[1u].y;
        _1709 = _1695.y * cbModelParam._m0[1u].y;
        _1711 = _1695.z * cbModelParam._m0[1u].y;
    }
    float _1715 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _664);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1715 : min(cbModelParam._m0[25u].w, _1715));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1769 = fma(_880, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872)) + cbModelParam._m0[21u].w;
        float _1773 = fma(_880, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872)) + cbModelParam._m0[22u].w;
        float _1777 = fma(_880, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872)) + cbModelParam._m0[23u].w;
        float _1780 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1783 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1786 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _1924;
        if (_1780 > 0.0)
        {
            _1924 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1924 = frontier_phi_25_21_ladder;
        }
        float _2189;
        if (_1783 > 0.0)
        {
            _2189 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2189 = frontier_phi_37_32_ladder;
        }
        float _2394;
        if (_1786 > 0.0)
        {
            _2394 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2394 = frontier_phi_46_43_ladder;
        }
        float _2396 = isnan(_2189) ? _1924 : (isnan(_1924) ? _2189 : min(_1924, _2189));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1780) + _1769;
        float _2402 = (_2397 * _1783) + _1773;
        float _2403 = (_2397 * _1786) + _1777;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2404;
        float _2407 = _2404 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2403 > _2407) || ((_2403 < _2405) || ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 < _2405) || (_2401 > _2407))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2403, cbModelParam._m0[17u].z, fma(_2402, cbModelParam._m0[17u].y, _2401 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2403, cbModelParam._m0[18u].z, fma(_2402, cbModelParam._m0[18u].y, _2401 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2403, cbModelParam._m0[19u].z, fma(_2402, cbModelParam._m0[19u].y, _2401 * cbModelParam._m0[19u].x))), _1716);
            frontier_phi_22_46_ladder = _2602.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2602.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2602.x * cbModelParam._m0[1u].z;
        }
        _1805 = frontier_phi_22_46_ladder_2;
        _1807 = frontier_phi_22_46_ladder_1;
        _1809 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1716);
        _1805 = _1789.x * cbModelParam._m0[1u].z;
        _1807 = _1789.y * cbModelParam._m0[1u].z;
        _1809 = _1789.z * cbModelParam._m0[1u].z;
    }
    float _1821 = ((((1.0 - _840) * ((_827 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_840 * _827)) * _811;
    float _1822 = _1821 * ((cbModelParam._m0[1u].w * (_1805 - _1707)) + _1707);
    float _1823 = _1821 * ((cbModelParam._m0[1u].w * (_1807 - _1709)) + _1709);
    float _1824 = _1821 * ((cbModelParam._m0[1u].w * (_1809 - _1711)) + _1711);
    float _1827 = fma(_1824, cbSceneParam._m0[89u].z, fma(_1823, cbSceneParam._m0[89u].y, _1822 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1824, cbSceneParam._m0[90u].z, fma(_1823, cbSceneParam._m0[90u].y, _1822 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1824, cbSceneParam._m0[91u].z, fma(_1823, cbSceneParam._m0[91u].y, _1822 * cbSceneParam._m0[91u].x));
    uvec4 _1843 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1845 = _1843.x * 14u;
    uint _1846 = _1845 + 13u;
    float _1853 = _811 + (-1.0);
    float _1858 = (cbLight._m0[_1846].x * _1853) + 1.0;
    float _1859 = (cbLight._m0[_1846].y * _1853) + 1.0;
    float _1860 = (cbLight._m0[_1846].z * _1853) + 1.0;
    float _1861 = (cbLight._m0[_1846].w * _1853) + 1.0;
    uint _1862 = _1845 + 5u;
    float _1868 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1872 = _1845 + 4u;
    float _1878 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1882 = _1845 | 1u;
    float _1893 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_661, _662, _663));
    float _1896 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_661, _662, _663));
    float _3998 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _4009 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1901 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.3183098733425140380859375;
    float _1903 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 0.3183098733425140380859375;
    float _1910 = ((cbLight._m0[_1862].x * _1868) * _1903) + ((cbLight._m0[_1872].x * _1878) * _1901);
    float _1911 = ((_1868 * cbLight._m0[_1862].y) * _1903) + ((_1878 * cbLight._m0[_1872].y) * _1901);
    float _1912 = ((_1868 * cbLight._m0[_1862].z) * _1903) + ((_1878 * cbLight._m0[_1872].z) * _1901);
    uvec4 _1916 = floatBitsToUint(cbLight._m0[_1845 + 12u]);
    bool _1918 = _1916.x == 0u;
    float _1929;
    float _1931;
    float _1933;
    if (_1918)
    {
        _1929 = _1910;
        _1931 = _1911;
        _1933 = _1912;
    }
    else
    {
        uint _1937 = _1845 + 6u;
        float _1953 = (dot(vec3(cbLight._m0[_1845 + 2u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _1954 = _1953 * _1953;
        float _4020 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1955 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1956 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _1929 = (((cbLight._m0[_1937].x * 0.3183098733425140380859375) * _1955) * _1956) + _1910;
        _1931 = (((cbLight._m0[_1937].y * 0.3183098733425140380859375) * _1955) * _1956) + _1911;
        _1933 = (((cbLight._m0[_1937].z * 0.3183098733425140380859375) * _1955) * _1956) + _1912;
    }
    bool _1936 = _1916.y == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1936)
    {
        _1974 = _1929;
        _1976 = _1931;
        _1978 = _1933;
    }
    else
    {
        uint _2133 = _1845 + 7u;
        float _2149 = (dot(vec3(cbLight._m0[_1845 + 3u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _2150 = _2149 * _2149;
        float _4036 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2152 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _1974 = (((cbLight._m0[_2133].x * 0.3183098733425140380859375) * _2151) * _2152) + _1929;
        _1976 = (((cbLight._m0[_2133].y * 0.3183098733425140380859375) * _2151) * _2152) + _1931;
        _1978 = (((cbLight._m0[_2133].z * 0.3183098733425140380859375) * _2151) * _2152) + _1933;
    }
    uint _1981 = _1845 + 8u;
    float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _664) * 0.949999988079071044921875);
    float _1995 = _1994 * _1994;
    float _1996 = cbLight._m0[_1845].x + _740;
    float _1997 = cbLight._m0[_1845].y + _741;
    float _1998 = cbLight._m0[_1845].z + _742;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2003 = _2002 * _1996;
    float _2004 = _2002 * _1997;
    float _2005 = _2002 * _1998;
    float _2006 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_1845].xyz));
    float _4052 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2010 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _2011 = dot(vec3(_661, _662, _663), vec3(_2003, _2004, _2005));
    float _4074 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2003, _2004, _2005));
    float _4085 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1995 * _1995;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2035 = 1.0 - _1995;
    float _2046 = (0.5 / (((_2010 * ((_2009 * _2035) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2035) + _1995) * _2009))) * _2009;
    float _4096 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    uint _2059 = _1845 + 9u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _664) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1882].x + _740;
    float _2073 = cbLight._m0[_1882].y + _741;
    float _2074 = cbLight._m0[_1882].z + _742;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_1882].xyz));
    float _4107 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _2086 = dot(vec3(_661, _662, _663), vec3(_2079, _2080, _2081));
    float _4118 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _2090 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2079, _2080, _2081));
    float _4129 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2094 = _2071 * _2071;
    float _2098 = ((_2089 * _2089) * (_2094 + (-1.0))) + 1.0;
    float _2107 = (exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2108 = 1.0 - _2071;
    float _2118 = (0.5 / (((_2010 * ((_2085 * _2108) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2108) + _2071) * _2085))) * _2085;
    float _4140 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2094 / ((_2098 * _2098) * 3.141590118408203125));
    float _2130 = (((_2107 * cbLight._m0[_2059].x) * _2120) * _1868) + (((_2034 * cbLight._m0[_1981].x) * _2048) * _1878);
    float _2131 = (((_2107 * cbLight._m0[_2059].y) * _2120) * _1868) + (((_2034 * cbLight._m0[_1981].y) * _2048) * _1878);
    float _2132 = (((_2107 * cbLight._m0[_2059].z) * _2120) * _1868) + (((_2034 * cbLight._m0[_1981].z) * _2048) * _1878);
    float _2194;
    float _2196;
    float _2198;
    if (_1918)
    {
        _2194 = _2130;
        _2196 = _2131;
        _2198 = _2132;
    }
    else
    {
        uint _2200 = _1845 + 2u;
        uint _2204 = _1845 + 10u;
        float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _664) * 0.949999988079071044921875);
        float _2219 = _2218 * _2218;
        float _2220 = cbLight._m0[_2200].x + _740;
        float _2221 = cbLight._m0[_2200].y + _741;
        float _2222 = cbLight._m0[_2200].z + _742;
        float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
        float _2227 = _2226 * _2220;
        float _2228 = _2226 * _2221;
        float _2229 = _2226 * _2222;
        float _2230 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2200].xyz));
        float _4151 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2234 = dot(vec3(_661, _662, _663), vec3(_2227, _2228, _2229));
        float _4162 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2238 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2227, _2228, _2229));
        float _4173 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2242 = _2219 * _2219;
        float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
        float _2255 = (exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2256 = 1.0 - _2219;
        float _2266 = (0.5 / (((_2010 * ((_2233 * _2256) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2256) + _2219) * _2233))) * _2233;
        float _4184 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2268 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
        float _2269 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2194 = (((_2255 * cbLight._m0[_2204].x) * _2268) * _2269) + _2130;
        _2196 = (((_2255 * cbLight._m0[_2204].y) * _2268) * _2269) + _2131;
        _2198 = (((_2255 * cbLight._m0[_2204].z) * _2268) * _2269) + _2132;
    }
    float _2304;
    float _2306;
    float _2308;
    if (_1936)
    {
        _2304 = _2194;
        _2306 = _2196;
        _2308 = _2198;
    }
    else
    {
        uint _2315 = _1845 + 3u;
        uint _2319 = _1845 + 11u;
        float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _664) * 0.949999988079071044921875);
        float _2334 = _2333 * _2333;
        float _2335 = cbLight._m0[_2315].x + _740;
        float _2336 = cbLight._m0[_2315].y + _741;
        float _2337 = cbLight._m0[_2315].z + _742;
        float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
        float _2342 = _2341 * _2335;
        float _2343 = _2341 * _2336;
        float _2344 = _2341 * _2337;
        float _2345 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2315].xyz));
        float _4200 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2349 = dot(vec3(_661, _662, _663), vec3(_2342, _2343, _2344));
        float _4211 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2353 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2342, _2343, _2344));
        float _4222 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2357 = _2334 * _2334;
        float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
        float _2370 = (exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2371 = 1.0 - _2334;
        float _2381 = (0.5 / (((_2010 * ((_2348 * _2371) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2371) + _2334) * _2348))) * _2348;
        float _4233 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2304 = (((_2370 * cbLight._m0[_2319].x) * _2383) * _2384) + _2194;
        _2306 = (((_2370 * cbLight._m0[_2319].y) * _2383) * _2384) + _2196;
        _2308 = (((_2370 * cbLight._m0[_2319].z) * _2383) * _2384) + _2198;
    }
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    if (_1843.y == 0u)
    {
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2459;
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2459;
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2459;
        uvec4 _2474 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2475 = _2474.x;
        uint _2486 = uint((float(_2474.y) * floor(float(uint(cbSceneParam._m0[85u].y * _749) / _2475))) + floor(float(uint(cbSceneParam._m0[85u].x * _748) / _2475)));
        float _2496 = (log2(_2462 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2497 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        uint _2500 = uint(isnan(14.0) ? _2497 : (isnan(_2497) ? 14.0 : min(_2497, 14.0)));
        uvec4 _2505 = texelFetch(g_lightClusterGridBuffer, int(((_2500 << 2u) + (_2486 << 6u)) >> 2u));
        uint _2506 = _2505.x;
        uint _2507 = _2474.z;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((((1u << ((_2507 >> 4u) & 15u)) + 4294967295u) & _2506) == 0u) || ((_2507 & 240u) == 0u))
        {
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
        }
        else
        {
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            uint _2758 = 0u;
            uint _2767;
            bool _2768;
            for (;;)
            {
                _2767 = texelFetch(g_lightClassification, int((((_2500 << 5u) + (_2486 << 9u)) + (_2758 << 2u)) >> 2u)).x;
                _2768 = _2767 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2768)
                {
                    frontier_phi_61_pred = _2752;
                    frontier_phi_61_pred_1 = _2757;
                    frontier_phi_61_pred_2 = _2756;
                    frontier_phi_61_pred_3 = _2755;
                    frontier_phi_61_pred_4 = _2754;
                    frontier_phi_61_pred_5 = _2753;
                }
                else
                {
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    uint _2882;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2757;
                    _2882 = _2767;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    for (;;)
                    {
                        uint _2886 = uint(findLSB(_2882)) + (_2758 << 5u);
                        uint _2883 = (_2882 + 4294967295u) & _2882;
                        uint _2888 = _2886 * 48u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 3u)).x));
                        uint _2908 = (_2886 * 48u) + 4u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2927 = (_2886 * 48u) + 8u;
                        vec3 _2938 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x));
                        float _2942 = _2902.x - _2460;
                        float _2943 = _2902.y - _2461;
                        float _2944 = _2902.z - _2462;
                        float _2945 = dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944));
                        float _2948 = inversesqrt(_2945);
                        float _2949 = _2948 * _2942;
                        float _2950 = _2948 * _2943;
                        float _2951 = _2948 * _2944;
                        float _2952 = dot(vec3(_767, _770, _773), vec3(_2949, _2950, _2951));
                        float _2957 = 1.0 - (_2945 * _2902.w);
                        float _4259 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2958 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2959 = sqrt(_2945) * _2921.w;
                        float _2962 = 1.39999997615814208984375 / (_2959 + 1.39999997615814208984375);
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2952) + _2963;
                        float _2969 = _2959 * _2959;
                        float _2973 = ((isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))) * _2958) / ((_2969 * 0.699999988079071044921875) + 1.0);
                        float _2977 = (-0.0) - _2460;
                        float _2978 = (-0.0) - _2461;
                        float _2979 = (-0.0) - _2462;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2994 = exp2(log2(1.0 / ((_2969 * 3.5) + 5.0)) * 0.25);
                        float _2995 = 1.0 - _827;
                        float _3002 = sqrt(1.0 - ((1.0 - (_2995 * _2995)) * (1.0 - (_2994 * _2994))));
                        float _3003 = _3002 * _3002;
                        float _3004 = _3003 * _3003;
                        float _3005 = _2984 + _2949;
                        float _3006 = _2985 + _2950;
                        float _3007 = _2986 + _2951;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3015 = dot(vec3(_767, _770, _773), vec3(_2984, _2985, _2986));
                        float _4275 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3018 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _3019 = dot(vec3(_767, _770, _773), vec3(_3011 * _3005, _3011 * _3006, _3011 * _3007));
                        float _4286 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3022 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _3026 = ((_3022 * _3022) * (_3004 + (-1.0))) + 1.0;
                        float _3027 = _2962 * _3003;
                        float _3028 = _3027 * _3027;
                        float _3031 = ((1.0 - _3028) * _2952) + _3028;
                        float _4297 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _3033 = 1.0 - _3003;
                        float _3043 = (0.5 / (((_3032 * ((_3018 * _3033) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_3032 * _3033) + _3003) * _3018))) * _3032;
                        float _4308 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3054 = (((_3004 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3026 * _3026) * ((_2969 * 2.1991131305694580078125) + 3.141590118408203125))) * _2958;
                        _2811 = (_2973 * _2921.x) + _2879;
                        _2812 = (_2973 * _2921.y) + _2880;
                        _2813 = (_2973 * _2921.z) + _2881;
                        _2808 = (_3054 * _2938.x) + _2876;
                        _2809 = (_3054 * _2938.y) + _2877;
                        _2810 = (_3054 * _2938.z) + _2878;
                        if (_2883 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2813;
                            _2882 = _2883;
                        }
                    }
                    frontier_phi_61_pred = _2808;
                    frontier_phi_61_pred_1 = _2813;
                    frontier_phi_61_pred_2 = _2812;
                    frontier_phi_61_pred_3 = _2811;
                    frontier_phi_61_pred_4 = _2810;
                    frontier_phi_61_pred_5 = _2809;
                }
                _2608 = frontier_phi_61_pred;
                _2618 = frontier_phi_61_pred_1;
                _2616 = frontier_phi_61_pred_2;
                _2614 = frontier_phi_61_pred_3;
                _2612 = frontier_phi_61_pred_4;
                _2610 = frontier_phi_61_pred_5;
                uint _2759 = _2758 + 1u;
                if (_2759 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2752 = _2608;
                    _2753 = _2610;
                    _2754 = _2612;
                    _2755 = _2614;
                    _2756 = _2616;
                    _2757 = _2618;
                    _2758 = _2759;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
        }
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.z;
        uint _2624 = (_2622 >> 8u) & 15u;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        if (((4294967295u << _2624) & _2506) == 0u)
        {
            _2720 = _2607;
            _2722 = _2609;
            _2724 = _2611;
            _2726 = _2613;
            _2728 = _2615;
            _2730 = _2617;
        }
        else
        {
            float _2745 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
            float _2746 = _2745 * _2460;
            float _2747 = _2745 * _2461;
            float _2748 = _2745 * _2462;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2624 < ((_2622 >> 12u) & 15u))
            {
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2859 = _2607;
                float _2860 = _2609;
                float _2861 = _2611;
                float _2862 = _2613;
                float _2863 = _2615;
                float _2864 = _2617;
                uint _2865 = _2624;
                uint _2874;
                bool _2875;
                for (;;)
                {
                    _2874 = texelFetch(g_lightClassification, int((((_2500 << 5u) + (_2486 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                    _2875 = _2874 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2875)
                    {
                        frontier_phi_67_pred = _2862;
                        frontier_phi_67_pred_1 = _2863;
                        frontier_phi_67_pred_2 = _2864;
                        frontier_phi_67_pred_3 = _2861;
                        frontier_phi_67_pred_4 = _2860;
                        frontier_phi_67_pred_5 = _2859;
                    }
                    else
                    {
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        float _3074 = _2861;
                        float _3075 = _2862;
                        float _3076 = _2863;
                        float _3077 = _2864;
                        uint _3078 = _2874;
                        uint _3079;
                        vec4 _3104;
                        float _3105;
                        vec4 _3120;
                        vec3 _3132;
                        vec4 _3147;
                        vec4 _3163;
                        float _3209;
                        bool _3210;
                        for (;;)
                        {
                            uint _3089 = ((_2865 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3078));
                            _3079 = (_3078 + 4294967295u) & _3078;
                            uint _3091 = _3089 * 40u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3105 = _3104.w;
                            uint _3107 = (_3089 * 40u) + 4u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3122 = (_3089 * 40u) + 8u;
                            _3132 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x));
                            uint _3134 = (_3089 * 40u) + 16u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3150 = (_3089 * 40u) + 20u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3089 * 40u) + 24u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3184 = (_3089 * 40u) + 28u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3209 = fma(_2462, _3197.z, fma(_2461, _3197.y, _3197.x * _2460)) + _3197.w;
                            _3210 = !((fma(_2462, _3178.z, fma(_2461, _3178.y, _3178.x * _2460)) + _3178.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3210)
                            {
                                float _3237 = _3104.x - _2460;
                                float _3238 = _3104.y - _2461;
                                float _3239 = _3104.z - _2462;
                                float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                                float _3243 = inversesqrt(_3240);
                                float _3244 = _3243 * _3237;
                                float _3245 = _3243 * _3238;
                                float _3246 = _3243 * _3239;
                                float _3250 = 1.0 - (_3240 / (_3105 * _3105));
                                float _4319 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3255 = sqrt(_3240) * _3120.w;
                                float _3257 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                                float _3258 = _3257 * _3257;
                                float _3261 = ((1.0 - _3258) * dot(vec3(_3244, _3245, _3246), vec3(_767, _770, _773))) + _3258;
                                float _3264 = _3255 * _3255;
                                float _3268 = (fma(_2462, _3147.z, fma(_2461, _3147.y, _3147.x * _2460)) + _3147.w) / _3209;
                                float _3269 = (fma(_2462, _3163.z, fma(_2461, _3163.y, _3163.x * _2460)) + _3163.w) / _3209;
                                float _3273 = 1.0 - dot(vec2(_3268, _3269), vec2(_3268, _3269));
                                float _4335 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3275 = _3274 * (((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3251) / ((_3264 * 0.699999988079071044921875) + 1.0));
                                float _3287 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                                float _3288 = 1.0 - _827;
                                float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                                float _3296 = _3295 * _3295;
                                float _3297 = _3296 * _3296;
                                float _3298 = _3244 - _2746;
                                float _3299 = _3245 - _2747;
                                float _3300 = _3246 - _2748;
                                float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                                float _3308 = dot(vec3(_767, _770, _773), vec3((-0.0) - _2746, (-0.0) - _2747, (-0.0) - _2748));
                                float _4346 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3312 = dot(vec3(_767, _770, _773), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                                float _4357 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                                float _3320 = _3257 * _3296;
                                float _3321 = _3320 * _3320;
                                float _3327 = ((1.0 - _3321) * dot(vec3(_767, _770, _773), vec3(_3244, _3245, _3246))) + _3321;
                                float _4368 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3329 = 1.0 - _3296;
                                float _3339 = (0.5 / (((_3328 * ((_3311 * _3329) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3296) * _3311))) * _3328;
                                float _4379 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3349 = (_3274 * _3251) * (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) / ((_3319 * _3319) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3349 * _3132.x;
                                frontier_phi_73_pred_1 = _3349 * _3132.y;
                                frontier_phi_73_pred_2 = _3275 * _3120.z;
                                frontier_phi_73_pred_3 = _3275 * _3120.y;
                                frontier_phi_73_pred_4 = _3275 * _3120.x;
                                frontier_phi_73_pred_5 = _3349 * _3132.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3353 = frontier_phi_73_pred;
                            _3354 = frontier_phi_73_pred_1;
                            _3358 = frontier_phi_73_pred_2;
                            _3357 = frontier_phi_73_pred_3;
                            _3356 = frontier_phi_73_pred_4;
                            _3355 = frontier_phi_73_pred_5;
                            _3062 = _3356 + _3075;
                            _3063 = _3357 + _3076;
                            _3064 = _3358 + _3077;
                            _3059 = _3353 + _3072;
                            _3060 = _3354 + _3073;
                            _3061 = _3355 + _3074;
                            if (_3079 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3079;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3062;
                        frontier_phi_67_pred_1 = _3063;
                        frontier_phi_67_pred_2 = _3064;
                        frontier_phi_67_pred_3 = _3061;
                        frontier_phi_67_pred_4 = _3060;
                        frontier_phi_67_pred_5 = _3059;
                    }
                    _2727 = frontier_phi_67_pred;
                    _2729 = frontier_phi_67_pred_1;
                    _2731 = frontier_phi_67_pred_2;
                    _2725 = frontier_phi_67_pred_3;
                    _2723 = frontier_phi_67_pred_4;
                    _2721 = frontier_phi_67_pred_5;
                    uint _2866 = _2865 + 1u;
                    if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2859 = _2721;
                        _2860 = _2723;
                        _2861 = _2725;
                        _2862 = _2727;
                        _2863 = _2729;
                        _2864 = _2731;
                        _2865 = _2866;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2729;
                frontier_phi_55_56_ladder_1 = _2731;
                frontier_phi_55_56_ladder_2 = _2727;
                frontier_phi_55_56_ladder_3 = _2725;
                frontier_phi_55_56_ladder_4 = _2723;
                frontier_phi_55_56_ladder_5 = _2721;
            }
            else
            {
                frontier_phi_55_56_ladder = _2615;
                frontier_phi_55_56_ladder_1 = _2617;
                frontier_phi_55_56_ladder_2 = _2613;
                frontier_phi_55_56_ladder_3 = _2611;
                frontier_phi_55_56_ladder_4 = _2609;
                frontier_phi_55_56_ladder_5 = _2607;
            }
            _2720 = frontier_phi_55_56_ladder_5;
            _2722 = frontier_phi_55_56_ladder_4;
            _2724 = frontier_phi_55_56_ladder_3;
            _2726 = frontier_phi_55_56_ladder_2;
            _2728 = frontier_phi_55_56_ladder;
            _2730 = frontier_phi_55_56_ladder_1;
        }
        float _2735 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2519 = (_2735 * _2726) + _1974;
        _2521 = (_2735 * _2728) + _1976;
        _2523 = (_2735 * _2730) + _1978;
        _2525 = ((_2720 * 0.039999999105930328369140625) * _2735) + _2304;
        _2527 = ((_2722 * 0.039999999105930328369140625) * _2735) + _2306;
        _2529 = ((_2724 * 0.039999999105930328369140625) * _2735) + _2308;
    }
    else
    {
        _2519 = _1974;
        _2521 = _1976;
        _2523 = _1978;
        _2525 = _2304;
        _2527 = _2306;
        _2529 = _2308;
    }
    float _4395 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4406 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4417 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    uint _2549 = _232 + 6u;
    float _2557 = _748 / cbSceneParam._m0[86u].x;
    float _2558 = _749 / cbSceneParam._m0[86u].y;
    vec4 _2572 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2557, _2558, (log2((isnan(cbSceneParam._m0[77u].w) ? _682 : (isnan(_682) ? cbSceneParam._m0[77u].w : min(_682, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2574 = _2572.x;
    float _2575 = _2572.y;
    float _2576 = _2572.z;
    float _2577 = _2572.w;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_682 > cbSceneParam._m0[78u].w)
    {
        float _2632 = isnan(_682) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _682 : min(cbSceneParam._m0[80u].w, _682));
        float _2633 = _2632 / _682;
        float _2644 = _2633 * _733;
        float _2645 = _734 * _2633;
        float _2646 = (-0.0) - _2645;
        float _2648 = _2633 * _735;
        float _2650 = (cbSceneParam._m0[77u].w * _2646) / _2632;
        float _2651 = _2650 + cbSceneParam._m0[79u].w;
        float _2652 = cbSceneParam._m0[79u].w - _2645;
        float _2658 = sqrt(((_2644 * _2644) + (_2645 * _2645)) + (_2648 * _2648));
        float _2661 = (1.0 - (cbSceneParam._m0[77u].w / _2632)) * _2658;
        float _2666 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2668 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2821;
        if (abs((_2646 - _2650) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2821 = ((((_2651 > 0.0) ? exp2(_2666 * _2651) : (2.0 - exp2(_2668 * _2651))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2661;
        }
        else
        {
            float _2781 = 1.0 / cbSceneParam._m0[80u].x;
            float _2782 = isnan(_2652) ? _2651 : (isnan(_2651) ? _2652 : max(_2651, _2652));
            float _2783 = isnan(_2652) ? _2651 : (isnan(_2651) ? _2652 : min(_2651, _2652));
            float _2792 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : min(_2782, 0.0));
            float _2793 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : min(_2783, 0.0));
            _2821 = ((abs(_2658 / _2646) * cbSceneParam._m0[80u].y) * ((((_2792 - _2793) * 2.0) - ((exp2(_2666 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0)))) - exp2(_2666 * (isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0))))) * _2781)) - ((exp2(_2668 * _2792) - exp2(_2668 * _2793)) * _2781))) + (_2661 * cbSceneParam._m0[80u].z);
        }
        vec4 _2823 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2557, _2558, 1.0), 0.0);
        float _2832 = exp2((_2821 * (-1.44269502162933349609375)) * (1.0 - _2823.w));
        float _2833 = log2(_2832);
        float _2849 = log2(_2577);
        _2670 = (exp2(_2849 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].x)) * _2823.x) / cbSceneParam._m0[78u].x)) + _2574;
        _2672 = (exp2(_2849 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].y)) * _2823.y) / cbSceneParam._m0[78u].y)) + _2575;
        _2674 = (exp2(_2849 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].z)) * _2823.z) / cbSceneParam._m0[78u].z)) + _2576;
        _2676 = _2832 * _2577;
    }
    else
    {
        _2670 = _2574;
        _2672 = _2575;
        _2674 = _2576;
        _2676 = _2577;
    }
    float _2688 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2689 = _2688 == 3.0;
    float _2690 = log2(_2676);
    float _2697 = exp2(_2690 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2519 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _811))) + ((_2525 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1616)) * cbPerFrame._m0[3u].x));
    float _2698 = exp2(_2690 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2521 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _811))) + ((_2527 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1616)) * cbPerFrame._m0[3u].x));
    float _2699 = exp2(_2690 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2523 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _811))) + ((_2529 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1616)) * cbPerFrame._m0[3u].x));
    float _2708 = (_2688 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2708 * (_2689 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2670)));
    SV_Target.y = _2708 * (_2689 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2672)));
    SV_Target.z = _2708 * (_2689 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2674)));
    SV_Target.w = cbInstanceData._m0[_2549].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2549].w;
}


