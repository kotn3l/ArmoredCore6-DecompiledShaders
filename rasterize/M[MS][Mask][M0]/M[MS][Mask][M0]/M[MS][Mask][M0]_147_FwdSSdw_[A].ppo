#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1562;
float _3941;
float _3942;
float _3943;
float _3944;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].z) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3953 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _452 = (_445 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _453 = (_445 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _454 = (_445 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[24u].z) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3964 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _525 = (_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452;
    float _526 = (_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453;
    float _527 = (_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454;
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _564 = _562.x;
    float _574 = dot(vec4(_564, _562.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _586 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _373.z) * 2.0) - ((((_564 - _574) * cbMtdParam._m0[24u].z) + _574) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3975 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _600 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_587 * ((_545.x * cbMtdParam._m0[14u].x) - _525)) + _525);
    float _603 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_587 * ((_545.y * cbMtdParam._m0[14u].y) - _526)) + _526);
    float _606 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_587 * ((_545.z * cbMtdParam._m0[14u].z) - _527)) + _527);
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _661 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _663 = _661.x;
    float _664 = _661.y;
    float _665 = _661.z;
    float _672 = ((_644.x - _663) * _445) + _663;
    float _673 = ((_644.y - _664) * _445) + _664;
    float _674 = ((_644.z - _665) * _445) + _665;
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _697 = ((_686.x - _672) * _518) + _672;
    float _698 = ((_686.y - _673) * _518) + _673;
    float _699 = ((_686.z - _674) * _518) + _674;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _724 = ((_711.z - _699) * _587) + _699;
    float _727 = ((((_711.x - _697) * _587) + _697) * 2.0) + (-1.0);
    float _729 = ((((_711.y - _698) * _587) + _698) * 2.0) + (-1.0);
    float _730 = dot(vec2(_727, _729), vec2(_727, _729));
    float _3986 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _735 = sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
    vec4 _749 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _761 = (((_749.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _727;
    float _762 = (((_749.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _729;
    float _765 = fma(_735, _253, fma(_762, _260, _761 * _246));
    float _768 = fma(_735, _254, fma(_762, _261, _761 * _247));
    float _771 = fma(_735, _255, fma(_762, _262, _761 * _248));
    float _775 = inversesqrt(dot(vec3(_765, _768, _771), vec3(_765, _768, _771)));
    vec4 _802 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _804 = _802.x;
    float _805 = 1.0 - _804;
    float _811 = (cbMtdParam._m0[19u].x + dot(vec4(_775 * _765, _775 * _768, _775 * _771, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_804 - _805) * cbMtdParam._m0[24u].w) + _805) * cbMtdParam._m0[21u].z);
    float _3997 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _812 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _814 = (-0.0) - cbMtdParam._m0[24u].x;
    float _816 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _816 : (isnan(_816) ? 1.0 : min(_816, 1.0));
    float _824 = _812 - ((_812 * TEXCOORD_8.x) * _817);
    float _825 = _812 - ((_812 * TEXCOORD_8.y) * _817);
    float _826 = _812 - ((_812 * TEXCOORD_8.z) * _817);
    float _833 = (_824 * ((_624.x * cbMtdParam._m0[18u].x) - _600)) + _600;
    float _834 = (_825 * ((_624.y * cbMtdParam._m0[18u].y) - _603)) + _603;
    float _835 = (_826 * ((_624.z * cbMtdParam._m0[18u].z) - _606)) + _606;
    vec4 _847 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _849 = _847.x;
    float _850 = 1.0 - _849;
    float _878 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_849 - _850) * cbMtdParam._m0[24u].y) + _850) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4018 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _879 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _887 = ((((cbMtdParam._m0[10u].x - _833) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _879) + _833;
    float _888 = ((((cbMtdParam._m0[10u].y - _834) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _879) + _834;
    float _889 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _835)) * _879) + _835;
    float _893 = (cbMtdParam._m0[19u].w * (_749.z - _724)) + _724;
    vec4 _907 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _914 = (_907.x * 2.0) + (-1.0);
    float _915 = (_907.y * 2.0) + (-1.0);
    float _916 = dot(vec2(_914, _915), vec2(_914, _915));
    float _4029 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _924 = ((_907.z - _893) * _824) + _893;
    float _927 = ((cbMtdParam._m0[23u].y - _924) * _879) + _924;
    vec4 _946 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _952 = (_946.x * 2.0) + (-1.0);
    float _953 = (_946.y * 2.0) + (-1.0);
    float _954 = dot(vec2(_952, _953), vec2(_952, _953));
    float _4040 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _969 = ((sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) - _735) * _826) + _735;
    float _972 = (((_914 - _761) * _824) + _761) + (cbMtdParam._m0[21u].x * _761);
    float _973 = (((_915 - _762) * _825) + _762) + (cbMtdParam._m0[21u].x * _762);
    float _984 = (((_952 - _972) + (_972 * cbMtdParam._m0[22u].z)) * _879) + _972;
    float _985 = (((_953 - _973) + (_973 * cbMtdParam._m0[22u].z)) * _879) + _973;
    float _986 = (_879 * (sqrt(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) - _969)) + _969;
    float _988 = cbMtdParam._m0[22u].x + _749.w;
    float _991 = fma(_986, _253, fma(_985, _260, _984 * _246));
    float _994 = fma(_986, _254, fma(_985, _261, _984 * _247));
    float _997 = fma(_986, _255, fma(_985, _262, _984 * _248));
    float _1001 = inversesqrt(dot(vec3(_991, _994, _997), vec3(_991, _994, _997)));
    float _1002 = _1001 * _991;
    float _1003 = _1001 * _994;
    float _1004 = _1001 * _997;
    float _4051 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _1005 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4073 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4084 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4095 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _1023 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1073 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1063);
    float _1074 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1063);
    float _1075 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1063);
    float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
    float _1080 = _1073 * _1079;
    float _1081 = _1074 * _1079;
    float _1082 = _1075 * _1079;
    vec4 _1087 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1089 = _1087.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1243 = sqrt(((_1073 * _1073) + (_1074 * _1074)) + (_1075 * _1075));
        float _1249 = (cbMatDynParam._m0[5u].x * _1243) + cbMatDynParam._m0[5u].y;
        float _4106 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1254 = (cbMatDynParam._m0[5u].z * _1243) + cbMatDynParam._m0[5u].w;
        float _4117 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) - _1250)) + _1250) < ((_1089 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1100 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1101 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1119 = fma(_1004, cbSceneParam._m0[5u].z, fma(_1003, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1002));
    float _1122 = fma(_1004, cbSceneParam._m0[6u].z, fma(_1003, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1002));
    float _1125 = fma(_1004, cbSceneParam._m0[7u].z, fma(_1003, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1002));
    uint _1138 = _265 + 9u;
    uint _1139 = _1138 + uint(cbMatDynParam._m0[0u].w);
    float _1145 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_1139].x;
    float _1146 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_1139].y;
    float _1147 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * cbInstanceData._m0[_1139].z;
    float _4128 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1149 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1150 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    vec4 _1159 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1100, cbSceneParam._m0[86u].y * _1101));
    float _1163 = ((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * TEXCOORD_5.w) * _1159.x;
    float _1164 = dot(vec3(_1002, _1003, _1004), vec3(_1080, _1081, _1082));
    float _1167 = _1164 * 2.0;
    float _1171 = (_1167 * _1002) - _1080;
    float _1172 = (_1167 * _1003) - _1081;
    float _1173 = (_1167 * _1004) - _1082;
    float _1177 = abs(dot(vec3(_1080, _1081, _1082), vec3(_1002, _1003, _1004)));
    float _4161 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1179 = sqrt(_1005);
    float _1192 = exp2((_1179 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1179 * 3.0));
    float _1224 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1228 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1232 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1561;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1286 = fma(_1232, cbModelParam._m0[26u].z, fma(_1228, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1224));
        float _1290 = fma(_1232, cbModelParam._m0[27u].z, fma(_1228, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1224));
        float _1294 = fma(_1232, cbModelParam._m0[28u].z, fma(_1228, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1224));
        float _1319 = _1224 + _1002;
        float _1320 = _1228 + _1003;
        float _1321 = _1232 + _1004;
        float _1331 = fma(_1321, cbModelParam._m0[26u].z, fma(_1320, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1319)) - _1286;
        float _1332 = fma(_1321, cbModelParam._m0[27u].z, fma(_1320, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1319)) - _1290;
        float _1333 = fma(_1321, cbModelParam._m0[28u].z, fma(_1320, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1319)) - _1294;
        float _1337 = inversesqrt(dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333)));
        float _1350 = ((_1337 * _1331) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1286 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1337 * _1332) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1290 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1337 * _1333) / cbModelParam._m0[34u].z) + ((((((_1294 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        float _1389 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1355.x + (-0.5));
        float _1391 = _1389 * (_1355.y + (-0.5));
        float _1392 = _1389 * (_1355.z + (-0.5));
        float _1399 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1362.x + (-0.5));
        float _1401 = _1399 * (_1362.y + (-0.5));
        float _1402 = _1399 * (_1362.z + (-0.5));
        float _1409 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1369.x + (-0.5));
        float _1411 = _1409 * (_1369.y + (-0.5));
        float _1412 = _1409 * (_1369.z + (-0.5));
        float _1419 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1376.x + (-0.5));
        float _1421 = _1419 * (_1376.y + (-0.5));
        float _1422 = _1419 * (_1376.z + (-0.5));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = _1390 * 0.5;
        float _1427 = _1400 * 0.5;
        float _1428 = _1410 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1443 = (dot(vec3(_1002, _1003, _1004), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1453 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4209 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1455 + 1.0))) + _1460) * _1423;
        float _1470 = _1391 * 0.5;
        float _1471 = _1401 * 0.5;
        float _1472 = _1411 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_1002, _1003, _1004), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4242 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1497 + 1.0))) + _1502) * _1424;
        float _1512 = _1392 * 0.5;
        float _1513 = _1402 * 0.5;
        float _1514 = _1412 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_1002, _1003, _1004), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4275 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1539 + 1.0))) + _1544) * _1425;
        _1561 = _1392;
        _1563 = _1391;
        _1564 = _1390;
        _1565 = _1402;
        _1566 = _1401;
        _1567 = _1400;
        _1568 = _1412;
        _1569 = _1411;
        _1570 = _1410;
        _1571 = _1425;
        _1572 = _1424;
        _1573 = _1423;
        _1574 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1575 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1576 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
    }
    else
    {
        _1561 = _1562;
        _1563 = _1562;
        _1564 = _1562;
        _1565 = _1562;
        _1566 = _1562;
        _1567 = _1562;
        _1568 = _1562;
        _1569 = _1562;
        _1570 = _1562;
        _1571 = _1562;
        _1572 = _1562;
        _1573 = _1562;
        _1574 = 0.0;
        _1575 = 0.0;
        _1576 = 0.0;
    }
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1602 = fma(_1232, cbModelParam._m0[30u].z, fma(_1228, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1224));
        float _1606 = fma(_1232, cbModelParam._m0[31u].z, fma(_1228, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1224));
        float _1610 = fma(_1232, cbModelParam._m0[32u].z, fma(_1228, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1224));
        float _1633 = _1224 + _1002;
        float _1634 = _1228 + _1003;
        float _1635 = _1232 + _1004;
        float _1645 = fma(_1635, cbModelParam._m0[30u].z, fma(_1634, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1633)) - _1602;
        float _1646 = fma(_1635, cbModelParam._m0[31u].z, fma(_1634, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1633)) - _1606;
        float _1647 = fma(_1635, cbModelParam._m0[32u].z, fma(_1634, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1633)) - _1610;
        float _1651 = inversesqrt(dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647)));
        float _1664 = ((_1651 * _1645) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1602 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1665 = ((_1651 * _1646) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1606 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1666 = ((_1651 * _1647) / cbModelParam._m0[35u].z) + ((((((_1610 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        float _1701 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1668.x + (-0.5));
        float _1703 = _1701 * (_1668.y + (-0.5));
        float _1704 = _1701 * (_1668.z + (-0.5));
        float _1711 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1675.x + (-0.5));
        float _1713 = _1711 * (_1675.y + (-0.5));
        float _1714 = _1711 * (_1675.z + (-0.5));
        float _1721 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1682.x + (-0.5));
        float _1723 = _1721 * (_1682.y + (-0.5));
        float _1724 = _1721 * (_1682.z + (-0.5));
        float _1731 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1689.x + (-0.5));
        float _1733 = _1731 * (_1689.y + (-0.5));
        float _1734 = _1731 * (_1689.z + (-0.5));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1737 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1738 = _1702 * 0.5;
        float _1739 = _1712 * 0.5;
        float _1740 = _1722 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_1002, _1003, _1004), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4338 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1765 + 1.0))) + _1770) * _1735;
        float _1780 = _1703 * 0.5;
        float _1781 = _1713 * 0.5;
        float _1782 = _1723 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_1002, _1003, _1004), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1736 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4371 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1807 + 1.0))) + _1812) * _1736;
        float _1822 = _1704 * 0.5;
        float _1823 = _1714 * 0.5;
        float _1824 = _1724 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_1002, _1003, _1004), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4382 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1737 + 9.9999997473787516355514526367188e-06);
        float _4393 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4404 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_1849 + 1.0))) + _1854) * _1737;
        _1871 = _1704;
        _1872 = _1703;
        _1873 = _1702;
        _1874 = _1714;
        _1875 = _1713;
        _1876 = _1712;
        _1877 = _1724;
        _1878 = _1723;
        _1879 = _1722;
        _1880 = _1737;
        _1881 = _1736;
        _1882 = _1735;
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
        _1884 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
        _1885 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
    }
    else
    {
        _1871 = _1562;
        _1872 = _1562;
        _1873 = _1562;
        _1874 = _1562;
        _1875 = _1562;
        _1876 = _1562;
        _1877 = _1562;
        _1878 = _1562;
        _1879 = _1562;
        _1880 = _1562;
        _1881 = _1562;
        _1882 = _1562;
        _1883 = 0.0;
        _1884 = 0.0;
        _1885 = 0.0;
    }
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1574)) + _1574;
    float _1896 = (cbModelParam._m0[1u].x * (_1884 - _1575)) + _1575;
    float _1897 = (cbModelParam._m0[1u].x * (_1885 - _1576)) + _1576;
    float _1918 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1921 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1924 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1895));
    float _1939 = _1171 * 0.5;
    float _1940 = _1172 * 0.5;
    float _1941 = _1173 * 0.5;
    float _1942 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1873, _1876, _1879, _1882));
    float _1945 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1872, _1875, _1878, _1881));
    float _1948 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1982;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1955 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1561, _1565, _1568, _1571));
        float _1959 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1563, _1566, _1569, _1572));
        float _1963 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1564, _1567, _1570, _1573));
        float _1970 = dot(vec4(cbModelParam._m0[39u]), vec4(_1939, _1940, _1941, 1.0));
        _1982 = dot(vec3(isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1970) ? 0.0 : (isnan(0.0) ? _1970 : max(0.0, _1970))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1982 = 1.0;
    }
    float _1993;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1984 = dot(vec4(cbModelParam._m0[40u]), vec4(_1939, _1940, _1941, 1.0));
        _1993 = dot(vec3(isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1984) ? 0.0 : (isnan(0.0) ? _1984 : max(0.0, _1984))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1993 = 1.0;
    }
    float _1997 = (_1993 * cbModelParam._m0[1u].x) + (_1982 * (1.0 - cbModelParam._m0[1u].x));
    float _2007 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1005);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2007 : min(cbModelParam._m0[25u].z, _2007));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2055 = fma(_1232, cbModelParam._m0[13u].z, fma(_1228, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1224)) + cbModelParam._m0[13u].w;
        float _2059 = fma(_1232, cbModelParam._m0[14u].z, fma(_1228, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1224)) + cbModelParam._m0[14u].w;
        float _2063 = fma(_1232, cbModelParam._m0[15u].z, fma(_1228, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1224)) + cbModelParam._m0[15u].w;
        float _2066 = fma(_1173, cbModelParam._m0[13u].z, fma(_1172, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1171));
        float _2069 = fma(_1173, cbModelParam._m0[14u].z, fma(_1172, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1171));
        float _2072 = fma(_1173, cbModelParam._m0[15u].z, fma(_1172, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1171));
        float _2100;
        if (_2066 > 0.0)
        {
            _2100 = abs((1.0 - _2055) / _2066);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2055 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2100 = frontier_phi_17_15_ladder;
        }
        float _2321;
        if (_2069 > 0.0)
        {
            _2321 = abs((1.0 - _2059) / _2069);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2059 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2321 = frontier_phi_26_22_ladder;
        }
        float _2567;
        if (_2072 > 0.0)
        {
            _2567 = abs((1.0 - _2063) / _2072);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2063 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2567 = frontier_phi_38_33_ladder;
        }
        float _2569 = isnan(_2321) ? _2100 : (isnan(_2100) ? _2321 : min(_2100, _2321));
        float _2570 = isnan(_2567) ? _2569 : (isnan(_2569) ? _2567 : min(_2569, _2567));
        float _2574 = (_2570 * _2066) + _2055;
        float _2575 = (_2570 * _2069) + _2059;
        float _2576 = (_2570 * _2072) + _2063;
        float _2577 = _2570 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2577;
        float _2581 = _2577 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 > _2581) || ((_2575 < _2579) || ((_2574 < _2579) || (_2574 > _2581))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2700 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2576, cbModelParam._m0[9u].z, fma(_2575, cbModelParam._m0[9u].y, _2574 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2576, cbModelParam._m0[10u].z, fma(_2575, cbModelParam._m0[10u].y, _2574 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2576, cbModelParam._m0[11u].z, fma(_2575, cbModelParam._m0[11u].y, _2574 * cbModelParam._m0[11u].x))), _2008);
            frontier_phi_16_38_ladder = _2700.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2700.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2700.x * cbModelParam._m0[1u].y;
        }
        _2088 = frontier_phi_16_38_ladder_2;
        _2090 = frontier_phi_16_38_ladder_1;
        _2092 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1171, _1172, _1173), _2008);
        _2088 = _2076.x * cbModelParam._m0[1u].y;
        _2090 = _2076.y * cbModelParam._m0[1u].y;
        _2092 = _2076.z * cbModelParam._m0[1u].y;
    }
    float _2096 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1005);
    float _2097 = isnan(_2096) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2096 : min(cbModelParam._m0[25u].w, _2096));
    float _2186;
    float _2188;
    float _2190;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2150 = fma(_1232, cbModelParam._m0[21u].z, fma(_1228, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1224)) + cbModelParam._m0[21u].w;
        float _2154 = fma(_1232, cbModelParam._m0[22u].z, fma(_1228, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1224)) + cbModelParam._m0[22u].w;
        float _2158 = fma(_1232, cbModelParam._m0[23u].z, fma(_1228, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1224)) + cbModelParam._m0[23u].w;
        float _2161 = fma(_1173, cbModelParam._m0[21u].z, fma(_1172, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1171));
        float _2164 = fma(_1173, cbModelParam._m0[22u].z, fma(_1172, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1171));
        float _2167 = fma(_1173, cbModelParam._m0[23u].z, fma(_1172, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1171));
        float _2326;
        if (_2161 > 0.0)
        {
            _2326 = abs((1.0 - _2150) / _2161);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2150 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2326 = frontier_phi_28_24_ladder;
        }
        float _2594;
        if (_2164 > 0.0)
        {
            _2594 = abs((1.0 - _2154) / _2164);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2164 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2154 + 1.0) / _2164);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2594 = frontier_phi_40_35_ladder;
        }
        float _2799;
        if (_2167 > 0.0)
        {
            _2799 = abs((1.0 - _2158) / _2167);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2167 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2158 + 1.0) / _2167);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2799 = frontier_phi_49_46_ladder;
        }
        float _2801 = isnan(_2594) ? _2326 : (isnan(_2326) ? _2594 : min(_2326, _2594));
        float _2802 = isnan(_2799) ? _2801 : (isnan(_2801) ? _2799 : min(_2801, _2799));
        float _2806 = (_2802 * _2161) + _2150;
        float _2807 = (_2802 * _2164) + _2154;
        float _2808 = (_2802 * _2167) + _2158;
        float _2809 = _2802 * 9.9999997473787516355514526367188e-05;
        float _2810 = (-1.0) - _2809;
        float _2812 = _2809 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2808 > _2812) || ((_2808 < _2810) || ((_2807 > _2812) || ((_2807 < _2810) || ((_2806 < _2810) || (_2806 > _2812))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2808, cbModelParam._m0[17u].z, fma(_2807, cbModelParam._m0[17u].y, _2806 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2808, cbModelParam._m0[18u].z, fma(_2807, cbModelParam._m0[18u].y, _2806 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2808, cbModelParam._m0[19u].z, fma(_2807, cbModelParam._m0[19u].y, _2806 * cbModelParam._m0[19u].x))), _2097);
            frontier_phi_25_49_ladder = _3007.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3007.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3007.x * cbModelParam._m0[1u].z;
        }
        _2186 = frontier_phi_25_49_ladder_2;
        _2188 = frontier_phi_25_49_ladder_1;
        _2190 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2170 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1171, _1172, _1173), _2097);
        _2186 = _2170.x * cbModelParam._m0[1u].z;
        _2188 = _2170.y * cbModelParam._m0[1u].z;
        _2190 = _2170.z * cbModelParam._m0[1u].z;
    }
    float _2202 = ((((1.0 - _1192) * ((_1179 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1192 * _1179)) * _1163;
    float _2203 = _2202 * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2204 = _2202 * ((cbModelParam._m0[1u].w * (_2188 - _2090)) + _2090);
    float _2205 = _2202 * ((cbModelParam._m0[1u].w * (_2190 - _2092)) + _2092);
    float _2208 = fma(_2205, cbSceneParam._m0[89u].z, fma(_2204, cbSceneParam._m0[89u].y, _2203 * cbSceneParam._m0[89u].x));
    float _2211 = fma(_2205, cbSceneParam._m0[90u].z, fma(_2204, cbSceneParam._m0[90u].y, _2203 * cbSceneParam._m0[90u].x));
    float _2214 = fma(_2205, cbSceneParam._m0[91u].z, fma(_2204, cbSceneParam._m0[91u].y, _2203 * cbSceneParam._m0[91u].x));
    vec4 _2222 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1100, _1101));
    float _2224 = _2222.w;
    float _2236 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2224);
    float _2237 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2224);
    float _2238 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2224);
    uvec4 _2242 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2244 = _2242.x * 14u;
    uint _2245 = _2244 + 13u;
    float _2252 = _1163 + (-1.0);
    float _2257 = (cbLight._m0[_2245].x * _2252) + 1.0;
    float _2258 = (cbLight._m0[_2245].y * _2252) + 1.0;
    float _2259 = (cbLight._m0[_2245].z * _2252) + 1.0;
    float _2260 = (cbLight._m0[_2245].w * _2252) + 1.0;
    uint _2261 = _2244 + 5u;
    float _2267 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2271 = _2244 + 4u;
    float _2280 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2284 = _2244 | 1u;
    float _2295 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_1002, _1003, _1004));
    float _2298 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_1002, _1003, _1004));
    float _4540 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _4551 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2303 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * 0.3183098733425140380859375;
    float _2305 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * 0.3183098733425140380859375;
    float _2312 = ((cbLight._m0[_2261].x * _2267) * _2305) + (((cbLight._m0[_2271].x * _2236) * _2280) * _2303);
    float _2313 = ((_2267 * cbLight._m0[_2261].y) * _2305) + (((cbLight._m0[_2271].y * _2237) * _2280) * _2303);
    float _2314 = ((_2267 * cbLight._m0[_2261].z) * _2305) + (((cbLight._m0[_2271].z * _2238) * _2280) * _2303);
    uvec4 _2318 = floatBitsToUint(cbLight._m0[_2244 + 12u]);
    bool _2320 = _2318.x == 0u;
    float _2331;
    float _2333;
    float _2335;
    if (_2320)
    {
        _2331 = _2312;
        _2333 = _2313;
        _2335 = _2314;
    }
    else
    {
        uint _2339 = _2244 + 6u;
        float _2355 = (dot(vec3(cbLight._m0[_2244 + 2u].xyz), vec3(_1002, _1003, _1004)) * 0.5) + 0.5;
        float _2356 = _2355 * _2355;
        float _4562 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2357 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2358 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2331 = (((cbLight._m0[_2339].x * 0.3183098733425140380859375) * _2357) * _2358) + _2312;
        _2333 = (((cbLight._m0[_2339].y * 0.3183098733425140380859375) * _2357) * _2358) + _2313;
        _2335 = (((cbLight._m0[_2339].z * 0.3183098733425140380859375) * _2357) * _2358) + _2314;
    }
    bool _2338 = _2318.y == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2338)
    {
        _2376 = _2331;
        _2378 = _2333;
        _2380 = _2335;
    }
    else
    {
        uint _2538 = _2244 + 7u;
        float _2554 = (dot(vec3(cbLight._m0[_2244 + 3u].xyz), vec3(_1002, _1003, _1004)) * 0.5) + 0.5;
        float _2555 = _2554 * _2554;
        float _4578 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2556 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2557 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2376 = (((cbLight._m0[_2538].x * 0.3183098733425140380859375) * _2556) * _2557) + _2331;
        _2378 = (((cbLight._m0[_2538].y * 0.3183098733425140380859375) * _2556) * _2557) + _2333;
        _2380 = (((cbLight._m0[_2538].z * 0.3183098733425140380859375) * _2556) * _2557) + _2335;
    }
    uint _2383 = _2244 + 8u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _1005) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2244].x + _1080;
    float _2399 = cbLight._m0[_2244].y + _1081;
    float _2400 = cbLight._m0[_2244].z + _1082;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_1002, _1003, _1004), vec3(cbLight._m0[_2244].xyz));
    float _4594 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _4605 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _2412 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2413 = dot(vec3(_1002, _1003, _1004), vec3(_2405, _2406, _2407));
    float _4616 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2405, _2406, _2407));
    float _4627 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2397 * _2397;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2436 = (exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2437 = 1.0 - _2397;
    float _2448 = (0.5 / (((_2412 * ((_2411 * _2437) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2437) + _2397) * _2411))) * _2411;
    float _4638 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2450 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    uint _2464 = _2244 + 9u;
    float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _1005) * 0.949999988079071044921875);
    float _2476 = _2475 * _2475;
    float _2477 = cbLight._m0[_2284].x + _1080;
    float _2478 = cbLight._m0[_2284].y + _1081;
    float _2479 = cbLight._m0[_2284].z + _1082;
    float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
    float _2484 = _2483 * _2477;
    float _2485 = _2483 * _2478;
    float _2486 = _2483 * _2479;
    float _2487 = dot(vec3(_1002, _1003, _1004), vec3(cbLight._m0[_2284].xyz));
    float _4649 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2491 = dot(vec3(_1002, _1003, _1004), vec3(_2484, _2485, _2486));
    float _4660 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2494 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
    float _2495 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2484, _2485, _2486));
    float _4671 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2499 = _2476 * _2476;
    float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
    float _2512 = (exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2513 = 1.0 - _2476;
    float _2523 = (0.5 / (((_2412 * ((_2490 * _2513) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2513) + _2476) * _2490))) * _2490;
    float _4682 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2525 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
    float _2535 = (((_2512 * cbLight._m0[_2464].x) * _2525) * _2267) + ((((cbLight._m0[_2383].x * _2236) * _2436) * _2450) * _2280);
    float _2536 = (((_2512 * cbLight._m0[_2464].y) * _2525) * _2267) + ((((cbLight._m0[_2383].y * _2237) * _2436) * _2450) * _2280);
    float _2537 = (((_2512 * cbLight._m0[_2464].z) * _2525) * _2267) + ((((cbLight._m0[_2383].z * _2238) * _2436) * _2450) * _2280);
    float _2599;
    float _2601;
    float _2603;
    if (_2320)
    {
        _2599 = _2535;
        _2601 = _2536;
        _2603 = _2537;
    }
    else
    {
        uint _2605 = _2244 + 2u;
        uint _2609 = _2244 + 10u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _1005) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _1080;
        float _2626 = cbLight._m0[_2605].y + _1081;
        float _2627 = cbLight._m0[_2605].z + _1082;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_1002, _1003, _1004), vec3(cbLight._m0[_2605].xyz));
        float _4693 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2639 = dot(vec3(_1002, _1003, _1004), vec3(_2632, _2633, _2634));
        float _4704 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4715 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2660 = (exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2661 = 1.0 - _2624;
        float _2671 = (0.5 / (((_2412 * ((_2638 * _2661) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2661) + _2624) * _2638))) * _2638;
        float _4726 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2673 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2674 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2599 = (((_2660 * cbLight._m0[_2609].x) * _2673) * _2674) + _2535;
        _2601 = (((_2660 * cbLight._m0[_2609].y) * _2673) * _2674) + _2536;
        _2603 = (((_2660 * cbLight._m0[_2609].z) * _2673) * _2674) + _2537;
    }
    float _2709;
    float _2711;
    float _2713;
    if (_2338)
    {
        _2709 = _2599;
        _2711 = _2601;
        _2713 = _2603;
    }
    else
    {
        uint _2720 = _2244 + 3u;
        uint _2724 = _2244 + 11u;
        float _2738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2720].w)) * _1005) * 0.949999988079071044921875);
        float _2739 = _2738 * _2738;
        float _2740 = cbLight._m0[_2720].x + _1080;
        float _2741 = cbLight._m0[_2720].y + _1081;
        float _2742 = cbLight._m0[_2720].z + _1082;
        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
        float _2747 = _2746 * _2740;
        float _2748 = _2746 * _2741;
        float _2749 = _2746 * _2742;
        float _2750 = dot(vec3(_1002, _1003, _1004), vec3(cbLight._m0[_2720].xyz));
        float _4742 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2754 = dot(vec3(_1002, _1003, _1004), vec3(_2747, _2748, _2749));
        float _4753 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2758 = dot(vec3(cbLight._m0[_2720].xyz), vec3(_2747, _2748, _2749));
        float _4764 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2762 = _2739 * _2739;
        float _2766 = ((_2757 * _2757) * (_2762 + (-1.0))) + 1.0;
        float _2775 = (exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2776 = 1.0 - _2739;
        float _2786 = (0.5 / (((_2412 * ((_2753 * _2776) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2776) + _2739) * _2753))) * _2753;
        float _4775 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2788 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2762 / ((_2766 * _2766) * 3.141590118408203125));
        float _2789 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2709 = (((_2775 * cbLight._m0[_2724].x) * _2788) * _2789) + _2599;
        _2711 = (((_2775 * cbLight._m0[_2724].y) * _2788) * _2789) + _2601;
        _2713 = (((_2775 * cbLight._m0[_2724].z) * _2788) * _2789) + _2603;
    }
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    if (_2242.y == 0u)
    {
        float _2864 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2865 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2864;
        float _2866 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2864;
        float _2867 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2864;
        uvec4 _2879 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2880 = _2879.x;
        uint _2891 = uint((float(_2879.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1101) / _2880))) + floor(float(uint(cbSceneParam._m0[85u].x * _1100) / _2880)));
        float _2901 = (log2(_2867 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2902 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        uint _2905 = uint(isnan(14.0) ? _2902 : (isnan(_2902) ? 14.0 : min(_2902, 14.0)));
        uvec4 _2910 = texelFetch(g_lightClusterGridBuffer, int(((_2905 << 2u) + (_2891 << 6u)) >> 2u));
        uint _2911 = _2910.x;
        uint _2912 = _2879.z;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        if (((((1u << ((_2912 >> 4u) & 15u)) + 4294967295u) & _2911) == 0u) || ((_2912 & 240u) == 0u))
        {
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
        }
        else
        {
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3023;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            uint _3170 = 0u;
            uint _3179;
            bool _3180;
            for (;;)
            {
                _3179 = texelFetch(g_lightClassification, int((((_2905 << 5u) + (_2891 << 9u)) + (_3170 << 2u)) >> 2u)).x;
                _3180 = _3179 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3180)
                {
                    frontier_phi_66_pred = _3164;
                    frontier_phi_66_pred_1 = _3169;
                    frontier_phi_66_pred_2 = _3168;
                    frontier_phi_66_pred_3 = _3167;
                    frontier_phi_66_pred_4 = _3166;
                    frontier_phi_66_pred_5 = _3165;
                }
                else
                {
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    uint _3315;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3169;
                    _3315 = _3179;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    for (;;)
                    {
                        uint _3319 = uint(findLSB(_3315)) + (_3170 << 5u);
                        uint _3316 = (_3315 + 4294967295u) & _3315;
                        uint _3321 = _3319 * 48u;
                        vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 3u)).x));
                        uint _3341 = (_3319 * 48u) + 4u;
                        vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3360 = (_3319 * 48u) + 8u;
                        vec3 _3371 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3360)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 2u)).x));
                        float _3375 = _3335.x - _2865;
                        float _3376 = _3335.y - _2866;
                        float _3377 = _3335.z - _2867;
                        float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                        float _3381 = inversesqrt(_3378);
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3385 = dot(vec3(_1119, _1122, _1125), vec3(_3382, _3383, _3384));
                        float _3390 = 1.0 - (_3378 * _3335.w);
                        float _4801 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3391 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3392 = sqrt(_3378) * _3354.w;
                        float _3395 = 1.39999997615814208984375 / (_3392 + 1.39999997615814208984375);
                        float _3396 = _3395 * _3395;
                        float _3399 = ((1.0 - _3396) * _3385) + _3396;
                        float _3402 = _3392 * _3392;
                        float _3406 = ((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3391) / ((_3402 * 0.699999988079071044921875) + 1.0);
                        float _3410 = (-0.0) - _2865;
                        float _3411 = (-0.0) - _2866;
                        float _3412 = (-0.0) - _2867;
                        float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                        float _3417 = _3416 * _3410;
                        float _3418 = _3416 * _3411;
                        float _3419 = _3416 * _3412;
                        float _3427 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                        float _3428 = 1.0 - _1179;
                        float _3435 = sqrt(1.0 - ((1.0 - (_3428 * _3428)) * (1.0 - (_3427 * _3427))));
                        float _3436 = _3435 * _3435;
                        float _3437 = _3436 * _3436;
                        float _3438 = _3417 + _3382;
                        float _3439 = _3418 + _3383;
                        float _3440 = _3419 + _3384;
                        float _3444 = inversesqrt(dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440)));
                        float _3448 = dot(vec3(_1119, _1122, _1125), vec3(_3417, _3418, _3419));
                        float _4817 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3451 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3452 = dot(vec3(_1119, _1122, _1125), vec3(_3444 * _3438, _3444 * _3439, _3444 * _3440));
                        float _4828 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3455 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3459 = ((_3455 * _3455) * (_3437 + (-1.0))) + 1.0;
                        float _3460 = _3395 * _3436;
                        float _3461 = _3460 * _3460;
                        float _3464 = ((1.0 - _3461) * _3385) + _3461;
                        float _4839 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3465 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                        float _3466 = 1.0 - _3436;
                        float _3476 = (0.5 / (((_3465 * ((_3451 * _3466) + _3436)) + 9.9999999392252902907785028219223e-09) + (((_3465 * _3466) + _3436) * _3451))) * _3465;
                        float _4850 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3487 = (((_3437 * 3.1415927410125732421875) * (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) / ((_3459 * _3459) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125))) * _3391;
                        _3239 = (_3406 * _3354.x) + _3312;
                        _3240 = (_3406 * _3354.y) + _3313;
                        _3241 = (_3406 * _3354.z) + _3314;
                        _3236 = (_3487 * _3371.x) + _3309;
                        _3237 = (_3487 * _3371.y) + _3310;
                        _3238 = (_3487 * _3371.z) + _3311;
                        if (_3316 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3241;
                            _3315 = _3316;
                        }
                    }
                    frontier_phi_66_pred = _3236;
                    frontier_phi_66_pred_1 = _3241;
                    frontier_phi_66_pred_2 = _3240;
                    frontier_phi_66_pred_3 = _3239;
                    frontier_phi_66_pred_4 = _3238;
                    frontier_phi_66_pred_5 = _3237;
                }
                _3013 = frontier_phi_66_pred;
                _3023 = frontier_phi_66_pred_1;
                _3021 = frontier_phi_66_pred_2;
                _3019 = frontier_phi_66_pred_3;
                _3017 = frontier_phi_66_pred_4;
                _3015 = frontier_phi_66_pred_5;
                uint _3171 = _3170 + 1u;
                if (_3171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3164 = _3013;
                    _3165 = _3015;
                    _3166 = _3017;
                    _3167 = _3019;
                    _3168 = _3021;
                    _3169 = _3023;
                    _3170 = _3171;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
        }
        uvec4 _3026 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3027 = _3026.z;
        uint _3029 = (_3027 >> 8u) & 15u;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((4294967295u << _3029) & _2911) == 0u)
        {
            _3132 = _3012;
            _3134 = _3014;
            _3136 = _3016;
            _3138 = _3018;
            _3140 = _3020;
            _3142 = _3022;
        }
        else
        {
            float _3157 = inversesqrt(dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867)));
            float _3158 = _3157 * _2865;
            float _3159 = _3157 * _2866;
            float _3160 = _3157 * _2867;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3029 < ((_3027 >> 12u) & 15u))
            {
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3292 = _3012;
                float _3293 = _3014;
                float _3294 = _3016;
                float _3295 = _3018;
                float _3296 = _3020;
                float _3297 = _3022;
                uint _3298 = _3029;
                uint _3307;
                bool _3308;
                for (;;)
                {
                    _3307 = texelFetch(g_lightClassification, int((((_2905 << 5u) + (_2891 << 9u)) + (_3298 << 2u)) >> 2u)).x;
                    _3308 = _3307 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3308)
                    {
                        frontier_phi_77_pred = _3297;
                        frontier_phi_77_pred_1 = _3296;
                        frontier_phi_77_pred_2 = _3295;
                        frontier_phi_77_pred_3 = _3294;
                        frontier_phi_77_pred_4 = _3293;
                        frontier_phi_77_pred_5 = _3292;
                    }
                    else
                    {
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3514 = _3292;
                        float _3515 = _3293;
                        float _3516 = _3294;
                        float _3517 = _3295;
                        float _3518 = _3296;
                        float _3519 = _3297;
                        uint _3520 = _3307;
                        uint _3521;
                        vec4 _3546;
                        float _3547;
                        vec4 _3562;
                        vec3 _3574;
                        vec4 _3589;
                        vec4 _3604;
                        float _3650;
                        bool _3651;
                        for (;;)
                        {
                            uint _3531 = ((_3298 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3520));
                            _3521 = (_3520 + 4294967295u) & _3520;
                            uint _3533 = _3531 * 40u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3547 = _3546.w;
                            uint _3549 = (_3531 * 40u) + 4u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3531 * 40u) + 8u;
                            _3574 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x));
                            uint _3576 = (_3531 * 40u) + 16u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3531 * 40u) + 20u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3606 = (_3531 * 40u) + 24u;
                            vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3625 = (_3531 * 40u) + 28u;
                            vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            _3650 = fma(_2867, _3638.z, fma(_2866, _3638.y, _3638.x * _2865)) + _3638.w;
                            _3651 = !((fma(_2867, _3619.z, fma(_2866, _3619.y, _3619.x * _2865)) + _3619.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3651)
                            {
                                float _3678 = _3546.x - _2865;
                                float _3679 = _3546.y - _2866;
                                float _3680 = _3546.z - _2867;
                                float _3681 = dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680));
                                float _3684 = inversesqrt(_3681);
                                float _3685 = _3684 * _3678;
                                float _3686 = _3684 * _3679;
                                float _3687 = _3684 * _3680;
                                float _3691 = 1.0 - (_3681 / (_3547 * _3547));
                                float _4861 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3696 = sqrt(_3681) * _3562.w;
                                float _3698 = 1.39999997615814208984375 / (_3696 + 1.39999997615814208984375);
                                float _3699 = _3698 * _3698;
                                float _3702 = ((1.0 - _3699) * dot(vec3(_3685, _3686, _3687), vec3(_1119, _1122, _1125))) + _3699;
                                float _3705 = _3696 * _3696;
                                float _3709 = (fma(_2867, _3589.z, fma(_2866, _3589.y, _3589.x * _2865)) + _3589.w) / _3650;
                                float _3710 = (fma(_2867, _3604.z, fma(_2866, _3604.y, _3604.x * _2865)) + _3604.w) / _3650;
                                float _3714 = 1.0 - dot(vec2(_3709, _3710), vec2(_3709, _3710));
                                float _4877 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3716 = _3715 * (((isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0))) * _3692) / ((_3705 * 0.699999988079071044921875) + 1.0));
                                float _3728 = exp2(log2(1.0 / ((_3705 * 3.5) + 5.0)) * 0.25);
                                float _3729 = 1.0 - _1179;
                                float _3736 = sqrt(1.0 - ((1.0 - (_3729 * _3729)) * (1.0 - (_3728 * _3728))));
                                float _3737 = _3736 * _3736;
                                float _3738 = _3737 * _3737;
                                float _3739 = _3685 - _3158;
                                float _3740 = _3686 - _3159;
                                float _3741 = _3687 - _3160;
                                float _3745 = inversesqrt(dot(vec3(_3739, _3740, _3741), vec3(_3739, _3740, _3741)));
                                float _3749 = dot(vec3(_1119, _1122, _1125), vec3((-0.0) - _3158, (-0.0) - _3159, (-0.0) - _3160));
                                float _4888 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3753 = dot(vec3(_1119, _1122, _1125), vec3(_3745 * _3739, _3745 * _3740, _3745 * _3741));
                                float _4899 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3756 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3760 = ((_3756 * _3756) * (_3738 + (-1.0))) + 1.0;
                                float _3761 = _3698 * _3737;
                                float _3762 = _3761 * _3761;
                                float _3768 = ((1.0 - _3762) * dot(vec3(_1119, _1122, _1125), vec3(_3685, _3686, _3687))) + _3762;
                                float _4910 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3770 = 1.0 - _3737;
                                float _3780 = (0.5 / (((_3769 * ((_3752 * _3770) + _3737)) + 9.9999999392252902907785028219223e-09) + (((_3769 * _3770) + _3737) * _3752))) * _3769;
                                float _4921 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3790 = (_3715 * _3692) * (((_3738 * 3.1415927410125732421875) * (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) / ((_3760 * _3760) * ((_3705 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3716 * _3562.y;
                                frontier_phi_83_pred_1 = _3716 * _3562.x;
                                frontier_phi_83_pred_2 = _3790 * _3574.z;
                                frontier_phi_83_pred_3 = _3790 * _3574.y;
                                frontier_phi_83_pred_4 = _3790 * _3574.x;
                                frontier_phi_83_pred_5 = _3716 * _3562.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3798 = frontier_phi_83_pred;
                            _3797 = frontier_phi_83_pred_1;
                            _3796 = frontier_phi_83_pred_2;
                            _3795 = frontier_phi_83_pred_3;
                            _3794 = frontier_phi_83_pred_4;
                            _3799 = frontier_phi_83_pred_5;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            _3506 = _3799 + _3519;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            _3503 = _3796 + _3516;
                            if (_3521 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3521;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3506;
                        frontier_phi_77_pred_1 = _3505;
                        frontier_phi_77_pred_2 = _3504;
                        frontier_phi_77_pred_3 = _3503;
                        frontier_phi_77_pred_4 = _3502;
                        frontier_phi_77_pred_5 = _3501;
                    }
                    _3143 = frontier_phi_77_pred;
                    _3141 = frontier_phi_77_pred_1;
                    _3139 = frontier_phi_77_pred_2;
                    _3137 = frontier_phi_77_pred_3;
                    _3135 = frontier_phi_77_pred_4;
                    _3133 = frontier_phi_77_pred_5;
                    uint _3299 = _3298 + 1u;
                    if (_3299 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3292 = _3133;
                        _3293 = _3135;
                        _3294 = _3137;
                        _3295 = _3139;
                        _3296 = _3141;
                        _3297 = _3143;
                        _3298 = _3299;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3137;
                frontier_phi_58_59_ladder_1 = _3143;
                frontier_phi_58_59_ladder_2 = _3141;
                frontier_phi_58_59_ladder_3 = _3139;
                frontier_phi_58_59_ladder_4 = _3135;
                frontier_phi_58_59_ladder_5 = _3133;
            }
            else
            {
                frontier_phi_58_59_ladder = _3016;
                frontier_phi_58_59_ladder_1 = _3022;
                frontier_phi_58_59_ladder_2 = _3020;
                frontier_phi_58_59_ladder_3 = _3018;
                frontier_phi_58_59_ladder_4 = _3014;
                frontier_phi_58_59_ladder_5 = _3012;
            }
            _3132 = frontier_phi_58_59_ladder_5;
            _3134 = frontier_phi_58_59_ladder_4;
            _3136 = frontier_phi_58_59_ladder;
            _3138 = frontier_phi_58_59_ladder_3;
            _3140 = frontier_phi_58_59_ladder_2;
            _3142 = frontier_phi_58_59_ladder_1;
        }
        float _3147 = isnan(1.0) ? _1163 : (isnan(_1163) ? 1.0 : min(_1163, 1.0));
        _2924 = (_3147 * _3138) + _2376;
        _2926 = (_3147 * _3140) + _2378;
        _2928 = (_3147 * _3142) + _2380;
        _2930 = ((_3132 * 0.039999999105930328369140625) * _3147) + _2709;
        _2932 = ((_3134 * 0.039999999105930328369140625) * _3147) + _2711;
        _2934 = ((_3136 * 0.039999999105930328369140625) * _3147) + _2713;
    }
    else
    {
        _2924 = _2376;
        _2926 = _2378;
        _2928 = _2380;
        _2930 = _2709;
        _2932 = _2711;
        _2934 = _2713;
    }
    float _4937 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _4948 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _4959 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _2951 = ((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2924 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1163))) + ((_2930 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1997)) * cbPerFrame._m0[3u].x);
    float _2952 = ((isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2926 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1163))) + ((_2932 + ((isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))) * _1997)) * cbPerFrame._m0[3u].x);
    float _2953 = ((isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (_2928 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1163))) + ((_2934 + ((isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0))) * _1997)) * cbPerFrame._m0[3u].x);
    uint _2954 = _265 + 6u;
    float _2962 = _1100 / cbSceneParam._m0[86u].x;
    float _2963 = _1101 / cbSceneParam._m0[86u].y;
    vec4 _2977 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2962, _2963, (log2((isnan(cbSceneParam._m0[77u].w) ? _1023 : (isnan(_1023) ? cbSceneParam._m0[77u].w : min(_1023, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2979 = _2977.x;
    float _2980 = _2977.y;
    float _2981 = _2977.z;
    float _2982 = _2977.w;
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    if (_1023 > cbSceneParam._m0[78u].w)
    {
        float _3037 = isnan(_1023) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1023 : min(cbSceneParam._m0[80u].w, _1023));
        float _3038 = _3037 / _1023;
        float _3049 = _3038 * _1073;
        float _3050 = _1074 * _3038;
        float _3051 = (-0.0) - _3050;
        float _3052 = _3038 * _1075;
        float _3054 = (cbSceneParam._m0[77u].w * _3051) / _3037;
        float _3055 = _3054 + cbSceneParam._m0[79u].w;
        float _3056 = cbSceneParam._m0[79u].w - _3050;
        float _3062 = sqrt(((_3049 * _3049) + (_3050 * _3050)) + (_3052 * _3052));
        float _3065 = (1.0 - (cbSceneParam._m0[77u].w / _3037)) * _3062;
        float _3070 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3072 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3249;
        if (abs((_3051 - _3054) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3249 = ((((_3055 > 0.0) ? exp2(_3070 * _3055) : (2.0 - exp2(_3072 * _3055))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3065;
        }
        else
        {
            float _3193 = 1.0 / cbSceneParam._m0[80u].x;
            float _3194 = isnan(_3056) ? _3055 : (isnan(_3055) ? _3056 : max(_3055, _3056));
            float _3195 = isnan(_3056) ? _3055 : (isnan(_3055) ? _3056 : min(_3055, _3056));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            float _3205 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : min(_3195, 0.0));
            _3249 = ((abs(_3062 / _3051) * cbSceneParam._m0[80u].y) * ((((_3204 - _3205) * 2.0) - ((exp2(_3070 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0)))) - exp2(_3070 * (isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))))) * _3193)) - ((exp2(_3072 * _3204) - exp2(_3072 * _3205)) * _3193))) + (_3065 * cbSceneParam._m0[80u].z);
        }
        vec4 _3251 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2962, _2963, 1.0), 0.0);
        float _3260 = exp2((_3249 * (-1.44269502162933349609375)) * (1.0 - _3251.w));
        float _3261 = log2(_3260);
        float _3277 = log2(_2982);
        _3074 = (exp2(_3277 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].x)) * _3251.x) / cbSceneParam._m0[78u].x)) + _2979;
        _3076 = (exp2(_3277 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].y)) * _3251.y) / cbSceneParam._m0[78u].y)) + _2980;
        _3078 = (exp2(_3277 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].z)) * _3251.z) / cbSceneParam._m0[78u].z)) + _2981;
        _3080 = _3260 * _2982;
    }
    else
    {
        _3074 = _2979;
        _3076 = _2980;
        _3078 = _2981;
        _3080 = _2982;
    }
    bool _3287;
    vec4 _3090;
    vec4 _3112;
    float _3114;
    float _3118;
    float _3119;
    float _3120;
    float _3121;
    bool _3131;
    for (;;)
    {
        _3090 = cbMatDynParam._m0[0u];
        float _3092 = roundEven(_3090.y);
        bool _3093 = _3092 == 3.0;
        float _3094 = log2(_3080);
        float _3101 = exp2(_3094 * cbSceneParam._m0[78u].x) * _2951;
        float _3102 = exp2(_3094 * cbSceneParam._m0[78u].y) * _2952;
        float _3103 = exp2(_3094 * cbSceneParam._m0[78u].z) * _2953;
        float _3110 = _1089 + (-0.5);
        _3112 = cbMtdParam._m0[1u];
        _3114 = _3112.y * _3110;
        float _3117 = (_3092 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3118 = _3117 * (_3093 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3074)));
        _3119 = _3117 * (_3093 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3076)));
        _3120 = _3117 * (_3093 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3078)));
        _3121 = _3110 * 0.999000012874603271484375;
        _3131 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3131)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3121) < 0.5)
            {
                _3287 = true;
                break;
            }
        }
        uint _3228 = _1138 + uint(_3090.w);
        if ((cbInstanceData._m0[_3228].w < 1.0) && ((cbInstanceData._m0[_3228].w + _3121) < 0.5))
        {
            _3287 = true;
            break;
        }
        if ((_3114 + 1.0) < _3112.x)
        {
            _3287 = true;
            break;
        }
        _3287 = false;
        break;
    }
    float _3492;
    if (_3287)
    {
        discard_state = true;
        _3492 = 0.0;
    }
    else
    {
        _3492 = cbInstanceData._m0[_2954].w;
    }
    SV_Target.x = _3118;
    SV_Target.y = _3119;
    SV_Target.z = _3120;
    SV_Target.w = _3492;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2954].w;
    discard_exit();
}


