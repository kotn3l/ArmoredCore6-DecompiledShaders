#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1480;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4065 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4076 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4087 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _387.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[24u].z) + _436) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4098 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _461 = (_454 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _462 = (_454 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _463 = (_454 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _387.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[24u].z) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4109 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    float _540 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _534;
    float _543 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _535;
    float _546 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _536;
    float _553 = ((_534 - _540) * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) + _540;
    float _554 = ((_535 - _543) * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) + _543;
    float _555 = ((_536 - _546) * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) + _546;
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _637 = _635.x;
    float _638 = _635.y;
    float _639 = _635.z;
    float _646 = ((_618.x - _637) * _454) + _637;
    float _647 = ((_618.y - _638) * _454) + _638;
    float _648 = ((_618.z - _639) * _454) + _639;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _673 = ((_660.z - _648) * _527) + _648;
    float _676 = ((((_660.x - _646) * _527) + _646) * 2.0) + (-1.0);
    float _677 = ((((_660.y - _647) * _527) + _647) * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _4120 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _683 = sqrt(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _713 = (_676 + ((((_593.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_701.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _714 = (_677 + ((((_593.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_701.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _717 = fma(_683, _254, fma(_714, _261, _713 * _247));
    float _720 = fma(_683, _255, fma(_714, _262, _713 * _248));
    float _723 = fma(_683, _256, fma(_714, _263, _713 * _249));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    vec4 _754 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _756 = _754.x;
    float _757 = 1.0 - _756;
    float _763 = (cbMtdParam._m0[19u].x + dot(vec4(_727 * _717, _727 * _720, _727 * _723, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_756 - _757) * cbMtdParam._m0[24u].w) + _757) * cbMtdParam._m0[21u].z);
    float _4131 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _764 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _766 = (-0.0) - cbMtdParam._m0[24u].x;
    float _768 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _768 : (isnan(_768) ? 1.0 : min(_768, 1.0));
    float _776 = _764 - ((_764 * TEXCOORD_8.x) * _769);
    float _777 = _764 - ((_764 * TEXCOORD_8.y) * _769);
    float _778 = _764 - ((_764 * TEXCOORD_8.z) * _769);
    float _785 = (_776 * ((_574.x * cbMtdParam._m0[18u].x) - _553)) + _553;
    float _786 = (_777 * ((_574.y * cbMtdParam._m0[18u].y) - _554)) + _554;
    float _787 = (_778 * ((_574.z * cbMtdParam._m0[18u].z) - _555)) + _555;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _801 = _799.x;
    float _802 = 1.0 - _801;
    float _828 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_801 - _802) * cbMtdParam._m0[24u].y) + _802) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4152 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _829 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _837 = ((((cbMtdParam._m0[10u].x - _785) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _829) + _785;
    float _838 = ((((cbMtdParam._m0[10u].y - _786) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _829) + _786;
    float _839 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _787)) * _829) + _787;
    float _844 = (((_593.z - _673) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _673;
    float _848 = ((_701.z - _844) * cbMtdParam._m0[19u].w) + _844;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _869 = (_862.x * 2.0) + (-1.0);
    float _870 = (_862.y * 2.0) + (-1.0);
    float _871 = dot(vec2(_869, _870), vec2(_869, _870));
    float _4163 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _879 = ((_862.z - _848) * _776) + _848;
    float _882 = ((cbMtdParam._m0[23u].y - _879) * _829) + _879;
    vec4 _903 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _909 = (_903.x * 2.0) + (-1.0);
    float _910 = (_903.y * 2.0) + (-1.0);
    float _911 = dot(vec2(_909, _910), vec2(_909, _910));
    float _4174 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _926 = ((sqrt(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) - _683) * _778) + _683;
    float _929 = (((_869 - _713) * _776) + _713) + (cbMtdParam._m0[21u].x * _713);
    float _930 = (((_870 - _714) * _777) + _714) + (cbMtdParam._m0[21u].x * _714);
    float _941 = (((_909 - _929) + (_929 * cbMtdParam._m0[22u].z)) * _829) + _929;
    float _942 = (((_910 - _930) + (_930 * cbMtdParam._m0[22u].z)) * _829) + _930;
    float _943 = (_829 * (sqrt(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) - _926)) + _926;
    float _945 = cbMtdParam._m0[22u].x + _701.w;
    float _948 = fma(_943, _254, fma(_942, _261, _941 * _247));
    float _951 = fma(_943, _255, fma(_942, _262, _941 * _248));
    float _954 = fma(_943, _256, fma(_942, _263, _941 * _249));
    float _958 = inversesqrt(dot(vec3(_948, _951, _954), vec3(_948, _951, _954)));
    float _959 = _958 * _948;
    float _960 = _958 * _951;
    float _961 = _958 * _954;
    float _4185 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _962 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _4196 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4207 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4218 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4229 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _980 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1031 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1021);
    float _1032 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1021);
    float _1033 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1021);
    float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
    float _1038 = _1031 * _1037;
    float _1039 = _1032 * _1037;
    float _1040 = _1033 * _1037;
    float _1046 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1047 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1065 = fma(_961, cbSceneParam._m0[5u].z, fma(_960, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _959));
    float _1068 = fma(_961, cbSceneParam._m0[6u].z, fma(_960, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _959));
    float _1071 = fma(_961, cbSceneParam._m0[7u].z, fma(_960, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _959));
    uint _1085 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1091 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * cbInstanceData._m0[_1085].x;
    float _1092 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * cbInstanceData._m0[_1085].y;
    float _1093 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * cbInstanceData._m0[_1085].z;
    float _4240 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _4251 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1095 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    vec4 _1105 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1046, cbSceneParam._m0[86u].y * _1047));
    float _1109 = ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * TEXCOORD_5.w) * _1105.x;
    float _1110 = dot(vec3(_959, _960, _961), vec3(_1038, _1039, _1040));
    float _1113 = _1110 * 2.0;
    float _1117 = (_1113 * _959) - _1038;
    float _1118 = (_1113 * _960) - _1039;
    float _1119 = (_1113 * _961) - _1040;
    float _1123 = abs(dot(vec3(_1038, _1039, _1040), vec3(_959, _960, _961)));
    float _4273 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1125 = sqrt(_962);
    float _1138 = exp2((_1125 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1125 * 3.0));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1479;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1204 = fma(_1178, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170));
        float _1208 = fma(_1178, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170));
        float _1212 = fma(_1178, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170));
        float _1237 = _1170 + _959;
        float _1238 = _1174 + _960;
        float _1239 = _1178 + _961;
        float _1249 = fma(_1239, cbModelParam._m0[26u].z, fma(_1238, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1237)) - _1204;
        float _1250 = fma(_1239, cbModelParam._m0[27u].z, fma(_1238, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1237)) - _1208;
        float _1251 = fma(_1239, cbModelParam._m0[28u].z, fma(_1238, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1237)) - _1212;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1204 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1208 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[34u].z) + ((((((_1212 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1307 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1273.x + (-0.5));
        float _1309 = _1307 * (_1273.y + (-0.5));
        float _1310 = _1307 * (_1273.z + (-0.5));
        float _1317 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1280.x + (-0.5));
        float _1319 = _1317 * (_1280.y + (-0.5));
        float _1320 = _1317 * (_1280.z + (-0.5));
        float _1327 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1287.x + (-0.5));
        float _1329 = _1327 * (_1287.y + (-0.5));
        float _1330 = _1327 * (_1287.z + (-0.5));
        float _1337 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1294.x + (-0.5));
        float _1339 = _1337 * (_1294.y + (-0.5));
        float _1340 = _1337 * (_1294.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1361 = (dot(vec3(_959, _960, _961), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1371 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4321 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1373 + 1.0))) + _1378) * _1341;
        float _1388 = _1309 * 0.5;
        float _1389 = _1319 * 0.5;
        float _1390 = _1329 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_959, _960, _961), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4354 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1415 + 1.0))) + _1420) * _1342;
        float _1430 = _1310 * 0.5;
        float _1431 = _1320 * 0.5;
        float _1432 = _1330 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_959, _960, _961), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4387 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1457 + 1.0))) + _1462) * _1343;
        _1479 = _1310;
        _1481 = _1309;
        _1482 = _1308;
        _1483 = _1320;
        _1484 = _1319;
        _1485 = _1318;
        _1486 = _1330;
        _1487 = _1329;
        _1488 = _1328;
        _1489 = _1343;
        _1490 = _1342;
        _1491 = _1341;
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1480;
        _1481 = _1480;
        _1482 = _1480;
        _1483 = _1480;
        _1484 = _1480;
        _1485 = _1480;
        _1486 = _1480;
        _1487 = _1480;
        _1488 = _1480;
        _1489 = _1480;
        _1490 = _1480;
        _1491 = _1480;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1518 = fma(_1178, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170));
        float _1522 = fma(_1178, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170));
        float _1526 = fma(_1178, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170));
        float _1549 = _1170 + _959;
        float _1550 = _1174 + _960;
        float _1551 = _1178 + _961;
        float _1561 = fma(_1551, cbModelParam._m0[30u].z, fma(_1550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1549)) - _1518;
        float _1562 = fma(_1551, cbModelParam._m0[31u].z, fma(_1550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1549)) - _1522;
        float _1563 = fma(_1551, cbModelParam._m0[32u].z, fma(_1550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1549)) - _1526;
        float _1567 = inversesqrt(dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563)));
        float _1580 = ((_1567 * _1561) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1518 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1567 * _1562) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1522 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1567 * _1563) / cbModelParam._m0[35u].z) + ((((((_1526 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        float _1617 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1584.x + (-0.5));
        float _1619 = _1617 * (_1584.y + (-0.5));
        float _1620 = _1617 * (_1584.z + (-0.5));
        float _1627 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1591.x + (-0.5));
        float _1629 = _1627 * (_1591.y + (-0.5));
        float _1630 = _1627 * (_1591.z + (-0.5));
        float _1637 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1598.x + (-0.5));
        float _1639 = _1637 * (_1598.y + (-0.5));
        float _1640 = _1637 * (_1598.z + (-0.5));
        float _1647 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1605.x + (-0.5));
        float _1649 = _1647 * (_1605.y + (-0.5));
        float _1650 = _1647 * (_1605.z + (-0.5));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = _1618 * 0.5;
        float _1655 = _1628 * 0.5;
        float _1656 = _1638 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_959, _960, _961), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4450 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1681 + 1.0))) + _1686) * _1651;
        float _1696 = _1619 * 0.5;
        float _1697 = _1629 * 0.5;
        float _1698 = _1639 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_959, _960, _961), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4483 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1723 + 1.0))) + _1728) * _1652;
        float _1738 = _1620 * 0.5;
        float _1739 = _1630 * 0.5;
        float _1740 = _1640 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_959, _960, _961), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4516 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1765 + 1.0))) + _1770) * _1653;
        _1787 = _1620;
        _1788 = _1619;
        _1789 = _1618;
        _1790 = _1630;
        _1791 = _1629;
        _1792 = _1628;
        _1793 = _1640;
        _1794 = _1639;
        _1795 = _1638;
        _1796 = _1653;
        _1797 = _1652;
        _1798 = _1651;
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
    }
    else
    {
        _1787 = _1480;
        _1788 = _1480;
        _1789 = _1480;
        _1790 = _1480;
        _1791 = _1480;
        _1792 = _1480;
        _1793 = _1480;
        _1794 = _1480;
        _1795 = _1480;
        _1796 = _1480;
        _1797 = _1480;
        _1798 = _1480;
        _1799 = 0.0;
        _1800 = 0.0;
        _1801 = 0.0;
    }
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1492)) + _1492;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1493)) + _1493;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1494)) + _1494;
    float _1834 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1811));
    float _1855 = _1117 * 0.5;
    float _1856 = _1118 * 0.5;
    float _1857 = _1119 * 0.5;
    float _1858 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1861 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1864 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1898;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1871 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1479, _1483, _1486, _1489));
        float _1875 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1481, _1484, _1487, _1490));
        float _1879 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1482, _1485, _1488, _1491));
        float _1886 = dot(vec4(cbModelParam._m0[39u]), vec4(_1855, _1856, _1857, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1909;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1900 = dot(vec4(cbModelParam._m0[40u]), vec4(_1855, _1856, _1857, 1.0));
        _1909 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1909 = 1.0;
    }
    float _1913 = (_1909 * cbModelParam._m0[1u].x) + (_1898 * (1.0 - cbModelParam._m0[1u].x));
    float _1923 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _962);
    float _1924 = isnan(_1923) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1923 : min(cbModelParam._m0[25u].z, _1923));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1971 = fma(_1178, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1170)) + cbModelParam._m0[13u].w;
        float _1975 = fma(_1178, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1170)) + cbModelParam._m0[14u].w;
        float _1979 = fma(_1178, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1170)) + cbModelParam._m0[15u].w;
        float _1982 = fma(_1119, cbModelParam._m0[13u].z, fma(_1118, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117));
        float _1985 = fma(_1119, cbModelParam._m0[14u].z, fma(_1118, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117));
        float _1988 = fma(_1119, cbModelParam._m0[15u].z, fma(_1118, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117));
        float _2016;
        if (_1982 > 0.0)
        {
            _2016 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2016 = frontier_phi_14_12_ladder;
        }
        float _2185;
        if (_1985 > 0.0)
        {
            _2185 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2185 = frontier_phi_23_19_ladder;
        }
        float _2480;
        if (_1988 > 0.0)
        {
            _2480 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2480 = frontier_phi_35_30_ladder;
        }
        float _2482 = isnan(_2185) ? _2016 : (isnan(_2016) ? _2185 : min(_2016, _2185));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1982) + _1971;
        float _2488 = (_2483 * _1985) + _1975;
        float _2489 = (_2483 * _1988) + _1979;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2492 = (-1.0) - _2490;
        float _2494 = _2490 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2489 > _2494) || ((_2489 < _2492) || ((_2488 > _2494) || ((_2488 < _2492) || ((_2487 < _2492) || (_2487 > _2494))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2489, cbModelParam._m0[9u].z, fma(_2488, cbModelParam._m0[9u].y, _2487 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2489, cbModelParam._m0[10u].z, fma(_2488, cbModelParam._m0[10u].y, _2487 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2489, cbModelParam._m0[11u].z, fma(_2488, cbModelParam._m0[11u].y, _2487 * cbModelParam._m0[11u].x))), _1924);
            frontier_phi_13_35_ladder = _2634.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2634.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2634.x * cbModelParam._m0[1u].y;
        }
        _2004 = frontier_phi_13_35_ladder_2;
        _2006 = frontier_phi_13_35_ladder_1;
        _2008 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1117, _1118, _1119), _1924);
        _2004 = _1992.x * cbModelParam._m0[1u].y;
        _2006 = _1992.y * cbModelParam._m0[1u].y;
        _2008 = _1992.z * cbModelParam._m0[1u].y;
    }
    float _2012 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _962);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2012 : min(cbModelParam._m0[25u].w, _2012));
    float _2102;
    float _2104;
    float _2106;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2066 = fma(_1178, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1170)) + cbModelParam._m0[21u].w;
        float _2070 = fma(_1178, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1170)) + cbModelParam._m0[22u].w;
        float _2074 = fma(_1178, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1170)) + cbModelParam._m0[23u].w;
        float _2077 = fma(_1119, cbModelParam._m0[21u].z, fma(_1118, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117));
        float _2080 = fma(_1119, cbModelParam._m0[22u].z, fma(_1118, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117));
        float _2083 = fma(_1119, cbModelParam._m0[23u].z, fma(_1118, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117));
        float _2190;
        if (_2077 > 0.0)
        {
            _2190 = abs((1.0 - _2066) / _2077);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2066 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2190 = frontier_phi_25_21_ladder;
        }
        float _2507;
        if (_2080 > 0.0)
        {
            _2507 = abs((1.0 - _2070) / _2080);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2070 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2507 = frontier_phi_37_32_ladder;
        }
        float _2834;
        if (_2083 > 0.0)
        {
            _2834 = abs((1.0 - _2074) / _2083);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2074 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2834 = frontier_phi_47_44_ladder;
        }
        float _2836 = isnan(_2507) ? _2190 : (isnan(_2190) ? _2507 : min(_2190, _2507));
        float _2837 = isnan(_2834) ? _2836 : (isnan(_2836) ? _2834 : min(_2836, _2834));
        float _2841 = (_2837 * _2077) + _2066;
        float _2842 = (_2837 * _2080) + _2070;
        float _2843 = (_2837 * _2083) + _2074;
        float _2844 = _2837 * 9.9999997473787516355514526367188e-05;
        float _2845 = (-1.0) - _2844;
        float _2847 = _2844 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2843 > _2847) || ((_2843 < _2845) || ((_2842 > _2847) || ((_2842 < _2845) || ((_2841 < _2845) || (_2841 > _2847))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2843, cbModelParam._m0[17u].z, fma(_2842, cbModelParam._m0[17u].y, _2841 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2843, cbModelParam._m0[18u].z, fma(_2842, cbModelParam._m0[18u].y, _2841 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2843, cbModelParam._m0[19u].z, fma(_2842, cbModelParam._m0[19u].y, _2841 * cbModelParam._m0[19u].x))), _2013);
            frontier_phi_22_47_ladder = _2961.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2961.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2961.x * cbModelParam._m0[1u].z;
        }
        _2102 = frontier_phi_22_47_ladder_2;
        _2104 = frontier_phi_22_47_ladder_1;
        _2106 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1117, _1118, _1119), _2013);
        _2102 = _2086.x * cbModelParam._m0[1u].z;
        _2104 = _2086.y * cbModelParam._m0[1u].z;
        _2106 = _2086.z * cbModelParam._m0[1u].z;
    }
    float _2118 = ((((1.0 - _1138) * ((_1125 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1138 * _1125)) * _1109;
    float _2119 = _2118 * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2120 = _2118 * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2121 = _2118 * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2124 = fma(_2121, cbSceneParam._m0[89u].z, fma(_2120, cbSceneParam._m0[89u].y, _2119 * cbSceneParam._m0[89u].x));
    float _2127 = fma(_2121, cbSceneParam._m0[90u].z, fma(_2120, cbSceneParam._m0[90u].y, _2119 * cbSceneParam._m0[90u].x));
    float _2130 = fma(_2121, cbSceneParam._m0[91u].z, fma(_2120, cbSceneParam._m0[91u].y, _2119 * cbSceneParam._m0[91u].x));
    float _2164 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2168 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2172 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2176 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2177 = _2164 / _2176;
    float _2178 = _2168 / _2176;
    float _2179 = _2172 / _2176;
    float _2326;
    float _2327;
    float _2328;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2206 = ((uint(_2179 > cbSceneParam._m0[59u].y) + uint(_2179 > cbSceneParam._m0[59u].x)) + uint(_2179 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2207 = _2206 + 43u;
        uint _2215 = _2206 + 44u;
        uint _2223 = _2206 + 45u;
        uint _2231 = _2206 + 46u;
        float _2242 = fma(_2176, cbSceneParam._m0[_2207].w, fma(_2172, cbSceneParam._m0[_2207].z, fma(_2168, cbSceneParam._m0[_2207].y, _2164 * cbSceneParam._m0[_2207].x)));
        float _2246 = fma(_2176, cbSceneParam._m0[_2215].w, fma(_2172, cbSceneParam._m0[_2215].z, fma(_2168, cbSceneParam._m0[_2215].y, _2164 * cbSceneParam._m0[_2215].x)));
        float _2254 = fma(_2176, cbSceneParam._m0[_2231].w, fma(_2172, cbSceneParam._m0[_2231].z, fma(_2168, cbSceneParam._m0[_2231].y, _2164 * cbSceneParam._m0[_2231].x)));
        float _2259 = cbSceneParam._m0[33u].z * _2254;
        float _2261 = cbSceneParam._m0[33u].w * _2254;
        float _2264 = fma(_2176, cbSceneParam._m0[_2223].w, fma(_2172, cbSceneParam._m0[_2223].z, fma(_2168, cbSceneParam._m0[_2223].y, _2164 * cbSceneParam._m0[_2223].x))) / _2254;
        float _2312 = (cbSceneParam._m0[33u].x - sqrt(((_2178 * _2178) + (_2177 * _2177)) + (_2179 * _2179))) * cbSceneParam._m0[33u].y;
        float _4642 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2319 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2259 + _2242) / _2254, (_2261 + _2246) / _2254), _2264), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2261 + _2242) / _2254, (_2246 - _2259) / _2254), _2264), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2242 - _2259) / _2254, (_2246 - _2261) / _2254), _2264), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2242 - _2261) / _2254, (_2259 + _2246) / _2254), _2264), 0.0)).x), vec4(0.25)));
        _2326 = 1.0 - (_2319 * cbSceneParam._m0[34u].x);
        _2327 = 1.0 - (_2319 * cbSceneParam._m0[34u].y);
        _2328 = 1.0 - (_2319 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2326 = 1.0;
        _2327 = 1.0;
        _2328 = 1.0;
    }
    float _2392;
    float _2394;
    float _2396;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2380 = fma(_2176, cbSceneParam._m0[63u].w, fma(_2172, cbSceneParam._m0[63u].z, fma(_2168, cbSceneParam._m0[63u].y, _2164 * cbSceneParam._m0[63u].x)));
        float _2381 = fma(_2176, cbSceneParam._m0[60u].w, fma(_2172, cbSceneParam._m0[60u].z, fma(_2168, cbSceneParam._m0[60u].y, _2164 * cbSceneParam._m0[60u].x))) / _2380;
        float _2382 = fma(_2176, cbSceneParam._m0[61u].w, fma(_2172, cbSceneParam._m0[61u].z, fma(_2168, cbSceneParam._m0[61u].y, _2164 * cbSceneParam._m0[61u].x))) / _2380;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2381 >= cbSceneParam._m0[64u].x) && (_2382 >= cbSceneParam._m0[64u].y)) && (_2381 <= cbSceneParam._m0[64u].z)) && (_2382 <= cbSceneParam._m0[64u].w))
        {
            float _2520 = fma(_2176, cbSceneParam._m0[62u].w, fma(_2172, cbSceneParam._m0[62u].z, fma(_2168, cbSceneParam._m0[62u].y, _2164 * cbSceneParam._m0[62u].x))) / _2380;
            float _2524 = isnan(cbSceneParam._m0[41u].w) ? _2520 : (isnan(_2520) ? cbSceneParam._m0[41u].w : max(_2520, cbSceneParam._m0[41u].w));
            float _2567 = (cbSceneParam._m0[33u].x - sqrt(((_2178 * _2178) + (_2177 * _2177)) + (_2179 * _2179))) * cbSceneParam._m0[33u].y;
            float _4658 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
            float _2574 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2381, cbSceneParam._m0[33u].w + _2382), _2524), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2381, _2382 - cbSceneParam._m0[33u].z), _2524), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2381 - cbSceneParam._m0[33u].z, _2382 - cbSceneParam._m0[33u].w), _2524), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2381 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2382), _2524), 0.0)).x), vec4(0.25)));
            float _2578 = 1.0 - (_2574 * cbSceneParam._m0[34u].x);
            float _2579 = 1.0 - (_2574 * cbSceneParam._m0[34u].y);
            float _2580 = 1.0 - (_2574 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2580) ? _2328 : (isnan(_2328) ? _2580 : min(_2328, _2580));
            frontier_phi_34_33_ladder_1 = isnan(_2579) ? _2327 : (isnan(_2327) ? _2579 : min(_2327, _2579));
            frontier_phi_34_33_ladder_2 = isnan(_2578) ? _2326 : (isnan(_2326) ? _2578 : min(_2326, _2578));
        }
        else
        {
            frontier_phi_34_33_ladder = _2328;
            frontier_phi_34_33_ladder_1 = _2327;
            frontier_phi_34_33_ladder_2 = _2326;
        }
        _2392 = frontier_phi_34_33_ladder_2;
        _2394 = frontier_phi_34_33_ladder_1;
        _2396 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2392 = _2326;
        _2394 = _2327;
        _2396 = _2328;
    }
    uvec4 _2401 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2403 = _2401.x * 14u;
    uint _2404 = _2403 + 13u;
    float _2411 = _1109 + (-1.0);
    float _2416 = (cbLight._m0[_2404].x * _2411) + 1.0;
    float _2417 = (cbLight._m0[_2404].y * _2411) + 1.0;
    float _2418 = (cbLight._m0[_2404].z * _2411) + 1.0;
    float _2419 = (cbLight._m0[_2404].w * _2411) + 1.0;
    uint _2420 = _2403 + 5u;
    float _2426 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
    uint _2430 = _2403 + 4u;
    float _2439 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
    uint _2443 = _2403 | 1u;
    float _2454 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_959, _960, _961));
    float _2457 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_959, _960, _961));
    float _4694 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _4705 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2462 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * 0.3183098733425140380859375;
    float _2464 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * 0.3183098733425140380859375;
    float _2471 = ((cbLight._m0[_2420].x * _2426) * _2464) + (((cbLight._m0[_2430].x * _2392) * _2439) * _2462);
    float _2472 = ((_2426 * cbLight._m0[_2420].y) * _2464) + (((cbLight._m0[_2430].y * _2394) * _2439) * _2462);
    float _2473 = ((_2426 * cbLight._m0[_2420].z) * _2464) + (((cbLight._m0[_2430].z * _2396) * _2439) * _2462);
    uvec4 _2477 = floatBitsToUint(cbLight._m0[_2403 + 12u]);
    bool _2479 = _2477.x == 0u;
    float _2581;
    float _2583;
    float _2585;
    if (_2479)
    {
        _2581 = _2471;
        _2583 = _2472;
        _2585 = _2473;
    }
    else
    {
        uint _2589 = _2403 + 6u;
        float _2605 = (dot(vec3(cbLight._m0[_2403 + 2u].xyz), vec3(_959, _960, _961)) * 0.5) + 0.5;
        float _2606 = _2605 * _2605;
        float _4716 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2607 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2608 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2581 = (((cbLight._m0[_2589].x * 0.3183098733425140380859375) * _2607) * _2608) + _2471;
        _2583 = (((cbLight._m0[_2589].y * 0.3183098733425140380859375) * _2607) * _2608) + _2472;
        _2585 = (((cbLight._m0[_2589].z * 0.3183098733425140380859375) * _2607) * _2608) + _2473;
    }
    bool _2588 = _2477.y == 0u;
    float _2643;
    float _2645;
    float _2647;
    if (_2588)
    {
        _2643 = _2581;
        _2645 = _2583;
        _2647 = _2585;
    }
    else
    {
        uint _2805 = _2403 + 7u;
        float _2821 = (dot(vec3(cbLight._m0[_2403 + 3u].xyz), vec3(_959, _960, _961)) * 0.5) + 0.5;
        float _2822 = _2821 * _2821;
        float _4732 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2823 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2824 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
        _2643 = (((cbLight._m0[_2805].x * 0.3183098733425140380859375) * _2823) * _2824) + _2581;
        _2645 = (((cbLight._m0[_2805].y * 0.3183098733425140380859375) * _2823) * _2824) + _2583;
        _2647 = (((cbLight._m0[_2805].z * 0.3183098733425140380859375) * _2823) * _2824) + _2585;
    }
    uint _2650 = _2403 + 8u;
    float _2663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _962) * 0.949999988079071044921875);
    float _2664 = _2663 * _2663;
    float _2665 = cbLight._m0[_2403].x + _1038;
    float _2666 = cbLight._m0[_2403].y + _1039;
    float _2667 = cbLight._m0[_2403].z + _1040;
    float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
    float _2672 = _2671 * _2665;
    float _2673 = _2671 * _2666;
    float _2674 = _2671 * _2667;
    float _2675 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2403].xyz));
    float _4748 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2678 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _4759 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _2679 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2680 = dot(vec3(_959, _960, _961), vec3(_2672, _2673, _2674));
    float _4770 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2683 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _2684 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2672, _2673, _2674));
    float _4781 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2688 = _2664 * _2664;
    float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
    float _2703 = (exp2(log2(1.0 - (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2704 = 1.0 - _2664;
    float _2715 = (0.5 / (((_2679 * ((_2678 * _2704) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2679 * _2704) + _2664) * _2678))) * _2678;
    float _4792 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2717 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
    uint _2731 = _2403 + 9u;
    float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _962) * 0.949999988079071044921875);
    float _2743 = _2742 * _2742;
    float _2744 = cbLight._m0[_2443].x + _1038;
    float _2745 = cbLight._m0[_2443].y + _1039;
    float _2746 = cbLight._m0[_2443].z + _1040;
    float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
    float _2751 = _2750 * _2744;
    float _2752 = _2750 * _2745;
    float _2753 = _2750 * _2746;
    float _2754 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2443].xyz));
    float _4803 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2757 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
    float _2758 = dot(vec3(_959, _960, _961), vec3(_2751, _2752, _2753));
    float _4814 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2761 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
    float _2762 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2751, _2752, _2753));
    float _4825 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2766 = _2743 * _2743;
    float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
    float _2779 = (exp2(log2(1.0 - (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2780 = 1.0 - _2743;
    float _2790 = (0.5 / (((_2679 * ((_2757 * _2780) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2679 * _2780) + _2743) * _2757))) * _2757;
    float _4836 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2792 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
    float _2802 = (((_2779 * cbLight._m0[_2731].x) * _2792) * _2426) + ((((cbLight._m0[_2650].x * _2392) * _2703) * _2717) * _2439);
    float _2803 = (((_2779 * cbLight._m0[_2731].y) * _2792) * _2426) + ((((cbLight._m0[_2650].y * _2394) * _2703) * _2717) * _2439);
    float _2804 = (((_2779 * cbLight._m0[_2731].z) * _2792) * _2426) + ((((cbLight._m0[_2650].z * _2396) * _2703) * _2717) * _2439);
    float _2860;
    float _2862;
    float _2864;
    if (_2479)
    {
        _2860 = _2802;
        _2862 = _2803;
        _2864 = _2804;
    }
    else
    {
        uint _2866 = _2403 + 2u;
        uint _2870 = _2403 + 10u;
        float _2884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2866].w)) * _962) * 0.949999988079071044921875);
        float _2885 = _2884 * _2884;
        float _2886 = cbLight._m0[_2866].x + _1038;
        float _2887 = cbLight._m0[_2866].y + _1039;
        float _2888 = cbLight._m0[_2866].z + _1040;
        float _2892 = inversesqrt(dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888)));
        float _2893 = _2892 * _2886;
        float _2894 = _2892 * _2887;
        float _2895 = _2892 * _2888;
        float _2896 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2866].xyz));
        float _4847 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2899 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2900 = dot(vec3(_959, _960, _961), vec3(_2893, _2894, _2895));
        float _4858 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2903 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2904 = dot(vec3(cbLight._m0[_2866].xyz), vec3(_2893, _2894, _2895));
        float _4869 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2908 = _2885 * _2885;
        float _2912 = ((_2903 * _2903) * (_2908 + (-1.0))) + 1.0;
        float _2921 = (exp2(log2(1.0 - (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2922 = 1.0 - _2885;
        float _2932 = (0.5 / (((_2679 * ((_2899 * _2922) + _2885)) + 9.9999999392252902907785028219223e-09) + (((_2679 * _2922) + _2885) * _2899))) * _2899;
        float _4880 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2934 = (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2908 / ((_2912 * _2912) * 3.141590118408203125));
        float _2935 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2860 = (((_2921 * cbLight._m0[_2870].x) * _2934) * _2935) + _2802;
        _2862 = (((_2921 * cbLight._m0[_2870].y) * _2934) * _2935) + _2803;
        _2864 = (((_2921 * cbLight._m0[_2870].z) * _2934) * _2935) + _2804;
    }
    float _2966;
    float _2968;
    float _2970;
    if (_2588)
    {
        _2966 = _2860;
        _2968 = _2862;
        _2970 = _2864;
    }
    else
    {
        uint _2977 = _2403 + 3u;
        uint _2981 = _2403 + 11u;
        float _2995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2977].w)) * _962) * 0.949999988079071044921875);
        float _2996 = _2995 * _2995;
        float _2997 = cbLight._m0[_2977].x + _1038;
        float _2998 = cbLight._m0[_2977].y + _1039;
        float _2999 = cbLight._m0[_2977].z + _1040;
        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
        float _3004 = _3003 * _2997;
        float _3005 = _3003 * _2998;
        float _3006 = _3003 * _2999;
        float _3007 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2977].xyz));
        float _4896 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3010 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
        float _3011 = dot(vec3(_959, _960, _961), vec3(_3004, _3005, _3006));
        float _4907 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3014 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
        float _3015 = dot(vec3(cbLight._m0[_2977].xyz), vec3(_3004, _3005, _3006));
        float _4918 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        float _3019 = _2996 * _2996;
        float _3023 = ((_3014 * _3014) * (_3019 + (-1.0))) + 1.0;
        float _3032 = (exp2(log2(1.0 - (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3033 = 1.0 - _2996;
        float _3043 = (0.5 / (((_2679 * ((_3010 * _3033) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_2679 * _3033) + _2996) * _3010))) * _3010;
        float _4929 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3045 = (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_3019 / ((_3023 * _3023) * 3.141590118408203125));
        float _3046 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
        _2966 = (((_3032 * cbLight._m0[_2981].x) * _3045) * _3046) + _2860;
        _2968 = (((_3032 * cbLight._m0[_2981].y) * _3045) * _3046) + _2862;
        _2970 = (((_3032 * cbLight._m0[_2981].z) * _3045) * _3046) + _2864;
    }
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    if (_2401.y == 0u)
    {
        uvec4 _3067 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3068 = _3067.x;
        uint _3079 = uint((float(_3067.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1047) / _3068))) + floor(float(uint(cbSceneParam._m0[85u].x * _1046) / _3068)));
        float _3089 = (log2(_2179 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3090 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
        uint _3093 = uint(isnan(14.0) ? _3090 : (isnan(_3090) ? 14.0 : min(_3090, 14.0)));
        uvec4 _3098 = texelFetch(g_lightClusterGridBuffer, int(((_3093 << 2u) + (_3079 << 6u)) >> 2u));
        uint _3099 = _3098.x;
        uint _3100 = _3067.z;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((((1u << ((_3100 >> 4u) & 15u)) + 4294967295u) & _3099) == 0u) || ((_3100 & 240u) == 0u))
        {
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
        }
        else
        {
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3188;
            float _3190;
            float _3323 = 0.0;
            float _3324 = 0.0;
            float _3325 = 0.0;
            float _3326 = 0.0;
            float _3327 = 0.0;
            float _3328 = 0.0;
            uint _3329 = 0u;
            uint _3338;
            bool _3339;
            for (;;)
            {
                _3338 = texelFetch(g_lightClassification, int((((_3093 << 5u) + (_3079 << 9u)) + (_3329 << 2u)) >> 2u)).x;
                _3339 = _3338 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3339)
                {
                    frontier_phi_66_pred = _3328;
                    frontier_phi_66_pred_1 = _3327;
                    frontier_phi_66_pred_2 = _3326;
                    frontier_phi_66_pred_3 = _3325;
                    frontier_phi_66_pred_4 = _3324;
                    frontier_phi_66_pred_5 = _3323;
                }
                else
                {
                    float _3447;
                    float _3448;
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    uint _3453;
                    _3447 = _3323;
                    _3448 = _3324;
                    _3449 = _3325;
                    _3450 = _3326;
                    _3451 = _3327;
                    _3452 = _3328;
                    _3453 = _3338;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    for (;;)
                    {
                        uint _3457 = uint(findLSB(_3453)) + (_3329 << 5u);
                        uint _3454 = (_3453 + 4294967295u) & _3453;
                        uint _3459 = _3457 * 48u;
                        vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3459)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 3u)).x));
                        uint _3479 = (_3457 * 48u) + 4u;
                        vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3479)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 3u)).x));
                        uint _3498 = (_3457 * 48u) + 8u;
                        vec3 _3509 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3498)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 2u)).x));
                        float _3513 = _3473.x - _2177;
                        float _3514 = _3473.y - _2178;
                        float _3515 = _3473.z - _2179;
                        float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                        float _3519 = inversesqrt(_3516);
                        float _3520 = _3519 * _3513;
                        float _3521 = _3519 * _3514;
                        float _3522 = _3519 * _3515;
                        float _3523 = dot(vec3(_1065, _1068, _1071), vec3(_3520, _3521, _3522));
                        float _3528 = 1.0 - (_3516 * _3473.w);
                        float _4955 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3529 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3530 = sqrt(_3516) * _3492.w;
                        float _3533 = 1.39999997615814208984375 / (_3530 + 1.39999997615814208984375);
                        float _3534 = _3533 * _3533;
                        float _3537 = ((1.0 - _3534) * _3523) + _3534;
                        float _3540 = _3530 * _3530;
                        float _3544 = ((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3529) / ((_3540 * 0.699999988079071044921875) + 1.0);
                        float _3548 = (-0.0) - _2177;
                        float _3549 = (-0.0) - _2178;
                        float _3550 = (-0.0) - _2179;
                        float _3554 = inversesqrt(dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550)));
                        float _3555 = _3554 * _3548;
                        float _3556 = _3554 * _3549;
                        float _3557 = _3554 * _3550;
                        float _3564 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                        float _3565 = 1.0 - _1125;
                        float _3572 = sqrt(1.0 - ((1.0 - (_3565 * _3565)) * (1.0 - (_3564 * _3564))));
                        float _3573 = _3572 * _3572;
                        float _3574 = _3573 * _3573;
                        float _3575 = _3555 + _3520;
                        float _3576 = _3556 + _3521;
                        float _3577 = _3557 + _3522;
                        float _3581 = inversesqrt(dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577)));
                        float _3585 = dot(vec3(_1065, _1068, _1071), vec3(_3555, _3556, _3557));
                        float _4971 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3588 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3589 = dot(vec3(_1065, _1068, _1071), vec3(_3581 * _3575, _3581 * _3576, _3581 * _3577));
                        float _4982 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3592 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                        float _3596 = ((_3592 * _3592) * (_3574 + (-1.0))) + 1.0;
                        float _3597 = _3533 * _3573;
                        float _3598 = _3597 * _3597;
                        float _3601 = ((1.0 - _3598) * _3523) + _3598;
                        float _4993 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                        float _3602 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                        float _3603 = 1.0 - _3573;
                        float _3613 = (0.5 / (((_3602 * ((_3588 * _3603) + _3573)) + 9.9999999392252902907785028219223e-09) + (((_3602 * _3603) + _3573) * _3588))) * _3602;
                        float _5004 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                        float _3624 = (((_3574 * 3.1415927410125732421875) * (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0)))) / ((_3596 * _3596) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125))) * _3529;
                        _3382 = (_3544 * _3492.x) + _3450;
                        _3383 = (_3544 * _3492.y) + _3451;
                        _3384 = (_3544 * _3492.z) + _3452;
                        _3379 = (_3624 * _3509.x) + _3447;
                        _3380 = (_3624 * _3509.y) + _3448;
                        _3381 = (_3624 * _3509.z) + _3449;
                        if (_3454 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3447 = _3379;
                            _3448 = _3380;
                            _3449 = _3381;
                            _3450 = _3382;
                            _3451 = _3383;
                            _3452 = _3384;
                            _3453 = _3454;
                        }
                    }
                    frontier_phi_66_pred = _3384;
                    frontier_phi_66_pred_1 = _3383;
                    frontier_phi_66_pred_2 = _3382;
                    frontier_phi_66_pred_3 = _3381;
                    frontier_phi_66_pred_4 = _3380;
                    frontier_phi_66_pred_5 = _3379;
                }
                _3190 = frontier_phi_66_pred;
                _3188 = frontier_phi_66_pred_1;
                _3186 = frontier_phi_66_pred_2;
                _3184 = frontier_phi_66_pred_3;
                _3182 = frontier_phi_66_pred_4;
                _3180 = frontier_phi_66_pred_5;
                uint _3330 = _3329 + 1u;
                if (_3330 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3323 = _3180;
                    _3324 = _3182;
                    _3325 = _3184;
                    _3326 = _3186;
                    _3327 = _3188;
                    _3328 = _3190;
                    _3329 = _3330;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
        }
        uvec4 _3193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3194 = _3193.z;
        uint _3196 = (_3194 >> 8u) & 15u;
        float _3291;
        float _3293;
        float _3295;
        float _3297;
        float _3299;
        float _3301;
        if (((4294967295u << _3196) & _3099) == 0u)
        {
            _3291 = _3179;
            _3293 = _3181;
            _3295 = _3183;
            _3297 = _3185;
            _3299 = _3187;
            _3301 = _3189;
        }
        else
        {
            float _3316 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
            float _3317 = _3316 * _2177;
            float _3318 = _3316 * _2178;
            float _3319 = _3316 * _2179;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3196 < ((_3194 >> 12u) & 15u))
            {
                float _3292;
                float _3294;
                float _3296;
                float _3298;
                float _3300;
                float _3302;
                float _3430 = _3179;
                float _3431 = _3181;
                float _3432 = _3183;
                float _3433 = _3185;
                float _3434 = _3187;
                float _3435 = _3189;
                uint _3436 = _3196;
                uint _3445;
                bool _3446;
                for (;;)
                {
                    _3445 = texelFetch(g_lightClassification, int((((_3093 << 5u) + (_3079 << 9u)) + (_3436 << 2u)) >> 2u)).x;
                    _3446 = _3445 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3446)
                    {
                        frontier_phi_72_pred = _3435;
                        frontier_phi_72_pred_1 = _3434;
                        frontier_phi_72_pred_2 = _3433;
                        frontier_phi_72_pred_3 = _3432;
                        frontier_phi_72_pred_4 = _3431;
                        frontier_phi_72_pred_5 = _3430;
                    }
                    else
                    {
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3927;
                        float _3642 = _3430;
                        float _3643 = _3431;
                        float _3644 = _3432;
                        float _3645 = _3433;
                        float _3646 = _3434;
                        float _3647 = _3435;
                        uint _3648 = _3445;
                        uint _3649;
                        vec4 _3674;
                        float _3675;
                        vec4 _3690;
                        vec3 _3702;
                        vec4 _3717;
                        vec4 _3732;
                        float _3778;
                        bool _3779;
                        for (;;)
                        {
                            uint _3659 = ((_3436 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3648));
                            _3649 = (_3648 + 4294967295u) & _3648;
                            uint _3661 = _3659 * 40u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            _3675 = _3674.w;
                            uint _3677 = (_3659 * 40u) + 4u;
                            _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            uint _3692 = (_3659 * 40u) + 8u;
                            _3702 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x));
                            uint _3704 = (_3659 * 40u) + 16u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3719 = (_3659 * 40u) + 20u;
                            _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3734 = (_3659 * 40u) + 24u;
                            vec4 _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            uint _3753 = (_3659 * 40u) + 28u;
                            vec4 _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            _3778 = fma(_2179, _3766.z, fma(_2178, _3766.y, _3766.x * _2177)) + _3766.w;
                            _3779 = !((fma(_2179, _3747.z, fma(_2178, _3747.y, _3747.x * _2177)) + _3747.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3779)
                            {
                                float _3806 = _3674.x - _2177;
                                float _3807 = _3674.y - _2178;
                                float _3808 = _3674.z - _2179;
                                float _3809 = dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808));
                                float _3812 = inversesqrt(_3809);
                                float _3813 = _3812 * _3806;
                                float _3814 = _3812 * _3807;
                                float _3815 = _3812 * _3808;
                                float _3819 = 1.0 - (_3809 / (_3675 * _3675));
                                float _5015 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3820 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3824 = sqrt(_3809) * _3690.w;
                                float _3826 = 1.39999997615814208984375 / (_3824 + 1.39999997615814208984375);
                                float _3827 = _3826 * _3826;
                                float _3830 = ((1.0 - _3827) * dot(vec3(_3813, _3814, _3815), vec3(_1065, _1068, _1071))) + _3827;
                                float _3833 = _3824 * _3824;
                                float _3837 = (fma(_2179, _3717.z, fma(_2178, _3717.y, _3717.x * _2177)) + _3717.w) / _3778;
                                float _3838 = (fma(_2179, _3732.z, fma(_2178, _3732.y, _3732.x * _2177)) + _3732.w) / _3778;
                                float _3842 = 1.0 - dot(vec2(_3837, _3838), vec2(_3837, _3838));
                                float _5031 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3843 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3844 = _3843 * (((isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0))) * _3820) / ((_3833 * 0.699999988079071044921875) + 1.0));
                                float _3856 = exp2(log2(1.0 / ((_3833 * 3.5) + 5.0)) * 0.25);
                                float _3857 = 1.0 - _1125;
                                float _3864 = sqrt(1.0 - ((1.0 - (_3857 * _3857)) * (1.0 - (_3856 * _3856))));
                                float _3865 = _3864 * _3864;
                                float _3866 = _3865 * _3865;
                                float _3867 = _3813 - _3317;
                                float _3868 = _3814 - _3318;
                                float _3869 = _3815 - _3319;
                                float _3873 = inversesqrt(dot(vec3(_3867, _3868, _3869), vec3(_3867, _3868, _3869)));
                                float _3877 = dot(vec3(_1065, _1068, _1071), vec3((-0.0) - _3317, (-0.0) - _3318, (-0.0) - _3319));
                                float _5042 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3880 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                                float _3881 = dot(vec3(_1065, _1068, _1071), vec3(_3873 * _3867, _3873 * _3868, _3873 * _3869));
                                float _5053 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3884 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                                float _3888 = ((_3884 * _3884) * (_3866 + (-1.0))) + 1.0;
                                float _3889 = _3826 * _3865;
                                float _3890 = _3889 * _3889;
                                float _3896 = ((1.0 - _3890) * dot(vec3(_1065, _1068, _1071), vec3(_3813, _3814, _3815))) + _3890;
                                float _5064 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3897 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                                float _3898 = 1.0 - _3865;
                                float _3908 = (0.5 / (((_3897 * ((_3880 * _3898) + _3865)) + 9.9999999392252902907785028219223e-09) + (((_3897 * _3898) + _3865) * _3880))) * _3897;
                                float _5075 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3918 = (_3843 * _3820) * (((_3866 * 3.1415927410125732421875) * (isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0)))) / ((_3888 * _3888) * ((_3833 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3844 * _3690.y;
                                frontier_phi_78_pred_1 = _3844 * _3690.x;
                                frontier_phi_78_pred_2 = _3918 * _3702.z;
                                frontier_phi_78_pred_3 = _3918 * _3702.y;
                                frontier_phi_78_pred_4 = _3918 * _3702.x;
                                frontier_phi_78_pred_5 = _3844 * _3690.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3926 = frontier_phi_78_pred;
                            _3925 = frontier_phi_78_pred_1;
                            _3924 = frontier_phi_78_pred_2;
                            _3923 = frontier_phi_78_pred_3;
                            _3922 = frontier_phi_78_pred_4;
                            _3927 = frontier_phi_78_pred_5;
                            _3632 = _3925 + _3645;
                            _3633 = _3926 + _3646;
                            _3634 = _3927 + _3647;
                            _3629 = _3922 + _3642;
                            _3630 = _3923 + _3643;
                            _3631 = _3924 + _3644;
                            if (_3649 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3649;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3634;
                        frontier_phi_72_pred_1 = _3633;
                        frontier_phi_72_pred_2 = _3632;
                        frontier_phi_72_pred_3 = _3631;
                        frontier_phi_72_pred_4 = _3630;
                        frontier_phi_72_pred_5 = _3629;
                    }
                    _3302 = frontier_phi_72_pred;
                    _3300 = frontier_phi_72_pred_1;
                    _3298 = frontier_phi_72_pred_2;
                    _3296 = frontier_phi_72_pred_3;
                    _3294 = frontier_phi_72_pred_4;
                    _3292 = frontier_phi_72_pred_5;
                    uint _3437 = _3436 + 1u;
                    if (_3437 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3430 = _3292;
                        _3431 = _3294;
                        _3432 = _3296;
                        _3433 = _3298;
                        _3434 = _3300;
                        _3435 = _3302;
                        _3436 = _3437;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3302;
                frontier_phi_60_61_ladder_1 = _3300;
                frontier_phi_60_61_ladder_2 = _3296;
                frontier_phi_60_61_ladder_3 = _3294;
                frontier_phi_60_61_ladder_4 = _3292;
                frontier_phi_60_61_ladder_5 = _3298;
            }
            else
            {
                frontier_phi_60_61_ladder = _3189;
                frontier_phi_60_61_ladder_1 = _3187;
                frontier_phi_60_61_ladder_2 = _3183;
                frontier_phi_60_61_ladder_3 = _3181;
                frontier_phi_60_61_ladder_4 = _3179;
                frontier_phi_60_61_ladder_5 = _3185;
            }
            _3291 = frontier_phi_60_61_ladder_4;
            _3293 = frontier_phi_60_61_ladder_3;
            _3295 = frontier_phi_60_61_ladder_2;
            _3297 = frontier_phi_60_61_ladder_5;
            _3299 = frontier_phi_60_61_ladder_1;
            _3301 = frontier_phi_60_61_ladder;
        }
        float _3306 = isnan(1.0) ? _1109 : (isnan(_1109) ? 1.0 : min(_1109, 1.0));
        _3112 = (_3306 * _3297) + _2643;
        _3114 = (_3306 * _3299) + _2645;
        _3116 = (_3306 * _3301) + _2647;
        _3118 = ((_3291 * 0.039999999105930328369140625) * _3306) + _2966;
        _3120 = ((_3293 * 0.039999999105930328369140625) * _3306) + _2968;
        _3122 = ((_3295 * 0.039999999105930328369140625) * _3306) + _2970;
    }
    else
    {
        _3112 = _2643;
        _3114 = _2645;
        _3116 = _2647;
        _3118 = _2966;
        _3120 = _2968;
        _3122 = _2970;
    }
    float _5091 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _5102 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _5113 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    uint _3142 = _285 + 6u;
    float _3150 = _1046 / cbSceneParam._m0[86u].x;
    float _3151 = _1047 / cbSceneParam._m0[86u].y;
    vec4 _3165 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3150, _3151, (log2((isnan(cbSceneParam._m0[77u].w) ? _980 : (isnan(_980) ? cbSceneParam._m0[77u].w : min(_980, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3167 = _3165.x;
    float _3168 = _3165.y;
    float _3169 = _3165.z;
    float _3170 = _3165.w;
    float _3241;
    float _3243;
    float _3245;
    float _3247;
    if (_980 > cbSceneParam._m0[78u].w)
    {
        float _3204 = isnan(_980) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _980 : min(cbSceneParam._m0[80u].w, _980));
        float _3205 = _3204 / _980;
        float _3216 = _3205 * _1031;
        float _3217 = _1032 * _3205;
        float _3218 = (-0.0) - _3217;
        float _3219 = _3205 * _1033;
        float _3221 = (cbSceneParam._m0[77u].w * _3218) / _3204;
        float _3222 = _3221 + cbSceneParam._m0[79u].w;
        float _3223 = cbSceneParam._m0[79u].w - _3217;
        float _3229 = sqrt(((_3216 * _3216) + (_3217 * _3217)) + (_3219 * _3219));
        float _3232 = (1.0 - (cbSceneParam._m0[77u].w / _3204)) * _3229;
        float _3237 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3239 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3392;
        if (abs((_3218 - _3221) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3392 = ((((_3222 > 0.0) ? exp2(_3237 * _3222) : (2.0 - exp2(_3239 * _3222))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3232;
        }
        else
        {
            float _3352 = 1.0 / cbSceneParam._m0[80u].x;
            float _3353 = isnan(_3223) ? _3222 : (isnan(_3222) ? _3223 : max(_3222, _3223));
            float _3354 = isnan(_3223) ? _3222 : (isnan(_3222) ? _3223 : min(_3222, _3223));
            float _3363 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : min(_3353, 0.0));
            float _3364 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : min(_3354, 0.0));
            _3392 = ((abs(_3229 / _3218) * cbSceneParam._m0[80u].y) * ((((_3363 - _3364) * 2.0) - ((exp2(_3237 * (isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0)))) - exp2(_3237 * (isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0))))) * _3352)) - ((exp2(_3239 * _3363) - exp2(_3239 * _3364)) * _3352))) + (_3232 * cbSceneParam._m0[80u].z);
        }
        vec4 _3394 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3150, _3151, 1.0), 0.0);
        float _3403 = exp2((_3392 * (-1.44269502162933349609375)) * (1.0 - _3394.w));
        float _3404 = log2(_3403);
        float _3420 = log2(_3170);
        _3241 = (exp2(_3420 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].x)) * _3394.x) / cbSceneParam._m0[78u].x)) + _3167;
        _3243 = (exp2(_3420 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].y)) * _3394.y) / cbSceneParam._m0[78u].y)) + _3168;
        _3245 = (exp2(_3420 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].z)) * _3394.z) / cbSceneParam._m0[78u].z)) + _3169;
        _3247 = _3403 * _3170;
    }
    else
    {
        _3241 = _3167;
        _3243 = _3168;
        _3245 = _3169;
        _3247 = _3170;
    }
    float _3259 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3260 = _3259 == 3.0;
    float _3261 = log2(_3247);
    float _3268 = exp2(_3261 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_3112 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1109))) + ((_3118 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3269 = exp2(_3261 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0))) * (_3114 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1109))) + ((_3120 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3270 = exp2(_3261 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0))) * (_3116 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1109))) + ((_3122 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3279 = (_3259 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3279 * (_3260 ? _3268 : (_3268 + (cbSceneParam._m0[72u].w * _3241)));
    SV_Target.y = _3279 * (_3260 ? _3269 : (_3269 + (cbSceneParam._m0[72u].w * _3243)));
    SV_Target.z = _3279 * (_3260 ? _3270 : (_3270 + (cbSceneParam._m0[72u].w * _3245)));
    SV_Target.w = cbInstanceData._m0[_3142].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3142].w;
}


