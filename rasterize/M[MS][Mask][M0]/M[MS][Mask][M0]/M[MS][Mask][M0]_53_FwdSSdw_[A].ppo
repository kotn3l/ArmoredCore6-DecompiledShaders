#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1259;
float _3644;
float _3645;
float _3646;
float _3647;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3656 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3667 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3678 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _370.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[24u].z) + _419) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3689 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _444 = (_437 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _445 = (_437 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _446 = (_437 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _287) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _288) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _370.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[24u].z) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3700 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    float _523 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _517;
    float _526 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _518;
    float _529 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _519;
    float _536 = ((_517 - _523) * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) + _523;
    float _537 = ((_518 - _526) * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) + _526;
    float _538 = ((_519 - _529) * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) + _529;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _592 = _590.x;
    float _593 = _590.y;
    float _594 = _590.z;
    float _601 = ((_573.x - _592) * _437) + _592;
    float _602 = ((_573.y - _593) * _437) + _593;
    float _603 = ((_573.z - _594) * _437) + _594;
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _287) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _288) + cbTextureTilingScale._m0[2u].w));
    float _628 = ((_615.z - _603) * _510) + _603;
    float _631 = ((((_615.x - _601) * _510) + _601) * 2.0) + (-1.0);
    float _632 = ((((_615.y - _602) * _510) + _602) * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3711 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _670 = (_631 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_550.x * 2.0) + (-1.0)))) + (((_658.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _671 = (_632 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_550.y * 2.0) + (-1.0)))) + (((_658.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _676 = (((_550.z - _628) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _628;
    float _680 = ((_658.z - _676) * cbMtdParam._m0[19u].w) + _676;
    float _682 = cbMtdParam._m0[22u].x + _658.w;
    float _685 = fma(_638, _234 * NORMAL.x, fma(_671, _241 * TANGENT.x, (_227 * _219) * _670));
    float _688 = fma(_638, _234 * NORMAL.y, fma(_671, _241 * TANGENT.y, (_227 * _220) * _670));
    float _691 = fma(_638, _234 * NORMAL.z, fma(_671, _241 * TANGENT.z, (_227 * _221) * _670));
    float _695 = inversesqrt(dot(vec3(_685, _688, _691), vec3(_685, _688, _691)));
    float _696 = _695 * _685;
    float _697 = _695 * _688;
    float _698 = _695 * _691;
    float _3722 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _699 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3744 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3755 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3766 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _717 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _769 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _759);
    float _770 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _759);
    float _771 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _759);
    float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
    float _776 = _769 * _775;
    float _777 = _770 * _775;
    float _778 = _771 * _775;
    vec4 _783 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _785 = _783.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _939 = sqrt(((_769 * _769) + (_770 * _770)) + (_771 * _771));
        float _945 = (cbMatDynParam._m0[5u].x * _939) + cbMatDynParam._m0[5u].y;
        float _3777 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _950 = (cbMatDynParam._m0[5u].z * _939) + cbMatDynParam._m0[5u].w;
        float _3788 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) - _946)) + _946) < ((_785 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _796 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _797 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _815 = fma(_698, cbSceneParam._m0[5u].z, fma(_697, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _696));
    float _818 = fma(_698, cbSceneParam._m0[6u].z, fma(_697, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _696));
    float _821 = fma(_698, cbSceneParam._m0[7u].z, fma(_697, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _696));
    uint _834 = _268 + 9u;
    uint _835 = _834 + uint(cbMatDynParam._m0[0u].w);
    float _841 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * cbInstanceData._m0[_835].x;
    float _842 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_835].y;
    float _843 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_835].z;
    float _3799 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    vec4 _855 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _796, cbSceneParam._m0[86u].y * _797));
    float _859 = ((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * TEXCOORD_5.w) * _855.x;
    float _860 = dot(vec3(_696, _697, _698), vec3(_776, _777, _778));
    float _863 = _860 * 2.0;
    float _867 = (_863 * _696) - _776;
    float _868 = (_863 * _697) - _777;
    float _869 = (_863 * _698) - _778;
    float _873 = abs(dot(vec3(_776, _777, _778), vec3(_696, _697, _698)));
    float _3832 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _875 = sqrt(_699);
    float _888 = exp2((_875 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_875 * 3.0));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1258;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _983 = fma(_928, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920));
        float _987 = fma(_928, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920));
        float _991 = fma(_928, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920));
        float _1016 = _920 + _696;
        float _1017 = _924 + _697;
        float _1018 = _928 + _698;
        float _1028 = fma(_1018, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016)) - _983;
        float _1029 = fma(_1018, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016)) - _987;
        float _1030 = fma(_1018, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016)) - _991;
        float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
        float _1047 = ((_1034 * _1028) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_983 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1034 * _1029) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_987 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1034 * _1030) / cbModelParam._m0[34u].z) + ((((((_991 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        float _1086 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1052.x + (-0.5));
        float _1088 = _1086 * (_1052.y + (-0.5));
        float _1089 = _1086 * (_1052.z + (-0.5));
        float _1096 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1059.x + (-0.5));
        float _1098 = _1096 * (_1059.y + (-0.5));
        float _1099 = _1096 * (_1059.z + (-0.5));
        float _1106 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1066.x + (-0.5));
        float _1108 = _1106 * (_1066.y + (-0.5));
        float _1109 = _1106 * (_1066.z + (-0.5));
        float _1116 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1073.x + (-0.5));
        float _1118 = _1116 * (_1073.y + (-0.5));
        float _1119 = _1116 * (_1073.z + (-0.5));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = _1087 * 0.5;
        float _1124 = _1097 * 0.5;
        float _1125 = _1107 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1140 = (dot(vec3(_696, _697, _698), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1150 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3880 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1152 + 1.0))) + _1157) * _1120;
        float _1167 = _1088 * 0.5;
        float _1168 = _1098 * 0.5;
        float _1169 = _1108 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_696, _697, _698), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3913 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1194 + 1.0))) + _1199) * _1121;
        float _1209 = _1089 * 0.5;
        float _1210 = _1099 * 0.5;
        float _1211 = _1109 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_696, _697, _698), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3946 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1236 + 1.0))) + _1241) * _1122;
        _1258 = _1089;
        _1260 = _1088;
        _1261 = _1087;
        _1262 = _1099;
        _1263 = _1098;
        _1264 = _1097;
        _1265 = _1109;
        _1266 = _1108;
        _1267 = _1107;
        _1268 = _1122;
        _1269 = _1121;
        _1270 = _1120;
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
    }
    else
    {
        _1258 = _1259;
        _1260 = _1259;
        _1261 = _1259;
        _1262 = _1259;
        _1263 = _1259;
        _1264 = _1259;
        _1265 = _1259;
        _1266 = _1259;
        _1267 = _1259;
        _1268 = _1259;
        _1269 = _1259;
        _1270 = _1259;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1300 = fma(_928, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920));
        float _1304 = fma(_928, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920));
        float _1308 = fma(_928, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920));
        float _1331 = _920 + _696;
        float _1332 = _924 + _697;
        float _1333 = _928 + _698;
        float _1343 = fma(_1333, cbModelParam._m0[30u].z, fma(_1332, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1331)) - _1300;
        float _1344 = fma(_1333, cbModelParam._m0[31u].z, fma(_1332, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1331)) - _1304;
        float _1345 = fma(_1333, cbModelParam._m0[32u].z, fma(_1332, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1331)) - _1308;
        float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
        float _1362 = ((_1349 * _1343) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1300 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1349 * _1344) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1304 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1349 * _1345) / cbModelParam._m0[35u].z) + ((((((_1308 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        float _1399 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1366.x + (-0.5));
        float _1401 = _1399 * (_1366.y + (-0.5));
        float _1402 = _1399 * (_1366.z + (-0.5));
        float _1409 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1373.x + (-0.5));
        float _1411 = _1409 * (_1373.y + (-0.5));
        float _1412 = _1409 * (_1373.z + (-0.5));
        float _1419 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1380.x + (-0.5));
        float _1421 = _1419 * (_1380.y + (-0.5));
        float _1422 = _1419 * (_1380.z + (-0.5));
        float _1429 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1387.x + (-0.5));
        float _1431 = _1429 * (_1387.y + (-0.5));
        float _1432 = _1429 * (_1387.z + (-0.5));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = _1400 * 0.5;
        float _1437 = _1410 * 0.5;
        float _1438 = _1420 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_696, _697, _698), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4009 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1463 + 1.0))) + _1468) * _1433;
        float _1478 = _1401 * 0.5;
        float _1479 = _1411 * 0.5;
        float _1480 = _1421 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_696, _697, _698), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4042 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1505 + 1.0))) + _1510) * _1434;
        float _1520 = _1402 * 0.5;
        float _1521 = _1412 * 0.5;
        float _1522 = _1422 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_696, _697, _698), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4075 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1547 + 1.0))) + _1552) * _1435;
        _1569 = _1402;
        _1570 = _1401;
        _1571 = _1400;
        _1572 = _1412;
        _1573 = _1411;
        _1574 = _1410;
        _1575 = _1422;
        _1576 = _1421;
        _1577 = _1420;
        _1578 = _1435;
        _1579 = _1434;
        _1580 = _1433;
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
    }
    else
    {
        _1569 = _1259;
        _1570 = _1259;
        _1571 = _1259;
        _1572 = _1259;
        _1573 = _1259;
        _1574 = _1259;
        _1575 = _1259;
        _1576 = _1259;
        _1577 = _1259;
        _1578 = _1259;
        _1579 = _1259;
        _1580 = _1259;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1271)) + _1271;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1272)) + _1272;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1273)) + _1273;
    float _1616 = fma(_1595, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1595, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1595, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1593));
    float _1637 = _867 * 0.5;
    float _1638 = _868 * 0.5;
    float _1639 = _869 * 0.5;
    float _1640 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1643 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1646 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1680;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1653 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1258, _1262, _1265, _1268));
        float _1657 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1661 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1668 = dot(vec4(cbModelParam._m0[39u]), vec4(_1637, _1638, _1639, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1691;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1682 = dot(vec4(cbModelParam._m0[40u]), vec4(_1637, _1638, _1639, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1695 = (_1691 * cbModelParam._m0[1u].x) + (_1680 * (1.0 - cbModelParam._m0[1u].x));
    float _1705 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _699);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1705 : min(cbModelParam._m0[25u].z, _1705));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1755 = fma(_928, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920)) + cbModelParam._m0[13u].w;
        float _1759 = fma(_928, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920)) + cbModelParam._m0[14u].w;
        float _1763 = fma(_928, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920)) + cbModelParam._m0[15u].w;
        float _1766 = fma(_869, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867));
        float _1769 = fma(_869, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867));
        float _1772 = fma(_869, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867));
        float _1800;
        if (_1766 > 0.0)
        {
            _1800 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1800 = frontier_phi_17_15_ladder;
        }
        float _2023;
        if (_1769 > 0.0)
        {
            _2023 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2023 = frontier_phi_26_22_ladder;
        }
        float _2269;
        if (_1772 > 0.0)
        {
            _2269 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2269 = frontier_phi_38_33_ladder;
        }
        float _2271 = isnan(_2023) ? _1800 : (isnan(_1800) ? _2023 : min(_1800, _2023));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1766) + _1755;
        float _2277 = (_2272 * _1769) + _1759;
        float _2278 = (_2272 * _1772) + _1763;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2279;
        float _2283 = _2279 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 > _2283) || ((_2277 < _2281) || ((_2276 < _2281) || (_2276 > _2283))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2278, cbModelParam._m0[9u].z, fma(_2277, cbModelParam._m0[9u].y, _2276 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2278, cbModelParam._m0[10u].z, fma(_2277, cbModelParam._m0[10u].y, _2276 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2278, cbModelParam._m0[11u].z, fma(_2277, cbModelParam._m0[11u].y, _2276 * cbModelParam._m0[11u].x))), _1706);
            frontier_phi_16_38_ladder = _2402.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2402.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2402.x * cbModelParam._m0[1u].y;
        }
        _1788 = frontier_phi_16_38_ladder_2;
        _1790 = frontier_phi_16_38_ladder_1;
        _1792 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_867, _868, _869), _1706);
        _1788 = _1776.x * cbModelParam._m0[1u].y;
        _1790 = _1776.y * cbModelParam._m0[1u].y;
        _1792 = _1776.z * cbModelParam._m0[1u].y;
    }
    float _1796 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _699);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1796 : min(cbModelParam._m0[25u].w, _1796));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_928, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_928, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_928, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_869, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867));
        float _1866 = fma(_869, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867));
        float _1869 = fma(_869, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867));
        float _2028;
        if (_1863 > 0.0)
        {
            _2028 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2028 = frontier_phi_28_24_ladder;
        }
        float _2296;
        if (_1866 > 0.0)
        {
            _2296 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2296 = frontier_phi_40_35_ladder;
        }
        float _2501;
        if (_1869 > 0.0)
        {
            _2501 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2501 = frontier_phi_49_46_ladder;
        }
        float _2503 = isnan(_2296) ? _2028 : (isnan(_2028) ? _2296 : min(_2028, _2296));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1863) + _1852;
        float _2509 = (_2504 * _1866) + _1856;
        float _2510 = (_2504 * _1869) + _1860;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2510, cbModelParam._m0[17u].z, fma(_2509, cbModelParam._m0[17u].y, _2508 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2510, cbModelParam._m0[18u].z, fma(_2509, cbModelParam._m0[18u].y, _2508 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2510, cbModelParam._m0[19u].z, fma(_2509, cbModelParam._m0[19u].y, _2508 * cbModelParam._m0[19u].x))), _1797);
            frontier_phi_25_49_ladder = _2709.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2709.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2709.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_25_49_ladder_2;
        _1890 = frontier_phi_25_49_ladder_1;
        _1892 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_867, _868, _869), _1797);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1904 = ((((1.0 - _888) * ((_875 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_888 * _875)) * _859;
    float _1905 = _1904 * ((cbModelParam._m0[1u].w * (_1888 - _1788)) + _1788);
    float _1906 = _1904 * ((cbModelParam._m0[1u].w * (_1890 - _1790)) + _1790);
    float _1907 = _1904 * ((cbModelParam._m0[1u].w * (_1892 - _1792)) + _1792);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    vec4 _1924 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_796, _797));
    float _1926 = _1924.w;
    float _1938 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1926);
    float _1939 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1926);
    float _1940 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1926);
    uvec4 _1944 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1946 = _1944.x * 14u;
    uint _1947 = _1946 + 13u;
    float _1954 = _859 + (-1.0);
    float _1959 = (cbLight._m0[_1947].x * _1954) + 1.0;
    float _1960 = (cbLight._m0[_1947].y * _1954) + 1.0;
    float _1961 = (cbLight._m0[_1947].z * _1954) + 1.0;
    float _1962 = (cbLight._m0[_1947].w * _1954) + 1.0;
    uint _1963 = _1946 + 5u;
    float _1969 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1973 = _1946 + 4u;
    float _1982 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
    uint _1986 = _1946 | 1u;
    float _1997 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_696, _697, _698));
    float _2000 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_696, _697, _698));
    float _4211 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _4222 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2005 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.3183098733425140380859375;
    float _2007 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * 0.3183098733425140380859375;
    float _2014 = ((cbLight._m0[_1963].x * _1969) * _2007) + (((cbLight._m0[_1973].x * _1938) * _1982) * _2005);
    float _2015 = ((_1969 * cbLight._m0[_1963].y) * _2007) + (((cbLight._m0[_1973].y * _1939) * _1982) * _2005);
    float _2016 = ((_1969 * cbLight._m0[_1963].z) * _2007) + (((cbLight._m0[_1973].z * _1940) * _1982) * _2005);
    uvec4 _2020 = floatBitsToUint(cbLight._m0[_1946 + 12u]);
    bool _2022 = _2020.x == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_2022)
    {
        _2033 = _2014;
        _2035 = _2015;
        _2037 = _2016;
    }
    else
    {
        uint _2041 = _1946 + 6u;
        float _2057 = (dot(vec3(cbLight._m0[_1946 + 2u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2058 = _2057 * _2057;
        float _4233 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2060 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2033 = (((cbLight._m0[_2041].x * 0.3183098733425140380859375) * _2059) * _2060) + _2014;
        _2035 = (((cbLight._m0[_2041].y * 0.3183098733425140380859375) * _2059) * _2060) + _2015;
        _2037 = (((cbLight._m0[_2041].z * 0.3183098733425140380859375) * _2059) * _2060) + _2016;
    }
    bool _2040 = _2020.y == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_2040)
    {
        _2078 = _2033;
        _2080 = _2035;
        _2082 = _2037;
    }
    else
    {
        uint _2240 = _1946 + 7u;
        float _2256 = (dot(vec3(cbLight._m0[_1946 + 3u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2257 = _2256 * _2256;
        float _4249 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2258 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2259 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2078 = (((cbLight._m0[_2240].x * 0.3183098733425140380859375) * _2258) * _2259) + _2033;
        _2080 = (((cbLight._m0[_2240].y * 0.3183098733425140380859375) * _2258) * _2259) + _2035;
        _2082 = (((cbLight._m0[_2240].z * 0.3183098733425140380859375) * _2258) * _2259) + _2037;
    }
    uint _2085 = _1946 + 8u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _699) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1946].x + _776;
    float _2101 = cbLight._m0[_1946].y + _777;
    float _2102 = cbLight._m0[_1946].z + _778;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_1946].xyz));
    float _4265 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _4276 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2114 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2115 = dot(vec3(_696, _697, _698), vec3(_2107, _2108, _2109));
    float _4287 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2119 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_2107, _2108, _2109));
    float _4298 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = _2099 * _2099;
    float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
    float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2139 = 1.0 - _2099;
    float _2150 = (0.5 / (((_2114 * ((_2113 * _2139) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2139) + _2099) * _2113))) * _2113;
    float _4309 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
    uint _2166 = _1946 + 9u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _699) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_1986].x + _776;
    float _2180 = cbLight._m0[_1986].y + _777;
    float _2181 = cbLight._m0[_1986].z + _778;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_1986].xyz));
    float _4320 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2193 = dot(vec3(_696, _697, _698), vec3(_2186, _2187, _2188));
    float _4331 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2186, _2187, _2188));
    float _4342 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2178 * _2178;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2215 = 1.0 - _2178;
    float _2225 = (0.5 / (((_2114 * ((_2192 * _2215) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2215) + _2178) * _2192))) * _2192;
    float _4353 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2227 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    float _2237 = (((_2214 * cbLight._m0[_2166].x) * _2227) * _1969) + ((((cbLight._m0[_2085].x * _1938) * _2138) * _2152) * _1982);
    float _2238 = (((_2214 * cbLight._m0[_2166].y) * _2227) * _1969) + ((((cbLight._m0[_2085].y * _1939) * _2138) * _2152) * _1982);
    float _2239 = (((_2214 * cbLight._m0[_2166].z) * _2227) * _1969) + ((((cbLight._m0[_2085].z * _1940) * _2138) * _2152) * _1982);
    float _2301;
    float _2303;
    float _2305;
    if (_2022)
    {
        _2301 = _2237;
        _2303 = _2238;
        _2305 = _2239;
    }
    else
    {
        uint _2307 = _1946 + 2u;
        uint _2311 = _1946 + 10u;
        float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _699) * 0.949999988079071044921875);
        float _2326 = _2325 * _2325;
        float _2327 = cbLight._m0[_2307].x + _776;
        float _2328 = cbLight._m0[_2307].y + _777;
        float _2329 = cbLight._m0[_2307].z + _778;
        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
        float _2334 = _2333 * _2327;
        float _2335 = _2333 * _2328;
        float _2336 = _2333 * _2329;
        float _2337 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2307].xyz));
        float _4364 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2341 = dot(vec3(_696, _697, _698), vec3(_2334, _2335, _2336));
        float _4375 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2345 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2334, _2335, _2336));
        float _4386 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2349 = _2326 * _2326;
        float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
        float _2362 = (exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2363 = 1.0 - _2326;
        float _2373 = (0.5 / (((_2114 * ((_2340 * _2363) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2363) + _2326) * _2340))) * _2340;
        float _4397 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2375 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
        float _2376 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2301 = (((_2362 * cbLight._m0[_2311].x) * _2375) * _2376) + _2237;
        _2303 = (((_2362 * cbLight._m0[_2311].y) * _2375) * _2376) + _2238;
        _2305 = (((_2362 * cbLight._m0[_2311].z) * _2375) * _2376) + _2239;
    }
    float _2411;
    float _2413;
    float _2415;
    if (_2040)
    {
        _2411 = _2301;
        _2413 = _2303;
        _2415 = _2305;
    }
    else
    {
        uint _2422 = _1946 + 3u;
        uint _2426 = _1946 + 11u;
        float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _699) * 0.949999988079071044921875);
        float _2441 = _2440 * _2440;
        float _2442 = cbLight._m0[_2422].x + _776;
        float _2443 = cbLight._m0[_2422].y + _777;
        float _2444 = cbLight._m0[_2422].z + _778;
        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
        float _2449 = _2448 * _2442;
        float _2450 = _2448 * _2443;
        float _2451 = _2448 * _2444;
        float _2452 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2422].xyz));
        float _4413 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2456 = dot(vec3(_696, _697, _698), vec3(_2449, _2450, _2451));
        float _4424 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2460 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2449, _2450, _2451));
        float _4435 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2464 = _2441 * _2441;
        float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
        float _2477 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2478 = 1.0 - _2441;
        float _2488 = (0.5 / (((_2114 * ((_2455 * _2478) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2478) + _2441) * _2455))) * _2455;
        float _4446 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2490 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
        float _2491 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2411 = (((_2477 * cbLight._m0[_2426].x) * _2490) * _2491) + _2301;
        _2413 = (((_2477 * cbLight._m0[_2426].y) * _2490) * _2491) + _2303;
        _2415 = (((_2477 * cbLight._m0[_2426].z) * _2490) * _2491) + _2305;
    }
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_1944.y == 0u)
    {
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2566;
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2566;
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2566;
        uvec4 _2581 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2582 = _2581.x;
        uint _2593 = uint((float(_2581.y) * floor(float(uint(cbSceneParam._m0[85u].y * _797) / _2582))) + floor(float(uint(cbSceneParam._m0[85u].x * _796) / _2582)));
        float _2603 = (log2(_2569 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2604 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        uint _2607 = uint(isnan(14.0) ? _2604 : (isnan(_2604) ? 14.0 : min(_2604, 14.0)));
        uvec4 _2612 = texelFetch(g_lightClusterGridBuffer, int(((_2607 << 2u) + (_2593 << 6u)) >> 2u));
        uint _2613 = _2612.x;
        uint _2614 = _2581.z;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((((1u << ((_2614 >> 4u) & 15u)) + 4294967295u) & _2613) == 0u) || ((_2614 & 240u) == 0u))
        {
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
        }
        else
        {
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            uint _2873 = 0u;
            uint _2882;
            bool _2883;
            for (;;)
            {
                _2882 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                _2883 = _2882 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2883)
                {
                    frontier_phi_66_pred = _2867;
                    frontier_phi_66_pred_1 = _2872;
                    frontier_phi_66_pred_2 = _2871;
                    frontier_phi_66_pred_3 = _2870;
                    frontier_phi_66_pred_4 = _2869;
                    frontier_phi_66_pred_5 = _2868;
                }
                else
                {
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    uint _3018;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2882;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    for (;;)
                    {
                        uint _3022 = uint(findLSB(_3018)) + (_2873 << 5u);
                        uint _3019 = (_3018 + 4294967295u) & _3018;
                        uint _3024 = _3022 * 48u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3044 = (_3022 * 48u) + 4u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3063 = (_3022 * 48u) + 8u;
                        vec3 _3074 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x));
                        float _3078 = _3038.x - _2567;
                        float _3079 = _3038.y - _2568;
                        float _3080 = _3038.z - _2569;
                        float _3081 = dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080));
                        float _3084 = inversesqrt(_3081);
                        float _3085 = _3084 * _3078;
                        float _3086 = _3084 * _3079;
                        float _3087 = _3084 * _3080;
                        float _3088 = dot(vec3(_815, _818, _821), vec3(_3085, _3086, _3087));
                        float _3093 = 1.0 - (_3081 * _3038.w);
                        float _4472 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3094 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3095 = sqrt(_3081) * _3057.w;
                        float _3098 = 1.39999997615814208984375 / (_3095 + 1.39999997615814208984375);
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3088) + _3099;
                        float _3105 = _3095 * _3095;
                        float _3109 = ((isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))) * _3094) / ((_3105 * 0.699999988079071044921875) + 1.0);
                        float _3113 = (-0.0) - _2567;
                        float _3114 = (-0.0) - _2568;
                        float _3115 = (-0.0) - _2569;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3130 = exp2(log2(1.0 / ((_3105 * 3.5) + 5.0)) * 0.25);
                        float _3131 = 1.0 - _875;
                        float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                        float _3139 = _3138 * _3138;
                        float _3140 = _3139 * _3139;
                        float _3141 = _3120 + _3085;
                        float _3142 = _3121 + _3086;
                        float _3143 = _3122 + _3087;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3151 = dot(vec3(_815, _818, _821), vec3(_3120, _3121, _3122));
                        float _4488 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3155 = dot(vec3(_815, _818, _821), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                        float _4499 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                        float _3163 = _3098 * _3139;
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3088) + _3164;
                        float _4510 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3169 = 1.0 - _3139;
                        float _3179 = (0.5 / (((_3168 * ((_3154 * _3169) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3168 * _3169) + _3139) * _3154))) * _3168;
                        float _4521 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3190 = (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) / ((_3162 * _3162) * ((_3105 * 2.1991131305694580078125) + 3.141590118408203125))) * _3094;
                        _2942 = (_3109 * _3057.x) + _3015;
                        _2943 = (_3109 * _3057.y) + _3016;
                        _2944 = (_3109 * _3057.z) + _3017;
                        _2939 = (_3190 * _3074.x) + _3012;
                        _2940 = (_3190 * _3074.y) + _3013;
                        _2941 = (_3190 * _3074.z) + _3014;
                        if (_3019 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _3019;
                        }
                    }
                    frontier_phi_66_pred = _2939;
                    frontier_phi_66_pred_1 = _2944;
                    frontier_phi_66_pred_2 = _2943;
                    frontier_phi_66_pred_3 = _2942;
                    frontier_phi_66_pred_4 = _2941;
                    frontier_phi_66_pred_5 = _2940;
                }
                _2715 = frontier_phi_66_pred;
                _2725 = frontier_phi_66_pred_1;
                _2723 = frontier_phi_66_pred_2;
                _2721 = frontier_phi_66_pred_3;
                _2719 = frontier_phi_66_pred_4;
                _2717 = frontier_phi_66_pred_5;
                uint _2874 = _2873 + 1u;
                if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2867 = _2715;
                    _2868 = _2717;
                    _2869 = _2719;
                    _2870 = _2721;
                    _2871 = _2723;
                    _2872 = _2725;
                    _2873 = _2874;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
        }
        uvec4 _2728 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2729 = _2728.z;
        uint _2731 = (_2729 >> 8u) & 15u;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        if (((4294967295u << _2731) & _2613) == 0u)
        {
            _2835 = _2714;
            _2837 = _2716;
            _2839 = _2718;
            _2841 = _2720;
            _2843 = _2722;
            _2845 = _2724;
        }
        else
        {
            float _2860 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
            float _2861 = _2860 * _2567;
            float _2862 = _2860 * _2568;
            float _2863 = _2860 * _2569;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2731 < ((_2729 >> 12u) & 15u))
            {
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2995 = _2714;
                float _2996 = _2716;
                float _2997 = _2718;
                float _2998 = _2720;
                float _2999 = _2722;
                float _3000 = _2724;
                uint _3001 = _2731;
                uint _3010;
                bool _3011;
                for (;;)
                {
                    _3010 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_3001 << 2u)) >> 2u)).x;
                    _3011 = _3010 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3011)
                    {
                        frontier_phi_77_pred = _3000;
                        frontier_phi_77_pred_1 = _2999;
                        frontier_phi_77_pred_2 = _2998;
                        frontier_phi_77_pred_3 = _2997;
                        frontier_phi_77_pred_4 = _2996;
                        frontier_phi_77_pred_5 = _2995;
                    }
                    else
                    {
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        float _3219 = _2997;
                        float _3220 = _2998;
                        float _3221 = _2999;
                        float _3222 = _3000;
                        uint _3223 = _3010;
                        uint _3224;
                        vec4 _3249;
                        float _3250;
                        vec4 _3265;
                        vec3 _3277;
                        vec4 _3292;
                        vec4 _3307;
                        float _3353;
                        bool _3354;
                        for (;;)
                        {
                            uint _3234 = ((_3001 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3223));
                            _3224 = (_3223 + 4294967295u) & _3223;
                            uint _3236 = _3234 * 40u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            _3250 = _3249.w;
                            uint _3252 = (_3234 * 40u) + 4u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3234 * 40u) + 8u;
                            _3277 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x));
                            uint _3279 = (_3234 * 40u) + 16u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3234 * 40u) + 20u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3309 = (_3234 * 40u) + 24u;
                            vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3328 = (_3234 * 40u) + 28u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            _3353 = fma(_2569, _3341.z, fma(_2568, _3341.y, _3341.x * _2567)) + _3341.w;
                            _3354 = !((fma(_2569, _3322.z, fma(_2568, _3322.y, _3322.x * _2567)) + _3322.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3354)
                            {
                                float _3381 = _3249.x - _2567;
                                float _3382 = _3249.y - _2568;
                                float _3383 = _3249.z - _2569;
                                float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                                float _3387 = inversesqrt(_3384);
                                float _3388 = _3387 * _3381;
                                float _3389 = _3387 * _3382;
                                float _3390 = _3387 * _3383;
                                float _3394 = 1.0 - (_3384 / (_3250 * _3250));
                                float _4532 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3399 = sqrt(_3384) * _3265.w;
                                float _3401 = 1.39999997615814208984375 / (_3399 + 1.39999997615814208984375);
                                float _3402 = _3401 * _3401;
                                float _3405 = ((1.0 - _3402) * dot(vec3(_3388, _3389, _3390), vec3(_815, _818, _821))) + _3402;
                                float _3408 = _3399 * _3399;
                                float _3412 = (fma(_2569, _3292.z, fma(_2568, _3292.y, _3292.x * _2567)) + _3292.w) / _3353;
                                float _3413 = (fma(_2569, _3307.z, fma(_2568, _3307.y, _3307.x * _2567)) + _3307.w) / _3353;
                                float _3417 = 1.0 - dot(vec2(_3412, _3413), vec2(_3412, _3413));
                                float _4548 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3419 = _3418 * (((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3395) / ((_3408 * 0.699999988079071044921875) + 1.0));
                                float _3431 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                                float _3432 = 1.0 - _875;
                                float _3439 = sqrt(1.0 - ((1.0 - (_3432 * _3432)) * (1.0 - (_3431 * _3431))));
                                float _3440 = _3439 * _3439;
                                float _3441 = _3440 * _3440;
                                float _3442 = _3388 - _2861;
                                float _3443 = _3389 - _2862;
                                float _3444 = _3390 - _2863;
                                float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                                float _3452 = dot(vec3(_815, _818, _821), vec3((-0.0) - _2861, (-0.0) - _2862, (-0.0) - _2863));
                                float _4559 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3456 = dot(vec3(_815, _818, _821), vec3(_3448 * _3442, _3448 * _3443, _3448 * _3444));
                                float _4570 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3463 = ((_3459 * _3459) * (_3441 + (-1.0))) + 1.0;
                                float _3464 = _3401 * _3440;
                                float _3465 = _3464 * _3464;
                                float _3471 = ((1.0 - _3465) * dot(vec3(_815, _818, _821), vec3(_3388, _3389, _3390))) + _3465;
                                float _4581 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3473 = 1.0 - _3440;
                                float _3483 = (0.5 / (((_3472 * ((_3455 * _3473) + _3440)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3440) * _3455))) * _3472;
                                float _4592 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3493 = (_3418 * _3395) * (((_3441 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3463 * _3463) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3419 * _3265.y;
                                frontier_phi_83_pred_1 = _3419 * _3265.x;
                                frontier_phi_83_pred_2 = _3493 * _3277.z;
                                frontier_phi_83_pred_3 = _3493 * _3277.y;
                                frontier_phi_83_pred_4 = _3493 * _3277.x;
                                frontier_phi_83_pred_5 = _3419 * _3265.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3501 = frontier_phi_83_pred;
                            _3500 = frontier_phi_83_pred_1;
                            _3499 = frontier_phi_83_pred_2;
                            _3498 = frontier_phi_83_pred_3;
                            _3497 = frontier_phi_83_pred_4;
                            _3502 = frontier_phi_83_pred_5;
                            _3207 = _3500 + _3220;
                            _3208 = _3501 + _3221;
                            _3209 = _3502 + _3222;
                            _3204 = _3497 + _3217;
                            _3205 = _3498 + _3218;
                            _3206 = _3499 + _3219;
                            if (_3224 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3224;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3209;
                        frontier_phi_77_pred_1 = _3208;
                        frontier_phi_77_pred_2 = _3207;
                        frontier_phi_77_pred_3 = _3206;
                        frontier_phi_77_pred_4 = _3205;
                        frontier_phi_77_pred_5 = _3204;
                    }
                    _2846 = frontier_phi_77_pred;
                    _2844 = frontier_phi_77_pred_1;
                    _2842 = frontier_phi_77_pred_2;
                    _2840 = frontier_phi_77_pred_3;
                    _2838 = frontier_phi_77_pred_4;
                    _2836 = frontier_phi_77_pred_5;
                    uint _3002 = _3001 + 1u;
                    if (_3002 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2995 = _2836;
                        _2996 = _2838;
                        _2997 = _2840;
                        _2998 = _2842;
                        _2999 = _2844;
                        _3000 = _2846;
                        _3001 = _3002;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2840;
                frontier_phi_58_59_ladder_1 = _2846;
                frontier_phi_58_59_ladder_2 = _2844;
                frontier_phi_58_59_ladder_3 = _2842;
                frontier_phi_58_59_ladder_4 = _2838;
                frontier_phi_58_59_ladder_5 = _2836;
            }
            else
            {
                frontier_phi_58_59_ladder = _2718;
                frontier_phi_58_59_ladder_1 = _2724;
                frontier_phi_58_59_ladder_2 = _2722;
                frontier_phi_58_59_ladder_3 = _2720;
                frontier_phi_58_59_ladder_4 = _2716;
                frontier_phi_58_59_ladder_5 = _2714;
            }
            _2835 = frontier_phi_58_59_ladder_5;
            _2837 = frontier_phi_58_59_ladder_4;
            _2839 = frontier_phi_58_59_ladder;
            _2841 = frontier_phi_58_59_ladder_3;
            _2843 = frontier_phi_58_59_ladder_2;
            _2845 = frontier_phi_58_59_ladder_1;
        }
        float _2850 = isnan(1.0) ? _859 : (isnan(_859) ? 1.0 : min(_859, 1.0));
        _2626 = (_2850 * _2841) + _2078;
        _2628 = (_2850 * _2843) + _2080;
        _2630 = (_2850 * _2845) + _2082;
        _2632 = ((_2835 * 0.039999999105930328369140625) * _2850) + _2411;
        _2634 = ((_2837 * 0.039999999105930328369140625) * _2850) + _2413;
        _2636 = ((_2839 * 0.039999999105930328369140625) * _2850) + _2415;
    }
    else
    {
        _2626 = _2078;
        _2628 = _2080;
        _2630 = _2082;
        _2632 = _2411;
        _2634 = _2413;
        _2636 = _2415;
    }
    float _4608 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4619 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4630 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2653 = ((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2626 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _859))) + ((_2632 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    float _2654 = ((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2628 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _859))) + ((_2634 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    float _2655 = ((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2630 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _859))) + ((_2636 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    uint _2656 = _268 + 6u;
    float _2664 = _796 / cbSceneParam._m0[86u].x;
    float _2665 = _797 / cbSceneParam._m0[86u].y;
    vec4 _2679 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, (log2((isnan(cbSceneParam._m0[77u].w) ? _717 : (isnan(_717) ? cbSceneParam._m0[77u].w : min(_717, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2681 = _2679.x;
    float _2682 = _2679.y;
    float _2683 = _2679.z;
    float _2684 = _2679.w;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    if (_717 > cbSceneParam._m0[78u].w)
    {
        float _2739 = isnan(_717) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _717 : min(cbSceneParam._m0[80u].w, _717));
        float _2740 = _2739 / _717;
        float _2751 = _2740 * _769;
        float _2752 = _770 * _2740;
        float _2753 = (-0.0) - _2752;
        float _2755 = _2740 * _771;
        float _2757 = (cbSceneParam._m0[77u].w * _2753) / _2739;
        float _2758 = _2757 + cbSceneParam._m0[79u].w;
        float _2759 = cbSceneParam._m0[79u].w - _2752;
        float _2765 = sqrt(((_2751 * _2751) + (_2752 * _2752)) + (_2755 * _2755));
        float _2768 = (1.0 - (cbSceneParam._m0[77u].w / _2739)) * _2765;
        float _2773 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2775 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2952;
        if (abs((_2753 - _2757) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2952 = ((((_2758 > 0.0) ? exp2(_2773 * _2758) : (2.0 - exp2(_2775 * _2758))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2768;
        }
        else
        {
            float _2896 = 1.0 / cbSceneParam._m0[80u].x;
            float _2897 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : max(_2758, _2759));
            float _2898 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : min(_2758, _2759));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            _2952 = ((abs(_2765 / _2753) * cbSceneParam._m0[80u].y) * ((((_2907 - _2908) * 2.0) - ((exp2(_2773 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0)))) - exp2(_2773 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))))) * _2896)) - ((exp2(_2775 * _2907) - exp2(_2775 * _2908)) * _2896))) + (_2768 * cbSceneParam._m0[80u].z);
        }
        vec4 _2954 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, 1.0), 0.0);
        float _2963 = exp2((_2952 * (-1.44269502162933349609375)) * (1.0 - _2954.w));
        float _2964 = log2(_2963);
        float _2980 = log2(_2684);
        _2777 = (exp2(_2980 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].x)) * _2954.x) / cbSceneParam._m0[78u].x)) + _2681;
        _2779 = (exp2(_2980 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].y)) * _2954.y) / cbSceneParam._m0[78u].y)) + _2682;
        _2781 = (exp2(_2980 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].z)) * _2954.z) / cbSceneParam._m0[78u].z)) + _2683;
        _2783 = _2963 * _2684;
    }
    else
    {
        _2777 = _2681;
        _2779 = _2682;
        _2781 = _2683;
        _2783 = _2684;
    }
    bool _2990;
    vec4 _2793;
    vec4 _2815;
    float _2817;
    float _2821;
    float _2822;
    float _2823;
    float _2824;
    bool _2834;
    for (;;)
    {
        _2793 = cbMatDynParam._m0[0u];
        float _2795 = roundEven(_2793.y);
        bool _2796 = _2795 == 3.0;
        float _2797 = log2(_2783);
        float _2804 = exp2(_2797 * cbSceneParam._m0[78u].x) * _2653;
        float _2805 = exp2(_2797 * cbSceneParam._m0[78u].y) * _2654;
        float _2806 = exp2(_2797 * cbSceneParam._m0[78u].z) * _2655;
        float _2813 = _785 + (-0.5);
        _2815 = cbMtdParam._m0[1u];
        _2817 = _2815.y * _2813;
        float _2820 = (_2795 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2821 = _2820 * (_2796 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2777)));
        _2822 = _2820 * (_2796 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2779)));
        _2823 = _2820 * (_2796 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2781)));
        _2824 = _2813 * 0.999000012874603271484375;
        _2834 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2834)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _2824) < 0.5)
            {
                _2990 = true;
                break;
            }
        }
        uint _2931 = _834 + uint(_2793.w);
        if ((cbInstanceData._m0[_2931].w < 1.0) && ((cbInstanceData._m0[_2931].w + _2824) < 0.5))
        {
            _2990 = true;
            break;
        }
        if ((_2817 + 1.0) < _2815.x)
        {
            _2990 = true;
            break;
        }
        _2990 = false;
        break;
    }
    float _3195;
    if (_2990)
    {
        discard_state = true;
        _3195 = 0.0;
    }
    else
    {
        _3195 = cbInstanceData._m0[_2656].w;
    }
    SV_Target.x = _2821;
    SV_Target.y = _2822;
    SV_Target.z = _2823;
    SV_Target.w = _3195;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2656].w;
    discard_exit();
}


