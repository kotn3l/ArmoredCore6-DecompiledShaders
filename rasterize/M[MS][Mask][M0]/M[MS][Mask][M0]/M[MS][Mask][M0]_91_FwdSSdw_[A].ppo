#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1301;
float _3682;
float _3683;
float _3684;
float _3685;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _330.x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].z) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3694 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _406 = (_399 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _407 = (_399 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _408 = (_399 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _330.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].z) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3705 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _548 = ((_520.x - _539) * _399) + _539;
    float _549 = ((_520.y - _540) * _399) + _540;
    float _550 = ((_520.z - _541) * _399) + _541;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _575 = ((_562.z - _550) * _472) + _550;
    float _578 = ((((_562.x - _548) * _472) + _548) * 2.0) + (-1.0);
    float _580 = ((((_562.y - _549) * _472) + _549) * 2.0) + (-1.0);
    float _581 = dot(vec2(_578, _580), vec2(_578, _580));
    float _3716 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _586 = sqrt(1.0 - (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _612 = (((_600.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _578;
    float _613 = (((_600.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _580;
    float _616 = fma(_586, _230, fma(_613, _237, _612 * _223));
    float _619 = fma(_586, _231, fma(_613, _238, _612 * _224));
    float _622 = fma(_586, _232, fma(_613, _239, _612 * _225));
    float _626 = inversesqrt(dot(vec3(_616, _619, _622), vec3(_616, _619, _622)));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _655 = _653.x;
    float _656 = 1.0 - _655;
    float _662 = (cbMtdParam._m0[19u].x + dot(vec4(_626 * _616, _626 * _619, _626 * _622, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_655 - _656) * cbMtdParam._m0[24u].w) + _656) * cbMtdParam._m0[21u].z);
    float _3727 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _670 = (_663 * ((_500.x * cbMtdParam._m0[18u].x) - _479)) + _479;
    float _671 = (_663 * ((_500.y * cbMtdParam._m0[18u].y) - _480)) + _480;
    float _672 = (_663 * ((_500.z * cbMtdParam._m0[18u].z) - _481)) + _481;
    float _676 = (cbMtdParam._m0[19u].w * (_600.z - _575)) + _575;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _696 = (_689.x * 2.0) + (-1.0);
    float _697 = (_689.y * 2.0) + (-1.0);
    float _698 = dot(vec2(_696, _697), vec2(_696, _697));
    float _3738 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _706 = ((_689.z - _676) * _663) + _676;
    float _716 = ((sqrt(1.0 - (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) - _586) * _663) + _586;
    float _719 = (((_696 - _612) * _663) + _612) + (cbMtdParam._m0[21u].x * _612);
    float _720 = (((_697 - _613) * _663) + _613) + (cbMtdParam._m0[21u].x * _613);
    float _724 = cbMtdParam._m0[22u].x + _600.w;
    float _727 = fma(_716, _230, fma(_720, _237, _719 * _223));
    float _730 = fma(_716, _231, fma(_720, _238, _719 * _224));
    float _733 = fma(_716, _232, fma(_720, _239, _719 * _225));
    float _737 = inversesqrt(dot(vec3(_727, _730, _733), vec3(_727, _730, _733)));
    float _738 = _737 * _727;
    float _739 = _737 * _730;
    float _740 = _737 * _733;
    float _3749 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _741 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3771 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3782 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3793 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _759 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _811 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _801);
    float _812 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _801);
    float _813 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _801);
    float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
    float _818 = _811 * _817;
    float _819 = _812 * _817;
    float _820 = _813 * _817;
    vec4 _825 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _827 = _825.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _981 = sqrt(((_811 * _811) + (_812 * _812)) + (_813 * _813));
        float _987 = (cbMatDynParam._m0[5u].x * _981) + cbMatDynParam._m0[5u].y;
        float _3804 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _992 = (cbMatDynParam._m0[5u].z * _981) + cbMatDynParam._m0[5u].w;
        float _3815 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) - _988)) + _988) < ((_827 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _838 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _839 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _857 = fma(_740, cbSceneParam._m0[5u].z, fma(_739, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _738));
    float _860 = fma(_740, cbSceneParam._m0[6u].z, fma(_739, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _738));
    float _863 = fma(_740, cbSceneParam._m0[7u].z, fma(_739, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _738));
    uint _876 = _242 + 9u;
    uint _877 = _876 + uint(cbMatDynParam._m0[0u].w);
    float _883 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_877].x;
    float _884 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_877].y;
    float _885 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_877].z;
    float _3826 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    vec4 _897 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _838, cbSceneParam._m0[86u].y * _839));
    float _901 = ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * TEXCOORD_5.w) * _897.x;
    float _902 = dot(vec3(_738, _739, _740), vec3(_818, _819, _820));
    float _905 = _902 * 2.0;
    float _909 = (_905 * _738) - _818;
    float _910 = (_905 * _739) - _819;
    float _911 = (_905 * _740) - _820;
    float _915 = abs(dot(vec3(_818, _819, _820), vec3(_738, _739, _740)));
    float _3859 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _917 = sqrt(_741);
    float _930 = exp2((_917 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_917 * 3.0));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1300;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1025 = fma(_970, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _962));
        float _1029 = fma(_970, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _962));
        float _1033 = fma(_970, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _962));
        float _1058 = _962 + _738;
        float _1059 = _966 + _739;
        float _1060 = _970 + _740;
        float _1070 = fma(_1060, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058)) - _1025;
        float _1071 = fma(_1060, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058)) - _1029;
        float _1072 = fma(_1060, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058)) - _1033;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1025 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1029 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[34u].z) + ((((((_1033 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1128 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1094.x + (-0.5));
        float _1130 = _1128 * (_1094.y + (-0.5));
        float _1131 = _1128 * (_1094.z + (-0.5));
        float _1138 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1101.x + (-0.5));
        float _1140 = _1138 * (_1101.y + (-0.5));
        float _1141 = _1138 * (_1101.z + (-0.5));
        float _1148 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1108.x + (-0.5));
        float _1150 = _1148 * (_1108.y + (-0.5));
        float _1151 = _1148 * (_1108.z + (-0.5));
        float _1158 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1115.x + (-0.5));
        float _1160 = _1158 * (_1115.y + (-0.5));
        float _1161 = _1158 * (_1115.z + (-0.5));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = _1129 * 0.5;
        float _1166 = _1139 * 0.5;
        float _1167 = _1149 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1182 = (dot(vec3(_738, _739, _740), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1192 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3907 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1194 + 1.0))) + _1199) * _1162;
        float _1209 = _1130 * 0.5;
        float _1210 = _1140 * 0.5;
        float _1211 = _1150 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_738, _739, _740), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3940 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1236 + 1.0))) + _1241) * _1163;
        float _1251 = _1131 * 0.5;
        float _1252 = _1141 * 0.5;
        float _1253 = _1151 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_738, _739, _740), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3973 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1278 + 1.0))) + _1283) * _1164;
        _1300 = _1131;
        _1302 = _1130;
        _1303 = _1129;
        _1304 = _1141;
        _1305 = _1140;
        _1306 = _1139;
        _1307 = _1151;
        _1308 = _1150;
        _1309 = _1149;
        _1310 = _1164;
        _1311 = _1163;
        _1312 = _1162;
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _1301;
        _1302 = _1301;
        _1303 = _1301;
        _1304 = _1301;
        _1305 = _1301;
        _1306 = _1301;
        _1307 = _1301;
        _1308 = _1301;
        _1309 = _1301;
        _1310 = _1301;
        _1311 = _1301;
        _1312 = _1301;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1342 = fma(_970, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962));
        float _1346 = fma(_970, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962));
        float _1350 = fma(_970, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962));
        float _1373 = _962 + _738;
        float _1374 = _966 + _739;
        float _1375 = _970 + _740;
        float _1385 = fma(_1375, cbModelParam._m0[30u].z, fma(_1374, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1373)) - _1342;
        float _1386 = fma(_1375, cbModelParam._m0[31u].z, fma(_1374, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1373)) - _1346;
        float _1387 = fma(_1375, cbModelParam._m0[32u].z, fma(_1374, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1373)) - _1350;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1342 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1346 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[35u].z) + ((((((_1350 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1441 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1408.x + (-0.5));
        float _1443 = _1441 * (_1408.y + (-0.5));
        float _1444 = _1441 * (_1408.z + (-0.5));
        float _1451 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1415.x + (-0.5));
        float _1453 = _1451 * (_1415.y + (-0.5));
        float _1454 = _1451 * (_1415.z + (-0.5));
        float _1461 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1422.x + (-0.5));
        float _1463 = _1461 * (_1422.y + (-0.5));
        float _1464 = _1461 * (_1422.z + (-0.5));
        float _1471 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1429.x + (-0.5));
        float _1473 = _1471 * (_1429.y + (-0.5));
        float _1474 = _1471 * (_1429.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_738, _739, _740), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4036 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1505 + 1.0))) + _1510) * _1475;
        float _1520 = _1443 * 0.5;
        float _1521 = _1453 * 0.5;
        float _1522 = _1463 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_738, _739, _740), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4069 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1547 + 1.0))) + _1552) * _1476;
        float _1562 = _1444 * 0.5;
        float _1563 = _1454 * 0.5;
        float _1564 = _1464 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_738, _739, _740), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4102 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1589 + 1.0))) + _1594) * _1477;
        _1611 = _1444;
        _1612 = _1443;
        _1613 = _1442;
        _1614 = _1454;
        _1615 = _1453;
        _1616 = _1452;
        _1617 = _1464;
        _1618 = _1463;
        _1619 = _1462;
        _1620 = _1477;
        _1621 = _1476;
        _1622 = _1475;
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1301;
        _1612 = _1301;
        _1613 = _1301;
        _1614 = _1301;
        _1615 = _1301;
        _1616 = _1301;
        _1617 = _1301;
        _1618 = _1301;
        _1619 = _1301;
        _1620 = _1301;
        _1621 = _1301;
        _1622 = _1301;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1313)) + _1313;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1314)) + _1314;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1315)) + _1315;
    float _1658 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1635));
    float _1679 = _909 * 0.5;
    float _1680 = _910 * 0.5;
    float _1681 = _911 * 0.5;
    float _1682 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1685 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1688 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1722;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1695 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1300, _1304, _1307, _1310));
        float _1699 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1703 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1710 = dot(vec4(cbModelParam._m0[39u]), vec4(_1679, _1680, _1681, 1.0));
        _1722 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1722 = 1.0;
    }
    float _1733;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1724 = dot(vec4(cbModelParam._m0[40u]), vec4(_1679, _1680, _1681, 1.0));
        _1733 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1733 = 1.0;
    }
    float _1737 = (_1733 * cbModelParam._m0[1u].x) + (_1722 * (1.0 - cbModelParam._m0[1u].x));
    float _1747 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _741);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1747 : min(cbModelParam._m0[25u].z, _1747));
    float _1828;
    float _1830;
    float _1832;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1795 = fma(_970, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962)) + cbModelParam._m0[13u].w;
        float _1799 = fma(_970, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962)) + cbModelParam._m0[14u].w;
        float _1803 = fma(_970, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962)) + cbModelParam._m0[15u].w;
        float _1806 = fma(_911, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909));
        float _1809 = fma(_911, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909));
        float _1812 = fma(_911, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909));
        float _1840;
        if (_1806 > 0.0)
        {
            _1840 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1840 = frontier_phi_17_15_ladder;
        }
        float _2061;
        if (_1809 > 0.0)
        {
            _2061 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2061 = frontier_phi_26_22_ladder;
        }
        float _2307;
        if (_1812 > 0.0)
        {
            _2307 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2307 = frontier_phi_38_33_ladder;
        }
        float _2309 = isnan(_2061) ? _1840 : (isnan(_1840) ? _2061 : min(_1840, _2061));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1806) + _1795;
        float _2315 = (_2310 * _1809) + _1799;
        float _2316 = (_2310 * _1812) + _1803;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2317;
        float _2321 = _2317 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 > _2321) || ((_2315 < _2319) || ((_2314 < _2319) || (_2314 > _2321))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2316, cbModelParam._m0[9u].z, fma(_2315, cbModelParam._m0[9u].y, _2314 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2316, cbModelParam._m0[10u].z, fma(_2315, cbModelParam._m0[10u].y, _2314 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2316, cbModelParam._m0[11u].z, fma(_2315, cbModelParam._m0[11u].y, _2314 * cbModelParam._m0[11u].x))), _1748);
            frontier_phi_16_38_ladder = _2440.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2440.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2440.x * cbModelParam._m0[1u].y;
        }
        _1828 = frontier_phi_16_38_ladder_2;
        _1830 = frontier_phi_16_38_ladder_1;
        _1832 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_909, _910, _911), _1748);
        _1828 = _1816.x * cbModelParam._m0[1u].y;
        _1830 = _1816.y * cbModelParam._m0[1u].y;
        _1832 = _1816.z * cbModelParam._m0[1u].y;
    }
    float _1836 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _741);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1836 : min(cbModelParam._m0[25u].w, _1836));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1890 = fma(_970, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962)) + cbModelParam._m0[21u].w;
        float _1894 = fma(_970, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962)) + cbModelParam._m0[22u].w;
        float _1898 = fma(_970, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962)) + cbModelParam._m0[23u].w;
        float _1901 = fma(_911, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909));
        float _1904 = fma(_911, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909));
        float _1907 = fma(_911, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909));
        float _2066;
        if (_1901 > 0.0)
        {
            _2066 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2066 = frontier_phi_28_24_ladder;
        }
        float _2334;
        if (_1904 > 0.0)
        {
            _2334 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2334 = frontier_phi_40_35_ladder;
        }
        float _2539;
        if (_1907 > 0.0)
        {
            _2539 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2539 = frontier_phi_49_46_ladder;
        }
        float _2541 = isnan(_2334) ? _2066 : (isnan(_2066) ? _2334 : min(_2066, _2334));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _1901) + _1890;
        float _2547 = (_2542 * _1904) + _1894;
        float _2548 = (_2542 * _1907) + _1898;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2549;
        float _2552 = _2549 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2548 > _2552) || ((_2548 < _2550) || ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 < _2550) || (_2546 > _2552))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2548, cbModelParam._m0[17u].z, fma(_2547, cbModelParam._m0[17u].y, _2546 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2548, cbModelParam._m0[18u].z, fma(_2547, cbModelParam._m0[18u].y, _2546 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2548, cbModelParam._m0[19u].z, fma(_2547, cbModelParam._m0[19u].y, _2546 * cbModelParam._m0[19u].x))), _1837);
            frontier_phi_25_49_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1926 = frontier_phi_25_49_ladder_2;
        _1928 = frontier_phi_25_49_ladder_1;
        _1930 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_909, _910, _911), _1837);
        _1926 = _1910.x * cbModelParam._m0[1u].z;
        _1928 = _1910.y * cbModelParam._m0[1u].z;
        _1930 = _1910.z * cbModelParam._m0[1u].z;
    }
    float _1942 = ((((1.0 - _930) * ((_917 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_930 * _917)) * _901;
    float _1943 = _1942 * ((cbModelParam._m0[1u].w * (_1926 - _1828)) + _1828);
    float _1944 = _1942 * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1945 = _1942 * ((cbModelParam._m0[1u].w * (_1930 - _1832)) + _1832);
    float _1948 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1944, cbSceneParam._m0[89u].y, _1943 * cbSceneParam._m0[89u].x));
    float _1951 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1944, cbSceneParam._m0[90u].y, _1943 * cbSceneParam._m0[90u].x));
    float _1954 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1944, cbSceneParam._m0[91u].y, _1943 * cbSceneParam._m0[91u].x));
    vec4 _1962 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_838, _839));
    float _1964 = _1962.w;
    float _1976 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1964);
    float _1977 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1964);
    float _1978 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1964);
    uvec4 _1982 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1984 = _1982.x * 14u;
    uint _1985 = _1984 + 13u;
    float _1992 = _901 + (-1.0);
    float _1997 = (cbLight._m0[_1985].x * _1992) + 1.0;
    float _1998 = (cbLight._m0[_1985].y * _1992) + 1.0;
    float _1999 = (cbLight._m0[_1985].z * _1992) + 1.0;
    float _2000 = (cbLight._m0[_1985].w * _1992) + 1.0;
    uint _2001 = _1984 + 5u;
    float _2007 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
    uint _2011 = _1984 + 4u;
    float _2020 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2024 = _1984 | 1u;
    float _2035 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_738, _739, _740));
    float _2038 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_738, _739, _740));
    float _4238 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _4249 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2043 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * 0.3183098733425140380859375;
    float _2045 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * 0.3183098733425140380859375;
    float _2052 = ((cbLight._m0[_2001].x * _2007) * _2045) + (((cbLight._m0[_2011].x * _1976) * _2020) * _2043);
    float _2053 = ((_2007 * cbLight._m0[_2001].y) * _2045) + (((cbLight._m0[_2011].y * _1977) * _2020) * _2043);
    float _2054 = ((_2007 * cbLight._m0[_2001].z) * _2045) + (((cbLight._m0[_2011].z * _1978) * _2020) * _2043);
    uvec4 _2058 = floatBitsToUint(cbLight._m0[_1984 + 12u]);
    bool _2060 = _2058.x == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2060)
    {
        _2071 = _2052;
        _2073 = _2053;
        _2075 = _2054;
    }
    else
    {
        uint _2079 = _1984 + 6u;
        float _2095 = (dot(vec3(cbLight._m0[_1984 + 2u].xyz), vec3(_738, _739, _740)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _4260 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2098 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2071 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _2052;
        _2073 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _2053;
        _2075 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _2054;
    }
    bool _2078 = _2058.y == 0u;
    float _2116;
    float _2118;
    float _2120;
    if (_2078)
    {
        _2116 = _2071;
        _2118 = _2073;
        _2120 = _2075;
    }
    else
    {
        uint _2278 = _1984 + 7u;
        float _2294 = (dot(vec3(cbLight._m0[_1984 + 3u].xyz), vec3(_738, _739, _740)) * 0.5) + 0.5;
        float _2295 = _2294 * _2294;
        float _4276 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2296 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2297 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2116 = (((cbLight._m0[_2278].x * 0.3183098733425140380859375) * _2296) * _2297) + _2071;
        _2118 = (((cbLight._m0[_2278].y * 0.3183098733425140380859375) * _2296) * _2297) + _2073;
        _2120 = (((cbLight._m0[_2278].z * 0.3183098733425140380859375) * _2296) * _2297) + _2075;
    }
    uint _2123 = _1984 + 8u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _741) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1984].x + _818;
    float _2139 = cbLight._m0[_1984].y + _819;
    float _2140 = cbLight._m0[_1984].z + _820;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_1984].xyz));
    float _4292 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _4303 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2152 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2153 = dot(vec3(_738, _739, _740), vec3(_2145, _2146, _2147));
    float _4314 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2145, _2146, _2147));
    float _4325 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2137 * _2137;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2177 = 1.0 - _2137;
    float _2188 = (0.5 / (((_2152 * ((_2151 * _2177) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2177) + _2137) * _2151))) * _2151;
    float _4336 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2190 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    uint _2204 = _1984 + 9u;
    float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _741) * 0.949999988079071044921875);
    float _2216 = _2215 * _2215;
    float _2217 = cbLight._m0[_2024].x + _818;
    float _2218 = cbLight._m0[_2024].y + _819;
    float _2219 = cbLight._m0[_2024].z + _820;
    float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
    float _2224 = _2223 * _2217;
    float _2225 = _2223 * _2218;
    float _2226 = _2223 * _2219;
    float _2227 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2024].xyz));
    float _4347 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2231 = dot(vec3(_738, _739, _740), vec3(_2224, _2225, _2226));
    float _4358 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2224, _2225, _2226));
    float _4369 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2216 * _2216;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2253 = 1.0 - _2216;
    float _2263 = (0.5 / (((_2152 * ((_2230 * _2253) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2253) + _2216) * _2230))) * _2230;
    float _4380 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2265 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    float _2275 = (((_2252 * cbLight._m0[_2204].x) * _2265) * _2007) + ((((cbLight._m0[_2123].x * _1976) * _2176) * _2190) * _2020);
    float _2276 = (((_2252 * cbLight._m0[_2204].y) * _2265) * _2007) + ((((cbLight._m0[_2123].y * _1977) * _2176) * _2190) * _2020);
    float _2277 = (((_2252 * cbLight._m0[_2204].z) * _2265) * _2007) + ((((cbLight._m0[_2123].z * _1978) * _2176) * _2190) * _2020);
    float _2339;
    float _2341;
    float _2343;
    if (_2060)
    {
        _2339 = _2275;
        _2341 = _2276;
        _2343 = _2277;
    }
    else
    {
        uint _2345 = _1984 + 2u;
        uint _2349 = _1984 + 10u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _741) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _818;
        float _2366 = cbLight._m0[_2345].y + _819;
        float _2367 = cbLight._m0[_2345].z + _820;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2345].xyz));
        float _4391 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2379 = dot(vec3(_738, _739, _740), vec3(_2372, _2373, _2374));
        float _4402 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4413 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2400 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2401 = 1.0 - _2364;
        float _2411 = (0.5 / (((_2152 * ((_2378 * _2401) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2401) + _2364) * _2378))) * _2378;
        float _4424 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2413 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2414 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2339 = (((_2400 * cbLight._m0[_2349].x) * _2413) * _2414) + _2275;
        _2341 = (((_2400 * cbLight._m0[_2349].y) * _2413) * _2414) + _2276;
        _2343 = (((_2400 * cbLight._m0[_2349].z) * _2413) * _2414) + _2277;
    }
    float _2449;
    float _2451;
    float _2453;
    if (_2078)
    {
        _2449 = _2339;
        _2451 = _2341;
        _2453 = _2343;
    }
    else
    {
        uint _2460 = _1984 + 3u;
        uint _2464 = _1984 + 11u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _741) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _818;
        float _2481 = cbLight._m0[_2460].y + _819;
        float _2482 = cbLight._m0[_2460].z + _820;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2460].xyz));
        float _4440 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2494 = dot(vec3(_738, _739, _740), vec3(_2487, _2488, _2489));
        float _4451 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4462 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2515 = (exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2516 = 1.0 - _2479;
        float _2526 = (0.5 / (((_2152 * ((_2493 * _2516) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2516) + _2479) * _2493))) * _2493;
        float _4473 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2449 = (((_2515 * cbLight._m0[_2464].x) * _2528) * _2529) + _2339;
        _2451 = (((_2515 * cbLight._m0[_2464].y) * _2528) * _2529) + _2341;
        _2453 = (((_2515 * cbLight._m0[_2464].z) * _2528) * _2529) + _2343;
    }
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    if (_1982.y == 0u)
    {
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2604;
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2604;
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2604;
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.x;
        uint _2631 = uint((float(_2619.y) * floor(float(uint(cbSceneParam._m0[85u].y * _839) / _2620))) + floor(float(uint(cbSceneParam._m0[85u].x * _838) / _2620)));
        float _2641 = (log2(_2607 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2642 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        uint _2645 = uint(isnan(14.0) ? _2642 : (isnan(_2642) ? 14.0 : min(_2642, 14.0)));
        uvec4 _2650 = texelFetch(g_lightClusterGridBuffer, int(((_2645 << 2u) + (_2631 << 6u)) >> 2u));
        uint _2651 = _2650.x;
        uint _2652 = _2619.z;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        if (((((1u << ((_2652 >> 4u) & 15u)) + 4294967295u) & _2651) == 0u) || ((_2652 & 240u) == 0u))
        {
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
        }
        else
        {
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            uint _2911 = 0u;
            uint _2920;
            bool _2921;
            for (;;)
            {
                _2920 = texelFetch(g_lightClassification, int((((_2645 << 5u) + (_2631 << 9u)) + (_2911 << 2u)) >> 2u)).x;
                _2921 = _2920 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2921)
                {
                    frontier_phi_66_pred = _2905;
                    frontier_phi_66_pred_1 = _2910;
                    frontier_phi_66_pred_2 = _2909;
                    frontier_phi_66_pred_3 = _2908;
                    frontier_phi_66_pred_4 = _2907;
                    frontier_phi_66_pred_5 = _2906;
                }
                else
                {
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    uint _3056;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2920;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    for (;;)
                    {
                        uint _3060 = uint(findLSB(_3056)) + (_2911 << 5u);
                        uint _3057 = (_3056 + 4294967295u) & _3056;
                        uint _3062 = _3060 * 48u;
                        vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 3u)).x));
                        uint _3082 = (_3060 * 48u) + 4u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3101 = (_3060 * 48u) + 8u;
                        vec3 _3112 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x));
                        float _3116 = _3076.x - _2605;
                        float _3117 = _3076.y - _2606;
                        float _3118 = _3076.z - _2607;
                        float _3119 = dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118));
                        float _3122 = inversesqrt(_3119);
                        float _3123 = _3122 * _3116;
                        float _3124 = _3122 * _3117;
                        float _3125 = _3122 * _3118;
                        float _3126 = dot(vec3(_857, _860, _863), vec3(_3123, _3124, _3125));
                        float _3131 = 1.0 - (_3119 * _3076.w);
                        float _4499 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3132 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3133 = sqrt(_3119) * _3095.w;
                        float _3136 = 1.39999997615814208984375 / (_3133 + 1.39999997615814208984375);
                        float _3137 = _3136 * _3136;
                        float _3140 = ((1.0 - _3137) * _3126) + _3137;
                        float _3143 = _3133 * _3133;
                        float _3147 = ((isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0))) * _3132) / ((_3143 * 0.699999988079071044921875) + 1.0);
                        float _3151 = (-0.0) - _2605;
                        float _3152 = (-0.0) - _2606;
                        float _3153 = (-0.0) - _2607;
                        float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3168 = exp2(log2(1.0 / ((_3143 * 3.5) + 5.0)) * 0.25);
                        float _3169 = 1.0 - _917;
                        float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                        float _3177 = _3176 * _3176;
                        float _3178 = _3177 * _3177;
                        float _3179 = _3158 + _3123;
                        float _3180 = _3159 + _3124;
                        float _3181 = _3160 + _3125;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3189 = dot(vec3(_857, _860, _863), vec3(_3158, _3159, _3160));
                        float _4515 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3193 = dot(vec3(_857, _860, _863), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                        float _4526 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3196 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                        float _3201 = _3136 * _3177;
                        float _3202 = _3201 * _3201;
                        float _3205 = ((1.0 - _3202) * _3126) + _3202;
                        float _4537 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3207 = 1.0 - _3177;
                        float _3217 = (0.5 / (((_3206 * ((_3192 * _3207) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3206 * _3207) + _3177) * _3192))) * _3206;
                        float _4548 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3228 = (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) / ((_3200 * _3200) * ((_3143 * 2.1991131305694580078125) + 3.141590118408203125))) * _3132;
                        _2980 = (_3147 * _3095.x) + _3053;
                        _2981 = (_3147 * _3095.y) + _3054;
                        _2982 = (_3147 * _3095.z) + _3055;
                        _2977 = (_3228 * _3112.x) + _3050;
                        _2978 = (_3228 * _3112.y) + _3051;
                        _2979 = (_3228 * _3112.z) + _3052;
                        if (_3057 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _3057;
                        }
                    }
                    frontier_phi_66_pred = _2977;
                    frontier_phi_66_pred_1 = _2982;
                    frontier_phi_66_pred_2 = _2981;
                    frontier_phi_66_pred_3 = _2980;
                    frontier_phi_66_pred_4 = _2979;
                    frontier_phi_66_pred_5 = _2978;
                }
                _2753 = frontier_phi_66_pred;
                _2763 = frontier_phi_66_pred_1;
                _2761 = frontier_phi_66_pred_2;
                _2759 = frontier_phi_66_pred_3;
                _2757 = frontier_phi_66_pred_4;
                _2755 = frontier_phi_66_pred_5;
                uint _2912 = _2911 + 1u;
                if (_2912 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2905 = _2753;
                    _2906 = _2755;
                    _2907 = _2757;
                    _2908 = _2759;
                    _2909 = _2761;
                    _2910 = _2763;
                    _2911 = _2912;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
        }
        uvec4 _2766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2767 = _2766.z;
        uint _2769 = (_2767 >> 8u) & 15u;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((4294967295u << _2769) & _2651) == 0u)
        {
            _2873 = _2752;
            _2875 = _2754;
            _2877 = _2756;
            _2879 = _2758;
            _2881 = _2760;
            _2883 = _2762;
        }
        else
        {
            float _2898 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
            float _2899 = _2898 * _2605;
            float _2900 = _2898 * _2606;
            float _2901 = _2898 * _2607;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2769 < ((_2767 >> 12u) & 15u))
            {
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _3033 = _2752;
                float _3034 = _2754;
                float _3035 = _2756;
                float _3036 = _2758;
                float _3037 = _2760;
                float _3038 = _2762;
                uint _3039 = _2769;
                uint _3048;
                bool _3049;
                for (;;)
                {
                    _3048 = texelFetch(g_lightClassification, int((((_2645 << 5u) + (_2631 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                    _3049 = _3048 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3049)
                    {
                        frontier_phi_77_pred = _3038;
                        frontier_phi_77_pred_1 = _3037;
                        frontier_phi_77_pred_2 = _3036;
                        frontier_phi_77_pred_3 = _3035;
                        frontier_phi_77_pred_4 = _3034;
                        frontier_phi_77_pred_5 = _3033;
                    }
                    else
                    {
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3255 = _3033;
                        float _3256 = _3034;
                        float _3257 = _3035;
                        float _3258 = _3036;
                        float _3259 = _3037;
                        float _3260 = _3038;
                        uint _3261 = _3048;
                        uint _3262;
                        vec4 _3287;
                        float _3288;
                        vec4 _3303;
                        vec3 _3315;
                        vec4 _3330;
                        vec4 _3345;
                        float _3391;
                        bool _3392;
                        for (;;)
                        {
                            uint _3272 = ((_3039 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3261));
                            _3262 = (_3261 + 4294967295u) & _3261;
                            uint _3274 = _3272 * 40u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            _3288 = _3287.w;
                            uint _3290 = (_3272 * 40u) + 4u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3272 * 40u) + 8u;
                            _3315 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x));
                            uint _3317 = (_3272 * 40u) + 16u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3272 * 40u) + 20u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3272 * 40u) + 24u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3366 = (_3272 * 40u) + 28u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3391 = fma(_2607, _3379.z, fma(_2606, _3379.y, _3379.x * _2605)) + _3379.w;
                            _3392 = !((fma(_2607, _3360.z, fma(_2606, _3360.y, _3360.x * _2605)) + _3360.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3392)
                            {
                                float _3419 = _3287.x - _2605;
                                float _3420 = _3287.y - _2606;
                                float _3421 = _3287.z - _2607;
                                float _3422 = dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421));
                                float _3425 = inversesqrt(_3422);
                                float _3426 = _3425 * _3419;
                                float _3427 = _3425 * _3420;
                                float _3428 = _3425 * _3421;
                                float _3432 = 1.0 - (_3422 / (_3288 * _3288));
                                float _4559 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3437 = sqrt(_3422) * _3303.w;
                                float _3439 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                                float _3440 = _3439 * _3439;
                                float _3443 = ((1.0 - _3440) * dot(vec3(_3426, _3427, _3428), vec3(_857, _860, _863))) + _3440;
                                float _3446 = _3437 * _3437;
                                float _3450 = (fma(_2607, _3330.z, fma(_2606, _3330.y, _3330.x * _2605)) + _3330.w) / _3391;
                                float _3451 = (fma(_2607, _3345.z, fma(_2606, _3345.y, _3345.x * _2605)) + _3345.w) / _3391;
                                float _3455 = 1.0 - dot(vec2(_3450, _3451), vec2(_3450, _3451));
                                float _4575 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3457 = _3456 * (((isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))) * _3433) / ((_3446 * 0.699999988079071044921875) + 1.0));
                                float _3469 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                                float _3470 = 1.0 - _917;
                                float _3477 = sqrt(1.0 - ((1.0 - (_3470 * _3470)) * (1.0 - (_3469 * _3469))));
                                float _3478 = _3477 * _3477;
                                float _3479 = _3478 * _3478;
                                float _3480 = _3426 - _2899;
                                float _3481 = _3427 - _2900;
                                float _3482 = _3428 - _2901;
                                float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                                float _3490 = dot(vec3(_857, _860, _863), vec3((-0.0) - _2899, (-0.0) - _2900, (-0.0) - _2901));
                                float _4586 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3494 = dot(vec3(_857, _860, _863), vec3(_3486 * _3480, _3486 * _3481, _3486 * _3482));
                                float _4597 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3501 = ((_3497 * _3497) * (_3479 + (-1.0))) + 1.0;
                                float _3502 = _3439 * _3478;
                                float _3503 = _3502 * _3502;
                                float _3509 = ((1.0 - _3503) * dot(vec3(_857, _860, _863), vec3(_3426, _3427, _3428))) + _3503;
                                float _4608 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3511 = 1.0 - _3478;
                                float _3521 = (0.5 / (((_3510 * ((_3493 * _3511) + _3478)) + 9.9999999392252902907785028219223e-09) + (((_3510 * _3511) + _3478) * _3493))) * _3510;
                                float _4619 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3531 = (_3456 * _3433) * (((_3479 * 3.1415927410125732421875) * (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) / ((_3501 * _3501) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3457 * _3303.y;
                                frontier_phi_83_pred_1 = _3457 * _3303.x;
                                frontier_phi_83_pred_2 = _3531 * _3315.z;
                                frontier_phi_83_pred_3 = _3531 * _3315.y;
                                frontier_phi_83_pred_4 = _3531 * _3315.x;
                                frontier_phi_83_pred_5 = _3457 * _3303.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3539 = frontier_phi_83_pred;
                            _3538 = frontier_phi_83_pred_1;
                            _3537 = frontier_phi_83_pred_2;
                            _3536 = frontier_phi_83_pred_3;
                            _3535 = frontier_phi_83_pred_4;
                            _3540 = frontier_phi_83_pred_5;
                            _3245 = _3538 + _3258;
                            _3246 = _3539 + _3259;
                            _3247 = _3540 + _3260;
                            _3242 = _3535 + _3255;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            if (_3262 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3262;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3247;
                        frontier_phi_77_pred_1 = _3246;
                        frontier_phi_77_pred_2 = _3245;
                        frontier_phi_77_pred_3 = _3244;
                        frontier_phi_77_pred_4 = _3243;
                        frontier_phi_77_pred_5 = _3242;
                    }
                    _2884 = frontier_phi_77_pred;
                    _2882 = frontier_phi_77_pred_1;
                    _2880 = frontier_phi_77_pred_2;
                    _2878 = frontier_phi_77_pred_3;
                    _2876 = frontier_phi_77_pred_4;
                    _2874 = frontier_phi_77_pred_5;
                    uint _3040 = _3039 + 1u;
                    if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3033 = _2874;
                        _3034 = _2876;
                        _3035 = _2878;
                        _3036 = _2880;
                        _3037 = _2882;
                        _3038 = _2884;
                        _3039 = _3040;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2878;
                frontier_phi_58_59_ladder_1 = _2884;
                frontier_phi_58_59_ladder_2 = _2882;
                frontier_phi_58_59_ladder_3 = _2880;
                frontier_phi_58_59_ladder_4 = _2876;
                frontier_phi_58_59_ladder_5 = _2874;
            }
            else
            {
                frontier_phi_58_59_ladder = _2756;
                frontier_phi_58_59_ladder_1 = _2762;
                frontier_phi_58_59_ladder_2 = _2760;
                frontier_phi_58_59_ladder_3 = _2758;
                frontier_phi_58_59_ladder_4 = _2754;
                frontier_phi_58_59_ladder_5 = _2752;
            }
            _2873 = frontier_phi_58_59_ladder_5;
            _2875 = frontier_phi_58_59_ladder_4;
            _2877 = frontier_phi_58_59_ladder;
            _2879 = frontier_phi_58_59_ladder_3;
            _2881 = frontier_phi_58_59_ladder_2;
            _2883 = frontier_phi_58_59_ladder_1;
        }
        float _2888 = isnan(1.0) ? _901 : (isnan(_901) ? 1.0 : min(_901, 1.0));
        _2664 = (_2888 * _2879) + _2116;
        _2666 = (_2888 * _2881) + _2118;
        _2668 = (_2888 * _2883) + _2120;
        _2670 = ((_2873 * 0.039999999105930328369140625) * _2888) + _2449;
        _2672 = ((_2875 * 0.039999999105930328369140625) * _2888) + _2451;
        _2674 = ((_2877 * 0.039999999105930328369140625) * _2888) + _2453;
    }
    else
    {
        _2664 = _2116;
        _2666 = _2118;
        _2668 = _2120;
        _2670 = _2449;
        _2672 = _2451;
        _2674 = _2453;
    }
    float _4635 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4646 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4657 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _2691 = ((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2664 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _901))) + ((_2670 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2692 = ((isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2666 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _901))) + ((_2672 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2693 = ((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2668 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _901))) + ((_2674 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    uint _2694 = _242 + 6u;
    float _2702 = _838 / cbSceneParam._m0[86u].x;
    float _2703 = _839 / cbSceneParam._m0[86u].y;
    vec4 _2717 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2702, _2703, (log2((isnan(cbSceneParam._m0[77u].w) ? _759 : (isnan(_759) ? cbSceneParam._m0[77u].w : min(_759, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2719 = _2717.x;
    float _2720 = _2717.y;
    float _2721 = _2717.z;
    float _2722 = _2717.w;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_759 > cbSceneParam._m0[78u].w)
    {
        float _2777 = isnan(_759) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _759 : min(cbSceneParam._m0[80u].w, _759));
        float _2778 = _2777 / _759;
        float _2789 = _2778 * _811;
        float _2790 = _812 * _2778;
        float _2791 = (-0.0) - _2790;
        float _2793 = _2778 * _813;
        float _2795 = (cbSceneParam._m0[77u].w * _2791) / _2777;
        float _2796 = _2795 + cbSceneParam._m0[79u].w;
        float _2797 = cbSceneParam._m0[79u].w - _2790;
        float _2803 = sqrt(((_2789 * _2789) + (_2790 * _2790)) + (_2793 * _2793));
        float _2806 = (1.0 - (cbSceneParam._m0[77u].w / _2777)) * _2803;
        float _2811 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2813 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2990;
        if (abs((_2791 - _2795) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2990 = ((((_2796 > 0.0) ? exp2(_2811 * _2796) : (2.0 - exp2(_2813 * _2796))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2806;
        }
        else
        {
            float _2934 = 1.0 / cbSceneParam._m0[80u].x;
            float _2935 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : max(_2796, _2797));
            float _2936 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : min(_2796, _2797));
            float _2945 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : min(_2935, 0.0));
            float _2946 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : min(_2936, 0.0));
            _2990 = ((abs(_2803 / _2791) * cbSceneParam._m0[80u].y) * ((((_2945 - _2946) * 2.0) - ((exp2(_2811 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0)))) - exp2(_2811 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0))))) * _2934)) - ((exp2(_2813 * _2945) - exp2(_2813 * _2946)) * _2934))) + (_2806 * cbSceneParam._m0[80u].z);
        }
        vec4 _2992 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2702, _2703, 1.0), 0.0);
        float _3001 = exp2((_2990 * (-1.44269502162933349609375)) * (1.0 - _2992.w));
        float _3002 = log2(_3001);
        float _3018 = log2(_2722);
        _2815 = (exp2(_3018 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].x)) * _2992.x) / cbSceneParam._m0[78u].x)) + _2719;
        _2817 = (exp2(_3018 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].y)) * _2992.y) / cbSceneParam._m0[78u].y)) + _2720;
        _2819 = (exp2(_3018 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].z)) * _2992.z) / cbSceneParam._m0[78u].z)) + _2721;
        _2821 = _3001 * _2722;
    }
    else
    {
        _2815 = _2719;
        _2817 = _2720;
        _2819 = _2721;
        _2821 = _2722;
    }
    bool _3028;
    vec4 _2831;
    vec4 _2853;
    float _2855;
    float _2859;
    float _2860;
    float _2861;
    float _2862;
    bool _2872;
    for (;;)
    {
        _2831 = cbMatDynParam._m0[0u];
        float _2833 = roundEven(_2831.y);
        bool _2834 = _2833 == 3.0;
        float _2835 = log2(_2821);
        float _2842 = exp2(_2835 * cbSceneParam._m0[78u].x) * _2691;
        float _2843 = exp2(_2835 * cbSceneParam._m0[78u].y) * _2692;
        float _2844 = exp2(_2835 * cbSceneParam._m0[78u].z) * _2693;
        float _2851 = _827 + (-0.5);
        _2853 = cbMtdParam._m0[1u];
        _2855 = _2853.y * _2851;
        float _2858 = (_2833 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2859 = _2858 * (_2834 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2815)));
        _2860 = _2858 * (_2834 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2817)));
        _2861 = _2858 * (_2834 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2819)));
        _2862 = _2851 * 0.999000012874603271484375;
        _2872 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2872)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2862) < 0.5)
            {
                _3028 = true;
                break;
            }
        }
        uint _2969 = _876 + uint(_2831.w);
        if ((cbInstanceData._m0[_2969].w < 1.0) && ((cbInstanceData._m0[_2969].w + _2862) < 0.5))
        {
            _3028 = true;
            break;
        }
        if ((_2855 + 1.0) < _2853.x)
        {
            _3028 = true;
            break;
        }
        _3028 = false;
        break;
    }
    float _3233;
    if (_3028)
    {
        discard_state = true;
        _3233 = 0.0;
    }
    else
    {
        _3233 = cbInstanceData._m0[_2694].w;
    }
    SV_Target.x = _2859;
    SV_Target.y = _2860;
    SV_Target.z = _2861;
    SV_Target.w = _3233;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2694].w;
    discard_exit();
}


