#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1286;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].z) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3615 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _438 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_425 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319);
    float _441 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_425 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320);
    float _444 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_425 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321);
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _502 = _500.x;
    float _503 = _500.y;
    float _504 = _500.z;
    float _513 = ((_483.z - _504) * _425) + _504;
    float _516 = ((((_483.x - _502) * _425) + _502) * 2.0) + (-1.0);
    float _518 = ((((_483.y - _503) * _425) + _503) * 2.0) + (-1.0);
    float _519 = dot(vec2(_516, _518), vec2(_516, _518));
    float _3626 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _567 = _565.x;
    float _568 = 1.0 - _567;
    float _574 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _577 = ((isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : min(_574, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _586 = (_577 - ((((((_567 - _568) * cbMtdParam._m0[24u].w) + _568) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _577))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3647 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _594 = (_587 * ((_463.x * cbMtdParam._m0[18u].x) - _438)) + _438;
    float _595 = (_587 * ((_463.y * cbMtdParam._m0[18u].y) - _441)) + _441;
    float _596 = (_587 * ((_463.z * cbMtdParam._m0[18u].z) - _444)) + _444;
    vec4 _608 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _638 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_610 - _611) * cbMtdParam._m0[24u].y) + _611) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3658 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _647 = ((((cbMtdParam._m0[10u].x - _594) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _639) + _594;
    float _648 = ((((cbMtdParam._m0[10u].y - _595) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _639) + _595;
    float _649 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _596)) * _639) + _596;
    float _653 = (cbMtdParam._m0[19u].w * (_540.z - _513)) + _513;
    vec4 _667 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _674 = (_667.x * 2.0) + (-1.0);
    float _675 = (_667.y * 2.0) + (-1.0);
    float _676 = dot(vec2(_674, _675), vec2(_674, _675));
    float _3669 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _684 = (_587 * (_667.z - _653)) + _653;
    float _687 = ((cbMtdParam._m0[23u].y - _684) * _639) + _684;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _712 = (_706.x * 2.0) + (-1.0);
    float _713 = (_706.y * 2.0) + (-1.0);
    float _714 = dot(vec2(_712, _713), vec2(_712, _713));
    float _3680 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _722 = (((_540.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _516;
    float _723 = (((_540.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _518;
    float _735 = (((_674 - _722) + (cbMtdParam._m0[21u].x * _722)) * _587) + _722;
    float _736 = (((_675 - _723) + (cbMtdParam._m0[21u].x * _723)) * _587) + _723;
    float _737 = (_587 * (sqrt(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) - _524)) + _524;
    float _748 = (((_712 - _735) + (_735 * cbMtdParam._m0[22u].z)) * _639) + _735;
    float _749 = (((_713 - _736) + (_736 * cbMtdParam._m0[22u].z)) * _639) + _736;
    float _750 = ((sqrt(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) - _737) * _639) + _737;
    float _752 = cbMtdParam._m0[22u].x + _540.w;
    float _755 = fma(_750, _238 * NORMAL.x, fma(_749, _245 * TANGENT.x, (_231 * _223) * _748));
    float _758 = fma(_750, _238 * NORMAL.y, fma(_749, _245 * TANGENT.y, (_231 * _224) * _748));
    float _761 = fma(_750, _238 * NORMAL.z, fma(_749, _245 * TANGENT.z, (_231 * _225) * _748));
    float _765 = inversesqrt(dot(vec3(_755, _758, _761), vec3(_755, _758, _761)));
    float _766 = _765 * _755;
    float _767 = _765 * _758;
    float _768 = _765 * _761;
    float _3691 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _769 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _3713 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3724 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3735 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _787 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _837 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _827);
    float _838 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _827);
    float _839 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _827);
    float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
    float _844 = _837 * _843;
    float _845 = _838 * _843;
    float _846 = _839 * _843;
    float _852 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _853 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _871 = fma(_768, cbSceneParam._m0[5u].z, fma(_767, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _766));
    float _874 = fma(_768, cbSceneParam._m0[6u].z, fma(_767, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _766));
    float _877 = fma(_768, cbSceneParam._m0[7u].z, fma(_767, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _766));
    uint _891 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _897 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_891].x;
    float _898 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_891].y;
    float _899 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_891].z;
    float _3746 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    vec4 _911 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _852, cbSceneParam._m0[86u].y * _853));
    float _915 = ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * TEXCOORD_5.w) * _911.x;
    float _916 = dot(vec3(_766, _767, _768), vec3(_844, _845, _846));
    float _919 = _916 * 2.0;
    float _923 = (_919 * _766) - _844;
    float _924 = (_919 * _767) - _845;
    float _925 = (_919 * _768) - _846;
    float _929 = abs(dot(vec3(_844, _845, _846), vec3(_766, _767, _768)));
    float _3779 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _931 = sqrt(_769);
    float _944 = exp2((_931 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_931 * 3.0));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1285;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1010 = fma(_984, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976));
        float _1014 = fma(_984, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976));
        float _1018 = fma(_984, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976));
        float _1043 = _976 + _766;
        float _1044 = _980 + _767;
        float _1045 = _984 + _768;
        float _1055 = fma(_1045, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043)) - _1010;
        float _1056 = fma(_1045, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043)) - _1014;
        float _1057 = fma(_1045, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043)) - _1018;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1010 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1014 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[34u].z) + ((((((_1018 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1113 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1079.x + (-0.5));
        float _1115 = _1113 * (_1079.y + (-0.5));
        float _1116 = _1113 * (_1079.z + (-0.5));
        float _1123 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1086.x + (-0.5));
        float _1125 = _1123 * (_1086.y + (-0.5));
        float _1126 = _1123 * (_1086.z + (-0.5));
        float _1133 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1093.x + (-0.5));
        float _1135 = _1133 * (_1093.y + (-0.5));
        float _1136 = _1133 * (_1093.z + (-0.5));
        float _1143 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1100.x + (-0.5));
        float _1145 = _1143 * (_1100.y + (-0.5));
        float _1146 = _1143 * (_1100.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1167 = (dot(vec3(_766, _767, _768), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1177 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3827 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1179 + 1.0))) + _1184) * _1147;
        float _1194 = _1115 * 0.5;
        float _1195 = _1125 * 0.5;
        float _1196 = _1135 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_766, _767, _768), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3860 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1221 + 1.0))) + _1226) * _1148;
        float _1236 = _1116 * 0.5;
        float _1237 = _1126 * 0.5;
        float _1238 = _1136 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_766, _767, _768), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3893 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1263 + 1.0))) + _1268) * _1149;
        _1285 = _1116;
        _1287 = _1115;
        _1288 = _1114;
        _1289 = _1126;
        _1290 = _1125;
        _1291 = _1124;
        _1292 = _1136;
        _1293 = _1135;
        _1294 = _1134;
        _1295 = _1149;
        _1296 = _1148;
        _1297 = _1147;
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _1286;
        _1287 = _1286;
        _1288 = _1286;
        _1289 = _1286;
        _1290 = _1286;
        _1291 = _1286;
        _1292 = _1286;
        _1293 = _1286;
        _1294 = _1286;
        _1295 = _1286;
        _1296 = _1286;
        _1297 = _1286;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1325 = fma(_984, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976));
        float _1329 = fma(_984, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976));
        float _1333 = fma(_984, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976));
        float _1356 = _976 + _766;
        float _1357 = _980 + _767;
        float _1358 = _984 + _768;
        float _1368 = fma(_1358, cbModelParam._m0[30u].z, fma(_1357, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1356)) - _1325;
        float _1369 = fma(_1358, cbModelParam._m0[31u].z, fma(_1357, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1356)) - _1329;
        float _1370 = fma(_1358, cbModelParam._m0[32u].z, fma(_1357, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1356)) - _1333;
        float _1374 = inversesqrt(dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370)));
        float _1387 = ((_1374 * _1368) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1325 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1374 * _1369) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1329 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1374 * _1370) / cbModelParam._m0[35u].z) + ((((((_1333 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        float _1424 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1391.x + (-0.5));
        float _1426 = _1424 * (_1391.y + (-0.5));
        float _1427 = _1424 * (_1391.z + (-0.5));
        float _1434 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1398.x + (-0.5));
        float _1436 = _1434 * (_1398.y + (-0.5));
        float _1437 = _1434 * (_1398.z + (-0.5));
        float _1444 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1405.x + (-0.5));
        float _1446 = _1444 * (_1405.y + (-0.5));
        float _1447 = _1444 * (_1405.z + (-0.5));
        float _1454 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1412.x + (-0.5));
        float _1456 = _1454 * (_1412.y + (-0.5));
        float _1457 = _1454 * (_1412.z + (-0.5));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = _1425 * 0.5;
        float _1462 = _1435 * 0.5;
        float _1463 = _1445 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_766, _767, _768), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _3956 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1488 + 1.0))) + _1493) * _1458;
        float _1503 = _1426 * 0.5;
        float _1504 = _1436 * 0.5;
        float _1505 = _1446 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_766, _767, _768), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _3989 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1530 + 1.0))) + _1535) * _1459;
        float _1545 = _1427 * 0.5;
        float _1546 = _1437 * 0.5;
        float _1547 = _1447 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_766, _767, _768), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4022 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1572 + 1.0))) + _1577) * _1460;
        _1594 = _1427;
        _1595 = _1426;
        _1596 = _1425;
        _1597 = _1437;
        _1598 = _1436;
        _1599 = _1435;
        _1600 = _1447;
        _1601 = _1446;
        _1602 = _1445;
        _1603 = _1460;
        _1604 = _1459;
        _1605 = _1458;
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
    }
    else
    {
        _1594 = _1286;
        _1595 = _1286;
        _1596 = _1286;
        _1597 = _1286;
        _1598 = _1286;
        _1599 = _1286;
        _1600 = _1286;
        _1601 = _1286;
        _1602 = _1286;
        _1603 = _1286;
        _1604 = _1286;
        _1605 = _1286;
        _1606 = 0.0;
        _1607 = 0.0;
        _1608 = 0.0;
    }
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1298)) + _1298;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1299)) + _1299;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1300)) + _1300;
    float _1641 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1644 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1647 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1618));
    float _1662 = _923 * 0.5;
    float _1663 = _924 * 0.5;
    float _1664 = _925 * 0.5;
    float _1665 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1668 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1671 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1705;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1678 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1285, _1289, _1292, _1295));
        float _1682 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1686 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1693 = dot(vec4(cbModelParam._m0[39u]), vec4(_1662, _1663, _1664, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1716;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1707 = dot(vec4(cbModelParam._m0[40u]), vec4(_1662, _1663, _1664, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1720 = (_1716 * cbModelParam._m0[1u].x) + (_1705 * (1.0 - cbModelParam._m0[1u].x));
    float _1730 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _769);
    float _1731 = isnan(_1730) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1730 : min(cbModelParam._m0[25u].z, _1730));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_984, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_984, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_984, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_925, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923));
        float _1792 = fma(_925, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923));
        float _1795 = fma(_925, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1823 = frontier_phi_14_12_ladder;
        }
        float _2044;
        if (_1792 > 0.0)
        {
            _2044 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2044 = frontier_phi_23_19_ladder;
        }
        float _2290;
        if (_1795 > 0.0)
        {
            _2290 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2290 = frontier_phi_35_30_ladder;
        }
        float _2292 = isnan(_2044) ? _1823 : (isnan(_1823) ? _2044 : min(_1823, _2044));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1789) + _1778;
        float _2298 = (_2293 * _1792) + _1782;
        float _2299 = (_2293 * _1795) + _1786;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1731);
            frontier_phi_13_35_ladder = _2423.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2423.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2423.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_13_35_ladder_2;
        _1813 = frontier_phi_13_35_ladder_1;
        _1815 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_923, _924, _925), _1731);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _769);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1873 = fma(_984, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976)) + cbModelParam._m0[21u].w;
        float _1877 = fma(_984, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976)) + cbModelParam._m0[22u].w;
        float _1881 = fma(_984, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976)) + cbModelParam._m0[23u].w;
        float _1884 = fma(_925, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923));
        float _1887 = fma(_925, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923));
        float _1890 = fma(_925, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923));
        float _2049;
        if (_1884 > 0.0)
        {
            _2049 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2049 = frontier_phi_25_21_ladder;
        }
        float _2317;
        if (_1887 > 0.0)
        {
            _2317 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2317 = frontier_phi_37_32_ladder;
        }
        float _2522;
        if (_1890 > 0.0)
        {
            _2522 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2522 = frontier_phi_46_43_ladder;
        }
        float _2524 = isnan(_2317) ? _2049 : (isnan(_2049) ? _2317 : min(_2049, _2317));
        float _2525 = isnan(_2522) ? _2524 : (isnan(_2524) ? _2522 : min(_2524, _2522));
        float _2529 = (_2525 * _1884) + _1873;
        float _2530 = (_2525 * _1887) + _1877;
        float _2531 = (_2525 * _1890) + _1881;
        float _2532 = _2525 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2532;
        float _2535 = _2532 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2531 > _2535) || ((_2531 < _2533) || ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 < _2533) || (_2529 > _2535))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2531, cbModelParam._m0[17u].z, fma(_2530, cbModelParam._m0[17u].y, _2529 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2531, cbModelParam._m0[18u].z, fma(_2530, cbModelParam._m0[18u].y, _2529 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2531, cbModelParam._m0[19u].z, fma(_2530, cbModelParam._m0[19u].y, _2529 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_22_46_ladder = _2730.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2730.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2730.x * cbModelParam._m0[1u].z;
        }
        _1909 = frontier_phi_22_46_ladder_2;
        _1911 = frontier_phi_22_46_ladder_1;
        _1913 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_923, _924, _925), _1820);
        _1909 = _1893.x * cbModelParam._m0[1u].z;
        _1911 = _1893.y * cbModelParam._m0[1u].z;
        _1913 = _1893.z * cbModelParam._m0[1u].z;
    }
    float _1925 = ((((1.0 - _944) * ((_931 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_944 * _931)) * _915;
    float _1926 = _1925 * ((cbModelParam._m0[1u].w * (_1909 - _1811)) + _1811);
    float _1927 = _1925 * ((cbModelParam._m0[1u].w * (_1911 - _1813)) + _1813);
    float _1928 = _1925 * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1931 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1927, cbSceneParam._m0[89u].y, _1926 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1927, cbSceneParam._m0[90u].y, _1926 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1927, cbSceneParam._m0[91u].y, _1926 * cbSceneParam._m0[91u].x));
    vec4 _1945 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_852, _853));
    float _1947 = _1945.w;
    float _1959 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1947);
    float _1960 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1947);
    float _1961 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1947);
    uvec4 _1965 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1967 = _1965.x * 14u;
    uint _1968 = _1967 + 13u;
    float _1975 = _915 + (-1.0);
    float _1980 = (cbLight._m0[_1968].x * _1975) + 1.0;
    float _1981 = (cbLight._m0[_1968].y * _1975) + 1.0;
    float _1982 = (cbLight._m0[_1968].z * _1975) + 1.0;
    float _1983 = (cbLight._m0[_1968].w * _1975) + 1.0;
    uint _1984 = _1967 + 5u;
    float _1990 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
    uint _1994 = _1967 + 4u;
    float _2003 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _2007 = _1967 | 1u;
    float _2018 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_766, _767, _768));
    float _2021 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_766, _767, _768));
    float _4158 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _4169 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2026 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * 0.3183098733425140380859375;
    float _2028 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _2035 = ((cbLight._m0[_1984].x * _1990) * _2028) + (((cbLight._m0[_1994].x * _1959) * _2003) * _2026);
    float _2036 = ((_1990 * cbLight._m0[_1984].y) * _2028) + (((cbLight._m0[_1994].y * _1960) * _2003) * _2026);
    float _2037 = ((_1990 * cbLight._m0[_1984].z) * _2028) + (((cbLight._m0[_1994].z * _1961) * _2003) * _2026);
    uvec4 _2041 = floatBitsToUint(cbLight._m0[_1967 + 12u]);
    bool _2043 = _2041.x == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_2043)
    {
        _2054 = _2035;
        _2056 = _2036;
        _2058 = _2037;
    }
    else
    {
        uint _2062 = _1967 + 6u;
        float _2078 = (dot(vec3(cbLight._m0[_1967 + 2u].xyz), vec3(_766, _767, _768)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4180 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2081 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2054 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _2035;
        _2056 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _2036;
        _2058 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _2037;
    }
    bool _2061 = _2041.y == 0u;
    float _2099;
    float _2101;
    float _2103;
    if (_2061)
    {
        _2099 = _2054;
        _2101 = _2056;
        _2103 = _2058;
    }
    else
    {
        uint _2261 = _1967 + 7u;
        float _2277 = (dot(vec3(cbLight._m0[_1967 + 3u].xyz), vec3(_766, _767, _768)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4196 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2280 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2099 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2054;
        _2101 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2056;
        _2103 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2058;
    }
    uint _2106 = _1967 + 8u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _769) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1967].x + _844;
    float _2122 = cbLight._m0[_1967].y + _845;
    float _2123 = cbLight._m0[_1967].z + _846;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_1967].xyz));
    float _4212 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _2135 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2136 = dot(vec3(_766, _767, _768), vec3(_2128, _2129, _2130));
    float _4234 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2140 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2128, _2129, _2130));
    float _4245 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2144 = _2120 * _2120;
    float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
    float _2159 = (exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2160 = 1.0 - _2120;
    float _2171 = (0.5 / (((_2135 * ((_2134 * _2160) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2160) + _2120) * _2134))) * _2134;
    float _4256 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
    uint _2187 = _1967 + 9u;
    float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _769) * 0.949999988079071044921875);
    float _2199 = _2198 * _2198;
    float _2200 = cbLight._m0[_2007].x + _844;
    float _2201 = cbLight._m0[_2007].y + _845;
    float _2202 = cbLight._m0[_2007].z + _846;
    float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
    float _2207 = _2206 * _2200;
    float _2208 = _2206 * _2201;
    float _2209 = _2206 * _2202;
    float _2210 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2007].xyz));
    float _4267 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2214 = dot(vec3(_766, _767, _768), vec3(_2207, _2208, _2209));
    float _4278 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2218 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2207, _2208, _2209));
    float _4289 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2222 = _2199 * _2199;
    float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
    float _2235 = (exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2236 = 1.0 - _2199;
    float _2246 = (0.5 / (((_2135 * ((_2213 * _2236) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2236) + _2199) * _2213))) * _2213;
    float _4300 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
    float _2258 = (((_2235 * cbLight._m0[_2187].x) * _2248) * _1990) + ((((cbLight._m0[_2106].x * _1959) * _2159) * _2173) * _2003);
    float _2259 = (((_2235 * cbLight._m0[_2187].y) * _2248) * _1990) + ((((cbLight._m0[_2106].y * _1960) * _2159) * _2173) * _2003);
    float _2260 = (((_2235 * cbLight._m0[_2187].z) * _2248) * _1990) + ((((cbLight._m0[_2106].z * _1961) * _2159) * _2173) * _2003);
    float _2322;
    float _2324;
    float _2326;
    if (_2043)
    {
        _2322 = _2258;
        _2324 = _2259;
        _2326 = _2260;
    }
    else
    {
        uint _2328 = _1967 + 2u;
        uint _2332 = _1967 + 10u;
        float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _769) * 0.949999988079071044921875);
        float _2347 = _2346 * _2346;
        float _2348 = cbLight._m0[_2328].x + _844;
        float _2349 = cbLight._m0[_2328].y + _845;
        float _2350 = cbLight._m0[_2328].z + _846;
        float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
        float _2355 = _2354 * _2348;
        float _2356 = _2354 * _2349;
        float _2357 = _2354 * _2350;
        float _2358 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2328].xyz));
        float _4311 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2362 = dot(vec3(_766, _767, _768), vec3(_2355, _2356, _2357));
        float _4322 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2366 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2355, _2356, _2357));
        float _4333 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2370 = _2347 * _2347;
        float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
        float _2383 = (exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2384 = 1.0 - _2347;
        float _2394 = (0.5 / (((_2135 * ((_2361 * _2384) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2384) + _2347) * _2361))) * _2361;
        float _4344 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2396 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
        float _2397 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2322 = (((_2383 * cbLight._m0[_2332].x) * _2396) * _2397) + _2258;
        _2324 = (((_2383 * cbLight._m0[_2332].y) * _2396) * _2397) + _2259;
        _2326 = (((_2383 * cbLight._m0[_2332].z) * _2396) * _2397) + _2260;
    }
    float _2432;
    float _2434;
    float _2436;
    if (_2061)
    {
        _2432 = _2322;
        _2434 = _2324;
        _2436 = _2326;
    }
    else
    {
        uint _2443 = _1967 + 3u;
        uint _2447 = _1967 + 11u;
        float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _769) * 0.949999988079071044921875);
        float _2462 = _2461 * _2461;
        float _2463 = cbLight._m0[_2443].x + _844;
        float _2464 = cbLight._m0[_2443].y + _845;
        float _2465 = cbLight._m0[_2443].z + _846;
        float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
        float _2470 = _2469 * _2463;
        float _2471 = _2469 * _2464;
        float _2472 = _2469 * _2465;
        float _2473 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2443].xyz));
        float _4360 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2477 = dot(vec3(_766, _767, _768), vec3(_2470, _2471, _2472));
        float _4371 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2481 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2470, _2471, _2472));
        float _4382 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2485 = _2462 * _2462;
        float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
        float _2498 = (exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2499 = 1.0 - _2462;
        float _2509 = (0.5 / (((_2135 * ((_2476 * _2499) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2499) + _2462) * _2476))) * _2476;
        float _4393 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2511 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
        float _2512 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2432 = (((_2498 * cbLight._m0[_2447].x) * _2511) * _2512) + _2322;
        _2434 = (((_2498 * cbLight._m0[_2447].y) * _2511) * _2512) + _2324;
        _2436 = (((_2498 * cbLight._m0[_2447].z) * _2511) * _2512) + _2326;
    }
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_1965.y == 0u)
    {
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2588 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2587;
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2587;
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2587;
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.x;
        uint _2614 = uint((float(_2602.y) * floor(float(uint(cbSceneParam._m0[85u].y * _853) / _2603))) + floor(float(uint(cbSceneParam._m0[85u].x * _852) / _2603)));
        float _2624 = (log2(_2590 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2625 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        uint _2628 = uint(isnan(14.0) ? _2625 : (isnan(_2625) ? 14.0 : min(_2625, 14.0)));
        uvec4 _2633 = texelFetch(g_lightClusterGridBuffer, int(((_2628 << 2u) + (_2614 << 6u)) >> 2u));
        uint _2634 = _2633.x;
        uint _2635 = _2602.z;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((((1u << ((_2635 >> 4u) & 15u)) + 4294967295u) & _2634) == 0u) || ((_2635 & 240u) == 0u))
        {
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
        }
        else
        {
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            uint _2886 = 0u;
            uint _2895;
            bool _2896;
            for (;;)
            {
                _2895 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                _2896 = _2895 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2896)
                {
                    frontier_phi_61_pred = _2880;
                    frontier_phi_61_pred_1 = _2885;
                    frontier_phi_61_pred_2 = _2884;
                    frontier_phi_61_pred_3 = _2883;
                    frontier_phi_61_pred_4 = _2882;
                    frontier_phi_61_pred_5 = _2881;
                }
                else
                {
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    uint _3010;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2882;
                    _3007 = _2883;
                    _3008 = _2884;
                    _3009 = _2885;
                    _3010 = _2895;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    for (;;)
                    {
                        uint _3014 = uint(findLSB(_3010)) + (_2886 << 5u);
                        uint _3011 = (_3010 + 4294967295u) & _3010;
                        uint _3016 = _3014 * 48u;
                        vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3036 = (_3014 * 48u) + 4u;
                        vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3055 = (_3014 * 48u) + 8u;
                        vec3 _3066 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x));
                        float _3070 = _3030.x - _2588;
                        float _3071 = _3030.y - _2589;
                        float _3072 = _3030.z - _2590;
                        float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                        float _3076 = inversesqrt(_3073);
                        float _3077 = _3076 * _3070;
                        float _3078 = _3076 * _3071;
                        float _3079 = _3076 * _3072;
                        float _3080 = dot(vec3(_871, _874, _877), vec3(_3077, _3078, _3079));
                        float _3085 = 1.0 - (_3073 * _3030.w);
                        float _4419 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                        float _3087 = sqrt(_3073) * _3049.w;
                        float _3090 = 1.39999997615814208984375 / (_3087 + 1.39999997615814208984375);
                        float _3091 = _3090 * _3090;
                        float _3094 = ((1.0 - _3091) * _3080) + _3091;
                        float _3097 = _3087 * _3087;
                        float _3101 = ((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3086) / ((_3097 * 0.699999988079071044921875) + 1.0);
                        float _3105 = (-0.0) - _2588;
                        float _3106 = (-0.0) - _2589;
                        float _3107 = (-0.0) - _2590;
                        float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3122 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                        float _3123 = 1.0 - _931;
                        float _3130 = sqrt(1.0 - ((1.0 - (_3123 * _3123)) * (1.0 - (_3122 * _3122))));
                        float _3131 = _3130 * _3130;
                        float _3132 = _3131 * _3131;
                        float _3133 = _3112 + _3077;
                        float _3134 = _3113 + _3078;
                        float _3135 = _3114 + _3079;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3143 = dot(vec3(_871, _874, _877), vec3(_3112, _3113, _3114));
                        float _4435 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3147 = dot(vec3(_871, _874, _877), vec3(_3139 * _3133, _3139 * _3134, _3139 * _3135));
                        float _4446 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3154 = ((_3150 * _3150) * (_3132 + (-1.0))) + 1.0;
                        float _3155 = _3090 * _3131;
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3080) + _3156;
                        float _4457 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3161 = 1.0 - _3131;
                        float _3171 = (0.5 / (((_3160 * ((_3146 * _3161) + _3131)) + 9.9999999392252902907785028219223e-09) + (((_3160 * _3161) + _3131) * _3146))) * _3160;
                        float _4468 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3182 = (((_3132 * 3.1415927410125732421875) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) / ((_3154 * _3154) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125))) * _3086;
                        _2939 = (_3101 * _3049.x) + _3007;
                        _2940 = (_3101 * _3049.y) + _3008;
                        _2941 = (_3101 * _3049.z) + _3009;
                        _2936 = (_3182 * _3066.x) + _3004;
                        _2937 = (_3182 * _3066.y) + _3005;
                        _2938 = (_3182 * _3066.z) + _3006;
                        if (_3011 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _2938;
                            _3007 = _2939;
                            _3008 = _2940;
                            _3009 = _2941;
                            _3010 = _3011;
                        }
                    }
                    frontier_phi_61_pred = _2936;
                    frontier_phi_61_pred_1 = _2941;
                    frontier_phi_61_pred_2 = _2940;
                    frontier_phi_61_pred_3 = _2939;
                    frontier_phi_61_pred_4 = _2938;
                    frontier_phi_61_pred_5 = _2937;
                }
                _2736 = frontier_phi_61_pred;
                _2746 = frontier_phi_61_pred_1;
                _2744 = frontier_phi_61_pred_2;
                _2742 = frontier_phi_61_pred_3;
                _2740 = frontier_phi_61_pred_4;
                _2738 = frontier_phi_61_pred_5;
                uint _2887 = _2886 + 1u;
                if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2880 = _2736;
                    _2881 = _2738;
                    _2882 = _2740;
                    _2883 = _2742;
                    _2884 = _2744;
                    _2885 = _2746;
                    _2886 = _2887;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
        }
        uvec4 _2749 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2750 = _2749.z;
        uint _2752 = (_2750 >> 8u) & 15u;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((4294967295u << _2752) & _2634) == 0u)
        {
            _2848 = _2735;
            _2850 = _2737;
            _2852 = _2739;
            _2854 = _2741;
            _2856 = _2743;
            _2858 = _2745;
        }
        else
        {
            float _2873 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
            float _2874 = _2873 * _2588;
            float _2875 = _2873 * _2589;
            float _2876 = _2873 * _2590;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2752 < ((_2750 >> 12u) & 15u))
            {
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2987 = _2735;
                float _2988 = _2737;
                float _2989 = _2739;
                float _2990 = _2741;
                float _2991 = _2743;
                float _2992 = _2745;
                uint _2993 = _2752;
                uint _3002;
                bool _3003;
                for (;;)
                {
                    _3002 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                    _3003 = _3002 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3003)
                    {
                        frontier_phi_67_pred = _2990;
                        frontier_phi_67_pred_1 = _2991;
                        frontier_phi_67_pred_2 = _2992;
                        frontier_phi_67_pred_3 = _2989;
                        frontier_phi_67_pred_4 = _2988;
                        frontier_phi_67_pred_5 = _2987;
                    }
                    else
                    {
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3200 = _2987;
                        float _3201 = _2988;
                        float _3202 = _2989;
                        float _3203 = _2990;
                        float _3204 = _2991;
                        float _3205 = _2992;
                        uint _3206 = _3002;
                        uint _3207;
                        vec4 _3232;
                        float _3233;
                        vec4 _3248;
                        vec3 _3260;
                        vec4 _3275;
                        vec4 _3291;
                        float _3337;
                        bool _3338;
                        for (;;)
                        {
                            uint _3217 = ((_2993 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3206));
                            _3207 = (_3206 + 4294967295u) & _3206;
                            uint _3219 = _3217 * 40u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            _3233 = _3232.w;
                            uint _3235 = (_3217 * 40u) + 4u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3250 = (_3217 * 40u) + 8u;
                            _3260 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x));
                            uint _3262 = (_3217 * 40u) + 16u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3278 = (_3217 * 40u) + 20u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3217 * 40u) + 24u;
                            vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3312 = (_3217 * 40u) + 28u;
                            vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            _3337 = fma(_2590, _3325.z, fma(_2589, _3325.y, _3325.x * _2588)) + _3325.w;
                            _3338 = !((fma(_2590, _3306.z, fma(_2589, _3306.y, _3306.x * _2588)) + _3306.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3338)
                            {
                                float _3365 = _3232.x - _2588;
                                float _3366 = _3232.y - _2589;
                                float _3367 = _3232.z - _2590;
                                float _3368 = dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367));
                                float _3371 = inversesqrt(_3368);
                                float _3372 = _3371 * _3365;
                                float _3373 = _3371 * _3366;
                                float _3374 = _3371 * _3367;
                                float _3378 = 1.0 - (_3368 / (_3233 * _3233));
                                float _4479 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3383 = sqrt(_3368) * _3248.w;
                                float _3385 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                                float _3386 = _3385 * _3385;
                                float _3389 = ((1.0 - _3386) * dot(vec3(_3372, _3373, _3374), vec3(_871, _874, _877))) + _3386;
                                float _3392 = _3383 * _3383;
                                float _3396 = (fma(_2590, _3275.z, fma(_2589, _3275.y, _3275.x * _2588)) + _3275.w) / _3337;
                                float _3397 = (fma(_2590, _3291.z, fma(_2589, _3291.y, _3291.x * _2588)) + _3291.w) / _3337;
                                float _3401 = 1.0 - dot(vec2(_3396, _3397), vec2(_3396, _3397));
                                float _4495 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3402 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3403 = _3402 * (((isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0))) * _3379) / ((_3392 * 0.699999988079071044921875) + 1.0));
                                float _3415 = exp2(log2(1.0 / ((_3392 * 3.5) + 5.0)) * 0.25);
                                float _3416 = 1.0 - _931;
                                float _3423 = sqrt(1.0 - ((1.0 - (_3416 * _3416)) * (1.0 - (_3415 * _3415))));
                                float _3424 = _3423 * _3423;
                                float _3425 = _3424 * _3424;
                                float _3426 = _3372 - _2874;
                                float _3427 = _3373 - _2875;
                                float _3428 = _3374 - _2876;
                                float _3432 = inversesqrt(dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428)));
                                float _3436 = dot(vec3(_871, _874, _877), vec3((-0.0) - _2874, (-0.0) - _2875, (-0.0) - _2876));
                                float _4506 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3439 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3440 = dot(vec3(_871, _874, _877), vec3(_3432 * _3426, _3432 * _3427, _3432 * _3428));
                                float _4517 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3447 = ((_3443 * _3443) * (_3425 + (-1.0))) + 1.0;
                                float _3448 = _3385 * _3424;
                                float _3449 = _3448 * _3448;
                                float _3455 = ((1.0 - _3449) * dot(vec3(_871, _874, _877), vec3(_3372, _3373, _3374))) + _3449;
                                float _4528 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3457 = 1.0 - _3424;
                                float _3467 = (0.5 / (((_3456 * ((_3439 * _3457) + _3424)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3424) * _3439))) * _3456;
                                float _4539 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3477 = (_3402 * _3379) * (((_3425 * 3.1415927410125732421875) * (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) / ((_3447 * _3447) * ((_3392 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3477 * _3260.x;
                                frontier_phi_73_pred_1 = _3477 * _3260.y;
                                frontier_phi_73_pred_2 = _3403 * _3248.z;
                                frontier_phi_73_pred_3 = _3403 * _3248.y;
                                frontier_phi_73_pred_4 = _3403 * _3248.x;
                                frontier_phi_73_pred_5 = _3477 * _3260.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3481 = frontier_phi_73_pred;
                            _3482 = frontier_phi_73_pred_1;
                            _3486 = frontier_phi_73_pred_2;
                            _3485 = frontier_phi_73_pred_3;
                            _3484 = frontier_phi_73_pred_4;
                            _3483 = frontier_phi_73_pred_5;
                            _3190 = _3484 + _3203;
                            _3191 = _3485 + _3204;
                            _3192 = _3486 + _3205;
                            _3187 = _3481 + _3200;
                            _3188 = _3482 + _3201;
                            _3189 = _3483 + _3202;
                            if (_3207 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3207;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3190;
                        frontier_phi_67_pred_1 = _3191;
                        frontier_phi_67_pred_2 = _3192;
                        frontier_phi_67_pred_3 = _3189;
                        frontier_phi_67_pred_4 = _3188;
                        frontier_phi_67_pred_5 = _3187;
                    }
                    _2855 = frontier_phi_67_pred;
                    _2857 = frontier_phi_67_pred_1;
                    _2859 = frontier_phi_67_pred_2;
                    _2853 = frontier_phi_67_pred_3;
                    _2851 = frontier_phi_67_pred_4;
                    _2849 = frontier_phi_67_pred_5;
                    uint _2994 = _2993 + 1u;
                    if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2987 = _2849;
                        _2988 = _2851;
                        _2989 = _2853;
                        _2990 = _2855;
                        _2991 = _2857;
                        _2992 = _2859;
                        _2993 = _2994;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2857;
                frontier_phi_55_56_ladder_1 = _2859;
                frontier_phi_55_56_ladder_2 = _2855;
                frontier_phi_55_56_ladder_3 = _2853;
                frontier_phi_55_56_ladder_4 = _2851;
                frontier_phi_55_56_ladder_5 = _2849;
            }
            else
            {
                frontier_phi_55_56_ladder = _2743;
                frontier_phi_55_56_ladder_1 = _2745;
                frontier_phi_55_56_ladder_2 = _2741;
                frontier_phi_55_56_ladder_3 = _2739;
                frontier_phi_55_56_ladder_4 = _2737;
                frontier_phi_55_56_ladder_5 = _2735;
            }
            _2848 = frontier_phi_55_56_ladder_5;
            _2850 = frontier_phi_55_56_ladder_4;
            _2852 = frontier_phi_55_56_ladder_3;
            _2854 = frontier_phi_55_56_ladder_2;
            _2856 = frontier_phi_55_56_ladder;
            _2858 = frontier_phi_55_56_ladder_1;
        }
        float _2863 = isnan(1.0) ? _915 : (isnan(_915) ? 1.0 : min(_915, 1.0));
        _2647 = (_2863 * _2854) + _2099;
        _2649 = (_2863 * _2856) + _2101;
        _2651 = (_2863 * _2858) + _2103;
        _2653 = ((_2848 * 0.039999999105930328369140625) * _2863) + _2432;
        _2655 = ((_2850 * 0.039999999105930328369140625) * _2863) + _2434;
        _2657 = ((_2852 * 0.039999999105930328369140625) * _2863) + _2436;
    }
    else
    {
        _2647 = _2099;
        _2649 = _2101;
        _2651 = _2103;
        _2653 = _2432;
        _2655 = _2434;
        _2657 = _2436;
    }
    float _4555 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4566 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4577 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    uint _2677 = _251 + 6u;
    float _2685 = _852 / cbSceneParam._m0[86u].x;
    float _2686 = _853 / cbSceneParam._m0[86u].y;
    vec4 _2700 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2685, _2686, (log2((isnan(cbSceneParam._m0[77u].w) ? _787 : (isnan(_787) ? cbSceneParam._m0[77u].w : min(_787, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2702 = _2700.x;
    float _2703 = _2700.y;
    float _2704 = _2700.z;
    float _2705 = _2700.w;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    if (_787 > cbSceneParam._m0[78u].w)
    {
        float _2760 = isnan(_787) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _787 : min(cbSceneParam._m0[80u].w, _787));
        float _2761 = _2760 / _787;
        float _2772 = _2761 * _837;
        float _2773 = _838 * _2761;
        float _2774 = (-0.0) - _2773;
        float _2776 = _2761 * _839;
        float _2778 = (cbSceneParam._m0[77u].w * _2774) / _2760;
        float _2779 = _2778 + cbSceneParam._m0[79u].w;
        float _2780 = cbSceneParam._m0[79u].w - _2773;
        float _2786 = sqrt(((_2772 * _2772) + (_2773 * _2773)) + (_2776 * _2776));
        float _2789 = (1.0 - (cbSceneParam._m0[77u].w / _2760)) * _2786;
        float _2794 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2796 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2949;
        if (abs((_2774 - _2778) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2949 = ((((_2779 > 0.0) ? exp2(_2794 * _2779) : (2.0 - exp2(_2796 * _2779))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2789;
        }
        else
        {
            float _2909 = 1.0 / cbSceneParam._m0[80u].x;
            float _2910 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : max(_2779, _2780));
            float _2911 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : min(_2779, _2780));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            _2949 = ((abs(_2786 / _2774) * cbSceneParam._m0[80u].y) * ((((_2920 - _2921) * 2.0) - ((exp2(_2794 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0)))) - exp2(_2794 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0))))) * _2909)) - ((exp2(_2796 * _2920) - exp2(_2796 * _2921)) * _2909))) + (_2789 * cbSceneParam._m0[80u].z);
        }
        vec4 _2951 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2685, _2686, 1.0), 0.0);
        float _2960 = exp2((_2949 * (-1.44269502162933349609375)) * (1.0 - _2951.w));
        float _2961 = log2(_2960);
        float _2977 = log2(_2705);
        _2798 = (exp2(_2977 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].x)) * _2951.x) / cbSceneParam._m0[78u].x)) + _2702;
        _2800 = (exp2(_2977 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].y)) * _2951.y) / cbSceneParam._m0[78u].y)) + _2703;
        _2802 = (exp2(_2977 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].z)) * _2951.z) / cbSceneParam._m0[78u].z)) + _2704;
        _2804 = _2960 * _2705;
    }
    else
    {
        _2798 = _2702;
        _2800 = _2703;
        _2802 = _2704;
        _2804 = _2705;
    }
    float _2816 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2817 = _2816 == 3.0;
    float _2818 = log2(_2804);
    float _2825 = exp2(_2818 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2647 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _915))) + ((_2653 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1720)) * cbPerFrame._m0[3u].x));
    float _2826 = exp2(_2818 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2649 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _915))) + ((_2655 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1720)) * cbPerFrame._m0[3u].x));
    float _2827 = exp2(_2818 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2651 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _915))) + ((_2657 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1720)) * cbPerFrame._m0[3u].x));
    float _2836 = (_2816 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2836 * (_2817 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2798)));
    SV_Target.y = _2836 * (_2817 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2800)));
    SV_Target.z = _2836 * (_2817 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2802)));
    SV_Target.w = cbInstanceData._m0[_2677].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2677].w;
}


