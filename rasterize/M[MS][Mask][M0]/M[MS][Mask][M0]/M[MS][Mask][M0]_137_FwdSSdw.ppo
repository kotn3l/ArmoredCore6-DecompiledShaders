#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1493;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3819 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _450 = (_443 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _451 = (_443 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _452 = (_443 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].z) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3830 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _560 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _562 = _560.x;
    float _572 = dot(vec4(_562, _560.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _584 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _371.z) * 2.0) - ((((_562 - _572) * cbMtdParam._m0[24u].z) + _572) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3841 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _585 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _598 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_585 * ((_543.x * cbMtdParam._m0[14u].x) - _523)) + _523);
    float _601 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_585 * ((_543.y * cbMtdParam._m0[14u].y) - _524)) + _524);
    float _604 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_585 * ((_543.z * cbMtdParam._m0[14u].z) - _525)) + _525);
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _661 = _659.x;
    float _662 = _659.y;
    float _663 = _659.z;
    float _670 = ((_642.x - _661) * _443) + _661;
    float _671 = ((_642.y - _662) * _443) + _662;
    float _672 = ((_642.z - _663) * _443) + _663;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _695 = ((_684.x - _670) * _516) + _670;
    float _696 = ((_684.y - _671) * _516) + _671;
    float _697 = ((_684.z - _672) * _516) + _672;
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _722 = ((_709.z - _697) * _585) + _697;
    float _725 = ((((_709.x - _695) * _585) + _695) * 2.0) + (-1.0);
    float _727 = ((((_709.y - _696) * _585) + _696) * 2.0) + (-1.0);
    float _728 = dot(vec2(_725, _727), vec2(_725, _727));
    float _3852 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _733 = sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))));
    vec4 _747 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _772 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _774 = _772.x;
    float _775 = 1.0 - _774;
    float _781 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _784 = ((isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : min(_781, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _793 = (_784 - ((((((_774 - _775) * cbMtdParam._m0[24u].w) + _775) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _784))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3873 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _794 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _801 = (_794 * ((_622.x * cbMtdParam._m0[18u].x) - _598)) + _598;
    float _802 = (_794 * ((_622.y * cbMtdParam._m0[18u].y) - _601)) + _601;
    float _803 = (_794 * ((_622.z * cbMtdParam._m0[18u].z) - _604)) + _604;
    vec4 _815 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _817 = _815.x;
    float _818 = 1.0 - _817;
    float _845 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_817 - _818) * cbMtdParam._m0[24u].y) + _818) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3884 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _846 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _854 = ((((cbMtdParam._m0[10u].x - _801) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _846) + _801;
    float _855 = ((((cbMtdParam._m0[10u].y - _802) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _846) + _802;
    float _856 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _803)) * _846) + _803;
    float _860 = (cbMtdParam._m0[19u].w * (_747.z - _722)) + _722;
    vec4 _874 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _881 = (_874.x * 2.0) + (-1.0);
    float _882 = (_874.y * 2.0) + (-1.0);
    float _883 = dot(vec2(_881, _882), vec2(_881, _882));
    float _3895 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _891 = (_794 * (_874.z - _860)) + _860;
    float _894 = ((cbMtdParam._m0[23u].y - _891) * _846) + _891;
    vec4 _913 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _919 = (_913.x * 2.0) + (-1.0);
    float _920 = (_913.y * 2.0) + (-1.0);
    float _921 = dot(vec2(_919, _920), vec2(_919, _920));
    float _3906 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _929 = (((_747.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _725;
    float _930 = (((_747.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _727;
    float _942 = (((_881 - _929) + (cbMtdParam._m0[21u].x * _929)) * _794) + _929;
    float _943 = (((_882 - _930) + (cbMtdParam._m0[21u].x * _930)) * _794) + _930;
    float _944 = (_794 * (sqrt(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) - _733)) + _733;
    float _955 = (((_919 - _942) + (_942 * cbMtdParam._m0[22u].z)) * _846) + _942;
    float _956 = (((_920 - _943) + (_943 * cbMtdParam._m0[22u].z)) * _846) + _943;
    float _957 = ((sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) - _944) * _846) + _944;
    float _959 = cbMtdParam._m0[22u].x + _747.w;
    float _962 = fma(_957, _250 * NORMAL.x, fma(_956, _257 * TANGENT.x, (_243 * _235) * _955));
    float _965 = fma(_957, _250 * NORMAL.y, fma(_956, _257 * TANGENT.y, (_243 * _236) * _955));
    float _968 = fma(_957, _250 * NORMAL.z, fma(_956, _257 * TANGENT.z, (_243 * _237) * _955));
    float _972 = inversesqrt(dot(vec3(_962, _965, _968), vec3(_962, _965, _968)));
    float _973 = _972 * _962;
    float _974 = _972 * _965;
    float _975 = _972 * _968;
    float _3917 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _976 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _3939 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _3950 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _3961 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _994 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1044 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1034);
    float _1045 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1034);
    float _1046 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1034);
    float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
    float _1051 = _1044 * _1050;
    float _1052 = _1045 * _1050;
    float _1053 = _1046 * _1050;
    float _1059 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1060 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1078 = fma(_975, cbSceneParam._m0[5u].z, fma(_974, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _973));
    float _1081 = fma(_975, cbSceneParam._m0[6u].z, fma(_974, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _973));
    float _1084 = fma(_975, cbSceneParam._m0[7u].z, fma(_974, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _973));
    uint _1098 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1104 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_1098].x;
    float _1105 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_1098].y;
    float _1106 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_1098].z;
    float _3972 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1107 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1109 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    vec4 _1118 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1059, cbSceneParam._m0[86u].y * _1060));
    float _1122 = ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * TEXCOORD_5.w) * _1118.x;
    float _1123 = dot(vec3(_973, _974, _975), vec3(_1051, _1052, _1053));
    float _1126 = _1123 * 2.0;
    float _1130 = (_1126 * _973) - _1051;
    float _1131 = (_1126 * _974) - _1052;
    float _1132 = (_1126 * _975) - _1053;
    float _1136 = abs(dot(vec3(_1051, _1052, _1053), vec3(_973, _974, _975)));
    float _4005 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1138 = sqrt(_976);
    float _1151 = exp2((_1138 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1138 * 3.0));
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1187 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1492;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1217 = fma(_1191, cbModelParam._m0[26u].z, fma(_1187, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1183));
        float _1221 = fma(_1191, cbModelParam._m0[27u].z, fma(_1187, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1183));
        float _1225 = fma(_1191, cbModelParam._m0[28u].z, fma(_1187, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1183));
        float _1250 = _1183 + _973;
        float _1251 = _1187 + _974;
        float _1252 = _1191 + _975;
        float _1262 = fma(_1252, cbModelParam._m0[26u].z, fma(_1251, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1250)) - _1217;
        float _1263 = fma(_1252, cbModelParam._m0[27u].z, fma(_1251, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1250)) - _1221;
        float _1264 = fma(_1252, cbModelParam._m0[28u].z, fma(_1251, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1250)) - _1225;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1217 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1221 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[34u].z) + ((((((_1225 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1320 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1286.x + (-0.5));
        float _1322 = _1320 * (_1286.y + (-0.5));
        float _1323 = _1320 * (_1286.z + (-0.5));
        float _1330 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1293.x + (-0.5));
        float _1332 = _1330 * (_1293.y + (-0.5));
        float _1333 = _1330 * (_1293.z + (-0.5));
        float _1340 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1300.x + (-0.5));
        float _1342 = _1340 * (_1300.y + (-0.5));
        float _1343 = _1340 * (_1300.z + (-0.5));
        float _1350 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1307.x + (-0.5));
        float _1352 = _1350 * (_1307.y + (-0.5));
        float _1353 = _1350 * (_1307.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1374 = (dot(vec3(_973, _974, _975), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1384 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4053 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1386 + 1.0))) + _1391) * _1354;
        float _1401 = _1322 * 0.5;
        float _1402 = _1332 * 0.5;
        float _1403 = _1342 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_973, _974, _975), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4086 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1428 + 1.0))) + _1433) * _1355;
        float _1443 = _1323 * 0.5;
        float _1444 = _1333 * 0.5;
        float _1445 = _1343 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_973, _974, _975), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4119 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1470 + 1.0))) + _1475) * _1356;
        _1492 = _1323;
        _1494 = _1322;
        _1495 = _1321;
        _1496 = _1333;
        _1497 = _1332;
        _1498 = _1331;
        _1499 = _1343;
        _1500 = _1342;
        _1501 = _1341;
        _1502 = _1356;
        _1503 = _1355;
        _1504 = _1354;
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1493;
        _1494 = _1493;
        _1495 = _1493;
        _1496 = _1493;
        _1497 = _1493;
        _1498 = _1493;
        _1499 = _1493;
        _1500 = _1493;
        _1501 = _1493;
        _1502 = _1493;
        _1503 = _1493;
        _1504 = _1493;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1530 = fma(_1191, cbModelParam._m0[30u].z, fma(_1187, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183));
        float _1534 = fma(_1191, cbModelParam._m0[31u].z, fma(_1187, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183));
        float _1538 = fma(_1191, cbModelParam._m0[32u].z, fma(_1187, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183));
        float _1561 = _1183 + _973;
        float _1562 = _1187 + _974;
        float _1563 = _1191 + _975;
        float _1573 = fma(_1563, cbModelParam._m0[30u].z, fma(_1562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1561)) - _1530;
        float _1574 = fma(_1563, cbModelParam._m0[31u].z, fma(_1562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1561)) - _1534;
        float _1575 = fma(_1563, cbModelParam._m0[32u].z, fma(_1562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1561)) - _1538;
        float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
        float _1592 = ((_1579 * _1573) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1530 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1593 = ((_1579 * _1574) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1534 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1594 = ((_1579 * _1575) / cbModelParam._m0[35u].z) + ((((((_1538 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        float _1629 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1596.x + (-0.5));
        float _1631 = _1629 * (_1596.y + (-0.5));
        float _1632 = _1629 * (_1596.z + (-0.5));
        float _1639 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1603.x + (-0.5));
        float _1641 = _1639 * (_1603.y + (-0.5));
        float _1642 = _1639 * (_1603.z + (-0.5));
        float _1649 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1610.x + (-0.5));
        float _1651 = _1649 * (_1610.y + (-0.5));
        float _1652 = _1649 * (_1610.z + (-0.5));
        float _1659 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1617.x + (-0.5));
        float _1661 = _1659 * (_1617.y + (-0.5));
        float _1662 = _1659 * (_1617.z + (-0.5));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = _1630 * 0.5;
        float _1667 = _1640 * 0.5;
        float _1668 = _1650 * 0.5;
        float _1669 = dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668));
        float _1674 = (_1669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1669);
        float _1682 = (dot(vec3(_973, _974, _975), vec3(_1674 * _1666, _1674 * _1667, _1674 * _1668)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1691 = sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1693 = _1692 * 2.0;
        float _1697 = (1.0 - _1692) / (_1692 + 1.0);
        float _4182 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1707 = ((((1.0 - _1698) * (_1693 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1693 + 1.0))) + _1698) * _1663;
        float _1708 = _1631 * 0.5;
        float _1709 = _1641 * 0.5;
        float _1710 = _1651 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_973, _974, _975), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1664 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4215 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1735 + 1.0))) + _1740) * _1664;
        float _1750 = _1632 * 0.5;
        float _1751 = _1642 * 0.5;
        float _1752 = _1652 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_973, _974, _975), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4248 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1777 + 1.0))) + _1782) * _1665;
        _1799 = _1632;
        _1800 = _1631;
        _1801 = _1630;
        _1802 = _1642;
        _1803 = _1641;
        _1804 = _1640;
        _1805 = _1652;
        _1806 = _1651;
        _1807 = _1650;
        _1808 = _1665;
        _1809 = _1664;
        _1810 = _1663;
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)));
        _1812 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
    }
    else
    {
        _1799 = _1493;
        _1800 = _1493;
        _1801 = _1493;
        _1802 = _1493;
        _1803 = _1493;
        _1804 = _1493;
        _1805 = _1493;
        _1806 = _1493;
        _1807 = _1493;
        _1808 = _1493;
        _1809 = _1493;
        _1810 = _1493;
        _1811 = 0.0;
        _1812 = 0.0;
        _1813 = 0.0;
    }
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1505)) + _1505;
    float _1824 = (cbModelParam._m0[1u].x * (_1812 - _1506)) + _1506;
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1507)) + _1507;
    float _1846 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1823));
    float _1867 = _1130 * 0.5;
    float _1868 = _1131 * 0.5;
    float _1869 = _1132 * 0.5;
    float _1870 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1873 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1800, _1803, _1806, _1809));
    float _1876 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1910;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1883 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1492, _1496, _1499, _1502));
        float _1887 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1494, _1497, _1500, _1503));
        float _1891 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1495, _1498, _1501, _1504));
        float _1898 = dot(vec4(cbModelParam._m0[39u]), vec4(_1867, _1868, _1869, 1.0));
        _1910 = dot(vec3(isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1910 = 1.0;
    }
    float _1921;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1912 = dot(vec4(cbModelParam._m0[40u]), vec4(_1867, _1868, _1869, 1.0));
        _1921 = dot(vec3(isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1921 = 1.0;
    }
    float _1925 = (_1921 * cbModelParam._m0[1u].x) + (_1910 * (1.0 - cbModelParam._m0[1u].x));
    float _1935 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _976);
    float _1936 = isnan(_1935) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1935 : min(cbModelParam._m0[25u].z, _1935));
    float _2016;
    float _2018;
    float _2020;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1983 = fma(_1191, cbModelParam._m0[13u].z, fma(_1187, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1183)) + cbModelParam._m0[13u].w;
        float _1987 = fma(_1191, cbModelParam._m0[14u].z, fma(_1187, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1183)) + cbModelParam._m0[14u].w;
        float _1991 = fma(_1191, cbModelParam._m0[15u].z, fma(_1187, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1183)) + cbModelParam._m0[15u].w;
        float _1994 = fma(_1132, cbModelParam._m0[13u].z, fma(_1131, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1130));
        float _1997 = fma(_1132, cbModelParam._m0[14u].z, fma(_1131, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1130));
        float _2000 = fma(_1132, cbModelParam._m0[15u].z, fma(_1131, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1130));
        float _2028;
        if (_1994 > 0.0)
        {
            _2028 = abs((1.0 - _1983) / _1994);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1983 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2028 = frontier_phi_14_12_ladder;
        }
        float _2249;
        if (_1997 > 0.0)
        {
            _2249 = abs((1.0 - _1987) / _1997);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1987 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2249 = frontier_phi_23_19_ladder;
        }
        float _2495;
        if (_2000 > 0.0)
        {
            _2495 = abs((1.0 - _1991) / _2000);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1991 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2495 = frontier_phi_35_30_ladder;
        }
        float _2497 = isnan(_2249) ? _2028 : (isnan(_2028) ? _2249 : min(_2028, _2249));
        float _2498 = isnan(_2495) ? _2497 : (isnan(_2497) ? _2495 : min(_2497, _2495));
        float _2502 = (_2498 * _1994) + _1983;
        float _2503 = (_2498 * _1997) + _1987;
        float _2504 = (_2498 * _2000) + _1991;
        float _2505 = _2498 * 9.9999997473787516355514526367188e-05;
        float _2507 = (-1.0) - _2505;
        float _2509 = _2505 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2504 > _2509) || ((_2504 < _2507) || ((_2503 > _2509) || ((_2503 < _2507) || ((_2502 < _2507) || (_2502 > _2509))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2504, cbModelParam._m0[9u].z, fma(_2503, cbModelParam._m0[9u].y, _2502 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2504, cbModelParam._m0[10u].z, fma(_2503, cbModelParam._m0[10u].y, _2502 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2504, cbModelParam._m0[11u].z, fma(_2503, cbModelParam._m0[11u].y, _2502 * cbModelParam._m0[11u].x))), _1936);
            frontier_phi_13_35_ladder = _2628.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2628.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2628.x * cbModelParam._m0[1u].y;
        }
        _2016 = frontier_phi_13_35_ladder_2;
        _2018 = frontier_phi_13_35_ladder_1;
        _2020 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1130, _1131, _1132), _1936);
        _2016 = _2004.x * cbModelParam._m0[1u].y;
        _2018 = _2004.y * cbModelParam._m0[1u].y;
        _2020 = _2004.z * cbModelParam._m0[1u].y;
    }
    float _2024 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _976);
    float _2025 = isnan(_2024) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2024 : min(cbModelParam._m0[25u].w, _2024));
    float _2114;
    float _2116;
    float _2118;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2078 = fma(_1191, cbModelParam._m0[21u].z, fma(_1187, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1183)) + cbModelParam._m0[21u].w;
        float _2082 = fma(_1191, cbModelParam._m0[22u].z, fma(_1187, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1183)) + cbModelParam._m0[22u].w;
        float _2086 = fma(_1191, cbModelParam._m0[23u].z, fma(_1187, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1183)) + cbModelParam._m0[23u].w;
        float _2089 = fma(_1132, cbModelParam._m0[21u].z, fma(_1131, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1130));
        float _2092 = fma(_1132, cbModelParam._m0[22u].z, fma(_1131, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1130));
        float _2095 = fma(_1132, cbModelParam._m0[23u].z, fma(_1131, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1130));
        float _2254;
        if (_2089 > 0.0)
        {
            _2254 = abs((1.0 - _2078) / _2089);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2078 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2254 = frontier_phi_25_21_ladder;
        }
        float _2522;
        if (_2092 > 0.0)
        {
            _2522 = abs((1.0 - _2082) / _2092);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2082 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2522 = frontier_phi_37_32_ladder;
        }
        float _2727;
        if (_2095 > 0.0)
        {
            _2727 = abs((1.0 - _2086) / _2095);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2086 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2727 = frontier_phi_46_43_ladder;
        }
        float _2729 = isnan(_2522) ? _2254 : (isnan(_2254) ? _2522 : min(_2254, _2522));
        float _2730 = isnan(_2727) ? _2729 : (isnan(_2729) ? _2727 : min(_2729, _2727));
        float _2734 = (_2730 * _2089) + _2078;
        float _2735 = (_2730 * _2092) + _2082;
        float _2736 = (_2730 * _2095) + _2086;
        float _2737 = _2730 * 9.9999997473787516355514526367188e-05;
        float _2738 = (-1.0) - _2737;
        float _2740 = _2737 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2736 > _2740) || ((_2736 < _2738) || ((_2735 > _2740) || ((_2735 < _2738) || ((_2734 < _2738) || (_2734 > _2740))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2736, cbModelParam._m0[17u].z, fma(_2735, cbModelParam._m0[17u].y, _2734 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2736, cbModelParam._m0[18u].z, fma(_2735, cbModelParam._m0[18u].y, _2734 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2736, cbModelParam._m0[19u].z, fma(_2735, cbModelParam._m0[19u].y, _2734 * cbModelParam._m0[19u].x))), _2025);
            frontier_phi_22_46_ladder = _2935.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2935.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2935.x * cbModelParam._m0[1u].z;
        }
        _2114 = frontier_phi_22_46_ladder_2;
        _2116 = frontier_phi_22_46_ladder_1;
        _2118 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2098 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1130, _1131, _1132), _2025);
        _2114 = _2098.x * cbModelParam._m0[1u].z;
        _2116 = _2098.y * cbModelParam._m0[1u].z;
        _2118 = _2098.z * cbModelParam._m0[1u].z;
    }
    float _2130 = ((((1.0 - _1151) * ((_1138 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1151 * _1138)) * _1122;
    float _2131 = _2130 * ((cbModelParam._m0[1u].w * (_2114 - _2016)) + _2016);
    float _2132 = _2130 * ((cbModelParam._m0[1u].w * (_2116 - _2018)) + _2018);
    float _2133 = _2130 * ((cbModelParam._m0[1u].w * (_2118 - _2020)) + _2020);
    float _2136 = fma(_2133, cbSceneParam._m0[89u].z, fma(_2132, cbSceneParam._m0[89u].y, _2131 * cbSceneParam._m0[89u].x));
    float _2139 = fma(_2133, cbSceneParam._m0[90u].z, fma(_2132, cbSceneParam._m0[90u].y, _2131 * cbSceneParam._m0[90u].x));
    float _2142 = fma(_2133, cbSceneParam._m0[91u].z, fma(_2132, cbSceneParam._m0[91u].y, _2131 * cbSceneParam._m0[91u].x));
    vec4 _2150 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1059, _1060));
    float _2152 = _2150.w;
    float _2164 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2152);
    float _2165 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2152);
    float _2166 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2152);
    uvec4 _2170 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2172 = _2170.x * 14u;
    uint _2173 = _2172 + 13u;
    float _2180 = _1122 + (-1.0);
    float _2185 = (cbLight._m0[_2173].x * _2180) + 1.0;
    float _2186 = (cbLight._m0[_2173].y * _2180) + 1.0;
    float _2187 = (cbLight._m0[_2173].z * _2180) + 1.0;
    float _2188 = (cbLight._m0[_2173].w * _2180) + 1.0;
    uint _2189 = _2172 + 5u;
    float _2195 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2199 = _2172 + 4u;
    float _2208 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
    uint _2212 = _2172 | 1u;
    float _2223 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_973, _974, _975));
    float _2226 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_973, _974, _975));
    float _4384 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _4395 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2231 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * 0.3183098733425140380859375;
    float _2233 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * 0.3183098733425140380859375;
    float _2240 = ((cbLight._m0[_2189].x * _2195) * _2233) + (((cbLight._m0[_2199].x * _2164) * _2208) * _2231);
    float _2241 = ((_2195 * cbLight._m0[_2189].y) * _2233) + (((cbLight._m0[_2199].y * _2165) * _2208) * _2231);
    float _2242 = ((_2195 * cbLight._m0[_2189].z) * _2233) + (((cbLight._m0[_2199].z * _2166) * _2208) * _2231);
    uvec4 _2246 = floatBitsToUint(cbLight._m0[_2172 + 12u]);
    bool _2248 = _2246.x == 0u;
    float _2259;
    float _2261;
    float _2263;
    if (_2248)
    {
        _2259 = _2240;
        _2261 = _2241;
        _2263 = _2242;
    }
    else
    {
        uint _2267 = _2172 + 6u;
        float _2283 = (dot(vec3(cbLight._m0[_2172 + 2u].xyz), vec3(_973, _974, _975)) * 0.5) + 0.5;
        float _2284 = _2283 * _2283;
        float _4406 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2285 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2286 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2259 = (((cbLight._m0[_2267].x * 0.3183098733425140380859375) * _2285) * _2286) + _2240;
        _2261 = (((cbLight._m0[_2267].y * 0.3183098733425140380859375) * _2285) * _2286) + _2241;
        _2263 = (((cbLight._m0[_2267].z * 0.3183098733425140380859375) * _2285) * _2286) + _2242;
    }
    bool _2266 = _2246.y == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2266)
    {
        _2304 = _2259;
        _2306 = _2261;
        _2308 = _2263;
    }
    else
    {
        uint _2466 = _2172 + 7u;
        float _2482 = (dot(vec3(cbLight._m0[_2172 + 3u].xyz), vec3(_973, _974, _975)) * 0.5) + 0.5;
        float _2483 = _2482 * _2482;
        float _4422 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2484 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2485 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2304 = (((cbLight._m0[_2466].x * 0.3183098733425140380859375) * _2484) * _2485) + _2259;
        _2306 = (((cbLight._m0[_2466].y * 0.3183098733425140380859375) * _2484) * _2485) + _2261;
        _2308 = (((cbLight._m0[_2466].z * 0.3183098733425140380859375) * _2484) * _2485) + _2263;
    }
    uint _2311 = _2172 + 8u;
    float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _976) * 0.949999988079071044921875);
    float _2325 = _2324 * _2324;
    float _2326 = cbLight._m0[_2172].x + _1051;
    float _2327 = cbLight._m0[_2172].y + _1052;
    float _2328 = cbLight._m0[_2172].z + _1053;
    float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
    float _2333 = _2332 * _2326;
    float _2334 = _2332 * _2327;
    float _2335 = _2332 * _2328;
    float _2336 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2172].xyz));
    float _4438 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _4449 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _2340 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2341 = dot(vec3(_973, _974, _975), vec3(_2333, _2334, _2335));
    float _4460 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2345 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2333, _2334, _2335));
    float _4471 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2349 = _2325 * _2325;
    float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
    float _2364 = (exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2365 = 1.0 - _2325;
    float _2376 = (0.5 / (((_2340 * ((_2339 * _2365) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2365) + _2325) * _2339))) * _2339;
    float _4482 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2378 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
    uint _2392 = _2172 + 9u;
    float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _976) * 0.949999988079071044921875);
    float _2404 = _2403 * _2403;
    float _2405 = cbLight._m0[_2212].x + _1051;
    float _2406 = cbLight._m0[_2212].y + _1052;
    float _2407 = cbLight._m0[_2212].z + _1053;
    float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
    float _2412 = _2411 * _2405;
    float _2413 = _2411 * _2406;
    float _2414 = _2411 * _2407;
    float _2415 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2212].xyz));
    float _4493 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2419 = dot(vec3(_973, _974, _975), vec3(_2412, _2413, _2414));
    float _4504 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2423 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2412, _2413, _2414));
    float _4515 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2427 = _2404 * _2404;
    float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
    float _2440 = (exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2441 = 1.0 - _2404;
    float _2451 = (0.5 / (((_2340 * ((_2418 * _2441) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2441) + _2404) * _2418))) * _2418;
    float _4526 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2453 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
    float _2463 = (((_2440 * cbLight._m0[_2392].x) * _2453) * _2195) + ((((cbLight._m0[_2311].x * _2164) * _2364) * _2378) * _2208);
    float _2464 = (((_2440 * cbLight._m0[_2392].y) * _2453) * _2195) + ((((cbLight._m0[_2311].y * _2165) * _2364) * _2378) * _2208);
    float _2465 = (((_2440 * cbLight._m0[_2392].z) * _2453) * _2195) + ((((cbLight._m0[_2311].z * _2166) * _2364) * _2378) * _2208);
    float _2527;
    float _2529;
    float _2531;
    if (_2248)
    {
        _2527 = _2463;
        _2529 = _2464;
        _2531 = _2465;
    }
    else
    {
        uint _2533 = _2172 + 2u;
        uint _2537 = _2172 + 10u;
        float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2533].w)) * _976) * 0.949999988079071044921875);
        float _2552 = _2551 * _2551;
        float _2553 = cbLight._m0[_2533].x + _1051;
        float _2554 = cbLight._m0[_2533].y + _1052;
        float _2555 = cbLight._m0[_2533].z + _1053;
        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
        float _2560 = _2559 * _2553;
        float _2561 = _2559 * _2554;
        float _2562 = _2559 * _2555;
        float _2563 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2533].xyz));
        float _4537 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2567 = dot(vec3(_973, _974, _975), vec3(_2560, _2561, _2562));
        float _4548 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2571 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_2560, _2561, _2562));
        float _4559 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2575 = _2552 * _2552;
        float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
        float _2588 = (exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2589 = 1.0 - _2552;
        float _2599 = (0.5 / (((_2340 * ((_2566 * _2589) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2589) + _2552) * _2566))) * _2566;
        float _4570 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2527 = (((_2588 * cbLight._m0[_2537].x) * _2601) * _2602) + _2463;
        _2529 = (((_2588 * cbLight._m0[_2537].y) * _2601) * _2602) + _2464;
        _2531 = (((_2588 * cbLight._m0[_2537].z) * _2601) * _2602) + _2465;
    }
    float _2637;
    float _2639;
    float _2641;
    if (_2266)
    {
        _2637 = _2527;
        _2639 = _2529;
        _2641 = _2531;
    }
    else
    {
        uint _2648 = _2172 + 3u;
        uint _2652 = _2172 + 11u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _976) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _1051;
        float _2669 = cbLight._m0[_2648].y + _1052;
        float _2670 = cbLight._m0[_2648].z + _1053;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2648].xyz));
        float _4586 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2682 = dot(vec3(_973, _974, _975), vec3(_2675, _2676, _2677));
        float _4597 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4608 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2703 = (exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2704 = 1.0 - _2667;
        float _2714 = (0.5 / (((_2340 * ((_2681 * _2704) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2704) + _2667) * _2681))) * _2681;
        float _4619 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2637 = (((_2703 * cbLight._m0[_2652].x) * _2716) * _2717) + _2527;
        _2639 = (((_2703 * cbLight._m0[_2652].y) * _2716) * _2717) + _2529;
        _2641 = (((_2703 * cbLight._m0[_2652].z) * _2716) * _2717) + _2531;
    }
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_2170.y == 0u)
    {
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2793 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2792;
        float _2794 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2792;
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2792;
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.x;
        uint _2819 = uint((float(_2807.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1060) / _2808))) + floor(float(uint(cbSceneParam._m0[85u].x * _1059) / _2808)));
        float _2829 = (log2(_2795 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2830 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        uint _2833 = uint(isnan(14.0) ? _2830 : (isnan(_2830) ? 14.0 : min(_2830, 14.0)));
        uvec4 _2838 = texelFetch(g_lightClusterGridBuffer, int(((_2833 << 2u) + (_2819 << 6u)) >> 2u));
        uint _2839 = _2838.x;
        uint _2840 = _2807.z;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        if (((((1u << ((_2840 >> 4u) & 15u)) + 4294967295u) & _2839) == 0u) || ((_2840 & 240u) == 0u))
        {
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
        }
        else
        {
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            uint _3091 = 0u;
            uint _3100;
            bool _3101;
            for (;;)
            {
                _3100 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3091 << 2u)) >> 2u)).x;
                _3101 = _3100 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3101)
                {
                    frontier_phi_61_pred = _3085;
                    frontier_phi_61_pred_1 = _3090;
                    frontier_phi_61_pred_2 = _3089;
                    frontier_phi_61_pred_3 = _3088;
                    frontier_phi_61_pred_4 = _3087;
                    frontier_phi_61_pred_5 = _3086;
                }
                else
                {
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    uint _3215;
                    _3209 = _3085;
                    _3210 = _3086;
                    _3211 = _3087;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3090;
                    _3215 = _3100;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    for (;;)
                    {
                        uint _3219 = uint(findLSB(_3215)) + (_3091 << 5u);
                        uint _3216 = (_3215 + 4294967295u) & _3215;
                        uint _3221 = _3219 * 48u;
                        vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 3u)).x));
                        uint _3241 = (_3219 * 48u) + 4u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3260 = (_3219 * 48u) + 8u;
                        vec3 _3271 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x));
                        float _3275 = _3235.x - _2793;
                        float _3276 = _3235.y - _2794;
                        float _3277 = _3235.z - _2795;
                        float _3278 = dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277));
                        float _3281 = inversesqrt(_3278);
                        float _3282 = _3281 * _3275;
                        float _3283 = _3281 * _3276;
                        float _3284 = _3281 * _3277;
                        float _3285 = dot(vec3(_1078, _1081, _1084), vec3(_3282, _3283, _3284));
                        float _3290 = 1.0 - (_3278 * _3235.w);
                        float _4645 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3292 = sqrt(_3278) * _3254.w;
                        float _3295 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3285) + _3296;
                        float _3302 = _3292 * _3292;
                        float _3306 = ((isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0))) * _3291) / ((_3302 * 0.699999988079071044921875) + 1.0);
                        float _3310 = (-0.0) - _2793;
                        float _3311 = (-0.0) - _2794;
                        float _3312 = (-0.0) - _2795;
                        float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                        float _3317 = _3316 * _3310;
                        float _3318 = _3316 * _3311;
                        float _3319 = _3316 * _3312;
                        float _3327 = exp2(log2(1.0 / ((_3302 * 3.5) + 5.0)) * 0.25);
                        float _3328 = 1.0 - _1138;
                        float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                        float _3336 = _3335 * _3335;
                        float _3337 = _3336 * _3336;
                        float _3338 = _3317 + _3282;
                        float _3339 = _3318 + _3283;
                        float _3340 = _3319 + _3284;
                        float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                        float _3348 = dot(vec3(_1078, _1081, _1084), vec3(_3317, _3318, _3319));
                        float _4661 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3352 = dot(vec3(_1078, _1081, _1084), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                        float _4672 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3355 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                        float _3360 = _3295 * _3336;
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3285) + _3361;
                        float _4683 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                        float _3366 = 1.0 - _3336;
                        float _3376 = (0.5 / (((_3365 * ((_3351 * _3366) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3336) * _3351))) * _3365;
                        float _4694 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3387 = (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) / ((_3359 * _3359) * ((_3302 * 2.1991131305694580078125) + 3.141590118408203125))) * _3291;
                        _3144 = (_3306 * _3254.x) + _3212;
                        _3145 = (_3306 * _3254.y) + _3213;
                        _3146 = (_3306 * _3254.z) + _3214;
                        _3141 = (_3387 * _3271.x) + _3209;
                        _3142 = (_3387 * _3271.y) + _3210;
                        _3143 = (_3387 * _3271.z) + _3211;
                        if (_3216 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3209 = _3141;
                            _3210 = _3142;
                            _3211 = _3143;
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3146;
                            _3215 = _3216;
                        }
                    }
                    frontier_phi_61_pred = _3141;
                    frontier_phi_61_pred_1 = _3146;
                    frontier_phi_61_pred_2 = _3145;
                    frontier_phi_61_pred_3 = _3144;
                    frontier_phi_61_pred_4 = _3143;
                    frontier_phi_61_pred_5 = _3142;
                }
                _2941 = frontier_phi_61_pred;
                _2951 = frontier_phi_61_pred_1;
                _2949 = frontier_phi_61_pred_2;
                _2947 = frontier_phi_61_pred_3;
                _2945 = frontier_phi_61_pred_4;
                _2943 = frontier_phi_61_pred_5;
                uint _3092 = _3091 + 1u;
                if (_3092 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3085 = _2941;
                    _3086 = _2943;
                    _3087 = _2945;
                    _3088 = _2947;
                    _3089 = _2949;
                    _3090 = _2951;
                    _3091 = _3092;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
        }
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.z;
        uint _2957 = (_2955 >> 8u) & 15u;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        if (((4294967295u << _2957) & _2839) == 0u)
        {
            _3053 = _2940;
            _3055 = _2942;
            _3057 = _2944;
            _3059 = _2946;
            _3061 = _2948;
            _3063 = _2950;
        }
        else
        {
            float _3078 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
            float _3079 = _3078 * _2793;
            float _3080 = _3078 * _2794;
            float _3081 = _3078 * _2795;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2957 < ((_2955 >> 12u) & 15u))
            {
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3192 = _2940;
                float _3193 = _2942;
                float _3194 = _2944;
                float _3195 = _2946;
                float _3196 = _2948;
                float _3197 = _2950;
                uint _3198 = _2957;
                uint _3207;
                bool _3208;
                for (;;)
                {
                    _3207 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3198 << 2u)) >> 2u)).x;
                    _3208 = _3207 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3208)
                    {
                        frontier_phi_67_pred = _3195;
                        frontier_phi_67_pred_1 = _3196;
                        frontier_phi_67_pred_2 = _3197;
                        frontier_phi_67_pred_3 = _3194;
                        frontier_phi_67_pred_4 = _3193;
                        frontier_phi_67_pred_5 = _3192;
                    }
                    else
                    {
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3405 = _3192;
                        float _3406 = _3193;
                        float _3407 = _3194;
                        float _3408 = _3195;
                        float _3409 = _3196;
                        float _3410 = _3197;
                        uint _3411 = _3207;
                        uint _3412;
                        vec4 _3437;
                        float _3438;
                        vec4 _3453;
                        vec3 _3465;
                        vec4 _3480;
                        vec4 _3495;
                        float _3541;
                        bool _3542;
                        for (;;)
                        {
                            uint _3422 = ((_3198 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3411));
                            _3412 = (_3411 + 4294967295u) & _3411;
                            uint _3424 = _3422 * 40u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            _3438 = _3437.w;
                            uint _3440 = (_3422 * 40u) + 4u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3422 * 40u) + 8u;
                            _3465 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x));
                            uint _3467 = (_3422 * 40u) + 16u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3422 * 40u) + 20u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3422 * 40u) + 24u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3516 = (_3422 * 40u) + 28u;
                            vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            _3541 = fma(_2795, _3529.z, fma(_2794, _3529.y, _3529.x * _2793)) + _3529.w;
                            _3542 = !((fma(_2795, _3510.z, fma(_2794, _3510.y, _3510.x * _2793)) + _3510.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3542)
                            {
                                float _3569 = _3437.x - _2793;
                                float _3570 = _3437.y - _2794;
                                float _3571 = _3437.z - _2795;
                                float _3572 = dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571));
                                float _3575 = inversesqrt(_3572);
                                float _3576 = _3575 * _3569;
                                float _3577 = _3575 * _3570;
                                float _3578 = _3575 * _3571;
                                float _3582 = 1.0 - (_3572 / (_3438 * _3438));
                                float _4705 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3587 = sqrt(_3572) * _3453.w;
                                float _3589 = 1.39999997615814208984375 / (_3587 + 1.39999997615814208984375);
                                float _3590 = _3589 * _3589;
                                float _3593 = ((1.0 - _3590) * dot(vec3(_3576, _3577, _3578), vec3(_1078, _1081, _1084))) + _3590;
                                float _3596 = _3587 * _3587;
                                float _3600 = (fma(_2795, _3480.z, fma(_2794, _3480.y, _3480.x * _2793)) + _3480.w) / _3541;
                                float _3601 = (fma(_2795, _3495.z, fma(_2794, _3495.y, _3495.x * _2793)) + _3495.w) / _3541;
                                float _3605 = 1.0 - dot(vec2(_3600, _3601), vec2(_3600, _3601));
                                float _4721 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3607 = _3606 * (((isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0))) * _3583) / ((_3596 * 0.699999988079071044921875) + 1.0));
                                float _3619 = exp2(log2(1.0 / ((_3596 * 3.5) + 5.0)) * 0.25);
                                float _3620 = 1.0 - _1138;
                                float _3627 = sqrt(1.0 - ((1.0 - (_3620 * _3620)) * (1.0 - (_3619 * _3619))));
                                float _3628 = _3627 * _3627;
                                float _3629 = _3628 * _3628;
                                float _3630 = _3576 - _3079;
                                float _3631 = _3577 - _3080;
                                float _3632 = _3578 - _3081;
                                float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                                float _3640 = dot(vec3(_1078, _1081, _1084), vec3((-0.0) - _3079, (-0.0) - _3080, (-0.0) - _3081));
                                float _4732 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3644 = dot(vec3(_1078, _1081, _1084), vec3(_3636 * _3630, _3636 * _3631, _3636 * _3632));
                                float _4743 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3647 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3651 = ((_3647 * _3647) * (_3629 + (-1.0))) + 1.0;
                                float _3652 = _3589 * _3628;
                                float _3653 = _3652 * _3652;
                                float _3659 = ((1.0 - _3653) * dot(vec3(_1078, _1081, _1084), vec3(_3576, _3577, _3578))) + _3653;
                                float _4754 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3661 = 1.0 - _3628;
                                float _3671 = (0.5 / (((_3660 * ((_3643 * _3661) + _3628)) + 9.9999999392252902907785028219223e-09) + (((_3660 * _3661) + _3628) * _3643))) * _3660;
                                float _4765 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3681 = (_3606 * _3583) * (((_3629 * 3.1415927410125732421875) * (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) / ((_3651 * _3651) * ((_3596 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3681 * _3465.x;
                                frontier_phi_73_pred_1 = _3681 * _3465.y;
                                frontier_phi_73_pred_2 = _3607 * _3453.z;
                                frontier_phi_73_pred_3 = _3607 * _3453.y;
                                frontier_phi_73_pred_4 = _3607 * _3453.x;
                                frontier_phi_73_pred_5 = _3681 * _3465.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3685 = frontier_phi_73_pred;
                            _3686 = frontier_phi_73_pred_1;
                            _3690 = frontier_phi_73_pred_2;
                            _3689 = frontier_phi_73_pred_3;
                            _3688 = frontier_phi_73_pred_4;
                            _3687 = frontier_phi_73_pred_5;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            if (_3412 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3412;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3395;
                        frontier_phi_67_pred_1 = _3396;
                        frontier_phi_67_pred_2 = _3397;
                        frontier_phi_67_pred_3 = _3394;
                        frontier_phi_67_pred_4 = _3393;
                        frontier_phi_67_pred_5 = _3392;
                    }
                    _3060 = frontier_phi_67_pred;
                    _3062 = frontier_phi_67_pred_1;
                    _3064 = frontier_phi_67_pred_2;
                    _3058 = frontier_phi_67_pred_3;
                    _3056 = frontier_phi_67_pred_4;
                    _3054 = frontier_phi_67_pred_5;
                    uint _3199 = _3198 + 1u;
                    if (_3199 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3192 = _3054;
                        _3193 = _3056;
                        _3194 = _3058;
                        _3195 = _3060;
                        _3196 = _3062;
                        _3197 = _3064;
                        _3198 = _3199;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3062;
                frontier_phi_55_56_ladder_1 = _3064;
                frontier_phi_55_56_ladder_2 = _3060;
                frontier_phi_55_56_ladder_3 = _3058;
                frontier_phi_55_56_ladder_4 = _3056;
                frontier_phi_55_56_ladder_5 = _3054;
            }
            else
            {
                frontier_phi_55_56_ladder = _2948;
                frontier_phi_55_56_ladder_1 = _2950;
                frontier_phi_55_56_ladder_2 = _2946;
                frontier_phi_55_56_ladder_3 = _2944;
                frontier_phi_55_56_ladder_4 = _2942;
                frontier_phi_55_56_ladder_5 = _2940;
            }
            _3053 = frontier_phi_55_56_ladder_5;
            _3055 = frontier_phi_55_56_ladder_4;
            _3057 = frontier_phi_55_56_ladder_3;
            _3059 = frontier_phi_55_56_ladder_2;
            _3061 = frontier_phi_55_56_ladder;
            _3063 = frontier_phi_55_56_ladder_1;
        }
        float _3068 = isnan(1.0) ? _1122 : (isnan(_1122) ? 1.0 : min(_1122, 1.0));
        _2852 = (_3068 * _3059) + _2304;
        _2854 = (_3068 * _3061) + _2306;
        _2856 = (_3068 * _3063) + _2308;
        _2858 = ((_3053 * 0.039999999105930328369140625) * _3068) + _2637;
        _2860 = ((_3055 * 0.039999999105930328369140625) * _3068) + _2639;
        _2862 = ((_3057 * 0.039999999105930328369140625) * _3068) + _2641;
    }
    else
    {
        _2852 = _2304;
        _2854 = _2306;
        _2856 = _2308;
        _2858 = _2637;
        _2860 = _2639;
        _2862 = _2641;
    }
    float _4781 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _4792 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _4803 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    uint _2882 = _263 + 6u;
    float _2890 = _1059 / cbSceneParam._m0[86u].x;
    float _2891 = _1060 / cbSceneParam._m0[86u].y;
    vec4 _2905 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, (log2((isnan(cbSceneParam._m0[77u].w) ? _994 : (isnan(_994) ? cbSceneParam._m0[77u].w : min(_994, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2907 = _2905.x;
    float _2908 = _2905.y;
    float _2909 = _2905.z;
    float _2910 = _2905.w;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    if (_994 > cbSceneParam._m0[78u].w)
    {
        float _2965 = isnan(_994) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _994 : min(cbSceneParam._m0[80u].w, _994));
        float _2966 = _2965 / _994;
        float _2977 = _2966 * _1044;
        float _2978 = _1045 * _2966;
        float _2979 = (-0.0) - _2978;
        float _2981 = _2966 * _1046;
        float _2983 = (cbSceneParam._m0[77u].w * _2979) / _2965;
        float _2984 = _2983 + cbSceneParam._m0[79u].w;
        float _2985 = cbSceneParam._m0[79u].w - _2978;
        float _2991 = sqrt(((_2977 * _2977) + (_2978 * _2978)) + (_2981 * _2981));
        float _2994 = (1.0 - (cbSceneParam._m0[77u].w / _2965)) * _2991;
        float _2999 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3001 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3154;
        if (abs((_2979 - _2983) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3154 = ((((_2984 > 0.0) ? exp2(_2999 * _2984) : (2.0 - exp2(_3001 * _2984))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2994;
        }
        else
        {
            float _3114 = 1.0 / cbSceneParam._m0[80u].x;
            float _3115 = isnan(_2985) ? _2984 : (isnan(_2984) ? _2985 : max(_2984, _2985));
            float _3116 = isnan(_2985) ? _2984 : (isnan(_2984) ? _2985 : min(_2984, _2985));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            _3154 = ((abs(_2991 / _2979) * cbSceneParam._m0[80u].y) * ((((_3125 - _3126) * 2.0) - ((exp2(_2999 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0)))) - exp2(_2999 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))))) * _3114)) - ((exp2(_3001 * _3125) - exp2(_3001 * _3126)) * _3114))) + (_2994 * cbSceneParam._m0[80u].z);
        }
        vec4 _3156 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, 1.0), 0.0);
        float _3165 = exp2((_3154 * (-1.44269502162933349609375)) * (1.0 - _3156.w));
        float _3166 = log2(_3165);
        float _3182 = log2(_2910);
        _3003 = (exp2(_3182 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].x)) * _3156.x) / cbSceneParam._m0[78u].x)) + _2907;
        _3005 = (exp2(_3182 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].y)) * _3156.y) / cbSceneParam._m0[78u].y)) + _2908;
        _3007 = (exp2(_3182 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].z)) * _3156.z) / cbSceneParam._m0[78u].z)) + _2909;
        _3009 = _3165 * _2910;
    }
    else
    {
        _3003 = _2907;
        _3005 = _2908;
        _3007 = _2909;
        _3009 = _2910;
    }
    float _3021 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3022 = _3021 == 3.0;
    float _3023 = log2(_3009);
    float _3030 = exp2(_3023 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2852 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1122))) + ((_2858 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1925)) * cbPerFrame._m0[3u].x));
    float _3031 = exp2(_3023 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2854 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1122))) + ((_2860 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1925)) * cbPerFrame._m0[3u].x));
    float _3032 = exp2(_3023 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2856 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1122))) + ((_2862 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1925)) * cbPerFrame._m0[3u].x));
    float _3041 = (_3021 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3041 * (_3022 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3003)));
    SV_Target.y = _3041 * (_3022 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3005)));
    SV_Target.z = _3041 * (_3022 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3007)));
    SV_Target.w = cbInstanceData._m0[_2882].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2882].w;
}


