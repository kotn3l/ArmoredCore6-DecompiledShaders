#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1287;
float _3927;
float _3928;
float _3929;
float _3930;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _373 = _371.x;
    float _385 = dot(vec4(_373, _371.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _402 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _334.x) * 2.0) - ((((_373 - _385) * cbMtdParam._m0[24u].z) + _385) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3939 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _410 = (_403 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _411 = (_403 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _412 = (_403 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _429 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _461 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _475 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _334.y) * 2.0) - ((((_451 - _461) * cbMtdParam._m0[24u].z) + _461) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3950 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _483 = (_476 * ((_429.x * cbMtdParam._m0[13u].x) - _410)) + _410;
    float _484 = (_476 * ((_429.y * cbMtdParam._m0[13u].y) - _411)) + _411;
    float _485 = (_476 * ((_429.z * cbMtdParam._m0[13u].z) - _412)) + _412;
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _524 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _545 = _541.z;
    float _552 = ((_524.x - _543) * _403) + _543;
    float _553 = ((_524.y - _544) * _403) + _544;
    float _554 = ((_524.z - _545) * _403) + _545;
    vec4 _566 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _579 = ((_566.z - _554) * _476) + _554;
    float _582 = ((((_566.x - _552) * _476) + _552) * 2.0) + (-1.0);
    float _584 = ((((_566.y - _553) * _476) + _553) * 2.0) + (-1.0);
    float _585 = dot(vec2(_582, _584), vec2(_582, _584));
    float _3961 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _590 = sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _645 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_631 - _632) * cbMtdParam._m0[24u].w) + _632) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3972 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _646 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _653 = (_646 * ((_504.x * cbMtdParam._m0[18u].x) - _483)) + _483;
    float _654 = (_646 * ((_504.y * cbMtdParam._m0[18u].y) - _484)) + _484;
    float _655 = (_646 * ((_504.z * cbMtdParam._m0[18u].z) - _485)) + _485;
    float _659 = (cbMtdParam._m0[19u].w * (_604.z - _579)) + _579;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _679 = (_672.x * 2.0) + (-1.0);
    float _680 = (_672.y * 2.0) + (-1.0);
    float _681 = dot(vec2(_679, _680), vec2(_679, _680));
    float _3983 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _689 = (_646 * (_672.z - _659)) + _659;
    float _692 = (((_604.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _582;
    float _693 = (((_604.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _584;
    float _705 = (((_679 - _692) + (cbMtdParam._m0[21u].x * _692)) * _646) + _692;
    float _706 = (((_680 - _693) + (cbMtdParam._m0[21u].x * _693)) * _646) + _693;
    float _707 = (_646 * (sqrt(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) - _590)) + _590;
    float _711 = cbMtdParam._m0[22u].x + _604.w;
    float _714 = fma(_707, _233 * NORMAL.x, fma(_706, _240 * TANGENT.x, (_226 * _218) * _705));
    float _717 = fma(_707, _233 * NORMAL.y, fma(_706, _240 * TANGENT.y, (_226 * _219) * _705));
    float _720 = fma(_707, _233 * NORMAL.z, fma(_706, _240 * TANGENT.z, (_226 * _220) * _705));
    float _724 = inversesqrt(dot(vec3(_714, _717, _720), vec3(_714, _717, _720)));
    float _725 = _724 * _714;
    float _726 = _724 * _717;
    float _727 = _724 * _720;
    float _3994 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _728 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4016 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4027 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4038 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _746 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _798 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _788);
    float _799 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _788);
    float _800 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _788);
    float _804 = inversesqrt(dot(vec3(_798, _799, _800), vec3(_798, _799, _800)));
    float _805 = _798 * _804;
    float _806 = _799 * _804;
    float _807 = _800 * _804;
    vec4 _812 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _814 = _812.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _968 = sqrt(((_798 * _798) + (_799 * _799)) + (_800 * _800));
        float _974 = (cbMatDynParam._m0[5u].x * _968) + cbMatDynParam._m0[5u].y;
        float _4049 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _979 = (cbMatDynParam._m0[5u].z * _968) + cbMatDynParam._m0[5u].w;
        float _4060 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) - _975)) + _975) < ((_814 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _825 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _826 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _844 = fma(_727, cbSceneParam._m0[5u].z, fma(_726, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _725));
    float _847 = fma(_727, cbSceneParam._m0[6u].z, fma(_726, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _725));
    float _850 = fma(_727, cbSceneParam._m0[7u].z, fma(_726, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _725));
    uint _863 = _246 + 9u;
    uint _864 = _863 + uint(cbMatDynParam._m0[0u].w);
    float _870 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_864].x;
    float _871 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_864].y;
    float _872 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_864].z;
    float _4071 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    vec4 _884 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _825, cbSceneParam._m0[86u].y * _826));
    float _888 = ((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * TEXCOORD_5.w) * _884.x;
    float _889 = dot(vec3(_725, _726, _727), vec3(_805, _806, _807));
    float _892 = _889 * 2.0;
    float _896 = (_892 * _725) - _805;
    float _897 = (_892 * _726) - _806;
    float _898 = (_892 * _727) - _807;
    float _902 = abs(dot(vec3(_805, _806, _807), vec3(_725, _726, _727)));
    float _4104 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _904 = sqrt(_728);
    float _917 = exp2((_904 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_904 * 3.0));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1286;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1011 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _1015 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _1019 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1044 = _949 + _725;
        float _1045 = _953 + _726;
        float _1046 = _957 + _727;
        float _1056 = fma(_1046, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044)) - _1011;
        float _1057 = fma(_1046, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044)) - _1015;
        float _1058 = fma(_1046, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044)) - _1019;
        float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
        float _1075 = ((_1062 * _1056) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1011 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1062 * _1057) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1015 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1062 * _1058) / cbModelParam._m0[34u].z) + ((((((_1019 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        float _1114 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1080.x + (-0.5));
        float _1116 = _1114 * (_1080.y + (-0.5));
        float _1117 = _1114 * (_1080.z + (-0.5));
        float _1124 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1087.x + (-0.5));
        float _1126 = _1124 * (_1087.y + (-0.5));
        float _1127 = _1124 * (_1087.z + (-0.5));
        float _1134 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1094.x + (-0.5));
        float _1136 = _1134 * (_1094.y + (-0.5));
        float _1137 = _1134 * (_1094.z + (-0.5));
        float _1144 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1101.x + (-0.5));
        float _1146 = _1144 * (_1101.y + (-0.5));
        float _1147 = _1144 * (_1101.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1168 = (dot(vec3(_725, _726, _727), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1178 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _4152 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1180 + 1.0))) + _1185) * _1148;
        float _1195 = _1116 * 0.5;
        float _1196 = _1126 * 0.5;
        float _1197 = _1136 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_725, _726, _727), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _4185 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1222 + 1.0))) + _1227) * _1149;
        float _1237 = _1117 * 0.5;
        float _1238 = _1127 * 0.5;
        float _1239 = _1137 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_725, _726, _727), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4218 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1264 + 1.0))) + _1269) * _1150;
        _1286 = _1117;
        _1288 = _1116;
        _1289 = _1115;
        _1290 = _1127;
        _1291 = _1126;
        _1292 = _1125;
        _1293 = _1137;
        _1294 = _1136;
        _1295 = _1135;
        _1296 = _1150;
        _1297 = _1149;
        _1298 = _1148;
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
    }
    else
    {
        _1286 = _1287;
        _1288 = _1287;
        _1289 = _1287;
        _1290 = _1287;
        _1291 = _1287;
        _1292 = _1287;
        _1293 = _1287;
        _1294 = _1287;
        _1295 = _1287;
        _1296 = _1287;
        _1297 = _1287;
        _1298 = _1287;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1328 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1332 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1336 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1359 = _949 + _725;
        float _1360 = _953 + _726;
        float _1361 = _957 + _727;
        float _1371 = fma(_1361, cbModelParam._m0[30u].z, fma(_1360, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1359)) - _1328;
        float _1372 = fma(_1361, cbModelParam._m0[31u].z, fma(_1360, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1359)) - _1332;
        float _1373 = fma(_1361, cbModelParam._m0[32u].z, fma(_1360, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1359)) - _1336;
        float _1377 = inversesqrt(dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373)));
        float _1390 = ((_1377 * _1371) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1328 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1377 * _1372) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1332 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1377 * _1373) / cbModelParam._m0[35u].z) + ((((((_1336 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        float _1427 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1394.x + (-0.5));
        float _1429 = _1427 * (_1394.y + (-0.5));
        float _1430 = _1427 * (_1394.z + (-0.5));
        float _1437 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1401.x + (-0.5));
        float _1439 = _1437 * (_1401.y + (-0.5));
        float _1440 = _1437 * (_1401.z + (-0.5));
        float _1447 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1408.x + (-0.5));
        float _1449 = _1447 * (_1408.y + (-0.5));
        float _1450 = _1447 * (_1408.z + (-0.5));
        float _1457 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1415.x + (-0.5));
        float _1459 = _1457 * (_1415.y + (-0.5));
        float _1460 = _1457 * (_1415.z + (-0.5));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = _1428 * 0.5;
        float _1465 = _1438 * 0.5;
        float _1466 = _1448 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_725, _726, _727), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4281 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1491 + 1.0))) + _1496) * _1461;
        float _1506 = _1429 * 0.5;
        float _1507 = _1439 * 0.5;
        float _1508 = _1449 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_725, _726, _727), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4314 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1533 + 1.0))) + _1538) * _1462;
        float _1548 = _1430 * 0.5;
        float _1549 = _1440 * 0.5;
        float _1550 = _1450 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_725, _726, _727), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4347 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1575 + 1.0))) + _1580) * _1463;
        _1597 = _1430;
        _1598 = _1429;
        _1599 = _1428;
        _1600 = _1440;
        _1601 = _1439;
        _1602 = _1438;
        _1603 = _1450;
        _1604 = _1449;
        _1605 = _1448;
        _1606 = _1463;
        _1607 = _1462;
        _1608 = _1461;
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
    }
    else
    {
        _1597 = _1287;
        _1598 = _1287;
        _1599 = _1287;
        _1600 = _1287;
        _1601 = _1287;
        _1602 = _1287;
        _1603 = _1287;
        _1604 = _1287;
        _1605 = _1287;
        _1606 = _1287;
        _1607 = _1287;
        _1608 = _1287;
        _1609 = 0.0;
        _1610 = 0.0;
        _1611 = 0.0;
    }
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1299)) + _1299;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1300)) + _1300;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1301)) + _1301;
    float _1644 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1621));
    float _1665 = _896 * 0.5;
    float _1666 = _897 * 0.5;
    float _1667 = _898 * 0.5;
    float _1668 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1671 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1674 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1708;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1681 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1286, _1290, _1293, _1296));
        float _1685 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1689 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1696 = dot(vec4(cbModelParam._m0[39u]), vec4(_1665, _1666, _1667, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1719;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1710 = dot(vec4(cbModelParam._m0[40u]), vec4(_1665, _1666, _1667, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1723 = (_1719 * cbModelParam._m0[1u].x) + (_1708 * (1.0 - cbModelParam._m0[1u].x));
    float _1733 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _728);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1733 : min(cbModelParam._m0[25u].z, _1733));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1781 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1785 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1789 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1792 = fma(_898, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896));
        float _1795 = fma(_898, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896));
        float _1798 = fma(_898, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896));
        float _1826;
        if (_1792 > 0.0)
        {
            _1826 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1826 = frontier_phi_17_15_ladder;
        }
        float _1995;
        if (_1795 > 0.0)
        {
            _1995 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1995 = frontier_phi_26_22_ladder;
        }
        float _2290;
        if (_1798 > 0.0)
        {
            _2290 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2290 = frontier_phi_38_33_ladder;
        }
        float _2292 = isnan(_1995) ? _1826 : (isnan(_1826) ? _1995 : min(_1826, _1995));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1792) + _1781;
        float _2298 = (_2293 * _1795) + _1785;
        float _2299 = (_2293 * _1798) + _1789;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1734);
            frontier_phi_16_38_ladder = _2444.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2444.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2444.x * cbModelParam._m0[1u].y;
        }
        _1814 = frontier_phi_16_38_ladder_2;
        _1816 = frontier_phi_16_38_ladder_1;
        _1818 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_896, _897, _898), _1734);
        _1814 = _1802.x * cbModelParam._m0[1u].y;
        _1816 = _1802.y * cbModelParam._m0[1u].y;
        _1818 = _1802.z * cbModelParam._m0[1u].y;
    }
    float _1822 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _728);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1822 : min(cbModelParam._m0[25u].w, _1822));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1876 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1880 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1884 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1887 = fma(_898, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896));
        float _1890 = fma(_898, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896));
        float _1893 = fma(_898, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896));
        float _2000;
        if (_1887 > 0.0)
        {
            _2000 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2000 = frontier_phi_28_24_ladder;
        }
        float _2317;
        if (_1890 > 0.0)
        {
            _2317 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2317 = frontier_phi_40_35_ladder;
        }
        float _2644;
        if (_1893 > 0.0)
        {
            _2644 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2644 = frontier_phi_50_47_ladder;
        }
        float _2646 = isnan(_2317) ? _2000 : (isnan(_2000) ? _2317 : min(_2000, _2317));
        float _2647 = isnan(_2644) ? _2646 : (isnan(_2646) ? _2644 : min(_2646, _2644));
        float _2651 = (_2647 * _1887) + _1876;
        float _2652 = (_2647 * _1890) + _1880;
        float _2653 = (_2647 * _1893) + _1884;
        float _2654 = _2647 * 9.9999997473787516355514526367188e-05;
        float _2655 = (-1.0) - _2654;
        float _2657 = _2654 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2653 > _2657) || ((_2653 < _2655) || ((_2652 > _2657) || ((_2652 < _2655) || ((_2651 < _2655) || (_2651 > _2657))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2653, cbModelParam._m0[17u].z, fma(_2652, cbModelParam._m0[17u].y, _2651 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2653, cbModelParam._m0[18u].z, fma(_2652, cbModelParam._m0[18u].y, _2651 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2653, cbModelParam._m0[19u].z, fma(_2652, cbModelParam._m0[19u].y, _2651 * cbModelParam._m0[19u].x))), _1823);
            frontier_phi_25_50_ladder = _2771.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2771.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2771.x * cbModelParam._m0[1u].z;
        }
        _1912 = frontier_phi_25_50_ladder_2;
        _1914 = frontier_phi_25_50_ladder_1;
        _1916 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_896, _897, _898), _1823);
        _1912 = _1896.x * cbModelParam._m0[1u].z;
        _1914 = _1896.y * cbModelParam._m0[1u].z;
        _1916 = _1896.z * cbModelParam._m0[1u].z;
    }
    float _1928 = ((((1.0 - _917) * ((_904 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_917 * _904)) * _888;
    float _1929 = _1928 * ((cbModelParam._m0[1u].w * (_1912 - _1814)) + _1814);
    float _1930 = _1928 * ((cbModelParam._m0[1u].w * (_1914 - _1816)) + _1816);
    float _1931 = _1928 * ((cbModelParam._m0[1u].w * (_1916 - _1818)) + _1818);
    float _1934 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1930, cbSceneParam._m0[89u].y, _1929 * cbSceneParam._m0[89u].x));
    float _1937 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1930, cbSceneParam._m0[90u].y, _1929 * cbSceneParam._m0[90u].x));
    float _1940 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1930, cbSceneParam._m0[91u].y, _1929 * cbSceneParam._m0[91u].x));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1987 = _1974 / _1986;
    float _1988 = _1978 / _1986;
    float _1989 = _1982 / _1986;
    float _2136;
    float _2137;
    float _2138;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2016 = ((uint(_1989 > cbSceneParam._m0[59u].y) + uint(_1989 > cbSceneParam._m0[59u].x)) + uint(_1989 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2017 = _2016 + 43u;
        uint _2025 = _2016 + 44u;
        uint _2033 = _2016 + 45u;
        uint _2041 = _2016 + 46u;
        float _2052 = fma(_1986, cbSceneParam._m0[_2017].w, fma(_1982, cbSceneParam._m0[_2017].z, fma(_1978, cbSceneParam._m0[_2017].y, _1974 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1986, cbSceneParam._m0[_2025].w, fma(_1982, cbSceneParam._m0[_2025].z, fma(_1978, cbSceneParam._m0[_2025].y, _1974 * cbSceneParam._m0[_2025].x)));
        float _2064 = fma(_1986, cbSceneParam._m0[_2041].w, fma(_1982, cbSceneParam._m0[_2041].z, fma(_1978, cbSceneParam._m0[_2041].y, _1974 * cbSceneParam._m0[_2041].x)));
        float _2069 = cbSceneParam._m0[33u].z * _2064;
        float _2071 = cbSceneParam._m0[33u].w * _2064;
        float _2074 = fma(_1986, cbSceneParam._m0[_2033].w, fma(_1982, cbSceneParam._m0[_2033].z, fma(_1978, cbSceneParam._m0[_2033].y, _1974 * cbSceneParam._m0[_2033].x))) / _2064;
        float _2122 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
        float _4473 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2129 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 + _2052) / _2064, (_2071 + _2056) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 + _2052) / _2064, (_2056 - _2069) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2069) / _2064, (_2056 - _2071) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2071) / _2064, (_2069 + _2056) / _2064), _2074), 0.0)).x), vec4(0.25)));
        _2136 = 1.0 - (_2129 * cbSceneParam._m0[34u].x);
        _2137 = 1.0 - (_2129 * cbSceneParam._m0[34u].y);
        _2138 = 1.0 - (_2129 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2136 = 1.0;
        _2137 = 1.0;
        _2138 = 1.0;
    }
    float _2202;
    float _2204;
    float _2206;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2190 = fma(_1986, cbSceneParam._m0[63u].w, fma(_1982, cbSceneParam._m0[63u].z, fma(_1978, cbSceneParam._m0[63u].y, _1974 * cbSceneParam._m0[63u].x)));
        float _2191 = fma(_1986, cbSceneParam._m0[60u].w, fma(_1982, cbSceneParam._m0[60u].z, fma(_1978, cbSceneParam._m0[60u].y, _1974 * cbSceneParam._m0[60u].x))) / _2190;
        float _2192 = fma(_1986, cbSceneParam._m0[61u].w, fma(_1982, cbSceneParam._m0[61u].z, fma(_1978, cbSceneParam._m0[61u].y, _1974 * cbSceneParam._m0[61u].x))) / _2190;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2191 >= cbSceneParam._m0[64u].x) && (_2192 >= cbSceneParam._m0[64u].y)) && (_2191 <= cbSceneParam._m0[64u].z)) && (_2192 <= cbSceneParam._m0[64u].w))
        {
            float _2330 = fma(_1986, cbSceneParam._m0[62u].w, fma(_1982, cbSceneParam._m0[62u].z, fma(_1978, cbSceneParam._m0[62u].y, _1974 * cbSceneParam._m0[62u].x))) / _2190;
            float _2334 = isnan(cbSceneParam._m0[41u].w) ? _2330 : (isnan(_2330) ? cbSceneParam._m0[41u].w : max(_2330, cbSceneParam._m0[41u].w));
            float _2377 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
            float _4489 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
            float _2384 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2191, cbSceneParam._m0[33u].w + _2192), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2191, _2192 - cbSceneParam._m0[33u].z), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].z, _2192 - cbSceneParam._m0[33u].w), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2192), _2334), 0.0)).x), vec4(0.25)));
            float _2388 = 1.0 - (_2384 * cbSceneParam._m0[34u].x);
            float _2389 = 1.0 - (_2384 * cbSceneParam._m0[34u].y);
            float _2390 = 1.0 - (_2384 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2390) ? _2138 : (isnan(_2138) ? _2390 : min(_2138, _2390));
            frontier_phi_37_36_ladder_1 = isnan(_2389) ? _2137 : (isnan(_2137) ? _2389 : min(_2137, _2389));
            frontier_phi_37_36_ladder_2 = isnan(_2388) ? _2136 : (isnan(_2136) ? _2388 : min(_2136, _2388));
        }
        else
        {
            frontier_phi_37_36_ladder = _2138;
            frontier_phi_37_36_ladder_1 = _2137;
            frontier_phi_37_36_ladder_2 = _2136;
        }
        _2202 = frontier_phi_37_36_ladder_2;
        _2204 = frontier_phi_37_36_ladder_1;
        _2206 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2202 = _2136;
        _2204 = _2137;
        _2206 = _2138;
    }
    uvec4 _2211 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2213 = _2211.x * 14u;
    uint _2214 = _2213 + 13u;
    float _2221 = _888 + (-1.0);
    float _2226 = (cbLight._m0[_2214].x * _2221) + 1.0;
    float _2227 = (cbLight._m0[_2214].y * _2221) + 1.0;
    float _2228 = (cbLight._m0[_2214].z * _2221) + 1.0;
    float _2229 = (cbLight._m0[_2214].w * _2221) + 1.0;
    uint _2230 = _2213 + 5u;
    float _2236 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2240 = _2213 + 4u;
    float _2249 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2253 = _2213 | 1u;
    float _2264 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_725, _726, _727));
    float _2267 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_725, _726, _727));
    float _4525 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _4536 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2272 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * 0.3183098733425140380859375;
    float _2274 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * 0.3183098733425140380859375;
    float _2281 = ((cbLight._m0[_2230].x * _2236) * _2274) + (((cbLight._m0[_2240].x * _2202) * _2249) * _2272);
    float _2282 = ((_2236 * cbLight._m0[_2230].y) * _2274) + (((cbLight._m0[_2240].y * _2204) * _2249) * _2272);
    float _2283 = ((_2236 * cbLight._m0[_2230].z) * _2274) + (((cbLight._m0[_2240].z * _2206) * _2249) * _2272);
    uvec4 _2287 = floatBitsToUint(cbLight._m0[_2213 + 12u]);
    bool _2289 = _2287.x == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2289)
    {
        _2391 = _2281;
        _2393 = _2282;
        _2395 = _2283;
    }
    else
    {
        uint _2399 = _2213 + 6u;
        float _2415 = (dot(vec3(cbLight._m0[_2213 + 2u].xyz), vec3(_725, _726, _727)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4547 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2418 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2391 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2281;
        _2393 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2282;
        _2395 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2283;
    }
    bool _2398 = _2287.y == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2398)
    {
        _2453 = _2391;
        _2455 = _2393;
        _2457 = _2395;
    }
    else
    {
        uint _2615 = _2213 + 7u;
        float _2631 = (dot(vec3(cbLight._m0[_2213 + 3u].xyz), vec3(_725, _726, _727)) * 0.5) + 0.5;
        float _2632 = _2631 * _2631;
        float _4563 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2633 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2634 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2453 = (((cbLight._m0[_2615].x * 0.3183098733425140380859375) * _2633) * _2634) + _2391;
        _2455 = (((cbLight._m0[_2615].y * 0.3183098733425140380859375) * _2633) * _2634) + _2393;
        _2457 = (((cbLight._m0[_2615].z * 0.3183098733425140380859375) * _2633) * _2634) + _2395;
    }
    uint _2460 = _2213 + 8u;
    float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _728) * 0.949999988079071044921875);
    float _2474 = _2473 * _2473;
    float _2475 = cbLight._m0[_2213].x + _805;
    float _2476 = cbLight._m0[_2213].y + _806;
    float _2477 = cbLight._m0[_2213].z + _807;
    float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
    float _2482 = _2481 * _2475;
    float _2483 = _2481 * _2476;
    float _2484 = _2481 * _2477;
    float _2485 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2213].xyz));
    float _4579 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _4590 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2489 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2490 = dot(vec3(_725, _726, _727), vec3(_2482, _2483, _2484));
    float _4601 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2482, _2483, _2484));
    float _4612 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2474 * _2474;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2513 = (exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2514 = 1.0 - _2474;
    float _2525 = (0.5 / (((_2489 * ((_2488 * _2514) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2514) + _2474) * _2488))) * _2488;
    float _4623 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2527 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    uint _2541 = _2213 + 9u;
    float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _728) * 0.949999988079071044921875);
    float _2553 = _2552 * _2552;
    float _2554 = cbLight._m0[_2253].x + _805;
    float _2555 = cbLight._m0[_2253].y + _806;
    float _2556 = cbLight._m0[_2253].z + _807;
    float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
    float _2561 = _2560 * _2554;
    float _2562 = _2560 * _2555;
    float _2563 = _2560 * _2556;
    float _2564 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2253].xyz));
    float _4634 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2568 = dot(vec3(_725, _726, _727), vec3(_2561, _2562, _2563));
    float _4645 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2572 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2561, _2562, _2563));
    float _4656 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2576 = _2553 * _2553;
    float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
    float _2589 = (exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2590 = 1.0 - _2553;
    float _2600 = (0.5 / (((_2489 * ((_2567 * _2590) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2590) + _2553) * _2567))) * _2567;
    float _4667 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2602 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
    float _2612 = (((_2589 * cbLight._m0[_2541].x) * _2602) * _2236) + ((((cbLight._m0[_2460].x * _2202) * _2513) * _2527) * _2249);
    float _2613 = (((_2589 * cbLight._m0[_2541].y) * _2602) * _2236) + ((((cbLight._m0[_2460].y * _2204) * _2513) * _2527) * _2249);
    float _2614 = (((_2589 * cbLight._m0[_2541].z) * _2602) * _2236) + ((((cbLight._m0[_2460].z * _2206) * _2513) * _2527) * _2249);
    float _2670;
    float _2672;
    float _2674;
    if (_2289)
    {
        _2670 = _2612;
        _2672 = _2613;
        _2674 = _2614;
    }
    else
    {
        uint _2676 = _2213 + 2u;
        uint _2680 = _2213 + 10u;
        float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2676].w)) * _728) * 0.949999988079071044921875);
        float _2695 = _2694 * _2694;
        float _2696 = cbLight._m0[_2676].x + _805;
        float _2697 = cbLight._m0[_2676].y + _806;
        float _2698 = cbLight._m0[_2676].z + _807;
        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
        float _2703 = _2702 * _2696;
        float _2704 = _2702 * _2697;
        float _2705 = _2702 * _2698;
        float _2706 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2676].xyz));
        float _4678 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2710 = dot(vec3(_725, _726, _727), vec3(_2703, _2704, _2705));
        float _4689 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2714 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_2703, _2704, _2705));
        float _4700 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2718 = _2695 * _2695;
        float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
        float _2731 = (exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2732 = 1.0 - _2695;
        float _2742 = (0.5 / (((_2489 * ((_2709 * _2732) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2732) + _2695) * _2709))) * _2709;
        float _4711 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2744 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
        float _2745 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2670 = (((_2731 * cbLight._m0[_2680].x) * _2744) * _2745) + _2612;
        _2672 = (((_2731 * cbLight._m0[_2680].y) * _2744) * _2745) + _2613;
        _2674 = (((_2731 * cbLight._m0[_2680].z) * _2744) * _2745) + _2614;
    }
    float _2776;
    float _2778;
    float _2780;
    if (_2398)
    {
        _2776 = _2670;
        _2778 = _2672;
        _2780 = _2674;
    }
    else
    {
        uint _2787 = _2213 + 3u;
        uint _2791 = _2213 + 11u;
        float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2787].w)) * _728) * 0.949999988079071044921875);
        float _2806 = _2805 * _2805;
        float _2807 = cbLight._m0[_2787].x + _805;
        float _2808 = cbLight._m0[_2787].y + _806;
        float _2809 = cbLight._m0[_2787].z + _807;
        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
        float _2814 = _2813 * _2807;
        float _2815 = _2813 * _2808;
        float _2816 = _2813 * _2809;
        float _2817 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2787].xyz));
        float _4727 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _2821 = dot(vec3(_725, _726, _727), vec3(_2814, _2815, _2816));
        float _4738 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2825 = dot(vec3(cbLight._m0[_2787].xyz), vec3(_2814, _2815, _2816));
        float _4749 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2829 = _2806 * _2806;
        float _2833 = ((_2824 * _2824) * (_2829 + (-1.0))) + 1.0;
        float _2842 = (exp2(log2(1.0 - (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2843 = 1.0 - _2806;
        float _2853 = (0.5 / (((_2489 * ((_2820 * _2843) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2843) + _2806) * _2820))) * _2820;
        float _4760 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2855 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2829 / ((_2833 * _2833) * 3.141590118408203125));
        float _2856 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2776 = (((_2842 * cbLight._m0[_2791].x) * _2855) * _2856) + _2670;
        _2778 = (((_2842 * cbLight._m0[_2791].y) * _2855) * _2856) + _2672;
        _2780 = (((_2842 * cbLight._m0[_2791].z) * _2855) * _2856) + _2674;
    }
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_2211.y == 0u)
    {
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.x;
        uint _2889 = uint((float(_2877.y) * floor(float(uint(cbSceneParam._m0[85u].y * _826) / _2878))) + floor(float(uint(cbSceneParam._m0[85u].x * _825) / _2878)));
        float _2899 = (log2(_1989 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2900 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        uint _2903 = uint(isnan(14.0) ? _2900 : (isnan(_2900) ? 14.0 : min(_2900, 14.0)));
        uvec4 _2908 = texelFetch(g_lightClusterGridBuffer, int(((_2903 << 2u) + (_2889 << 6u)) >> 2u));
        uint _2909 = _2908.x;
        uint _2910 = _2877.z;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        if (((((1u << ((_2910 >> 4u) & 15u)) + 4294967295u) & _2909) == 0u) || ((_2910 & 240u) == 0u))
        {
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
        }
        else
        {
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _2998;
            float _3000;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            uint _3148 = 0u;
            uint _3157;
            bool _3158;
            for (;;)
            {
                _3157 = texelFetch(g_lightClassification, int((((_2903 << 5u) + (_2889 << 9u)) + (_3148 << 2u)) >> 2u)).x;
                _3158 = _3157 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3158)
                {
                    frontier_phi_71_pred = _3147;
                    frontier_phi_71_pred_1 = _3146;
                    frontier_phi_71_pred_2 = _3145;
                    frontier_phi_71_pred_3 = _3144;
                    frontier_phi_71_pred_4 = _3143;
                    frontier_phi_71_pred_5 = _3142;
                }
                else
                {
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    uint _3293;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3147;
                    _3293 = _3157;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    for (;;)
                    {
                        uint _3297 = uint(findLSB(_3293)) + (_3148 << 5u);
                        uint _3294 = (_3293 + 4294967295u) & _3293;
                        uint _3299 = _3297 * 48u;
                        vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3319 = (_3297 * 48u) + 4u;
                        vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 3u)).x));
                        uint _3338 = (_3297 * 48u) + 8u;
                        vec3 _3349 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x));
                        float _3353 = _3313.x - _1987;
                        float _3354 = _3313.y - _1988;
                        float _3355 = _3313.z - _1989;
                        float _3356 = dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355));
                        float _3359 = inversesqrt(_3356);
                        float _3360 = _3359 * _3353;
                        float _3361 = _3359 * _3354;
                        float _3362 = _3359 * _3355;
                        float _3363 = dot(vec3(_844, _847, _850), vec3(_3360, _3361, _3362));
                        float _3368 = 1.0 - (_3356 * _3313.w);
                        float _4786 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3369 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3370 = sqrt(_3356) * _3332.w;
                        float _3373 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3363) + _3374;
                        float _3380 = _3370 * _3370;
                        float _3384 = ((isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0))) * _3369) / ((_3380 * 0.699999988079071044921875) + 1.0);
                        float _3388 = (-0.0) - _1987;
                        float _3389 = (-0.0) - _1988;
                        float _3390 = (-0.0) - _1989;
                        float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                        float _3395 = _3394 * _3388;
                        float _3396 = _3394 * _3389;
                        float _3397 = _3394 * _3390;
                        float _3404 = exp2(log2(1.0 / ((_3380 * 3.5) + 5.0)) * 0.25);
                        float _3405 = 1.0 - _904;
                        float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                        float _3413 = _3412 * _3412;
                        float _3414 = _3413 * _3413;
                        float _3415 = _3395 + _3360;
                        float _3416 = _3396 + _3361;
                        float _3417 = _3397 + _3362;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3425 = dot(vec3(_844, _847, _850), vec3(_3395, _3396, _3397));
                        float _4802 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3429 = dot(vec3(_844, _847, _850), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                        float _4813 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                        float _3437 = _3373 * _3413;
                        float _3438 = _3437 * _3437;
                        float _3441 = ((1.0 - _3438) * _3363) + _3438;
                        float _4824 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3443 = 1.0 - _3413;
                        float _3453 = (0.5 / (((_3442 * ((_3428 * _3443) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3413) * _3428))) * _3442;
                        float _4835 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3464 = (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) / ((_3436 * _3436) * ((_3380 * 2.1991131305694580078125) + 3.141590118408203125))) * _3369;
                        _3217 = (_3384 * _3332.x) + _3290;
                        _3218 = (_3384 * _3332.y) + _3291;
                        _3219 = (_3384 * _3332.z) + _3292;
                        _3214 = (_3464 * _3349.x) + _3287;
                        _3215 = (_3464 * _3349.y) + _3288;
                        _3216 = (_3464 * _3349.z) + _3289;
                        if (_3294 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3219;
                            _3293 = _3294;
                        }
                    }
                    frontier_phi_71_pred = _3219;
                    frontier_phi_71_pred_1 = _3218;
                    frontier_phi_71_pred_2 = _3217;
                    frontier_phi_71_pred_3 = _3216;
                    frontier_phi_71_pred_4 = _3215;
                    frontier_phi_71_pred_5 = _3214;
                }
                _3000 = frontier_phi_71_pred;
                _2998 = frontier_phi_71_pred_1;
                _2996 = frontier_phi_71_pred_2;
                _2994 = frontier_phi_71_pred_3;
                _2992 = frontier_phi_71_pred_4;
                _2990 = frontier_phi_71_pred_5;
                uint _3149 = _3148 + 1u;
                if (_3149 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3142 = _2990;
                    _3143 = _2992;
                    _3144 = _2994;
                    _3145 = _2996;
                    _3146 = _2998;
                    _3147 = _3000;
                    _3148 = _3149;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
        }
        uvec4 _3003 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3004 = _3003.z;
        uint _3006 = (_3004 >> 8u) & 15u;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        if (((4294967295u << _3006) & _2909) == 0u)
        {
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
            _3116 = _2995;
            _3118 = _2997;
            _3120 = _2999;
        }
        else
        {
            float _3135 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
            float _3136 = _3135 * _1987;
            float _3137 = _3135 * _1988;
            float _3138 = _3135 * _1989;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3006 < ((_3004 >> 12u) & 15u))
            {
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3119;
                float _3121;
                float _3270 = _2989;
                float _3271 = _2991;
                float _3272 = _2993;
                float _3273 = _2995;
                float _3274 = _2997;
                float _3275 = _2999;
                uint _3276 = _3006;
                uint _3285;
                bool _3286;
                for (;;)
                {
                    _3285 = texelFetch(g_lightClassification, int((((_2903 << 5u) + (_2889 << 9u)) + (_3276 << 2u)) >> 2u)).x;
                    _3286 = _3285 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3286)
                    {
                        frontier_phi_82_pred = _3275;
                        frontier_phi_82_pred_1 = _3274;
                        frontier_phi_82_pred_2 = _3273;
                        frontier_phi_82_pred_3 = _3272;
                        frontier_phi_82_pred_4 = _3271;
                        frontier_phi_82_pred_5 = _3270;
                    }
                    else
                    {
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        float _3493 = _3272;
                        float _3494 = _3273;
                        float _3495 = _3274;
                        float _3496 = _3275;
                        uint _3497 = _3285;
                        uint _3498;
                        vec4 _3523;
                        float _3524;
                        vec4 _3539;
                        vec3 _3551;
                        vec4 _3566;
                        vec4 _3581;
                        float _3627;
                        bool _3628;
                        for (;;)
                        {
                            uint _3508 = ((_3276 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3497));
                            _3498 = (_3497 + 4294967295u) & _3497;
                            uint _3510 = _3508 * 40u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            _3524 = _3523.w;
                            uint _3526 = (_3508 * 40u) + 4u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3508 * 40u) + 8u;
                            _3551 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x));
                            uint _3553 = (_3508 * 40u) + 16u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3508 * 40u) + 20u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3508 * 40u) + 24u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3602 = (_3508 * 40u) + 28u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            _3627 = fma(_1989, _3615.z, fma(_1988, _3615.y, _3615.x * _1987)) + _3615.w;
                            _3628 = !((fma(_1989, _3596.z, fma(_1988, _3596.y, _3596.x * _1987)) + _3596.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3628)
                            {
                                float _3655 = _3523.x - _1987;
                                float _3656 = _3523.y - _1988;
                                float _3657 = _3523.z - _1989;
                                float _3658 = dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657));
                                float _3661 = inversesqrt(_3658);
                                float _3662 = _3661 * _3655;
                                float _3663 = _3661 * _3656;
                                float _3664 = _3661 * _3657;
                                float _3668 = 1.0 - (_3658 / (_3524 * _3524));
                                float _4846 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3673 = sqrt(_3658) * _3539.w;
                                float _3675 = 1.39999997615814208984375 / (_3673 + 1.39999997615814208984375);
                                float _3676 = _3675 * _3675;
                                float _3679 = ((1.0 - _3676) * dot(vec3(_3662, _3663, _3664), vec3(_844, _847, _850))) + _3676;
                                float _3682 = _3673 * _3673;
                                float _3686 = (fma(_1989, _3566.z, fma(_1988, _3566.y, _3566.x * _1987)) + _3566.w) / _3627;
                                float _3687 = (fma(_1989, _3581.z, fma(_1988, _3581.y, _3581.x * _1987)) + _3581.w) / _3627;
                                float _3691 = 1.0 - dot(vec2(_3686, _3687), vec2(_3686, _3687));
                                float _4862 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3693 = _3692 * (((isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0))) * _3669) / ((_3682 * 0.699999988079071044921875) + 1.0));
                                float _3705 = exp2(log2(1.0 / ((_3682 * 3.5) + 5.0)) * 0.25);
                                float _3706 = 1.0 - _904;
                                float _3713 = sqrt(1.0 - ((1.0 - (_3706 * _3706)) * (1.0 - (_3705 * _3705))));
                                float _3714 = _3713 * _3713;
                                float _3715 = _3714 * _3714;
                                float _3716 = _3662 - _3136;
                                float _3717 = _3663 - _3137;
                                float _3718 = _3664 - _3138;
                                float _3722 = inversesqrt(dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718)));
                                float _3726 = dot(vec3(_844, _847, _850), vec3((-0.0) - _3136, (-0.0) - _3137, (-0.0) - _3138));
                                float _4873 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3730 = dot(vec3(_844, _847, _850), vec3(_3722 * _3716, _3722 * _3717, _3722 * _3718));
                                float _4884 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3737 = ((_3733 * _3733) * (_3715 + (-1.0))) + 1.0;
                                float _3738 = _3675 * _3714;
                                float _3739 = _3738 * _3738;
                                float _3745 = ((1.0 - _3739) * dot(vec3(_844, _847, _850), vec3(_3662, _3663, _3664))) + _3739;
                                float _4895 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3747 = 1.0 - _3714;
                                float _3757 = (0.5 / (((_3746 * ((_3729 * _3747) + _3714)) + 9.9999999392252902907785028219223e-09) + (((_3746 * _3747) + _3714) * _3729))) * _3746;
                                float _4906 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3767 = (_3692 * _3669) * (((_3715 * 3.1415927410125732421875) * (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) / ((_3737 * _3737) * ((_3682 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3693 * _3539.z;
                                frontier_phi_88_pred_1 = _3693 * _3539.y;
                                frontier_phi_88_pred_2 = _3693 * _3539.x;
                                frontier_phi_88_pred_3 = _3767 * _3551.z;
                                frontier_phi_88_pred_4 = _3767 * _3551.y;
                                frontier_phi_88_pred_5 = _3767 * _3551.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3776 = frontier_phi_88_pred;
                            _3775 = frontier_phi_88_pred_1;
                            _3774 = frontier_phi_88_pred_2;
                            _3773 = frontier_phi_88_pred_3;
                            _3772 = frontier_phi_88_pred_4;
                            _3771 = frontier_phi_88_pred_5;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            _3483 = _3776 + _3496;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            if (_3498 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3498;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3483;
                        frontier_phi_82_pred_1 = _3482;
                        frontier_phi_82_pred_2 = _3481;
                        frontier_phi_82_pred_3 = _3480;
                        frontier_phi_82_pred_4 = _3479;
                        frontier_phi_82_pred_5 = _3478;
                    }
                    _3121 = frontier_phi_82_pred;
                    _3119 = frontier_phi_82_pred_1;
                    _3117 = frontier_phi_82_pred_2;
                    _3115 = frontier_phi_82_pred_3;
                    _3113 = frontier_phi_82_pred_4;
                    _3111 = frontier_phi_82_pred_5;
                    uint _3277 = _3276 + 1u;
                    if (_3277 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3270 = _3111;
                        _3271 = _3113;
                        _3272 = _3115;
                        _3273 = _3117;
                        _3274 = _3119;
                        _3275 = _3121;
                        _3276 = _3277;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3117;
                frontier_phi_63_64_ladder_1 = _3121;
                frontier_phi_63_64_ladder_2 = _3119;
                frontier_phi_63_64_ladder_3 = _3115;
                frontier_phi_63_64_ladder_4 = _3113;
                frontier_phi_63_64_ladder_5 = _3111;
            }
            else
            {
                frontier_phi_63_64_ladder = _2995;
                frontier_phi_63_64_ladder_1 = _2999;
                frontier_phi_63_64_ladder_2 = _2997;
                frontier_phi_63_64_ladder_3 = _2993;
                frontier_phi_63_64_ladder_4 = _2991;
                frontier_phi_63_64_ladder_5 = _2989;
            }
            _3110 = frontier_phi_63_64_ladder_5;
            _3112 = frontier_phi_63_64_ladder_4;
            _3114 = frontier_phi_63_64_ladder_3;
            _3116 = frontier_phi_63_64_ladder;
            _3118 = frontier_phi_63_64_ladder_2;
            _3120 = frontier_phi_63_64_ladder_1;
        }
        float _3125 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
        _2922 = (_3125 * _3116) + _2453;
        _2924 = (_3125 * _3118) + _2455;
        _2926 = (_3125 * _3120) + _2457;
        _2928 = ((_3110 * 0.039999999105930328369140625) * _3125) + _2776;
        _2930 = ((_3112 * 0.039999999105930328369140625) * _3125) + _2778;
        _2932 = ((_3114 * 0.039999999105930328369140625) * _3125) + _2780;
    }
    else
    {
        _2922 = _2453;
        _2924 = _2455;
        _2926 = _2457;
        _2928 = _2776;
        _2930 = _2778;
        _2932 = _2780;
    }
    float _4922 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4933 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4944 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2949 = ((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2922 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _888))) + ((_2928 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    float _2950 = ((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2924 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _888))) + ((_2930 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    float _2951 = ((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2926 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _888))) + ((_2932 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    uint _2952 = _246 + 6u;
    float _2960 = _825 / cbSceneParam._m0[86u].x;
    float _2961 = _826 / cbSceneParam._m0[86u].y;
    vec4 _2975 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2960, _2961, (log2((isnan(cbSceneParam._m0[77u].w) ? _746 : (isnan(_746) ? cbSceneParam._m0[77u].w : min(_746, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2977 = _2975.x;
    float _2978 = _2975.y;
    float _2979 = _2975.z;
    float _2980 = _2975.w;
    float _3052;
    float _3054;
    float _3056;
    float _3058;
    if (_746 > cbSceneParam._m0[78u].w)
    {
        float _3014 = isnan(_746) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _746 : min(cbSceneParam._m0[80u].w, _746));
        float _3015 = _3014 / _746;
        float _3026 = _3015 * _798;
        float _3027 = _799 * _3015;
        float _3028 = (-0.0) - _3027;
        float _3030 = _3015 * _800;
        float _3032 = (cbSceneParam._m0[77u].w * _3028) / _3014;
        float _3033 = _3032 + cbSceneParam._m0[79u].w;
        float _3034 = cbSceneParam._m0[79u].w - _3027;
        float _3040 = sqrt(((_3026 * _3026) + (_3027 * _3027)) + (_3030 * _3030));
        float _3043 = (1.0 - (cbSceneParam._m0[77u].w / _3014)) * _3040;
        float _3048 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3050 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3227;
        if (abs((_3028 - _3032) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3227 = ((((_3033 > 0.0) ? exp2(_3048 * _3033) : (2.0 - exp2(_3050 * _3033))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3043;
        }
        else
        {
            float _3171 = 1.0 / cbSceneParam._m0[80u].x;
            float _3172 = isnan(_3034) ? _3033 : (isnan(_3033) ? _3034 : max(_3033, _3034));
            float _3173 = isnan(_3034) ? _3033 : (isnan(_3033) ? _3034 : min(_3033, _3034));
            float _3182 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : min(_3172, 0.0));
            float _3183 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : min(_3173, 0.0));
            _3227 = ((abs(_3040 / _3028) * cbSceneParam._m0[80u].y) * ((((_3182 - _3183) * 2.0) - ((exp2(_3048 * (isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0)))) - exp2(_3048 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))))) * _3171)) - ((exp2(_3050 * _3182) - exp2(_3050 * _3183)) * _3171))) + (_3043 * cbSceneParam._m0[80u].z);
        }
        vec4 _3229 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2960, _2961, 1.0), 0.0);
        float _3238 = exp2((_3227 * (-1.44269502162933349609375)) * (1.0 - _3229.w));
        float _3239 = log2(_3238);
        float _3255 = log2(_2980);
        _3052 = (exp2(_3255 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3239 * cbSceneParam._m0[78u].x)) * _3229.x) / cbSceneParam._m0[78u].x)) + _2977;
        _3054 = (exp2(_3255 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3239 * cbSceneParam._m0[78u].y)) * _3229.y) / cbSceneParam._m0[78u].y)) + _2978;
        _3056 = (exp2(_3255 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3239 * cbSceneParam._m0[78u].z)) * _3229.z) / cbSceneParam._m0[78u].z)) + _2979;
        _3058 = _3238 * _2980;
    }
    else
    {
        _3052 = _2977;
        _3054 = _2978;
        _3056 = _2979;
        _3058 = _2980;
    }
    bool _3265;
    vec4 _3068;
    vec4 _3090;
    float _3092;
    float _3096;
    float _3097;
    float _3098;
    float _3099;
    bool _3109;
    for (;;)
    {
        _3068 = cbMatDynParam._m0[0u];
        float _3070 = roundEven(_3068.y);
        bool _3071 = _3070 == 3.0;
        float _3072 = log2(_3058);
        float _3079 = exp2(_3072 * cbSceneParam._m0[78u].x) * _2949;
        float _3080 = exp2(_3072 * cbSceneParam._m0[78u].y) * _2950;
        float _3081 = exp2(_3072 * cbSceneParam._m0[78u].z) * _2951;
        float _3088 = _814 + (-0.5);
        _3090 = cbMtdParam._m0[1u];
        _3092 = _3090.y * _3088;
        float _3095 = (_3070 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3096 = _3095 * (_3071 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3052)));
        _3097 = _3095 * (_3071 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3054)));
        _3098 = _3095 * (_3071 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3056)));
        _3099 = _3088 * 0.999000012874603271484375;
        _3109 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3109)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _3099) < 0.5)
            {
                _3265 = true;
                break;
            }
        }
        uint _3206 = _863 + uint(_3068.w);
        if ((cbInstanceData._m0[_3206].w < 1.0) && ((cbInstanceData._m0[_3206].w + _3099) < 0.5))
        {
            _3265 = true;
            break;
        }
        if ((_3092 + 1.0) < _3090.x)
        {
            _3265 = true;
            break;
        }
        _3265 = false;
        break;
    }
    float _3469;
    if (_3265)
    {
        discard_state = true;
        _3469 = 0.0;
    }
    else
    {
        _3469 = cbInstanceData._m0[_2952].w;
    }
    SV_Target.x = _3096;
    SV_Target.y = _3097;
    SV_Target.z = _3098;
    SV_Target.w = _3469;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2952].w;
    discard_exit();
}


