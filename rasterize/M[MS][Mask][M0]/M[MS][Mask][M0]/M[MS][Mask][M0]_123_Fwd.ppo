#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1429;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3732 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3743 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3754 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _374.x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[24u].z) + _426) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3765 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _451 = (_444 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _452 = (_444 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _453 = (_444 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _492 = _490.x;
    float _502 = dot(vec4(_492, _490.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _516 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _374.y) * 2.0) - ((((_492 - _502) * cbMtdParam._m0[24u].z) + _502) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3776 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _524 = (_517 * ((_470.x * cbMtdParam._m0[13u].x) - _451)) + _451;
    float _525 = (_517 * ((_470.y * cbMtdParam._m0[13u].y) - _452)) + _452;
    float _526 = (_517 * ((_470.z * cbMtdParam._m0[13u].z) - _453)) + _453;
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _291) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _292) + cbTextureTilingScale._m0[24u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _563 = _561.x;
    float _573 = dot(vec4(_563, _561.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _585 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _374.z) * 2.0) - ((((_563 - _573) * cbMtdParam._m0[24u].z) + _573) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3787 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _593 = (_586 * ((_544.x * cbMtdParam._m0[14u].x) - _524)) + _524;
    float _594 = (_586 * ((_544.y * cbMtdParam._m0[14u].y) - _525)) + _525;
    float _595 = (_586 * ((_544.z * cbMtdParam._m0[14u].z) - _526)) + _526;
    float _599 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _593;
    float _602 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _594;
    float _605 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _595;
    float _612 = ((_593 - _599) * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) + _599;
    float _613 = ((_594 - _602) * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) + _602;
    float _614 = ((_595 - _605) * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) + _605;
    vec4 _631 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _675 = _673.x;
    float _676 = _673.y;
    float _677 = _673.z;
    float _684 = ((_656.x - _675) * _444) + _675;
    float _685 = ((_656.y - _676) * _444) + _676;
    float _686 = ((_656.z - _677) * _444) + _677;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _709 = ((_698.x - _684) * _517) + _684;
    float _710 = ((_698.y - _685) * _517) + _685;
    float _711 = ((_698.z - _686) * _517) + _686;
    vec4 _723 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _291) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _292) + cbTextureTilingScale._m0[23u].w));
    float _736 = ((_723.z - _711) * _586) + _711;
    float _739 = ((((_723.x - _709) * _586) + _709) * 2.0) + (-1.0);
    float _740 = ((((_723.y - _710) * _586) + _710) * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _3798 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _746 = sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))));
    vec4 _764 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _776 = (_739 + ((((_631.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_764.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _777 = (_740 + ((((_631.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_764.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _780 = fma(_746, _239, fma(_777, _246, _776 * _232));
    float _783 = fma(_746, _240, fma(_777, _247, _776 * _233));
    float _786 = fma(_746, _241, fma(_777, _248, _776 * _234));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    vec4 _817 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _819 = _817.x;
    float _820 = 1.0 - _819;
    float _826 = (cbMtdParam._m0[19u].x + dot(vec4(_790 * _780, _790 * _783, _790 * _786, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_819 - _820) * cbMtdParam._m0[24u].w) + _820) * cbMtdParam._m0[21u].z);
    float _3809 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _827 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _834 = (_827 * (cbMtdParam._m0[17u].x - _612)) + _612;
    float _835 = (_827 * (cbMtdParam._m0[17u].y - _613)) + _613;
    float _836 = (_827 * (cbMtdParam._m0[17u].z - _614)) + _614;
    float _841 = (((_631.z - _736) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _736;
    float _845 = ((_764.z - _841) * cbMtdParam._m0[19u].w) + _841;
    vec4 _858 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _865 = (_858.x * 2.0) + (-1.0);
    float _866 = (_858.y * 2.0) + (-1.0);
    float _867 = dot(vec2(_865, _866), vec2(_865, _866));
    float _3820 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _875 = ((_858.z - _845) * _827) + _845;
    float _885 = ((sqrt(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) - _746) * _827) + _746;
    float _888 = (((_865 - _776) * _827) + _776) + (cbMtdParam._m0[21u].x * _776);
    float _889 = (((_866 - _777) * _827) + _777) + (cbMtdParam._m0[21u].x * _777);
    float _893 = cbMtdParam._m0[22u].x + _764.w;
    float _896 = fma(_885, _239, fma(_889, _246, _888 * _232));
    float _899 = fma(_885, _240, fma(_889, _247, _888 * _233));
    float _902 = fma(_885, _241, fma(_889, _248, _888 * _234));
    float _906 = inversesqrt(dot(vec3(_896, _899, _902), vec3(_896, _899, _902)));
    float _907 = _906 * _896;
    float _908 = _906 * _899;
    float _909 = _906 * _902;
    float _3831 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _910 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _3853 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _3864 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _3875 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _928 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _980 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _970);
    float _981 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _970);
    float _982 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _970);
    float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
    float _987 = _980 * _986;
    float _988 = _981 * _986;
    float _989 = _982 * _986;
    float _995 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _996 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1014 = fma(_909, cbSceneParam._m0[5u].z, fma(_908, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _907));
    float _1017 = fma(_909, cbSceneParam._m0[6u].z, fma(_908, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _907));
    float _1020 = fma(_909, cbSceneParam._m0[7u].z, fma(_908, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _907));
    uint _1034 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1040 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_1034].x;
    float _1041 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_1034].y;
    float _1042 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_1034].z;
    float _3886 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    vec4 _1054 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _995, cbSceneParam._m0[86u].y * _996));
    float _1058 = ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * TEXCOORD_5.w) * _1054.x;
    float _1059 = dot(vec3(_907, _908, _909), vec3(_987, _988, _989));
    float _1062 = _1059 * 2.0;
    float _1066 = (_1062 * _907) - _987;
    float _1067 = (_1062 * _908) - _988;
    float _1068 = (_1062 * _909) - _989;
    float _1072 = abs(dot(vec3(_987, _988, _989), vec3(_907, _908, _909)));
    float _3919 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1074 = sqrt(_910);
    float _1087 = exp2((_1074 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1074 * 3.0));
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1428;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1153 = fma(_1127, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119));
        float _1157 = fma(_1127, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119));
        float _1161 = fma(_1127, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119));
        float _1186 = _1119 + _907;
        float _1187 = _1123 + _908;
        float _1188 = _1127 + _909;
        float _1198 = fma(_1188, cbModelParam._m0[26u].z, fma(_1187, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186)) - _1153;
        float _1199 = fma(_1188, cbModelParam._m0[27u].z, fma(_1187, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186)) - _1157;
        float _1200 = fma(_1188, cbModelParam._m0[28u].z, fma(_1187, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186)) - _1161;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1153 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1157 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[34u].z) + ((((((_1161 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1256 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1222.x + (-0.5));
        float _1258 = _1256 * (_1222.y + (-0.5));
        float _1259 = _1256 * (_1222.z + (-0.5));
        float _1266 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1229.x + (-0.5));
        float _1268 = _1266 * (_1229.y + (-0.5));
        float _1269 = _1266 * (_1229.z + (-0.5));
        float _1276 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1236.x + (-0.5));
        float _1278 = _1276 * (_1236.y + (-0.5));
        float _1279 = _1276 * (_1236.z + (-0.5));
        float _1286 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1243.x + (-0.5));
        float _1288 = _1286 * (_1243.y + (-0.5));
        float _1289 = _1286 * (_1243.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1310 = (dot(vec3(_907, _908, _909), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1320 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3967 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1322 + 1.0))) + _1327) * _1290;
        float _1337 = _1258 * 0.5;
        float _1338 = _1268 * 0.5;
        float _1339 = _1278 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_907, _908, _909), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4000 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1364 + 1.0))) + _1369) * _1291;
        float _1379 = _1259 * 0.5;
        float _1380 = _1269 * 0.5;
        float _1381 = _1279 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_907, _908, _909), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4033 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1406 + 1.0))) + _1411) * _1292;
        _1428 = _1259;
        _1430 = _1258;
        _1431 = _1257;
        _1432 = _1269;
        _1433 = _1268;
        _1434 = _1267;
        _1435 = _1279;
        _1436 = _1278;
        _1437 = _1277;
        _1438 = _1292;
        _1439 = _1291;
        _1440 = _1290;
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1429;
        _1430 = _1429;
        _1431 = _1429;
        _1432 = _1429;
        _1433 = _1429;
        _1434 = _1429;
        _1435 = _1429;
        _1436 = _1429;
        _1437 = _1429;
        _1438 = _1429;
        _1439 = _1429;
        _1440 = _1429;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1466 = fma(_1127, cbModelParam._m0[30u].z, fma(_1123, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119));
        float _1470 = fma(_1127, cbModelParam._m0[31u].z, fma(_1123, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119));
        float _1474 = fma(_1127, cbModelParam._m0[32u].z, fma(_1123, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119));
        float _1497 = _1119 + _907;
        float _1498 = _1123 + _908;
        float _1499 = _1127 + _909;
        float _1509 = fma(_1499, cbModelParam._m0[30u].z, fma(_1498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1497)) - _1466;
        float _1510 = fma(_1499, cbModelParam._m0[31u].z, fma(_1498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1497)) - _1470;
        float _1511 = fma(_1499, cbModelParam._m0[32u].z, fma(_1498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1497)) - _1474;
        float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
        float _1528 = ((_1515 * _1509) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1466 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1515 * _1510) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1470 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1515 * _1511) / cbModelParam._m0[35u].z) + ((((((_1474 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        float _1565 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1532.x + (-0.5));
        float _1567 = _1565 * (_1532.y + (-0.5));
        float _1568 = _1565 * (_1532.z + (-0.5));
        float _1575 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1539.x + (-0.5));
        float _1577 = _1575 * (_1539.y + (-0.5));
        float _1578 = _1575 * (_1539.z + (-0.5));
        float _1585 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1546.x + (-0.5));
        float _1587 = _1585 * (_1546.y + (-0.5));
        float _1588 = _1585 * (_1546.z + (-0.5));
        float _1595 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1553.x + (-0.5));
        float _1597 = _1595 * (_1553.y + (-0.5));
        float _1598 = _1595 * (_1553.z + (-0.5));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = _1566 * 0.5;
        float _1603 = _1576 * 0.5;
        float _1604 = _1586 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_907, _908, _909), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4096 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1629 + 1.0))) + _1634) * _1599;
        float _1644 = _1567 * 0.5;
        float _1645 = _1577 * 0.5;
        float _1646 = _1587 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_907, _908, _909), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4129 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1671 + 1.0))) + _1676) * _1600;
        float _1686 = _1568 * 0.5;
        float _1687 = _1578 * 0.5;
        float _1688 = _1588 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_907, _908, _909), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4162 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1713 + 1.0))) + _1718) * _1601;
        _1735 = _1568;
        _1736 = _1567;
        _1737 = _1566;
        _1738 = _1578;
        _1739 = _1577;
        _1740 = _1576;
        _1741 = _1588;
        _1742 = _1587;
        _1743 = _1586;
        _1744 = _1601;
        _1745 = _1600;
        _1746 = _1599;
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
    }
    else
    {
        _1735 = _1429;
        _1736 = _1429;
        _1737 = _1429;
        _1738 = _1429;
        _1739 = _1429;
        _1740 = _1429;
        _1741 = _1429;
        _1742 = _1429;
        _1743 = _1429;
        _1744 = _1429;
        _1745 = _1429;
        _1746 = _1429;
        _1747 = 0.0;
        _1748 = 0.0;
        _1749 = 0.0;
    }
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1441)) + _1441;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1442)) + _1442;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1443)) + _1443;
    float _1782 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1759));
    float _1803 = _1066 * 0.5;
    float _1804 = _1067 * 0.5;
    float _1805 = _1068 * 0.5;
    float _1806 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1809 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1812 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1846;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1819 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1428, _1432, _1435, _1438));
        float _1823 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1827 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1834 = dot(vec4(cbModelParam._m0[39u]), vec4(_1803, _1804, _1805, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1857;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1848 = dot(vec4(cbModelParam._m0[40u]), vec4(_1803, _1804, _1805, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1861 = (_1857 * cbModelParam._m0[1u].x) + (_1846 * (1.0 - cbModelParam._m0[1u].x));
    float _1871 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _910);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1871 : min(cbModelParam._m0[25u].z, _1871));
    float _1952;
    float _1954;
    float _1956;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1919 = fma(_1127, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1119)) + cbModelParam._m0[13u].w;
        float _1923 = fma(_1127, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1119)) + cbModelParam._m0[14u].w;
        float _1927 = fma(_1127, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1119)) + cbModelParam._m0[15u].w;
        float _1930 = fma(_1068, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066));
        float _1933 = fma(_1068, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066));
        float _1936 = fma(_1068, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066));
        float _1964;
        if (_1930 > 0.0)
        {
            _1964 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1964 = frontier_phi_14_12_ladder;
        }
        float _2165;
        if (_1933 > 0.0)
        {
            _2165 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2165 = frontier_phi_23_19_ladder;
        }
        float _2408;
        if (_1936 > 0.0)
        {
            _2408 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2408 = frontier_phi_35_30_ladder;
        }
        float _2410 = isnan(_2165) ? _1964 : (isnan(_1964) ? _2165 : min(_1964, _2165));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1930) + _1919;
        float _2416 = (_2411 * _1933) + _1923;
        float _2417 = (_2411 * _1936) + _1927;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2418;
        float _2422 = _2418 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 > _2422) || ((_2416 < _2420) || ((_2415 < _2420) || (_2415 > _2422))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2417, cbModelParam._m0[9u].z, fma(_2416, cbModelParam._m0[9u].y, _2415 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2417, cbModelParam._m0[10u].z, fma(_2416, cbModelParam._m0[10u].y, _2415 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2417, cbModelParam._m0[11u].z, fma(_2416, cbModelParam._m0[11u].y, _2415 * cbModelParam._m0[11u].x))), _1872);
            frontier_phi_13_35_ladder = _2541.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2541.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2541.x * cbModelParam._m0[1u].y;
        }
        _1952 = frontier_phi_13_35_ladder_2;
        _1954 = frontier_phi_13_35_ladder_1;
        _1956 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1066, _1067, _1068), _1872);
        _1952 = _1940.x * cbModelParam._m0[1u].y;
        _1954 = _1940.y * cbModelParam._m0[1u].y;
        _1956 = _1940.z * cbModelParam._m0[1u].y;
    }
    float _1960 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _910);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1960 : min(cbModelParam._m0[25u].w, _1960));
    float _2051;
    float _2053;
    float _2055;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2015 = fma(_1127, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1119)) + cbModelParam._m0[21u].w;
        float _2019 = fma(_1127, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1119)) + cbModelParam._m0[22u].w;
        float _2023 = fma(_1127, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1119)) + cbModelParam._m0[23u].w;
        float _2026 = fma(_1068, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066));
        float _2029 = fma(_1068, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066));
        float _2032 = fma(_1068, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066));
        float _2170;
        if (_2026 > 0.0)
        {
            _2170 = abs((1.0 - _2015) / _2026);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2015 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2170 = frontier_phi_25_21_ladder;
        }
        float _2435;
        if (_2029 > 0.0)
        {
            _2435 = abs((1.0 - _2019) / _2029);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2019 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2435 = frontier_phi_37_32_ladder;
        }
        float _2640;
        if (_2032 > 0.0)
        {
            _2640 = abs((1.0 - _2023) / _2032);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2023 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2640 = frontier_phi_46_43_ladder;
        }
        float _2642 = isnan(_2435) ? _2170 : (isnan(_2170) ? _2435 : min(_2170, _2435));
        float _2643 = isnan(_2640) ? _2642 : (isnan(_2642) ? _2640 : min(_2642, _2640));
        float _2647 = (_2643 * _2026) + _2015;
        float _2648 = (_2643 * _2029) + _2019;
        float _2649 = (_2643 * _2032) + _2023;
        float _2650 = _2643 * 9.9999997473787516355514526367188e-05;
        float _2651 = (-1.0) - _2650;
        float _2653 = _2650 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2649 > _2653) || ((_2649 < _2651) || ((_2648 > _2653) || ((_2648 < _2651) || ((_2647 < _2651) || (_2647 > _2653))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2649, cbModelParam._m0[17u].z, fma(_2648, cbModelParam._m0[17u].y, _2647 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2649, cbModelParam._m0[18u].z, fma(_2648, cbModelParam._m0[18u].y, _2647 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2649, cbModelParam._m0[19u].z, fma(_2648, cbModelParam._m0[19u].y, _2647 * cbModelParam._m0[19u].x))), _1961);
            frontier_phi_22_46_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _2051 = frontier_phi_22_46_ladder_2;
        _2053 = frontier_phi_22_46_ladder_1;
        _2055 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2035 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1066, _1067, _1068), _1961);
        _2051 = _2035.x * cbModelParam._m0[1u].z;
        _2053 = _2035.y * cbModelParam._m0[1u].z;
        _2055 = _2035.z * cbModelParam._m0[1u].z;
    }
    float _2067 = ((((1.0 - _1087) * ((_1074 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1087 * _1074)) * _1058;
    float _2068 = _2067 * ((cbModelParam._m0[1u].w * (_2051 - _1952)) + _1952);
    float _2069 = _2067 * ((cbModelParam._m0[1u].w * (_2053 - _1954)) + _1954);
    float _2070 = _2067 * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2073 = fma(_2070, cbSceneParam._m0[89u].z, fma(_2069, cbSceneParam._m0[89u].y, _2068 * cbSceneParam._m0[89u].x));
    float _2076 = fma(_2070, cbSceneParam._m0[90u].z, fma(_2069, cbSceneParam._m0[90u].y, _2068 * cbSceneParam._m0[90u].x));
    float _2079 = fma(_2070, cbSceneParam._m0[91u].z, fma(_2069, cbSceneParam._m0[91u].y, _2068 * cbSceneParam._m0[91u].x));
    uvec4 _2089 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2091 = _2089.x * 14u;
    uint _2092 = _2091 + 13u;
    float _2099 = _1058 + (-1.0);
    float _2104 = (cbLight._m0[_2092].x * _2099) + 1.0;
    float _2105 = (cbLight._m0[_2092].y * _2099) + 1.0;
    float _2106 = (cbLight._m0[_2092].z * _2099) + 1.0;
    float _2107 = (cbLight._m0[_2092].w * _2099) + 1.0;
    uint _2108 = _2091 + 5u;
    float _2114 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2118 = _2091 + 4u;
    float _2124 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2128 = _2091 | 1u;
    float _2139 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_907, _908, _909));
    float _2142 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_907, _908, _909));
    float _4298 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _4309 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2147 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2149 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2156 = ((cbLight._m0[_2108].x * _2114) * _2149) + ((cbLight._m0[_2118].x * _2124) * _2147);
    float _2157 = ((_2114 * cbLight._m0[_2108].y) * _2149) + ((_2124 * cbLight._m0[_2118].y) * _2147);
    float _2158 = ((_2114 * cbLight._m0[_2108].z) * _2149) + ((_2124 * cbLight._m0[_2118].z) * _2147);
    uvec4 _2162 = floatBitsToUint(cbLight._m0[_2091 + 12u]);
    bool _2164 = _2162.x == 0u;
    float _2175;
    float _2177;
    float _2179;
    if (_2164)
    {
        _2175 = _2156;
        _2177 = _2157;
        _2179 = _2158;
    }
    else
    {
        uint _2183 = _2091 + 6u;
        float _2199 = (dot(vec3(cbLight._m0[_2091 + 2u].xyz), vec3(_907, _908, _909)) * 0.5) + 0.5;
        float _2200 = _2199 * _2199;
        float _4320 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2201 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2202 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2175 = (((cbLight._m0[_2183].x * 0.3183098733425140380859375) * _2201) * _2202) + _2156;
        _2177 = (((cbLight._m0[_2183].y * 0.3183098733425140380859375) * _2201) * _2202) + _2157;
        _2179 = (((cbLight._m0[_2183].z * 0.3183098733425140380859375) * _2201) * _2202) + _2158;
    }
    bool _2182 = _2162.y == 0u;
    float _2220;
    float _2222;
    float _2224;
    if (_2182)
    {
        _2220 = _2175;
        _2222 = _2177;
        _2224 = _2179;
    }
    else
    {
        uint _2379 = _2091 + 7u;
        float _2395 = (dot(vec3(cbLight._m0[_2091 + 3u].xyz), vec3(_907, _908, _909)) * 0.5) + 0.5;
        float _2396 = _2395 * _2395;
        float _4336 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2397 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2398 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2220 = (((cbLight._m0[_2379].x * 0.3183098733425140380859375) * _2397) * _2398) + _2175;
        _2222 = (((cbLight._m0[_2379].y * 0.3183098733425140380859375) * _2397) * _2398) + _2177;
        _2224 = (((cbLight._m0[_2379].z * 0.3183098733425140380859375) * _2397) * _2398) + _2179;
    }
    uint _2227 = _2091 + 8u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _910) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_2091].x + _987;
    float _2243 = cbLight._m0[_2091].y + _988;
    float _2244 = cbLight._m0[_2091].z + _989;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2091].xyz));
    float _4352 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _2256 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2257 = dot(vec3(_907, _908, _909), vec3(_2249, _2250, _2251));
    float _4374 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2249, _2250, _2251));
    float _4385 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2241 * _2241;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2280 = (exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2281 = 1.0 - _2241;
    float _2292 = (0.5 / (((_2256 * ((_2255 * _2281) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2281) + _2241) * _2255))) * _2255;
    float _4396 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    uint _2305 = _2091 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _910) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2128].x + _987;
    float _2319 = cbLight._m0[_2128].y + _988;
    float _2320 = cbLight._m0[_2128].z + _989;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2128].xyz));
    float _4407 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2332 = dot(vec3(_907, _908, _909), vec3(_2325, _2326, _2327));
    float _4418 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2325, _2326, _2327));
    float _4429 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2354 = 1.0 - _2317;
    float _2364 = (0.5 / (((_2256 * ((_2331 * _2354) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2354) + _2317) * _2331))) * _2331;
    float _4440 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2366 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2376 = (((_2353 * cbLight._m0[_2305].x) * _2366) * _2114) + (((_2280 * cbLight._m0[_2227].x) * _2294) * _2124);
    float _2377 = (((_2353 * cbLight._m0[_2305].y) * _2366) * _2114) + (((_2280 * cbLight._m0[_2227].y) * _2294) * _2124);
    float _2378 = (((_2353 * cbLight._m0[_2305].z) * _2366) * _2114) + (((_2280 * cbLight._m0[_2227].z) * _2294) * _2124);
    float _2440;
    float _2442;
    float _2444;
    if (_2164)
    {
        _2440 = _2376;
        _2442 = _2377;
        _2444 = _2378;
    }
    else
    {
        uint _2446 = _2091 + 2u;
        uint _2450 = _2091 + 10u;
        float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _910) * 0.949999988079071044921875);
        float _2465 = _2464 * _2464;
        float _2466 = cbLight._m0[_2446].x + _987;
        float _2467 = cbLight._m0[_2446].y + _988;
        float _2468 = cbLight._m0[_2446].z + _989;
        float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
        float _2473 = _2472 * _2466;
        float _2474 = _2472 * _2467;
        float _2475 = _2472 * _2468;
        float _2476 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2446].xyz));
        float _4451 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2480 = dot(vec3(_907, _908, _909), vec3(_2473, _2474, _2475));
        float _4462 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2484 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2473, _2474, _2475));
        float _4473 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2488 = _2465 * _2465;
        float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
        float _2501 = (exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2502 = 1.0 - _2465;
        float _2512 = (0.5 / (((_2256 * ((_2479 * _2502) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2502) + _2465) * _2479))) * _2479;
        float _4484 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2514 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
        float _2515 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2440 = (((_2501 * cbLight._m0[_2450].x) * _2514) * _2515) + _2376;
        _2442 = (((_2501 * cbLight._m0[_2450].y) * _2514) * _2515) + _2377;
        _2444 = (((_2501 * cbLight._m0[_2450].z) * _2514) * _2515) + _2378;
    }
    float _2550;
    float _2552;
    float _2554;
    if (_2182)
    {
        _2550 = _2440;
        _2552 = _2442;
        _2554 = _2444;
    }
    else
    {
        uint _2561 = _2091 + 3u;
        uint _2565 = _2091 + 11u;
        float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2561].w)) * _910) * 0.949999988079071044921875);
        float _2580 = _2579 * _2579;
        float _2581 = cbLight._m0[_2561].x + _987;
        float _2582 = cbLight._m0[_2561].y + _988;
        float _2583 = cbLight._m0[_2561].z + _989;
        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
        float _2588 = _2587 * _2581;
        float _2589 = _2587 * _2582;
        float _2590 = _2587 * _2583;
        float _2591 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2561].xyz));
        float _4500 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2595 = dot(vec3(_907, _908, _909), vec3(_2588, _2589, _2590));
        float _4511 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2599 = dot(vec3(cbLight._m0[_2561].xyz), vec3(_2588, _2589, _2590));
        float _4522 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2603 = _2580 * _2580;
        float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
        float _2616 = (exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2617 = 1.0 - _2580;
        float _2627 = (0.5 / (((_2256 * ((_2594 * _2617) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2617) + _2580) * _2594))) * _2594;
        float _4533 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2550 = (((_2616 * cbLight._m0[_2565].x) * _2629) * _2630) + _2440;
        _2552 = (((_2616 * cbLight._m0[_2565].y) * _2629) * _2630) + _2442;
        _2554 = (((_2616 * cbLight._m0[_2565].z) * _2629) * _2630) + _2444;
    }
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_2089.y == 0u)
    {
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2705;
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2705;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2705;
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.x;
        uint _2732 = uint((float(_2720.y) * floor(float(uint(cbSceneParam._m0[85u].y * _996) / _2721))) + floor(float(uint(cbSceneParam._m0[85u].x * _995) / _2721)));
        float _2742 = (log2(_2708 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2743 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        uint _2746 = uint(isnan(14.0) ? _2743 : (isnan(_2743) ? 14.0 : min(_2743, 14.0)));
        uvec4 _2751 = texelFetch(g_lightClusterGridBuffer, int(((_2746 << 2u) + (_2732 << 6u)) >> 2u));
        uint _2752 = _2751.x;
        uint _2753 = _2720.z;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((((1u << ((_2753 >> 4u) & 15u)) + 4294967295u) & _2752) == 0u) || ((_2753 & 240u) == 0u))
        {
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
        }
        else
        {
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            uint _3004 = 0u;
            uint _3013;
            bool _3014;
            for (;;)
            {
                _3013 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3004 << 2u)) >> 2u)).x;
                _3014 = _3013 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3014)
                {
                    frontier_phi_61_pred = _2998;
                    frontier_phi_61_pred_1 = _3003;
                    frontier_phi_61_pred_2 = _3002;
                    frontier_phi_61_pred_3 = _3001;
                    frontier_phi_61_pred_4 = _3000;
                    frontier_phi_61_pred_5 = _2999;
                }
                else
                {
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    uint _3128;
                    _3122 = _2998;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3013;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    for (;;)
                    {
                        uint _3132 = uint(findLSB(_3128)) + (_3004 << 5u);
                        uint _3129 = (_3128 + 4294967295u) & _3128;
                        uint _3134 = _3132 * 48u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 3u)).x));
                        uint _3154 = (_3132 * 48u) + 4u;
                        vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 3u)).x));
                        uint _3173 = (_3132 * 48u) + 8u;
                        vec3 _3184 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x));
                        float _3188 = _3148.x - _2706;
                        float _3189 = _3148.y - _2707;
                        float _3190 = _3148.z - _2708;
                        float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                        float _3194 = inversesqrt(_3191);
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3198 = dot(vec3(_1014, _1017, _1020), vec3(_3195, _3196, _3197));
                        float _3203 = 1.0 - (_3191 * _3148.w);
                        float _4559 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3205 = sqrt(_3191) * _3167.w;
                        float _3208 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3198) + _3209;
                        float _3215 = _3205 * _3205;
                        float _3219 = ((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3204) / ((_3215 * 0.699999988079071044921875) + 1.0);
                        float _3223 = (-0.0) - _2706;
                        float _3224 = (-0.0) - _2707;
                        float _3225 = (-0.0) - _2708;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3240 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                        float _3241 = 1.0 - _1074;
                        float _3248 = sqrt(1.0 - ((1.0 - (_3241 * _3241)) * (1.0 - (_3240 * _3240))));
                        float _3249 = _3248 * _3248;
                        float _3250 = _3249 * _3249;
                        float _3251 = _3230 + _3195;
                        float _3252 = _3231 + _3196;
                        float _3253 = _3232 + _3197;
                        float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                        float _3261 = dot(vec3(_1014, _1017, _1020), vec3(_3230, _3231, _3232));
                        float _4575 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3265 = dot(vec3(_1014, _1017, _1020), vec3(_3257 * _3251, _3257 * _3252, _3257 * _3253));
                        float _4586 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3268 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3272 = ((_3268 * _3268) * (_3250 + (-1.0))) + 1.0;
                        float _3273 = _3208 * _3249;
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3198) + _3274;
                        float _4597 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3279 = 1.0 - _3249;
                        float _3289 = (0.5 / (((_3278 * ((_3264 * _3279) + _3249)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3249) * _3264))) * _3278;
                        float _4608 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3300 = (((_3250 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3272 * _3272) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125))) * _3204;
                        _3057 = (_3219 * _3167.x) + _3125;
                        _3058 = (_3219 * _3167.y) + _3126;
                        _3059 = (_3219 * _3167.z) + _3127;
                        _3054 = (_3300 * _3184.x) + _3122;
                        _3055 = (_3300 * _3184.y) + _3123;
                        _3056 = (_3300 * _3184.z) + _3124;
                        if (_3129 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3122 = _3054;
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3129;
                        }
                    }
                    frontier_phi_61_pred = _3054;
                    frontier_phi_61_pred_1 = _3059;
                    frontier_phi_61_pred_2 = _3058;
                    frontier_phi_61_pred_3 = _3057;
                    frontier_phi_61_pred_4 = _3056;
                    frontier_phi_61_pred_5 = _3055;
                }
                _2854 = frontier_phi_61_pred;
                _2864 = frontier_phi_61_pred_1;
                _2862 = frontier_phi_61_pred_2;
                _2860 = frontier_phi_61_pred_3;
                _2858 = frontier_phi_61_pred_4;
                _2856 = frontier_phi_61_pred_5;
                uint _3005 = _3004 + 1u;
                if (_3005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2998 = _2854;
                    _2999 = _2856;
                    _3000 = _2858;
                    _3001 = _2860;
                    _3002 = _2862;
                    _3003 = _2864;
                    _3004 = _3005;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
        }
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.z;
        uint _2870 = (_2868 >> 8u) & 15u;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((4294967295u << _2870) & _2752) == 0u)
        {
            _2966 = _2853;
            _2968 = _2855;
            _2970 = _2857;
            _2972 = _2859;
            _2974 = _2861;
            _2976 = _2863;
        }
        else
        {
            float _2991 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
            float _2992 = _2991 * _2706;
            float _2993 = _2991 * _2707;
            float _2994 = _2991 * _2708;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2870 < ((_2868 >> 12u) & 15u))
            {
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _3105 = _2853;
                float _3106 = _2855;
                float _3107 = _2857;
                float _3108 = _2859;
                float _3109 = _2861;
                float _3110 = _2863;
                uint _3111 = _2870;
                uint _3120;
                bool _3121;
                for (;;)
                {
                    _3120 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                    _3121 = _3120 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3121)
                    {
                        frontier_phi_67_pred = _3108;
                        frontier_phi_67_pred_1 = _3109;
                        frontier_phi_67_pred_2 = _3110;
                        frontier_phi_67_pred_3 = _3107;
                        frontier_phi_67_pred_4 = _3106;
                        frontier_phi_67_pred_5 = _3105;
                    }
                    else
                    {
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3318 = _3105;
                        float _3319 = _3106;
                        float _3320 = _3107;
                        float _3321 = _3108;
                        float _3322 = _3109;
                        float _3323 = _3110;
                        uint _3324 = _3120;
                        uint _3325;
                        vec4 _3350;
                        float _3351;
                        vec4 _3366;
                        vec3 _3378;
                        vec4 _3393;
                        vec4 _3408;
                        float _3454;
                        bool _3455;
                        for (;;)
                        {
                            uint _3335 = ((_3111 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3324));
                            _3325 = (_3324 + 4294967295u) & _3324;
                            uint _3337 = _3335 * 40u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            _3351 = _3350.w;
                            uint _3353 = (_3335 * 40u) + 4u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3335 * 40u) + 8u;
                            _3378 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x));
                            uint _3380 = (_3335 * 40u) + 16u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3335 * 40u) + 20u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3410 = (_3335 * 40u) + 24u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3429 = (_3335 * 40u) + 28u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            _3454 = fma(_2708, _3442.z, fma(_2707, _3442.y, _3442.x * _2706)) + _3442.w;
                            _3455 = !((fma(_2708, _3423.z, fma(_2707, _3423.y, _3423.x * _2706)) + _3423.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3455)
                            {
                                float _3482 = _3350.x - _2706;
                                float _3483 = _3350.y - _2707;
                                float _3484 = _3350.z - _2708;
                                float _3485 = dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484));
                                float _3488 = inversesqrt(_3485);
                                float _3489 = _3488 * _3482;
                                float _3490 = _3488 * _3483;
                                float _3491 = _3488 * _3484;
                                float _3495 = 1.0 - (_3485 / (_3351 * _3351));
                                float _4619 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3500 = sqrt(_3485) * _3366.w;
                                float _3502 = 1.39999997615814208984375 / (_3500 + 1.39999997615814208984375);
                                float _3503 = _3502 * _3502;
                                float _3506 = ((1.0 - _3503) * dot(vec3(_3489, _3490, _3491), vec3(_1014, _1017, _1020))) + _3503;
                                float _3509 = _3500 * _3500;
                                float _3513 = (fma(_2708, _3393.z, fma(_2707, _3393.y, _3393.x * _2706)) + _3393.w) / _3454;
                                float _3514 = (fma(_2708, _3408.z, fma(_2707, _3408.y, _3408.x * _2706)) + _3408.w) / _3454;
                                float _3518 = 1.0 - dot(vec2(_3513, _3514), vec2(_3513, _3514));
                                float _4635 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3520 = _3519 * (((isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))) * _3496) / ((_3509 * 0.699999988079071044921875) + 1.0));
                                float _3532 = exp2(log2(1.0 / ((_3509 * 3.5) + 5.0)) * 0.25);
                                float _3533 = 1.0 - _1074;
                                float _3540 = sqrt(1.0 - ((1.0 - (_3533 * _3533)) * (1.0 - (_3532 * _3532))));
                                float _3541 = _3540 * _3540;
                                float _3542 = _3541 * _3541;
                                float _3543 = _3489 - _2992;
                                float _3544 = _3490 - _2993;
                                float _3545 = _3491 - _2994;
                                float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                                float _3553 = dot(vec3(_1014, _1017, _1020), vec3((-0.0) - _2992, (-0.0) - _2993, (-0.0) - _2994));
                                float _4646 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3556 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3557 = dot(vec3(_1014, _1017, _1020), vec3(_3549 * _3543, _3549 * _3544, _3549 * _3545));
                                float _4657 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3560 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3564 = ((_3560 * _3560) * (_3542 + (-1.0))) + 1.0;
                                float _3565 = _3502 * _3541;
                                float _3566 = _3565 * _3565;
                                float _3572 = ((1.0 - _3566) * dot(vec3(_1014, _1017, _1020), vec3(_3489, _3490, _3491))) + _3566;
                                float _4668 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3574 = 1.0 - _3541;
                                float _3584 = (0.5 / (((_3573 * ((_3556 * _3574) + _3541)) + 9.9999999392252902907785028219223e-09) + (((_3573 * _3574) + _3541) * _3556))) * _3573;
                                float _4679 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3594 = (_3519 * _3496) * (((_3542 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3564 * _3564) * ((_3509 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3594 * _3378.x;
                                frontier_phi_73_pred_1 = _3594 * _3378.y;
                                frontier_phi_73_pred_2 = _3520 * _3366.z;
                                frontier_phi_73_pred_3 = _3520 * _3366.y;
                                frontier_phi_73_pred_4 = _3520 * _3366.x;
                                frontier_phi_73_pred_5 = _3594 * _3378.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3598 = frontier_phi_73_pred;
                            _3599 = frontier_phi_73_pred_1;
                            _3603 = frontier_phi_73_pred_2;
                            _3602 = frontier_phi_73_pred_3;
                            _3601 = frontier_phi_73_pred_4;
                            _3600 = frontier_phi_73_pred_5;
                            _3308 = _3601 + _3321;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            _3305 = _3598 + _3318;
                            _3306 = _3599 + _3319;
                            _3307 = _3600 + _3320;
                            if (_3325 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3325;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3308;
                        frontier_phi_67_pred_1 = _3309;
                        frontier_phi_67_pred_2 = _3310;
                        frontier_phi_67_pred_3 = _3307;
                        frontier_phi_67_pred_4 = _3306;
                        frontier_phi_67_pred_5 = _3305;
                    }
                    _2973 = frontier_phi_67_pred;
                    _2975 = frontier_phi_67_pred_1;
                    _2977 = frontier_phi_67_pred_2;
                    _2971 = frontier_phi_67_pred_3;
                    _2969 = frontier_phi_67_pred_4;
                    _2967 = frontier_phi_67_pred_5;
                    uint _3112 = _3111 + 1u;
                    if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3105 = _2967;
                        _3106 = _2969;
                        _3107 = _2971;
                        _3108 = _2973;
                        _3109 = _2975;
                        _3110 = _2977;
                        _3111 = _3112;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2975;
                frontier_phi_55_56_ladder_1 = _2977;
                frontier_phi_55_56_ladder_2 = _2973;
                frontier_phi_55_56_ladder_3 = _2971;
                frontier_phi_55_56_ladder_4 = _2969;
                frontier_phi_55_56_ladder_5 = _2967;
            }
            else
            {
                frontier_phi_55_56_ladder = _2861;
                frontier_phi_55_56_ladder_1 = _2863;
                frontier_phi_55_56_ladder_2 = _2859;
                frontier_phi_55_56_ladder_3 = _2857;
                frontier_phi_55_56_ladder_4 = _2855;
                frontier_phi_55_56_ladder_5 = _2853;
            }
            _2966 = frontier_phi_55_56_ladder_5;
            _2968 = frontier_phi_55_56_ladder_4;
            _2970 = frontier_phi_55_56_ladder_3;
            _2972 = frontier_phi_55_56_ladder_2;
            _2974 = frontier_phi_55_56_ladder;
            _2976 = frontier_phi_55_56_ladder_1;
        }
        float _2981 = isnan(1.0) ? _1058 : (isnan(_1058) ? 1.0 : min(_1058, 1.0));
        _2765 = (_2981 * _2972) + _2220;
        _2767 = (_2981 * _2974) + _2222;
        _2769 = (_2981 * _2976) + _2224;
        _2771 = ((_2966 * 0.039999999105930328369140625) * _2981) + _2550;
        _2773 = ((_2968 * 0.039999999105930328369140625) * _2981) + _2552;
        _2775 = ((_2970 * 0.039999999105930328369140625) * _2981) + _2554;
    }
    else
    {
        _2765 = _2220;
        _2767 = _2222;
        _2769 = _2224;
        _2771 = _2550;
        _2773 = _2552;
        _2775 = _2554;
    }
    float _4695 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _4706 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4717 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    uint _2795 = _272 + 6u;
    float _2803 = _995 / cbSceneParam._m0[86u].x;
    float _2804 = _996 / cbSceneParam._m0[86u].y;
    vec4 _2818 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, (log2((isnan(cbSceneParam._m0[77u].w) ? _928 : (isnan(_928) ? cbSceneParam._m0[77u].w : min(_928, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2820 = _2818.x;
    float _2821 = _2818.y;
    float _2822 = _2818.z;
    float _2823 = _2818.w;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_928 > cbSceneParam._m0[78u].w)
    {
        float _2878 = isnan(_928) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _928 : min(cbSceneParam._m0[80u].w, _928));
        float _2879 = _2878 / _928;
        float _2890 = _2879 * _980;
        float _2891 = _981 * _2879;
        float _2892 = (-0.0) - _2891;
        float _2894 = _2879 * _982;
        float _2896 = (cbSceneParam._m0[77u].w * _2892) / _2878;
        float _2897 = _2896 + cbSceneParam._m0[79u].w;
        float _2898 = cbSceneParam._m0[79u].w - _2891;
        float _2904 = sqrt(((_2890 * _2890) + (_2891 * _2891)) + (_2894 * _2894));
        float _2907 = (1.0 - (cbSceneParam._m0[77u].w / _2878)) * _2904;
        float _2912 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2914 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3067;
        if (abs((_2892 - _2896) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3067 = ((((_2897 > 0.0) ? exp2(_2912 * _2897) : (2.0 - exp2(_2914 * _2897))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2907;
        }
        else
        {
            float _3027 = 1.0 / cbSceneParam._m0[80u].x;
            float _3028 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : max(_2897, _2898));
            float _3029 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : min(_2897, _2898));
            float _3038 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : min(_3028, 0.0));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            _3067 = ((abs(_2904 / _2892) * cbSceneParam._m0[80u].y) * ((((_3038 - _3039) * 2.0) - ((exp2(_2912 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0)))) - exp2(_2912 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))))) * _3027)) - ((exp2(_2914 * _3038) - exp2(_2914 * _3039)) * _3027))) + (_2907 * cbSceneParam._m0[80u].z);
        }
        vec4 _3069 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, 1.0), 0.0);
        float _3078 = exp2((_3067 * (-1.44269502162933349609375)) * (1.0 - _3069.w));
        float _3079 = log2(_3078);
        float _3095 = log2(_2823);
        _2916 = (exp2(_3095 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].x)) * _3069.x) / cbSceneParam._m0[78u].x)) + _2820;
        _2918 = (exp2(_3095 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].y)) * _3069.y) / cbSceneParam._m0[78u].y)) + _2821;
        _2920 = (exp2(_3095 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].z)) * _3069.z) / cbSceneParam._m0[78u].z)) + _2822;
        _2922 = _3078 * _2823;
    }
    else
    {
        _2916 = _2820;
        _2918 = _2821;
        _2920 = _2822;
        _2922 = _2823;
    }
    float _2934 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2935 = _2934 == 3.0;
    float _2936 = log2(_2922);
    float _2943 = exp2(_2936 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2765 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1058))) + ((_2771 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1861)) * cbPerFrame._m0[3u].x));
    float _2944 = exp2(_2936 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2767 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1058))) + ((_2773 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1861)) * cbPerFrame._m0[3u].x));
    float _2945 = exp2(_2936 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2769 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1058))) + ((_2775 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1861)) * cbPerFrame._m0[3u].x));
    float _2954 = (_2934 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2954 * (_2935 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2916)));
    SV_Target.y = _2954 * (_2935 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2918)));
    SV_Target.z = _2954 * (_2935 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.w = cbInstanceData._m0[_2795].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2795].w;
}


