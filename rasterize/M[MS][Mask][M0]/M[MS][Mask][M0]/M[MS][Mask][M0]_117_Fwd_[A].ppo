#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1513;
float _3870;
float _3871;
float _3872;
float _3873;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3882 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _450 = (_443 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _451 = (_443 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _452 = (_443 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].z) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3893 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _560 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _562 = _560.x;
    float _572 = dot(vec4(_562, _560.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _584 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _371.z) * 2.0) - ((((_562 - _572) * cbMtdParam._m0[24u].z) + _572) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3904 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _585 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _598 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_585 * ((_543.x * cbMtdParam._m0[14u].x) - _523)) + _523);
    float _601 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_585 * ((_543.y * cbMtdParam._m0[14u].y) - _524)) + _524);
    float _604 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_585 * ((_543.z * cbMtdParam._m0[14u].z) - _525)) + _525);
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _641 = _639.x;
    float _642 = _639.y;
    float _643 = _639.z;
    float _650 = ((_622.x - _641) * _443) + _641;
    float _651 = ((_622.y - _642) * _443) + _642;
    float _652 = ((_622.z - _643) * _443) + _643;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _675 = ((_664.x - _650) * _516) + _650;
    float _676 = ((_664.y - _651) * _516) + _651;
    float _677 = ((_664.z - _652) * _516) + _652;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _702 = ((_689.z - _677) * _585) + _677;
    float _705 = ((((_689.x - _675) * _585) + _675) * 2.0) + (-1.0);
    float _707 = ((((_689.y - _676) * _585) + _676) * 2.0) + (-1.0);
    float _708 = dot(vec2(_705, _707), vec2(_705, _707));
    float _3915 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _713 = sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _752 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _754 = _752.x;
    float _755 = 1.0 - _754;
    float _761 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _764 = ((isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : min(_761, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _773 = (_764 - ((((((_754 - _755) * cbMtdParam._m0[24u].w) + _755) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _764))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3936 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _774 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _781 = (_774 * (cbMtdParam._m0[17u].x - _598)) + _598;
    float _782 = (_774 * (cbMtdParam._m0[17u].y - _601)) + _601;
    float _783 = (_774 * (cbMtdParam._m0[17u].z - _604)) + _604;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _797 = _795.x;
    float _798 = 1.0 - _797;
    float _825 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_797 - _798) * cbMtdParam._m0[24u].y) + _798) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3947 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _826 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _834 = ((((cbMtdParam._m0[10u].x - _781) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _826) + _781;
    float _835 = ((((cbMtdParam._m0[10u].y - _782) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _826) + _782;
    float _836 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _783)) * _826) + _783;
    float _840 = (cbMtdParam._m0[19u].w * (_727.z - _702)) + _702;
    vec4 _854 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _861 = (_854.x * 2.0) + (-1.0);
    float _862 = (_854.y * 2.0) + (-1.0);
    float _863 = dot(vec2(_861, _862), vec2(_861, _862));
    float _3958 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _871 = (_774 * (_854.z - _840)) + _840;
    float _874 = ((cbMtdParam._m0[23u].y - _871) * _826) + _871;
    vec4 _893 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _899 = (_893.x * 2.0) + (-1.0);
    float _900 = (_893.y * 2.0) + (-1.0);
    float _901 = dot(vec2(_899, _900), vec2(_899, _900));
    float _3969 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _909 = (((_727.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _705;
    float _910 = (((_727.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _707;
    float _922 = (((_861 - _909) + (cbMtdParam._m0[21u].x * _909)) * _774) + _909;
    float _923 = (((_862 - _910) + (cbMtdParam._m0[21u].x * _910)) * _774) + _910;
    float _924 = (_774 * (sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) - _713)) + _713;
    float _935 = (((_899 - _922) + (_922 * cbMtdParam._m0[22u].z)) * _826) + _922;
    float _936 = (((_900 - _923) + (_923 * cbMtdParam._m0[22u].z)) * _826) + _923;
    float _937 = ((sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) - _924) * _826) + _924;
    float _939 = cbMtdParam._m0[22u].x + _727.w;
    float _942 = fma(_937, _250 * NORMAL.x, fma(_936, _257 * TANGENT.x, (_243 * _235) * _935));
    float _945 = fma(_937, _250 * NORMAL.y, fma(_936, _257 * TANGENT.y, (_243 * _236) * _935));
    float _948 = fma(_937, _250 * NORMAL.z, fma(_936, _257 * TANGENT.z, (_243 * _237) * _935));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _3980 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _956 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4002 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4013 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4024 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _974 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1024 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1014);
    float _1025 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1014);
    float _1026 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1014);
    float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
    float _1031 = _1024 * _1030;
    float _1032 = _1025 * _1030;
    float _1033 = _1026 * _1030;
    vec4 _1038 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1040 = _1038.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1194 = sqrt(((_1024 * _1024) + (_1025 * _1025)) + (_1026 * _1026));
        float _1200 = (cbMatDynParam._m0[5u].x * _1194) + cbMatDynParam._m0[5u].y;
        float _4035 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1205 = (cbMatDynParam._m0[5u].z * _1194) + cbMatDynParam._m0[5u].w;
        float _4046 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) - _1201)) + _1201) < ((_1040 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1051 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1052 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1070 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1073 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1076 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1089 = _263 + 9u;
    uint _1090 = _1089 + uint(cbMatDynParam._m0[0u].w);
    float _1096 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_1090].x;
    float _1097 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_1090].y;
    float _1098 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_1090].z;
    float _4057 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    vec4 _1110 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1051, cbSceneParam._m0[86u].y * _1052));
    float _1114 = ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * TEXCOORD_5.w) * _1110.x;
    float _1115 = dot(vec3(_953, _954, _955), vec3(_1031, _1032, _1033));
    float _1118 = _1115 * 2.0;
    float _1122 = (_1118 * _953) - _1031;
    float _1123 = (_1118 * _954) - _1032;
    float _1124 = (_1118 * _955) - _1033;
    float _1128 = abs(dot(vec3(_1031, _1032, _1033), vec3(_953, _954, _955)));
    float _4090 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1130 = sqrt(_956);
    float _1143 = exp2((_1130 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1130 * 3.0));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1512;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1237 = fma(_1183, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175));
        float _1241 = fma(_1183, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175));
        float _1245 = fma(_1183, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175));
        float _1270 = _1175 + _953;
        float _1271 = _1179 + _954;
        float _1272 = _1183 + _955;
        float _1282 = fma(_1272, cbModelParam._m0[26u].z, fma(_1271, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1270)) - _1237;
        float _1283 = fma(_1272, cbModelParam._m0[27u].z, fma(_1271, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1270)) - _1241;
        float _1284 = fma(_1272, cbModelParam._m0[28u].z, fma(_1271, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1270)) - _1245;
        float _1288 = inversesqrt(dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284)));
        float _1301 = ((_1288 * _1282) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1237 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1288 * _1283) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1241 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1288 * _1284) / cbModelParam._m0[34u].z) + ((((((_1245 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        float _1340 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1306.x + (-0.5));
        float _1342 = _1340 * (_1306.y + (-0.5));
        float _1343 = _1340 * (_1306.z + (-0.5));
        float _1350 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1313.x + (-0.5));
        float _1352 = _1350 * (_1313.y + (-0.5));
        float _1353 = _1350 * (_1313.z + (-0.5));
        float _1360 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1320.x + (-0.5));
        float _1362 = _1360 * (_1320.y + (-0.5));
        float _1363 = _1360 * (_1320.z + (-0.5));
        float _1370 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1327.x + (-0.5));
        float _1372 = _1370 * (_1327.y + (-0.5));
        float _1373 = _1370 * (_1327.z + (-0.5));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = _1341 * 0.5;
        float _1378 = _1351 * 0.5;
        float _1379 = _1361 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1394 = (dot(vec3(_953, _954, _955), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1404 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4138 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1406 + 1.0))) + _1411) * _1374;
        float _1421 = _1342 * 0.5;
        float _1422 = _1352 * 0.5;
        float _1423 = _1362 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_953, _954, _955), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4171 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1448 + 1.0))) + _1453) * _1375;
        float _1463 = _1343 * 0.5;
        float _1464 = _1353 * 0.5;
        float _1465 = _1363 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_953, _954, _955), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4204 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1490 + 1.0))) + _1495) * _1376;
        _1512 = _1343;
        _1514 = _1342;
        _1515 = _1341;
        _1516 = _1353;
        _1517 = _1352;
        _1518 = _1351;
        _1519 = _1363;
        _1520 = _1362;
        _1521 = _1361;
        _1522 = _1376;
        _1523 = _1375;
        _1524 = _1374;
        _1525 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1526 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1527 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
    }
    else
    {
        _1512 = _1513;
        _1514 = _1513;
        _1515 = _1513;
        _1516 = _1513;
        _1517 = _1513;
        _1518 = _1513;
        _1519 = _1513;
        _1520 = _1513;
        _1521 = _1513;
        _1522 = _1513;
        _1523 = _1513;
        _1524 = _1513;
        _1525 = 0.0;
        _1526 = 0.0;
        _1527 = 0.0;
    }
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1553 = fma(_1183, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175));
        float _1557 = fma(_1183, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175));
        float _1561 = fma(_1183, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175));
        float _1584 = _1175 + _953;
        float _1585 = _1179 + _954;
        float _1586 = _1183 + _955;
        float _1596 = fma(_1586, cbModelParam._m0[30u].z, fma(_1585, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1584)) - _1553;
        float _1597 = fma(_1586, cbModelParam._m0[31u].z, fma(_1585, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1584)) - _1557;
        float _1598 = fma(_1586, cbModelParam._m0[32u].z, fma(_1585, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1584)) - _1561;
        float _1602 = inversesqrt(dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598)));
        float _1615 = ((_1602 * _1596) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1553 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1616 = ((_1602 * _1597) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1557 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1617 = ((_1602 * _1598) / cbModelParam._m0[35u].z) + ((((((_1561 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        float _1652 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1619.x + (-0.5));
        float _1654 = _1652 * (_1619.y + (-0.5));
        float _1655 = _1652 * (_1619.z + (-0.5));
        float _1662 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1626.x + (-0.5));
        float _1664 = _1662 * (_1626.y + (-0.5));
        float _1665 = _1662 * (_1626.z + (-0.5));
        float _1672 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1633.x + (-0.5));
        float _1674 = _1672 * (_1633.y + (-0.5));
        float _1675 = _1672 * (_1633.z + (-0.5));
        float _1682 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1640.x + (-0.5));
        float _1684 = _1682 * (_1640.y + (-0.5));
        float _1685 = _1682 * (_1640.z + (-0.5));
        float _1686 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1689 = _1653 * 0.5;
        float _1690 = _1663 * 0.5;
        float _1691 = _1673 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_953, _954, _955), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1686 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4267 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1716 + 1.0))) + _1721) * _1686;
        float _1731 = _1654 * 0.5;
        float _1732 = _1664 * 0.5;
        float _1733 = _1674 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_953, _954, _955), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1687 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4300 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1758 + 1.0))) + _1763) * _1687;
        float _1773 = _1655 * 0.5;
        float _1774 = _1665 * 0.5;
        float _1775 = _1675 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_953, _954, _955), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1688 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4333 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1800 + 1.0))) + _1805) * _1688;
        _1822 = _1655;
        _1823 = _1654;
        _1824 = _1653;
        _1825 = _1665;
        _1826 = _1664;
        _1827 = _1663;
        _1828 = _1675;
        _1829 = _1674;
        _1830 = _1673;
        _1831 = _1688;
        _1832 = _1687;
        _1833 = _1686;
        _1834 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
        _1835 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
        _1836 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
    }
    else
    {
        _1822 = _1513;
        _1823 = _1513;
        _1824 = _1513;
        _1825 = _1513;
        _1826 = _1513;
        _1827 = _1513;
        _1828 = _1513;
        _1829 = _1513;
        _1830 = _1513;
        _1831 = _1513;
        _1832 = _1513;
        _1833 = _1513;
        _1834 = 0.0;
        _1835 = 0.0;
        _1836 = 0.0;
    }
    float _1846 = (cbModelParam._m0[1u].x * (_1834 - _1525)) + _1525;
    float _1847 = (cbModelParam._m0[1u].x * (_1835 - _1526)) + _1526;
    float _1848 = (cbModelParam._m0[1u].x * (_1836 - _1527)) + _1527;
    float _1869 = fma(_1848, cbSceneParam._m0[89u].z, fma(_1847, cbSceneParam._m0[89u].y, _1846 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1848, cbSceneParam._m0[90u].z, fma(_1847, cbSceneParam._m0[90u].y, _1846 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1848, cbSceneParam._m0[91u].z, fma(_1847, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1846));
    float _1890 = _1122 * 0.5;
    float _1891 = _1123 * 0.5;
    float _1892 = _1124 * 0.5;
    float _1893 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1824, _1827, _1830, _1833));
    float _1896 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1823, _1826, _1829, _1832));
    float _1899 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1822, _1825, _1828, _1831));
    float _1933;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1906 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1512, _1516, _1519, _1522));
        float _1910 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1514, _1517, _1520, _1523));
        float _1914 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1515, _1518, _1521, _1524));
        float _1921 = dot(vec4(cbModelParam._m0[39u]), vec4(_1890, _1891, _1892, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1921) ? 0.0 : (isnan(0.0) ? _1921 : max(0.0, _1921))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1944;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1935 = dot(vec4(cbModelParam._m0[40u]), vec4(_1890, _1891, _1892, 1.0));
        _1944 = dot(vec3(isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1935) ? 0.0 : (isnan(0.0) ? _1935 : max(0.0, _1935))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1944 = 1.0;
    }
    float _1948 = (_1944 * cbModelParam._m0[1u].x) + (_1933 * (1.0 - cbModelParam._m0[1u].x));
    float _1958 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _956);
    float _1959 = isnan(_1958) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1958 : min(cbModelParam._m0[25u].z, _1958));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2006 = fma(_1183, cbModelParam._m0[13u].z, fma(_1179, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1175)) + cbModelParam._m0[13u].w;
        float _2010 = fma(_1183, cbModelParam._m0[14u].z, fma(_1179, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1175)) + cbModelParam._m0[14u].w;
        float _2014 = fma(_1183, cbModelParam._m0[15u].z, fma(_1179, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1175)) + cbModelParam._m0[15u].w;
        float _2017 = fma(_1124, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122));
        float _2020 = fma(_1124, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122));
        float _2023 = fma(_1124, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122));
        float _2051;
        if (_2017 > 0.0)
        {
            _2051 = abs((1.0 - _2006) / _2017);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2006 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2051 = frontier_phi_17_15_ladder;
        }
        float _2252;
        if (_2020 > 0.0)
        {
            _2252 = abs((1.0 - _2010) / _2020);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2010 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2252 = frontier_phi_26_22_ladder;
        }
        float _2495;
        if (_2023 > 0.0)
        {
            _2495 = abs((1.0 - _2014) / _2023);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2014 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2495 = frontier_phi_38_33_ladder;
        }
        float _2497 = isnan(_2252) ? _2051 : (isnan(_2051) ? _2252 : min(_2051, _2252));
        float _2498 = isnan(_2495) ? _2497 : (isnan(_2497) ? _2495 : min(_2497, _2495));
        float _2502 = (_2498 * _2017) + _2006;
        float _2503 = (_2498 * _2020) + _2010;
        float _2504 = (_2498 * _2023) + _2014;
        float _2505 = _2498 * 9.9999997473787516355514526367188e-05;
        float _2507 = (-1.0) - _2505;
        float _2509 = _2505 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2504 > _2509) || ((_2504 < _2507) || ((_2503 > _2509) || ((_2503 < _2507) || ((_2502 < _2507) || (_2502 > _2509))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2504, cbModelParam._m0[9u].z, fma(_2503, cbModelParam._m0[9u].y, _2502 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2504, cbModelParam._m0[10u].z, fma(_2503, cbModelParam._m0[10u].y, _2502 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2504, cbModelParam._m0[11u].z, fma(_2503, cbModelParam._m0[11u].y, _2502 * cbModelParam._m0[11u].x))), _1959);
            frontier_phi_16_38_ladder = _2628.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2628.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2628.x * cbModelParam._m0[1u].y;
        }
        _2039 = frontier_phi_16_38_ladder_2;
        _2041 = frontier_phi_16_38_ladder_1;
        _2043 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1122, _1123, _1124), _1959);
        _2039 = _2027.x * cbModelParam._m0[1u].y;
        _2041 = _2027.y * cbModelParam._m0[1u].y;
        _2043 = _2027.z * cbModelParam._m0[1u].y;
    }
    float _2047 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _956);
    float _2048 = isnan(_2047) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2047 : min(cbModelParam._m0[25u].w, _2047));
    float _2138;
    float _2140;
    float _2142;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2102 = fma(_1183, cbModelParam._m0[21u].z, fma(_1179, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1175)) + cbModelParam._m0[21u].w;
        float _2106 = fma(_1183, cbModelParam._m0[22u].z, fma(_1179, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1175)) + cbModelParam._m0[22u].w;
        float _2110 = fma(_1183, cbModelParam._m0[23u].z, fma(_1179, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1175)) + cbModelParam._m0[23u].w;
        float _2113 = fma(_1124, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122));
        float _2116 = fma(_1124, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122));
        float _2119 = fma(_1124, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122));
        float _2257;
        if (_2113 > 0.0)
        {
            _2257 = abs((1.0 - _2102) / _2113);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2102 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2257 = frontier_phi_28_24_ladder;
        }
        float _2522;
        if (_2116 > 0.0)
        {
            _2522 = abs((1.0 - _2106) / _2116);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2106 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2522 = frontier_phi_40_35_ladder;
        }
        float _2727;
        if (_2119 > 0.0)
        {
            _2727 = abs((1.0 - _2110) / _2119);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2110 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2727 = frontier_phi_49_46_ladder;
        }
        float _2729 = isnan(_2522) ? _2257 : (isnan(_2257) ? _2522 : min(_2257, _2522));
        float _2730 = isnan(_2727) ? _2729 : (isnan(_2729) ? _2727 : min(_2729, _2727));
        float _2734 = (_2730 * _2113) + _2102;
        float _2735 = (_2730 * _2116) + _2106;
        float _2736 = (_2730 * _2119) + _2110;
        float _2737 = _2730 * 9.9999997473787516355514526367188e-05;
        float _2738 = (-1.0) - _2737;
        float _2740 = _2737 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2736 > _2740) || ((_2736 < _2738) || ((_2735 > _2740) || ((_2735 < _2738) || ((_2734 < _2738) || (_2734 > _2740))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2736, cbModelParam._m0[17u].z, fma(_2735, cbModelParam._m0[17u].y, _2734 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2736, cbModelParam._m0[18u].z, fma(_2735, cbModelParam._m0[18u].y, _2734 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2736, cbModelParam._m0[19u].z, fma(_2735, cbModelParam._m0[19u].y, _2734 * cbModelParam._m0[19u].x))), _2048);
            frontier_phi_25_49_ladder = _2935.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2935.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2935.x * cbModelParam._m0[1u].z;
        }
        _2138 = frontier_phi_25_49_ladder_2;
        _2140 = frontier_phi_25_49_ladder_1;
        _2142 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2122 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1122, _1123, _1124), _2048);
        _2138 = _2122.x * cbModelParam._m0[1u].z;
        _2140 = _2122.y * cbModelParam._m0[1u].z;
        _2142 = _2122.z * cbModelParam._m0[1u].z;
    }
    float _2154 = ((((1.0 - _1143) * ((_1130 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1143 * _1130)) * _1114;
    float _2155 = _2154 * ((cbModelParam._m0[1u].w * (_2138 - _2039)) + _2039);
    float _2156 = _2154 * ((cbModelParam._m0[1u].w * (_2140 - _2041)) + _2041);
    float _2157 = _2154 * ((cbModelParam._m0[1u].w * (_2142 - _2043)) + _2043);
    float _2160 = fma(_2157, cbSceneParam._m0[89u].z, fma(_2156, cbSceneParam._m0[89u].y, _2155 * cbSceneParam._m0[89u].x));
    float _2163 = fma(_2157, cbSceneParam._m0[90u].z, fma(_2156, cbSceneParam._m0[90u].y, _2155 * cbSceneParam._m0[90u].x));
    float _2166 = fma(_2157, cbSceneParam._m0[91u].z, fma(_2156, cbSceneParam._m0[91u].y, _2155 * cbSceneParam._m0[91u].x));
    uvec4 _2176 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2178 = _2176.x * 14u;
    uint _2179 = _2178 + 13u;
    float _2186 = _1114 + (-1.0);
    float _2191 = (cbLight._m0[_2179].x * _2186) + 1.0;
    float _2192 = (cbLight._m0[_2179].y * _2186) + 1.0;
    float _2193 = (cbLight._m0[_2179].z * _2186) + 1.0;
    float _2194 = (cbLight._m0[_2179].w * _2186) + 1.0;
    uint _2195 = _2178 + 5u;
    float _2201 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
    uint _2205 = _2178 + 4u;
    float _2211 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
    uint _2215 = _2178 | 1u;
    float _2226 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_953, _954, _955));
    float _2229 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_953, _954, _955));
    float _4469 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _4480 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2234 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * 0.3183098733425140380859375;
    float _2236 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * 0.3183098733425140380859375;
    float _2243 = ((cbLight._m0[_2195].x * _2201) * _2236) + ((cbLight._m0[_2205].x * _2211) * _2234);
    float _2244 = ((_2201 * cbLight._m0[_2195].y) * _2236) + ((_2211 * cbLight._m0[_2205].y) * _2234);
    float _2245 = ((_2201 * cbLight._m0[_2195].z) * _2236) + ((_2211 * cbLight._m0[_2205].z) * _2234);
    uvec4 _2249 = floatBitsToUint(cbLight._m0[_2178 + 12u]);
    bool _2251 = _2249.x == 0u;
    float _2262;
    float _2264;
    float _2266;
    if (_2251)
    {
        _2262 = _2243;
        _2264 = _2244;
        _2266 = _2245;
    }
    else
    {
        uint _2270 = _2178 + 6u;
        float _2286 = (dot(vec3(cbLight._m0[_2178 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4491 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2289 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
        _2262 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2243;
        _2264 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2244;
        _2266 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2245;
    }
    bool _2269 = _2249.y == 0u;
    float _2307;
    float _2309;
    float _2311;
    if (_2269)
    {
        _2307 = _2262;
        _2309 = _2264;
        _2311 = _2266;
    }
    else
    {
        uint _2466 = _2178 + 7u;
        float _2482 = (dot(vec3(cbLight._m0[_2178 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2483 = _2482 * _2482;
        float _4507 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2484 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2485 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
        _2307 = (((cbLight._m0[_2466].x * 0.3183098733425140380859375) * _2484) * _2485) + _2262;
        _2309 = (((cbLight._m0[_2466].y * 0.3183098733425140380859375) * _2484) * _2485) + _2264;
        _2311 = (((cbLight._m0[_2466].z * 0.3183098733425140380859375) * _2484) * _2485) + _2266;
    }
    uint _2314 = _2178 + 8u;
    float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _956) * 0.949999988079071044921875);
    float _2328 = _2327 * _2327;
    float _2329 = cbLight._m0[_2178].x + _1031;
    float _2330 = cbLight._m0[_2178].y + _1032;
    float _2331 = cbLight._m0[_2178].z + _1033;
    float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
    float _2336 = _2335 * _2329;
    float _2337 = _2335 * _2330;
    float _2338 = _2335 * _2331;
    float _2339 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2178].xyz));
    float _4523 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _4534 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _2343 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2344 = dot(vec3(_953, _954, _955), vec3(_2336, _2337, _2338));
    float _4545 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2348 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2336, _2337, _2338));
    float _4556 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = _2328 * _2328;
    float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
    float _2367 = (exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2368 = 1.0 - _2328;
    float _2379 = (0.5 / (((_2343 * ((_2342 * _2368) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2368) + _2328) * _2342))) * _2342;
    float _4567 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2381 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
    uint _2392 = _2178 + 9u;
    float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _956) * 0.949999988079071044921875);
    float _2404 = _2403 * _2403;
    float _2405 = cbLight._m0[_2215].x + _1031;
    float _2406 = cbLight._m0[_2215].y + _1032;
    float _2407 = cbLight._m0[_2215].z + _1033;
    float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
    float _2412 = _2411 * _2405;
    float _2413 = _2411 * _2406;
    float _2414 = _2411 * _2407;
    float _2415 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2215].xyz));
    float _4578 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2419 = dot(vec3(_953, _954, _955), vec3(_2412, _2413, _2414));
    float _4589 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2423 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2412, _2413, _2414));
    float _4600 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2427 = _2404 * _2404;
    float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
    float _2440 = (exp2(log2(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2441 = 1.0 - _2404;
    float _2451 = (0.5 / (((_2343 * ((_2418 * _2441) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2441) + _2404) * _2418))) * _2418;
    float _4611 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2453 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
    float _2463 = (((_2440 * cbLight._m0[_2392].x) * _2453) * _2201) + (((_2367 * cbLight._m0[_2314].x) * _2381) * _2211);
    float _2464 = (((_2440 * cbLight._m0[_2392].y) * _2453) * _2201) + (((_2367 * cbLight._m0[_2314].y) * _2381) * _2211);
    float _2465 = (((_2440 * cbLight._m0[_2392].z) * _2453) * _2201) + (((_2367 * cbLight._m0[_2314].z) * _2381) * _2211);
    float _2527;
    float _2529;
    float _2531;
    if (_2251)
    {
        _2527 = _2463;
        _2529 = _2464;
        _2531 = _2465;
    }
    else
    {
        uint _2533 = _2178 + 2u;
        uint _2537 = _2178 + 10u;
        float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2533].w)) * _956) * 0.949999988079071044921875);
        float _2552 = _2551 * _2551;
        float _2553 = cbLight._m0[_2533].x + _1031;
        float _2554 = cbLight._m0[_2533].y + _1032;
        float _2555 = cbLight._m0[_2533].z + _1033;
        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
        float _2560 = _2559 * _2553;
        float _2561 = _2559 * _2554;
        float _2562 = _2559 * _2555;
        float _2563 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2533].xyz));
        float _4622 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2567 = dot(vec3(_953, _954, _955), vec3(_2560, _2561, _2562));
        float _4633 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2571 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_2560, _2561, _2562));
        float _4644 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2575 = _2552 * _2552;
        float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
        float _2588 = (exp2(log2(1.0 - (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2589 = 1.0 - _2552;
        float _2599 = (0.5 / (((_2343 * ((_2566 * _2589) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2589) + _2552) * _2566))) * _2566;
        float _4655 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
        _2527 = (((_2588 * cbLight._m0[_2537].x) * _2601) * _2602) + _2463;
        _2529 = (((_2588 * cbLight._m0[_2537].y) * _2601) * _2602) + _2464;
        _2531 = (((_2588 * cbLight._m0[_2537].z) * _2601) * _2602) + _2465;
    }
    float _2637;
    float _2639;
    float _2641;
    if (_2269)
    {
        _2637 = _2527;
        _2639 = _2529;
        _2641 = _2531;
    }
    else
    {
        uint _2648 = _2178 + 3u;
        uint _2652 = _2178 + 11u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _956) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _1031;
        float _2669 = cbLight._m0[_2648].y + _1032;
        float _2670 = cbLight._m0[_2648].z + _1033;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2648].xyz));
        float _4671 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2682 = dot(vec3(_953, _954, _955), vec3(_2675, _2676, _2677));
        float _4682 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4693 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2703 = (exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2704 = 1.0 - _2667;
        float _2714 = (0.5 / (((_2343 * ((_2681 * _2704) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2704) + _2667) * _2681))) * _2681;
        float _4704 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
        _2637 = (((_2703 * cbLight._m0[_2652].x) * _2716) * _2717) + _2527;
        _2639 = (((_2703 * cbLight._m0[_2652].y) * _2716) * _2717) + _2529;
        _2641 = (((_2703 * cbLight._m0[_2652].z) * _2716) * _2717) + _2531;
    }
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_2176.y == 0u)
    {
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2793 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2792;
        float _2794 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2792;
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2792;
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.x;
        uint _2819 = uint((float(_2807.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1052) / _2808))) + floor(float(uint(cbSceneParam._m0[85u].x * _1051) / _2808)));
        float _2829 = (log2(_2795 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2830 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        uint _2833 = uint(isnan(14.0) ? _2830 : (isnan(_2830) ? 14.0 : min(_2830, 14.0)));
        uvec4 _2838 = texelFetch(g_lightClusterGridBuffer, int(((_2833 << 2u) + (_2819 << 6u)) >> 2u));
        uint _2839 = _2838.x;
        uint _2840 = _2807.z;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        if (((((1u << ((_2840 >> 4u) & 15u)) + 4294967295u) & _2839) == 0u) || ((_2840 & 240u) == 0u))
        {
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
        }
        else
        {
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            uint _3099 = 0u;
            uint _3108;
            bool _3109;
            for (;;)
            {
                _3108 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3099 << 2u)) >> 2u)).x;
                _3109 = _3108 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3109)
                {
                    frontier_phi_66_pred = _3093;
                    frontier_phi_66_pred_1 = _3098;
                    frontier_phi_66_pred_2 = _3097;
                    frontier_phi_66_pred_3 = _3096;
                    frontier_phi_66_pred_4 = _3095;
                    frontier_phi_66_pred_5 = _3094;
                }
                else
                {
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    uint _3244;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3108;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    for (;;)
                    {
                        uint _3248 = uint(findLSB(_3244)) + (_3099 << 5u);
                        uint _3245 = (_3244 + 4294967295u) & _3244;
                        uint _3250 = _3248 * 48u;
                        vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 3u)).x));
                        uint _3270 = (_3248 * 48u) + 4u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 3u)).x));
                        uint _3289 = (_3248 * 48u) + 8u;
                        vec3 _3300 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x));
                        float _3304 = _3264.x - _2793;
                        float _3305 = _3264.y - _2794;
                        float _3306 = _3264.z - _2795;
                        float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                        float _3310 = inversesqrt(_3307);
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3314 = dot(vec3(_1070, _1073, _1076), vec3(_3311, _3312, _3313));
                        float _3319 = 1.0 - (_3307 * _3264.w);
                        float _4730 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3320 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3321 = sqrt(_3307) * _3283.w;
                        float _3324 = 1.39999997615814208984375 / (_3321 + 1.39999997615814208984375);
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3314) + _3325;
                        float _3331 = _3321 * _3321;
                        float _3335 = ((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3320) / ((_3331 * 0.699999988079071044921875) + 1.0);
                        float _3339 = (-0.0) - _2793;
                        float _3340 = (-0.0) - _2794;
                        float _3341 = (-0.0) - _2795;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3346 = _3345 * _3339;
                        float _3347 = _3345 * _3340;
                        float _3348 = _3345 * _3341;
                        float _3356 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                        float _3357 = 1.0 - _1130;
                        float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                        float _3365 = _3364 * _3364;
                        float _3366 = _3365 * _3365;
                        float _3367 = _3346 + _3311;
                        float _3368 = _3347 + _3312;
                        float _3369 = _3348 + _3313;
                        float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                        float _3377 = dot(vec3(_1070, _1073, _1076), vec3(_3346, _3347, _3348));
                        float _4746 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3380 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3381 = dot(vec3(_1070, _1073, _1076), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                        float _4757 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                        float _3389 = _3324 * _3365;
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3314) + _3390;
                        float _4768 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3394 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3395 = 1.0 - _3365;
                        float _3405 = (0.5 / (((_3394 * ((_3380 * _3395) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3365) * _3380))) * _3394;
                        float _4779 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3416 = (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) / ((_3388 * _3388) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125))) * _3320;
                        _3168 = (_3335 * _3283.x) + _3241;
                        _3169 = (_3335 * _3283.y) + _3242;
                        _3170 = (_3335 * _3283.z) + _3243;
                        _3165 = (_3416 * _3300.x) + _3238;
                        _3166 = (_3416 * _3300.y) + _3239;
                        _3167 = (_3416 * _3300.z) + _3240;
                        if (_3245 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3245;
                        }
                    }
                    frontier_phi_66_pred = _3165;
                    frontier_phi_66_pred_1 = _3170;
                    frontier_phi_66_pred_2 = _3169;
                    frontier_phi_66_pred_3 = _3168;
                    frontier_phi_66_pred_4 = _3167;
                    frontier_phi_66_pred_5 = _3166;
                }
                _2941 = frontier_phi_66_pred;
                _2951 = frontier_phi_66_pred_1;
                _2949 = frontier_phi_66_pred_2;
                _2947 = frontier_phi_66_pred_3;
                _2945 = frontier_phi_66_pred_4;
                _2943 = frontier_phi_66_pred_5;
                uint _3100 = _3099 + 1u;
                if (_3100 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3093 = _2941;
                    _3094 = _2943;
                    _3095 = _2945;
                    _3096 = _2947;
                    _3097 = _2949;
                    _3098 = _2951;
                    _3099 = _3100;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
        }
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.z;
        uint _2957 = (_2955 >> 8u) & 15u;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        if (((4294967295u << _2957) & _2839) == 0u)
        {
            _3061 = _2940;
            _3063 = _2942;
            _3065 = _2944;
            _3067 = _2946;
            _3069 = _2948;
            _3071 = _2950;
        }
        else
        {
            float _3086 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
            float _3087 = _3086 * _2793;
            float _3088 = _3086 * _2794;
            float _3089 = _3086 * _2795;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2957 < ((_2955 >> 12u) & 15u))
            {
                float _3062;
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3221 = _2940;
                float _3222 = _2942;
                float _3223 = _2944;
                float _3224 = _2946;
                float _3225 = _2948;
                float _3226 = _2950;
                uint _3227 = _2957;
                uint _3236;
                bool _3237;
                for (;;)
                {
                    _3236 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3227 << 2u)) >> 2u)).x;
                    _3237 = _3236 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3237)
                    {
                        frontier_phi_77_pred = _3226;
                        frontier_phi_77_pred_1 = _3225;
                        frontier_phi_77_pred_2 = _3224;
                        frontier_phi_77_pred_3 = _3223;
                        frontier_phi_77_pred_4 = _3222;
                        frontier_phi_77_pred_5 = _3221;
                    }
                    else
                    {
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3443 = _3221;
                        float _3444 = _3222;
                        float _3445 = _3223;
                        float _3446 = _3224;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        uint _3449 = _3236;
                        uint _3450;
                        vec4 _3475;
                        float _3476;
                        vec4 _3491;
                        vec3 _3503;
                        vec4 _3518;
                        vec4 _3533;
                        float _3579;
                        bool _3580;
                        for (;;)
                        {
                            uint _3460 = ((_3227 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3449));
                            _3450 = (_3449 + 4294967295u) & _3449;
                            uint _3462 = _3460 * 40u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3476 = _3475.w;
                            uint _3478 = (_3460 * 40u) + 4u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3493 = (_3460 * 40u) + 8u;
                            _3503 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x));
                            uint _3505 = (_3460 * 40u) + 16u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3460 * 40u) + 20u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3460 * 40u) + 24u;
                            vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3554 = (_3460 * 40u) + 28u;
                            vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            _3579 = fma(_2795, _3567.z, fma(_2794, _3567.y, _3567.x * _2793)) + _3567.w;
                            _3580 = !((fma(_2795, _3548.z, fma(_2794, _3548.y, _3548.x * _2793)) + _3548.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3580)
                            {
                                float _3607 = _3475.x - _2793;
                                float _3608 = _3475.y - _2794;
                                float _3609 = _3475.z - _2795;
                                float _3610 = dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609));
                                float _3613 = inversesqrt(_3610);
                                float _3614 = _3613 * _3607;
                                float _3615 = _3613 * _3608;
                                float _3616 = _3613 * _3609;
                                float _3620 = 1.0 - (_3610 / (_3476 * _3476));
                                float _4790 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3625 = sqrt(_3610) * _3491.w;
                                float _3627 = 1.39999997615814208984375 / (_3625 + 1.39999997615814208984375);
                                float _3628 = _3627 * _3627;
                                float _3631 = ((1.0 - _3628) * dot(vec3(_3614, _3615, _3616), vec3(_1070, _1073, _1076))) + _3628;
                                float _3634 = _3625 * _3625;
                                float _3638 = (fma(_2795, _3518.z, fma(_2794, _3518.y, _3518.x * _2793)) + _3518.w) / _3579;
                                float _3639 = (fma(_2795, _3533.z, fma(_2794, _3533.y, _3533.x * _2793)) + _3533.w) / _3579;
                                float _3643 = 1.0 - dot(vec2(_3638, _3639), vec2(_3638, _3639));
                                float _4806 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3645 = _3644 * (((isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0))) * _3621) / ((_3634 * 0.699999988079071044921875) + 1.0));
                                float _3657 = exp2(log2(1.0 / ((_3634 * 3.5) + 5.0)) * 0.25);
                                float _3658 = 1.0 - _1130;
                                float _3665 = sqrt(1.0 - ((1.0 - (_3658 * _3658)) * (1.0 - (_3657 * _3657))));
                                float _3666 = _3665 * _3665;
                                float _3667 = _3666 * _3666;
                                float _3668 = _3614 - _3087;
                                float _3669 = _3615 - _3088;
                                float _3670 = _3616 - _3089;
                                float _3674 = inversesqrt(dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670)));
                                float _3678 = dot(vec3(_1070, _1073, _1076), vec3((-0.0) - _3087, (-0.0) - _3088, (-0.0) - _3089));
                                float _4817 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3681 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3682 = dot(vec3(_1070, _1073, _1076), vec3(_3674 * _3668, _3674 * _3669, _3674 * _3670));
                                float _4828 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3685 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3689 = ((_3685 * _3685) * (_3667 + (-1.0))) + 1.0;
                                float _3690 = _3627 * _3666;
                                float _3691 = _3690 * _3690;
                                float _3697 = ((1.0 - _3691) * dot(vec3(_1070, _1073, _1076), vec3(_3614, _3615, _3616))) + _3691;
                                float _4839 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3698 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3699 = 1.0 - _3666;
                                float _3709 = (0.5 / (((_3698 * ((_3681 * _3699) + _3666)) + 9.9999999392252902907785028219223e-09) + (((_3698 * _3699) + _3666) * _3681))) * _3698;
                                float _4850 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3719 = (_3644 * _3621) * (((_3667 * 3.1415927410125732421875) * (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) / ((_3689 * _3689) * ((_3634 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3645 * _3491.y;
                                frontier_phi_83_pred_1 = _3645 * _3491.x;
                                frontier_phi_83_pred_2 = _3719 * _3503.z;
                                frontier_phi_83_pred_3 = _3719 * _3503.y;
                                frontier_phi_83_pred_4 = _3719 * _3503.x;
                                frontier_phi_83_pred_5 = _3645 * _3491.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3727 = frontier_phi_83_pred;
                            _3726 = frontier_phi_83_pred_1;
                            _3725 = frontier_phi_83_pred_2;
                            _3724 = frontier_phi_83_pred_3;
                            _3723 = frontier_phi_83_pred_4;
                            _3728 = frontier_phi_83_pred_5;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            if (_3450 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3450;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3435;
                        frontier_phi_77_pred_1 = _3434;
                        frontier_phi_77_pred_2 = _3433;
                        frontier_phi_77_pred_3 = _3432;
                        frontier_phi_77_pred_4 = _3431;
                        frontier_phi_77_pred_5 = _3430;
                    }
                    _3072 = frontier_phi_77_pred;
                    _3070 = frontier_phi_77_pred_1;
                    _3068 = frontier_phi_77_pred_2;
                    _3066 = frontier_phi_77_pred_3;
                    _3064 = frontier_phi_77_pred_4;
                    _3062 = frontier_phi_77_pred_5;
                    uint _3228 = _3227 + 1u;
                    if (_3228 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3221 = _3062;
                        _3222 = _3064;
                        _3223 = _3066;
                        _3224 = _3068;
                        _3225 = _3070;
                        _3226 = _3072;
                        _3227 = _3228;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3066;
                frontier_phi_58_59_ladder_1 = _3072;
                frontier_phi_58_59_ladder_2 = _3070;
                frontier_phi_58_59_ladder_3 = _3068;
                frontier_phi_58_59_ladder_4 = _3064;
                frontier_phi_58_59_ladder_5 = _3062;
            }
            else
            {
                frontier_phi_58_59_ladder = _2944;
                frontier_phi_58_59_ladder_1 = _2950;
                frontier_phi_58_59_ladder_2 = _2948;
                frontier_phi_58_59_ladder_3 = _2946;
                frontier_phi_58_59_ladder_4 = _2942;
                frontier_phi_58_59_ladder_5 = _2940;
            }
            _3061 = frontier_phi_58_59_ladder_5;
            _3063 = frontier_phi_58_59_ladder_4;
            _3065 = frontier_phi_58_59_ladder;
            _3067 = frontier_phi_58_59_ladder_3;
            _3069 = frontier_phi_58_59_ladder_2;
            _3071 = frontier_phi_58_59_ladder_1;
        }
        float _3076 = isnan(1.0) ? _1114 : (isnan(_1114) ? 1.0 : min(_1114, 1.0));
        _2852 = (_3076 * _3067) + _2307;
        _2854 = (_3076 * _3069) + _2309;
        _2856 = (_3076 * _3071) + _2311;
        _2858 = ((_3061 * 0.039999999105930328369140625) * _3076) + _2637;
        _2860 = ((_3063 * 0.039999999105930328369140625) * _3076) + _2639;
        _2862 = ((_3065 * 0.039999999105930328369140625) * _3076) + _2641;
    }
    else
    {
        _2852 = _2307;
        _2854 = _2309;
        _2856 = _2311;
        _2858 = _2637;
        _2860 = _2639;
        _2862 = _2641;
    }
    float _4866 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _4877 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _4888 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _2879 = ((isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2852 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1114))) + ((_2858 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1948)) * cbPerFrame._m0[3u].x);
    float _2880 = ((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2854 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1114))) + ((_2860 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1948)) * cbPerFrame._m0[3u].x);
    float _2881 = ((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2856 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1114))) + ((_2862 + ((isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))) * _1948)) * cbPerFrame._m0[3u].x);
    uint _2882 = _263 + 6u;
    float _2890 = _1051 / cbSceneParam._m0[86u].x;
    float _2891 = _1052 / cbSceneParam._m0[86u].y;
    vec4 _2905 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, (log2((isnan(cbSceneParam._m0[77u].w) ? _974 : (isnan(_974) ? cbSceneParam._m0[77u].w : min(_974, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2907 = _2905.x;
    float _2908 = _2905.y;
    float _2909 = _2905.z;
    float _2910 = _2905.w;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    if (_974 > cbSceneParam._m0[78u].w)
    {
        float _2965 = isnan(_974) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _974 : min(cbSceneParam._m0[80u].w, _974));
        float _2966 = _2965 / _974;
        float _2977 = _2966 * _1024;
        float _2978 = _1025 * _2966;
        float _2979 = (-0.0) - _2978;
        float _2981 = _2966 * _1026;
        float _2983 = (cbSceneParam._m0[77u].w * _2979) / _2965;
        float _2984 = _2983 + cbSceneParam._m0[79u].w;
        float _2985 = cbSceneParam._m0[79u].w - _2978;
        float _2991 = sqrt(((_2977 * _2977) + (_2978 * _2978)) + (_2981 * _2981));
        float _2994 = (1.0 - (cbSceneParam._m0[77u].w / _2965)) * _2991;
        float _2999 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3001 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3178;
        if (abs((_2979 - _2983) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3178 = ((((_2984 > 0.0) ? exp2(_2999 * _2984) : (2.0 - exp2(_3001 * _2984))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2994;
        }
        else
        {
            float _3122 = 1.0 / cbSceneParam._m0[80u].x;
            float _3123 = isnan(_2985) ? _2984 : (isnan(_2984) ? _2985 : max(_2984, _2985));
            float _3124 = isnan(_2985) ? _2984 : (isnan(_2984) ? _2985 : min(_2984, _2985));
            float _3133 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : min(_3123, 0.0));
            float _3134 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : min(_3124, 0.0));
            _3178 = ((abs(_2991 / _2979) * cbSceneParam._m0[80u].y) * ((((_3133 - _3134) * 2.0) - ((exp2(_2999 * (isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0)))) - exp2(_2999 * (isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))))) * _3122)) - ((exp2(_3001 * _3133) - exp2(_3001 * _3134)) * _3122))) + (_2994 * cbSceneParam._m0[80u].z);
        }
        vec4 _3180 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, 1.0), 0.0);
        float _3189 = exp2((_3178 * (-1.44269502162933349609375)) * (1.0 - _3180.w));
        float _3190 = log2(_3189);
        float _3206 = log2(_2910);
        _3003 = (exp2(_3206 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].x)) * _3180.x) / cbSceneParam._m0[78u].x)) + _2907;
        _3005 = (exp2(_3206 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].y)) * _3180.y) / cbSceneParam._m0[78u].y)) + _2908;
        _3007 = (exp2(_3206 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].z)) * _3180.z) / cbSceneParam._m0[78u].z)) + _2909;
        _3009 = _3189 * _2910;
    }
    else
    {
        _3003 = _2907;
        _3005 = _2908;
        _3007 = _2909;
        _3009 = _2910;
    }
    bool _3216;
    vec4 _3019;
    vec4 _3041;
    float _3043;
    float _3047;
    float _3048;
    float _3049;
    float _3050;
    bool _3060;
    for (;;)
    {
        _3019 = cbMatDynParam._m0[0u];
        float _3021 = roundEven(_3019.y);
        bool _3022 = _3021 == 3.0;
        float _3023 = log2(_3009);
        float _3030 = exp2(_3023 * cbSceneParam._m0[78u].x) * _2879;
        float _3031 = exp2(_3023 * cbSceneParam._m0[78u].y) * _2880;
        float _3032 = exp2(_3023 * cbSceneParam._m0[78u].z) * _2881;
        float _3039 = _1040 + (-0.5);
        _3041 = cbMtdParam._m0[1u];
        _3043 = _3041.y * _3039;
        float _3046 = (_3021 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3047 = _3046 * (_3022 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3003)));
        _3048 = _3046 * (_3022 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3005)));
        _3049 = _3046 * (_3022 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3007)));
        _3050 = _3039 * 0.999000012874603271484375;
        _3060 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3060)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3050) < 0.5)
            {
                _3216 = true;
                break;
            }
        }
        uint _3157 = _1089 + uint(_3019.w);
        if ((cbInstanceData._m0[_3157].w < 1.0) && ((cbInstanceData._m0[_3157].w + _3050) < 0.5))
        {
            _3216 = true;
            break;
        }
        if ((_3043 + 1.0) < _3041.x)
        {
            _3216 = true;
            break;
        }
        _3216 = false;
        break;
    }
    float _3421;
    if (_3216)
    {
        discard_state = true;
        _3421 = 0.0;
    }
    else
    {
        _3421 = cbInstanceData._m0[_2882].w;
    }
    SV_Target.x = _3047;
    SV_Target.y = _3048;
    SV_Target.z = _3049;
    SV_Target.w = _3421;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2882].w;
    discard_exit();
}


