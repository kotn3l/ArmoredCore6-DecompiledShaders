#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1462;
float _4101;
float _4102;
float _4103;
float _4104;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _406 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _369.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].z) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4113 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _445 = (_438 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _446 = (_438 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _447 = (_438 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _464 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _484 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _486 = _484.x;
    float _496 = dot(vec4(_486, _484.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _510 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _369.y) * 2.0) - ((((_486 - _496) * cbMtdParam._m0[24u].z) + _496) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4124 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _524 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_511 * ((_464.x * cbMtdParam._m0[13u].x) - _445)) + _445);
    float _527 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_511 * ((_464.y * cbMtdParam._m0[13u].y) - _446)) + _446);
    float _530 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_511 * ((_464.z * cbMtdParam._m0[13u].z) - _447)) + _447);
    vec4 _549 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _588 = _586.x;
    float _589 = _586.y;
    float _590 = _586.z;
    float _597 = ((_569.x - _588) * _438) + _588;
    float _598 = ((_569.y - _589) * _438) + _589;
    float _599 = ((_569.z - _590) * _438) + _590;
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _624 = ((_611.z - _599) * _511) + _599;
    float _627 = ((((_611.x - _597) * _511) + _597) * 2.0) + (-1.0);
    float _629 = ((((_611.y - _598) * _511) + _598) * 2.0) + (-1.0);
    float _630 = dot(vec2(_627, _629), vec2(_627, _629));
    float _4135 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _635 = sqrt(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _661 = (((_649.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _627;
    float _662 = (((_649.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _629;
    float _665 = fma(_635, _249, fma(_662, _256, _661 * _242));
    float _668 = fma(_635, _250, fma(_662, _257, _661 * _243));
    float _671 = fma(_635, _251, fma(_662, _258, _661 * _244));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _704 = _702.x;
    float _705 = 1.0 - _704;
    float _711 = (cbMtdParam._m0[19u].x + dot(vec4(_675 * _665, _675 * _668, _675 * _671, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_704 - _705) * cbMtdParam._m0[24u].w) + _705) * cbMtdParam._m0[21u].z);
    float _4146 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _712 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _714 = (-0.0) - cbMtdParam._m0[24u].x;
    float _716 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _716 : (isnan(_716) ? 1.0 : min(_716, 1.0));
    float _724 = _712 - ((_712 * TEXCOORD_8.x) * _717);
    float _725 = _712 - ((_712 * TEXCOORD_8.y) * _717);
    float _726 = _712 - ((_712 * TEXCOORD_8.z) * _717);
    float _733 = (_724 * ((_549.x * cbMtdParam._m0[18u].x) - _524)) + _524;
    float _734 = (_725 * ((_549.y * cbMtdParam._m0[18u].y) - _527)) + _527;
    float _735 = (_726 * ((_549.z * cbMtdParam._m0[18u].z) - _530)) + _530;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _749 = _747.x;
    float _750 = 1.0 - _749;
    float _778 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_749 - _750) * cbMtdParam._m0[24u].y) + _750) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4167 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _779 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _787 = ((((cbMtdParam._m0[10u].x - _733) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _779) + _733;
    float _788 = ((((cbMtdParam._m0[10u].y - _734) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _779) + _734;
    float _789 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _735)) * _779) + _735;
    float _793 = (cbMtdParam._m0[19u].w * (_649.z - _624)) + _624;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _814 = (_807.x * 2.0) + (-1.0);
    float _815 = (_807.y * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _4178 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _824 = ((_807.z - _793) * _724) + _793;
    float _827 = ((cbMtdParam._m0[23u].y - _824) * _779) + _824;
    vec4 _846 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _852 = (_846.x * 2.0) + (-1.0);
    float _853 = (_846.y * 2.0) + (-1.0);
    float _854 = dot(vec2(_852, _853), vec2(_852, _853));
    float _4189 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _869 = ((sqrt(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) - _635) * _726) + _635;
    float _872 = (((_814 - _661) * _724) + _661) + (cbMtdParam._m0[21u].x * _661);
    float _873 = (((_815 - _662) * _725) + _662) + (cbMtdParam._m0[21u].x * _662);
    float _884 = (((_852 - _872) + (_872 * cbMtdParam._m0[22u].z)) * _779) + _872;
    float _885 = (((_853 - _873) + (_873 * cbMtdParam._m0[22u].z)) * _779) + _873;
    float _886 = (_779 * (sqrt(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) - _869)) + _869;
    float _888 = cbMtdParam._m0[22u].x + _649.w;
    float _891 = fma(_886, _249, fma(_885, _256, _884 * _242));
    float _894 = fma(_886, _250, fma(_885, _257, _884 * _243));
    float _897 = fma(_886, _251, fma(_885, _258, _884 * _244));
    float _901 = inversesqrt(dot(vec3(_891, _894, _897), vec3(_891, _894, _897)));
    float _902 = _901 * _891;
    float _903 = _901 * _894;
    float _904 = _901 * _897;
    float _4200 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _905 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4222 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4233 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4244 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _923 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _973 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _963);
    float _974 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _963);
    float _975 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _963);
    float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
    float _980 = _973 * _979;
    float _981 = _974 * _979;
    float _982 = _975 * _979;
    vec4 _987 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _989 = _987.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1143 = sqrt(((_973 * _973) + (_974 * _974)) + (_975 * _975));
        float _1149 = (cbMatDynParam._m0[5u].x * _1143) + cbMatDynParam._m0[5u].y;
        float _4255 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1154 = (cbMatDynParam._m0[5u].z * _1143) + cbMatDynParam._m0[5u].w;
        float _4266 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) - _1150)) + _1150) < ((_989 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1000 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1001 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1019 = fma(_904, cbSceneParam._m0[5u].z, fma(_903, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _902));
    float _1022 = fma(_904, cbSceneParam._m0[6u].z, fma(_903, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _902));
    float _1025 = fma(_904, cbSceneParam._m0[7u].z, fma(_903, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _902));
    uint _1038 = _261 + 9u;
    uint _1039 = _1038 + uint(cbMatDynParam._m0[0u].w);
    float _1045 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * cbInstanceData._m0[_1039].x;
    float _1046 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * cbInstanceData._m0[_1039].y;
    float _1047 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * cbInstanceData._m0[_1039].z;
    float _4277 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _4288 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    vec4 _1059 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1000, cbSceneParam._m0[86u].y * _1001));
    float _1063 = ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * TEXCOORD_5.w) * _1059.x;
    float _1064 = dot(vec3(_902, _903, _904), vec3(_980, _981, _982));
    float _1067 = _1064 * 2.0;
    float _1071 = (_1067 * _902) - _980;
    float _1072 = (_1067 * _903) - _981;
    float _1073 = (_1067 * _904) - _982;
    float _1077 = abs(dot(vec3(_980, _981, _982), vec3(_902, _903, _904)));
    float _4310 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1079 = sqrt(_905);
    float _1092 = exp2((_1079 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1079 * 3.0));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1461;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1186 = fma(_1132, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124));
        float _1190 = fma(_1132, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124));
        float _1194 = fma(_1132, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124));
        float _1219 = _1124 + _902;
        float _1220 = _1128 + _903;
        float _1221 = _1132 + _904;
        float _1231 = fma(_1221, cbModelParam._m0[26u].z, fma(_1220, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219)) - _1186;
        float _1232 = fma(_1221, cbModelParam._m0[27u].z, fma(_1220, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219)) - _1190;
        float _1233 = fma(_1221, cbModelParam._m0[28u].z, fma(_1220, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219)) - _1194;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1186 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1190 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[34u].z) + ((((((_1194 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1289 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1255.x + (-0.5));
        float _1291 = _1289 * (_1255.y + (-0.5));
        float _1292 = _1289 * (_1255.z + (-0.5));
        float _1299 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1262.x + (-0.5));
        float _1301 = _1299 * (_1262.y + (-0.5));
        float _1302 = _1299 * (_1262.z + (-0.5));
        float _1309 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1269.x + (-0.5));
        float _1311 = _1309 * (_1269.y + (-0.5));
        float _1312 = _1309 * (_1269.z + (-0.5));
        float _1319 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1276.x + (-0.5));
        float _1321 = _1319 * (_1276.y + (-0.5));
        float _1322 = _1319 * (_1276.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1343 = (dot(vec3(_902, _903, _904), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1353 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4358 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1355 + 1.0))) + _1360) * _1323;
        float _1370 = _1291 * 0.5;
        float _1371 = _1301 * 0.5;
        float _1372 = _1311 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_902, _903, _904), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4391 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1397 + 1.0))) + _1402) * _1324;
        float _1412 = _1292 * 0.5;
        float _1413 = _1302 * 0.5;
        float _1414 = _1312 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_902, _903, _904), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4402 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4413 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4424 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_1439 + 1.0))) + _1444) * _1325;
        _1461 = _1292;
        _1463 = _1291;
        _1464 = _1290;
        _1465 = _1302;
        _1466 = _1301;
        _1467 = _1300;
        _1468 = _1312;
        _1469 = _1311;
        _1470 = _1310;
        _1471 = _1325;
        _1472 = _1324;
        _1473 = _1323;
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1462;
        _1463 = _1462;
        _1464 = _1462;
        _1465 = _1462;
        _1466 = _1462;
        _1467 = _1462;
        _1468 = _1462;
        _1469 = _1462;
        _1470 = _1462;
        _1471 = _1462;
        _1472 = _1462;
        _1473 = _1462;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1503 = fma(_1132, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124));
        float _1507 = fma(_1132, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124));
        float _1511 = fma(_1132, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124));
        float _1534 = _1124 + _902;
        float _1535 = _1128 + _903;
        float _1536 = _1132 + _904;
        float _1546 = fma(_1536, cbModelParam._m0[30u].z, fma(_1535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1534)) - _1503;
        float _1547 = fma(_1536, cbModelParam._m0[31u].z, fma(_1535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1534)) - _1507;
        float _1548 = fma(_1536, cbModelParam._m0[32u].z, fma(_1535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1534)) - _1511;
        float _1552 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
        float _1565 = ((_1552 * _1546) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1503 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1552 * _1547) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1507 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1567 = ((_1552 * _1548) / cbModelParam._m0[35u].z) + ((((((_1511 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        float _1602 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1569.x + (-0.5));
        float _1604 = _1602 * (_1569.y + (-0.5));
        float _1605 = _1602 * (_1569.z + (-0.5));
        float _1612 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1576.x + (-0.5));
        float _1614 = _1612 * (_1576.y + (-0.5));
        float _1615 = _1612 * (_1576.z + (-0.5));
        float _1622 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1583.x + (-0.5));
        float _1624 = _1622 * (_1583.y + (-0.5));
        float _1625 = _1622 * (_1583.z + (-0.5));
        float _1632 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1590.x + (-0.5));
        float _1634 = _1632 * (_1590.y + (-0.5));
        float _1635 = _1632 * (_1590.z + (-0.5));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = _1603 * 0.5;
        float _1640 = _1613 * 0.5;
        float _1641 = _1623 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_902, _903, _904), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4487 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1666 + 1.0))) + _1671) * _1636;
        float _1681 = _1604 * 0.5;
        float _1682 = _1614 * 0.5;
        float _1683 = _1624 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_902, _903, _904), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4498 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4509 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4520 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_1708 + 1.0))) + _1713) * _1637;
        float _1723 = _1605 * 0.5;
        float _1724 = _1615 * 0.5;
        float _1725 = _1625 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_902, _903, _904), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4531 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4542 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4553 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_1750 + 1.0))) + _1755) * _1638;
        _1772 = _1605;
        _1773 = _1604;
        _1774 = _1603;
        _1775 = _1615;
        _1776 = _1614;
        _1777 = _1613;
        _1778 = _1625;
        _1779 = _1624;
        _1780 = _1623;
        _1781 = _1638;
        _1782 = _1637;
        _1783 = _1636;
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
    }
    else
    {
        _1772 = _1462;
        _1773 = _1462;
        _1774 = _1462;
        _1775 = _1462;
        _1776 = _1462;
        _1777 = _1462;
        _1778 = _1462;
        _1779 = _1462;
        _1780 = _1462;
        _1781 = _1462;
        _1782 = _1462;
        _1783 = _1462;
        _1784 = 0.0;
        _1785 = 0.0;
        _1786 = 0.0;
    }
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1474)) + _1474;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1475)) + _1475;
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1476)) + _1476;
    float _1819 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1797, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1797, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1797, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1796));
    float _1840 = _1071 * 0.5;
    float _1841 = _1072 * 0.5;
    float _1842 = _1073 * 0.5;
    float _1843 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1846 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1849 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1883;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1856 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1461, _1465, _1468, _1471));
        float _1860 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1864 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1871 = dot(vec4(cbModelParam._m0[39u]), vec4(_1840, _1841, _1842, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1894;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1885 = dot(vec4(cbModelParam._m0[40u]), vec4(_1840, _1841, _1842, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1898 = (_1894 * cbModelParam._m0[1u].x) + (_1883 * (1.0 - cbModelParam._m0[1u].x));
    float _1908 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _905);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1908 : min(cbModelParam._m0[25u].z, _1908));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1956 = fma(_1132, cbModelParam._m0[13u].z, fma(_1128, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124)) + cbModelParam._m0[13u].w;
        float _1960 = fma(_1132, cbModelParam._m0[14u].z, fma(_1128, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124)) + cbModelParam._m0[14u].w;
        float _1964 = fma(_1132, cbModelParam._m0[15u].z, fma(_1128, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124)) + cbModelParam._m0[15u].w;
        float _1967 = fma(_1073, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071));
        float _1970 = fma(_1073, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071));
        float _1973 = fma(_1073, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071));
        float _2001;
        if (_1967 > 0.0)
        {
            _2001 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2001 = frontier_phi_17_15_ladder;
        }
        float _2170;
        if (_1970 > 0.0)
        {
            _2170 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2170 = frontier_phi_26_22_ladder;
        }
        float _2465;
        if (_1973 > 0.0)
        {
            _2465 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2465 = frontier_phi_38_33_ladder;
        }
        float _2467 = isnan(_2170) ? _2001 : (isnan(_2001) ? _2170 : min(_2001, _2170));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1967) + _1956;
        float _2473 = (_2468 * _1970) + _1960;
        float _2474 = (_2468 * _1973) + _1964;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2475;
        float _2479 = _2475 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 > _2479) || ((_2473 < _2477) || ((_2472 < _2477) || (_2472 > _2479))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2619 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2474, cbModelParam._m0[9u].z, fma(_2473, cbModelParam._m0[9u].y, _2472 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2474, cbModelParam._m0[10u].z, fma(_2473, cbModelParam._m0[10u].y, _2472 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2474, cbModelParam._m0[11u].z, fma(_2473, cbModelParam._m0[11u].y, _2472 * cbModelParam._m0[11u].x))), _1909);
            frontier_phi_16_38_ladder = _2619.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2619.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2619.x * cbModelParam._m0[1u].y;
        }
        _1989 = frontier_phi_16_38_ladder_2;
        _1991 = frontier_phi_16_38_ladder_1;
        _1993 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1977 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1071, _1072, _1073), _1909);
        _1989 = _1977.x * cbModelParam._m0[1u].y;
        _1991 = _1977.y * cbModelParam._m0[1u].y;
        _1993 = _1977.z * cbModelParam._m0[1u].y;
    }
    float _1997 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _905);
    float _1998 = isnan(_1997) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1997 : min(cbModelParam._m0[25u].w, _1997));
    float _2087;
    float _2089;
    float _2091;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2051 = fma(_1132, cbModelParam._m0[21u].z, fma(_1128, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124)) + cbModelParam._m0[21u].w;
        float _2055 = fma(_1132, cbModelParam._m0[22u].z, fma(_1128, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124)) + cbModelParam._m0[22u].w;
        float _2059 = fma(_1132, cbModelParam._m0[23u].z, fma(_1128, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124)) + cbModelParam._m0[23u].w;
        float _2062 = fma(_1073, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071));
        float _2065 = fma(_1073, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071));
        float _2068 = fma(_1073, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071));
        float _2175;
        if (_2062 > 0.0)
        {
            _2175 = abs((1.0 - _2051) / _2062);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2051 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2175 = frontier_phi_28_24_ladder;
        }
        float _2492;
        if (_2065 > 0.0)
        {
            _2492 = abs((1.0 - _2055) / _2065);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2055 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2492 = frontier_phi_40_35_ladder;
        }
        float _2819;
        if (_2068 > 0.0)
        {
            _2819 = abs((1.0 - _2059) / _2068);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2059 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2819 = frontier_phi_50_47_ladder;
        }
        float _2821 = isnan(_2492) ? _2175 : (isnan(_2175) ? _2492 : min(_2175, _2492));
        float _2822 = isnan(_2819) ? _2821 : (isnan(_2821) ? _2819 : min(_2821, _2819));
        float _2826 = (_2822 * _2062) + _2051;
        float _2827 = (_2822 * _2065) + _2055;
        float _2828 = (_2822 * _2068) + _2059;
        float _2829 = _2822 * 9.9999997473787516355514526367188e-05;
        float _2830 = (-1.0) - _2829;
        float _2832 = _2829 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2828 > _2832) || ((_2828 < _2830) || ((_2827 > _2832) || ((_2827 < _2830) || ((_2826 < _2830) || (_2826 > _2832))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2828, cbModelParam._m0[17u].z, fma(_2827, cbModelParam._m0[17u].y, _2826 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2828, cbModelParam._m0[18u].z, fma(_2827, cbModelParam._m0[18u].y, _2826 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2828, cbModelParam._m0[19u].z, fma(_2827, cbModelParam._m0[19u].y, _2826 * cbModelParam._m0[19u].x))), _1998);
            frontier_phi_25_50_ladder = _2946.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2946.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2946.x * cbModelParam._m0[1u].z;
        }
        _2087 = frontier_phi_25_50_ladder_2;
        _2089 = frontier_phi_25_50_ladder_1;
        _2091 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1071, _1072, _1073), _1998);
        _2087 = _2071.x * cbModelParam._m0[1u].z;
        _2089 = _2071.y * cbModelParam._m0[1u].z;
        _2091 = _2071.z * cbModelParam._m0[1u].z;
    }
    float _2103 = ((((1.0 - _1092) * ((_1079 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1092 * _1079)) * _1063;
    float _2104 = _2103 * ((cbModelParam._m0[1u].w * (_2087 - _1989)) + _1989);
    float _2105 = _2103 * ((cbModelParam._m0[1u].w * (_2089 - _1991)) + _1991);
    float _2106 = _2103 * ((cbModelParam._m0[1u].w * (_2091 - _1993)) + _1993);
    float _2109 = fma(_2106, cbSceneParam._m0[89u].z, fma(_2105, cbSceneParam._m0[89u].y, _2104 * cbSceneParam._m0[89u].x));
    float _2112 = fma(_2106, cbSceneParam._m0[90u].z, fma(_2105, cbSceneParam._m0[90u].y, _2104 * cbSceneParam._m0[90u].x));
    float _2115 = fma(_2106, cbSceneParam._m0[91u].z, fma(_2105, cbSceneParam._m0[91u].y, _2104 * cbSceneParam._m0[91u].x));
    float _2149 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2153 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2157 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2161 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2162 = _2149 / _2161;
    float _2163 = _2153 / _2161;
    float _2164 = _2157 / _2161;
    float _2311;
    float _2312;
    float _2313;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2191 = ((uint(_2164 > cbSceneParam._m0[59u].y) + uint(_2164 > cbSceneParam._m0[59u].x)) + uint(_2164 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2192 = _2191 + 43u;
        uint _2200 = _2191 + 44u;
        uint _2208 = _2191 + 45u;
        uint _2216 = _2191 + 46u;
        float _2227 = fma(_2161, cbSceneParam._m0[_2192].w, fma(_2157, cbSceneParam._m0[_2192].z, fma(_2153, cbSceneParam._m0[_2192].y, _2149 * cbSceneParam._m0[_2192].x)));
        float _2231 = fma(_2161, cbSceneParam._m0[_2200].w, fma(_2157, cbSceneParam._m0[_2200].z, fma(_2153, cbSceneParam._m0[_2200].y, _2149 * cbSceneParam._m0[_2200].x)));
        float _2239 = fma(_2161, cbSceneParam._m0[_2216].w, fma(_2157, cbSceneParam._m0[_2216].z, fma(_2153, cbSceneParam._m0[_2216].y, _2149 * cbSceneParam._m0[_2216].x)));
        float _2244 = cbSceneParam._m0[33u].z * _2239;
        float _2246 = cbSceneParam._m0[33u].w * _2239;
        float _2249 = fma(_2161, cbSceneParam._m0[_2208].w, fma(_2157, cbSceneParam._m0[_2208].z, fma(_2153, cbSceneParam._m0[_2208].y, _2149 * cbSceneParam._m0[_2208].x))) / _2239;
        float _2297 = (cbSceneParam._m0[33u].x - sqrt(((_2163 * _2163) + (_2162 * _2162)) + (_2164 * _2164))) * cbSceneParam._m0[33u].y;
        float _4679 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2304 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2244 + _2227) / _2239, (_2246 + _2231) / _2239), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2246 + _2227) / _2239, (_2231 - _2244) / _2239), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2227 - _2244) / _2239, (_2231 - _2246) / _2239), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2227 - _2246) / _2239, (_2244 + _2231) / _2239), _2249), 0.0)).x), vec4(0.25)));
        _2311 = 1.0 - (_2304 * cbSceneParam._m0[34u].x);
        _2312 = 1.0 - (_2304 * cbSceneParam._m0[34u].y);
        _2313 = 1.0 - (_2304 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2311 = 1.0;
        _2312 = 1.0;
        _2313 = 1.0;
    }
    float _2377;
    float _2379;
    float _2381;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2365 = fma(_2161, cbSceneParam._m0[63u].w, fma(_2157, cbSceneParam._m0[63u].z, fma(_2153, cbSceneParam._m0[63u].y, _2149 * cbSceneParam._m0[63u].x)));
        float _2366 = fma(_2161, cbSceneParam._m0[60u].w, fma(_2157, cbSceneParam._m0[60u].z, fma(_2153, cbSceneParam._m0[60u].y, _2149 * cbSceneParam._m0[60u].x))) / _2365;
        float _2367 = fma(_2161, cbSceneParam._m0[61u].w, fma(_2157, cbSceneParam._m0[61u].z, fma(_2153, cbSceneParam._m0[61u].y, _2149 * cbSceneParam._m0[61u].x))) / _2365;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2366 >= cbSceneParam._m0[64u].x) && (_2367 >= cbSceneParam._m0[64u].y)) && (_2366 <= cbSceneParam._m0[64u].z)) && (_2367 <= cbSceneParam._m0[64u].w))
        {
            float _2505 = fma(_2161, cbSceneParam._m0[62u].w, fma(_2157, cbSceneParam._m0[62u].z, fma(_2153, cbSceneParam._m0[62u].y, _2149 * cbSceneParam._m0[62u].x))) / _2365;
            float _2509 = isnan(cbSceneParam._m0[41u].w) ? _2505 : (isnan(_2505) ? cbSceneParam._m0[41u].w : max(_2505, cbSceneParam._m0[41u].w));
            float _2552 = (cbSceneParam._m0[33u].x - sqrt(((_2163 * _2163) + (_2162 * _2162)) + (_2164 * _2164))) * cbSceneParam._m0[33u].y;
            float _4695 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
            float _2559 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2366, cbSceneParam._m0[33u].w + _2367), _2509), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2366, _2367 - cbSceneParam._m0[33u].z), _2509), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2366 - cbSceneParam._m0[33u].z, _2367 - cbSceneParam._m0[33u].w), _2509), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2366 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2367), _2509), 0.0)).x), vec4(0.25)));
            float _2563 = 1.0 - (_2559 * cbSceneParam._m0[34u].x);
            float _2564 = 1.0 - (_2559 * cbSceneParam._m0[34u].y);
            float _2565 = 1.0 - (_2559 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2565) ? _2313 : (isnan(_2313) ? _2565 : min(_2313, _2565));
            frontier_phi_37_36_ladder_1 = isnan(_2564) ? _2312 : (isnan(_2312) ? _2564 : min(_2312, _2564));
            frontier_phi_37_36_ladder_2 = isnan(_2563) ? _2311 : (isnan(_2311) ? _2563 : min(_2311, _2563));
        }
        else
        {
            frontier_phi_37_36_ladder = _2313;
            frontier_phi_37_36_ladder_1 = _2312;
            frontier_phi_37_36_ladder_2 = _2311;
        }
        _2377 = frontier_phi_37_36_ladder_2;
        _2379 = frontier_phi_37_36_ladder_1;
        _2381 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2377 = _2311;
        _2379 = _2312;
        _2381 = _2313;
    }
    uvec4 _2386 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2388 = _2386.x * 14u;
    uint _2389 = _2388 + 13u;
    float _2396 = _1063 + (-1.0);
    float _2401 = (cbLight._m0[_2389].x * _2396) + 1.0;
    float _2402 = (cbLight._m0[_2389].y * _2396) + 1.0;
    float _2403 = (cbLight._m0[_2389].z * _2396) + 1.0;
    float _2404 = (cbLight._m0[_2389].w * _2396) + 1.0;
    uint _2405 = _2388 + 5u;
    float _2411 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
    uint _2415 = _2388 + 4u;
    float _2424 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
    uint _2428 = _2388 | 1u;
    float _2439 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_902, _903, _904));
    float _2442 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_902, _903, _904));
    float _4731 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _4742 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2447 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * 0.3183098733425140380859375;
    float _2449 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * 0.3183098733425140380859375;
    float _2456 = ((cbLight._m0[_2405].x * _2411) * _2449) + (((cbLight._m0[_2415].x * _2377) * _2424) * _2447);
    float _2457 = ((_2411 * cbLight._m0[_2405].y) * _2449) + (((cbLight._m0[_2415].y * _2379) * _2424) * _2447);
    float _2458 = ((_2411 * cbLight._m0[_2405].z) * _2449) + (((cbLight._m0[_2415].z * _2381) * _2424) * _2447);
    uvec4 _2462 = floatBitsToUint(cbLight._m0[_2388 + 12u]);
    bool _2464 = _2462.x == 0u;
    float _2566;
    float _2568;
    float _2570;
    if (_2464)
    {
        _2566 = _2456;
        _2568 = _2457;
        _2570 = _2458;
    }
    else
    {
        uint _2574 = _2388 + 6u;
        float _2590 = (dot(vec3(cbLight._m0[_2388 + 2u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2591 = _2590 * _2590;
        float _4753 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2592 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2593 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        _2566 = (((cbLight._m0[_2574].x * 0.3183098733425140380859375) * _2592) * _2593) + _2456;
        _2568 = (((cbLight._m0[_2574].y * 0.3183098733425140380859375) * _2592) * _2593) + _2457;
        _2570 = (((cbLight._m0[_2574].z * 0.3183098733425140380859375) * _2592) * _2593) + _2458;
    }
    bool _2573 = _2462.y == 0u;
    float _2628;
    float _2630;
    float _2632;
    if (_2573)
    {
        _2628 = _2566;
        _2630 = _2568;
        _2632 = _2570;
    }
    else
    {
        uint _2790 = _2388 + 7u;
        float _2806 = (dot(vec3(cbLight._m0[_2388 + 3u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2807 = _2806 * _2806;
        float _4769 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2808 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2809 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        _2628 = (((cbLight._m0[_2790].x * 0.3183098733425140380859375) * _2808) * _2809) + _2566;
        _2630 = (((cbLight._m0[_2790].y * 0.3183098733425140380859375) * _2808) * _2809) + _2568;
        _2632 = (((cbLight._m0[_2790].z * 0.3183098733425140380859375) * _2808) * _2809) + _2570;
    }
    uint _2635 = _2388 + 8u;
    float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _905) * 0.949999988079071044921875);
    float _2649 = _2648 * _2648;
    float _2650 = cbLight._m0[_2388].x + _980;
    float _2651 = cbLight._m0[_2388].y + _981;
    float _2652 = cbLight._m0[_2388].z + _982;
    float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
    float _2657 = _2656 * _2650;
    float _2658 = _2656 * _2651;
    float _2659 = _2656 * _2652;
    float _2660 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2388].xyz));
    float _4785 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    float _4796 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2664 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
    float _2665 = dot(vec3(_902, _903, _904), vec3(_2657, _2658, _2659));
    float _4807 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
    float _2669 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2657, _2658, _2659));
    float _4818 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2673 = _2649 * _2649;
    float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
    float _2688 = (exp2(log2(1.0 - (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2689 = 1.0 - _2649;
    float _2700 = (0.5 / (((_2664 * ((_2663 * _2689) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2664 * _2689) + _2649) * _2663))) * _2663;
    float _4829 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2702 = (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
    uint _2716 = _2388 + 9u;
    float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2428].w)) * _905) * 0.949999988079071044921875);
    float _2728 = _2727 * _2727;
    float _2729 = cbLight._m0[_2428].x + _980;
    float _2730 = cbLight._m0[_2428].y + _981;
    float _2731 = cbLight._m0[_2428].z + _982;
    float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
    float _2736 = _2735 * _2729;
    float _2737 = _2735 * _2730;
    float _2738 = _2735 * _2731;
    float _2739 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2428].xyz));
    float _4840 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2742 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
    float _2743 = dot(vec3(_902, _903, _904), vec3(_2736, _2737, _2738));
    float _4851 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2746 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
    float _2747 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_2736, _2737, _2738));
    float _4862 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2751 = _2728 * _2728;
    float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
    float _2764 = (exp2(log2(1.0 - (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2765 = 1.0 - _2728;
    float _2775 = (0.5 / (((_2664 * ((_2742 * _2765) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2664 * _2765) + _2728) * _2742))) * _2742;
    float _4873 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2777 = (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
    float _2787 = (((_2764 * cbLight._m0[_2716].x) * _2777) * _2411) + ((((cbLight._m0[_2635].x * _2377) * _2688) * _2702) * _2424);
    float _2788 = (((_2764 * cbLight._m0[_2716].y) * _2777) * _2411) + ((((cbLight._m0[_2635].y * _2379) * _2688) * _2702) * _2424);
    float _2789 = (((_2764 * cbLight._m0[_2716].z) * _2777) * _2411) + ((((cbLight._m0[_2635].z * _2381) * _2688) * _2702) * _2424);
    float _2845;
    float _2847;
    float _2849;
    if (_2464)
    {
        _2845 = _2787;
        _2847 = _2788;
        _2849 = _2789;
    }
    else
    {
        uint _2851 = _2388 + 2u;
        uint _2855 = _2388 + 10u;
        float _2869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2851].w)) * _905) * 0.949999988079071044921875);
        float _2870 = _2869 * _2869;
        float _2871 = cbLight._m0[_2851].x + _980;
        float _2872 = cbLight._m0[_2851].y + _981;
        float _2873 = cbLight._m0[_2851].z + _982;
        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
        float _2878 = _2877 * _2871;
        float _2879 = _2877 * _2872;
        float _2880 = _2877 * _2873;
        float _2881 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2851].xyz));
        float _4884 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2885 = dot(vec3(_902, _903, _904), vec3(_2878, _2879, _2880));
        float _4895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2888 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2889 = dot(vec3(cbLight._m0[_2851].xyz), vec3(_2878, _2879, _2880));
        float _4906 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2893 = _2870 * _2870;
        float _2897 = ((_2888 * _2888) * (_2893 + (-1.0))) + 1.0;
        float _2906 = (exp2(log2(1.0 - (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2907 = 1.0 - _2870;
        float _2917 = (0.5 / (((_2664 * ((_2884 * _2907) + _2870)) + 9.9999999392252902907785028219223e-09) + (((_2664 * _2907) + _2870) * _2884))) * _2884;
        float _4917 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2919 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2893 / ((_2897 * _2897) * 3.141590118408203125));
        float _2920 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        _2845 = (((_2906 * cbLight._m0[_2855].x) * _2919) * _2920) + _2787;
        _2847 = (((_2906 * cbLight._m0[_2855].y) * _2919) * _2920) + _2788;
        _2849 = (((_2906 * cbLight._m0[_2855].z) * _2919) * _2920) + _2789;
    }
    float _2951;
    float _2953;
    float _2955;
    if (_2573)
    {
        _2951 = _2845;
        _2953 = _2847;
        _2955 = _2849;
    }
    else
    {
        uint _2962 = _2388 + 3u;
        uint _2966 = _2388 + 11u;
        float _2980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2962].w)) * _905) * 0.949999988079071044921875);
        float _2981 = _2980 * _2980;
        float _2982 = cbLight._m0[_2962].x + _980;
        float _2983 = cbLight._m0[_2962].y + _981;
        float _2984 = cbLight._m0[_2962].z + _982;
        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
        float _2989 = _2988 * _2982;
        float _2990 = _2988 * _2983;
        float _2991 = _2988 * _2984;
        float _2992 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2962].xyz));
        float _4933 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2995 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
        float _2996 = dot(vec3(_902, _903, _904), vec3(_2989, _2990, _2991));
        float _4944 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2999 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _3000 = dot(vec3(cbLight._m0[_2962].xyz), vec3(_2989, _2990, _2991));
        float _4955 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3004 = _2981 * _2981;
        float _3008 = ((_2999 * _2999) * (_3004 + (-1.0))) + 1.0;
        float _3017 = (exp2(log2(1.0 - (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3018 = 1.0 - _2981;
        float _3028 = (0.5 / (((_2664 * ((_2995 * _3018) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_2664 * _3018) + _2981) * _2995))) * _2995;
        float _4966 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3030 = (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_3004 / ((_3008 * _3008) * 3.141590118408203125));
        float _3031 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        _2951 = (((_3017 * cbLight._m0[_2966].x) * _3030) * _3031) + _2845;
        _2953 = (((_3017 * cbLight._m0[_2966].y) * _3030) * _3031) + _2847;
        _2955 = (((_3017 * cbLight._m0[_2966].z) * _3030) * _3031) + _2849;
    }
    float _3097;
    float _3099;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    if (_2386.y == 0u)
    {
        uvec4 _3052 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3053 = _3052.x;
        uint _3064 = uint((float(_3052.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1001) / _3053))) + floor(float(uint(cbSceneParam._m0[85u].x * _1000) / _3053)));
        float _3074 = (log2(_2164 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3075 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
        uint _3078 = uint(isnan(14.0) ? _3075 : (isnan(_3075) ? 14.0 : min(_3075, 14.0)));
        uvec4 _3083 = texelFetch(g_lightClusterGridBuffer, int(((_3078 << 2u) + (_3064 << 6u)) >> 2u));
        uint _3084 = _3083.x;
        uint _3085 = _3052.z;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        if (((((1u << ((_3085 >> 4u) & 15u)) + 4294967295u) & _3084) == 0u) || ((_3085 & 240u) == 0u))
        {
            _3164 = 0.0;
            _3166 = 0.0;
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
        }
        else
        {
            float _3165;
            float _3167;
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3316 = 0.0;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            uint _3322 = 0u;
            uint _3331;
            bool _3332;
            for (;;)
            {
                _3331 = texelFetch(g_lightClassification, int((((_3078 << 5u) + (_3064 << 9u)) + (_3322 << 2u)) >> 2u)).x;
                _3332 = _3331 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3332)
                {
                    frontier_phi_71_pred = _3321;
                    frontier_phi_71_pred_1 = _3320;
                    frontier_phi_71_pred_2 = _3319;
                    frontier_phi_71_pred_3 = _3318;
                    frontier_phi_71_pred_4 = _3317;
                    frontier_phi_71_pred_5 = _3316;
                }
                else
                {
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    uint _3467;
                    _3461 = _3316;
                    _3462 = _3317;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3320;
                    _3466 = _3321;
                    _3467 = _3331;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    for (;;)
                    {
                        uint _3471 = uint(findLSB(_3467)) + (_3322 << 5u);
                        uint _3468 = (_3467 + 4294967295u) & _3467;
                        uint _3473 = _3471 * 48u;
                        vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3473)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 3u)).x));
                        uint _3493 = (_3471 * 48u) + 4u;
                        vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 3u)).x));
                        uint _3512 = (_3471 * 48u) + 8u;
                        vec3 _3523 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3512)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 2u)).x));
                        float _3527 = _3487.x - _2162;
                        float _3528 = _3487.y - _2163;
                        float _3529 = _3487.z - _2164;
                        float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                        float _3533 = inversesqrt(_3530);
                        float _3534 = _3533 * _3527;
                        float _3535 = _3533 * _3528;
                        float _3536 = _3533 * _3529;
                        float _3537 = dot(vec3(_1019, _1022, _1025), vec3(_3534, _3535, _3536));
                        float _3542 = 1.0 - (_3530 * _3487.w);
                        float _4992 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3543 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                        float _3544 = sqrt(_3530) * _3506.w;
                        float _3547 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                        float _3548 = _3547 * _3547;
                        float _3551 = ((1.0 - _3548) * _3537) + _3548;
                        float _3554 = _3544 * _3544;
                        float _3558 = ((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3543) / ((_3554 * 0.699999988079071044921875) + 1.0);
                        float _3562 = (-0.0) - _2162;
                        float _3563 = (-0.0) - _2163;
                        float _3564 = (-0.0) - _2164;
                        float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                        float _3569 = _3568 * _3562;
                        float _3570 = _3568 * _3563;
                        float _3571 = _3568 * _3564;
                        float _3578 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                        float _3579 = 1.0 - _1079;
                        float _3586 = sqrt(1.0 - ((1.0 - (_3579 * _3579)) * (1.0 - (_3578 * _3578))));
                        float _3587 = _3586 * _3586;
                        float _3588 = _3587 * _3587;
                        float _3589 = _3569 + _3534;
                        float _3590 = _3570 + _3535;
                        float _3591 = _3571 + _3536;
                        float _3595 = inversesqrt(dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591)));
                        float _3599 = dot(vec3(_1019, _1022, _1025), vec3(_3569, _3570, _3571));
                        float _5008 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3602 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                        float _3603 = dot(vec3(_1019, _1022, _1025), vec3(_3595 * _3589, _3595 * _3590, _3595 * _3591));
                        float _5019 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3606 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                        float _3610 = ((_3606 * _3606) * (_3588 + (-1.0))) + 1.0;
                        float _3611 = _3547 * _3587;
                        float _3612 = _3611 * _3611;
                        float _3615 = ((1.0 - _3612) * _3537) + _3612;
                        float _5030 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3616 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                        float _3617 = 1.0 - _3587;
                        float _3627 = (0.5 / (((_3616 * ((_3602 * _3617) + _3587)) + 9.9999999392252902907785028219223e-09) + (((_3616 * _3617) + _3587) * _3602))) * _3616;
                        float _5041 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3638 = (((_3588 * 3.1415927410125732421875) * (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0)))) / ((_3610 * _3610) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125))) * _3543;
                        _3391 = (_3558 * _3506.x) + _3464;
                        _3392 = (_3558 * _3506.y) + _3465;
                        _3393 = (_3558 * _3506.z) + _3466;
                        _3388 = (_3638 * _3523.x) + _3461;
                        _3389 = (_3638 * _3523.y) + _3462;
                        _3390 = (_3638 * _3523.z) + _3463;
                        if (_3468 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3461 = _3388;
                            _3462 = _3389;
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3392;
                            _3466 = _3393;
                            _3467 = _3468;
                        }
                    }
                    frontier_phi_71_pred = _3393;
                    frontier_phi_71_pred_1 = _3392;
                    frontier_phi_71_pred_2 = _3391;
                    frontier_phi_71_pred_3 = _3390;
                    frontier_phi_71_pred_4 = _3389;
                    frontier_phi_71_pred_5 = _3388;
                }
                _3175 = frontier_phi_71_pred;
                _3173 = frontier_phi_71_pred_1;
                _3171 = frontier_phi_71_pred_2;
                _3169 = frontier_phi_71_pred_3;
                _3167 = frontier_phi_71_pred_4;
                _3165 = frontier_phi_71_pred_5;
                uint _3323 = _3322 + 1u;
                if (_3323 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3316 = _3165;
                    _3317 = _3167;
                    _3318 = _3169;
                    _3319 = _3171;
                    _3320 = _3173;
                    _3321 = _3175;
                    _3322 = _3323;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3164 = _3165;
            _3166 = _3167;
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
        }
        uvec4 _3178 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3179 = _3178.z;
        uint _3181 = (_3179 >> 8u) & 15u;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        if (((4294967295u << _3181) & _3084) == 0u)
        {
            _3284 = _3164;
            _3286 = _3166;
            _3288 = _3168;
            _3290 = _3170;
            _3292 = _3172;
            _3294 = _3174;
        }
        else
        {
            float _3309 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
            float _3310 = _3309 * _2162;
            float _3311 = _3309 * _2163;
            float _3312 = _3309 * _2164;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3181 < ((_3179 >> 12u) & 15u))
            {
                float _3285;
                float _3287;
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3444 = _3164;
                float _3445 = _3166;
                float _3446 = _3168;
                float _3447 = _3170;
                float _3448 = _3172;
                float _3449 = _3174;
                uint _3450 = _3181;
                uint _3459;
                bool _3460;
                for (;;)
                {
                    _3459 = texelFetch(g_lightClassification, int((((_3078 << 5u) + (_3064 << 9u)) + (_3450 << 2u)) >> 2u)).x;
                    _3460 = _3459 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3460)
                    {
                        frontier_phi_82_pred = _3449;
                        frontier_phi_82_pred_1 = _3448;
                        frontier_phi_82_pred_2 = _3447;
                        frontier_phi_82_pred_3 = _3446;
                        frontier_phi_82_pred_4 = _3445;
                        frontier_phi_82_pred_5 = _3444;
                    }
                    else
                    {
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3945;
                        float _3946;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3950;
                        float _3665 = _3444;
                        float _3666 = _3445;
                        float _3667 = _3446;
                        float _3668 = _3447;
                        float _3669 = _3448;
                        float _3670 = _3449;
                        uint _3671 = _3459;
                        uint _3672;
                        vec4 _3697;
                        float _3698;
                        vec4 _3713;
                        vec3 _3725;
                        vec4 _3740;
                        vec4 _3755;
                        float _3801;
                        bool _3802;
                        for (;;)
                        {
                            uint _3682 = ((_3450 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3671));
                            _3672 = (_3671 + 4294967295u) & _3671;
                            uint _3684 = _3682 * 40u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            _3698 = _3697.w;
                            uint _3700 = (_3682 * 40u) + 4u;
                            _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3715 = (_3682 * 40u) + 8u;
                            _3725 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x));
                            uint _3727 = (_3682 * 40u) + 16u;
                            _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            uint _3742 = (_3682 * 40u) + 20u;
                            _3755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 3u)).x));
                            uint _3757 = (_3682 * 40u) + 24u;
                            vec4 _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            uint _3776 = (_3682 * 40u) + 28u;
                            vec4 _3789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 3u)).x));
                            _3801 = fma(_2164, _3789.z, fma(_2163, _3789.y, _3789.x * _2162)) + _3789.w;
                            _3802 = !((fma(_2164, _3770.z, fma(_2163, _3770.y, _3770.x * _2162)) + _3770.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3802)
                            {
                                float _3829 = _3697.x - _2162;
                                float _3830 = _3697.y - _2163;
                                float _3831 = _3697.z - _2164;
                                float _3832 = dot(vec3(_3829, _3830, _3831), vec3(_3829, _3830, _3831));
                                float _3835 = inversesqrt(_3832);
                                float _3836 = _3835 * _3829;
                                float _3837 = _3835 * _3830;
                                float _3838 = _3835 * _3831;
                                float _3842 = 1.0 - (_3832 / (_3698 * _3698));
                                float _5052 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3843 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3847 = sqrt(_3832) * _3713.w;
                                float _3849 = 1.39999997615814208984375 / (_3847 + 1.39999997615814208984375);
                                float _3850 = _3849 * _3849;
                                float _3853 = ((1.0 - _3850) * dot(vec3(_3836, _3837, _3838), vec3(_1019, _1022, _1025))) + _3850;
                                float _3856 = _3847 * _3847;
                                float _3860 = (fma(_2164, _3740.z, fma(_2163, _3740.y, _3740.x * _2162)) + _3740.w) / _3801;
                                float _3861 = (fma(_2164, _3755.z, fma(_2163, _3755.y, _3755.x * _2162)) + _3755.w) / _3801;
                                float _3865 = 1.0 - dot(vec2(_3860, _3861), vec2(_3860, _3861));
                                float _5068 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3866 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                                float _3867 = _3866 * (((isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0))) * _3843) / ((_3856 * 0.699999988079071044921875) + 1.0));
                                float _3879 = exp2(log2(1.0 / ((_3856 * 3.5) + 5.0)) * 0.25);
                                float _3880 = 1.0 - _1079;
                                float _3887 = sqrt(1.0 - ((1.0 - (_3880 * _3880)) * (1.0 - (_3879 * _3879))));
                                float _3888 = _3887 * _3887;
                                float _3889 = _3888 * _3888;
                                float _3890 = _3836 - _3310;
                                float _3891 = _3837 - _3311;
                                float _3892 = _3838 - _3312;
                                float _3896 = inversesqrt(dot(vec3(_3890, _3891, _3892), vec3(_3890, _3891, _3892)));
                                float _3900 = dot(vec3(_1019, _1022, _1025), vec3((-0.0) - _3310, (-0.0) - _3311, (-0.0) - _3312));
                                float _5079 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3903 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                                float _3904 = dot(vec3(_1019, _1022, _1025), vec3(_3896 * _3890, _3896 * _3891, _3896 * _3892));
                                float _5090 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3907 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                                float _3911 = ((_3907 * _3907) * (_3889 + (-1.0))) + 1.0;
                                float _3912 = _3849 * _3888;
                                float _3913 = _3912 * _3912;
                                float _3919 = ((1.0 - _3913) * dot(vec3(_1019, _1022, _1025), vec3(_3836, _3837, _3838))) + _3913;
                                float _5101 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3920 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                                float _3921 = 1.0 - _3888;
                                float _3931 = (0.5 / (((_3920 * ((_3903 * _3921) + _3888)) + 9.9999999392252902907785028219223e-09) + (((_3920 * _3921) + _3888) * _3903))) * _3920;
                                float _5112 = isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0));
                                float _3941 = (_3866 * _3843) * (((_3889 * 3.1415927410125732421875) * (isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0)))) / ((_3911 * _3911) * ((_3856 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3867 * _3713.z;
                                frontier_phi_88_pred_1 = _3867 * _3713.y;
                                frontier_phi_88_pred_2 = _3867 * _3713.x;
                                frontier_phi_88_pred_3 = _3941 * _3725.z;
                                frontier_phi_88_pred_4 = _3941 * _3725.y;
                                frontier_phi_88_pred_5 = _3941 * _3725.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3950 = frontier_phi_88_pred;
                            _3949 = frontier_phi_88_pred_1;
                            _3948 = frontier_phi_88_pred_2;
                            _3947 = frontier_phi_88_pred_3;
                            _3946 = frontier_phi_88_pred_4;
                            _3945 = frontier_phi_88_pred_5;
                            _3655 = _3948 + _3668;
                            _3656 = _3949 + _3669;
                            _3657 = _3950 + _3670;
                            _3652 = _3945 + _3665;
                            _3653 = _3946 + _3666;
                            _3654 = _3947 + _3667;
                            if (_3672 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3665 = _3652;
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3672;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3657;
                        frontier_phi_82_pred_1 = _3656;
                        frontier_phi_82_pred_2 = _3655;
                        frontier_phi_82_pred_3 = _3654;
                        frontier_phi_82_pred_4 = _3653;
                        frontier_phi_82_pred_5 = _3652;
                    }
                    _3295 = frontier_phi_82_pred;
                    _3293 = frontier_phi_82_pred_1;
                    _3291 = frontier_phi_82_pred_2;
                    _3289 = frontier_phi_82_pred_3;
                    _3287 = frontier_phi_82_pred_4;
                    _3285 = frontier_phi_82_pred_5;
                    uint _3451 = _3450 + 1u;
                    if (_3451 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3444 = _3285;
                        _3445 = _3287;
                        _3446 = _3289;
                        _3447 = _3291;
                        _3448 = _3293;
                        _3449 = _3295;
                        _3450 = _3451;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3291;
                frontier_phi_63_64_ladder_1 = _3295;
                frontier_phi_63_64_ladder_2 = _3293;
                frontier_phi_63_64_ladder_3 = _3289;
                frontier_phi_63_64_ladder_4 = _3287;
                frontier_phi_63_64_ladder_5 = _3285;
            }
            else
            {
                frontier_phi_63_64_ladder = _3170;
                frontier_phi_63_64_ladder_1 = _3174;
                frontier_phi_63_64_ladder_2 = _3172;
                frontier_phi_63_64_ladder_3 = _3168;
                frontier_phi_63_64_ladder_4 = _3166;
                frontier_phi_63_64_ladder_5 = _3164;
            }
            _3284 = frontier_phi_63_64_ladder_5;
            _3286 = frontier_phi_63_64_ladder_4;
            _3288 = frontier_phi_63_64_ladder_3;
            _3290 = frontier_phi_63_64_ladder;
            _3292 = frontier_phi_63_64_ladder_2;
            _3294 = frontier_phi_63_64_ladder_1;
        }
        float _3299 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
        _3097 = (_3299 * _3290) + _2628;
        _3099 = (_3299 * _3292) + _2630;
        _3101 = (_3299 * _3294) + _2632;
        _3103 = ((_3284 * 0.039999999105930328369140625) * _3299) + _2951;
        _3105 = ((_3286 * 0.039999999105930328369140625) * _3299) + _2953;
        _3107 = ((_3288 * 0.039999999105930328369140625) * _3299) + _2955;
    }
    else
    {
        _3097 = _2628;
        _3099 = _2630;
        _3101 = _2632;
        _3103 = _2951;
        _3105 = _2953;
        _3107 = _2955;
    }
    float _5128 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _5139 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _5150 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _3124 = ((isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0))) * (_3097 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1063))) + ((_3103 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1898)) * cbPerFrame._m0[3u].x);
    float _3125 = ((isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0))) * (_3099 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1063))) + ((_3105 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1898)) * cbPerFrame._m0[3u].x);
    float _3126 = ((isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0))) * (_3101 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1063))) + ((_3107 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1898)) * cbPerFrame._m0[3u].x);
    uint _3127 = _261 + 6u;
    float _3135 = _1000 / cbSceneParam._m0[86u].x;
    float _3136 = _1001 / cbSceneParam._m0[86u].y;
    vec4 _3150 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3135, _3136, (log2((isnan(cbSceneParam._m0[77u].w) ? _923 : (isnan(_923) ? cbSceneParam._m0[77u].w : min(_923, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3152 = _3150.x;
    float _3153 = _3150.y;
    float _3154 = _3150.z;
    float _3155 = _3150.w;
    float _3226;
    float _3228;
    float _3230;
    float _3232;
    if (_923 > cbSceneParam._m0[78u].w)
    {
        float _3189 = isnan(_923) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _923 : min(cbSceneParam._m0[80u].w, _923));
        float _3190 = _3189 / _923;
        float _3201 = _3190 * _973;
        float _3202 = _974 * _3190;
        float _3203 = (-0.0) - _3202;
        float _3204 = _3190 * _975;
        float _3206 = (cbSceneParam._m0[77u].w * _3203) / _3189;
        float _3207 = _3206 + cbSceneParam._m0[79u].w;
        float _3208 = cbSceneParam._m0[79u].w - _3202;
        float _3214 = sqrt(((_3201 * _3201) + (_3202 * _3202)) + (_3204 * _3204));
        float _3217 = (1.0 - (cbSceneParam._m0[77u].w / _3189)) * _3214;
        float _3222 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3224 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3401;
        if (abs((_3203 - _3206) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3401 = ((((_3207 > 0.0) ? exp2(_3222 * _3207) : (2.0 - exp2(_3224 * _3207))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3217;
        }
        else
        {
            float _3345 = 1.0 / cbSceneParam._m0[80u].x;
            float _3346 = isnan(_3208) ? _3207 : (isnan(_3207) ? _3208 : max(_3207, _3208));
            float _3347 = isnan(_3208) ? _3207 : (isnan(_3207) ? _3208 : min(_3207, _3208));
            float _3356 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : min(_3346, 0.0));
            float _3357 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : min(_3347, 0.0));
            _3401 = ((abs(_3214 / _3203) * cbSceneParam._m0[80u].y) * ((((_3356 - _3357) * 2.0) - ((exp2(_3222 * (isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0)))) - exp2(_3222 * (isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))))) * _3345)) - ((exp2(_3224 * _3356) - exp2(_3224 * _3357)) * _3345))) + (_3217 * cbSceneParam._m0[80u].z);
        }
        vec4 _3403 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3135, _3136, 1.0), 0.0);
        float _3412 = exp2((_3401 * (-1.44269502162933349609375)) * (1.0 - _3403.w));
        float _3413 = log2(_3412);
        float _3429 = log2(_3155);
        _3226 = (exp2(_3429 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].x)) * _3403.x) / cbSceneParam._m0[78u].x)) + _3152;
        _3228 = (exp2(_3429 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].y)) * _3403.y) / cbSceneParam._m0[78u].y)) + _3153;
        _3230 = (exp2(_3429 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].z)) * _3403.z) / cbSceneParam._m0[78u].z)) + _3154;
        _3232 = _3412 * _3155;
    }
    else
    {
        _3226 = _3152;
        _3228 = _3153;
        _3230 = _3154;
        _3232 = _3155;
    }
    bool _3439;
    vec4 _3242;
    vec4 _3264;
    float _3266;
    float _3270;
    float _3271;
    float _3272;
    float _3273;
    bool _3283;
    for (;;)
    {
        _3242 = cbMatDynParam._m0[0u];
        float _3244 = roundEven(_3242.y);
        bool _3245 = _3244 == 3.0;
        float _3246 = log2(_3232);
        float _3253 = exp2(_3246 * cbSceneParam._m0[78u].x) * _3124;
        float _3254 = exp2(_3246 * cbSceneParam._m0[78u].y) * _3125;
        float _3255 = exp2(_3246 * cbSceneParam._m0[78u].z) * _3126;
        float _3262 = _989 + (-0.5);
        _3264 = cbMtdParam._m0[1u];
        _3266 = _3264.y * _3262;
        float _3269 = (_3244 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3270 = _3269 * (_3245 ? _3253 : (_3253 + (cbSceneParam._m0[72u].w * _3226)));
        _3271 = _3269 * (_3245 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3228)));
        _3272 = _3269 * (_3245 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3230)));
        _3273 = _3262 * 0.999000012874603271484375;
        _3283 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3283)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3273) < 0.5)
            {
                _3439 = true;
                break;
            }
        }
        uint _3380 = _1038 + uint(_3242.w);
        if ((cbInstanceData._m0[_3380].w < 1.0) && ((cbInstanceData._m0[_3380].w + _3273) < 0.5))
        {
            _3439 = true;
            break;
        }
        if ((_3266 + 1.0) < _3264.x)
        {
            _3439 = true;
            break;
        }
        _3439 = false;
        break;
    }
    float _3643;
    if (_3439)
    {
        discard_state = true;
        _3643 = 0.0;
    }
    else
    {
        _3643 = cbInstanceData._m0[_3127].w;
    }
    SV_Target.x = _3270;
    SV_Target.y = _3271;
    SV_Target.z = _3272;
    SV_Target.w = _3643;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3127].w;
    discard_exit();
}


