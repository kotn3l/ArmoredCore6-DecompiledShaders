#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1198;
float _3840;
float _3841;
float _3842;
float _3843;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].z) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3852 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _399 = (_392 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _400 = (_392 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _401 = (_392 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _457 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _461 = _457.z;
    float _470 = ((_440.z - _461) * _392) + _461;
    float _473 = ((((_440.x - _459) * _392) + _459) * 2.0) + (-1.0);
    float _475 = ((((_440.y - _460) * _392) + _460) * 2.0) + (-1.0);
    float _476 = dot(vec2(_473, _475), vec2(_473, _475));
    float _3863 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _481 = sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))));
    vec4 _497 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _509 = (((_497.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _473;
    float _510 = (((_497.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _475;
    float _513 = fma(_481, _226, fma(_510, _233, _509 * _219));
    float _516 = fma(_481, _227, fma(_510, _234, _509 * _220));
    float _519 = fma(_481, _228, fma(_510, _235, _509 * _221));
    float _523 = inversesqrt(dot(vec3(_513, _516, _519), vec3(_513, _516, _519)));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _552 = _550.x;
    float _553 = 1.0 - _552;
    float _559 = (cbMtdParam._m0[19u].x + dot(vec4(_523 * _513, _523 * _516, _523 * _519, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_552 - _553) * cbMtdParam._m0[24u].w) + _553) * cbMtdParam._m0[21u].z);
    float _3874 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _567 = (_560 * ((_420.x * cbMtdParam._m0[18u].x) - _399)) + _399;
    float _568 = (_560 * ((_420.y * cbMtdParam._m0[18u].y) - _400)) + _400;
    float _569 = (_560 * ((_420.z * cbMtdParam._m0[18u].z) - _401)) + _401;
    float _573 = (cbMtdParam._m0[19u].w * (_497.z - _470)) + _470;
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _593 = (_586.x * 2.0) + (-1.0);
    float _594 = (_586.y * 2.0) + (-1.0);
    float _595 = dot(vec2(_593, _594), vec2(_593, _594));
    float _3885 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _603 = ((_586.z - _573) * _560) + _573;
    float _613 = ((sqrt(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) - _481) * _560) + _481;
    float _616 = (((_593 - _509) * _560) + _509) + (cbMtdParam._m0[21u].x * _509);
    float _617 = (((_594 - _510) * _560) + _510) + (cbMtdParam._m0[21u].x * _510);
    float _621 = cbMtdParam._m0[22u].x + _497.w;
    float _624 = fma(_613, _226, fma(_617, _233, _616 * _219));
    float _627 = fma(_613, _227, fma(_617, _234, _616 * _220));
    float _630 = fma(_613, _228, fma(_617, _235, _616 * _221));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    float _635 = _634 * _624;
    float _636 = _634 * _627;
    float _637 = _634 * _630;
    float _3896 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _638 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3918 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3929 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3940 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _656 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _708 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _698);
    float _709 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _698);
    float _710 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _698);
    float _714 = inversesqrt(dot(vec3(_708, _709, _710), vec3(_708, _709, _710)));
    float _715 = _708 * _714;
    float _716 = _709 * _714;
    float _717 = _710 * _714;
    vec4 _722 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _724 = _722.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _878 = sqrt(((_708 * _708) + (_709 * _709)) + (_710 * _710));
        float _884 = (cbMatDynParam._m0[5u].x * _878) + cbMatDynParam._m0[5u].y;
        float _3951 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _889 = (cbMatDynParam._m0[5u].z * _878) + cbMatDynParam._m0[5u].w;
        float _3962 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) - _885)) + _885) < ((_724 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _735 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _736 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _754 = fma(_637, cbSceneParam._m0[5u].z, fma(_636, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _635));
    float _757 = fma(_637, cbSceneParam._m0[6u].z, fma(_636, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _635));
    float _760 = fma(_637, cbSceneParam._m0[7u].z, fma(_636, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _635));
    uint _773 = _238 + 9u;
    uint _774 = _773 + uint(cbMatDynParam._m0[0u].w);
    float _780 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_774].x;
    float _781 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_774].y;
    float _782 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * cbInstanceData._m0[_774].z;
    float _3973 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _735, cbSceneParam._m0[86u].y * _736));
    float _798 = ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * TEXCOORD_5.w) * _794.x;
    float _799 = dot(vec3(_635, _636, _637), vec3(_715, _716, _717));
    float _802 = _799 * 2.0;
    float _806 = (_802 * _635) - _715;
    float _807 = (_802 * _636) - _716;
    float _808 = (_802 * _637) - _717;
    float _812 = abs(dot(vec3(_715, _716, _717), vec3(_635, _636, _637)));
    float _4006 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _814 = sqrt(_638);
    float _827 = exp2((_814 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_814 * 3.0));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1197;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _922 = fma(_867, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859));
        float _926 = fma(_867, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859));
        float _930 = fma(_867, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859));
        float _955 = _859 + _635;
        float _956 = _863 + _636;
        float _957 = _867 + _637;
        float _967 = fma(_957, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955)) - _922;
        float _968 = fma(_957, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955)) - _926;
        float _969 = fma(_957, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955)) - _930;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_922 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_926 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[34u].z) + ((((((_930 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1025 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_991.x + (-0.5));
        float _1027 = _1025 * (_991.y + (-0.5));
        float _1028 = _1025 * (_991.z + (-0.5));
        float _1035 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_998.x + (-0.5));
        float _1037 = _1035 * (_998.y + (-0.5));
        float _1038 = _1035 * (_998.z + (-0.5));
        float _1045 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1005.x + (-0.5));
        float _1047 = _1045 * (_1005.y + (-0.5));
        float _1048 = _1045 * (_1005.z + (-0.5));
        float _1055 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1012.x + (-0.5));
        float _1057 = _1055 * (_1012.y + (-0.5));
        float _1058 = _1055 * (_1012.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1079 = (dot(vec3(_635, _636, _637), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1089 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _4054 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1091 + 1.0))) + _1096) * _1059;
        float _1106 = _1027 * 0.5;
        float _1107 = _1037 * 0.5;
        float _1108 = _1047 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_635, _636, _637), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4087 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1133 + 1.0))) + _1138) * _1060;
        float _1148 = _1028 * 0.5;
        float _1149 = _1038 * 0.5;
        float _1150 = _1048 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_635, _636, _637), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4120 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1175 + 1.0))) + _1180) * _1061;
        _1197 = _1028;
        _1199 = _1027;
        _1200 = _1026;
        _1201 = _1038;
        _1202 = _1037;
        _1203 = _1036;
        _1204 = _1048;
        _1205 = _1047;
        _1206 = _1046;
        _1207 = _1061;
        _1208 = _1060;
        _1209 = _1059;
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _1198;
        _1199 = _1198;
        _1200 = _1198;
        _1201 = _1198;
        _1202 = _1198;
        _1203 = _1198;
        _1204 = _1198;
        _1205 = _1198;
        _1206 = _1198;
        _1207 = _1198;
        _1208 = _1198;
        _1209 = _1198;
        _1210 = 0.0;
        _1211 = 0.0;
        _1212 = 0.0;
    }
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1240 = fma(_867, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859));
        float _1244 = fma(_867, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859));
        float _1248 = fma(_867, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859));
        float _1271 = _859 + _635;
        float _1272 = _863 + _636;
        float _1273 = _867 + _637;
        float _1283 = fma(_1273, cbModelParam._m0[30u].z, fma(_1272, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271)) - _1240;
        float _1284 = fma(_1273, cbModelParam._m0[31u].z, fma(_1272, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271)) - _1244;
        float _1285 = fma(_1273, cbModelParam._m0[32u].z, fma(_1272, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271)) - _1248;
        float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
        float _1302 = ((_1289 * _1283) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1240 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1289 * _1284) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1244 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1289 * _1285) / cbModelParam._m0[35u].z) + ((((((_1248 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        float _1339 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1306.x + (-0.5));
        float _1341 = _1339 * (_1306.y + (-0.5));
        float _1342 = _1339 * (_1306.z + (-0.5));
        float _1349 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1313.x + (-0.5));
        float _1351 = _1349 * (_1313.y + (-0.5));
        float _1352 = _1349 * (_1313.z + (-0.5));
        float _1359 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1320.x + (-0.5));
        float _1361 = _1359 * (_1320.y + (-0.5));
        float _1362 = _1359 * (_1320.z + (-0.5));
        float _1369 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1327.x + (-0.5));
        float _1371 = _1369 * (_1327.y + (-0.5));
        float _1372 = _1369 * (_1327.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_635, _636, _637), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4183 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1403 + 1.0))) + _1408) * _1373;
        float _1418 = _1341 * 0.5;
        float _1419 = _1351 * 0.5;
        float _1420 = _1361 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_635, _636, _637), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4216 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1445 + 1.0))) + _1450) * _1374;
        float _1460 = _1342 * 0.5;
        float _1461 = _1352 * 0.5;
        float _1462 = _1362 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_635, _636, _637), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4249 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1487 + 1.0))) + _1492) * _1375;
        _1509 = _1342;
        _1510 = _1341;
        _1511 = _1340;
        _1512 = _1352;
        _1513 = _1351;
        _1514 = _1350;
        _1515 = _1362;
        _1516 = _1361;
        _1517 = _1360;
        _1518 = _1375;
        _1519 = _1374;
        _1520 = _1373;
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1198;
        _1510 = _1198;
        _1511 = _1198;
        _1512 = _1198;
        _1513 = _1198;
        _1514 = _1198;
        _1515 = _1198;
        _1516 = _1198;
        _1517 = _1198;
        _1518 = _1198;
        _1519 = _1198;
        _1520 = _1198;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1210)) + _1210;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1211)) + _1211;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1212)) + _1212;
    float _1556 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1533));
    float _1577 = _806 * 0.5;
    float _1578 = _807 * 0.5;
    float _1579 = _808 * 0.5;
    float _1580 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1583 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1586 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1620;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1593 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1197, _1201, _1204, _1207));
        float _1597 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1601 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1608 = dot(vec4(cbModelParam._m0[39u]), vec4(_1577, _1578, _1579, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1631;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1622 = dot(vec4(cbModelParam._m0[40u]), vec4(_1577, _1578, _1579, 1.0));
        _1631 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1631 = 1.0;
    }
    float _1635 = (_1631 * cbModelParam._m0[1u].x) + (_1620 * (1.0 - cbModelParam._m0[1u].x));
    float _1645 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _638);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1645 : min(cbModelParam._m0[25u].z, _1645));
    float _1726;
    float _1728;
    float _1730;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1693 = fma(_867, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859)) + cbModelParam._m0[13u].w;
        float _1697 = fma(_867, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859)) + cbModelParam._m0[14u].w;
        float _1701 = fma(_867, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859)) + cbModelParam._m0[15u].w;
        float _1704 = fma(_808, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _806));
        float _1707 = fma(_808, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _806));
        float _1710 = fma(_808, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _806));
        float _1738;
        if (_1704 > 0.0)
        {
            _1738 = abs((1.0 - _1693) / _1704);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1693 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1738 = frontier_phi_17_15_ladder;
        }
        float _1907;
        if (_1707 > 0.0)
        {
            _1907 = abs((1.0 - _1697) / _1707);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1697 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1907 = frontier_phi_26_22_ladder;
        }
        float _2202;
        if (_1710 > 0.0)
        {
            _2202 = abs((1.0 - _1701) / _1710);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1701 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2202 = frontier_phi_38_33_ladder;
        }
        float _2204 = isnan(_1907) ? _1738 : (isnan(_1738) ? _1907 : min(_1738, _1907));
        float _2205 = isnan(_2202) ? _2204 : (isnan(_2204) ? _2202 : min(_2204, _2202));
        float _2209 = (_2205 * _1704) + _1693;
        float _2210 = (_2205 * _1707) + _1697;
        float _2211 = (_2205 * _1710) + _1701;
        float _2212 = _2205 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2212;
        float _2216 = _2212 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 > _2216) || ((_2210 < _2214) || ((_2209 < _2214) || (_2209 > _2216))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2211, cbModelParam._m0[9u].z, fma(_2210, cbModelParam._m0[9u].y, _2209 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2211, cbModelParam._m0[10u].z, fma(_2210, cbModelParam._m0[10u].y, _2209 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2211, cbModelParam._m0[11u].z, fma(_2210, cbModelParam._m0[11u].y, _2209 * cbModelParam._m0[11u].x))), _1646);
            frontier_phi_16_38_ladder = _2356.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2356.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2356.x * cbModelParam._m0[1u].y;
        }
        _1726 = frontier_phi_16_38_ladder_2;
        _1728 = frontier_phi_16_38_ladder_1;
        _1730 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1714 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_806, _807, _808), _1646);
        _1726 = _1714.x * cbModelParam._m0[1u].y;
        _1728 = _1714.y * cbModelParam._m0[1u].y;
        _1730 = _1714.z * cbModelParam._m0[1u].y;
    }
    float _1734 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _638);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1734 : min(cbModelParam._m0[25u].w, _1734));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1788 = fma(_867, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859)) + cbModelParam._m0[21u].w;
        float _1792 = fma(_867, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859)) + cbModelParam._m0[22u].w;
        float _1796 = fma(_867, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859)) + cbModelParam._m0[23u].w;
        float _1799 = fma(_808, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _806));
        float _1802 = fma(_808, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _806));
        float _1805 = fma(_808, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _806));
        float _1912;
        if (_1799 > 0.0)
        {
            _1912 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1912 = frontier_phi_28_24_ladder;
        }
        float _2229;
        if (_1802 > 0.0)
        {
            _2229 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2229 = frontier_phi_40_35_ladder;
        }
        float _2556;
        if (_1805 > 0.0)
        {
            _2556 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2556 = frontier_phi_50_47_ladder;
        }
        float _2558 = isnan(_2229) ? _1912 : (isnan(_1912) ? _2229 : min(_1912, _2229));
        float _2559 = isnan(_2556) ? _2558 : (isnan(_2558) ? _2556 : min(_2558, _2556));
        float _2563 = (_2559 * _1799) + _1788;
        float _2564 = (_2559 * _1802) + _1792;
        float _2565 = (_2559 * _1805) + _1796;
        float _2566 = _2559 * 9.9999997473787516355514526367188e-05;
        float _2567 = (-1.0) - _2566;
        float _2569 = _2566 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2565 > _2569) || ((_2565 < _2567) || ((_2564 > _2569) || ((_2564 < _2567) || ((_2563 < _2567) || (_2563 > _2569))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2565, cbModelParam._m0[17u].z, fma(_2564, cbModelParam._m0[17u].y, _2563 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2565, cbModelParam._m0[18u].z, fma(_2564, cbModelParam._m0[18u].y, _2563 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2565, cbModelParam._m0[19u].z, fma(_2564, cbModelParam._m0[19u].y, _2563 * cbModelParam._m0[19u].x))), _1735);
            frontier_phi_25_50_ladder = _2683.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2683.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2683.x * cbModelParam._m0[1u].z;
        }
        _1824 = frontier_phi_25_50_ladder_2;
        _1826 = frontier_phi_25_50_ladder_1;
        _1828 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_806, _807, _808), _1735);
        _1824 = _1808.x * cbModelParam._m0[1u].z;
        _1826 = _1808.y * cbModelParam._m0[1u].z;
        _1828 = _1808.z * cbModelParam._m0[1u].z;
    }
    float _1840 = ((((1.0 - _827) * ((_814 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_827 * _814)) * _798;
    float _1841 = _1840 * ((cbModelParam._m0[1u].w * (_1824 - _1726)) + _1726);
    float _1842 = _1840 * ((cbModelParam._m0[1u].w * (_1826 - _1728)) + _1728);
    float _1843 = _1840 * ((cbModelParam._m0[1u].w * (_1828 - _1730)) + _1730);
    float _1846 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, _1841 * cbSceneParam._m0[91u].x));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1894 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1898 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1899 = _1886 / _1898;
    float _1900 = _1890 / _1898;
    float _1901 = _1894 / _1898;
    float _2048;
    float _2049;
    float _2050;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1928 = ((uint(_1901 > cbSceneParam._m0[59u].y) + uint(_1901 > cbSceneParam._m0[59u].x)) + uint(_1901 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1929 = _1928 + 43u;
        uint _1937 = _1928 + 44u;
        uint _1945 = _1928 + 45u;
        uint _1953 = _1928 + 46u;
        float _1964 = fma(_1898, cbSceneParam._m0[_1929].w, fma(_1894, cbSceneParam._m0[_1929].z, fma(_1890, cbSceneParam._m0[_1929].y, _1886 * cbSceneParam._m0[_1929].x)));
        float _1968 = fma(_1898, cbSceneParam._m0[_1937].w, fma(_1894, cbSceneParam._m0[_1937].z, fma(_1890, cbSceneParam._m0[_1937].y, _1886 * cbSceneParam._m0[_1937].x)));
        float _1976 = fma(_1898, cbSceneParam._m0[_1953].w, fma(_1894, cbSceneParam._m0[_1953].z, fma(_1890, cbSceneParam._m0[_1953].y, _1886 * cbSceneParam._m0[_1953].x)));
        float _1981 = cbSceneParam._m0[33u].z * _1976;
        float _1983 = cbSceneParam._m0[33u].w * _1976;
        float _1986 = fma(_1898, cbSceneParam._m0[_1945].w, fma(_1894, cbSceneParam._m0[_1945].z, fma(_1890, cbSceneParam._m0[_1945].y, _1886 * cbSceneParam._m0[_1945].x))) / _1976;
        float _2034 = (cbSceneParam._m0[33u].x - sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901))) * cbSceneParam._m0[33u].y;
        float _4375 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2041 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1981 + _1964) / _1976, (_1983 + _1968) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 + _1964) / _1976, (_1968 - _1981) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 - _1981) / _1976, (_1968 - _1983) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 - _1983) / _1976, (_1981 + _1968) / _1976), _1986), 0.0)).x), vec4(0.25)));
        _2048 = 1.0 - (_2041 * cbSceneParam._m0[34u].x);
        _2049 = 1.0 - (_2041 * cbSceneParam._m0[34u].y);
        _2050 = 1.0 - (_2041 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2048 = 1.0;
        _2049 = 1.0;
        _2050 = 1.0;
    }
    float _2114;
    float _2116;
    float _2118;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2102 = fma(_1898, cbSceneParam._m0[63u].w, fma(_1894, cbSceneParam._m0[63u].z, fma(_1890, cbSceneParam._m0[63u].y, _1886 * cbSceneParam._m0[63u].x)));
        float _2103 = fma(_1898, cbSceneParam._m0[60u].w, fma(_1894, cbSceneParam._m0[60u].z, fma(_1890, cbSceneParam._m0[60u].y, _1886 * cbSceneParam._m0[60u].x))) / _2102;
        float _2104 = fma(_1898, cbSceneParam._m0[61u].w, fma(_1894, cbSceneParam._m0[61u].z, fma(_1890, cbSceneParam._m0[61u].y, _1886 * cbSceneParam._m0[61u].x))) / _2102;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2103 >= cbSceneParam._m0[64u].x) && (_2104 >= cbSceneParam._m0[64u].y)) && (_2103 <= cbSceneParam._m0[64u].z)) && (_2104 <= cbSceneParam._m0[64u].w))
        {
            float _2242 = fma(_1898, cbSceneParam._m0[62u].w, fma(_1894, cbSceneParam._m0[62u].z, fma(_1890, cbSceneParam._m0[62u].y, _1886 * cbSceneParam._m0[62u].x))) / _2102;
            float _2246 = isnan(cbSceneParam._m0[41u].w) ? _2242 : (isnan(_2242) ? cbSceneParam._m0[41u].w : max(_2242, cbSceneParam._m0[41u].w));
            float _2289 = (cbSceneParam._m0[33u].x - sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901))) * cbSceneParam._m0[33u].y;
            float _4391 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
            float _2296 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2103, cbSceneParam._m0[33u].w + _2104), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2103, _2104 - cbSceneParam._m0[33u].z), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2103 - cbSceneParam._m0[33u].z, _2104 - cbSceneParam._m0[33u].w), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2103 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2104), _2246), 0.0)).x), vec4(0.25)));
            float _2300 = 1.0 - (_2296 * cbSceneParam._m0[34u].x);
            float _2301 = 1.0 - (_2296 * cbSceneParam._m0[34u].y);
            float _2302 = 1.0 - (_2296 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2302) ? _2050 : (isnan(_2050) ? _2302 : min(_2050, _2302));
            frontier_phi_37_36_ladder_1 = isnan(_2301) ? _2049 : (isnan(_2049) ? _2301 : min(_2049, _2301));
            frontier_phi_37_36_ladder_2 = isnan(_2300) ? _2048 : (isnan(_2048) ? _2300 : min(_2048, _2300));
        }
        else
        {
            frontier_phi_37_36_ladder = _2050;
            frontier_phi_37_36_ladder_1 = _2049;
            frontier_phi_37_36_ladder_2 = _2048;
        }
        _2114 = frontier_phi_37_36_ladder_2;
        _2116 = frontier_phi_37_36_ladder_1;
        _2118 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2114 = _2048;
        _2116 = _2049;
        _2118 = _2050;
    }
    uvec4 _2123 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2125 = _2123.x * 14u;
    uint _2126 = _2125 + 13u;
    float _2133 = _798 + (-1.0);
    float _2138 = (cbLight._m0[_2126].x * _2133) + 1.0;
    float _2139 = (cbLight._m0[_2126].y * _2133) + 1.0;
    float _2140 = (cbLight._m0[_2126].z * _2133) + 1.0;
    float _2141 = (cbLight._m0[_2126].w * _2133) + 1.0;
    uint _2142 = _2125 + 5u;
    float _2148 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2152 = _2125 + 4u;
    float _2161 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2165 = _2125 | 1u;
    float _2176 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_635, _636, _637));
    float _2179 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_635, _636, _637));
    float _4427 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _4438 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2184 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2186 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * 0.3183098733425140380859375;
    float _2193 = ((cbLight._m0[_2142].x * _2148) * _2186) + (((cbLight._m0[_2152].x * _2114) * _2161) * _2184);
    float _2194 = ((_2148 * cbLight._m0[_2142].y) * _2186) + (((cbLight._m0[_2152].y * _2116) * _2161) * _2184);
    float _2195 = ((_2148 * cbLight._m0[_2142].z) * _2186) + (((cbLight._m0[_2152].z * _2118) * _2161) * _2184);
    uvec4 _2199 = floatBitsToUint(cbLight._m0[_2125 + 12u]);
    bool _2201 = _2199.x == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2201)
    {
        _2303 = _2193;
        _2305 = _2194;
        _2307 = _2195;
    }
    else
    {
        uint _2311 = _2125 + 6u;
        float _2327 = (dot(vec3(cbLight._m0[_2125 + 2u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4449 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2330 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2303 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2193;
        _2305 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2194;
        _2307 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2195;
    }
    bool _2310 = _2199.y == 0u;
    float _2365;
    float _2367;
    float _2369;
    if (_2310)
    {
        _2365 = _2303;
        _2367 = _2305;
        _2369 = _2307;
    }
    else
    {
        uint _2527 = _2125 + 7u;
        float _2543 = (dot(vec3(cbLight._m0[_2125 + 3u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2544 = _2543 * _2543;
        float _4465 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2545 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2546 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2365 = (((cbLight._m0[_2527].x * 0.3183098733425140380859375) * _2545) * _2546) + _2303;
        _2367 = (((cbLight._m0[_2527].y * 0.3183098733425140380859375) * _2545) * _2546) + _2305;
        _2369 = (((cbLight._m0[_2527].z * 0.3183098733425140380859375) * _2545) * _2546) + _2307;
    }
    uint _2372 = _2125 + 8u;
    float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _638) * 0.949999988079071044921875);
    float _2386 = _2385 * _2385;
    float _2387 = cbLight._m0[_2125].x + _715;
    float _2388 = cbLight._m0[_2125].y + _716;
    float _2389 = cbLight._m0[_2125].z + _717;
    float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
    float _2394 = _2393 * _2387;
    float _2395 = _2393 * _2388;
    float _2396 = _2393 * _2389;
    float _2397 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2125].xyz));
    float _4481 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _4492 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _2401 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2402 = dot(vec3(_635, _636, _637), vec3(_2394, _2395, _2396));
    float _4503 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2406 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2394, _2395, _2396));
    float _4514 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2410 = _2386 * _2386;
    float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
    float _2425 = (exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2426 = 1.0 - _2386;
    float _2437 = (0.5 / (((_2401 * ((_2400 * _2426) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2426) + _2386) * _2400))) * _2400;
    float _4525 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2439 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
    uint _2453 = _2125 + 9u;
    float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _638) * 0.949999988079071044921875);
    float _2465 = _2464 * _2464;
    float _2466 = cbLight._m0[_2165].x + _715;
    float _2467 = cbLight._m0[_2165].y + _716;
    float _2468 = cbLight._m0[_2165].z + _717;
    float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
    float _2473 = _2472 * _2466;
    float _2474 = _2472 * _2467;
    float _2475 = _2472 * _2468;
    float _2476 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2165].xyz));
    float _4536 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2480 = dot(vec3(_635, _636, _637), vec3(_2473, _2474, _2475));
    float _4547 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2484 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2473, _2474, _2475));
    float _4558 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2488 = _2465 * _2465;
    float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
    float _2501 = (exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2502 = 1.0 - _2465;
    float _2512 = (0.5 / (((_2401 * ((_2479 * _2502) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2502) + _2465) * _2479))) * _2479;
    float _4569 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2514 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
    float _2524 = (((_2501 * cbLight._m0[_2453].x) * _2514) * _2148) + ((((cbLight._m0[_2372].x * _2114) * _2425) * _2439) * _2161);
    float _2525 = (((_2501 * cbLight._m0[_2453].y) * _2514) * _2148) + ((((cbLight._m0[_2372].y * _2116) * _2425) * _2439) * _2161);
    float _2526 = (((_2501 * cbLight._m0[_2453].z) * _2514) * _2148) + ((((cbLight._m0[_2372].z * _2118) * _2425) * _2439) * _2161);
    float _2582;
    float _2584;
    float _2586;
    if (_2201)
    {
        _2582 = _2524;
        _2584 = _2525;
        _2586 = _2526;
    }
    else
    {
        uint _2588 = _2125 + 2u;
        uint _2592 = _2125 + 10u;
        float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2588].w)) * _638) * 0.949999988079071044921875);
        float _2607 = _2606 * _2606;
        float _2608 = cbLight._m0[_2588].x + _715;
        float _2609 = cbLight._m0[_2588].y + _716;
        float _2610 = cbLight._m0[_2588].z + _717;
        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
        float _2615 = _2614 * _2608;
        float _2616 = _2614 * _2609;
        float _2617 = _2614 * _2610;
        float _2618 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2588].xyz));
        float _4580 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2622 = dot(vec3(_635, _636, _637), vec3(_2615, _2616, _2617));
        float _4591 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2626 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_2615, _2616, _2617));
        float _4602 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2630 = _2607 * _2607;
        float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
        float _2643 = (exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2644 = 1.0 - _2607;
        float _2654 = (0.5 / (((_2401 * ((_2621 * _2644) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2644) + _2607) * _2621))) * _2621;
        float _4613 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2582 = (((_2643 * cbLight._m0[_2592].x) * _2656) * _2657) + _2524;
        _2584 = (((_2643 * cbLight._m0[_2592].y) * _2656) * _2657) + _2525;
        _2586 = (((_2643 * cbLight._m0[_2592].z) * _2656) * _2657) + _2526;
    }
    float _2688;
    float _2690;
    float _2692;
    if (_2310)
    {
        _2688 = _2582;
        _2690 = _2584;
        _2692 = _2586;
    }
    else
    {
        uint _2699 = _2125 + 3u;
        uint _2703 = _2125 + 11u;
        float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2699].w)) * _638) * 0.949999988079071044921875);
        float _2718 = _2717 * _2717;
        float _2719 = cbLight._m0[_2699].x + _715;
        float _2720 = cbLight._m0[_2699].y + _716;
        float _2721 = cbLight._m0[_2699].z + _717;
        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
        float _2726 = _2725 * _2719;
        float _2727 = _2725 * _2720;
        float _2728 = _2725 * _2721;
        float _2729 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2699].xyz));
        float _4629 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2733 = dot(vec3(_635, _636, _637), vec3(_2726, _2727, _2728));
        float _4640 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2737 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_2726, _2727, _2728));
        float _4651 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2741 = _2718 * _2718;
        float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
        float _2754 = (exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2755 = 1.0 - _2718;
        float _2765 = (0.5 / (((_2401 * ((_2732 * _2755) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2755) + _2718) * _2732))) * _2732;
        float _4662 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2767 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
        float _2768 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2688 = (((_2754 * cbLight._m0[_2703].x) * _2767) * _2768) + _2582;
        _2690 = (((_2754 * cbLight._m0[_2703].y) * _2767) * _2768) + _2584;
        _2692 = (((_2754 * cbLight._m0[_2703].z) * _2767) * _2768) + _2586;
    }
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_2123.y == 0u)
    {
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.x;
        uint _2801 = uint((float(_2789.y) * floor(float(uint(cbSceneParam._m0[85u].y * _736) / _2790))) + floor(float(uint(cbSceneParam._m0[85u].x * _735) / _2790)));
        float _2811 = (log2(_1901 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2812 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        uint _2815 = uint(isnan(14.0) ? _2812 : (isnan(_2812) ? 14.0 : min(_2812, 14.0)));
        uvec4 _2820 = texelFetch(g_lightClusterGridBuffer, int(((_2815 << 2u) + (_2801 << 6u)) >> 2u));
        uint _2821 = _2820.x;
        uint _2822 = _2789.z;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        if (((((1u << ((_2822 >> 4u) & 15u)) + 4294967295u) & _2821) == 0u) || ((_2822 & 240u) == 0u))
        {
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
        }
        else
        {
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            uint _3060 = 0u;
            uint _3069;
            bool _3070;
            for (;;)
            {
                _3069 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                _3070 = _3069 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3070)
                {
                    frontier_phi_71_pred = _3059;
                    frontier_phi_71_pred_1 = _3058;
                    frontier_phi_71_pred_2 = _3057;
                    frontier_phi_71_pred_3 = _3056;
                    frontier_phi_71_pred_4 = _3055;
                    frontier_phi_71_pred_5 = _3054;
                }
                else
                {
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    uint _3205;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3069;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    for (;;)
                    {
                        uint _3209 = uint(findLSB(_3205)) + (_3060 << 5u);
                        uint _3206 = (_3205 + 4294967295u) & _3205;
                        uint _3211 = _3209 * 48u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 3u)).x));
                        uint _3231 = (_3209 * 48u) + 4u;
                        vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 3u)).x));
                        uint _3250 = (_3209 * 48u) + 8u;
                        vec3 _3261 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x));
                        float _3265 = _3225.x - _1899;
                        float _3266 = _3225.y - _1900;
                        float _3267 = _3225.z - _1901;
                        float _3268 = dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267));
                        float _3271 = inversesqrt(_3268);
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3275 = dot(vec3(_754, _757, _760), vec3(_3272, _3273, _3274));
                        float _3280 = 1.0 - (_3268 * _3225.w);
                        float _4688 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3282 = sqrt(_3268) * _3244.w;
                        float _3285 = 1.39999997615814208984375 / (_3282 + 1.39999997615814208984375);
                        float _3286 = _3285 * _3285;
                        float _3289 = ((1.0 - _3286) * _3275) + _3286;
                        float _3292 = _3282 * _3282;
                        float _3296 = ((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3281) / ((_3292 * 0.699999988079071044921875) + 1.0);
                        float _3300 = (-0.0) - _1899;
                        float _3301 = (-0.0) - _1900;
                        float _3302 = (-0.0) - _1901;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3307 = _3306 * _3300;
                        float _3308 = _3306 * _3301;
                        float _3309 = _3306 * _3302;
                        float _3316 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                        float _3317 = 1.0 - _814;
                        float _3324 = sqrt(1.0 - ((1.0 - (_3317 * _3317)) * (1.0 - (_3316 * _3316))));
                        float _3325 = _3324 * _3324;
                        float _3326 = _3325 * _3325;
                        float _3327 = _3307 + _3272;
                        float _3328 = _3308 + _3273;
                        float _3329 = _3309 + _3274;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3337 = dot(vec3(_754, _757, _760), vec3(_3307, _3308, _3309));
                        float _4704 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3340 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3341 = dot(vec3(_754, _757, _760), vec3(_3333 * _3327, _3333 * _3328, _3333 * _3329));
                        float _4715 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3344 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3348 = ((_3344 * _3344) * (_3326 + (-1.0))) + 1.0;
                        float _3349 = _3285 * _3325;
                        float _3350 = _3349 * _3349;
                        float _3353 = ((1.0 - _3350) * _3275) + _3350;
                        float _4726 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3355 = 1.0 - _3325;
                        float _3365 = (0.5 / (((_3354 * ((_3340 * _3355) + _3325)) + 9.9999999392252902907785028219223e-09) + (((_3354 * _3355) + _3325) * _3340))) * _3354;
                        float _4737 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3376 = (((_3326 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3348 * _3348) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125))) * _3281;
                        _3129 = (_3296 * _3244.x) + _3202;
                        _3130 = (_3296 * _3244.y) + _3203;
                        _3131 = (_3296 * _3244.z) + _3204;
                        _3126 = (_3376 * _3261.x) + _3199;
                        _3127 = (_3376 * _3261.y) + _3200;
                        _3128 = (_3376 * _3261.z) + _3201;
                        if (_3206 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3206;
                        }
                    }
                    frontier_phi_71_pred = _3131;
                    frontier_phi_71_pred_1 = _3130;
                    frontier_phi_71_pred_2 = _3129;
                    frontier_phi_71_pred_3 = _3128;
                    frontier_phi_71_pred_4 = _3127;
                    frontier_phi_71_pred_5 = _3126;
                }
                _2912 = frontier_phi_71_pred;
                _2910 = frontier_phi_71_pred_1;
                _2908 = frontier_phi_71_pred_2;
                _2906 = frontier_phi_71_pred_3;
                _2904 = frontier_phi_71_pred_4;
                _2902 = frontier_phi_71_pred_5;
                uint _3061 = _3060 + 1u;
                if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3054 = _2902;
                    _3055 = _2904;
                    _3056 = _2906;
                    _3057 = _2908;
                    _3058 = _2910;
                    _3059 = _2912;
                    _3060 = _3061;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
        }
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.z;
        uint _2918 = (_2916 >> 8u) & 15u;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((4294967295u << _2918) & _2821) == 0u)
        {
            _3022 = _2901;
            _3024 = _2903;
            _3026 = _2905;
            _3028 = _2907;
            _3030 = _2909;
            _3032 = _2911;
        }
        else
        {
            float _3047 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
            float _3048 = _3047 * _1899;
            float _3049 = _3047 * _1900;
            float _3050 = _3047 * _1901;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2918 < ((_2916 >> 12u) & 15u))
            {
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3182 = _2901;
                float _3183 = _2903;
                float _3184 = _2905;
                float _3185 = _2907;
                float _3186 = _2909;
                float _3187 = _2911;
                uint _3188 = _2918;
                uint _3197;
                bool _3198;
                for (;;)
                {
                    _3197 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                    _3198 = _3197 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3198)
                    {
                        frontier_phi_82_pred = _3187;
                        frontier_phi_82_pred_1 = _3186;
                        frontier_phi_82_pred_2 = _3185;
                        frontier_phi_82_pred_3 = _3184;
                        frontier_phi_82_pred_4 = _3183;
                        frontier_phi_82_pred_5 = _3182;
                    }
                    else
                    {
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3403 = _3182;
                        float _3404 = _3183;
                        float _3405 = _3184;
                        float _3406 = _3185;
                        float _3407 = _3186;
                        float _3408 = _3187;
                        uint _3409 = _3197;
                        uint _3410;
                        vec4 _3435;
                        float _3436;
                        vec4 _3451;
                        vec3 _3463;
                        vec4 _3478;
                        vec4 _3494;
                        float _3540;
                        bool _3541;
                        for (;;)
                        {
                            uint _3420 = ((_3188 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3409));
                            _3410 = (_3409 + 4294967295u) & _3409;
                            uint _3422 = _3420 * 40u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            _3436 = _3435.w;
                            uint _3438 = (_3420 * 40u) + 4u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3420 * 40u) + 8u;
                            _3463 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x));
                            uint _3465 = (_3420 * 40u) + 16u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3481 = (_3420 * 40u) + 20u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3420 * 40u) + 24u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3515 = (_3420 * 40u) + 28u;
                            vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3540 = fma(_1901, _3528.z, fma(_1900, _3528.y, _3528.x * _1899)) + _3528.w;
                            _3541 = !((fma(_1901, _3509.z, fma(_1900, _3509.y, _3509.x * _1899)) + _3509.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3541)
                            {
                                float _3568 = _3435.x - _1899;
                                float _3569 = _3435.y - _1900;
                                float _3570 = _3435.z - _1901;
                                float _3571 = dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570));
                                float _3574 = inversesqrt(_3571);
                                float _3575 = _3574 * _3568;
                                float _3576 = _3574 * _3569;
                                float _3577 = _3574 * _3570;
                                float _3581 = 1.0 - (_3571 / (_3436 * _3436));
                                float _4748 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3586 = sqrt(_3571) * _3451.w;
                                float _3588 = 1.39999997615814208984375 / (_3586 + 1.39999997615814208984375);
                                float _3589 = _3588 * _3588;
                                float _3592 = ((1.0 - _3589) * dot(vec3(_3575, _3576, _3577), vec3(_754, _757, _760))) + _3589;
                                float _3595 = _3586 * _3586;
                                float _3599 = (fma(_1901, _3478.z, fma(_1900, _3478.y, _3478.x * _1899)) + _3478.w) / _3540;
                                float _3600 = (fma(_1901, _3494.z, fma(_1900, _3494.y, _3494.x * _1899)) + _3494.w) / _3540;
                                float _3604 = 1.0 - dot(vec2(_3599, _3600), vec2(_3599, _3600));
                                float _4764 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3606 = _3605 * (((isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0))) * _3582) / ((_3595 * 0.699999988079071044921875) + 1.0));
                                float _3618 = exp2(log2(1.0 / ((_3595 * 3.5) + 5.0)) * 0.25);
                                float _3619 = 1.0 - _814;
                                float _3626 = sqrt(1.0 - ((1.0 - (_3619 * _3619)) * (1.0 - (_3618 * _3618))));
                                float _3627 = _3626 * _3626;
                                float _3628 = _3627 * _3627;
                                float _3629 = _3575 - _3048;
                                float _3630 = _3576 - _3049;
                                float _3631 = _3577 - _3050;
                                float _3635 = inversesqrt(dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631)));
                                float _3639 = dot(vec3(_754, _757, _760), vec3((-0.0) - _3048, (-0.0) - _3049, (-0.0) - _3050));
                                float _4775 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3643 = dot(vec3(_754, _757, _760), vec3(_3635 * _3629, _3635 * _3630, _3635 * _3631));
                                float _4786 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3646 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3650 = ((_3646 * _3646) * (_3628 + (-1.0))) + 1.0;
                                float _3651 = _3588 * _3627;
                                float _3652 = _3651 * _3651;
                                float _3658 = ((1.0 - _3652) * dot(vec3(_754, _757, _760), vec3(_3575, _3576, _3577))) + _3652;
                                float _4797 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3660 = 1.0 - _3627;
                                float _3670 = (0.5 / (((_3659 * ((_3642 * _3660) + _3627)) + 9.9999999392252902907785028219223e-09) + (((_3659 * _3660) + _3627) * _3642))) * _3659;
                                float _4808 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3680 = (_3605 * _3582) * (((_3628 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3650 * _3650) * ((_3595 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3606 * _3451.z;
                                frontier_phi_88_pred_1 = _3606 * _3451.y;
                                frontier_phi_88_pred_2 = _3606 * _3451.x;
                                frontier_phi_88_pred_3 = _3680 * _3463.z;
                                frontier_phi_88_pred_4 = _3680 * _3463.y;
                                frontier_phi_88_pred_5 = _3680 * _3463.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3689 = frontier_phi_88_pred;
                            _3688 = frontier_phi_88_pred_1;
                            _3687 = frontier_phi_88_pred_2;
                            _3686 = frontier_phi_88_pred_3;
                            _3685 = frontier_phi_88_pred_4;
                            _3684 = frontier_phi_88_pred_5;
                            _3393 = _3687 + _3406;
                            _3394 = _3688 + _3407;
                            _3395 = _3689 + _3408;
                            _3390 = _3684 + _3403;
                            _3391 = _3685 + _3404;
                            _3392 = _3686 + _3405;
                            if (_3410 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3410;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3395;
                        frontier_phi_82_pred_1 = _3394;
                        frontier_phi_82_pred_2 = _3393;
                        frontier_phi_82_pred_3 = _3392;
                        frontier_phi_82_pred_4 = _3391;
                        frontier_phi_82_pred_5 = _3390;
                    }
                    _3033 = frontier_phi_82_pred;
                    _3031 = frontier_phi_82_pred_1;
                    _3029 = frontier_phi_82_pred_2;
                    _3027 = frontier_phi_82_pred_3;
                    _3025 = frontier_phi_82_pred_4;
                    _3023 = frontier_phi_82_pred_5;
                    uint _3189 = _3188 + 1u;
                    if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3182 = _3023;
                        _3183 = _3025;
                        _3184 = _3027;
                        _3185 = _3029;
                        _3186 = _3031;
                        _3187 = _3033;
                        _3188 = _3189;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3029;
                frontier_phi_63_64_ladder_1 = _3033;
                frontier_phi_63_64_ladder_2 = _3031;
                frontier_phi_63_64_ladder_3 = _3027;
                frontier_phi_63_64_ladder_4 = _3025;
                frontier_phi_63_64_ladder_5 = _3023;
            }
            else
            {
                frontier_phi_63_64_ladder = _2907;
                frontier_phi_63_64_ladder_1 = _2911;
                frontier_phi_63_64_ladder_2 = _2909;
                frontier_phi_63_64_ladder_3 = _2905;
                frontier_phi_63_64_ladder_4 = _2903;
                frontier_phi_63_64_ladder_5 = _2901;
            }
            _3022 = frontier_phi_63_64_ladder_5;
            _3024 = frontier_phi_63_64_ladder_4;
            _3026 = frontier_phi_63_64_ladder_3;
            _3028 = frontier_phi_63_64_ladder;
            _3030 = frontier_phi_63_64_ladder_2;
            _3032 = frontier_phi_63_64_ladder_1;
        }
        float _3037 = isnan(1.0) ? _798 : (isnan(_798) ? 1.0 : min(_798, 1.0));
        _2834 = (_3037 * _3028) + _2365;
        _2836 = (_3037 * _3030) + _2367;
        _2838 = (_3037 * _3032) + _2369;
        _2840 = ((_3022 * 0.039999999105930328369140625) * _3037) + _2688;
        _2842 = ((_3024 * 0.039999999105930328369140625) * _3037) + _2690;
        _2844 = ((_3026 * 0.039999999105930328369140625) * _3037) + _2692;
    }
    else
    {
        _2834 = _2365;
        _2836 = _2367;
        _2838 = _2369;
        _2840 = _2688;
        _2842 = _2690;
        _2844 = _2692;
    }
    float _4824 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4835 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4846 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _2861 = ((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2834 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _798))) + ((_2840 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2862 = ((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2836 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _798))) + ((_2842 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2863 = ((isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2838 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _798))) + ((_2844 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    uint _2864 = _238 + 6u;
    float _2872 = _735 / cbSceneParam._m0[86u].x;
    float _2873 = _736 / cbSceneParam._m0[86u].y;
    vec4 _2887 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, (log2((isnan(cbSceneParam._m0[77u].w) ? _656 : (isnan(_656) ? cbSceneParam._m0[77u].w : min(_656, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2889 = _2887.x;
    float _2890 = _2887.y;
    float _2891 = _2887.z;
    float _2892 = _2887.w;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    if (_656 > cbSceneParam._m0[78u].w)
    {
        float _2926 = isnan(_656) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _656 : min(cbSceneParam._m0[80u].w, _656));
        float _2927 = _2926 / _656;
        float _2938 = _2927 * _708;
        float _2939 = _709 * _2927;
        float _2940 = (-0.0) - _2939;
        float _2942 = _2927 * _710;
        float _2944 = (cbSceneParam._m0[77u].w * _2940) / _2926;
        float _2945 = _2944 + cbSceneParam._m0[79u].w;
        float _2946 = cbSceneParam._m0[79u].w - _2939;
        float _2952 = sqrt(((_2938 * _2938) + (_2939 * _2939)) + (_2942 * _2942));
        float _2955 = (1.0 - (cbSceneParam._m0[77u].w / _2926)) * _2952;
        float _2960 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2962 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3139;
        if (abs((_2940 - _2944) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3139 = ((((_2945 > 0.0) ? exp2(_2960 * _2945) : (2.0 - exp2(_2962 * _2945))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2955;
        }
        else
        {
            float _3083 = 1.0 / cbSceneParam._m0[80u].x;
            float _3084 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : max(_2945, _2946));
            float _3085 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : min(_2945, _2946));
            float _3094 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : min(_3084, 0.0));
            float _3095 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : min(_3085, 0.0));
            _3139 = ((abs(_2952 / _2940) * cbSceneParam._m0[80u].y) * ((((_3094 - _3095) * 2.0) - ((exp2(_2960 * (isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0)))) - exp2(_2960 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))))) * _3083)) - ((exp2(_2962 * _3094) - exp2(_2962 * _3095)) * _3083))) + (_2955 * cbSceneParam._m0[80u].z);
        }
        vec4 _3141 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, 1.0), 0.0);
        float _3150 = exp2((_3139 * (-1.44269502162933349609375)) * (1.0 - _3141.w));
        float _3151 = log2(_3150);
        float _3167 = log2(_2892);
        _2964 = (exp2(_3167 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].x)) * _3141.x) / cbSceneParam._m0[78u].x)) + _2889;
        _2966 = (exp2(_3167 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].y)) * _3141.y) / cbSceneParam._m0[78u].y)) + _2890;
        _2968 = (exp2(_3167 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].z)) * _3141.z) / cbSceneParam._m0[78u].z)) + _2891;
        _2970 = _3150 * _2892;
    }
    else
    {
        _2964 = _2889;
        _2966 = _2890;
        _2968 = _2891;
        _2970 = _2892;
    }
    bool _3177;
    vec4 _2980;
    vec4 _3002;
    float _3004;
    float _3008;
    float _3009;
    float _3010;
    float _3011;
    bool _3021;
    for (;;)
    {
        _2980 = cbMatDynParam._m0[0u];
        float _2982 = roundEven(_2980.y);
        bool _2983 = _2982 == 3.0;
        float _2984 = log2(_2970);
        float _2991 = exp2(_2984 * cbSceneParam._m0[78u].x) * _2861;
        float _2992 = exp2(_2984 * cbSceneParam._m0[78u].y) * _2862;
        float _2993 = exp2(_2984 * cbSceneParam._m0[78u].z) * _2863;
        float _3000 = _724 + (-0.5);
        _3002 = cbMtdParam._m0[1u];
        _3004 = _3002.y * _3000;
        float _3007 = (_2982 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3008 = _3007 * (_2983 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2964)));
        _3009 = _3007 * (_2983 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2966)));
        _3010 = _3007 * (_2983 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2968)));
        _3011 = _3000 * 0.999000012874603271484375;
        _3021 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3021)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _3011) < 0.5)
            {
                _3177 = true;
                break;
            }
        }
        uint _3118 = _773 + uint(_2980.w);
        if ((cbInstanceData._m0[_3118].w < 1.0) && ((cbInstanceData._m0[_3118].w + _3011) < 0.5))
        {
            _3177 = true;
            break;
        }
        if ((_3004 + 1.0) < _3002.x)
        {
            _3177 = true;
            break;
        }
        _3177 = false;
        break;
    }
    float _3381;
    if (_3177)
    {
        discard_state = true;
        _3381 = 0.0;
    }
    else
    {
        _3381 = cbInstanceData._m0[_2864].w;
    }
    SV_Target.x = _3008;
    SV_Target.y = _3009;
    SV_Target.z = _3010;
    SV_Target.w = _3381;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2864].w;
    discard_exit();
}


