#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1266;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _302.x * cbMtdParam._m0[11u].x;
    float _308 = _302.y * cbMtdParam._m0[11u].y;
    float _309 = _302.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _348.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[24u].z) + _399) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3595 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _424 = (_417 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _425 = (_417 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _426 = (_417 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _348.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[24u].z) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3606 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _503 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _278.x) * ((_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424);
    float _506 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _278.y) * ((_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425);
    float _509 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _278.z) * ((_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426);
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    float _555 = ((_527.x - _546) * _417) + _546;
    float _556 = ((_527.y - _547) * _417) + _547;
    float _557 = ((_527.z - _548) * _417) + _548;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _582 = ((_569.z - _557) * _490) + _557;
    float _585 = ((((_569.x - _555) * _490) + _555) * 2.0) + (-1.0);
    float _587 = ((((_569.y - _556) * _490) + _556) * 2.0) + (-1.0);
    float _588 = dot(vec2(_585, _587), vec2(_585, _587));
    float _3617 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _593 = sqrt(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _619 = (((_607.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _585;
    float _620 = (((_607.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _587;
    float _623 = fma(_593, _226, fma(_620, _233, _619 * _219));
    float _626 = fma(_593, _227, fma(_620, _234, _619 * _220));
    float _629 = fma(_593, _228, fma(_620, _235, _619 * _221));
    float _633 = inversesqrt(dot(vec3(_623, _626, _629), vec3(_623, _626, _629)));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _662 = _660.x;
    float _663 = 1.0 - _662;
    float _669 = (cbMtdParam._m0[19u].x + dot(vec4(_633 * _623, _633 * _626, _633 * _629, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_662 - _663) * cbMtdParam._m0[24u].w) + _663) * cbMtdParam._m0[21u].z);
    float _3628 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _670 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _677 = (_670 * (cbMtdParam._m0[17u].x - _503)) + _503;
    float _678 = (_670 * (cbMtdParam._m0[17u].y - _506)) + _506;
    float _679 = (_670 * (cbMtdParam._m0[17u].z - _509)) + _509;
    float _683 = (cbMtdParam._m0[19u].w * (_607.z - _582)) + _582;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _703 = (_696.x * 2.0) + (-1.0);
    float _704 = (_696.y * 2.0) + (-1.0);
    float _705 = dot(vec2(_703, _704), vec2(_703, _704));
    float _3639 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _713 = ((_696.z - _683) * _670) + _683;
    float _723 = ((sqrt(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) - _593) * _670) + _593;
    float _726 = (((_703 - _619) * _670) + _619) + (cbMtdParam._m0[21u].x * _619);
    float _727 = (((_704 - _620) * _670) + _620) + (cbMtdParam._m0[21u].x * _620);
    float _731 = cbMtdParam._m0[22u].x + _607.w;
    float _734 = fma(_723, _226, fma(_727, _233, _726 * _219));
    float _737 = fma(_723, _227, fma(_727, _234, _726 * _220));
    float _740 = fma(_723, _228, fma(_727, _235, _726 * _221));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    float _745 = _744 * _734;
    float _746 = _744 * _737;
    float _747 = _744 * _740;
    float _3650 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _748 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3672 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3683 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3694 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _766 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _817 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _807);
    float _818 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _807);
    float _819 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _807);
    float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
    float _824 = _817 * _823;
    float _825 = _818 * _823;
    float _826 = _819 * _823;
    float _832 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _833 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _851 = fma(_747, cbSceneParam._m0[5u].z, fma(_746, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _745));
    float _854 = fma(_747, cbSceneParam._m0[6u].z, fma(_746, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _745));
    float _857 = fma(_747, cbSceneParam._m0[7u].z, fma(_746, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _745));
    uint _871 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _877 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_871].x;
    float _878 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_871].y;
    float _879 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_871].z;
    float _3705 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    vec4 _891 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _832, cbSceneParam._m0[86u].y * _833));
    float _895 = ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * TEXCOORD_5.w) * _891.x;
    float _896 = dot(vec3(_745, _746, _747), vec3(_824, _825, _826));
    float _899 = _896 * 2.0;
    float _903 = (_899 * _745) - _824;
    float _904 = (_899 * _746) - _825;
    float _905 = (_899 * _747) - _826;
    float _909 = abs(dot(vec3(_824, _825, _826), vec3(_745, _746, _747)));
    float _3738 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _911 = sqrt(_748);
    float _924 = exp2((_911 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_911 * 3.0));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1265;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _990 = fma(_964, cbModelParam._m0[26u].z, fma(_960, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956));
        float _994 = fma(_964, cbModelParam._m0[27u].z, fma(_960, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956));
        float _998 = fma(_964, cbModelParam._m0[28u].z, fma(_960, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956));
        float _1023 = _956 + _745;
        float _1024 = _960 + _746;
        float _1025 = _964 + _747;
        float _1035 = fma(_1025, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1023)) - _990;
        float _1036 = fma(_1025, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1023)) - _994;
        float _1037 = fma(_1025, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1023)) - _998;
        float _1041 = inversesqrt(dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037)));
        float _1054 = ((_1041 * _1035) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_990 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1041 * _1036) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_994 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1041 * _1037) / cbModelParam._m0[34u].z) + ((((((_998 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        float _1093 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1059.x + (-0.5));
        float _1095 = _1093 * (_1059.y + (-0.5));
        float _1096 = _1093 * (_1059.z + (-0.5));
        float _1103 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1066.x + (-0.5));
        float _1105 = _1103 * (_1066.y + (-0.5));
        float _1106 = _1103 * (_1066.z + (-0.5));
        float _1113 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1073.x + (-0.5));
        float _1115 = _1113 * (_1073.y + (-0.5));
        float _1116 = _1113 * (_1073.z + (-0.5));
        float _1123 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1080.x + (-0.5));
        float _1125 = _1123 * (_1080.y + (-0.5));
        float _1126 = _1123 * (_1080.z + (-0.5));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = _1094 * 0.5;
        float _1131 = _1104 * 0.5;
        float _1132 = _1114 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1147 = (dot(vec3(_745, _746, _747), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1157 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3786 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1159 + 1.0))) + _1164) * _1127;
        float _1174 = _1095 * 0.5;
        float _1175 = _1105 * 0.5;
        float _1176 = _1115 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_745, _746, _747), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3819 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1201 + 1.0))) + _1206) * _1128;
        float _1216 = _1096 * 0.5;
        float _1217 = _1106 * 0.5;
        float _1218 = _1116 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_745, _746, _747), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3852 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1243 + 1.0))) + _1248) * _1129;
        _1265 = _1096;
        _1267 = _1095;
        _1268 = _1094;
        _1269 = _1106;
        _1270 = _1105;
        _1271 = _1104;
        _1272 = _1116;
        _1273 = _1115;
        _1274 = _1114;
        _1275 = _1129;
        _1276 = _1128;
        _1277 = _1127;
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
    }
    else
    {
        _1265 = _1266;
        _1267 = _1266;
        _1268 = _1266;
        _1269 = _1266;
        _1270 = _1266;
        _1271 = _1266;
        _1272 = _1266;
        _1273 = _1266;
        _1274 = _1266;
        _1275 = _1266;
        _1276 = _1266;
        _1277 = _1266;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1304 = fma(_964, cbModelParam._m0[30u].z, fma(_960, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _956));
        float _1308 = fma(_964, cbModelParam._m0[31u].z, fma(_960, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _956));
        float _1312 = fma(_964, cbModelParam._m0[32u].z, fma(_960, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _956));
        float _1335 = _956 + _745;
        float _1336 = _960 + _746;
        float _1337 = _964 + _747;
        float _1347 = fma(_1337, cbModelParam._m0[30u].z, fma(_1336, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1335)) - _1304;
        float _1348 = fma(_1337, cbModelParam._m0[31u].z, fma(_1336, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1335)) - _1308;
        float _1349 = fma(_1337, cbModelParam._m0[32u].z, fma(_1336, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1335)) - _1312;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1304 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1308 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[35u].z) + ((((((_1312 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1403 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1370.x + (-0.5));
        float _1405 = _1403 * (_1370.y + (-0.5));
        float _1406 = _1403 * (_1370.z + (-0.5));
        float _1413 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1377.x + (-0.5));
        float _1415 = _1413 * (_1377.y + (-0.5));
        float _1416 = _1413 * (_1377.z + (-0.5));
        float _1423 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1384.x + (-0.5));
        float _1425 = _1423 * (_1384.y + (-0.5));
        float _1426 = _1423 * (_1384.z + (-0.5));
        float _1433 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1391.x + (-0.5));
        float _1435 = _1433 * (_1391.y + (-0.5));
        float _1436 = _1433 * (_1391.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_745, _746, _747), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _3915 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1467 + 1.0))) + _1472) * _1437;
        float _1482 = _1405 * 0.5;
        float _1483 = _1415 * 0.5;
        float _1484 = _1425 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_745, _746, _747), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _3948 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1509 + 1.0))) + _1514) * _1438;
        float _1524 = _1406 * 0.5;
        float _1525 = _1416 * 0.5;
        float _1526 = _1426 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_745, _746, _747), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _3981 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1551 + 1.0))) + _1556) * _1439;
        _1573 = _1406;
        _1574 = _1405;
        _1575 = _1404;
        _1576 = _1416;
        _1577 = _1415;
        _1578 = _1414;
        _1579 = _1426;
        _1580 = _1425;
        _1581 = _1424;
        _1582 = _1439;
        _1583 = _1438;
        _1584 = _1437;
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
    }
    else
    {
        _1573 = _1266;
        _1574 = _1266;
        _1575 = _1266;
        _1576 = _1266;
        _1577 = _1266;
        _1578 = _1266;
        _1579 = _1266;
        _1580 = _1266;
        _1581 = _1266;
        _1582 = _1266;
        _1583 = _1266;
        _1584 = _1266;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1278)) + _1278;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1279)) + _1279;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1280)) + _1280;
    float _1620 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1597));
    float _1641 = _903 * 0.5;
    float _1642 = _904 * 0.5;
    float _1643 = _905 * 0.5;
    float _1644 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1647 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1650 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1684;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1657 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1265, _1269, _1272, _1275));
        float _1661 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1267, _1270, _1273, _1276));
        float _1665 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1672 = dot(vec4(cbModelParam._m0[39u]), vec4(_1641, _1642, _1643, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1695;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1686 = dot(vec4(cbModelParam._m0[40u]), vec4(_1641, _1642, _1643, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1699 = (_1695 * cbModelParam._m0[1u].x) + (_1684 * (1.0 - cbModelParam._m0[1u].x));
    float _1709 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1709 : min(cbModelParam._m0[25u].z, _1709));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1758 = fma(_964, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956)) + cbModelParam._m0[13u].w;
        float _1762 = fma(_964, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956)) + cbModelParam._m0[14u].w;
        float _1766 = fma(_964, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956)) + cbModelParam._m0[15u].w;
        float _1769 = fma(_905, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903));
        float _1772 = fma(_905, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903));
        float _1775 = fma(_905, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903));
        float _1803;
        if (_1769 > 0.0)
        {
            _1803 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1803 = frontier_phi_14_12_ladder;
        }
        float _2025;
        if (_1772 > 0.0)
        {
            _2025 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2025 = frontier_phi_23_19_ladder;
        }
        float _2271;
        if (_1775 > 0.0)
        {
            _2271 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2271 = frontier_phi_35_30_ladder;
        }
        float _2273 = isnan(_2025) ? _1803 : (isnan(_1803) ? _2025 : min(_1803, _2025));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1769) + _1758;
        float _2279 = (_2274 * _1772) + _1762;
        float _2280 = (_2274 * _1775) + _1766;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2283 = (-1.0) - _2281;
        float _2285 = _2281 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2280 > _2285) || ((_2280 < _2283) || ((_2279 > _2285) || ((_2279 < _2283) || ((_2278 < _2283) || (_2278 > _2285))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2280, cbModelParam._m0[9u].z, fma(_2279, cbModelParam._m0[9u].y, _2278 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2280, cbModelParam._m0[10u].z, fma(_2279, cbModelParam._m0[10u].y, _2278 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2280, cbModelParam._m0[11u].z, fma(_2279, cbModelParam._m0[11u].y, _2278 * cbModelParam._m0[11u].x))), _1710);
            frontier_phi_13_35_ladder = _2404.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2404.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2404.x * cbModelParam._m0[1u].y;
        }
        _1791 = frontier_phi_13_35_ladder_2;
        _1793 = frontier_phi_13_35_ladder_1;
        _1795 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1779 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_903, _904, _905), _1710);
        _1791 = _1779.x * cbModelParam._m0[1u].y;
        _1793 = _1779.y * cbModelParam._m0[1u].y;
        _1795 = _1779.z * cbModelParam._m0[1u].y;
    }
    float _1799 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1799 : min(cbModelParam._m0[25u].w, _1799));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1854 = fma(_964, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956)) + cbModelParam._m0[21u].w;
        float _1858 = fma(_964, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956)) + cbModelParam._m0[22u].w;
        float _1862 = fma(_964, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956)) + cbModelParam._m0[23u].w;
        float _1865 = fma(_905, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903));
        float _1868 = fma(_905, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903));
        float _1871 = fma(_905, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903));
        float _2030;
        if (_1865 > 0.0)
        {
            _2030 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2030 = frontier_phi_25_21_ladder;
        }
        float _2298;
        if (_1868 > 0.0)
        {
            _2298 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2298 = frontier_phi_37_32_ladder;
        }
        float _2503;
        if (_1871 > 0.0)
        {
            _2503 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2503 = frontier_phi_46_43_ladder;
        }
        float _2505 = isnan(_2298) ? _2030 : (isnan(_2030) ? _2298 : min(_2030, _2298));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1865) + _1854;
        float _2511 = (_2506 * _1868) + _1858;
        float _2512 = (_2506 * _1871) + _1862;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2513;
        float _2516 = _2513 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2512 > _2516) || ((_2512 < _2514) || ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 < _2514) || (_2510 > _2516))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2512, cbModelParam._m0[17u].z, fma(_2511, cbModelParam._m0[17u].y, _2510 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2512, cbModelParam._m0[18u].z, fma(_2511, cbModelParam._m0[18u].y, _2510 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2512, cbModelParam._m0[19u].z, fma(_2511, cbModelParam._m0[19u].y, _2510 * cbModelParam._m0[19u].x))), _1800);
            frontier_phi_22_46_ladder = _2711.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2711.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2711.x * cbModelParam._m0[1u].z;
        }
        _1890 = frontier_phi_22_46_ladder_2;
        _1892 = frontier_phi_22_46_ladder_1;
        _1894 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_903, _904, _905), _1800);
        _1890 = _1874.x * cbModelParam._m0[1u].z;
        _1892 = _1874.y * cbModelParam._m0[1u].z;
        _1894 = _1874.z * cbModelParam._m0[1u].z;
    }
    float _1906 = ((((1.0 - _924) * ((_911 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_924 * _911)) * _895;
    float _1907 = _1906 * ((cbModelParam._m0[1u].w * (_1890 - _1791)) + _1791);
    float _1908 = _1906 * ((cbModelParam._m0[1u].w * (_1892 - _1793)) + _1793);
    float _1909 = _1906 * ((cbModelParam._m0[1u].w * (_1894 - _1795)) + _1795);
    float _1912 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1915 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1918 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, _1907 * cbSceneParam._m0[91u].x));
    vec4 _1926 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_832, _833));
    float _1928 = _1926.w;
    float _1940 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1928);
    float _1941 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1928);
    float _1942 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1928);
    uvec4 _1946 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1948 = _1946.x * 14u;
    uint _1949 = _1948 + 13u;
    float _1956 = _895 + (-1.0);
    float _1961 = (cbLight._m0[_1949].x * _1956) + 1.0;
    float _1962 = (cbLight._m0[_1949].y * _1956) + 1.0;
    float _1963 = (cbLight._m0[_1949].z * _1956) + 1.0;
    float _1964 = (cbLight._m0[_1949].w * _1956) + 1.0;
    uint _1965 = _1948 + 5u;
    float _1971 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
    uint _1975 = _1948 + 4u;
    float _1984 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1988 = _1948 | 1u;
    float _1999 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_745, _746, _747));
    float _2002 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_745, _746, _747));
    float _4117 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _4128 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2007 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.3183098733425140380859375;
    float _2009 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.3183098733425140380859375;
    float _2016 = ((cbLight._m0[_1965].x * _1971) * _2009) + (((cbLight._m0[_1975].x * _1940) * _1984) * _2007);
    float _2017 = ((_1971 * cbLight._m0[_1965].y) * _2009) + (((cbLight._m0[_1975].y * _1941) * _1984) * _2007);
    float _2018 = ((_1971 * cbLight._m0[_1965].z) * _2009) + (((cbLight._m0[_1975].z * _1942) * _1984) * _2007);
    uvec4 _2022 = floatBitsToUint(cbLight._m0[_1948 + 12u]);
    bool _2024 = _2022.x == 0u;
    float _2035;
    float _2037;
    float _2039;
    if (_2024)
    {
        _2035 = _2016;
        _2037 = _2017;
        _2039 = _2018;
    }
    else
    {
        uint _2043 = _1948 + 6u;
        float _2059 = (dot(vec3(cbLight._m0[_1948 + 2u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2060 = _2059 * _2059;
        float _4139 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2061 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2062 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2035 = (((cbLight._m0[_2043].x * 0.3183098733425140380859375) * _2061) * _2062) + _2016;
        _2037 = (((cbLight._m0[_2043].y * 0.3183098733425140380859375) * _2061) * _2062) + _2017;
        _2039 = (((cbLight._m0[_2043].z * 0.3183098733425140380859375) * _2061) * _2062) + _2018;
    }
    bool _2042 = _2022.y == 0u;
    float _2080;
    float _2082;
    float _2084;
    if (_2042)
    {
        _2080 = _2035;
        _2082 = _2037;
        _2084 = _2039;
    }
    else
    {
        uint _2242 = _1948 + 7u;
        float _2258 = (dot(vec3(cbLight._m0[_1948 + 3u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2259 = _2258 * _2258;
        float _4155 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2260 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2261 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2080 = (((cbLight._m0[_2242].x * 0.3183098733425140380859375) * _2260) * _2261) + _2035;
        _2082 = (((cbLight._m0[_2242].y * 0.3183098733425140380859375) * _2260) * _2261) + _2037;
        _2084 = (((cbLight._m0[_2242].z * 0.3183098733425140380859375) * _2260) * _2261) + _2039;
    }
    uint _2087 = _1948 + 8u;
    float _2100 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _748) * 0.949999988079071044921875);
    float _2101 = _2100 * _2100;
    float _2102 = cbLight._m0[_1948].x + _824;
    float _2103 = cbLight._m0[_1948].y + _825;
    float _2104 = cbLight._m0[_1948].z + _826;
    float _2108 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
    float _2109 = _2108 * _2102;
    float _2110 = _2108 * _2103;
    float _2111 = _2108 * _2104;
    float _2112 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_1948].xyz));
    float _4171 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _2116 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2117 = dot(vec3(_745, _746, _747), vec3(_2109, _2110, _2111));
    float _4193 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2121 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2109, _2110, _2111));
    float _4204 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2125 = _2101 * _2101;
    float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
    float _2140 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2141 = 1.0 - _2101;
    float _2152 = (0.5 / (((_2116 * ((_2115 * _2141) + _2101)) + 9.9999999392252902907785028219223e-09) + (((_2116 * _2141) + _2101) * _2115))) * _2115;
    float _4215 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2154 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
    uint _2168 = _1948 + 9u;
    float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _748) * 0.949999988079071044921875);
    float _2180 = _2179 * _2179;
    float _2181 = cbLight._m0[_1988].x + _824;
    float _2182 = cbLight._m0[_1988].y + _825;
    float _2183 = cbLight._m0[_1988].z + _826;
    float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
    float _2188 = _2187 * _2181;
    float _2189 = _2187 * _2182;
    float _2190 = _2187 * _2183;
    float _2191 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_1988].xyz));
    float _4226 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2195 = dot(vec3(_745, _746, _747), vec3(_2188, _2189, _2190));
    float _4237 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2199 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2188, _2189, _2190));
    float _4248 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2203 = _2180 * _2180;
    float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
    float _2216 = (exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2217 = 1.0 - _2180;
    float _2227 = (0.5 / (((_2116 * ((_2194 * _2217) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_2116 * _2217) + _2180) * _2194))) * _2194;
    float _4259 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2229 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
    float _2239 = (((_2216 * cbLight._m0[_2168].x) * _2229) * _1971) + ((((cbLight._m0[_2087].x * _1940) * _2140) * _2154) * _1984);
    float _2240 = (((_2216 * cbLight._m0[_2168].y) * _2229) * _1971) + ((((cbLight._m0[_2087].y * _1941) * _2140) * _2154) * _1984);
    float _2241 = (((_2216 * cbLight._m0[_2168].z) * _2229) * _1971) + ((((cbLight._m0[_2087].z * _1942) * _2140) * _2154) * _1984);
    float _2303;
    float _2305;
    float _2307;
    if (_2024)
    {
        _2303 = _2239;
        _2305 = _2240;
        _2307 = _2241;
    }
    else
    {
        uint _2309 = _1948 + 2u;
        uint _2313 = _1948 + 10u;
        float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _748) * 0.949999988079071044921875);
        float _2328 = _2327 * _2327;
        float _2329 = cbLight._m0[_2309].x + _824;
        float _2330 = cbLight._m0[_2309].y + _825;
        float _2331 = cbLight._m0[_2309].z + _826;
        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
        float _2336 = _2335 * _2329;
        float _2337 = _2335 * _2330;
        float _2338 = _2335 * _2331;
        float _2339 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2309].xyz));
        float _4270 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2343 = dot(vec3(_745, _746, _747), vec3(_2336, _2337, _2338));
        float _4281 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2347 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2336, _2337, _2338));
        float _4292 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _2328 * _2328;
        float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
        float _2364 = (exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2365 = 1.0 - _2328;
        float _2375 = (0.5 / (((_2116 * ((_2342 * _2365) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2116 * _2365) + _2328) * _2342))) * _2342;
        float _4303 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2377 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
        float _2378 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2303 = (((_2364 * cbLight._m0[_2313].x) * _2377) * _2378) + _2239;
        _2305 = (((_2364 * cbLight._m0[_2313].y) * _2377) * _2378) + _2240;
        _2307 = (((_2364 * cbLight._m0[_2313].z) * _2377) * _2378) + _2241;
    }
    float _2413;
    float _2415;
    float _2417;
    if (_2042)
    {
        _2413 = _2303;
        _2415 = _2305;
        _2417 = _2307;
    }
    else
    {
        uint _2424 = _1948 + 3u;
        uint _2428 = _1948 + 11u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _748) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _824;
        float _2445 = cbLight._m0[_2424].y + _825;
        float _2446 = cbLight._m0[_2424].z + _826;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2424].xyz));
        float _4319 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2458 = dot(vec3(_745, _746, _747), vec3(_2451, _2452, _2453));
        float _4330 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4341 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2479 = (exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2480 = 1.0 - _2443;
        float _2490 = (0.5 / (((_2116 * ((_2457 * _2480) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2116 * _2480) + _2443) * _2457))) * _2457;
        float _4352 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2492 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2493 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2413 = (((_2479 * cbLight._m0[_2428].x) * _2492) * _2493) + _2303;
        _2415 = (((_2479 * cbLight._m0[_2428].y) * _2492) * _2493) + _2305;
        _2417 = (((_2479 * cbLight._m0[_2428].z) * _2492) * _2493) + _2307;
    }
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_1946.y == 0u)
    {
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2568;
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2568;
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2568;
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.x;
        uint _2595 = uint((float(_2583.y) * floor(float(uint(cbSceneParam._m0[85u].y * _833) / _2584))) + floor(float(uint(cbSceneParam._m0[85u].x * _832) / _2584)));
        float _2605 = (log2(_2571 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2606 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        uint _2609 = uint(isnan(14.0) ? _2606 : (isnan(_2606) ? 14.0 : min(_2606, 14.0)));
        uvec4 _2614 = texelFetch(g_lightClusterGridBuffer, int(((_2609 << 2u) + (_2595 << 6u)) >> 2u));
        uint _2615 = _2614.x;
        uint _2616 = _2583.z;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((((1u << ((_2616 >> 4u) & 15u)) + 4294967295u) & _2615) == 0u) || ((_2616 & 240u) == 0u))
        {
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
        }
        else
        {
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            uint _2867 = 0u;
            uint _2876;
            bool _2877;
            for (;;)
            {
                _2876 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                _2877 = _2876 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2877)
                {
                    frontier_phi_61_pred = _2861;
                    frontier_phi_61_pred_1 = _2866;
                    frontier_phi_61_pred_2 = _2865;
                    frontier_phi_61_pred_3 = _2864;
                    frontier_phi_61_pred_4 = _2863;
                    frontier_phi_61_pred_5 = _2862;
                }
                else
                {
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    uint _2991;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2876;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    for (;;)
                    {
                        uint _2995 = uint(findLSB(_2991)) + (_2867 << 5u);
                        uint _2992 = (_2991 + 4294967295u) & _2991;
                        uint _2997 = _2995 * 48u;
                        vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 3u)).x));
                        uint _3017 = (_2995 * 48u) + 4u;
                        vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3036 = (_2995 * 48u) + 8u;
                        vec3 _3047 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x));
                        float _3051 = _3011.x - _2569;
                        float _3052 = _3011.y - _2570;
                        float _3053 = _3011.z - _2571;
                        float _3054 = dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053));
                        float _3057 = inversesqrt(_3054);
                        float _3058 = _3057 * _3051;
                        float _3059 = _3057 * _3052;
                        float _3060 = _3057 * _3053;
                        float _3061 = dot(vec3(_851, _854, _857), vec3(_3058, _3059, _3060));
                        float _3066 = 1.0 - (_3054 * _3011.w);
                        float _4378 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3067 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3068 = sqrt(_3054) * _3030.w;
                        float _3071 = 1.39999997615814208984375 / (_3068 + 1.39999997615814208984375);
                        float _3072 = _3071 * _3071;
                        float _3075 = ((1.0 - _3072) * _3061) + _3072;
                        float _3078 = _3068 * _3068;
                        float _3082 = ((isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))) * _3067) / ((_3078 * 0.699999988079071044921875) + 1.0);
                        float _3086 = (-0.0) - _2569;
                        float _3087 = (-0.0) - _2570;
                        float _3088 = (-0.0) - _2571;
                        float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                        float _3093 = _3092 * _3086;
                        float _3094 = _3092 * _3087;
                        float _3095 = _3092 * _3088;
                        float _3103 = exp2(log2(1.0 / ((_3078 * 3.5) + 5.0)) * 0.25);
                        float _3104 = 1.0 - _911;
                        float _3111 = sqrt(1.0 - ((1.0 - (_3104 * _3104)) * (1.0 - (_3103 * _3103))));
                        float _3112 = _3111 * _3111;
                        float _3113 = _3112 * _3112;
                        float _3114 = _3093 + _3058;
                        float _3115 = _3094 + _3059;
                        float _3116 = _3095 + _3060;
                        float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                        float _3124 = dot(vec3(_851, _854, _857), vec3(_3093, _3094, _3095));
                        float _4394 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3127 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3128 = dot(vec3(_851, _854, _857), vec3(_3120 * _3114, _3120 * _3115, _3120 * _3116));
                        float _4405 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3135 = ((_3131 * _3131) * (_3113 + (-1.0))) + 1.0;
                        float _3136 = _3071 * _3112;
                        float _3137 = _3136 * _3136;
                        float _3140 = ((1.0 - _3137) * _3061) + _3137;
                        float _4416 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3142 = 1.0 - _3112;
                        float _3152 = (0.5 / (((_3141 * ((_3127 * _3142) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_3141 * _3142) + _3112) * _3127))) * _3141;
                        float _4427 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3163 = (((_3113 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3135 * _3135) * ((_3078 * 2.1991131305694580078125) + 3.141590118408203125))) * _3067;
                        _2920 = (_3082 * _3030.x) + _2988;
                        _2921 = (_3082 * _3030.y) + _2989;
                        _2922 = (_3082 * _3030.z) + _2990;
                        _2917 = (_3163 * _3047.x) + _2985;
                        _2918 = (_3163 * _3047.y) + _2986;
                        _2919 = (_3163 * _3047.z) + _2987;
                        if (_2992 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2992;
                        }
                    }
                    frontier_phi_61_pred = _2917;
                    frontier_phi_61_pred_1 = _2922;
                    frontier_phi_61_pred_2 = _2921;
                    frontier_phi_61_pred_3 = _2920;
                    frontier_phi_61_pred_4 = _2919;
                    frontier_phi_61_pred_5 = _2918;
                }
                _2717 = frontier_phi_61_pred;
                _2727 = frontier_phi_61_pred_1;
                _2725 = frontier_phi_61_pred_2;
                _2723 = frontier_phi_61_pred_3;
                _2721 = frontier_phi_61_pred_4;
                _2719 = frontier_phi_61_pred_5;
                uint _2868 = _2867 + 1u;
                if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2861 = _2717;
                    _2862 = _2719;
                    _2863 = _2721;
                    _2864 = _2723;
                    _2865 = _2725;
                    _2866 = _2727;
                    _2867 = _2868;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
        }
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.z;
        uint _2733 = (_2731 >> 8u) & 15u;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((4294967295u << _2733) & _2615) == 0u)
        {
            _2829 = _2716;
            _2831 = _2718;
            _2833 = _2720;
            _2835 = _2722;
            _2837 = _2724;
            _2839 = _2726;
        }
        else
        {
            float _2854 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
            float _2855 = _2854 * _2569;
            float _2856 = _2854 * _2570;
            float _2857 = _2854 * _2571;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2733 < ((_2731 >> 12u) & 15u))
            {
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2968 = _2716;
                float _2969 = _2718;
                float _2970 = _2720;
                float _2971 = _2722;
                float _2972 = _2724;
                float _2973 = _2726;
                uint _2974 = _2733;
                uint _2983;
                bool _2984;
                for (;;)
                {
                    _2983 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2974 << 2u)) >> 2u)).x;
                    _2984 = _2983 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2984)
                    {
                        frontier_phi_67_pred = _2971;
                        frontier_phi_67_pred_1 = _2972;
                        frontier_phi_67_pred_2 = _2973;
                        frontier_phi_67_pred_3 = _2970;
                        frontier_phi_67_pred_4 = _2969;
                        frontier_phi_67_pred_5 = _2968;
                    }
                    else
                    {
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3181 = _2968;
                        float _3182 = _2969;
                        float _3183 = _2970;
                        float _3184 = _2971;
                        float _3185 = _2972;
                        float _3186 = _2973;
                        uint _3187 = _2983;
                        uint _3188;
                        vec4 _3213;
                        float _3214;
                        vec4 _3229;
                        vec3 _3241;
                        vec4 _3256;
                        vec4 _3271;
                        float _3317;
                        bool _3318;
                        for (;;)
                        {
                            uint _3198 = ((_2974 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3187));
                            _3188 = (_3187 + 4294967295u) & _3187;
                            uint _3200 = _3198 * 40u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3214 = _3213.w;
                            uint _3216 = (_3198 * 40u) + 4u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3198 * 40u) + 8u;
                            _3241 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x));
                            uint _3243 = (_3198 * 40u) + 16u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3198 * 40u) + 20u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3273 = (_3198 * 40u) + 24u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3292 = (_3198 * 40u) + 28u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3317 = fma(_2571, _3305.z, fma(_2570, _3305.y, _3305.x * _2569)) + _3305.w;
                            _3318 = !((fma(_2571, _3286.z, fma(_2570, _3286.y, _3286.x * _2569)) + _3286.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3318)
                            {
                                float _3345 = _3213.x - _2569;
                                float _3346 = _3213.y - _2570;
                                float _3347 = _3213.z - _2571;
                                float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                                float _3351 = inversesqrt(_3348);
                                float _3352 = _3351 * _3345;
                                float _3353 = _3351 * _3346;
                                float _3354 = _3351 * _3347;
                                float _3358 = 1.0 - (_3348 / (_3214 * _3214));
                                float _4438 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3363 = sqrt(_3348) * _3229.w;
                                float _3365 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                                float _3366 = _3365 * _3365;
                                float _3369 = ((1.0 - _3366) * dot(vec3(_3352, _3353, _3354), vec3(_851, _854, _857))) + _3366;
                                float _3372 = _3363 * _3363;
                                float _3376 = (fma(_2571, _3256.z, fma(_2570, _3256.y, _3256.x * _2569)) + _3256.w) / _3317;
                                float _3377 = (fma(_2571, _3271.z, fma(_2570, _3271.y, _3271.x * _2569)) + _3271.w) / _3317;
                                float _3381 = 1.0 - dot(vec2(_3376, _3377), vec2(_3376, _3377));
                                float _4454 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3383 = _3382 * (((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3359) / ((_3372 * 0.699999988079071044921875) + 1.0));
                                float _3395 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                                float _3396 = 1.0 - _911;
                                float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                                float _3404 = _3403 * _3403;
                                float _3405 = _3404 * _3404;
                                float _3406 = _3352 - _2855;
                                float _3407 = _3353 - _2856;
                                float _3408 = _3354 - _2857;
                                float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                                float _3416 = dot(vec3(_851, _854, _857), vec3((-0.0) - _2855, (-0.0) - _2856, (-0.0) - _2857));
                                float _4465 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3420 = dot(vec3(_851, _854, _857), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                                float _4476 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                                float _3428 = _3365 * _3404;
                                float _3429 = _3428 * _3428;
                                float _3435 = ((1.0 - _3429) * dot(vec3(_851, _854, _857), vec3(_3352, _3353, _3354))) + _3429;
                                float _4487 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3437 = 1.0 - _3404;
                                float _3447 = (0.5 / (((_3436 * ((_3419 * _3437) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3404) * _3419))) * _3436;
                                float _4498 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3457 = (_3382 * _3359) * (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3427 * _3427) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3457 * _3241.x;
                                frontier_phi_73_pred_1 = _3457 * _3241.y;
                                frontier_phi_73_pred_2 = _3383 * _3229.z;
                                frontier_phi_73_pred_3 = _3383 * _3229.y;
                                frontier_phi_73_pred_4 = _3383 * _3229.x;
                                frontier_phi_73_pred_5 = _3457 * _3241.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3461 = frontier_phi_73_pred;
                            _3462 = frontier_phi_73_pred_1;
                            _3466 = frontier_phi_73_pred_2;
                            _3465 = frontier_phi_73_pred_3;
                            _3464 = frontier_phi_73_pred_4;
                            _3463 = frontier_phi_73_pred_5;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            _3173 = _3466 + _3186;
                            _3168 = _3461 + _3181;
                            _3169 = _3462 + _3182;
                            _3170 = _3463 + _3183;
                            if (_3188 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3188;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3171;
                        frontier_phi_67_pred_1 = _3172;
                        frontier_phi_67_pred_2 = _3173;
                        frontier_phi_67_pred_3 = _3170;
                        frontier_phi_67_pred_4 = _3169;
                        frontier_phi_67_pred_5 = _3168;
                    }
                    _2836 = frontier_phi_67_pred;
                    _2838 = frontier_phi_67_pred_1;
                    _2840 = frontier_phi_67_pred_2;
                    _2834 = frontier_phi_67_pred_3;
                    _2832 = frontier_phi_67_pred_4;
                    _2830 = frontier_phi_67_pred_5;
                    uint _2975 = _2974 + 1u;
                    if (_2975 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2968 = _2830;
                        _2969 = _2832;
                        _2970 = _2834;
                        _2971 = _2836;
                        _2972 = _2838;
                        _2973 = _2840;
                        _2974 = _2975;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2838;
                frontier_phi_55_56_ladder_1 = _2840;
                frontier_phi_55_56_ladder_2 = _2836;
                frontier_phi_55_56_ladder_3 = _2834;
                frontier_phi_55_56_ladder_4 = _2832;
                frontier_phi_55_56_ladder_5 = _2830;
            }
            else
            {
                frontier_phi_55_56_ladder = _2724;
                frontier_phi_55_56_ladder_1 = _2726;
                frontier_phi_55_56_ladder_2 = _2722;
                frontier_phi_55_56_ladder_3 = _2720;
                frontier_phi_55_56_ladder_4 = _2718;
                frontier_phi_55_56_ladder_5 = _2716;
            }
            _2829 = frontier_phi_55_56_ladder_5;
            _2831 = frontier_phi_55_56_ladder_4;
            _2833 = frontier_phi_55_56_ladder_3;
            _2835 = frontier_phi_55_56_ladder_2;
            _2837 = frontier_phi_55_56_ladder;
            _2839 = frontier_phi_55_56_ladder_1;
        }
        float _2844 = isnan(1.0) ? _895 : (isnan(_895) ? 1.0 : min(_895, 1.0));
        _2628 = (_2844 * _2835) + _2080;
        _2630 = (_2844 * _2837) + _2082;
        _2632 = (_2844 * _2839) + _2084;
        _2634 = ((_2829 * 0.039999999105930328369140625) * _2844) + _2413;
        _2636 = ((_2831 * 0.039999999105930328369140625) * _2844) + _2415;
        _2638 = ((_2833 * 0.039999999105930328369140625) * _2844) + _2417;
    }
    else
    {
        _2628 = _2080;
        _2630 = _2082;
        _2632 = _2084;
        _2634 = _2413;
        _2636 = _2415;
        _2638 = _2417;
    }
    float _4514 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4525 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4536 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    uint _2658 = _238 + 6u;
    float _2666 = _832 / cbSceneParam._m0[86u].x;
    float _2667 = _833 / cbSceneParam._m0[86u].y;
    vec4 _2681 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, (log2((isnan(cbSceneParam._m0[77u].w) ? _766 : (isnan(_766) ? cbSceneParam._m0[77u].w : min(_766, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2683 = _2681.x;
    float _2684 = _2681.y;
    float _2685 = _2681.z;
    float _2686 = _2681.w;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_766 > cbSceneParam._m0[78u].w)
    {
        float _2741 = isnan(_766) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _766 : min(cbSceneParam._m0[80u].w, _766));
        float _2742 = _2741 / _766;
        float _2753 = _2742 * _817;
        float _2754 = _818 * _2742;
        float _2755 = (-0.0) - _2754;
        float _2757 = _2742 * _819;
        float _2759 = (cbSceneParam._m0[77u].w * _2755) / _2741;
        float _2760 = _2759 + cbSceneParam._m0[79u].w;
        float _2761 = cbSceneParam._m0[79u].w - _2754;
        float _2767 = sqrt(((_2753 * _2753) + (_2754 * _2754)) + (_2757 * _2757));
        float _2770 = (1.0 - (cbSceneParam._m0[77u].w / _2741)) * _2767;
        float _2775 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2777 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2930;
        if (abs((_2755 - _2759) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2930 = ((((_2760 > 0.0) ? exp2(_2775 * _2760) : (2.0 - exp2(_2777 * _2760))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2770;
        }
        else
        {
            float _2890 = 1.0 / cbSceneParam._m0[80u].x;
            float _2891 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : max(_2760, _2761));
            float _2892 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : min(_2760, _2761));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            float _2902 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : min(_2892, 0.0));
            _2930 = ((abs(_2767 / _2755) * cbSceneParam._m0[80u].y) * ((((_2901 - _2902) * 2.0) - ((exp2(_2775 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0)))) - exp2(_2775 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))))) * _2890)) - ((exp2(_2777 * _2901) - exp2(_2777 * _2902)) * _2890))) + (_2770 * cbSceneParam._m0[80u].z);
        }
        vec4 _2932 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, 1.0), 0.0);
        float _2941 = exp2((_2930 * (-1.44269502162933349609375)) * (1.0 - _2932.w));
        float _2942 = log2(_2941);
        float _2958 = log2(_2686);
        _2779 = (exp2(_2958 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].x)) * _2932.x) / cbSceneParam._m0[78u].x)) + _2683;
        _2781 = (exp2(_2958 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].y)) * _2932.y) / cbSceneParam._m0[78u].y)) + _2684;
        _2783 = (exp2(_2958 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].z)) * _2932.z) / cbSceneParam._m0[78u].z)) + _2685;
        _2785 = _2941 * _2686;
    }
    else
    {
        _2779 = _2683;
        _2781 = _2684;
        _2783 = _2685;
        _2785 = _2686;
    }
    float _2797 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2798 = _2797 == 3.0;
    float _2799 = log2(_2785);
    float _2806 = exp2(_2799 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2628 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _895))) + ((_2634 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1699)) * cbPerFrame._m0[3u].x));
    float _2807 = exp2(_2799 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2630 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _895))) + ((_2636 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1699)) * cbPerFrame._m0[3u].x));
    float _2808 = exp2(_2799 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2632 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _895))) + ((_2638 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1699)) * cbPerFrame._m0[3u].x));
    float _2817 = (_2797 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2817 * (_2798 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2779)));
    SV_Target.y = _2817 * (_2798 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2781)));
    SV_Target.z = _2817 * (_2798 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2783)));
    SV_Target.w = cbInstanceData._m0[_2658].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2658].w;
}


