#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1389;
float _4031;
float _4032;
float _4033;
float _4034;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4043 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4054 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4065 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[24u].z) + _454) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4076 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _479 = (_472 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _480 = (_472 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _481 = (_472 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _520 = _518.x;
    float _530 = dot(vec4(_520, _518.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _544 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_520 - _530) * cbMtdParam._m0[24u].z) + _530) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4087 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _555 = (_334.x * cbMtdParam._m0[9u].x) * ((_545 * ((_498.x * cbMtdParam._m0[13u].x) - _479)) + _479);
    float _556 = (_334.y * cbMtdParam._m0[9u].y) * ((_545 * ((_498.y * cbMtdParam._m0[13u].y) - _480)) + _480);
    float _557 = (_334.z * cbMtdParam._m0[9u].z) * ((_545 * ((_498.z * cbMtdParam._m0[13u].z) - _481)) + _481);
    float _561 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _555;
    float _564 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _556;
    float _567 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _557;
    float _575 = (((_555 - _561) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) + _561) * 4.55000019073486328125;
    float _577 = (((_556 - _564) * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) + _564) * 4.55000019073486328125;
    float _579 = (((_557 - _567) * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) + _567) * 4.55000019073486328125;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _638 = _636.x;
    float _639 = _636.y;
    float _640 = _636.z;
    float _647 = ((_619.x - _638) * _472) + _638;
    float _648 = ((_619.y - _639) * _472) + _639;
    float _649 = ((_619.z - _640) * _472) + _640;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _674 = ((_661.z - _649) * _545) + _649;
    float _677 = ((((_661.x - _647) * _545) + _647) * 2.0) + (-1.0);
    float _678 = ((((_661.y - _648) * _545) + _648) * 2.0) + (-1.0);
    float _679 = dot(vec2(_677, _678), vec2(_677, _678));
    float _4098 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _684 = sqrt(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _725 = _723.x;
    float _726 = 1.0 - _725;
    float _739 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_725 - _726) * cbMtdParam._m0[24u].w) + _726) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4109 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _740 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _747 = (_740 * (cbMtdParam._m0[17u].x - _575)) + _575;
    float _748 = (_740 * (cbMtdParam._m0[17u].y - _577)) + _577;
    float _749 = (_740 * (cbMtdParam._m0[17u].z - _579)) + _579;
    float _754 = (((_596.z - _674) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _674;
    float _758 = ((_698.z - _754) * cbMtdParam._m0[19u].w) + _754;
    vec4 _771 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _778 = (_771.x * 2.0) + (-1.0);
    float _779 = (_771.y * 2.0) + (-1.0);
    float _780 = dot(vec2(_778, _779), vec2(_778, _779));
    float _4120 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _788 = (_740 * (_771.z - _758)) + _758;
    float _797 = (_677 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_596.x * 2.0) + (-1.0)))) + (((_698.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _798 = (_678 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_596.y * 2.0) + (-1.0)))) + (((_698.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _810 = (((_778 - _797) + (cbMtdParam._m0[21u].x * _797)) * _740) + _797;
    float _811 = (((_779 - _798) + (cbMtdParam._m0[21u].x * _798)) * _740) + _798;
    float _812 = (_740 * (sqrt(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) - _684)) + _684;
    float _814 = cbMtdParam._m0[22u].x + _698.w;
    float _817 = fma(_812, _244 * NORMAL.x, fma(_811, _251 * TANGENT.x, (_237 * _229) * _810));
    float _820 = fma(_812, _244 * NORMAL.y, fma(_811, _251 * TANGENT.y, (_237 * _230) * _810));
    float _823 = fma(_812, _244 * NORMAL.z, fma(_811, _251 * TANGENT.z, (_237 * _231) * _810));
    float _827 = inversesqrt(dot(vec3(_817, _820, _823), vec3(_817, _820, _823)));
    float _828 = _827 * _817;
    float _829 = _827 * _820;
    float _830 = _827 * _823;
    float _4131 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _831 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4153 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4164 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4175 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _849 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _900 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _890);
    float _901 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _890);
    float _902 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _890);
    float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
    float _907 = _900 * _906;
    float _908 = _901 * _906;
    float _909 = _902 * _906;
    vec4 _914 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _916 = _914.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1070 = sqrt(((_900 * _900) + (_901 * _901)) + (_902 * _902));
        float _1076 = (cbMatDynParam._m0[5u].x * _1070) + cbMatDynParam._m0[5u].y;
        float _4186 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1081 = (cbMatDynParam._m0[5u].z * _1070) + cbMatDynParam._m0[5u].w;
        float _4197 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) - _1077)) + _1077) < ((_916 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _927 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _928 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _946 = fma(_830, cbSceneParam._m0[5u].z, fma(_829, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _828));
    float _949 = fma(_830, cbSceneParam._m0[6u].z, fma(_829, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _828));
    float _952 = fma(_830, cbSceneParam._m0[7u].z, fma(_829, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _828));
    uint _965 = _278 + 9u;
    uint _966 = _965 + uint(cbMatDynParam._m0[0u].w);
    float _972 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * cbInstanceData._m0[_966].x;
    float _973 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * cbInstanceData._m0[_966].y;
    float _974 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * cbInstanceData._m0[_966].z;
    float _4208 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _4230 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    vec4 _986 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _927, cbSceneParam._m0[86u].y * _928));
    float _990 = ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * TEXCOORD_5.w) * _986.x;
    float _991 = dot(vec3(_828, _829, _830), vec3(_907, _908, _909));
    float _994 = _991 * 2.0;
    float _998 = (_994 * _828) - _907;
    float _999 = (_994 * _829) - _908;
    float _1000 = (_994 * _830) - _909;
    float _1004 = abs(dot(vec3(_907, _908, _909), vec3(_828, _829, _830)));
    float _4241 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1006 = sqrt(_831);
    float _1019 = exp2((_1006 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1006 * 3.0));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1388;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1113 = fma(_1059, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051));
        float _1117 = fma(_1059, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051));
        float _1121 = fma(_1059, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051));
        float _1146 = _1051 + _828;
        float _1147 = _1055 + _829;
        float _1148 = _1059 + _830;
        float _1158 = fma(_1148, cbModelParam._m0[26u].z, fma(_1147, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146)) - _1113;
        float _1159 = fma(_1148, cbModelParam._m0[27u].z, fma(_1147, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146)) - _1117;
        float _1160 = fma(_1148, cbModelParam._m0[28u].z, fma(_1147, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146)) - _1121;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1113 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1117 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[34u].z) + ((((((_1121 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1216 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1182.x + (-0.5));
        float _1218 = _1216 * (_1182.y + (-0.5));
        float _1219 = _1216 * (_1182.z + (-0.5));
        float _1226 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1189.x + (-0.5));
        float _1228 = _1226 * (_1189.y + (-0.5));
        float _1229 = _1226 * (_1189.z + (-0.5));
        float _1236 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1196.x + (-0.5));
        float _1238 = _1236 * (_1196.y + (-0.5));
        float _1239 = _1236 * (_1196.z + (-0.5));
        float _1246 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1203.x + (-0.5));
        float _1248 = _1246 * (_1203.y + (-0.5));
        float _1249 = _1246 * (_1203.z + (-0.5));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = _1217 * 0.5;
        float _1254 = _1227 * 0.5;
        float _1255 = _1237 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1270 = (dot(vec3(_828, _829, _830), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1280 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1282 + 1.0))) + _1287) * _1250;
        float _1297 = _1218 * 0.5;
        float _1298 = _1228 * 0.5;
        float _1299 = _1238 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_828, _829, _830), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4322 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1324 + 1.0))) + _1329) * _1251;
        float _1339 = _1219 * 0.5;
        float _1340 = _1229 * 0.5;
        float _1341 = _1239 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_828, _829, _830), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4355 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1366 + 1.0))) + _1371) * _1252;
        _1388 = _1219;
        _1390 = _1218;
        _1391 = _1217;
        _1392 = _1229;
        _1393 = _1228;
        _1394 = _1227;
        _1395 = _1239;
        _1396 = _1238;
        _1397 = _1237;
        _1398 = _1252;
        _1399 = _1251;
        _1400 = _1250;
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1389;
        _1390 = _1389;
        _1391 = _1389;
        _1392 = _1389;
        _1393 = _1389;
        _1394 = _1389;
        _1395 = _1389;
        _1396 = _1389;
        _1397 = _1389;
        _1398 = _1389;
        _1399 = _1389;
        _1400 = _1389;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1430 = fma(_1059, cbModelParam._m0[30u].z, fma(_1055, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051));
        float _1434 = fma(_1059, cbModelParam._m0[31u].z, fma(_1055, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051));
        float _1438 = fma(_1059, cbModelParam._m0[32u].z, fma(_1055, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051));
        float _1461 = _1051 + _828;
        float _1462 = _1055 + _829;
        float _1463 = _1059 + _830;
        float _1473 = fma(_1463, cbModelParam._m0[30u].z, fma(_1462, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1461)) - _1430;
        float _1474 = fma(_1463, cbModelParam._m0[31u].z, fma(_1462, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1461)) - _1434;
        float _1475 = fma(_1463, cbModelParam._m0[32u].z, fma(_1462, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1461)) - _1438;
        float _1479 = inversesqrt(dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475)));
        float _1492 = ((_1479 * _1473) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1430 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1479 * _1474) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1434 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1479 * _1475) / cbModelParam._m0[35u].z) + ((((((_1438 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        float _1529 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1496.x + (-0.5));
        float _1531 = _1529 * (_1496.y + (-0.5));
        float _1532 = _1529 * (_1496.z + (-0.5));
        float _1539 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1503.x + (-0.5));
        float _1541 = _1539 * (_1503.y + (-0.5));
        float _1542 = _1539 * (_1503.z + (-0.5));
        float _1549 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1510.x + (-0.5));
        float _1551 = _1549 * (_1510.y + (-0.5));
        float _1552 = _1549 * (_1510.z + (-0.5));
        float _1559 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1517.x + (-0.5));
        float _1561 = _1559 * (_1517.y + (-0.5));
        float _1562 = _1559 * (_1517.z + (-0.5));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = _1530 * 0.5;
        float _1567 = _1540 * 0.5;
        float _1568 = _1550 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_828, _829, _830), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4418 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1593 + 1.0))) + _1598) * _1563;
        float _1608 = _1531 * 0.5;
        float _1609 = _1541 * 0.5;
        float _1610 = _1551 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_828, _829, _830), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4451 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1635 + 1.0))) + _1640) * _1564;
        float _1650 = _1532 * 0.5;
        float _1651 = _1542 * 0.5;
        float _1652 = _1552 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_828, _829, _830), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4484 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1677 + 1.0))) + _1682) * _1565;
        _1699 = _1532;
        _1700 = _1531;
        _1701 = _1530;
        _1702 = _1542;
        _1703 = _1541;
        _1704 = _1540;
        _1705 = _1552;
        _1706 = _1551;
        _1707 = _1550;
        _1708 = _1565;
        _1709 = _1564;
        _1710 = _1563;
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
    }
    else
    {
        _1699 = _1389;
        _1700 = _1389;
        _1701 = _1389;
        _1702 = _1389;
        _1703 = _1389;
        _1704 = _1389;
        _1705 = _1389;
        _1706 = _1389;
        _1707 = _1389;
        _1708 = _1389;
        _1709 = _1389;
        _1710 = _1389;
        _1711 = 0.0;
        _1712 = 0.0;
        _1713 = 0.0;
    }
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1401)) + _1401;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1402)) + _1402;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1403)) + _1403;
    float _1746 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1723));
    float _1767 = _998 * 0.5;
    float _1768 = _999 * 0.5;
    float _1769 = _1000 * 0.5;
    float _1770 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1773 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1776 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1810;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1783 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1388, _1392, _1395, _1398));
        float _1787 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1390, _1393, _1396, _1399));
        float _1791 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1391, _1394, _1397, _1400));
        float _1798 = dot(vec4(cbModelParam._m0[39u]), vec4(_1767, _1768, _1769, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1821;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1812 = dot(vec4(cbModelParam._m0[40u]), vec4(_1767, _1768, _1769, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1825 = (_1821 * cbModelParam._m0[1u].x) + (_1810 * (1.0 - cbModelParam._m0[1u].x));
    float _1835 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _831);
    float _1836 = isnan(_1835) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1835 : min(cbModelParam._m0[25u].z, _1835));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1884 = fma(_1059, cbModelParam._m0[13u].z, fma(_1055, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1051)) + cbModelParam._m0[13u].w;
        float _1888 = fma(_1059, cbModelParam._m0[14u].z, fma(_1055, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1051)) + cbModelParam._m0[14u].w;
        float _1892 = fma(_1059, cbModelParam._m0[15u].z, fma(_1055, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1051)) + cbModelParam._m0[15u].w;
        float _1895 = fma(_1000, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998));
        float _1898 = fma(_1000, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998));
        float _1901 = fma(_1000, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998));
        float _1929;
        if (_1895 > 0.0)
        {
            _1929 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1929 = frontier_phi_17_15_ladder;
        }
        float _2099;
        if (_1898 > 0.0)
        {
            _2099 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2099 = frontier_phi_26_22_ladder;
        }
        float _2394;
        if (_1901 > 0.0)
        {
            _2394 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2394 = frontier_phi_38_33_ladder;
        }
        float _2396 = isnan(_2099) ? _1929 : (isnan(_1929) ? _2099 : min(_1929, _2099));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1895) + _1884;
        float _2402 = (_2397 * _1898) + _1888;
        float _2403 = (_2397 * _1901) + _1892;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2406 = (-1.0) - _2404;
        float _2408 = _2404 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2403 > _2408) || ((_2403 < _2406) || ((_2402 > _2408) || ((_2402 < _2406) || ((_2401 < _2406) || (_2401 > _2408))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2403, cbModelParam._m0[9u].z, fma(_2402, cbModelParam._m0[9u].y, _2401 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2403, cbModelParam._m0[10u].z, fma(_2402, cbModelParam._m0[10u].y, _2401 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2403, cbModelParam._m0[11u].z, fma(_2402, cbModelParam._m0[11u].y, _2401 * cbModelParam._m0[11u].x))), _1836);
            frontier_phi_16_38_ladder = _2548.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2548.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2548.x * cbModelParam._m0[1u].y;
        }
        _1917 = frontier_phi_16_38_ladder_2;
        _1919 = frontier_phi_16_38_ladder_1;
        _1921 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_998, _999, _1000), _1836);
        _1917 = _1905.x * cbModelParam._m0[1u].y;
        _1919 = _1905.y * cbModelParam._m0[1u].y;
        _1921 = _1905.z * cbModelParam._m0[1u].y;
    }
    float _1925 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _831);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1925 : min(cbModelParam._m0[25u].w, _1925));
    float _2016;
    float _2018;
    float _2020;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1980 = fma(_1059, cbModelParam._m0[21u].z, fma(_1055, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1051)) + cbModelParam._m0[21u].w;
        float _1984 = fma(_1059, cbModelParam._m0[22u].z, fma(_1055, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1051)) + cbModelParam._m0[22u].w;
        float _1988 = fma(_1059, cbModelParam._m0[23u].z, fma(_1055, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1051)) + cbModelParam._m0[23u].w;
        float _1991 = fma(_1000, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998));
        float _1994 = fma(_1000, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998));
        float _1997 = fma(_1000, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998));
        float _2104;
        if (_1991 > 0.0)
        {
            _2104 = abs((1.0 - _1980) / _1991);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1980 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2104 = frontier_phi_28_24_ladder;
        }
        float _2421;
        if (_1994 > 0.0)
        {
            _2421 = abs((1.0 - _1984) / _1994);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1984 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2421 = frontier_phi_40_35_ladder;
        }
        float _2748;
        if (_1997 > 0.0)
        {
            _2748 = abs((1.0 - _1988) / _1997);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1988 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2748 = frontier_phi_50_47_ladder;
        }
        float _2750 = isnan(_2421) ? _2104 : (isnan(_2104) ? _2421 : min(_2104, _2421));
        float _2751 = isnan(_2748) ? _2750 : (isnan(_2750) ? _2748 : min(_2750, _2748));
        float _2755 = (_2751 * _1991) + _1980;
        float _2756 = (_2751 * _1994) + _1984;
        float _2757 = (_2751 * _1997) + _1988;
        float _2758 = _2751 * 9.9999997473787516355514526367188e-05;
        float _2759 = (-1.0) - _2758;
        float _2761 = _2758 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2757 > _2761) || ((_2757 < _2759) || ((_2756 > _2761) || ((_2756 < _2759) || ((_2755 < _2759) || (_2755 > _2761))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2757, cbModelParam._m0[17u].z, fma(_2756, cbModelParam._m0[17u].y, _2755 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2757, cbModelParam._m0[18u].z, fma(_2756, cbModelParam._m0[18u].y, _2755 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2757, cbModelParam._m0[19u].z, fma(_2756, cbModelParam._m0[19u].y, _2755 * cbModelParam._m0[19u].x))), _1926);
            frontier_phi_25_50_ladder = _2875.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2875.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2875.x * cbModelParam._m0[1u].z;
        }
        _2016 = frontier_phi_25_50_ladder_2;
        _2018 = frontier_phi_25_50_ladder_1;
        _2020 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_998, _999, _1000), _1926);
        _2016 = _2000.x * cbModelParam._m0[1u].z;
        _2018 = _2000.y * cbModelParam._m0[1u].z;
        _2020 = _2000.z * cbModelParam._m0[1u].z;
    }
    float _2032 = ((((1.0 - _1019) * ((_1006 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1019 * _1006)) * _990;
    float _2033 = _2032 * ((cbModelParam._m0[1u].w * (_2016 - _1917)) + _1917);
    float _2034 = _2032 * ((cbModelParam._m0[1u].w * (_2018 - _1919)) + _1919);
    float _2035 = _2032 * ((cbModelParam._m0[1u].w * (_2020 - _1921)) + _1921);
    float _2038 = fma(_2035, cbSceneParam._m0[89u].z, fma(_2034, cbSceneParam._m0[89u].y, _2033 * cbSceneParam._m0[89u].x));
    float _2041 = fma(_2035, cbSceneParam._m0[90u].z, fma(_2034, cbSceneParam._m0[90u].y, _2033 * cbSceneParam._m0[90u].x));
    float _2044 = fma(_2035, cbSceneParam._m0[91u].z, fma(_2034, cbSceneParam._m0[91u].y, _2033 * cbSceneParam._m0[91u].x));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2086 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2090 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2091 = _2078 / _2090;
    float _2092 = _2082 / _2090;
    float _2093 = _2086 / _2090;
    float _2240;
    float _2241;
    float _2242;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2120 = ((uint(_2093 > cbSceneParam._m0[59u].y) + uint(_2093 > cbSceneParam._m0[59u].x)) + uint(_2093 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2121 = _2120 + 43u;
        uint _2129 = _2120 + 44u;
        uint _2137 = _2120 + 45u;
        uint _2145 = _2120 + 46u;
        float _2156 = fma(_2090, cbSceneParam._m0[_2121].w, fma(_2086, cbSceneParam._m0[_2121].z, fma(_2082, cbSceneParam._m0[_2121].y, _2078 * cbSceneParam._m0[_2121].x)));
        float _2160 = fma(_2090, cbSceneParam._m0[_2129].w, fma(_2086, cbSceneParam._m0[_2129].z, fma(_2082, cbSceneParam._m0[_2129].y, _2078 * cbSceneParam._m0[_2129].x)));
        float _2168 = fma(_2090, cbSceneParam._m0[_2145].w, fma(_2086, cbSceneParam._m0[_2145].z, fma(_2082, cbSceneParam._m0[_2145].y, _2078 * cbSceneParam._m0[_2145].x)));
        float _2173 = cbSceneParam._m0[33u].z * _2168;
        float _2175 = cbSceneParam._m0[33u].w * _2168;
        float _2178 = fma(_2090, cbSceneParam._m0[_2137].w, fma(_2086, cbSceneParam._m0[_2137].z, fma(_2082, cbSceneParam._m0[_2137].y, _2078 * cbSceneParam._m0[_2137].x))) / _2168;
        float _2226 = (cbSceneParam._m0[33u].x - sqrt(((_2092 * _2092) + (_2091 * _2091)) + (_2093 * _2093))) * cbSceneParam._m0[33u].y;
        float _4610 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2233 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 + _2156) / _2168, (_2175 + _2160) / _2168), _2178), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2175 + _2156) / _2168, (_2160 - _2173) / _2168), _2178), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2156 - _2173) / _2168, (_2160 - _2175) / _2168), _2178), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2156 - _2175) / _2168, (_2173 + _2160) / _2168), _2178), 0.0)).x), vec4(0.25)));
        _2240 = 1.0 - (_2233 * cbSceneParam._m0[34u].x);
        _2241 = 1.0 - (_2233 * cbSceneParam._m0[34u].y);
        _2242 = 1.0 - (_2233 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2240 = 1.0;
        _2241 = 1.0;
        _2242 = 1.0;
    }
    float _2306;
    float _2308;
    float _2310;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2294 = fma(_2090, cbSceneParam._m0[63u].w, fma(_2086, cbSceneParam._m0[63u].z, fma(_2082, cbSceneParam._m0[63u].y, _2078 * cbSceneParam._m0[63u].x)));
        float _2295 = fma(_2090, cbSceneParam._m0[60u].w, fma(_2086, cbSceneParam._m0[60u].z, fma(_2082, cbSceneParam._m0[60u].y, _2078 * cbSceneParam._m0[60u].x))) / _2294;
        float _2296 = fma(_2090, cbSceneParam._m0[61u].w, fma(_2086, cbSceneParam._m0[61u].z, fma(_2082, cbSceneParam._m0[61u].y, _2078 * cbSceneParam._m0[61u].x))) / _2294;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2295 >= cbSceneParam._m0[64u].x) && (_2296 >= cbSceneParam._m0[64u].y)) && (_2295 <= cbSceneParam._m0[64u].z)) && (_2296 <= cbSceneParam._m0[64u].w))
        {
            float _2434 = fma(_2090, cbSceneParam._m0[62u].w, fma(_2086, cbSceneParam._m0[62u].z, fma(_2082, cbSceneParam._m0[62u].y, _2078 * cbSceneParam._m0[62u].x))) / _2294;
            float _2438 = isnan(cbSceneParam._m0[41u].w) ? _2434 : (isnan(_2434) ? cbSceneParam._m0[41u].w : max(_2434, cbSceneParam._m0[41u].w));
            float _2481 = (cbSceneParam._m0[33u].x - sqrt(((_2092 * _2092) + (_2091 * _2091)) + (_2093 * _2093))) * cbSceneParam._m0[33u].y;
            float _4626 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
            float _2488 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2295, cbSceneParam._m0[33u].w + _2296), _2438), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2295, _2296 - cbSceneParam._m0[33u].z), _2438), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2295 - cbSceneParam._m0[33u].z, _2296 - cbSceneParam._m0[33u].w), _2438), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2295 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2296), _2438), 0.0)).x), vec4(0.25)));
            float _2492 = 1.0 - (_2488 * cbSceneParam._m0[34u].x);
            float _2493 = 1.0 - (_2488 * cbSceneParam._m0[34u].y);
            float _2494 = 1.0 - (_2488 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2494) ? _2242 : (isnan(_2242) ? _2494 : min(_2242, _2494));
            frontier_phi_37_36_ladder_1 = isnan(_2493) ? _2241 : (isnan(_2241) ? _2493 : min(_2241, _2493));
            frontier_phi_37_36_ladder_2 = isnan(_2492) ? _2240 : (isnan(_2240) ? _2492 : min(_2240, _2492));
        }
        else
        {
            frontier_phi_37_36_ladder = _2242;
            frontier_phi_37_36_ladder_1 = _2241;
            frontier_phi_37_36_ladder_2 = _2240;
        }
        _2306 = frontier_phi_37_36_ladder_2;
        _2308 = frontier_phi_37_36_ladder_1;
        _2310 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2306 = _2240;
        _2308 = _2241;
        _2310 = _2242;
    }
    uvec4 _2315 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2317 = _2315.x * 14u;
    uint _2318 = _2317 + 13u;
    float _2325 = _990 + (-1.0);
    float _2330 = (cbLight._m0[_2318].x * _2325) + 1.0;
    float _2331 = (cbLight._m0[_2318].y * _2325) + 1.0;
    float _2332 = (cbLight._m0[_2318].z * _2325) + 1.0;
    float _2333 = (cbLight._m0[_2318].w * _2325) + 1.0;
    uint _2334 = _2317 + 5u;
    float _2340 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
    uint _2344 = _2317 + 4u;
    float _2353 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
    uint _2357 = _2317 | 1u;
    float _2368 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_828, _829, _830));
    float _2371 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_828, _829, _830));
    float _4662 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _4673 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2376 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * 0.3183098733425140380859375;
    float _2378 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * 0.3183098733425140380859375;
    float _2385 = ((cbLight._m0[_2334].x * _2340) * _2378) + (((cbLight._m0[_2344].x * _2306) * _2353) * _2376);
    float _2386 = ((_2340 * cbLight._m0[_2334].y) * _2378) + (((cbLight._m0[_2344].y * _2308) * _2353) * _2376);
    float _2387 = ((_2340 * cbLight._m0[_2334].z) * _2378) + (((cbLight._m0[_2344].z * _2310) * _2353) * _2376);
    uvec4 _2391 = floatBitsToUint(cbLight._m0[_2317 + 12u]);
    bool _2393 = _2391.x == 0u;
    float _2495;
    float _2497;
    float _2499;
    if (_2393)
    {
        _2495 = _2385;
        _2497 = _2386;
        _2499 = _2387;
    }
    else
    {
        uint _2503 = _2317 + 6u;
        float _2519 = (dot(vec3(cbLight._m0[_2317 + 2u].xyz), vec3(_828, _829, _830)) * 0.5) + 0.5;
        float _2520 = _2519 * _2519;
        float _4684 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2521 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2522 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        _2495 = (((cbLight._m0[_2503].x * 0.3183098733425140380859375) * _2521) * _2522) + _2385;
        _2497 = (((cbLight._m0[_2503].y * 0.3183098733425140380859375) * _2521) * _2522) + _2386;
        _2499 = (((cbLight._m0[_2503].z * 0.3183098733425140380859375) * _2521) * _2522) + _2387;
    }
    bool _2502 = _2391.y == 0u;
    float _2557;
    float _2559;
    float _2561;
    if (_2502)
    {
        _2557 = _2495;
        _2559 = _2497;
        _2561 = _2499;
    }
    else
    {
        uint _2719 = _2317 + 7u;
        float _2735 = (dot(vec3(cbLight._m0[_2317 + 3u].xyz), vec3(_828, _829, _830)) * 0.5) + 0.5;
        float _2736 = _2735 * _2735;
        float _4700 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2737 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2738 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2557 = (((cbLight._m0[_2719].x * 0.3183098733425140380859375) * _2737) * _2738) + _2495;
        _2559 = (((cbLight._m0[_2719].y * 0.3183098733425140380859375) * _2737) * _2738) + _2497;
        _2561 = (((cbLight._m0[_2719].z * 0.3183098733425140380859375) * _2737) * _2738) + _2499;
    }
    uint _2564 = _2317 + 8u;
    float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _831) * 0.949999988079071044921875);
    float _2578 = _2577 * _2577;
    float _2579 = cbLight._m0[_2317].x + _907;
    float _2580 = cbLight._m0[_2317].y + _908;
    float _2581 = cbLight._m0[_2317].z + _909;
    float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
    float _2586 = _2585 * _2579;
    float _2587 = _2585 * _2580;
    float _2588 = _2585 * _2581;
    float _2589 = dot(vec3(_828, _829, _830), vec3(cbLight._m0[_2317].xyz));
    float _4716 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _4727 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2593 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _2594 = dot(vec3(_828, _829, _830), vec3(_2586, _2587, _2588));
    float _4738 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2597 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
    float _2598 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2586, _2587, _2588));
    float _4749 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2602 = _2578 * _2578;
    float _2606 = ((_2597 * _2597) * (_2602 + (-1.0))) + 1.0;
    float _2617 = (exp2(log2(1.0 - (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2618 = 1.0 - _2578;
    float _2629 = (0.5 / (((_2593 * ((_2592 * _2618) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2593 * _2618) + _2578) * _2592))) * _2592;
    float _4760 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2631 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2602 / ((_2606 * _2606) * 3.141590118408203125));
    uint _2645 = _2317 + 9u;
    float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _831) * 0.949999988079071044921875);
    float _2657 = _2656 * _2656;
    float _2658 = cbLight._m0[_2357].x + _907;
    float _2659 = cbLight._m0[_2357].y + _908;
    float _2660 = cbLight._m0[_2357].z + _909;
    float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
    float _2665 = _2664 * _2658;
    float _2666 = _2664 * _2659;
    float _2667 = _2664 * _2660;
    float _2668 = dot(vec3(_828, _829, _830), vec3(cbLight._m0[_2357].xyz));
    float _4771 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2672 = dot(vec3(_828, _829, _830), vec3(_2665, _2666, _2667));
    float _4782 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
    float _2676 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2665, _2666, _2667));
    float _4793 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2680 = _2657 * _2657;
    float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
    float _2693 = (exp2(log2(1.0 - (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2694 = 1.0 - _2657;
    float _2704 = (0.5 / (((_2593 * ((_2671 * _2694) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2593 * _2694) + _2657) * _2671))) * _2671;
    float _4804 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2706 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
    float _2716 = (((_2693 * cbLight._m0[_2645].x) * _2706) * _2340) + ((((cbLight._m0[_2564].x * _2306) * _2617) * _2631) * _2353);
    float _2717 = (((_2693 * cbLight._m0[_2645].y) * _2706) * _2340) + ((((cbLight._m0[_2564].y * _2308) * _2617) * _2631) * _2353);
    float _2718 = (((_2693 * cbLight._m0[_2645].z) * _2706) * _2340) + ((((cbLight._m0[_2564].z * _2310) * _2617) * _2631) * _2353);
    float _2774;
    float _2776;
    float _2778;
    if (_2393)
    {
        _2774 = _2716;
        _2776 = _2717;
        _2778 = _2718;
    }
    else
    {
        uint _2780 = _2317 + 2u;
        uint _2784 = _2317 + 10u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _831) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _907;
        float _2801 = cbLight._m0[_2780].y + _908;
        float _2802 = cbLight._m0[_2780].z + _909;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_828, _829, _830), vec3(cbLight._m0[_2780].xyz));
        float _4815 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2814 = dot(vec3(_828, _829, _830), vec3(_2807, _2808, _2809));
        float _4826 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4837 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2835 = (exp2(log2(1.0 - (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2836 = 1.0 - _2799;
        float _2846 = (0.5 / (((_2593 * ((_2813 * _2836) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2593 * _2836) + _2799) * _2813))) * _2813;
        float _4848 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2848 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2849 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        _2774 = (((_2835 * cbLight._m0[_2784].x) * _2848) * _2849) + _2716;
        _2776 = (((_2835 * cbLight._m0[_2784].y) * _2848) * _2849) + _2717;
        _2778 = (((_2835 * cbLight._m0[_2784].z) * _2848) * _2849) + _2718;
    }
    float _2880;
    float _2882;
    float _2884;
    if (_2502)
    {
        _2880 = _2774;
        _2882 = _2776;
        _2884 = _2778;
    }
    else
    {
        uint _2891 = _2317 + 3u;
        uint _2895 = _2317 + 11u;
        float _2909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2891].w)) * _831) * 0.949999988079071044921875);
        float _2910 = _2909 * _2909;
        float _2911 = cbLight._m0[_2891].x + _907;
        float _2912 = cbLight._m0[_2891].y + _908;
        float _2913 = cbLight._m0[_2891].z + _909;
        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
        float _2918 = _2917 * _2911;
        float _2919 = _2917 * _2912;
        float _2920 = _2917 * _2913;
        float _2921 = dot(vec3(_828, _829, _830), vec3(cbLight._m0[_2891].xyz));
        float _4864 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2925 = dot(vec3(_828, _829, _830), vec3(_2918, _2919, _2920));
        float _4875 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2929 = dot(vec3(cbLight._m0[_2891].xyz), vec3(_2918, _2919, _2920));
        float _4886 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2933 = _2910 * _2910;
        float _2937 = ((_2928 * _2928) * (_2933 + (-1.0))) + 1.0;
        float _2946 = (exp2(log2(1.0 - (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2947 = 1.0 - _2910;
        float _2957 = (0.5 / (((_2593 * ((_2924 * _2947) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2593 * _2947) + _2910) * _2924))) * _2924;
        float _4897 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2959 = (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2933 / ((_2937 * _2937) * 3.141590118408203125));
        float _2960 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2880 = (((_2946 * cbLight._m0[_2895].x) * _2959) * _2960) + _2774;
        _2882 = (((_2946 * cbLight._m0[_2895].y) * _2959) * _2960) + _2776;
        _2884 = (((_2946 * cbLight._m0[_2895].z) * _2959) * _2960) + _2778;
    }
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    if (_2315.y == 0u)
    {
        uvec4 _2981 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2982 = _2981.x;
        uint _2993 = uint((float(_2981.y) * floor(float(uint(cbSceneParam._m0[85u].y * _928) / _2982))) + floor(float(uint(cbSceneParam._m0[85u].x * _927) / _2982)));
        float _3003 = (log2(_2093 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3004 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        uint _3007 = uint(isnan(14.0) ? _3004 : (isnan(_3004) ? 14.0 : min(_3004, 14.0)));
        uvec4 _3012 = texelFetch(g_lightClusterGridBuffer, int(((_3007 << 2u) + (_2993 << 6u)) >> 2u));
        uint _3013 = _3012.x;
        uint _3014 = _2981.z;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        if (((((1u << ((_3014 >> 4u) & 15u)) + 4294967295u) & _3013) == 0u) || ((_3014 & 240u) == 0u))
        {
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
        }
        else
        {
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3104;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            uint _3252 = 0u;
            uint _3261;
            bool _3262;
            for (;;)
            {
                _3261 = texelFetch(g_lightClassification, int((((_3007 << 5u) + (_2993 << 9u)) + (_3252 << 2u)) >> 2u)).x;
                _3262 = _3261 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3262)
                {
                    frontier_phi_71_pred = _3251;
                    frontier_phi_71_pred_1 = _3250;
                    frontier_phi_71_pred_2 = _3249;
                    frontier_phi_71_pred_3 = _3248;
                    frontier_phi_71_pred_4 = _3247;
                    frontier_phi_71_pred_5 = _3246;
                }
                else
                {
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    uint _3397;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3251;
                    _3397 = _3261;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    for (;;)
                    {
                        uint _3401 = uint(findLSB(_3397)) + (_3252 << 5u);
                        uint _3398 = (_3397 + 4294967295u) & _3397;
                        uint _3403 = _3401 * 48u;
                        vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 3u)).x));
                        uint _3423 = (_3401 * 48u) + 4u;
                        vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3423)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 3u)).x));
                        uint _3442 = (_3401 * 48u) + 8u;
                        vec3 _3453 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3442)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 2u)).x));
                        float _3457 = _3417.x - _2091;
                        float _3458 = _3417.y - _2092;
                        float _3459 = _3417.z - _2093;
                        float _3460 = dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459));
                        float _3463 = inversesqrt(_3460);
                        float _3464 = _3463 * _3457;
                        float _3465 = _3463 * _3458;
                        float _3466 = _3463 * _3459;
                        float _3467 = dot(vec3(_946, _949, _952), vec3(_3464, _3465, _3466));
                        float _3472 = 1.0 - (_3460 * _3417.w);
                        float _4923 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3473 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3474 = sqrt(_3460) * _3436.w;
                        float _3477 = 1.39999997615814208984375 / (_3474 + 1.39999997615814208984375);
                        float _3478 = _3477 * _3477;
                        float _3481 = ((1.0 - _3478) * _3467) + _3478;
                        float _3484 = _3474 * _3474;
                        float _3488 = ((isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0))) * _3473) / ((_3484 * 0.699999988079071044921875) + 1.0);
                        float _3492 = (-0.0) - _2091;
                        float _3493 = (-0.0) - _2092;
                        float _3494 = (-0.0) - _2093;
                        float _3498 = inversesqrt(dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494)));
                        float _3499 = _3498 * _3492;
                        float _3500 = _3498 * _3493;
                        float _3501 = _3498 * _3494;
                        float _3508 = exp2(log2(1.0 / ((_3484 * 3.5) + 5.0)) * 0.25);
                        float _3509 = 1.0 - _1006;
                        float _3516 = sqrt(1.0 - ((1.0 - (_3509 * _3509)) * (1.0 - (_3508 * _3508))));
                        float _3517 = _3516 * _3516;
                        float _3518 = _3517 * _3517;
                        float _3519 = _3499 + _3464;
                        float _3520 = _3500 + _3465;
                        float _3521 = _3501 + _3466;
                        float _3525 = inversesqrt(dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521)));
                        float _3529 = dot(vec3(_946, _949, _952), vec3(_3499, _3500, _3501));
                        float _4939 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3532 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                        float _3533 = dot(vec3(_946, _949, _952), vec3(_3525 * _3519, _3525 * _3520, _3525 * _3521));
                        float _4950 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3536 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                        float _3540 = ((_3536 * _3536) * (_3518 + (-1.0))) + 1.0;
                        float _3541 = _3477 * _3517;
                        float _3542 = _3541 * _3541;
                        float _3545 = ((1.0 - _3542) * _3467) + _3542;
                        float _4961 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3546 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                        float _3547 = 1.0 - _3517;
                        float _3557 = (0.5 / (((_3546 * ((_3532 * _3547) + _3517)) + 9.9999999392252902907785028219223e-09) + (((_3546 * _3547) + _3517) * _3532))) * _3546;
                        float _4972 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3568 = (((_3518 * 3.1415927410125732421875) * (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0)))) / ((_3540 * _3540) * ((_3484 * 2.1991131305694580078125) + 3.141590118408203125))) * _3473;
                        _3321 = (_3488 * _3436.x) + _3394;
                        _3322 = (_3488 * _3436.y) + _3395;
                        _3323 = (_3488 * _3436.z) + _3396;
                        _3318 = (_3568 * _3453.x) + _3391;
                        _3319 = (_3568 * _3453.y) + _3392;
                        _3320 = (_3568 * _3453.z) + _3393;
                        if (_3398 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3323;
                            _3397 = _3398;
                        }
                    }
                    frontier_phi_71_pred = _3323;
                    frontier_phi_71_pred_1 = _3322;
                    frontier_phi_71_pred_2 = _3321;
                    frontier_phi_71_pred_3 = _3320;
                    frontier_phi_71_pred_4 = _3319;
                    frontier_phi_71_pred_5 = _3318;
                }
                _3104 = frontier_phi_71_pred;
                _3102 = frontier_phi_71_pred_1;
                _3100 = frontier_phi_71_pred_2;
                _3098 = frontier_phi_71_pred_3;
                _3096 = frontier_phi_71_pred_4;
                _3094 = frontier_phi_71_pred_5;
                uint _3253 = _3252 + 1u;
                if (_3253 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3246 = _3094;
                    _3247 = _3096;
                    _3248 = _3098;
                    _3249 = _3100;
                    _3250 = _3102;
                    _3251 = _3104;
                    _3252 = _3253;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
        }
        uvec4 _3107 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3108 = _3107.z;
        uint _3110 = (_3108 >> 8u) & 15u;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        if (((4294967295u << _3110) & _3013) == 0u)
        {
            _3214 = _3093;
            _3216 = _3095;
            _3218 = _3097;
            _3220 = _3099;
            _3222 = _3101;
            _3224 = _3103;
        }
        else
        {
            float _3239 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
            float _3240 = _3239 * _2091;
            float _3241 = _3239 * _2092;
            float _3242 = _3239 * _2093;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3110 < ((_3108 >> 12u) & 15u))
            {
                float _3215;
                float _3217;
                float _3219;
                float _3221;
                float _3223;
                float _3225;
                float _3374 = _3093;
                float _3375 = _3095;
                float _3376 = _3097;
                float _3377 = _3099;
                float _3378 = _3101;
                float _3379 = _3103;
                uint _3380 = _3110;
                uint _3389;
                bool _3390;
                for (;;)
                {
                    _3389 = texelFetch(g_lightClassification, int((((_3007 << 5u) + (_2993 << 9u)) + (_3380 << 2u)) >> 2u)).x;
                    _3390 = _3389 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3390)
                    {
                        frontier_phi_82_pred = _3379;
                        frontier_phi_82_pred_1 = _3378;
                        frontier_phi_82_pred_2 = _3377;
                        frontier_phi_82_pred_3 = _3376;
                        frontier_phi_82_pred_4 = _3375;
                        frontier_phi_82_pred_5 = _3374;
                    }
                    else
                    {
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3595 = _3374;
                        float _3596 = _3375;
                        float _3597 = _3376;
                        float _3598 = _3377;
                        float _3599 = _3378;
                        float _3600 = _3379;
                        uint _3601 = _3389;
                        uint _3602;
                        vec4 _3627;
                        float _3628;
                        vec4 _3643;
                        vec3 _3655;
                        vec4 _3670;
                        vec4 _3685;
                        float _3731;
                        bool _3732;
                        for (;;)
                        {
                            uint _3612 = ((_3380 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3601));
                            _3602 = (_3601 + 4294967295u) & _3601;
                            uint _3614 = _3612 * 40u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            _3628 = _3627.w;
                            uint _3630 = (_3612 * 40u) + 4u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3645 = (_3612 * 40u) + 8u;
                            _3655 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x));
                            uint _3657 = (_3612 * 40u) + 16u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3612 * 40u) + 20u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3612 * 40u) + 24u;
                            vec4 _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3706 = (_3612 * 40u) + 28u;
                            vec4 _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            _3731 = fma(_2093, _3719.z, fma(_2092, _3719.y, _3719.x * _2091)) + _3719.w;
                            _3732 = !((fma(_2093, _3700.z, fma(_2092, _3700.y, _3700.x * _2091)) + _3700.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3732)
                            {
                                float _3759 = _3627.x - _2091;
                                float _3760 = _3627.y - _2092;
                                float _3761 = _3627.z - _2093;
                                float _3762 = dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761));
                                float _3765 = inversesqrt(_3762);
                                float _3766 = _3765 * _3759;
                                float _3767 = _3765 * _3760;
                                float _3768 = _3765 * _3761;
                                float _3772 = 1.0 - (_3762 / (_3628 * _3628));
                                float _4983 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3777 = sqrt(_3762) * _3643.w;
                                float _3779 = 1.39999997615814208984375 / (_3777 + 1.39999997615814208984375);
                                float _3780 = _3779 * _3779;
                                float _3783 = ((1.0 - _3780) * dot(vec3(_3766, _3767, _3768), vec3(_946, _949, _952))) + _3780;
                                float _3786 = _3777 * _3777;
                                float _3790 = (fma(_2093, _3670.z, fma(_2092, _3670.y, _3670.x * _2091)) + _3670.w) / _3731;
                                float _3791 = (fma(_2093, _3685.z, fma(_2092, _3685.y, _3685.x * _2091)) + _3685.w) / _3731;
                                float _3795 = 1.0 - dot(vec2(_3790, _3791), vec2(_3790, _3791));
                                float _4999 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3797 = _3796 * (((isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0))) * _3773) / ((_3786 * 0.699999988079071044921875) + 1.0));
                                float _3809 = exp2(log2(1.0 / ((_3786 * 3.5) + 5.0)) * 0.25);
                                float _3810 = 1.0 - _1006;
                                float _3817 = sqrt(1.0 - ((1.0 - (_3810 * _3810)) * (1.0 - (_3809 * _3809))));
                                float _3818 = _3817 * _3817;
                                float _3819 = _3818 * _3818;
                                float _3820 = _3766 - _3240;
                                float _3821 = _3767 - _3241;
                                float _3822 = _3768 - _3242;
                                float _3826 = inversesqrt(dot(vec3(_3820, _3821, _3822), vec3(_3820, _3821, _3822)));
                                float _3830 = dot(vec3(_946, _949, _952), vec3((-0.0) - _3240, (-0.0) - _3241, (-0.0) - _3242));
                                float _5010 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3833 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                                float _3834 = dot(vec3(_946, _949, _952), vec3(_3826 * _3820, _3826 * _3821, _3826 * _3822));
                                float _5021 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3837 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3841 = ((_3837 * _3837) * (_3819 + (-1.0))) + 1.0;
                                float _3842 = _3779 * _3818;
                                float _3843 = _3842 * _3842;
                                float _3849 = ((1.0 - _3843) * dot(vec3(_946, _949, _952), vec3(_3766, _3767, _3768))) + _3843;
                                float _5032 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                                float _3851 = 1.0 - _3818;
                                float _3861 = (0.5 / (((_3850 * ((_3833 * _3851) + _3818)) + 9.9999999392252902907785028219223e-09) + (((_3850 * _3851) + _3818) * _3833))) * _3850;
                                float _5043 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3871 = (_3796 * _3773) * (((_3819 * 3.1415927410125732421875) * (isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0)))) / ((_3841 * _3841) * ((_3786 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3797 * _3643.z;
                                frontier_phi_88_pred_1 = _3797 * _3643.y;
                                frontier_phi_88_pred_2 = _3797 * _3643.x;
                                frontier_phi_88_pred_3 = _3871 * _3655.z;
                                frontier_phi_88_pred_4 = _3871 * _3655.y;
                                frontier_phi_88_pred_5 = _3871 * _3655.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3880 = frontier_phi_88_pred;
                            _3879 = frontier_phi_88_pred_1;
                            _3878 = frontier_phi_88_pred_2;
                            _3877 = frontier_phi_88_pred_3;
                            _3876 = frontier_phi_88_pred_4;
                            _3875 = frontier_phi_88_pred_5;
                            _3585 = _3878 + _3598;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            _3582 = _3875 + _3595;
                            _3583 = _3876 + _3596;
                            _3584 = _3877 + _3597;
                            if (_3602 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3602;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3587;
                        frontier_phi_82_pred_1 = _3586;
                        frontier_phi_82_pred_2 = _3585;
                        frontier_phi_82_pred_3 = _3584;
                        frontier_phi_82_pred_4 = _3583;
                        frontier_phi_82_pred_5 = _3582;
                    }
                    _3225 = frontier_phi_82_pred;
                    _3223 = frontier_phi_82_pred_1;
                    _3221 = frontier_phi_82_pred_2;
                    _3219 = frontier_phi_82_pred_3;
                    _3217 = frontier_phi_82_pred_4;
                    _3215 = frontier_phi_82_pred_5;
                    uint _3381 = _3380 + 1u;
                    if (_3381 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3374 = _3215;
                        _3375 = _3217;
                        _3376 = _3219;
                        _3377 = _3221;
                        _3378 = _3223;
                        _3379 = _3225;
                        _3380 = _3381;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3221;
                frontier_phi_63_64_ladder_1 = _3225;
                frontier_phi_63_64_ladder_2 = _3223;
                frontier_phi_63_64_ladder_3 = _3219;
                frontier_phi_63_64_ladder_4 = _3217;
                frontier_phi_63_64_ladder_5 = _3215;
            }
            else
            {
                frontier_phi_63_64_ladder = _3099;
                frontier_phi_63_64_ladder_1 = _3103;
                frontier_phi_63_64_ladder_2 = _3101;
                frontier_phi_63_64_ladder_3 = _3097;
                frontier_phi_63_64_ladder_4 = _3095;
                frontier_phi_63_64_ladder_5 = _3093;
            }
            _3214 = frontier_phi_63_64_ladder_5;
            _3216 = frontier_phi_63_64_ladder_4;
            _3218 = frontier_phi_63_64_ladder_3;
            _3220 = frontier_phi_63_64_ladder;
            _3222 = frontier_phi_63_64_ladder_2;
            _3224 = frontier_phi_63_64_ladder_1;
        }
        float _3229 = isnan(1.0) ? _990 : (isnan(_990) ? 1.0 : min(_990, 1.0));
        _3026 = (_3229 * _3220) + _2557;
        _3028 = (_3229 * _3222) + _2559;
        _3030 = (_3229 * _3224) + _2561;
        _3032 = ((_3214 * 0.039999999105930328369140625) * _3229) + _2880;
        _3034 = ((_3216 * 0.039999999105930328369140625) * _3229) + _2882;
        _3036 = ((_3218 * 0.039999999105930328369140625) * _3229) + _2884;
    }
    else
    {
        _3026 = _2557;
        _3028 = _2559;
        _3030 = _2561;
        _3032 = _2880;
        _3034 = _2882;
        _3036 = _2884;
    }
    float _5059 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _5070 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _5081 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _3053 = ((isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_3026 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _990))) + ((_3032 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1825)) * cbPerFrame._m0[3u].x);
    float _3054 = ((isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0))) * (_3028 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _990))) + ((_3034 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1825)) * cbPerFrame._m0[3u].x);
    float _3055 = ((isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0))) * (_3030 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _990))) + ((_3036 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1825)) * cbPerFrame._m0[3u].x);
    uint _3056 = _278 + 6u;
    float _3064 = _927 / cbSceneParam._m0[86u].x;
    float _3065 = _928 / cbSceneParam._m0[86u].y;
    vec4 _3079 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3064, _3065, (log2((isnan(cbSceneParam._m0[77u].w) ? _849 : (isnan(_849) ? cbSceneParam._m0[77u].w : min(_849, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3081 = _3079.x;
    float _3082 = _3079.y;
    float _3083 = _3079.z;
    float _3084 = _3079.w;
    float _3156;
    float _3158;
    float _3160;
    float _3162;
    if (_849 > cbSceneParam._m0[78u].w)
    {
        float _3118 = isnan(_849) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _849 : min(cbSceneParam._m0[80u].w, _849));
        float _3119 = _3118 / _849;
        float _3130 = _3119 * _900;
        float _3131 = _901 * _3119;
        float _3132 = (-0.0) - _3131;
        float _3134 = _3119 * _902;
        float _3136 = (cbSceneParam._m0[77u].w * _3132) / _3118;
        float _3137 = _3136 + cbSceneParam._m0[79u].w;
        float _3138 = cbSceneParam._m0[79u].w - _3131;
        float _3144 = sqrt(((_3130 * _3130) + (_3131 * _3131)) + (_3134 * _3134));
        float _3147 = (1.0 - (cbSceneParam._m0[77u].w / _3118)) * _3144;
        float _3152 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3154 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3331;
        if (abs((_3132 - _3136) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3331 = ((((_3137 > 0.0) ? exp2(_3152 * _3137) : (2.0 - exp2(_3154 * _3137))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3147;
        }
        else
        {
            float _3275 = 1.0 / cbSceneParam._m0[80u].x;
            float _3276 = isnan(_3138) ? _3137 : (isnan(_3137) ? _3138 : max(_3137, _3138));
            float _3277 = isnan(_3138) ? _3137 : (isnan(_3137) ? _3138 : min(_3137, _3138));
            float _3286 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : min(_3276, 0.0));
            float _3287 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : min(_3277, 0.0));
            _3331 = ((abs(_3144 / _3132) * cbSceneParam._m0[80u].y) * ((((_3286 - _3287) * 2.0) - ((exp2(_3152 * (isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0)))) - exp2(_3152 * (isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))))) * _3275)) - ((exp2(_3154 * _3286) - exp2(_3154 * _3287)) * _3275))) + (_3147 * cbSceneParam._m0[80u].z);
        }
        vec4 _3333 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3064, _3065, 1.0), 0.0);
        float _3342 = exp2((_3331 * (-1.44269502162933349609375)) * (1.0 - _3333.w));
        float _3343 = log2(_3342);
        float _3359 = log2(_3084);
        _3156 = (exp2(_3359 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].x)) * _3333.x) / cbSceneParam._m0[78u].x)) + _3081;
        _3158 = (exp2(_3359 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].y)) * _3333.y) / cbSceneParam._m0[78u].y)) + _3082;
        _3160 = (exp2(_3359 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].z)) * _3333.z) / cbSceneParam._m0[78u].z)) + _3083;
        _3162 = _3342 * _3084;
    }
    else
    {
        _3156 = _3081;
        _3158 = _3082;
        _3160 = _3083;
        _3162 = _3084;
    }
    bool _3369;
    vec4 _3172;
    vec4 _3194;
    float _3196;
    float _3200;
    float _3201;
    float _3202;
    float _3203;
    bool _3213;
    for (;;)
    {
        _3172 = cbMatDynParam._m0[0u];
        float _3174 = roundEven(_3172.y);
        bool _3175 = _3174 == 3.0;
        float _3176 = log2(_3162);
        float _3183 = exp2(_3176 * cbSceneParam._m0[78u].x) * _3053;
        float _3184 = exp2(_3176 * cbSceneParam._m0[78u].y) * _3054;
        float _3185 = exp2(_3176 * cbSceneParam._m0[78u].z) * _3055;
        float _3192 = _916 + (-0.5);
        _3194 = cbMtdParam._m0[1u];
        _3196 = _3194.y * _3192;
        float _3199 = (_3174 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3200 = _3199 * (_3175 ? _3183 : (_3183 + (cbSceneParam._m0[72u].w * _3156)));
        _3201 = _3199 * (_3175 ? _3184 : (_3184 + (cbSceneParam._m0[72u].w * _3158)));
        _3202 = _3199 * (_3175 ? _3185 : (_3185 + (cbSceneParam._m0[72u].w * _3160)));
        _3203 = _3192 * 0.999000012874603271484375;
        _3213 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3213)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _3203) < 0.5)
            {
                _3369 = true;
                break;
            }
        }
        uint _3310 = _965 + uint(_3172.w);
        if ((cbInstanceData._m0[_3310].w < 1.0) && ((cbInstanceData._m0[_3310].w + _3203) < 0.5))
        {
            _3369 = true;
            break;
        }
        if ((_3196 + 1.0) < _3194.x)
        {
            _3369 = true;
            break;
        }
        _3369 = false;
        break;
    }
    float _3573;
    if (_3369)
    {
        discard_state = true;
        _3573 = 0.0;
    }
    else
    {
        _3573 = cbInstanceData._m0[_3056].w;
    }
    SV_Target.x = _3200;
    SV_Target.y = _3201;
    SV_Target.z = _3202;
    SV_Target.w = _3573;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3056].w;
    discard_exit();
}


