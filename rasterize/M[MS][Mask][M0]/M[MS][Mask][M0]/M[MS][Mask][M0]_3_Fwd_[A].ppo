#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1155;
float _3517;
float _3518;
float _3519;
float _3520;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3529 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3540 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3551 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[24u].z) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3562 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _433 = (_426 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _434 = (_426 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _435 = (_426 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) + _445;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _426) + _513;
    float _525 = ((((_492.x - _511) * _426) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _426) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3573 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _566 = (_525 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_467.x * 2.0) + (-1.0)))) + (((_554.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _567 = (_526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_467.y * 2.0) + (-1.0)))) + (((_554.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _572 = (((_467.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    float _576 = ((_554.z - _572) * cbMtdParam._m0[19u].w) + _572;
    float _578 = cbMtdParam._m0[22u].x + _554.w;
    float _581 = fma(_532, _226 * NORMAL.x, fma(_567, _233 * TANGENT.x, (_219 * _211) * _566));
    float _584 = fma(_532, _226 * NORMAL.y, fma(_567, _233 * TANGENT.y, (_219 * _212) * _566));
    float _587 = fma(_532, _226 * NORMAL.z, fma(_567, _233 * TANGENT.z, (_219 * _213) * _566));
    float _591 = inversesqrt(dot(vec3(_581, _584, _587), vec3(_581, _584, _587)));
    float _592 = _591 * _581;
    float _593 = _591 * _584;
    float _594 = _591 * _587;
    float _3584 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _595 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3606 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3617 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3628 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _613 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _665 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _655);
    float _666 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _655);
    float _667 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _655);
    float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
    float _672 = _665 * _671;
    float _673 = _666 * _671;
    float _674 = _667 * _671;
    vec4 _679 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _681 = _679.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _835 = sqrt(((_665 * _665) + (_666 * _666)) + (_667 * _667));
        float _841 = (cbMatDynParam._m0[5u].x * _835) + cbMatDynParam._m0[5u].y;
        float _3639 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _846 = (cbMatDynParam._m0[5u].z * _835) + cbMatDynParam._m0[5u].w;
        float _3650 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) - _842)) + _842) < ((_681 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _692 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _693 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _711 = fma(_594, cbSceneParam._m0[5u].z, fma(_593, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _592));
    float _714 = fma(_594, cbSceneParam._m0[6u].z, fma(_593, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _592));
    float _717 = fma(_594, cbSceneParam._m0[7u].z, fma(_593, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _592));
    uint _730 = _260 + 9u;
    uint _731 = _730 + uint(cbMatDynParam._m0[0u].w);
    float _737 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_731].x;
    float _738 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_731].y;
    float _739 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_731].z;
    float _3661 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    vec4 _751 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _692, cbSceneParam._m0[86u].y * _693));
    float _755 = ((isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * TEXCOORD_5.w) * _751.x;
    float _756 = dot(vec3(_592, _593, _594), vec3(_672, _673, _674));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _592) - _672;
    float _764 = (_759 * _593) - _673;
    float _765 = (_759 * _594) - _674;
    float _769 = abs(dot(vec3(_672, _673, _674), vec3(_592, _593, _594)));
    float _3694 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_595);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1154;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _879 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _883 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _887 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _912 = _816 + _592;
        float _913 = _820 + _593;
        float _914 = _824 + _594;
        float _924 = fma(_914, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912)) - _879;
        float _925 = fma(_914, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912)) - _883;
        float _926 = fma(_914, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912)) - _887;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_879 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_883 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[34u].z) + ((((((_887 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _982 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_948.x + (-0.5));
        float _984 = _982 * (_948.y + (-0.5));
        float _985 = _982 * (_948.z + (-0.5));
        float _992 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_955.x + (-0.5));
        float _994 = _992 * (_955.y + (-0.5));
        float _995 = _992 * (_955.z + (-0.5));
        float _1002 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_962.x + (-0.5));
        float _1004 = _1002 * (_962.y + (-0.5));
        float _1005 = _1002 * (_962.z + (-0.5));
        float _1012 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_969.x + (-0.5));
        float _1014 = _1012 * (_969.y + (-0.5));
        float _1015 = _1012 * (_969.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1036 = (dot(vec3(_592, _593, _594), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1046 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3742 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1048 + 1.0))) + _1053) * _1016;
        float _1063 = _984 * 0.5;
        float _1064 = _994 * 0.5;
        float _1065 = _1004 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_592, _593, _594), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3775 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1090 + 1.0))) + _1095) * _1017;
        float _1105 = _985 * 0.5;
        float _1106 = _995 * 0.5;
        float _1107 = _1005 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_592, _593, _594), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3808 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1132 + 1.0))) + _1137) * _1018;
        _1154 = _985;
        _1156 = _984;
        _1157 = _983;
        _1158 = _995;
        _1159 = _994;
        _1160 = _993;
        _1161 = _1005;
        _1162 = _1004;
        _1163 = _1003;
        _1164 = _1018;
        _1165 = _1017;
        _1166 = _1016;
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _1155;
        _1156 = _1155;
        _1157 = _1155;
        _1158 = _1155;
        _1159 = _1155;
        _1160 = _1155;
        _1161 = _1155;
        _1162 = _1155;
        _1163 = _1155;
        _1164 = _1155;
        _1165 = _1155;
        _1166 = _1155;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1197 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1201 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1205 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1228 = _816 + _592;
        float _1229 = _820 + _593;
        float _1230 = _824 + _594;
        float _1240 = fma(_1230, cbModelParam._m0[30u].z, fma(_1229, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1228)) - _1197;
        float _1241 = fma(_1230, cbModelParam._m0[31u].z, fma(_1229, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1228)) - _1201;
        float _1242 = fma(_1230, cbModelParam._m0[32u].z, fma(_1229, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1228)) - _1205;
        float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
        float _1259 = ((_1246 * _1240) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1197 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1246 * _1241) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1201 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1246 * _1242) / cbModelParam._m0[35u].z) + ((((((_1205 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1296 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1263.x + (-0.5));
        float _1298 = _1296 * (_1263.y + (-0.5));
        float _1299 = _1296 * (_1263.z + (-0.5));
        float _1306 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1270.x + (-0.5));
        float _1308 = _1306 * (_1270.y + (-0.5));
        float _1309 = _1306 * (_1270.z + (-0.5));
        float _1316 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1277.x + (-0.5));
        float _1318 = _1316 * (_1277.y + (-0.5));
        float _1319 = _1316 * (_1277.z + (-0.5));
        float _1326 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1284.x + (-0.5));
        float _1328 = _1326 * (_1284.y + (-0.5));
        float _1329 = _1326 * (_1284.z + (-0.5));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = _1297 * 0.5;
        float _1334 = _1307 * 0.5;
        float _1335 = _1317 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_592, _593, _594), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3871 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1360 + 1.0))) + _1365) * _1330;
        float _1375 = _1298 * 0.5;
        float _1376 = _1308 * 0.5;
        float _1377 = _1318 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_592, _593, _594), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3904 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1402 + 1.0))) + _1407) * _1331;
        float _1417 = _1299 * 0.5;
        float _1418 = _1309 * 0.5;
        float _1419 = _1319 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_592, _593, _594), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _3937 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1444 + 1.0))) + _1449) * _1332;
        _1466 = _1299;
        _1467 = _1298;
        _1468 = _1297;
        _1469 = _1309;
        _1470 = _1308;
        _1471 = _1307;
        _1472 = _1319;
        _1473 = _1318;
        _1474 = _1317;
        _1475 = _1332;
        _1476 = _1331;
        _1477 = _1330;
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
    }
    else
    {
        _1466 = _1155;
        _1467 = _1155;
        _1468 = _1155;
        _1469 = _1155;
        _1470 = _1155;
        _1471 = _1155;
        _1472 = _1155;
        _1473 = _1155;
        _1474 = _1155;
        _1475 = _1155;
        _1476 = _1155;
        _1477 = _1155;
        _1478 = 0.0;
        _1479 = 0.0;
        _1480 = 0.0;
    }
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1167)) + _1167;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1168)) + _1168;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1169)) + _1169;
    float _1513 = fma(_1492, cbSceneParam._m0[89u].z, fma(_1491, cbSceneParam._m0[89u].y, _1490 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1492, cbSceneParam._m0[90u].z, fma(_1491, cbSceneParam._m0[90u].y, _1490 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1492, cbSceneParam._m0[91u].z, fma(_1491, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1490));
    float _1534 = _763 * 0.5;
    float _1535 = _764 * 0.5;
    float _1536 = _765 * 0.5;
    float _1537 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1540 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1543 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1577;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1550 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1154, _1158, _1161, _1164));
        float _1554 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1558 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1565 = dot(vec4(cbModelParam._m0[39u]), vec4(_1534, _1535, _1536, 1.0));
        _1577 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1577 = 1.0;
    }
    float _1588;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1579 = dot(vec4(cbModelParam._m0[40u]), vec4(_1534, _1535, _1536, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1592 = (_1588 * cbModelParam._m0[1u].x) + (_1577 * (1.0 - cbModelParam._m0[1u].x));
    float _1602 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _595);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1602 : min(cbModelParam._m0[25u].z, _1602));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1652 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1656 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1660 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1663 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1666 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1669 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1697;
        if (_1663 > 0.0)
        {
            _1697 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1697 = frontier_phi_17_15_ladder;
        }
        float _1899;
        if (_1666 > 0.0)
        {
            _1899 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1899 = frontier_phi_26_22_ladder;
        }
        float _2142;
        if (_1669 > 0.0)
        {
            _2142 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2142 = frontier_phi_38_33_ladder;
        }
        float _2144 = isnan(_1899) ? _1697 : (isnan(_1697) ? _1899 : min(_1697, _1899));
        float _2145 = isnan(_2142) ? _2144 : (isnan(_2144) ? _2142 : min(_2144, _2142));
        float _2149 = (_2145 * _1663) + _1652;
        float _2150 = (_2145 * _1666) + _1656;
        float _2151 = (_2145 * _1669) + _1660;
        float _2152 = _2145 * 9.9999997473787516355514526367188e-05;
        float _2154 = (-1.0) - _2152;
        float _2156 = _2152 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2151 > _2156) || ((_2151 < _2154) || ((_2150 > _2156) || ((_2150 < _2154) || ((_2149 < _2154) || (_2149 > _2156))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2275 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2151, cbModelParam._m0[9u].z, fma(_2150, cbModelParam._m0[9u].y, _2149 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2151, cbModelParam._m0[10u].z, fma(_2150, cbModelParam._m0[10u].y, _2149 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2151, cbModelParam._m0[11u].z, fma(_2150, cbModelParam._m0[11u].y, _2149 * cbModelParam._m0[11u].x))), _1603);
            frontier_phi_16_38_ladder = _2275.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2275.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2275.x * cbModelParam._m0[1u].y;
        }
        _1685 = frontier_phi_16_38_ladder_2;
        _1687 = frontier_phi_16_38_ladder_1;
        _1689 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1603);
        _1685 = _1673.x * cbModelParam._m0[1u].y;
        _1687 = _1673.y * cbModelParam._m0[1u].y;
        _1689 = _1673.z * cbModelParam._m0[1u].y;
    }
    float _1693 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _595);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1693 : min(cbModelParam._m0[25u].w, _1693));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1749 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1753 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1757 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1760 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1763 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1766 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _1904;
        if (_1760 > 0.0)
        {
            _1904 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1904 = frontier_phi_28_24_ladder;
        }
        float _2169;
        if (_1763 > 0.0)
        {
            _2169 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2169 = frontier_phi_40_35_ladder;
        }
        float _2374;
        if (_1766 > 0.0)
        {
            _2374 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2374 = frontier_phi_49_46_ladder;
        }
        float _2376 = isnan(_2169) ? _1904 : (isnan(_1904) ? _2169 : min(_1904, _2169));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1760) + _1749;
        float _2382 = (_2377 * _1763) + _1753;
        float _2383 = (_2377 * _1766) + _1757;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2384;
        float _2387 = _2384 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2383 > _2387) || ((_2383 < _2385) || ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 < _2385) || (_2381 > _2387))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2383, cbModelParam._m0[17u].z, fma(_2382, cbModelParam._m0[17u].y, _2381 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2383, cbModelParam._m0[18u].z, fma(_2382, cbModelParam._m0[18u].y, _2381 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2383, cbModelParam._m0[19u].z, fma(_2382, cbModelParam._m0[19u].y, _2381 * cbModelParam._m0[19u].x))), _1694);
            frontier_phi_25_49_ladder = _2582.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2582.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2582.x * cbModelParam._m0[1u].z;
        }
        _1785 = frontier_phi_25_49_ladder_2;
        _1787 = frontier_phi_25_49_ladder_1;
        _1789 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1694);
        _1785 = _1769.x * cbModelParam._m0[1u].z;
        _1787 = _1769.y * cbModelParam._m0[1u].z;
        _1789 = _1769.z * cbModelParam._m0[1u].z;
    }
    float _1801 = ((((1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_784 * _771)) * _755;
    float _1802 = _1801 * ((cbModelParam._m0[1u].w * (_1785 - _1685)) + _1685);
    float _1803 = _1801 * ((cbModelParam._m0[1u].w * (_1787 - _1687)) + _1687);
    float _1804 = _1801 * ((cbModelParam._m0[1u].w * (_1789 - _1689)) + _1689);
    float _1807 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1803, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1803, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1803, cbSceneParam._m0[91u].y, _1802 * cbSceneParam._m0[91u].x));
    uvec4 _1823 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1825 = _1823.x * 14u;
    uint _1826 = _1825 + 13u;
    float _1833 = _755 + (-1.0);
    float _1838 = (cbLight._m0[_1826].x * _1833) + 1.0;
    float _1839 = (cbLight._m0[_1826].y * _1833) + 1.0;
    float _1840 = (cbLight._m0[_1826].z * _1833) + 1.0;
    float _1841 = (cbLight._m0[_1826].w * _1833) + 1.0;
    uint _1842 = _1825 + 5u;
    float _1848 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
    uint _1852 = _1825 + 4u;
    float _1858 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
    uint _1862 = _1825 | 1u;
    float _1873 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_592, _593, _594));
    float _1876 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_592, _593, _594));
    float _4073 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _4084 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1881 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1883 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1890 = ((cbLight._m0[_1842].x * _1848) * _1883) + ((cbLight._m0[_1852].x * _1858) * _1881);
    float _1891 = ((_1848 * cbLight._m0[_1842].y) * _1883) + ((_1858 * cbLight._m0[_1852].y) * _1881);
    float _1892 = ((_1848 * cbLight._m0[_1842].z) * _1883) + ((_1858 * cbLight._m0[_1852].z) * _1881);
    uvec4 _1896 = floatBitsToUint(cbLight._m0[_1825 + 12u]);
    bool _1898 = _1896.x == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1898)
    {
        _1909 = _1890;
        _1911 = _1891;
        _1913 = _1892;
    }
    else
    {
        uint _1917 = _1825 + 6u;
        float _1933 = (dot(vec3(cbLight._m0[_1825 + 2u].xyz), vec3(_592, _593, _594)) * 0.5) + 0.5;
        float _1934 = _1933 * _1933;
        float _4095 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1936 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _1909 = (((cbLight._m0[_1917].x * 0.3183098733425140380859375) * _1935) * _1936) + _1890;
        _1911 = (((cbLight._m0[_1917].y * 0.3183098733425140380859375) * _1935) * _1936) + _1891;
        _1913 = (((cbLight._m0[_1917].z * 0.3183098733425140380859375) * _1935) * _1936) + _1892;
    }
    bool _1916 = _1896.y == 0u;
    float _1954;
    float _1956;
    float _1958;
    if (_1916)
    {
        _1954 = _1909;
        _1956 = _1911;
        _1958 = _1913;
    }
    else
    {
        uint _2113 = _1825 + 7u;
        float _2129 = (dot(vec3(cbLight._m0[_1825 + 3u].xyz), vec3(_592, _593, _594)) * 0.5) + 0.5;
        float _2130 = _2129 * _2129;
        float _4111 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2131 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2132 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _1954 = (((cbLight._m0[_2113].x * 0.3183098733425140380859375) * _2131) * _2132) + _1909;
        _1956 = (((cbLight._m0[_2113].y * 0.3183098733425140380859375) * _2131) * _2132) + _1911;
        _1958 = (((cbLight._m0[_2113].z * 0.3183098733425140380859375) * _2131) * _2132) + _1913;
    }
    uint _1961 = _1825 + 8u;
    float _1974 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1825].w)) * _595) * 0.949999988079071044921875);
    float _1975 = _1974 * _1974;
    float _1976 = cbLight._m0[_1825].x + _672;
    float _1977 = cbLight._m0[_1825].y + _673;
    float _1978 = cbLight._m0[_1825].z + _674;
    float _1982 = inversesqrt(dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978)));
    float _1983 = _1982 * _1976;
    float _1984 = _1982 * _1977;
    float _1985 = _1982 * _1978;
    float _1986 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_1825].xyz));
    float _4127 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _1990 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _1991 = dot(vec3(_592, _593, _594), vec3(_1983, _1984, _1985));
    float _4149 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _1995 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_1983, _1984, _1985));
    float _4160 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1999 = _1975 * _1975;
    float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
    float _2014 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2015 = 1.0 - _1975;
    float _2026 = (0.5 / (((_1990 * ((_1989 * _2015) + _1975)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2015) + _1975) * _1989))) * _1989;
    float _4171 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2028 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
    uint _2039 = _1825 + 9u;
    float _2050 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _595) * 0.949999988079071044921875);
    float _2051 = _2050 * _2050;
    float _2052 = cbLight._m0[_1862].x + _672;
    float _2053 = cbLight._m0[_1862].y + _673;
    float _2054 = cbLight._m0[_1862].z + _674;
    float _2058 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
    float _2059 = _2058 * _2052;
    float _2060 = _2058 * _2053;
    float _2061 = _2058 * _2054;
    float _2062 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_1862].xyz));
    float _4182 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2066 = dot(vec3(_592, _593, _594), vec3(_2059, _2060, _2061));
    float _4193 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2070 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_2059, _2060, _2061));
    float _4204 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2074 = _2051 * _2051;
    float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
    float _2087 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2088 = 1.0 - _2051;
    float _2098 = (0.5 / (((_1990 * ((_2065 * _2088) + _2051)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2088) + _2051) * _2065))) * _2065;
    float _4215 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2100 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
    float _2110 = (((_2087 * cbLight._m0[_2039].x) * _2100) * _1848) + (((_2014 * cbLight._m0[_1961].x) * _2028) * _1858);
    float _2111 = (((_2087 * cbLight._m0[_2039].y) * _2100) * _1848) + (((_2014 * cbLight._m0[_1961].y) * _2028) * _1858);
    float _2112 = (((_2087 * cbLight._m0[_2039].z) * _2100) * _1848) + (((_2014 * cbLight._m0[_1961].z) * _2028) * _1858);
    float _2174;
    float _2176;
    float _2178;
    if (_1898)
    {
        _2174 = _2110;
        _2176 = _2111;
        _2178 = _2112;
    }
    else
    {
        uint _2180 = _1825 + 2u;
        uint _2184 = _1825 + 10u;
        float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _595) * 0.949999988079071044921875);
        float _2199 = _2198 * _2198;
        float _2200 = cbLight._m0[_2180].x + _672;
        float _2201 = cbLight._m0[_2180].y + _673;
        float _2202 = cbLight._m0[_2180].z + _674;
        float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
        float _2207 = _2206 * _2200;
        float _2208 = _2206 * _2201;
        float _2209 = _2206 * _2202;
        float _2210 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2180].xyz));
        float _4226 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2213 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2214 = dot(vec3(_592, _593, _594), vec3(_2207, _2208, _2209));
        float _4237 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2218 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2207, _2208, _2209));
        float _4248 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2222 = _2199 * _2199;
        float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
        float _2235 = (exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2236 = 1.0 - _2199;
        float _2246 = (0.5 / (((_1990 * ((_2213 * _2236) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2236) + _2199) * _2213))) * _2213;
        float _4259 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2248 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
        float _2249 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _2174 = (((_2235 * cbLight._m0[_2184].x) * _2248) * _2249) + _2110;
        _2176 = (((_2235 * cbLight._m0[_2184].y) * _2248) * _2249) + _2111;
        _2178 = (((_2235 * cbLight._m0[_2184].z) * _2248) * _2249) + _2112;
    }
    float _2284;
    float _2286;
    float _2288;
    if (_1916)
    {
        _2284 = _2174;
        _2286 = _2176;
        _2288 = _2178;
    }
    else
    {
        uint _2295 = _1825 + 3u;
        uint _2299 = _1825 + 11u;
        float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _595) * 0.949999988079071044921875);
        float _2314 = _2313 * _2313;
        float _2315 = cbLight._m0[_2295].x + _672;
        float _2316 = cbLight._m0[_2295].y + _673;
        float _2317 = cbLight._m0[_2295].z + _674;
        float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
        float _2322 = _2321 * _2315;
        float _2323 = _2321 * _2316;
        float _2324 = _2321 * _2317;
        float _2325 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2295].xyz));
        float _4275 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2329 = dot(vec3(_592, _593, _594), vec3(_2322, _2323, _2324));
        float _4286 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2333 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2322, _2323, _2324));
        float _4297 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2337 = _2314 * _2314;
        float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
        float _2350 = (exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2351 = 1.0 - _2314;
        float _2361 = (0.5 / (((_1990 * ((_2328 * _2351) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2351) + _2314) * _2328))) * _2328;
        float _4308 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2363 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
        float _2364 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2284 = (((_2350 * cbLight._m0[_2299].x) * _2363) * _2364) + _2174;
        _2286 = (((_2350 * cbLight._m0[_2299].y) * _2363) * _2364) + _2176;
        _2288 = (((_2350 * cbLight._m0[_2299].z) * _2363) * _2364) + _2178;
    }
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_1823.y == 0u)
    {
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2439;
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2439;
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2439;
        uvec4 _2454 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2455 = _2454.x;
        uint _2466 = uint((float(_2454.y) * floor(float(uint(cbSceneParam._m0[85u].y * _693) / _2455))) + floor(float(uint(cbSceneParam._m0[85u].x * _692) / _2455)));
        float _2476 = (log2(_2442 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2477 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        uint _2480 = uint(isnan(14.0) ? _2477 : (isnan(_2477) ? 14.0 : min(_2477, 14.0)));
        uvec4 _2485 = texelFetch(g_lightClusterGridBuffer, int(((_2480 << 2u) + (_2466 << 6u)) >> 2u));
        uint _2486 = _2485.x;
        uint _2487 = _2454.z;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        if (((((1u << ((_2487 >> 4u) & 15u)) + 4294967295u) & _2486) == 0u) || ((_2487 & 240u) == 0u))
        {
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
        }
        else
        {
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            uint _2746 = 0u;
            uint _2755;
            bool _2756;
            for (;;)
            {
                _2755 = texelFetch(g_lightClassification, int((((_2480 << 5u) + (_2466 << 9u)) + (_2746 << 2u)) >> 2u)).x;
                _2756 = _2755 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2756)
                {
                    frontier_phi_66_pred = _2740;
                    frontier_phi_66_pred_1 = _2745;
                    frontier_phi_66_pred_2 = _2744;
                    frontier_phi_66_pred_3 = _2743;
                    frontier_phi_66_pred_4 = _2742;
                    frontier_phi_66_pred_5 = _2741;
                }
                else
                {
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    uint _2891;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2745;
                    _2891 = _2755;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    for (;;)
                    {
                        uint _2895 = uint(findLSB(_2891)) + (_2746 << 5u);
                        uint _2892 = (_2891 + 4294967295u) & _2891;
                        uint _2897 = _2895 * 48u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2917 = (_2895 * 48u) + 4u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 3u)).x));
                        uint _2936 = (_2895 * 48u) + 8u;
                        vec3 _2947 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x));
                        float _2951 = _2911.x - _2440;
                        float _2952 = _2911.y - _2441;
                        float _2953 = _2911.z - _2442;
                        float _2954 = dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953));
                        float _2957 = inversesqrt(_2954);
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2961 = dot(vec3(_711, _714, _717), vec3(_2958, _2959, _2960));
                        float _2966 = 1.0 - (_2954 * _2911.w);
                        float _4334 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _2968 = sqrt(_2954) * _2930.w;
                        float _2971 = 1.39999997615814208984375 / (_2968 + 1.39999997615814208984375);
                        float _2972 = _2971 * _2971;
                        float _2975 = ((1.0 - _2972) * _2961) + _2972;
                        float _2978 = _2968 * _2968;
                        float _2982 = ((isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))) * _2967) / ((_2978 * 0.699999988079071044921875) + 1.0);
                        float _2986 = (-0.0) - _2440;
                        float _2987 = (-0.0) - _2441;
                        float _2988 = (-0.0) - _2442;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _3003 = exp2(log2(1.0 / ((_2978 * 3.5) + 5.0)) * 0.25);
                        float _3004 = 1.0 - _771;
                        float _3011 = sqrt(1.0 - ((1.0 - (_3004 * _3004)) * (1.0 - (_3003 * _3003))));
                        float _3012 = _3011 * _3011;
                        float _3013 = _3012 * _3012;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3016 = _2995 + _2960;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3024 = dot(vec3(_711, _714, _717), vec3(_2993, _2994, _2995));
                        float _4350 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3028 = dot(vec3(_711, _714, _717), vec3(_3020 * _3014, _3020 * _3015, _3020 * _3016));
                        float _4361 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3031 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3035 = ((_3031 * _3031) * (_3013 + (-1.0))) + 1.0;
                        float _3036 = _2971 * _3012;
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _2961) + _3037;
                        float _4372 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3042 = 1.0 - _3012;
                        float _3052 = (0.5 / (((_3041 * ((_3027 * _3042) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_3041 * _3042) + _3012) * _3027))) * _3041;
                        float _4383 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3063 = (((_3013 * 3.1415927410125732421875) * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) / ((_3035 * _3035) * ((_2978 * 2.1991131305694580078125) + 3.141590118408203125))) * _2967;
                        _2815 = (_2982 * _2930.x) + _2888;
                        _2816 = (_2982 * _2930.y) + _2889;
                        _2817 = (_2982 * _2930.z) + _2890;
                        _2812 = (_3063 * _2947.x) + _2885;
                        _2813 = (_3063 * _2947.y) + _2886;
                        _2814 = (_3063 * _2947.z) + _2887;
                        if (_2892 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2817;
                            _2891 = _2892;
                        }
                    }
                    frontier_phi_66_pred = _2812;
                    frontier_phi_66_pred_1 = _2817;
                    frontier_phi_66_pred_2 = _2816;
                    frontier_phi_66_pred_3 = _2815;
                    frontier_phi_66_pred_4 = _2814;
                    frontier_phi_66_pred_5 = _2813;
                }
                _2588 = frontier_phi_66_pred;
                _2598 = frontier_phi_66_pred_1;
                _2596 = frontier_phi_66_pred_2;
                _2594 = frontier_phi_66_pred_3;
                _2592 = frontier_phi_66_pred_4;
                _2590 = frontier_phi_66_pred_5;
                uint _2747 = _2746 + 1u;
                if (_2747 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2740 = _2588;
                    _2741 = _2590;
                    _2742 = _2592;
                    _2743 = _2594;
                    _2744 = _2596;
                    _2745 = _2598;
                    _2746 = _2747;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
        }
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.z;
        uint _2604 = (_2602 >> 8u) & 15u;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((4294967295u << _2604) & _2486) == 0u)
        {
            _2708 = _2587;
            _2710 = _2589;
            _2712 = _2591;
            _2714 = _2593;
            _2716 = _2595;
            _2718 = _2597;
        }
        else
        {
            float _2733 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
            float _2734 = _2733 * _2440;
            float _2735 = _2733 * _2441;
            float _2736 = _2733 * _2442;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2604 < ((_2602 >> 12u) & 15u))
            {
                float _2709;
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2719;
                float _2868 = _2587;
                float _2869 = _2589;
                float _2870 = _2591;
                float _2871 = _2593;
                float _2872 = _2595;
                float _2873 = _2597;
                uint _2874 = _2604;
                uint _2883;
                bool _2884;
                for (;;)
                {
                    _2883 = texelFetch(g_lightClassification, int((((_2480 << 5u) + (_2466 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                    _2884 = _2883 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2884)
                    {
                        frontier_phi_77_pred = _2873;
                        frontier_phi_77_pred_1 = _2872;
                        frontier_phi_77_pred_2 = _2871;
                        frontier_phi_77_pred_3 = _2870;
                        frontier_phi_77_pred_4 = _2869;
                        frontier_phi_77_pred_5 = _2868;
                    }
                    else
                    {
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        float _3093 = _2871;
                        float _3094 = _2872;
                        float _3095 = _2873;
                        uint _3096 = _2883;
                        uint _3097;
                        vec4 _3122;
                        float _3123;
                        vec4 _3138;
                        vec3 _3150;
                        vec4 _3165;
                        vec4 _3180;
                        float _3226;
                        bool _3227;
                        for (;;)
                        {
                            uint _3107 = ((_2874 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3096));
                            _3097 = (_3096 + 4294967295u) & _3096;
                            uint _3109 = _3107 * 40u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            _3123 = _3122.w;
                            uint _3125 = (_3107 * 40u) + 4u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3140 = (_3107 * 40u) + 8u;
                            _3150 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x));
                            uint _3152 = (_3107 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3167 = (_3107 * 40u) + 20u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3107 * 40u) + 24u;
                            vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3201 = (_3107 * 40u) + 28u;
                            vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            _3226 = fma(_2442, _3214.z, fma(_2441, _3214.y, _3214.x * _2440)) + _3214.w;
                            _3227 = !((fma(_2442, _3195.z, fma(_2441, _3195.y, _3195.x * _2440)) + _3195.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3227)
                            {
                                float _3254 = _3122.x - _2440;
                                float _3255 = _3122.y - _2441;
                                float _3256 = _3122.z - _2442;
                                float _3257 = dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256));
                                float _3260 = inversesqrt(_3257);
                                float _3261 = _3260 * _3254;
                                float _3262 = _3260 * _3255;
                                float _3263 = _3260 * _3256;
                                float _3267 = 1.0 - (_3257 / (_3123 * _3123));
                                float _4394 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3272 = sqrt(_3257) * _3138.w;
                                float _3274 = 1.39999997615814208984375 / (_3272 + 1.39999997615814208984375);
                                float _3275 = _3274 * _3274;
                                float _3278 = ((1.0 - _3275) * dot(vec3(_3261, _3262, _3263), vec3(_711, _714, _717))) + _3275;
                                float _3281 = _3272 * _3272;
                                float _3285 = (fma(_2442, _3165.z, fma(_2441, _3165.y, _3165.x * _2440)) + _3165.w) / _3226;
                                float _3286 = (fma(_2442, _3180.z, fma(_2441, _3180.y, _3180.x * _2440)) + _3180.w) / _3226;
                                float _3290 = 1.0 - dot(vec2(_3285, _3286), vec2(_3285, _3286));
                                float _4410 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3292 = _3291 * (((isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))) * _3268) / ((_3281 * 0.699999988079071044921875) + 1.0));
                                float _3304 = exp2(log2(1.0 / ((_3281 * 3.5) + 5.0)) * 0.25);
                                float _3305 = 1.0 - _771;
                                float _3312 = sqrt(1.0 - ((1.0 - (_3305 * _3305)) * (1.0 - (_3304 * _3304))));
                                float _3313 = _3312 * _3312;
                                float _3314 = _3313 * _3313;
                                float _3315 = _3261 - _2734;
                                float _3316 = _3262 - _2735;
                                float _3317 = _3263 - _2736;
                                float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                                float _3325 = dot(vec3(_711, _714, _717), vec3((-0.0) - _2734, (-0.0) - _2735, (-0.0) - _2736));
                                float _4421 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3328 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3329 = dot(vec3(_711, _714, _717), vec3(_3321 * _3315, _3321 * _3316, _3321 * _3317));
                                float _4432 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3332 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3336 = ((_3332 * _3332) * (_3314 + (-1.0))) + 1.0;
                                float _3337 = _3274 * _3313;
                                float _3338 = _3337 * _3337;
                                float _3344 = ((1.0 - _3338) * dot(vec3(_711, _714, _717), vec3(_3261, _3262, _3263))) + _3338;
                                float _4443 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3345 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3346 = 1.0 - _3313;
                                float _3356 = (0.5 / (((_3345 * ((_3328 * _3346) + _3313)) + 9.9999999392252902907785028219223e-09) + (((_3345 * _3346) + _3313) * _3328))) * _3345;
                                float _4454 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3366 = (_3291 * _3268) * (((_3314 * 3.1415927410125732421875) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) / ((_3336 * _3336) * ((_3281 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3292 * _3138.y;
                                frontier_phi_83_pred_1 = _3292 * _3138.x;
                                frontier_phi_83_pred_2 = _3366 * _3150.z;
                                frontier_phi_83_pred_3 = _3366 * _3150.y;
                                frontier_phi_83_pred_4 = _3366 * _3150.x;
                                frontier_phi_83_pred_5 = _3292 * _3138.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3374 = frontier_phi_83_pred;
                            _3373 = frontier_phi_83_pred_1;
                            _3372 = frontier_phi_83_pred_2;
                            _3371 = frontier_phi_83_pred_3;
                            _3370 = frontier_phi_83_pred_4;
                            _3375 = frontier_phi_83_pred_5;
                            _3080 = _3373 + _3093;
                            _3081 = _3374 + _3094;
                            _3082 = _3375 + _3095;
                            _3077 = _3370 + _3090;
                            _3078 = _3371 + _3091;
                            _3079 = _3372 + _3092;
                            if (_3097 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3097;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3082;
                        frontier_phi_77_pred_1 = _3081;
                        frontier_phi_77_pred_2 = _3080;
                        frontier_phi_77_pred_3 = _3079;
                        frontier_phi_77_pred_4 = _3078;
                        frontier_phi_77_pred_5 = _3077;
                    }
                    _2719 = frontier_phi_77_pred;
                    _2717 = frontier_phi_77_pred_1;
                    _2715 = frontier_phi_77_pred_2;
                    _2713 = frontier_phi_77_pred_3;
                    _2711 = frontier_phi_77_pred_4;
                    _2709 = frontier_phi_77_pred_5;
                    uint _2875 = _2874 + 1u;
                    if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2868 = _2709;
                        _2869 = _2711;
                        _2870 = _2713;
                        _2871 = _2715;
                        _2872 = _2717;
                        _2873 = _2719;
                        _2874 = _2875;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2713;
                frontier_phi_58_59_ladder_1 = _2719;
                frontier_phi_58_59_ladder_2 = _2717;
                frontier_phi_58_59_ladder_3 = _2715;
                frontier_phi_58_59_ladder_4 = _2711;
                frontier_phi_58_59_ladder_5 = _2709;
            }
            else
            {
                frontier_phi_58_59_ladder = _2591;
                frontier_phi_58_59_ladder_1 = _2597;
                frontier_phi_58_59_ladder_2 = _2595;
                frontier_phi_58_59_ladder_3 = _2593;
                frontier_phi_58_59_ladder_4 = _2589;
                frontier_phi_58_59_ladder_5 = _2587;
            }
            _2708 = frontier_phi_58_59_ladder_5;
            _2710 = frontier_phi_58_59_ladder_4;
            _2712 = frontier_phi_58_59_ladder;
            _2714 = frontier_phi_58_59_ladder_3;
            _2716 = frontier_phi_58_59_ladder_2;
            _2718 = frontier_phi_58_59_ladder_1;
        }
        float _2723 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2499 = (_2723 * _2714) + _1954;
        _2501 = (_2723 * _2716) + _1956;
        _2503 = (_2723 * _2718) + _1958;
        _2505 = ((_2708 * 0.039999999105930328369140625) * _2723) + _2284;
        _2507 = ((_2710 * 0.039999999105930328369140625) * _2723) + _2286;
        _2509 = ((_2712 * 0.039999999105930328369140625) * _2723) + _2288;
    }
    else
    {
        _2499 = _1954;
        _2501 = _1956;
        _2503 = _1958;
        _2505 = _2284;
        _2507 = _2286;
        _2509 = _2288;
    }
    float _4470 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4481 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4492 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _2526 = ((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2499 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _755))) + ((_2505 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1592)) * cbPerFrame._m0[3u].x);
    float _2527 = ((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2501 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _755))) + ((_2507 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1592)) * cbPerFrame._m0[3u].x);
    float _2528 = ((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2503 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _755))) + ((_2509 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1592)) * cbPerFrame._m0[3u].x);
    uint _2529 = _260 + 6u;
    float _2537 = _692 / cbSceneParam._m0[86u].x;
    float _2538 = _693 / cbSceneParam._m0[86u].y;
    vec4 _2552 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, (log2((isnan(cbSceneParam._m0[77u].w) ? _613 : (isnan(_613) ? cbSceneParam._m0[77u].w : min(_613, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2554 = _2552.x;
    float _2555 = _2552.y;
    float _2556 = _2552.z;
    float _2557 = _2552.w;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_613 > cbSceneParam._m0[78u].w)
    {
        float _2612 = isnan(_613) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _613 : min(cbSceneParam._m0[80u].w, _613));
        float _2613 = _2612 / _613;
        float _2624 = _2613 * _665;
        float _2625 = _666 * _2613;
        float _2626 = (-0.0) - _2625;
        float _2628 = _2613 * _667;
        float _2630 = (cbSceneParam._m0[77u].w * _2626) / _2612;
        float _2631 = _2630 + cbSceneParam._m0[79u].w;
        float _2632 = cbSceneParam._m0[79u].w - _2625;
        float _2638 = sqrt(((_2624 * _2624) + (_2625 * _2625)) + (_2628 * _2628));
        float _2641 = (1.0 - (cbSceneParam._m0[77u].w / _2612)) * _2638;
        float _2646 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2648 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2825;
        if (abs((_2626 - _2630) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2825 = ((((_2631 > 0.0) ? exp2(_2646 * _2631) : (2.0 - exp2(_2648 * _2631))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2641;
        }
        else
        {
            float _2769 = 1.0 / cbSceneParam._m0[80u].x;
            float _2770 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : max(_2631, _2632));
            float _2771 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : min(_2631, _2632));
            float _2780 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : min(_2770, 0.0));
            float _2781 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : min(_2771, 0.0));
            _2825 = ((abs(_2638 / _2626) * cbSceneParam._m0[80u].y) * ((((_2780 - _2781) * 2.0) - ((exp2(_2646 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0)))) - exp2(_2646 * (isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0))))) * _2769)) - ((exp2(_2648 * _2780) - exp2(_2648 * _2781)) * _2769))) + (_2641 * cbSceneParam._m0[80u].z);
        }
        vec4 _2827 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, 1.0), 0.0);
        float _2836 = exp2((_2825 * (-1.44269502162933349609375)) * (1.0 - _2827.w));
        float _2837 = log2(_2836);
        float _2853 = log2(_2557);
        _2650 = (exp2(_2853 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2837 * cbSceneParam._m0[78u].x)) * _2827.x) / cbSceneParam._m0[78u].x)) + _2554;
        _2652 = (exp2(_2853 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2837 * cbSceneParam._m0[78u].y)) * _2827.y) / cbSceneParam._m0[78u].y)) + _2555;
        _2654 = (exp2(_2853 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2837 * cbSceneParam._m0[78u].z)) * _2827.z) / cbSceneParam._m0[78u].z)) + _2556;
        _2656 = _2836 * _2557;
    }
    else
    {
        _2650 = _2554;
        _2652 = _2555;
        _2654 = _2556;
        _2656 = _2557;
    }
    bool _2863;
    vec4 _2666;
    vec4 _2688;
    float _2690;
    float _2694;
    float _2695;
    float _2696;
    float _2697;
    bool _2707;
    for (;;)
    {
        _2666 = cbMatDynParam._m0[0u];
        float _2668 = roundEven(_2666.y);
        bool _2669 = _2668 == 3.0;
        float _2670 = log2(_2656);
        float _2677 = exp2(_2670 * cbSceneParam._m0[78u].x) * _2526;
        float _2678 = exp2(_2670 * cbSceneParam._m0[78u].y) * _2527;
        float _2679 = exp2(_2670 * cbSceneParam._m0[78u].z) * _2528;
        float _2686 = _681 + (-0.5);
        _2688 = cbMtdParam._m0[1u];
        _2690 = _2688.y * _2686;
        float _2693 = (_2668 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2694 = _2693 * (_2669 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2650)));
        _2695 = _2693 * (_2669 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2652)));
        _2696 = _2693 * (_2669 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2654)));
        _2697 = _2686 * 0.999000012874603271484375;
        _2707 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2707)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _2697) < 0.5)
            {
                _2863 = true;
                break;
            }
        }
        uint _2804 = _730 + uint(_2666.w);
        if ((cbInstanceData._m0[_2804].w < 1.0) && ((cbInstanceData._m0[_2804].w + _2697) < 0.5))
        {
            _2863 = true;
            break;
        }
        if ((_2690 + 1.0) < _2688.x)
        {
            _2863 = true;
            break;
        }
        _2863 = false;
        break;
    }
    float _3068;
    if (_2863)
    {
        discard_state = true;
        _3068 = 0.0;
    }
    else
    {
        _3068 = cbInstanceData._m0[_2529].w;
    }
    SV_Target.x = _2694;
    SV_Target.y = _2695;
    SV_Target.z = _2696;
    SV_Target.w = _3068;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2529].w;
    discard_exit();
}


