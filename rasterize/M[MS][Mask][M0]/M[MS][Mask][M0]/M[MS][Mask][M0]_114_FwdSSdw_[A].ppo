#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1492;
float _3873;
float _3874;
float _3875;
float _3876;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3885 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3896 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3907 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = _364.x * cbMtdParam._m0[11u].x;
    float _370 = _364.y * cbMtdParam._m0[11u].y;
    float _371 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _390 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _409.x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[24u].z) + _461) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3918 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _486 = (_479 * ((_390.x * cbMtdParam._m0[12u].x) - _369)) + _369;
    float _487 = (_479 * ((_390.y * cbMtdParam._m0[12u].y) - _370)) + _370;
    float _488 = (_479 * ((_390.z * cbMtdParam._m0[12u].z) - _371)) + _371;
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _527 = _525.x;
    float _537 = dot(vec4(_527, _525.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _551 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _409.y) * 2.0) - ((((_527 - _537) * cbMtdParam._m0[24u].z) + _537) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3929 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _559 = (_552 * ((_505.x * cbMtdParam._m0[13u].x) - _486)) + _486;
    float _560 = (_552 * ((_505.y * cbMtdParam._m0[13u].y) - _487)) + _487;
    float _561 = (_552 * ((_505.z * cbMtdParam._m0[13u].z) - _488)) + _488;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _301) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _302) + cbTextureTilingScale._m0[24u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _598 = _596.x;
    float _608 = dot(vec4(_598, _596.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _620 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _409.z) * 2.0) - ((((_598 - _608) * cbMtdParam._m0[24u].z) + _608) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3940 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _631 = (_338.x * cbMtdParam._m0[9u].x) * ((_621 * ((_579.x * cbMtdParam._m0[14u].x) - _559)) + _559);
    float _632 = (_338.y * cbMtdParam._m0[9u].y) * ((_621 * ((_579.y * cbMtdParam._m0[14u].y) - _560)) + _560);
    float _633 = (_338.z * cbMtdParam._m0[9u].z) * ((_621 * ((_579.z * cbMtdParam._m0[14u].z) - _561)) + _561);
    float _637 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _631;
    float _640 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _632;
    float _643 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _633;
    float _651 = (((_631 - _637) * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) + _637) * 4.55000019073486328125;
    float _653 = (((_632 - _640) * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) + _640) * 4.55000019073486328125;
    float _655 = (((_633 - _643) * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) + _643) * 4.55000019073486328125;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _714 = _712.x;
    float _715 = _712.y;
    float _716 = _712.z;
    float _723 = ((_695.x - _714) * _479) + _714;
    float _724 = ((_695.y - _715) * _479) + _715;
    float _725 = ((_695.z - _716) * _479) + _716;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _748 = ((_737.x - _723) * _552) + _723;
    float _749 = ((_737.y - _724) * _552) + _724;
    float _750 = ((_737.z - _725) * _552) + _725;
    vec4 _762 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _301) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _302) + cbTextureTilingScale._m0[23u].w));
    float _775 = ((_762.z - _750) * _621) + _750;
    float _778 = ((((_762.x - _748) * _621) + _748) * 2.0) + (-1.0);
    float _779 = ((((_762.y - _749) * _621) + _749) * 2.0) + (-1.0);
    float _780 = dot(vec2(_778, _779), vec2(_778, _779));
    float _3951 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _785 = sqrt(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))));
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _824 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _826 = _824.x;
    float _827 = 1.0 - _826;
    float _840 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_826 - _827) * cbMtdParam._m0[24u].w) + _827) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3962 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _841 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _848 = (_841 * (cbMtdParam._m0[17u].x - _651)) + _651;
    float _849 = (_841 * (cbMtdParam._m0[17u].y - _653)) + _653;
    float _850 = (_841 * (cbMtdParam._m0[17u].z - _655)) + _655;
    float _855 = (((_672.z - _775) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _775;
    float _859 = ((_799.z - _855) * cbMtdParam._m0[19u].w) + _855;
    vec4 _872 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _879 = (_872.x * 2.0) + (-1.0);
    float _880 = (_872.y * 2.0) + (-1.0);
    float _881 = dot(vec2(_879, _880), vec2(_879, _880));
    float _3973 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _889 = (_841 * (_872.z - _859)) + _859;
    float _898 = (_778 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_672.x * 2.0) + (-1.0)))) + (((_799.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _899 = (_779 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_672.y * 2.0) + (-1.0)))) + (((_799.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _911 = (((_879 - _898) + (cbMtdParam._m0[21u].x * _898)) * _841) + _898;
    float _912 = (((_880 - _899) + (cbMtdParam._m0[21u].x * _899)) * _841) + _899;
    float _913 = (_841 * (sqrt(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) - _785)) + _785;
    float _917 = cbMtdParam._m0[22u].x + _799.w;
    float _920 = fma(_913, _248 * NORMAL.x, fma(_912, _255 * TANGENT.x, (_241 * _233) * _911));
    float _923 = fma(_913, _248 * NORMAL.y, fma(_912, _255 * TANGENT.y, (_241 * _234) * _911));
    float _926 = fma(_913, _248 * NORMAL.z, fma(_912, _255 * TANGENT.z, (_241 * _235) * _911));
    float _930 = inversesqrt(dot(vec3(_920, _923, _926), vec3(_920, _923, _926)));
    float _931 = _930 * _920;
    float _932 = _930 * _923;
    float _933 = _930 * _926;
    float _3984 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _934 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4006 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4017 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4028 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _952 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1003 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _993);
    float _1004 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _993);
    float _1005 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _993);
    float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
    float _1010 = _1003 * _1009;
    float _1011 = _1004 * _1009;
    float _1012 = _1005 * _1009;
    vec4 _1017 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1019 = _1017.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1173 = sqrt(((_1003 * _1003) + (_1004 * _1004)) + (_1005 * _1005));
        float _1179 = (cbMatDynParam._m0[5u].x * _1173) + cbMatDynParam._m0[5u].y;
        float _4039 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1184 = (cbMatDynParam._m0[5u].z * _1173) + cbMatDynParam._m0[5u].w;
        float _4050 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) - _1180)) + _1180) < ((_1019 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1030 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1031 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1049 = fma(_933, cbSceneParam._m0[5u].z, fma(_932, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _931));
    float _1052 = fma(_933, cbSceneParam._m0[6u].z, fma(_932, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _931));
    float _1055 = fma(_933, cbSceneParam._m0[7u].z, fma(_932, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _931));
    uint _1068 = _282 + 9u;
    uint _1069 = _1068 + uint(cbMatDynParam._m0[0u].w);
    float _1075 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_1069].x;
    float _1076 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1069].y;
    float _1077 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1069].z;
    float _4061 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    vec4 _1089 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1030, cbSceneParam._m0[86u].y * _1031));
    float _1093 = ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * TEXCOORD_5.w) * _1089.x;
    float _1094 = dot(vec3(_931, _932, _933), vec3(_1010, _1011, _1012));
    float _1097 = _1094 * 2.0;
    float _1101 = (_1097 * _931) - _1010;
    float _1102 = (_1097 * _932) - _1011;
    float _1103 = (_1097 * _933) - _1012;
    float _1107 = abs(dot(vec3(_1010, _1011, _1012), vec3(_931, _932, _933)));
    float _4094 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1109 = sqrt(_934);
    float _1122 = exp2((_1109 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1109 * 3.0));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1491;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1216 = fma(_1162, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154));
        float _1220 = fma(_1162, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154));
        float _1224 = fma(_1162, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154));
        float _1249 = _1154 + _931;
        float _1250 = _1158 + _932;
        float _1251 = _1162 + _933;
        float _1261 = fma(_1251, cbModelParam._m0[26u].z, fma(_1250, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1249)) - _1216;
        float _1262 = fma(_1251, cbModelParam._m0[27u].z, fma(_1250, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1249)) - _1220;
        float _1263 = fma(_1251, cbModelParam._m0[28u].z, fma(_1250, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1249)) - _1224;
        float _1267 = inversesqrt(dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263)));
        float _1280 = ((_1267 * _1261) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1216 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1267 * _1262) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1220 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1267 * _1263) / cbModelParam._m0[34u].z) + ((((((_1224 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        float _1319 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1285.x + (-0.5));
        float _1321 = _1319 * (_1285.y + (-0.5));
        float _1322 = _1319 * (_1285.z + (-0.5));
        float _1329 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1292.x + (-0.5));
        float _1331 = _1329 * (_1292.y + (-0.5));
        float _1332 = _1329 * (_1292.z + (-0.5));
        float _1339 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1299.x + (-0.5));
        float _1341 = _1339 * (_1299.y + (-0.5));
        float _1342 = _1339 * (_1299.z + (-0.5));
        float _1349 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1306.x + (-0.5));
        float _1351 = _1349 * (_1306.y + (-0.5));
        float _1352 = _1349 * (_1306.z + (-0.5));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = _1320 * 0.5;
        float _1357 = _1330 * 0.5;
        float _1358 = _1340 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1373 = (dot(vec3(_931, _932, _933), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1383 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4142 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1385 + 1.0))) + _1390) * _1353;
        float _1400 = _1321 * 0.5;
        float _1401 = _1331 * 0.5;
        float _1402 = _1341 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_931, _932, _933), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4175 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1427 + 1.0))) + _1432) * _1354;
        float _1442 = _1322 * 0.5;
        float _1443 = _1332 * 0.5;
        float _1444 = _1342 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_931, _932, _933), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4208 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1469 + 1.0))) + _1474) * _1355;
        _1491 = _1322;
        _1493 = _1321;
        _1494 = _1320;
        _1495 = _1332;
        _1496 = _1331;
        _1497 = _1330;
        _1498 = _1342;
        _1499 = _1341;
        _1500 = _1340;
        _1501 = _1355;
        _1502 = _1354;
        _1503 = _1353;
        _1504 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
    }
    else
    {
        _1491 = _1492;
        _1493 = _1492;
        _1494 = _1492;
        _1495 = _1492;
        _1496 = _1492;
        _1497 = _1492;
        _1498 = _1492;
        _1499 = _1492;
        _1500 = _1492;
        _1501 = _1492;
        _1502 = _1492;
        _1503 = _1492;
        _1504 = 0.0;
        _1505 = 0.0;
        _1506 = 0.0;
    }
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1532 = fma(_1162, cbModelParam._m0[30u].z, fma(_1158, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154));
        float _1536 = fma(_1162, cbModelParam._m0[31u].z, fma(_1158, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154));
        float _1540 = fma(_1162, cbModelParam._m0[32u].z, fma(_1158, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154));
        float _1563 = _1154 + _931;
        float _1564 = _1158 + _932;
        float _1565 = _1162 + _933;
        float _1575 = fma(_1565, cbModelParam._m0[30u].z, fma(_1564, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1563)) - _1532;
        float _1576 = fma(_1565, cbModelParam._m0[31u].z, fma(_1564, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1563)) - _1536;
        float _1577 = fma(_1565, cbModelParam._m0[32u].z, fma(_1564, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1563)) - _1540;
        float _1581 = inversesqrt(dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577)));
        float _1594 = ((_1581 * _1575) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1532 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1595 = ((_1581 * _1576) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1536 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1596 = ((_1581 * _1577) / cbModelParam._m0[35u].z) + ((((((_1540 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        float _1631 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1598.x + (-0.5));
        float _1633 = _1631 * (_1598.y + (-0.5));
        float _1634 = _1631 * (_1598.z + (-0.5));
        float _1641 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1605.x + (-0.5));
        float _1643 = _1641 * (_1605.y + (-0.5));
        float _1644 = _1641 * (_1605.z + (-0.5));
        float _1651 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1612.x + (-0.5));
        float _1653 = _1651 * (_1612.y + (-0.5));
        float _1654 = _1651 * (_1612.z + (-0.5));
        float _1661 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1619.x + (-0.5));
        float _1663 = _1661 * (_1619.y + (-0.5));
        float _1664 = _1661 * (_1619.z + (-0.5));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1668 = _1632 * 0.5;
        float _1669 = _1642 * 0.5;
        float _1670 = _1652 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_931, _932, _933), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4271 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1695 + 1.0))) + _1700) * _1665;
        float _1710 = _1633 * 0.5;
        float _1711 = _1643 * 0.5;
        float _1712 = _1653 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_931, _932, _933), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1666 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4304 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1737 + 1.0))) + _1742) * _1666;
        float _1752 = _1634 * 0.5;
        float _1753 = _1644 * 0.5;
        float _1754 = _1654 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_931, _932, _933), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1667 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4337 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1779 + 1.0))) + _1784) * _1667;
        _1801 = _1634;
        _1802 = _1633;
        _1803 = _1632;
        _1804 = _1644;
        _1805 = _1643;
        _1806 = _1642;
        _1807 = _1654;
        _1808 = _1653;
        _1809 = _1652;
        _1810 = _1667;
        _1811 = _1666;
        _1812 = _1665;
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
        _1814 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
        _1815 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
    }
    else
    {
        _1801 = _1492;
        _1802 = _1492;
        _1803 = _1492;
        _1804 = _1492;
        _1805 = _1492;
        _1806 = _1492;
        _1807 = _1492;
        _1808 = _1492;
        _1809 = _1492;
        _1810 = _1492;
        _1811 = _1492;
        _1812 = _1492;
        _1813 = 0.0;
        _1814 = 0.0;
        _1815 = 0.0;
    }
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1504)) + _1504;
    float _1826 = (cbModelParam._m0[1u].x * (_1814 - _1505)) + _1505;
    float _1827 = (cbModelParam._m0[1u].x * (_1815 - _1506)) + _1506;
    float _1848 = fma(_1827, cbSceneParam._m0[89u].z, fma(_1826, cbSceneParam._m0[89u].y, _1825 * cbSceneParam._m0[89u].x));
    float _1851 = fma(_1827, cbSceneParam._m0[90u].z, fma(_1826, cbSceneParam._m0[90u].y, _1825 * cbSceneParam._m0[90u].x));
    float _1854 = fma(_1827, cbSceneParam._m0[91u].z, fma(_1826, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1825));
    float _1869 = _1101 * 0.5;
    float _1870 = _1102 * 0.5;
    float _1871 = _1103 * 0.5;
    float _1872 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1803, _1806, _1809, _1812));
    float _1875 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1802, _1805, _1808, _1811));
    float _1878 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1912;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1885 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1491, _1495, _1498, _1501));
        float _1889 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1493, _1496, _1499, _1502));
        float _1893 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1494, _1497, _1500, _1503));
        float _1900 = dot(vec4(cbModelParam._m0[39u]), vec4(_1869, _1870, _1871, 1.0));
        _1912 = dot(vec3(isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1912 = 1.0;
    }
    float _1923;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1914 = dot(vec4(cbModelParam._m0[40u]), vec4(_1869, _1870, _1871, 1.0));
        _1923 = dot(vec3(isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1914) ? 0.0 : (isnan(0.0) ? _1914 : max(0.0, _1914))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1923 = 1.0;
    }
    float _1927 = (_1923 * cbModelParam._m0[1u].x) + (_1912 * (1.0 - cbModelParam._m0[1u].x));
    float _1937 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _934);
    float _1938 = isnan(_1937) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1937 : min(cbModelParam._m0[25u].z, _1937));
    float _2018;
    float _2020;
    float _2022;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1985 = fma(_1162, cbModelParam._m0[13u].z, fma(_1158, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1154)) + cbModelParam._m0[13u].w;
        float _1989 = fma(_1162, cbModelParam._m0[14u].z, fma(_1158, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1154)) + cbModelParam._m0[14u].w;
        float _1993 = fma(_1162, cbModelParam._m0[15u].z, fma(_1158, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1154)) + cbModelParam._m0[15u].w;
        float _1996 = fma(_1103, cbModelParam._m0[13u].z, fma(_1102, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101));
        float _1999 = fma(_1103, cbModelParam._m0[14u].z, fma(_1102, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101));
        float _2002 = fma(_1103, cbModelParam._m0[15u].z, fma(_1102, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101));
        float _2030;
        if (_1996 > 0.0)
        {
            _2030 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2030 = frontier_phi_17_15_ladder;
        }
        float _2252;
        if (_1999 > 0.0)
        {
            _2252 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2252 = frontier_phi_26_22_ladder;
        }
        float _2498;
        if (_2002 > 0.0)
        {
            _2498 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2498 = frontier_phi_38_33_ladder;
        }
        float _2500 = isnan(_2252) ? _2030 : (isnan(_2030) ? _2252 : min(_2030, _2252));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1996) + _1985;
        float _2506 = (_2501 * _1999) + _1989;
        float _2507 = (_2501 * _2002) + _1993;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2508;
        float _2512 = _2508 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 > _2512) || ((_2506 < _2510) || ((_2505 < _2510) || (_2505 > _2512))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2507, cbModelParam._m0[9u].z, fma(_2506, cbModelParam._m0[9u].y, _2505 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2507, cbModelParam._m0[10u].z, fma(_2506, cbModelParam._m0[10u].y, _2505 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2507, cbModelParam._m0[11u].z, fma(_2506, cbModelParam._m0[11u].y, _2505 * cbModelParam._m0[11u].x))), _1938);
            frontier_phi_16_38_ladder = _2631.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2631.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2631.x * cbModelParam._m0[1u].y;
        }
        _2018 = frontier_phi_16_38_ladder_2;
        _2020 = frontier_phi_16_38_ladder_1;
        _2022 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2006 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1101, _1102, _1103), _1938);
        _2018 = _2006.x * cbModelParam._m0[1u].y;
        _2020 = _2006.y * cbModelParam._m0[1u].y;
        _2022 = _2006.z * cbModelParam._m0[1u].y;
    }
    float _2026 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _934);
    float _2027 = isnan(_2026) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2026 : min(cbModelParam._m0[25u].w, _2026));
    float _2117;
    float _2119;
    float _2121;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2081 = fma(_1162, cbModelParam._m0[21u].z, fma(_1158, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1154)) + cbModelParam._m0[21u].w;
        float _2085 = fma(_1162, cbModelParam._m0[22u].z, fma(_1158, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1154)) + cbModelParam._m0[22u].w;
        float _2089 = fma(_1162, cbModelParam._m0[23u].z, fma(_1158, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1154)) + cbModelParam._m0[23u].w;
        float _2092 = fma(_1103, cbModelParam._m0[21u].z, fma(_1102, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101));
        float _2095 = fma(_1103, cbModelParam._m0[22u].z, fma(_1102, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101));
        float _2098 = fma(_1103, cbModelParam._m0[23u].z, fma(_1102, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101));
        float _2257;
        if (_2092 > 0.0)
        {
            _2257 = abs((1.0 - _2081) / _2092);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2081 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2257 = frontier_phi_28_24_ladder;
        }
        float _2525;
        if (_2095 > 0.0)
        {
            _2525 = abs((1.0 - _2085) / _2095);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2085 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2525 = frontier_phi_40_35_ladder;
        }
        float _2730;
        if (_2098 > 0.0)
        {
            _2730 = abs((1.0 - _2089) / _2098);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2089 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2730 = frontier_phi_49_46_ladder;
        }
        float _2732 = isnan(_2525) ? _2257 : (isnan(_2257) ? _2525 : min(_2257, _2525));
        float _2733 = isnan(_2730) ? _2732 : (isnan(_2732) ? _2730 : min(_2732, _2730));
        float _2737 = (_2733 * _2092) + _2081;
        float _2738 = (_2733 * _2095) + _2085;
        float _2739 = (_2733 * _2098) + _2089;
        float _2740 = _2733 * 9.9999997473787516355514526367188e-05;
        float _2741 = (-1.0) - _2740;
        float _2743 = _2740 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2739 > _2743) || ((_2739 < _2741) || ((_2738 > _2743) || ((_2738 < _2741) || ((_2737 < _2741) || (_2737 > _2743))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2938 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2739, cbModelParam._m0[17u].z, fma(_2738, cbModelParam._m0[17u].y, _2737 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2739, cbModelParam._m0[18u].z, fma(_2738, cbModelParam._m0[18u].y, _2737 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2739, cbModelParam._m0[19u].z, fma(_2738, cbModelParam._m0[19u].y, _2737 * cbModelParam._m0[19u].x))), _2027);
            frontier_phi_25_49_ladder = _2938.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2938.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2938.x * cbModelParam._m0[1u].z;
        }
        _2117 = frontier_phi_25_49_ladder_2;
        _2119 = frontier_phi_25_49_ladder_1;
        _2121 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2101 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1101, _1102, _1103), _2027);
        _2117 = _2101.x * cbModelParam._m0[1u].z;
        _2119 = _2101.y * cbModelParam._m0[1u].z;
        _2121 = _2101.z * cbModelParam._m0[1u].z;
    }
    float _2133 = ((((1.0 - _1122) * ((_1109 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1122 * _1109)) * _1093;
    float _2134 = _2133 * ((cbModelParam._m0[1u].w * (_2117 - _2018)) + _2018);
    float _2135 = _2133 * ((cbModelParam._m0[1u].w * (_2119 - _2020)) + _2020);
    float _2136 = _2133 * ((cbModelParam._m0[1u].w * (_2121 - _2022)) + _2022);
    float _2139 = fma(_2136, cbSceneParam._m0[89u].z, fma(_2135, cbSceneParam._m0[89u].y, _2134 * cbSceneParam._m0[89u].x));
    float _2142 = fma(_2136, cbSceneParam._m0[90u].z, fma(_2135, cbSceneParam._m0[90u].y, _2134 * cbSceneParam._m0[90u].x));
    float _2145 = fma(_2136, cbSceneParam._m0[91u].z, fma(_2135, cbSceneParam._m0[91u].y, _2134 * cbSceneParam._m0[91u].x));
    vec4 _2153 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1030, _1031));
    float _2155 = _2153.w;
    float _2167 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2155);
    float _2168 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2155);
    float _2169 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2155);
    uvec4 _2173 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2175 = _2173.x * 14u;
    uint _2176 = _2175 + 13u;
    float _2183 = _1093 + (-1.0);
    float _2188 = (cbLight._m0[_2176].x * _2183) + 1.0;
    float _2189 = (cbLight._m0[_2176].y * _2183) + 1.0;
    float _2190 = (cbLight._m0[_2176].z * _2183) + 1.0;
    float _2191 = (cbLight._m0[_2176].w * _2183) + 1.0;
    uint _2192 = _2175 + 5u;
    float _2198 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
    uint _2202 = _2175 + 4u;
    float _2211 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
    uint _2215 = _2175 | 1u;
    float _2226 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_931, _932, _933));
    float _2229 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_931, _932, _933));
    float _4473 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _4484 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2234 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * 0.3183098733425140380859375;
    float _2236 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2243 = ((cbLight._m0[_2192].x * _2198) * _2236) + (((cbLight._m0[_2202].x * _2167) * _2211) * _2234);
    float _2244 = ((_2198 * cbLight._m0[_2192].y) * _2236) + (((cbLight._m0[_2202].y * _2168) * _2211) * _2234);
    float _2245 = ((_2198 * cbLight._m0[_2192].z) * _2236) + (((cbLight._m0[_2202].z * _2169) * _2211) * _2234);
    uvec4 _2249 = floatBitsToUint(cbLight._m0[_2175 + 12u]);
    bool _2251 = _2249.x == 0u;
    float _2262;
    float _2264;
    float _2266;
    if (_2251)
    {
        _2262 = _2243;
        _2264 = _2244;
        _2266 = _2245;
    }
    else
    {
        uint _2270 = _2175 + 6u;
        float _2286 = (dot(vec3(cbLight._m0[_2175 + 2u].xyz), vec3(_931, _932, _933)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4495 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2289 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2262 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2243;
        _2264 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2244;
        _2266 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2245;
    }
    bool _2269 = _2249.y == 0u;
    float _2307;
    float _2309;
    float _2311;
    if (_2269)
    {
        _2307 = _2262;
        _2309 = _2264;
        _2311 = _2266;
    }
    else
    {
        uint _2469 = _2175 + 7u;
        float _2485 = (dot(vec3(cbLight._m0[_2175 + 3u].xyz), vec3(_931, _932, _933)) * 0.5) + 0.5;
        float _2486 = _2485 * _2485;
        float _4511 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2487 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2488 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2307 = (((cbLight._m0[_2469].x * 0.3183098733425140380859375) * _2487) * _2488) + _2262;
        _2309 = (((cbLight._m0[_2469].y * 0.3183098733425140380859375) * _2487) * _2488) + _2264;
        _2311 = (((cbLight._m0[_2469].z * 0.3183098733425140380859375) * _2487) * _2488) + _2266;
    }
    uint _2314 = _2175 + 8u;
    float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _934) * 0.949999988079071044921875);
    float _2328 = _2327 * _2327;
    float _2329 = cbLight._m0[_2175].x + _1010;
    float _2330 = cbLight._m0[_2175].y + _1011;
    float _2331 = cbLight._m0[_2175].z + _1012;
    float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
    float _2336 = _2335 * _2329;
    float _2337 = _2335 * _2330;
    float _2338 = _2335 * _2331;
    float _2339 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2175].xyz));
    float _4527 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _4538 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _2343 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2344 = dot(vec3(_931, _932, _933), vec3(_2336, _2337, _2338));
    float _4549 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2348 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2336, _2337, _2338));
    float _4560 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = _2328 * _2328;
    float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
    float _2367 = (exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2368 = 1.0 - _2328;
    float _2379 = (0.5 / (((_2343 * ((_2342 * _2368) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2368) + _2328) * _2342))) * _2342;
    float _4571 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2381 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
    uint _2395 = _2175 + 9u;
    float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _934) * 0.949999988079071044921875);
    float _2407 = _2406 * _2406;
    float _2408 = cbLight._m0[_2215].x + _1010;
    float _2409 = cbLight._m0[_2215].y + _1011;
    float _2410 = cbLight._m0[_2215].z + _1012;
    float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
    float _2415 = _2414 * _2408;
    float _2416 = _2414 * _2409;
    float _2417 = _2414 * _2410;
    float _2418 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2215].xyz));
    float _4582 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2422 = dot(vec3(_931, _932, _933), vec3(_2415, _2416, _2417));
    float _4593 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2426 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2415, _2416, _2417));
    float _4604 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = _2407 * _2407;
    float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
    float _2443 = (exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2444 = 1.0 - _2407;
    float _2454 = (0.5 / (((_2343 * ((_2421 * _2444) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2444) + _2407) * _2421))) * _2421;
    float _4615 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2456 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
    float _2466 = (((_2443 * cbLight._m0[_2395].x) * _2456) * _2198) + ((((cbLight._m0[_2314].x * _2167) * _2367) * _2381) * _2211);
    float _2467 = (((_2443 * cbLight._m0[_2395].y) * _2456) * _2198) + ((((cbLight._m0[_2314].y * _2168) * _2367) * _2381) * _2211);
    float _2468 = (((_2443 * cbLight._m0[_2395].z) * _2456) * _2198) + ((((cbLight._m0[_2314].z * _2169) * _2367) * _2381) * _2211);
    float _2530;
    float _2532;
    float _2534;
    if (_2251)
    {
        _2530 = _2466;
        _2532 = _2467;
        _2534 = _2468;
    }
    else
    {
        uint _2536 = _2175 + 2u;
        uint _2540 = _2175 + 10u;
        float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _934) * 0.949999988079071044921875);
        float _2555 = _2554 * _2554;
        float _2556 = cbLight._m0[_2536].x + _1010;
        float _2557 = cbLight._m0[_2536].y + _1011;
        float _2558 = cbLight._m0[_2536].z + _1012;
        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
        float _2563 = _2562 * _2556;
        float _2564 = _2562 * _2557;
        float _2565 = _2562 * _2558;
        float _2566 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2536].xyz));
        float _4626 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2570 = dot(vec3(_931, _932, _933), vec3(_2563, _2564, _2565));
        float _4637 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2574 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2563, _2564, _2565));
        float _4648 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2578 = _2555 * _2555;
        float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
        float _2591 = (exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2592 = 1.0 - _2555;
        float _2602 = (0.5 / (((_2343 * ((_2569 * _2592) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2592) + _2555) * _2569))) * _2569;
        float _4659 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2604 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
        float _2605 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2530 = (((_2591 * cbLight._m0[_2540].x) * _2604) * _2605) + _2466;
        _2532 = (((_2591 * cbLight._m0[_2540].y) * _2604) * _2605) + _2467;
        _2534 = (((_2591 * cbLight._m0[_2540].z) * _2604) * _2605) + _2468;
    }
    float _2640;
    float _2642;
    float _2644;
    if (_2269)
    {
        _2640 = _2530;
        _2642 = _2532;
        _2644 = _2534;
    }
    else
    {
        uint _2651 = _2175 + 3u;
        uint _2655 = _2175 + 11u;
        float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2651].w)) * _934) * 0.949999988079071044921875);
        float _2670 = _2669 * _2669;
        float _2671 = cbLight._m0[_2651].x + _1010;
        float _2672 = cbLight._m0[_2651].y + _1011;
        float _2673 = cbLight._m0[_2651].z + _1012;
        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
        float _2678 = _2677 * _2671;
        float _2679 = _2677 * _2672;
        float _2680 = _2677 * _2673;
        float _2681 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2651].xyz));
        float _4675 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2685 = dot(vec3(_931, _932, _933), vec3(_2678, _2679, _2680));
        float _4686 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2689 = dot(vec3(cbLight._m0[_2651].xyz), vec3(_2678, _2679, _2680));
        float _4697 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2693 = _2670 * _2670;
        float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
        float _2706 = (exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2707 = 1.0 - _2670;
        float _2717 = (0.5 / (((_2343 * ((_2684 * _2707) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2707) + _2670) * _2684))) * _2684;
        float _4708 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2719 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
        float _2720 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2640 = (((_2706 * cbLight._m0[_2655].x) * _2719) * _2720) + _2530;
        _2642 = (((_2706 * cbLight._m0[_2655].y) * _2719) * _2720) + _2532;
        _2644 = (((_2706 * cbLight._m0[_2655].z) * _2719) * _2720) + _2534;
    }
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_2173.y == 0u)
    {
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2796 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2795;
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2795;
        float _2798 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2795;
        uvec4 _2810 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2811 = _2810.x;
        uint _2822 = uint((float(_2810.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1031) / _2811))) + floor(float(uint(cbSceneParam._m0[85u].x * _1030) / _2811)));
        float _2832 = (log2(_2798 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2833 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        uint _2836 = uint(isnan(14.0) ? _2833 : (isnan(_2833) ? 14.0 : min(_2833, 14.0)));
        uvec4 _2841 = texelFetch(g_lightClusterGridBuffer, int(((_2836 << 2u) + (_2822 << 6u)) >> 2u));
        uint _2842 = _2841.x;
        uint _2843 = _2810.z;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        if (((((1u << ((_2843 >> 4u) & 15u)) + 4294967295u) & _2842) == 0u) || ((_2843 & 240u) == 0u))
        {
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
        }
        else
        {
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            uint _3102 = 0u;
            uint _3111;
            bool _3112;
            for (;;)
            {
                _3111 = texelFetch(g_lightClassification, int((((_2836 << 5u) + (_2822 << 9u)) + (_3102 << 2u)) >> 2u)).x;
                _3112 = _3111 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3112)
                {
                    frontier_phi_66_pred = _3096;
                    frontier_phi_66_pred_1 = _3101;
                    frontier_phi_66_pred_2 = _3100;
                    frontier_phi_66_pred_3 = _3099;
                    frontier_phi_66_pred_4 = _3098;
                    frontier_phi_66_pred_5 = _3097;
                }
                else
                {
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    uint _3247;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3111;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    for (;;)
                    {
                        uint _3251 = uint(findLSB(_3247)) + (_3102 << 5u);
                        uint _3248 = (_3247 + 4294967295u) & _3247;
                        uint _3253 = _3251 * 48u;
                        vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 3u)).x));
                        uint _3273 = (_3251 * 48u) + 4u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 3u)).x));
                        uint _3292 = (_3251 * 48u) + 8u;
                        vec3 _3303 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x));
                        float _3307 = _3267.x - _2796;
                        float _3308 = _3267.y - _2797;
                        float _3309 = _3267.z - _2798;
                        float _3310 = dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309));
                        float _3313 = inversesqrt(_3310);
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3317 = dot(vec3(_1049, _1052, _1055), vec3(_3314, _3315, _3316));
                        float _3322 = 1.0 - (_3310 * _3267.w);
                        float _4734 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3323 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3324 = sqrt(_3310) * _3286.w;
                        float _3327 = 1.39999997615814208984375 / (_3324 + 1.39999997615814208984375);
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3317) + _3328;
                        float _3334 = _3324 * _3324;
                        float _3338 = ((isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))) * _3323) / ((_3334 * 0.699999988079071044921875) + 1.0);
                        float _3342 = (-0.0) - _2796;
                        float _3343 = (-0.0) - _2797;
                        float _3344 = (-0.0) - _2798;
                        float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3359 = exp2(log2(1.0 / ((_3334 * 3.5) + 5.0)) * 0.25);
                        float _3360 = 1.0 - _1109;
                        float _3367 = sqrt(1.0 - ((1.0 - (_3360 * _3360)) * (1.0 - (_3359 * _3359))));
                        float _3368 = _3367 * _3367;
                        float _3369 = _3368 * _3368;
                        float _3370 = _3349 + _3314;
                        float _3371 = _3350 + _3315;
                        float _3372 = _3351 + _3316;
                        float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                        float _3380 = dot(vec3(_1049, _1052, _1055), vec3(_3349, _3350, _3351));
                        float _4750 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3383 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3384 = dot(vec3(_1049, _1052, _1055), vec3(_3376 * _3370, _3376 * _3371, _3376 * _3372));
                        float _4761 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3391 = ((_3387 * _3387) * (_3369 + (-1.0))) + 1.0;
                        float _3392 = _3327 * _3368;
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3317) + _3393;
                        float _4772 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3397 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3398 = 1.0 - _3368;
                        float _3408 = (0.5 / (((_3397 * ((_3383 * _3398) + _3368)) + 9.9999999392252902907785028219223e-09) + (((_3397 * _3398) + _3368) * _3383))) * _3397;
                        float _4783 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3419 = (((_3369 * 3.1415927410125732421875) * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) / ((_3391 * _3391) * ((_3334 * 2.1991131305694580078125) + 3.141590118408203125))) * _3323;
                        _3171 = (_3338 * _3286.x) + _3244;
                        _3172 = (_3338 * _3286.y) + _3245;
                        _3173 = (_3338 * _3286.z) + _3246;
                        _3168 = (_3419 * _3303.x) + _3241;
                        _3169 = (_3419 * _3303.y) + _3242;
                        _3170 = (_3419 * _3303.z) + _3243;
                        if (_3248 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3248;
                        }
                    }
                    frontier_phi_66_pred = _3168;
                    frontier_phi_66_pred_1 = _3173;
                    frontier_phi_66_pred_2 = _3172;
                    frontier_phi_66_pred_3 = _3171;
                    frontier_phi_66_pred_4 = _3170;
                    frontier_phi_66_pred_5 = _3169;
                }
                _2944 = frontier_phi_66_pred;
                _2954 = frontier_phi_66_pred_1;
                _2952 = frontier_phi_66_pred_2;
                _2950 = frontier_phi_66_pred_3;
                _2948 = frontier_phi_66_pred_4;
                _2946 = frontier_phi_66_pred_5;
                uint _3103 = _3102 + 1u;
                if (_3103 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3096 = _2944;
                    _3097 = _2946;
                    _3098 = _2948;
                    _3099 = _2950;
                    _3100 = _2952;
                    _3101 = _2954;
                    _3102 = _3103;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
        }
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.z;
        uint _2960 = (_2958 >> 8u) & 15u;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        if (((4294967295u << _2960) & _2842) == 0u)
        {
            _3064 = _2943;
            _3066 = _2945;
            _3068 = _2947;
            _3070 = _2949;
            _3072 = _2951;
            _3074 = _2953;
        }
        else
        {
            float _3089 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
            float _3090 = _3089 * _2796;
            float _3091 = _3089 * _2797;
            float _3092 = _3089 * _2798;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2960 < ((_2958 >> 12u) & 15u))
            {
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3224 = _2943;
                float _3225 = _2945;
                float _3226 = _2947;
                float _3227 = _2949;
                float _3228 = _2951;
                float _3229 = _2953;
                uint _3230 = _2960;
                uint _3239;
                bool _3240;
                for (;;)
                {
                    _3239 = texelFetch(g_lightClassification, int((((_2836 << 5u) + (_2822 << 9u)) + (_3230 << 2u)) >> 2u)).x;
                    _3240 = _3239 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3240)
                    {
                        frontier_phi_77_pred = _3229;
                        frontier_phi_77_pred_1 = _3228;
                        frontier_phi_77_pred_2 = _3227;
                        frontier_phi_77_pred_3 = _3226;
                        frontier_phi_77_pred_4 = _3225;
                        frontier_phi_77_pred_5 = _3224;
                    }
                    else
                    {
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3446 = _3224;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        float _3449 = _3227;
                        float _3450 = _3228;
                        float _3451 = _3229;
                        uint _3452 = _3239;
                        uint _3453;
                        vec4 _3478;
                        float _3479;
                        vec4 _3494;
                        vec3 _3506;
                        vec4 _3521;
                        vec4 _3536;
                        float _3582;
                        bool _3583;
                        for (;;)
                        {
                            uint _3463 = ((_3230 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3452));
                            _3453 = (_3452 + 4294967295u) & _3452;
                            uint _3465 = _3463 * 40u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3479 = _3478.w;
                            uint _3481 = (_3463 * 40u) + 4u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3463 * 40u) + 8u;
                            _3506 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x));
                            uint _3508 = (_3463 * 40u) + 16u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3523 = (_3463 * 40u) + 20u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3463 * 40u) + 24u;
                            vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3557 = (_3463 * 40u) + 28u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            _3582 = fma(_2798, _3570.z, fma(_2797, _3570.y, _3570.x * _2796)) + _3570.w;
                            _3583 = !((fma(_2798, _3551.z, fma(_2797, _3551.y, _3551.x * _2796)) + _3551.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3583)
                            {
                                float _3610 = _3478.x - _2796;
                                float _3611 = _3478.y - _2797;
                                float _3612 = _3478.z - _2798;
                                float _3613 = dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612));
                                float _3616 = inversesqrt(_3613);
                                float _3617 = _3616 * _3610;
                                float _3618 = _3616 * _3611;
                                float _3619 = _3616 * _3612;
                                float _3623 = 1.0 - (_3613 / (_3479 * _3479));
                                float _4794 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3628 = sqrt(_3613) * _3494.w;
                                float _3630 = 1.39999997615814208984375 / (_3628 + 1.39999997615814208984375);
                                float _3631 = _3630 * _3630;
                                float _3634 = ((1.0 - _3631) * dot(vec3(_3617, _3618, _3619), vec3(_1049, _1052, _1055))) + _3631;
                                float _3637 = _3628 * _3628;
                                float _3641 = (fma(_2798, _3521.z, fma(_2797, _3521.y, _3521.x * _2796)) + _3521.w) / _3582;
                                float _3642 = (fma(_2798, _3536.z, fma(_2797, _3536.y, _3536.x * _2796)) + _3536.w) / _3582;
                                float _3646 = 1.0 - dot(vec2(_3641, _3642), vec2(_3641, _3642));
                                float _4810 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3648 = _3647 * (((isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0))) * _3624) / ((_3637 * 0.699999988079071044921875) + 1.0));
                                float _3660 = exp2(log2(1.0 / ((_3637 * 3.5) + 5.0)) * 0.25);
                                float _3661 = 1.0 - _1109;
                                float _3668 = sqrt(1.0 - ((1.0 - (_3661 * _3661)) * (1.0 - (_3660 * _3660))));
                                float _3669 = _3668 * _3668;
                                float _3670 = _3669 * _3669;
                                float _3671 = _3617 - _3090;
                                float _3672 = _3618 - _3091;
                                float _3673 = _3619 - _3092;
                                float _3677 = inversesqrt(dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673)));
                                float _3681 = dot(vec3(_1049, _1052, _1055), vec3((-0.0) - _3090, (-0.0) - _3091, (-0.0) - _3092));
                                float _4821 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3684 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3685 = dot(vec3(_1049, _1052, _1055), vec3(_3677 * _3671, _3677 * _3672, _3677 * _3673));
                                float _4832 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3688 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3692 = ((_3688 * _3688) * (_3670 + (-1.0))) + 1.0;
                                float _3693 = _3630 * _3669;
                                float _3694 = _3693 * _3693;
                                float _3700 = ((1.0 - _3694) * dot(vec3(_1049, _1052, _1055), vec3(_3617, _3618, _3619))) + _3694;
                                float _4843 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3702 = 1.0 - _3669;
                                float _3712 = (0.5 / (((_3701 * ((_3684 * _3702) + _3669)) + 9.9999999392252902907785028219223e-09) + (((_3701 * _3702) + _3669) * _3684))) * _3701;
                                float _4854 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3722 = (_3647 * _3624) * (((_3670 * 3.1415927410125732421875) * (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) / ((_3692 * _3692) * ((_3637 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3648 * _3494.y;
                                frontier_phi_83_pred_1 = _3648 * _3494.x;
                                frontier_phi_83_pred_2 = _3722 * _3506.z;
                                frontier_phi_83_pred_3 = _3722 * _3506.y;
                                frontier_phi_83_pred_4 = _3722 * _3506.x;
                                frontier_phi_83_pred_5 = _3648 * _3494.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3730 = frontier_phi_83_pred;
                            _3729 = frontier_phi_83_pred_1;
                            _3728 = frontier_phi_83_pred_2;
                            _3727 = frontier_phi_83_pred_3;
                            _3726 = frontier_phi_83_pred_4;
                            _3731 = frontier_phi_83_pred_5;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            if (_3453 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3453;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3438;
                        frontier_phi_77_pred_1 = _3437;
                        frontier_phi_77_pred_2 = _3436;
                        frontier_phi_77_pred_3 = _3435;
                        frontier_phi_77_pred_4 = _3434;
                        frontier_phi_77_pred_5 = _3433;
                    }
                    _3075 = frontier_phi_77_pred;
                    _3073 = frontier_phi_77_pred_1;
                    _3071 = frontier_phi_77_pred_2;
                    _3069 = frontier_phi_77_pred_3;
                    _3067 = frontier_phi_77_pred_4;
                    _3065 = frontier_phi_77_pred_5;
                    uint _3231 = _3230 + 1u;
                    if (_3231 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3224 = _3065;
                        _3225 = _3067;
                        _3226 = _3069;
                        _3227 = _3071;
                        _3228 = _3073;
                        _3229 = _3075;
                        _3230 = _3231;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3069;
                frontier_phi_58_59_ladder_1 = _3075;
                frontier_phi_58_59_ladder_2 = _3073;
                frontier_phi_58_59_ladder_3 = _3071;
                frontier_phi_58_59_ladder_4 = _3067;
                frontier_phi_58_59_ladder_5 = _3065;
            }
            else
            {
                frontier_phi_58_59_ladder = _2947;
                frontier_phi_58_59_ladder_1 = _2953;
                frontier_phi_58_59_ladder_2 = _2951;
                frontier_phi_58_59_ladder_3 = _2949;
                frontier_phi_58_59_ladder_4 = _2945;
                frontier_phi_58_59_ladder_5 = _2943;
            }
            _3064 = frontier_phi_58_59_ladder_5;
            _3066 = frontier_phi_58_59_ladder_4;
            _3068 = frontier_phi_58_59_ladder;
            _3070 = frontier_phi_58_59_ladder_3;
            _3072 = frontier_phi_58_59_ladder_2;
            _3074 = frontier_phi_58_59_ladder_1;
        }
        float _3079 = isnan(1.0) ? _1093 : (isnan(_1093) ? 1.0 : min(_1093, 1.0));
        _2855 = (_3079 * _3070) + _2307;
        _2857 = (_3079 * _3072) + _2309;
        _2859 = (_3079 * _3074) + _2311;
        _2861 = ((_3064 * 0.039999999105930328369140625) * _3079) + _2640;
        _2863 = ((_3066 * 0.039999999105930328369140625) * _3079) + _2642;
        _2865 = ((_3068 * 0.039999999105930328369140625) * _3079) + _2644;
    }
    else
    {
        _2855 = _2307;
        _2857 = _2309;
        _2859 = _2311;
        _2861 = _2640;
        _2863 = _2642;
        _2865 = _2644;
    }
    float _4870 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _4881 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _4892 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _2882 = ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2855 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1093))) + ((_2861 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1927)) * cbPerFrame._m0[3u].x);
    float _2883 = ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2857 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1093))) + ((_2863 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1927)) * cbPerFrame._m0[3u].x);
    float _2884 = ((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2859 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1093))) + ((_2865 + ((isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))) * _1927)) * cbPerFrame._m0[3u].x);
    uint _2885 = _282 + 6u;
    float _2893 = _1030 / cbSceneParam._m0[86u].x;
    float _2894 = _1031 / cbSceneParam._m0[86u].y;
    vec4 _2908 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2893, _2894, (log2((isnan(cbSceneParam._m0[77u].w) ? _952 : (isnan(_952) ? cbSceneParam._m0[77u].w : min(_952, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2910 = _2908.x;
    float _2911 = _2908.y;
    float _2912 = _2908.z;
    float _2913 = _2908.w;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_952 > cbSceneParam._m0[78u].w)
    {
        float _2968 = isnan(_952) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _952 : min(cbSceneParam._m0[80u].w, _952));
        float _2969 = _2968 / _952;
        float _2980 = _2969 * _1003;
        float _2981 = _1004 * _2969;
        float _2982 = (-0.0) - _2981;
        float _2984 = _2969 * _1005;
        float _2986 = (cbSceneParam._m0[77u].w * _2982) / _2968;
        float _2987 = _2986 + cbSceneParam._m0[79u].w;
        float _2988 = cbSceneParam._m0[79u].w - _2981;
        float _2994 = sqrt(((_2980 * _2980) + (_2981 * _2981)) + (_2984 * _2984));
        float _2997 = (1.0 - (cbSceneParam._m0[77u].w / _2968)) * _2994;
        float _3002 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3004 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3181;
        if (abs((_2982 - _2986) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3181 = ((((_2987 > 0.0) ? exp2(_3002 * _2987) : (2.0 - exp2(_3004 * _2987))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2997;
        }
        else
        {
            float _3125 = 1.0 / cbSceneParam._m0[80u].x;
            float _3126 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : max(_2987, _2988));
            float _3127 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : min(_2987, _2988));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            _3181 = ((abs(_2994 / _2982) * cbSceneParam._m0[80u].y) * ((((_3136 - _3137) * 2.0) - ((exp2(_3002 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0)))) - exp2(_3002 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))))) * _3125)) - ((exp2(_3004 * _3136) - exp2(_3004 * _3137)) * _3125))) + (_2997 * cbSceneParam._m0[80u].z);
        }
        vec4 _3183 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2893, _2894, 1.0), 0.0);
        float _3192 = exp2((_3181 * (-1.44269502162933349609375)) * (1.0 - _3183.w));
        float _3193 = log2(_3192);
        float _3209 = log2(_2913);
        _3006 = (exp2(_3209 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].x)) * _3183.x) / cbSceneParam._m0[78u].x)) + _2910;
        _3008 = (exp2(_3209 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].y)) * _3183.y) / cbSceneParam._m0[78u].y)) + _2911;
        _3010 = (exp2(_3209 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].z)) * _3183.z) / cbSceneParam._m0[78u].z)) + _2912;
        _3012 = _3192 * _2913;
    }
    else
    {
        _3006 = _2910;
        _3008 = _2911;
        _3010 = _2912;
        _3012 = _2913;
    }
    bool _3219;
    vec4 _3022;
    vec4 _3044;
    float _3046;
    float _3050;
    float _3051;
    float _3052;
    float _3053;
    bool _3063;
    for (;;)
    {
        _3022 = cbMatDynParam._m0[0u];
        float _3024 = roundEven(_3022.y);
        bool _3025 = _3024 == 3.0;
        float _3026 = log2(_3012);
        float _3033 = exp2(_3026 * cbSceneParam._m0[78u].x) * _2882;
        float _3034 = exp2(_3026 * cbSceneParam._m0[78u].y) * _2883;
        float _3035 = exp2(_3026 * cbSceneParam._m0[78u].z) * _2884;
        float _3042 = _1019 + (-0.5);
        _3044 = cbMtdParam._m0[1u];
        _3046 = _3044.y * _3042;
        float _3049 = (_3024 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3050 = _3049 * (_3025 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3006)));
        _3051 = _3049 * (_3025 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3008)));
        _3052 = _3049 * (_3025 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3010)));
        _3053 = _3042 * 0.999000012874603271484375;
        _3063 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3063)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3053) < 0.5)
            {
                _3219 = true;
                break;
            }
        }
        uint _3160 = _1068 + uint(_3022.w);
        if ((cbInstanceData._m0[_3160].w < 1.0) && ((cbInstanceData._m0[_3160].w + _3053) < 0.5))
        {
            _3219 = true;
            break;
        }
        if ((_3046 + 1.0) < _3044.x)
        {
            _3219 = true;
            break;
        }
        _3219 = false;
        break;
    }
    float _3424;
    if (_3219)
    {
        discard_state = true;
        _3424 = 0.0;
    }
    else
    {
        _3424 = cbInstanceData._m0[_2885].w;
    }
    SV_Target.x = _3050;
    SV_Target.y = _3051;
    SV_Target.z = _3052;
    SV_Target.w = _3424;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2885].w;
    discard_exit();
}


