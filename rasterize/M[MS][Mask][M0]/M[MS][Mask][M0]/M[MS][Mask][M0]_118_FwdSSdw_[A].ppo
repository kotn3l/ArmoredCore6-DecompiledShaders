#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1577;
float _3958;
float _3959;
float _3960;
float _3961;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3970 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3981 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3992 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _433 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _447 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _464 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_435 - _447) * cbMtdParam._m0[24u].z) + _447) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4003 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _472 = (_465 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _473 = (_465 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _474 = (_465 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _513 = _511.x;
    float _523 = dot(vec4(_513, _511.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _537 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_513 - _523) * cbMtdParam._m0[24u].z) + _523) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4014 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _545 = (_538 * ((_491.x * cbMtdParam._m0[13u].x) - _472)) + _472;
    float _546 = (_538 * ((_491.y * cbMtdParam._m0[13u].y) - _473)) + _473;
    float _547 = (_538 * ((_491.z * cbMtdParam._m0[13u].z) - _474)) + _474;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _584 = _582.x;
    float _594 = dot(vec4(_584, _582.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _606 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _395.z) * 2.0) - ((((_584 - _594) * cbMtdParam._m0[24u].z) + _594) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4025 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _614 = (_607 * ((_565.x * cbMtdParam._m0[14u].x) - _545)) + _545;
    float _615 = (_607 * ((_565.y * cbMtdParam._m0[14u].y) - _546)) + _546;
    float _616 = (_607 * ((_565.z * cbMtdParam._m0[14u].z) - _547)) + _547;
    float _620 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _614;
    float _623 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _615;
    float _626 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _616;
    float _633 = ((_614 - _620) * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) + _620;
    float _634 = ((_615 - _623) * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) + _623;
    float _635 = ((_616 - _626) * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) + _626;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _694 = _692.x;
    float _695 = _692.y;
    float _696 = _692.z;
    float _703 = ((_675.x - _694) * _465) + _694;
    float _704 = ((_675.y - _695) * _465) + _695;
    float _705 = ((_675.z - _696) * _465) + _696;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _728 = ((_717.x - _703) * _538) + _703;
    float _729 = ((_717.y - _704) * _538) + _704;
    float _730 = ((_717.z - _705) * _538) + _705;
    vec4 _742 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _755 = ((_742.z - _730) * _607) + _730;
    float _758 = ((((_742.x - _728) * _607) + _728) * 2.0) + (-1.0);
    float _759 = ((((_742.y - _729) * _607) + _729) * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _4036 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _765 = sqrt(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))));
    vec4 _779 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _804 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _806 = _804.x;
    float _807 = 1.0 - _806;
    float _813 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _816 = ((isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : min(_813, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _825 = (_816 - ((((((_806 - _807) * cbMtdParam._m0[24u].w) + _807) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _816))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4057 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _826 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _833 = (_826 * (cbMtdParam._m0[17u].x - _633)) + _633;
    float _834 = (_826 * (cbMtdParam._m0[17u].y - _634)) + _634;
    float _835 = (_826 * (cbMtdParam._m0[17u].z - _635)) + _635;
    vec4 _847 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _849 = _847.x;
    float _850 = 1.0 - _849;
    float _877 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_849 - _850) * cbMtdParam._m0[24u].y) + _850) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4068 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _878 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _886 = ((((cbMtdParam._m0[10u].x - _833) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _878) + _833;
    float _887 = ((((cbMtdParam._m0[10u].y - _834) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _878) + _834;
    float _888 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _835)) * _878) + _835;
    float _893 = (((_652.z - _755) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _755;
    float _897 = ((_779.z - _893) * cbMtdParam._m0[19u].w) + _893;
    vec4 _911 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _918 = (_911.x * 2.0) + (-1.0);
    float _919 = (_911.y * 2.0) + (-1.0);
    float _920 = dot(vec2(_918, _919), vec2(_918, _919));
    float _4079 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _928 = (_826 * (_911.z - _897)) + _897;
    float _931 = ((cbMtdParam._m0[23u].y - _928) * _878) + _928;
    vec4 _950 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _956 = (_950.x * 2.0) + (-1.0);
    float _957 = (_950.y * 2.0) + (-1.0);
    float _958 = dot(vec2(_956, _957), vec2(_956, _957));
    float _4090 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _972 = (_758 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_652.x * 2.0) + (-1.0)))) + (((_779.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _973 = (_759 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_652.y * 2.0) + (-1.0)))) + (((_779.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _985 = (((_918 - _972) + (cbMtdParam._m0[21u].x * _972)) * _826) + _972;
    float _986 = (((_919 - _973) + (cbMtdParam._m0[21u].x * _973)) * _826) + _973;
    float _987 = (_826 * (sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) - _765)) + _765;
    float _998 = (((_956 - _985) + (_985 * cbMtdParam._m0[22u].z)) * _878) + _985;
    float _999 = (((_957 - _986) + (_986 * cbMtdParam._m0[22u].z)) * _878) + _986;
    float _1000 = ((sqrt(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) - _987) * _878) + _987;
    float _1002 = cbMtdParam._m0[22u].x + _779.w;
    float _1005 = fma(_1000, _261 * NORMAL.x, fma(_999, _268 * TANGENT.x, (_254 * _246) * _998));
    float _1008 = fma(_1000, _261 * NORMAL.y, fma(_999, _268 * TANGENT.y, (_254 * _247) * _998));
    float _1011 = fma(_1000, _261 * NORMAL.z, fma(_999, _268 * TANGENT.z, (_254 * _248) * _998));
    float _1015 = inversesqrt(dot(vec3(_1005, _1008, _1011), vec3(_1005, _1008, _1011)));
    float _1016 = _1015 * _1005;
    float _1017 = _1015 * _1008;
    float _1018 = _1015 * _1011;
    float _4101 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _1019 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _4123 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4134 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4145 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _1037 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1088 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1078);
    float _1089 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1078);
    float _1090 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1078);
    float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
    float _1095 = _1088 * _1094;
    float _1096 = _1089 * _1094;
    float _1097 = _1090 * _1094;
    vec4 _1102 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1104 = _1102.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1258 = sqrt(((_1088 * _1088) + (_1089 * _1089)) + (_1090 * _1090));
        float _1264 = (cbMatDynParam._m0[5u].x * _1258) + cbMatDynParam._m0[5u].y;
        float _4156 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1269 = (cbMatDynParam._m0[5u].z * _1258) + cbMatDynParam._m0[5u].w;
        float _4167 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) - _1265)) + _1265) < ((_1104 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1115 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1116 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1134 = fma(_1018, cbSceneParam._m0[5u].z, fma(_1017, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1016));
    float _1137 = fma(_1018, cbSceneParam._m0[6u].z, fma(_1017, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1016));
    float _1140 = fma(_1018, cbSceneParam._m0[7u].z, fma(_1017, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1016));
    uint _1153 = _293 + 9u;
    uint _1154 = _1153 + uint(cbMatDynParam._m0[0u].w);
    float _1160 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_1154].x;
    float _1161 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * cbInstanceData._m0[_1154].y;
    float _1162 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * cbInstanceData._m0[_1154].z;
    float _4178 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1163 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1164 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _4200 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _1165 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    vec4 _1174 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1115, cbSceneParam._m0[86u].y * _1116));
    float _1178 = ((isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * TEXCOORD_5.w) * _1174.x;
    float _1179 = dot(vec3(_1016, _1017, _1018), vec3(_1095, _1096, _1097));
    float _1182 = _1179 * 2.0;
    float _1186 = (_1182 * _1016) - _1095;
    float _1187 = (_1182 * _1017) - _1096;
    float _1188 = (_1182 * _1018) - _1097;
    float _1192 = abs(dot(vec3(_1095, _1096, _1097), vec3(_1016, _1017, _1018)));
    float _4211 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1194 = sqrt(_1019);
    float _1207 = exp2((_1194 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1194 * 3.0));
    float _1239 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1243 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1247 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1576;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1301 = fma(_1247, cbModelParam._m0[26u].z, fma(_1243, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1239));
        float _1305 = fma(_1247, cbModelParam._m0[27u].z, fma(_1243, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1239));
        float _1309 = fma(_1247, cbModelParam._m0[28u].z, fma(_1243, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1239));
        float _1334 = _1239 + _1016;
        float _1335 = _1243 + _1017;
        float _1336 = _1247 + _1018;
        float _1346 = fma(_1336, cbModelParam._m0[26u].z, fma(_1335, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1334)) - _1301;
        float _1347 = fma(_1336, cbModelParam._m0[27u].z, fma(_1335, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1334)) - _1305;
        float _1348 = fma(_1336, cbModelParam._m0[28u].z, fma(_1335, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1334)) - _1309;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1365 = ((_1352 * _1346) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1301 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1352 * _1347) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1305 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1352 * _1348) / cbModelParam._m0[34u].z) + ((((((_1309 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        float _1404 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1370.x + (-0.5));
        float _1406 = _1404 * (_1370.y + (-0.5));
        float _1407 = _1404 * (_1370.z + (-0.5));
        float _1414 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1377.x + (-0.5));
        float _1416 = _1414 * (_1377.y + (-0.5));
        float _1417 = _1414 * (_1377.z + (-0.5));
        float _1424 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1384.x + (-0.5));
        float _1426 = _1424 * (_1384.y + (-0.5));
        float _1427 = _1424 * (_1384.z + (-0.5));
        float _1434 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1391.x + (-0.5));
        float _1436 = _1434 * (_1391.y + (-0.5));
        float _1437 = _1434 * (_1391.z + (-0.5));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = _1405 * 0.5;
        float _1442 = _1415 * 0.5;
        float _1443 = _1425 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1458 = (dot(vec3(_1016, _1017, _1018), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1468 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4259 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1470 + 1.0))) + _1475) * _1438;
        float _1485 = _1406 * 0.5;
        float _1486 = _1416 * 0.5;
        float _1487 = _1426 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_1016, _1017, _1018), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4292 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1512 + 1.0))) + _1517) * _1439;
        float _1527 = _1407 * 0.5;
        float _1528 = _1417 * 0.5;
        float _1529 = _1427 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_1016, _1017, _1018), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4325 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1554 + 1.0))) + _1559) * _1440;
        _1576 = _1407;
        _1578 = _1406;
        _1579 = _1405;
        _1580 = _1417;
        _1581 = _1416;
        _1582 = _1415;
        _1583 = _1427;
        _1584 = _1426;
        _1585 = _1425;
        _1586 = _1440;
        _1587 = _1439;
        _1588 = _1438;
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1590 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1591 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
    }
    else
    {
        _1576 = _1577;
        _1578 = _1577;
        _1579 = _1577;
        _1580 = _1577;
        _1581 = _1577;
        _1582 = _1577;
        _1583 = _1577;
        _1584 = _1577;
        _1585 = _1577;
        _1586 = _1577;
        _1587 = _1577;
        _1588 = _1577;
        _1589 = 0.0;
        _1590 = 0.0;
        _1591 = 0.0;
    }
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1617 = fma(_1247, cbModelParam._m0[30u].z, fma(_1243, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1239));
        float _1621 = fma(_1247, cbModelParam._m0[31u].z, fma(_1243, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1239));
        float _1625 = fma(_1247, cbModelParam._m0[32u].z, fma(_1243, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1239));
        float _1648 = _1239 + _1016;
        float _1649 = _1243 + _1017;
        float _1650 = _1247 + _1018;
        float _1660 = fma(_1650, cbModelParam._m0[30u].z, fma(_1649, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1648)) - _1617;
        float _1661 = fma(_1650, cbModelParam._m0[31u].z, fma(_1649, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1648)) - _1621;
        float _1662 = fma(_1650, cbModelParam._m0[32u].z, fma(_1649, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1648)) - _1625;
        float _1666 = inversesqrt(dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662)));
        float _1679 = ((_1666 * _1660) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1617 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1680 = ((_1666 * _1661) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1621 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1681 = ((_1666 * _1662) / cbModelParam._m0[35u].z) + ((((((_1625 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1683 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1679, _1680, _1681), 0.0);
        vec4 _1690 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1679, _1680, _1681), 0.0);
        vec4 _1697 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1679, _1680, _1681), 0.0);
        vec4 _1704 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1679, _1680, _1681), 0.0);
        float _1716 = exp2((_1683.w + (-0.5)) * 20.0) * 2.0;
        float _1717 = _1716 * (_1683.x + (-0.5));
        float _1718 = _1716 * (_1683.y + (-0.5));
        float _1719 = _1716 * (_1683.z + (-0.5));
        float _1726 = exp2((_1690.w + (-0.5)) * 20.0) * 2.0;
        float _1727 = _1726 * (_1690.x + (-0.5));
        float _1728 = _1726 * (_1690.y + (-0.5));
        float _1729 = _1726 * (_1690.z + (-0.5));
        float _1736 = exp2((_1697.w + (-0.5)) * 20.0) * 2.0;
        float _1737 = _1736 * (_1697.x + (-0.5));
        float _1738 = _1736 * (_1697.y + (-0.5));
        float _1739 = _1736 * (_1697.z + (-0.5));
        float _1746 = exp2((_1704.w + (-0.5)) * 20.0) * 2.0;
        float _1747 = _1746 * (_1704.x + (-0.5));
        float _1748 = _1746 * (_1704.y + (-0.5));
        float _1749 = _1746 * (_1704.z + (-0.5));
        float _1750 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1751 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1752 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1753 = _1717 * 0.5;
        float _1754 = _1727 * 0.5;
        float _1755 = _1737 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_1016, _1017, _1018), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1750 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4388 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1780 + 1.0))) + _1785) * _1750;
        float _1795 = _1718 * 0.5;
        float _1796 = _1728 * 0.5;
        float _1797 = _1738 * 0.5;
        float _1798 = dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797));
        float _1803 = (_1798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1798);
        float _1811 = (dot(vec3(_1016, _1017, _1018), vec3(_1803 * _1795, _1803 * _1796, _1803 * _1797)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797)) / (_1751 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1822 = _1821 * 2.0;
        float _1826 = (1.0 - _1821) / (_1821 + 1.0);
        float _4421 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1836 = ((((1.0 - _1827) * (_1822 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1822 + 1.0))) + _1827) * _1751;
        float _1837 = _1719 * 0.5;
        float _1838 = _1729 * 0.5;
        float _1839 = _1739 * 0.5;
        float _1840 = dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839));
        float _1845 = (_1840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1840);
        float _1853 = (dot(vec3(_1016, _1017, _1018), vec3(_1845 * _1837, _1845 * _1838, _1845 * _1839)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1862 = sqrt(((_1838 * _1838) + (_1837 * _1837)) + (_1839 * _1839)) / (_1752 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1864 = _1863 * 2.0;
        float _1868 = (1.0 - _1863) / (_1863 + 1.0);
        float _4454 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1878 = ((((1.0 - _1869) * (_1864 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1864 + 1.0))) + _1869) * _1752;
        _1886 = _1719;
        _1887 = _1718;
        _1888 = _1717;
        _1889 = _1729;
        _1890 = _1728;
        _1891 = _1727;
        _1892 = _1739;
        _1893 = _1738;
        _1894 = _1737;
        _1895 = _1752;
        _1896 = _1751;
        _1897 = _1750;
        _1898 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
        _1899 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)));
        _1900 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)));
    }
    else
    {
        _1886 = _1577;
        _1887 = _1577;
        _1888 = _1577;
        _1889 = _1577;
        _1890 = _1577;
        _1891 = _1577;
        _1892 = _1577;
        _1893 = _1577;
        _1894 = _1577;
        _1895 = _1577;
        _1896 = _1577;
        _1897 = _1577;
        _1898 = 0.0;
        _1899 = 0.0;
        _1900 = 0.0;
    }
    float _1910 = (cbModelParam._m0[1u].x * (_1898 - _1589)) + _1589;
    float _1911 = (cbModelParam._m0[1u].x * (_1899 - _1590)) + _1590;
    float _1912 = (cbModelParam._m0[1u].x * (_1900 - _1591)) + _1591;
    float _1933 = fma(_1912, cbSceneParam._m0[89u].z, fma(_1911, cbSceneParam._m0[89u].y, _1910 * cbSceneParam._m0[89u].x));
    float _1936 = fma(_1912, cbSceneParam._m0[90u].z, fma(_1911, cbSceneParam._m0[90u].y, _1910 * cbSceneParam._m0[90u].x));
    float _1939 = fma(_1912, cbSceneParam._m0[91u].z, fma(_1911, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1910));
    float _1954 = _1186 * 0.5;
    float _1955 = _1187 * 0.5;
    float _1956 = _1188 * 0.5;
    float _1957 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1888, _1891, _1894, _1897));
    float _1960 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1887, _1890, _1893, _1896));
    float _1963 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1886, _1889, _1892, _1895));
    float _1997;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1970 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1576, _1580, _1583, _1586));
        float _1974 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1578, _1581, _1584, _1587));
        float _1978 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1579, _1582, _1585, _1588));
        float _1985 = dot(vec4(cbModelParam._m0[39u]), vec4(_1954, _1955, _1956, 1.0));
        _1997 = dot(vec3(isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)), isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0)), isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1985) ? 0.0 : (isnan(0.0) ? _1985 : max(0.0, _1985))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1997 = 1.0;
    }
    float _2008;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1999 = dot(vec4(cbModelParam._m0[40u]), vec4(_1954, _1955, _1956, 1.0));
        _2008 = dot(vec3(isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)), isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1999) ? 0.0 : (isnan(0.0) ? _1999 : max(0.0, _1999))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2008 = 1.0;
    }
    float _2012 = (_2008 * cbModelParam._m0[1u].x) + (_1997 * (1.0 - cbModelParam._m0[1u].x));
    float _2022 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1019);
    float _2023 = isnan(_2022) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2022 : min(cbModelParam._m0[25u].z, _2022));
    float _2103;
    float _2105;
    float _2107;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2070 = fma(_1247, cbModelParam._m0[13u].z, fma(_1243, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1239)) + cbModelParam._m0[13u].w;
        float _2074 = fma(_1247, cbModelParam._m0[14u].z, fma(_1243, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1239)) + cbModelParam._m0[14u].w;
        float _2078 = fma(_1247, cbModelParam._m0[15u].z, fma(_1243, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1239)) + cbModelParam._m0[15u].w;
        float _2081 = fma(_1188, cbModelParam._m0[13u].z, fma(_1187, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1186));
        float _2084 = fma(_1188, cbModelParam._m0[14u].z, fma(_1187, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1186));
        float _2087 = fma(_1188, cbModelParam._m0[15u].z, fma(_1187, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1186));
        float _2115;
        if (_2081 > 0.0)
        {
            _2115 = abs((1.0 - _2070) / _2081);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2070 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2115 = frontier_phi_17_15_ladder;
        }
        float _2337;
        if (_2084 > 0.0)
        {
            _2337 = abs((1.0 - _2074) / _2084);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2074 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2337 = frontier_phi_26_22_ladder;
        }
        float _2583;
        if (_2087 > 0.0)
        {
            _2583 = abs((1.0 - _2078) / _2087);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2078 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2583 = frontier_phi_38_33_ladder;
        }
        float _2585 = isnan(_2337) ? _2115 : (isnan(_2115) ? _2337 : min(_2115, _2337));
        float _2586 = isnan(_2583) ? _2585 : (isnan(_2585) ? _2583 : min(_2585, _2583));
        float _2590 = (_2586 * _2081) + _2070;
        float _2591 = (_2586 * _2084) + _2074;
        float _2592 = (_2586 * _2087) + _2078;
        float _2593 = _2586 * 9.9999997473787516355514526367188e-05;
        float _2595 = (-1.0) - _2593;
        float _2597 = _2593 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2592 > _2597) || ((_2592 < _2595) || ((_2591 > _2597) || ((_2591 < _2595) || ((_2590 < _2595) || (_2590 > _2597))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2592, cbModelParam._m0[9u].z, fma(_2591, cbModelParam._m0[9u].y, _2590 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2592, cbModelParam._m0[10u].z, fma(_2591, cbModelParam._m0[10u].y, _2590 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2592, cbModelParam._m0[11u].z, fma(_2591, cbModelParam._m0[11u].y, _2590 * cbModelParam._m0[11u].x))), _2023);
            frontier_phi_16_38_ladder = _2716.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2716.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2716.x * cbModelParam._m0[1u].y;
        }
        _2103 = frontier_phi_16_38_ladder_2;
        _2105 = frontier_phi_16_38_ladder_1;
        _2107 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2091 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1186, _1187, _1188), _2023);
        _2103 = _2091.x * cbModelParam._m0[1u].y;
        _2105 = _2091.y * cbModelParam._m0[1u].y;
        _2107 = _2091.z * cbModelParam._m0[1u].y;
    }
    float _2111 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1019);
    float _2112 = isnan(_2111) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2111 : min(cbModelParam._m0[25u].w, _2111));
    float _2202;
    float _2204;
    float _2206;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2166 = fma(_1247, cbModelParam._m0[21u].z, fma(_1243, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1239)) + cbModelParam._m0[21u].w;
        float _2170 = fma(_1247, cbModelParam._m0[22u].z, fma(_1243, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1239)) + cbModelParam._m0[22u].w;
        float _2174 = fma(_1247, cbModelParam._m0[23u].z, fma(_1243, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1239)) + cbModelParam._m0[23u].w;
        float _2177 = fma(_1188, cbModelParam._m0[21u].z, fma(_1187, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1186));
        float _2180 = fma(_1188, cbModelParam._m0[22u].z, fma(_1187, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1186));
        float _2183 = fma(_1188, cbModelParam._m0[23u].z, fma(_1187, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1186));
        float _2342;
        if (_2177 > 0.0)
        {
            _2342 = abs((1.0 - _2166) / _2177);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2177 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2166 + 1.0) / _2177);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2342 = frontier_phi_28_24_ladder;
        }
        float _2610;
        if (_2180 > 0.0)
        {
            _2610 = abs((1.0 - _2170) / _2180);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2170 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2610 = frontier_phi_40_35_ladder;
        }
        float _2815;
        if (_2183 > 0.0)
        {
            _2815 = abs((1.0 - _2174) / _2183);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2183 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2174 + 1.0) / _2183);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2815 = frontier_phi_49_46_ladder;
        }
        float _2817 = isnan(_2610) ? _2342 : (isnan(_2342) ? _2610 : min(_2342, _2610));
        float _2818 = isnan(_2815) ? _2817 : (isnan(_2817) ? _2815 : min(_2817, _2815));
        float _2822 = (_2818 * _2177) + _2166;
        float _2823 = (_2818 * _2180) + _2170;
        float _2824 = (_2818 * _2183) + _2174;
        float _2825 = _2818 * 9.9999997473787516355514526367188e-05;
        float _2826 = (-1.0) - _2825;
        float _2828 = _2825 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2824 > _2828) || ((_2824 < _2826) || ((_2823 > _2828) || ((_2823 < _2826) || ((_2822 < _2826) || (_2822 > _2828))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2824, cbModelParam._m0[17u].z, fma(_2823, cbModelParam._m0[17u].y, _2822 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2824, cbModelParam._m0[18u].z, fma(_2823, cbModelParam._m0[18u].y, _2822 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2824, cbModelParam._m0[19u].z, fma(_2823, cbModelParam._m0[19u].y, _2822 * cbModelParam._m0[19u].x))), _2112);
            frontier_phi_25_49_ladder = _3023.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3023.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3023.x * cbModelParam._m0[1u].z;
        }
        _2202 = frontier_phi_25_49_ladder_2;
        _2204 = frontier_phi_25_49_ladder_1;
        _2206 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2186 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1186, _1187, _1188), _2112);
        _2202 = _2186.x * cbModelParam._m0[1u].z;
        _2204 = _2186.y * cbModelParam._m0[1u].z;
        _2206 = _2186.z * cbModelParam._m0[1u].z;
    }
    float _2218 = ((((1.0 - _1207) * ((_1194 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1207 * _1194)) * _1178;
    float _2219 = _2218 * ((cbModelParam._m0[1u].w * (_2202 - _2103)) + _2103);
    float _2220 = _2218 * ((cbModelParam._m0[1u].w * (_2204 - _2105)) + _2105);
    float _2221 = _2218 * ((cbModelParam._m0[1u].w * (_2206 - _2107)) + _2107);
    float _2224 = fma(_2221, cbSceneParam._m0[89u].z, fma(_2220, cbSceneParam._m0[89u].y, _2219 * cbSceneParam._m0[89u].x));
    float _2227 = fma(_2221, cbSceneParam._m0[90u].z, fma(_2220, cbSceneParam._m0[90u].y, _2219 * cbSceneParam._m0[90u].x));
    float _2230 = fma(_2221, cbSceneParam._m0[91u].z, fma(_2220, cbSceneParam._m0[91u].y, _2219 * cbSceneParam._m0[91u].x));
    vec4 _2238 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1115, _1116));
    float _2240 = _2238.w;
    float _2252 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2240);
    float _2253 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2240);
    float _2254 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2240);
    uvec4 _2258 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2260 = _2258.x * 14u;
    uint _2261 = _2260 + 13u;
    float _2268 = _1178 + (-1.0);
    float _2273 = (cbLight._m0[_2261].x * _2268) + 1.0;
    float _2274 = (cbLight._m0[_2261].y * _2268) + 1.0;
    float _2275 = (cbLight._m0[_2261].z * _2268) + 1.0;
    float _2276 = (cbLight._m0[_2261].w * _2268) + 1.0;
    uint _2277 = _2260 + 5u;
    float _2283 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
    uint _2287 = _2260 + 4u;
    float _2296 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2300 = _2260 | 1u;
    float _2311 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_1016, _1017, _1018));
    float _2314 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_1016, _1017, _1018));
    float _4590 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _4601 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2319 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * 0.3183098733425140380859375;
    float _2321 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * 0.3183098733425140380859375;
    float _2328 = ((cbLight._m0[_2277].x * _2283) * _2321) + (((cbLight._m0[_2287].x * _2252) * _2296) * _2319);
    float _2329 = ((_2283 * cbLight._m0[_2277].y) * _2321) + (((cbLight._m0[_2287].y * _2253) * _2296) * _2319);
    float _2330 = ((_2283 * cbLight._m0[_2277].z) * _2321) + (((cbLight._m0[_2287].z * _2254) * _2296) * _2319);
    uvec4 _2334 = floatBitsToUint(cbLight._m0[_2260 + 12u]);
    bool _2336 = _2334.x == 0u;
    float _2347;
    float _2349;
    float _2351;
    if (_2336)
    {
        _2347 = _2328;
        _2349 = _2329;
        _2351 = _2330;
    }
    else
    {
        uint _2355 = _2260 + 6u;
        float _2371 = (dot(vec3(cbLight._m0[_2260 + 2u].xyz), vec3(_1016, _1017, _1018)) * 0.5) + 0.5;
        float _2372 = _2371 * _2371;
        float _4612 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2373 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2374 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2347 = (((cbLight._m0[_2355].x * 0.3183098733425140380859375) * _2373) * _2374) + _2328;
        _2349 = (((cbLight._m0[_2355].y * 0.3183098733425140380859375) * _2373) * _2374) + _2329;
        _2351 = (((cbLight._m0[_2355].z * 0.3183098733425140380859375) * _2373) * _2374) + _2330;
    }
    bool _2354 = _2334.y == 0u;
    float _2392;
    float _2394;
    float _2396;
    if (_2354)
    {
        _2392 = _2347;
        _2394 = _2349;
        _2396 = _2351;
    }
    else
    {
        uint _2554 = _2260 + 7u;
        float _2570 = (dot(vec3(cbLight._m0[_2260 + 3u].xyz), vec3(_1016, _1017, _1018)) * 0.5) + 0.5;
        float _2571 = _2570 * _2570;
        float _4628 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2572 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2573 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2392 = (((cbLight._m0[_2554].x * 0.3183098733425140380859375) * _2572) * _2573) + _2347;
        _2394 = (((cbLight._m0[_2554].y * 0.3183098733425140380859375) * _2572) * _2573) + _2349;
        _2396 = (((cbLight._m0[_2554].z * 0.3183098733425140380859375) * _2572) * _2573) + _2351;
    }
    uint _2399 = _2260 + 8u;
    float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _1019) * 0.949999988079071044921875);
    float _2413 = _2412 * _2412;
    float _2414 = cbLight._m0[_2260].x + _1095;
    float _2415 = cbLight._m0[_2260].y + _1096;
    float _2416 = cbLight._m0[_2260].z + _1097;
    float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
    float _2421 = _2420 * _2414;
    float _2422 = _2420 * _2415;
    float _2423 = _2420 * _2416;
    float _2424 = dot(vec3(_1016, _1017, _1018), vec3(cbLight._m0[_2260].xyz));
    float _4644 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _4655 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _2428 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2429 = dot(vec3(_1016, _1017, _1018), vec3(_2421, _2422, _2423));
    float _4666 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2421, _2422, _2423));
    float _4677 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2413 * _2413;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2452 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2453 = 1.0 - _2413;
    float _2464 = (0.5 / (((_2428 * ((_2427 * _2453) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2453) + _2413) * _2427))) * _2427;
    float _4688 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2466 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    uint _2480 = _2260 + 9u;
    float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _1019) * 0.949999988079071044921875);
    float _2492 = _2491 * _2491;
    float _2493 = cbLight._m0[_2300].x + _1095;
    float _2494 = cbLight._m0[_2300].y + _1096;
    float _2495 = cbLight._m0[_2300].z + _1097;
    float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
    float _2500 = _2499 * _2493;
    float _2501 = _2499 * _2494;
    float _2502 = _2499 * _2495;
    float _2503 = dot(vec3(_1016, _1017, _1018), vec3(cbLight._m0[_2300].xyz));
    float _4699 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2507 = dot(vec3(_1016, _1017, _1018), vec3(_2500, _2501, _2502));
    float _4710 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2511 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2500, _2501, _2502));
    float _4721 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2515 = _2492 * _2492;
    float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
    float _2528 = (exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2529 = 1.0 - _2492;
    float _2539 = (0.5 / (((_2428 * ((_2506 * _2529) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2529) + _2492) * _2506))) * _2506;
    float _4732 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2541 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
    float _2551 = (((_2528 * cbLight._m0[_2480].x) * _2541) * _2283) + ((((cbLight._m0[_2399].x * _2252) * _2452) * _2466) * _2296);
    float _2552 = (((_2528 * cbLight._m0[_2480].y) * _2541) * _2283) + ((((cbLight._m0[_2399].y * _2253) * _2452) * _2466) * _2296);
    float _2553 = (((_2528 * cbLight._m0[_2480].z) * _2541) * _2283) + ((((cbLight._m0[_2399].z * _2254) * _2452) * _2466) * _2296);
    float _2615;
    float _2617;
    float _2619;
    if (_2336)
    {
        _2615 = _2551;
        _2617 = _2552;
        _2619 = _2553;
    }
    else
    {
        uint _2621 = _2260 + 2u;
        uint _2625 = _2260 + 10u;
        float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2621].w)) * _1019) * 0.949999988079071044921875);
        float _2640 = _2639 * _2639;
        float _2641 = cbLight._m0[_2621].x + _1095;
        float _2642 = cbLight._m0[_2621].y + _1096;
        float _2643 = cbLight._m0[_2621].z + _1097;
        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
        float _2648 = _2647 * _2641;
        float _2649 = _2647 * _2642;
        float _2650 = _2647 * _2643;
        float _2651 = dot(vec3(_1016, _1017, _1018), vec3(cbLight._m0[_2621].xyz));
        float _4743 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2655 = dot(vec3(_1016, _1017, _1018), vec3(_2648, _2649, _2650));
        float _4754 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2659 = dot(vec3(cbLight._m0[_2621].xyz), vec3(_2648, _2649, _2650));
        float _4765 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2663 = _2640 * _2640;
        float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
        float _2676 = (exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2677 = 1.0 - _2640;
        float _2687 = (0.5 / (((_2428 * ((_2654 * _2677) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2677) + _2640) * _2654))) * _2654;
        float _4776 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2689 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
        float _2690 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2615 = (((_2676 * cbLight._m0[_2625].x) * _2689) * _2690) + _2551;
        _2617 = (((_2676 * cbLight._m0[_2625].y) * _2689) * _2690) + _2552;
        _2619 = (((_2676 * cbLight._m0[_2625].z) * _2689) * _2690) + _2553;
    }
    float _2725;
    float _2727;
    float _2729;
    if (_2354)
    {
        _2725 = _2615;
        _2727 = _2617;
        _2729 = _2619;
    }
    else
    {
        uint _2736 = _2260 + 3u;
        uint _2740 = _2260 + 11u;
        float _2754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2736].w)) * _1019) * 0.949999988079071044921875);
        float _2755 = _2754 * _2754;
        float _2756 = cbLight._m0[_2736].x + _1095;
        float _2757 = cbLight._m0[_2736].y + _1096;
        float _2758 = cbLight._m0[_2736].z + _1097;
        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
        float _2763 = _2762 * _2756;
        float _2764 = _2762 * _2757;
        float _2765 = _2762 * _2758;
        float _2766 = dot(vec3(_1016, _1017, _1018), vec3(cbLight._m0[_2736].xyz));
        float _4792 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2770 = dot(vec3(_1016, _1017, _1018), vec3(_2763, _2764, _2765));
        float _4803 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2774 = dot(vec3(cbLight._m0[_2736].xyz), vec3(_2763, _2764, _2765));
        float _4814 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2778 = _2755 * _2755;
        float _2782 = ((_2773 * _2773) * (_2778 + (-1.0))) + 1.0;
        float _2791 = (exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2792 = 1.0 - _2755;
        float _2802 = (0.5 / (((_2428 * ((_2769 * _2792) + _2755)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2792) + _2755) * _2769))) * _2769;
        float _4825 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2804 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2778 / ((_2782 * _2782) * 3.141590118408203125));
        float _2805 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2725 = (((_2791 * cbLight._m0[_2740].x) * _2804) * _2805) + _2615;
        _2727 = (((_2791 * cbLight._m0[_2740].y) * _2804) * _2805) + _2617;
        _2729 = (((_2791 * cbLight._m0[_2740].z) * _2804) * _2805) + _2619;
    }
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    if (_2258.y == 0u)
    {
        float _2880 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2881 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2880;
        float _2882 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2880;
        float _2883 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2880;
        uvec4 _2895 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2896 = _2895.x;
        uint _2907 = uint((float(_2895.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1116) / _2896))) + floor(float(uint(cbSceneParam._m0[85u].x * _1115) / _2896)));
        float _2917 = (log2(_2883 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2918 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        uint _2921 = uint(isnan(14.0) ? _2918 : (isnan(_2918) ? 14.0 : min(_2918, 14.0)));
        uvec4 _2926 = texelFetch(g_lightClusterGridBuffer, int(((_2921 << 2u) + (_2907 << 6u)) >> 2u));
        uint _2927 = _2926.x;
        uint _2928 = _2895.z;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        if (((((1u << ((_2928 >> 4u) & 15u)) + 4294967295u) & _2927) == 0u) || ((_2928 & 240u) == 0u))
        {
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
        }
        else
        {
            float _3029;
            float _3031;
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            uint _3187 = 0u;
            uint _3196;
            bool _3197;
            for (;;)
            {
                _3196 = texelFetch(g_lightClassification, int((((_2921 << 5u) + (_2907 << 9u)) + (_3187 << 2u)) >> 2u)).x;
                _3197 = _3196 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3197)
                {
                    frontier_phi_66_pred = _3181;
                    frontier_phi_66_pred_1 = _3186;
                    frontier_phi_66_pred_2 = _3185;
                    frontier_phi_66_pred_3 = _3184;
                    frontier_phi_66_pred_4 = _3183;
                    frontier_phi_66_pred_5 = _3182;
                }
                else
                {
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    uint _3332;
                    _3326 = _3181;
                    _3327 = _3182;
                    _3328 = _3183;
                    _3329 = _3184;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3196;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    for (;;)
                    {
                        uint _3336 = uint(findLSB(_3332)) + (_3187 << 5u);
                        uint _3333 = (_3332 + 4294967295u) & _3332;
                        uint _3338 = _3336 * 48u;
                        vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3358 = (_3336 * 48u) + 4u;
                        vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3377 = (_3336 * 48u) + 8u;
                        vec3 _3388 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x));
                        float _3392 = _3352.x - _2881;
                        float _3393 = _3352.y - _2882;
                        float _3394 = _3352.z - _2883;
                        float _3395 = dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394));
                        float _3398 = inversesqrt(_3395);
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3402 = dot(vec3(_1134, _1137, _1140), vec3(_3399, _3400, _3401));
                        float _3407 = 1.0 - (_3395 * _3352.w);
                        float _4851 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                        float _3409 = sqrt(_3395) * _3371.w;
                        float _3412 = 1.39999997615814208984375 / (_3409 + 1.39999997615814208984375);
                        float _3413 = _3412 * _3412;
                        float _3416 = ((1.0 - _3413) * _3402) + _3413;
                        float _3419 = _3409 * _3409;
                        float _3423 = ((isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))) * _3408) / ((_3419 * 0.699999988079071044921875) + 1.0);
                        float _3427 = (-0.0) - _2881;
                        float _3428 = (-0.0) - _2882;
                        float _3429 = (-0.0) - _2883;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3434 = _3433 * _3427;
                        float _3435 = _3433 * _3428;
                        float _3436 = _3433 * _3429;
                        float _3444 = exp2(log2(1.0 / ((_3419 * 3.5) + 5.0)) * 0.25);
                        float _3445 = 1.0 - _1194;
                        float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                        float _3453 = _3452 * _3452;
                        float _3454 = _3453 * _3453;
                        float _3455 = _3434 + _3399;
                        float _3456 = _3435 + _3400;
                        float _3457 = _3436 + _3401;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3465 = dot(vec3(_1134, _1137, _1140), vec3(_3434, _3435, _3436));
                        float _4867 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3469 = dot(vec3(_1134, _1137, _1140), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                        float _4878 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                        float _3477 = _3412 * _3453;
                        float _3478 = _3477 * _3477;
                        float _3481 = ((1.0 - _3478) * _3402) + _3478;
                        float _4889 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3483 = 1.0 - _3453;
                        float _3493 = (0.5 / (((_3482 * ((_3468 * _3483) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3482 * _3483) + _3453) * _3468))) * _3482;
                        float _4900 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3504 = (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) / ((_3476 * _3476) * ((_3419 * 2.1991131305694580078125) + 3.141590118408203125))) * _3408;
                        _3256 = (_3423 * _3371.x) + _3329;
                        _3257 = (_3423 * _3371.y) + _3330;
                        _3258 = (_3423 * _3371.z) + _3331;
                        _3253 = (_3504 * _3388.x) + _3326;
                        _3254 = (_3504 * _3388.y) + _3327;
                        _3255 = (_3504 * _3388.z) + _3328;
                        if (_3333 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3326 = _3253;
                            _3327 = _3254;
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3333;
                        }
                    }
                    frontier_phi_66_pred = _3253;
                    frontier_phi_66_pred_1 = _3258;
                    frontier_phi_66_pred_2 = _3257;
                    frontier_phi_66_pred_3 = _3256;
                    frontier_phi_66_pred_4 = _3255;
                    frontier_phi_66_pred_5 = _3254;
                }
                _3029 = frontier_phi_66_pred;
                _3039 = frontier_phi_66_pred_1;
                _3037 = frontier_phi_66_pred_2;
                _3035 = frontier_phi_66_pred_3;
                _3033 = frontier_phi_66_pred_4;
                _3031 = frontier_phi_66_pred_5;
                uint _3188 = _3187 + 1u;
                if (_3188 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3181 = _3029;
                    _3182 = _3031;
                    _3183 = _3033;
                    _3184 = _3035;
                    _3185 = _3037;
                    _3186 = _3039;
                    _3187 = _3188;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
        }
        uvec4 _3042 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3043 = _3042.z;
        uint _3045 = (_3043 >> 8u) & 15u;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        if (((4294967295u << _3045) & _2927) == 0u)
        {
            _3149 = _3028;
            _3151 = _3030;
            _3153 = _3032;
            _3155 = _3034;
            _3157 = _3036;
            _3159 = _3038;
        }
        else
        {
            float _3174 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
            float _3175 = _3174 * _2881;
            float _3176 = _3174 * _2882;
            float _3177 = _3174 * _2883;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3045 < ((_3043 >> 12u) & 15u))
            {
                float _3150;
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3309 = _3028;
                float _3310 = _3030;
                float _3311 = _3032;
                float _3312 = _3034;
                float _3313 = _3036;
                float _3314 = _3038;
                uint _3315 = _3045;
                uint _3324;
                bool _3325;
                for (;;)
                {
                    _3324 = texelFetch(g_lightClassification, int((((_2921 << 5u) + (_2907 << 9u)) + (_3315 << 2u)) >> 2u)).x;
                    _3325 = _3324 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3325)
                    {
                        frontier_phi_77_pred = _3314;
                        frontier_phi_77_pred_1 = _3313;
                        frontier_phi_77_pred_2 = _3312;
                        frontier_phi_77_pred_3 = _3311;
                        frontier_phi_77_pred_4 = _3310;
                        frontier_phi_77_pred_5 = _3309;
                    }
                    else
                    {
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3531 = _3309;
                        float _3532 = _3310;
                        float _3533 = _3311;
                        float _3534 = _3312;
                        float _3535 = _3313;
                        float _3536 = _3314;
                        uint _3537 = _3324;
                        uint _3538;
                        vec4 _3563;
                        float _3564;
                        vec4 _3579;
                        vec3 _3591;
                        vec4 _3606;
                        vec4 _3621;
                        float _3667;
                        bool _3668;
                        for (;;)
                        {
                            uint _3548 = ((_3315 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3537));
                            _3538 = (_3537 + 4294967295u) & _3537;
                            uint _3550 = _3548 * 40u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            _3564 = _3563.w;
                            uint _3566 = (_3548 * 40u) + 4u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3548 * 40u) + 8u;
                            _3591 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x));
                            uint _3593 = (_3548 * 40u) + 16u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3548 * 40u) + 20u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3623 = (_3548 * 40u) + 24u;
                            vec4 _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3642 = (_3548 * 40u) + 28u;
                            vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            _3667 = fma(_2883, _3655.z, fma(_2882, _3655.y, _3655.x * _2881)) + _3655.w;
                            _3668 = !((fma(_2883, _3636.z, fma(_2882, _3636.y, _3636.x * _2881)) + _3636.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3668)
                            {
                                float _3695 = _3563.x - _2881;
                                float _3696 = _3563.y - _2882;
                                float _3697 = _3563.z - _2883;
                                float _3698 = dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697));
                                float _3701 = inversesqrt(_3698);
                                float _3702 = _3701 * _3695;
                                float _3703 = _3701 * _3696;
                                float _3704 = _3701 * _3697;
                                float _3708 = 1.0 - (_3698 / (_3564 * _3564));
                                float _4911 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3713 = sqrt(_3698) * _3579.w;
                                float _3715 = 1.39999997615814208984375 / (_3713 + 1.39999997615814208984375);
                                float _3716 = _3715 * _3715;
                                float _3719 = ((1.0 - _3716) * dot(vec3(_3702, _3703, _3704), vec3(_1134, _1137, _1140))) + _3716;
                                float _3722 = _3713 * _3713;
                                float _3726 = (fma(_2883, _3606.z, fma(_2882, _3606.y, _3606.x * _2881)) + _3606.w) / _3667;
                                float _3727 = (fma(_2883, _3621.z, fma(_2882, _3621.y, _3621.x * _2881)) + _3621.w) / _3667;
                                float _3731 = 1.0 - dot(vec2(_3726, _3727), vec2(_3726, _3727));
                                float _4927 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3733 = _3732 * (((isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0))) * _3709) / ((_3722 * 0.699999988079071044921875) + 1.0));
                                float _3745 = exp2(log2(1.0 / ((_3722 * 3.5) + 5.0)) * 0.25);
                                float _3746 = 1.0 - _1194;
                                float _3753 = sqrt(1.0 - ((1.0 - (_3746 * _3746)) * (1.0 - (_3745 * _3745))));
                                float _3754 = _3753 * _3753;
                                float _3755 = _3754 * _3754;
                                float _3756 = _3702 - _3175;
                                float _3757 = _3703 - _3176;
                                float _3758 = _3704 - _3177;
                                float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                                float _3766 = dot(vec3(_1134, _1137, _1140), vec3((-0.0) - _3175, (-0.0) - _3176, (-0.0) - _3177));
                                float _4938 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3769 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3770 = dot(vec3(_1134, _1137, _1140), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                                float _4949 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                                float _3778 = _3715 * _3754;
                                float _3779 = _3778 * _3778;
                                float _3785 = ((1.0 - _3779) * dot(vec3(_1134, _1137, _1140), vec3(_3702, _3703, _3704))) + _3779;
                                float _4960 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3787 = 1.0 - _3754;
                                float _3797 = (0.5 / (((_3786 * ((_3769 * _3787) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3786 * _3787) + _3754) * _3769))) * _3786;
                                float _4971 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3807 = (_3732 * _3709) * (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) / ((_3777 * _3777) * ((_3722 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3733 * _3579.y;
                                frontier_phi_83_pred_1 = _3733 * _3579.x;
                                frontier_phi_83_pred_2 = _3807 * _3591.z;
                                frontier_phi_83_pred_3 = _3807 * _3591.y;
                                frontier_phi_83_pred_4 = _3807 * _3591.x;
                                frontier_phi_83_pred_5 = _3733 * _3579.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3815 = frontier_phi_83_pred;
                            _3814 = frontier_phi_83_pred_1;
                            _3813 = frontier_phi_83_pred_2;
                            _3812 = frontier_phi_83_pred_3;
                            _3811 = frontier_phi_83_pred_4;
                            _3816 = frontier_phi_83_pred_5;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            _3520 = _3813 + _3533;
                            if (_3538 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3538;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3523;
                        frontier_phi_77_pred_1 = _3522;
                        frontier_phi_77_pred_2 = _3521;
                        frontier_phi_77_pred_3 = _3520;
                        frontier_phi_77_pred_4 = _3519;
                        frontier_phi_77_pred_5 = _3518;
                    }
                    _3160 = frontier_phi_77_pred;
                    _3158 = frontier_phi_77_pred_1;
                    _3156 = frontier_phi_77_pred_2;
                    _3154 = frontier_phi_77_pred_3;
                    _3152 = frontier_phi_77_pred_4;
                    _3150 = frontier_phi_77_pred_5;
                    uint _3316 = _3315 + 1u;
                    if (_3316 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3309 = _3150;
                        _3310 = _3152;
                        _3311 = _3154;
                        _3312 = _3156;
                        _3313 = _3158;
                        _3314 = _3160;
                        _3315 = _3316;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3154;
                frontier_phi_58_59_ladder_1 = _3160;
                frontier_phi_58_59_ladder_2 = _3158;
                frontier_phi_58_59_ladder_3 = _3156;
                frontier_phi_58_59_ladder_4 = _3152;
                frontier_phi_58_59_ladder_5 = _3150;
            }
            else
            {
                frontier_phi_58_59_ladder = _3032;
                frontier_phi_58_59_ladder_1 = _3038;
                frontier_phi_58_59_ladder_2 = _3036;
                frontier_phi_58_59_ladder_3 = _3034;
                frontier_phi_58_59_ladder_4 = _3030;
                frontier_phi_58_59_ladder_5 = _3028;
            }
            _3149 = frontier_phi_58_59_ladder_5;
            _3151 = frontier_phi_58_59_ladder_4;
            _3153 = frontier_phi_58_59_ladder;
            _3155 = frontier_phi_58_59_ladder_3;
            _3157 = frontier_phi_58_59_ladder_2;
            _3159 = frontier_phi_58_59_ladder_1;
        }
        float _3164 = isnan(1.0) ? _1178 : (isnan(_1178) ? 1.0 : min(_1178, 1.0));
        _2940 = (_3164 * _3155) + _2392;
        _2942 = (_3164 * _3157) + _2394;
        _2944 = (_3164 * _3159) + _2396;
        _2946 = ((_3149 * 0.039999999105930328369140625) * _3164) + _2725;
        _2948 = ((_3151 * 0.039999999105930328369140625) * _3164) + _2727;
        _2950 = ((_3153 * 0.039999999105930328369140625) * _3164) + _2729;
    }
    else
    {
        _2940 = _2392;
        _2942 = _2394;
        _2944 = _2396;
        _2946 = _2725;
        _2948 = _2727;
        _2950 = _2729;
    }
    float _4987 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _4998 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _5009 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _2967 = ((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_2940 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1178))) + ((_2946 + ((isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0))) * _2012)) * cbPerFrame._m0[3u].x);
    float _2968 = ((isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2942 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1178))) + ((_2948 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2012)) * cbPerFrame._m0[3u].x);
    float _2969 = ((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_2944 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1178))) + ((_2950 + ((isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0))) * _2012)) * cbPerFrame._m0[3u].x);
    uint _2970 = _293 + 6u;
    float _2978 = _1115 / cbSceneParam._m0[86u].x;
    float _2979 = _1116 / cbSceneParam._m0[86u].y;
    vec4 _2993 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2978, _2979, (log2((isnan(cbSceneParam._m0[77u].w) ? _1037 : (isnan(_1037) ? cbSceneParam._m0[77u].w : min(_1037, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2995 = _2993.x;
    float _2996 = _2993.y;
    float _2997 = _2993.z;
    float _2998 = _2993.w;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    if (_1037 > cbSceneParam._m0[78u].w)
    {
        float _3053 = isnan(_1037) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1037 : min(cbSceneParam._m0[80u].w, _1037));
        float _3054 = _3053 / _1037;
        float _3065 = _3054 * _1088;
        float _3066 = _1089 * _3054;
        float _3067 = (-0.0) - _3066;
        float _3069 = _3054 * _1090;
        float _3071 = (cbSceneParam._m0[77u].w * _3067) / _3053;
        float _3072 = _3071 + cbSceneParam._m0[79u].w;
        float _3073 = cbSceneParam._m0[79u].w - _3066;
        float _3079 = sqrt(((_3065 * _3065) + (_3066 * _3066)) + (_3069 * _3069));
        float _3082 = (1.0 - (cbSceneParam._m0[77u].w / _3053)) * _3079;
        float _3087 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3089 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3266;
        if (abs((_3067 - _3071) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3266 = ((((_3072 > 0.0) ? exp2(_3087 * _3072) : (2.0 - exp2(_3089 * _3072))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3082;
        }
        else
        {
            float _3210 = 1.0 / cbSceneParam._m0[80u].x;
            float _3211 = isnan(_3073) ? _3072 : (isnan(_3072) ? _3073 : max(_3072, _3073));
            float _3212 = isnan(_3073) ? _3072 : (isnan(_3072) ? _3073 : min(_3072, _3073));
            float _3221 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : min(_3211, 0.0));
            float _3222 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : min(_3212, 0.0));
            _3266 = ((abs(_3079 / _3067) * cbSceneParam._m0[80u].y) * ((((_3221 - _3222) * 2.0) - ((exp2(_3087 * (isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0)))) - exp2(_3087 * (isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))))) * _3210)) - ((exp2(_3089 * _3221) - exp2(_3089 * _3222)) * _3210))) + (_3082 * cbSceneParam._m0[80u].z);
        }
        vec4 _3268 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2978, _2979, 1.0), 0.0);
        float _3277 = exp2((_3266 * (-1.44269502162933349609375)) * (1.0 - _3268.w));
        float _3278 = log2(_3277);
        float _3294 = log2(_2998);
        _3091 = (exp2(_3294 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].x)) * _3268.x) / cbSceneParam._m0[78u].x)) + _2995;
        _3093 = (exp2(_3294 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].y)) * _3268.y) / cbSceneParam._m0[78u].y)) + _2996;
        _3095 = (exp2(_3294 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].z)) * _3268.z) / cbSceneParam._m0[78u].z)) + _2997;
        _3097 = _3277 * _2998;
    }
    else
    {
        _3091 = _2995;
        _3093 = _2996;
        _3095 = _2997;
        _3097 = _2998;
    }
    bool _3304;
    vec4 _3107;
    vec4 _3129;
    float _3131;
    float _3135;
    float _3136;
    float _3137;
    float _3138;
    bool _3148;
    for (;;)
    {
        _3107 = cbMatDynParam._m0[0u];
        float _3109 = roundEven(_3107.y);
        bool _3110 = _3109 == 3.0;
        float _3111 = log2(_3097);
        float _3118 = exp2(_3111 * cbSceneParam._m0[78u].x) * _2967;
        float _3119 = exp2(_3111 * cbSceneParam._m0[78u].y) * _2968;
        float _3120 = exp2(_3111 * cbSceneParam._m0[78u].z) * _2969;
        float _3127 = _1104 + (-0.5);
        _3129 = cbMtdParam._m0[1u];
        _3131 = _3129.y * _3127;
        float _3134 = (_3109 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3135 = _3134 * (_3110 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3091)));
        _3136 = _3134 * (_3110 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3093)));
        _3137 = _3134 * (_3110 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3095)));
        _3138 = _3127 * 0.999000012874603271484375;
        _3148 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3148)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3138) < 0.5)
            {
                _3304 = true;
                break;
            }
        }
        uint _3245 = _1153 + uint(_3107.w);
        if ((cbInstanceData._m0[_3245].w < 1.0) && ((cbInstanceData._m0[_3245].w + _3138) < 0.5))
        {
            _3304 = true;
            break;
        }
        if ((_3131 + 1.0) < _3129.x)
        {
            _3304 = true;
            break;
        }
        _3304 = false;
        break;
    }
    float _3509;
    if (_3304)
    {
        discard_state = true;
        _3509 = 0.0;
    }
    else
    {
        _3509 = cbInstanceData._m0[_2970].w;
    }
    SV_Target.x = _3135;
    SV_Target.y = _3136;
    SV_Target.z = _3137;
    SV_Target.w = _3509;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2970].w;
    discard_exit();
}


