#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1189;
float _3575;
float _3576;
float _3577;
float _3578;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3587 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3598 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3609 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[24u].z) + _437) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3620 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _465 = (_320.x * cbMtdParam._m0[9u].x) * ((_455 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351);
    float _466 = (_320.y * cbMtdParam._m0[9u].y) * ((_455 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352);
    float _467 = (_320.z * cbMtdParam._m0[9u].z) * ((_455 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353);
    float _471 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _465;
    float _474 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _466;
    float _477 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _467;
    float _485 = (((_465 - _471) * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) + _471) * 4.55000019073486328125;
    float _487 = (((_466 - _474) * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) + _474) * 4.55000019073486328125;
    float _489 = (((_467 - _477) * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) + _477) * 4.55000019073486328125;
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    float _557 = ((_527.z - _548) * _455) + _548;
    float _560 = ((((_527.x - _546) * _455) + _546) * 2.0) + (-1.0);
    float _561 = ((((_527.y - _547) * _455) + _547) * 2.0) + (-1.0);
    float _562 = dot(vec2(_560, _561), vec2(_560, _561));
    float _3631 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _567 = sqrt(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _601 = (_560 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_502.x * 2.0) + (-1.0)))) + (((_589.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _602 = (_561 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_502.y * 2.0) + (-1.0)))) + (((_589.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _607 = (((_502.z - _557) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _557;
    float _611 = ((_589.z - _607) * cbMtdParam._m0[19u].w) + _607;
    float _613 = cbMtdParam._m0[22u].x + _589.w;
    float _616 = fma(_567, _230 * NORMAL.x, fma(_602, _237 * TANGENT.x, (_223 * _215) * _601));
    float _619 = fma(_567, _230 * NORMAL.y, fma(_602, _237 * TANGENT.y, (_223 * _216) * _601));
    float _622 = fma(_567, _230 * NORMAL.z, fma(_602, _237 * TANGENT.z, (_223 * _217) * _601));
    float _626 = inversesqrt(dot(vec3(_616, _619, _622), vec3(_616, _619, _622)));
    float _627 = _626 * _616;
    float _628 = _626 * _619;
    float _629 = _626 * _622;
    float _3642 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _630 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3664 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3675 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3686 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _699 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _689);
    float _700 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _689);
    float _701 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _689);
    float _705 = inversesqrt(dot(vec3(_699, _700, _701), vec3(_699, _700, _701)));
    float _706 = _699 * _705;
    float _707 = _700 * _705;
    float _708 = _701 * _705;
    vec4 _713 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _715 = _713.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _869 = sqrt(((_699 * _699) + (_700 * _700)) + (_701 * _701));
        float _875 = (cbMatDynParam._m0[5u].x * _869) + cbMatDynParam._m0[5u].y;
        float _3697 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _880 = (cbMatDynParam._m0[5u].z * _869) + cbMatDynParam._m0[5u].w;
        float _3708 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) - _876)) + _876) < ((_715 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _726 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _727 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _745 = fma(_629, cbSceneParam._m0[5u].z, fma(_628, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _627));
    float _748 = fma(_629, cbSceneParam._m0[6u].z, fma(_628, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _627));
    float _751 = fma(_629, cbSceneParam._m0[7u].z, fma(_628, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _627));
    uint _764 = _264 + 9u;
    uint _765 = _764 + uint(cbMatDynParam._m0[0u].w);
    float _771 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * cbInstanceData._m0[_765].x;
    float _772 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbInstanceData._m0[_765].y;
    float _773 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * cbInstanceData._m0[_765].z;
    float _3719 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    vec4 _785 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _726, cbSceneParam._m0[86u].y * _727));
    float _789 = ((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * TEXCOORD_5.w) * _785.x;
    float _790 = dot(vec3(_627, _628, _629), vec3(_706, _707, _708));
    float _793 = _790 * 2.0;
    float _797 = (_793 * _627) - _706;
    float _798 = (_793 * _628) - _707;
    float _799 = (_793 * _629) - _708;
    float _803 = abs(dot(vec3(_706, _707, _708), vec3(_627, _628, _629)));
    float _3752 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _805 = sqrt(_630);
    float _818 = exp2((_805 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_805 * 3.0));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1188;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _913 = fma(_858, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850));
        float _917 = fma(_858, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850));
        float _921 = fma(_858, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850));
        float _946 = _850 + _627;
        float _947 = _854 + _628;
        float _948 = _858 + _629;
        float _958 = fma(_948, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946)) - _913;
        float _959 = fma(_948, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946)) - _917;
        float _960 = fma(_948, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946)) - _921;
        float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
        float _977 = ((_964 * _958) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_913 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_964 * _959) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_917 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_964 * _960) / cbModelParam._m0[34u].z) + ((((((_921 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        float _1016 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_982.x + (-0.5));
        float _1018 = _1016 * (_982.y + (-0.5));
        float _1019 = _1016 * (_982.z + (-0.5));
        float _1026 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_989.x + (-0.5));
        float _1028 = _1026 * (_989.y + (-0.5));
        float _1029 = _1026 * (_989.z + (-0.5));
        float _1036 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_996.x + (-0.5));
        float _1038 = _1036 * (_996.y + (-0.5));
        float _1039 = _1036 * (_996.z + (-0.5));
        float _1046 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1003.x + (-0.5));
        float _1048 = _1046 * (_1003.y + (-0.5));
        float _1049 = _1046 * (_1003.z + (-0.5));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = _1017 * 0.5;
        float _1054 = _1027 * 0.5;
        float _1055 = _1037 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1070 = (dot(vec3(_627, _628, _629), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1080 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3800 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1082 + 1.0))) + _1087) * _1050;
        float _1097 = _1018 * 0.5;
        float _1098 = _1028 * 0.5;
        float _1099 = _1038 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_627, _628, _629), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3833 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1124 + 1.0))) + _1129) * _1051;
        float _1139 = _1019 * 0.5;
        float _1140 = _1029 * 0.5;
        float _1141 = _1039 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_627, _628, _629), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3866 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1166 + 1.0))) + _1171) * _1052;
        _1188 = _1019;
        _1190 = _1018;
        _1191 = _1017;
        _1192 = _1029;
        _1193 = _1028;
        _1194 = _1027;
        _1195 = _1039;
        _1196 = _1038;
        _1197 = _1037;
        _1198 = _1052;
        _1199 = _1051;
        _1200 = _1050;
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1202 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
    }
    else
    {
        _1188 = _1189;
        _1190 = _1189;
        _1191 = _1189;
        _1192 = _1189;
        _1193 = _1189;
        _1194 = _1189;
        _1195 = _1189;
        _1196 = _1189;
        _1197 = _1189;
        _1198 = _1189;
        _1199 = _1189;
        _1200 = _1189;
        _1201 = 0.0;
        _1202 = 0.0;
        _1203 = 0.0;
    }
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1231 = fma(_858, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _850));
        float _1235 = fma(_858, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _850));
        float _1239 = fma(_858, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _850));
        float _1262 = _850 + _627;
        float _1263 = _854 + _628;
        float _1264 = _858 + _629;
        float _1274 = fma(_1264, cbModelParam._m0[30u].z, fma(_1263, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1262)) - _1231;
        float _1275 = fma(_1264, cbModelParam._m0[31u].z, fma(_1263, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1262)) - _1235;
        float _1276 = fma(_1264, cbModelParam._m0[32u].z, fma(_1263, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1262)) - _1239;
        float _1280 = inversesqrt(dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276)));
        float _1293 = ((_1280 * _1274) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1231 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1280 * _1275) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1235 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1280 * _1276) / cbModelParam._m0[35u].z) + ((((((_1239 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        float _1330 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1297.x + (-0.5));
        float _1332 = _1330 * (_1297.y + (-0.5));
        float _1333 = _1330 * (_1297.z + (-0.5));
        float _1340 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1304.x + (-0.5));
        float _1342 = _1340 * (_1304.y + (-0.5));
        float _1343 = _1340 * (_1304.z + (-0.5));
        float _1350 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1311.x + (-0.5));
        float _1352 = _1350 * (_1311.y + (-0.5));
        float _1353 = _1350 * (_1311.z + (-0.5));
        float _1360 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1318.x + (-0.5));
        float _1362 = _1360 * (_1318.y + (-0.5));
        float _1363 = _1360 * (_1318.z + (-0.5));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = _1331 * 0.5;
        float _1368 = _1341 * 0.5;
        float _1369 = _1351 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_627, _628, _629), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3929 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1394 + 1.0))) + _1399) * _1364;
        float _1409 = _1332 * 0.5;
        float _1410 = _1342 * 0.5;
        float _1411 = _1352 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_627, _628, _629), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _3962 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1436 + 1.0))) + _1441) * _1365;
        float _1451 = _1333 * 0.5;
        float _1452 = _1343 * 0.5;
        float _1453 = _1353 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_627, _628, _629), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _3995 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1478 + 1.0))) + _1483) * _1366;
        _1500 = _1333;
        _1501 = _1332;
        _1502 = _1331;
        _1503 = _1343;
        _1504 = _1342;
        _1505 = _1341;
        _1506 = _1353;
        _1507 = _1352;
        _1508 = _1351;
        _1509 = _1366;
        _1510 = _1365;
        _1511 = _1364;
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
    }
    else
    {
        _1500 = _1189;
        _1501 = _1189;
        _1502 = _1189;
        _1503 = _1189;
        _1504 = _1189;
        _1505 = _1189;
        _1506 = _1189;
        _1507 = _1189;
        _1508 = _1189;
        _1509 = _1189;
        _1510 = _1189;
        _1511 = _1189;
        _1512 = 0.0;
        _1513 = 0.0;
        _1514 = 0.0;
    }
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1201)) + _1201;
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1202)) + _1202;
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1203)) + _1203;
    float _1547 = fma(_1526, cbSceneParam._m0[89u].z, fma(_1525, cbSceneParam._m0[89u].y, _1524 * cbSceneParam._m0[89u].x));
    float _1550 = fma(_1526, cbSceneParam._m0[90u].z, fma(_1525, cbSceneParam._m0[90u].y, _1524 * cbSceneParam._m0[90u].x));
    float _1553 = fma(_1526, cbSceneParam._m0[91u].z, fma(_1525, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1524));
    float _1568 = _797 * 0.5;
    float _1569 = _798 * 0.5;
    float _1570 = _799 * 0.5;
    float _1571 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1574 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1577 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1611;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1584 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1188, _1192, _1195, _1198));
        float _1588 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1190, _1193, _1196, _1199));
        float _1592 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1191, _1194, _1197, _1200));
        float _1599 = dot(vec4(cbModelParam._m0[39u]), vec4(_1568, _1569, _1570, 1.0));
        _1611 = dot(vec3(isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1599) ? 0.0 : (isnan(0.0) ? _1599 : max(0.0, _1599))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1611 = 1.0;
    }
    float _1622;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1613 = dot(vec4(cbModelParam._m0[40u]), vec4(_1568, _1569, _1570, 1.0));
        _1622 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1613) ? 0.0 : (isnan(0.0) ? _1613 : max(0.0, _1613))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1622 = 1.0;
    }
    float _1626 = (_1622 * cbModelParam._m0[1u].x) + (_1611 * (1.0 - cbModelParam._m0[1u].x));
    float _1636 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _630);
    float _1637 = isnan(_1636) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1636 : min(cbModelParam._m0[25u].z, _1636));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1686 = fma(_858, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850)) + cbModelParam._m0[13u].w;
        float _1690 = fma(_858, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850)) + cbModelParam._m0[14u].w;
        float _1694 = fma(_858, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850)) + cbModelParam._m0[15u].w;
        float _1697 = fma(_799, cbModelParam._m0[13u].z, fma(_798, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _797));
        float _1700 = fma(_799, cbModelParam._m0[14u].z, fma(_798, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _797));
        float _1703 = fma(_799, cbModelParam._m0[15u].z, fma(_798, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _797));
        float _1731;
        if (_1697 > 0.0)
        {
            _1731 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1731 = frontier_phi_17_15_ladder;
        }
        float _1954;
        if (_1700 > 0.0)
        {
            _1954 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1954 = frontier_phi_26_22_ladder;
        }
        float _2200;
        if (_1703 > 0.0)
        {
            _2200 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2200 = frontier_phi_38_33_ladder;
        }
        float _2202 = isnan(_1954) ? _1731 : (isnan(_1731) ? _1954 : min(_1731, _1954));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1697) + _1686;
        float _2208 = (_2203 * _1700) + _1690;
        float _2209 = (_2203 * _1703) + _1694;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2212 = (-1.0) - _2210;
        float _2214 = _2210 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2209 > _2214) || ((_2209 < _2212) || ((_2208 > _2214) || ((_2208 < _2212) || ((_2207 < _2212) || (_2207 > _2214))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2209, cbModelParam._m0[9u].z, fma(_2208, cbModelParam._m0[9u].y, _2207 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2209, cbModelParam._m0[10u].z, fma(_2208, cbModelParam._m0[10u].y, _2207 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2209, cbModelParam._m0[11u].z, fma(_2208, cbModelParam._m0[11u].y, _2207 * cbModelParam._m0[11u].x))), _1637);
            frontier_phi_16_38_ladder = _2333.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2333.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2333.x * cbModelParam._m0[1u].y;
        }
        _1719 = frontier_phi_16_38_ladder_2;
        _1721 = frontier_phi_16_38_ladder_1;
        _1723 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_797, _798, _799), _1637);
        _1719 = _1707.x * cbModelParam._m0[1u].y;
        _1721 = _1707.y * cbModelParam._m0[1u].y;
        _1723 = _1707.z * cbModelParam._m0[1u].y;
    }
    float _1727 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _630);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1727 : min(cbModelParam._m0[25u].w, _1727));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1783 = fma(_858, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850)) + cbModelParam._m0[21u].w;
        float _1787 = fma(_858, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850)) + cbModelParam._m0[22u].w;
        float _1791 = fma(_858, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850)) + cbModelParam._m0[23u].w;
        float _1794 = fma(_799, cbModelParam._m0[21u].z, fma(_798, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _797));
        float _1797 = fma(_799, cbModelParam._m0[22u].z, fma(_798, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _797));
        float _1800 = fma(_799, cbModelParam._m0[23u].z, fma(_798, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _797));
        float _1959;
        if (_1794 > 0.0)
        {
            _1959 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1959 = frontier_phi_28_24_ladder;
        }
        float _2227;
        if (_1797 > 0.0)
        {
            _2227 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2227 = frontier_phi_40_35_ladder;
        }
        float _2432;
        if (_1800 > 0.0)
        {
            _2432 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2432 = frontier_phi_49_46_ladder;
        }
        float _2434 = isnan(_2227) ? _1959 : (isnan(_1959) ? _2227 : min(_1959, _2227));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1794) + _1783;
        float _2440 = (_2435 * _1797) + _1787;
        float _2441 = (_2435 * _1800) + _1791;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2443 = (-1.0) - _2442;
        float _2445 = _2442 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2441 > _2445) || ((_2441 < _2443) || ((_2440 > _2445) || ((_2440 < _2443) || ((_2439 < _2443) || (_2439 > _2445))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2441, cbModelParam._m0[17u].z, fma(_2440, cbModelParam._m0[17u].y, _2439 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2441, cbModelParam._m0[18u].z, fma(_2440, cbModelParam._m0[18u].y, _2439 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2441, cbModelParam._m0[19u].z, fma(_2440, cbModelParam._m0[19u].y, _2439 * cbModelParam._m0[19u].x))), _1728);
            frontier_phi_25_49_ladder = _2640.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2640.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2640.x * cbModelParam._m0[1u].z;
        }
        _1819 = frontier_phi_25_49_ladder_2;
        _1821 = frontier_phi_25_49_ladder_1;
        _1823 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_797, _798, _799), _1728);
        _1819 = _1803.x * cbModelParam._m0[1u].z;
        _1821 = _1803.y * cbModelParam._m0[1u].z;
        _1823 = _1803.z * cbModelParam._m0[1u].z;
    }
    float _1835 = ((((1.0 - _818) * ((_805 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_818 * _805)) * _789;
    float _1836 = _1835 * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1837 = _1835 * ((cbModelParam._m0[1u].w * (_1821 - _1721)) + _1721);
    float _1838 = _1835 * ((cbModelParam._m0[1u].w * (_1823 - _1723)) + _1723);
    float _1841 = fma(_1838, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1836 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1838, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1836 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1838, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, _1836 * cbSceneParam._m0[91u].x));
    vec4 _1855 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_726, _727));
    float _1857 = _1855.w;
    float _1869 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1857);
    float _1870 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1857);
    float _1871 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1857);
    uvec4 _1875 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1877 = _1875.x * 14u;
    uint _1878 = _1877 + 13u;
    float _1885 = _789 + (-1.0);
    float _1890 = (cbLight._m0[_1878].x * _1885) + 1.0;
    float _1891 = (cbLight._m0[_1878].y * _1885) + 1.0;
    float _1892 = (cbLight._m0[_1878].z * _1885) + 1.0;
    float _1893 = (cbLight._m0[_1878].w * _1885) + 1.0;
    uint _1894 = _1877 + 5u;
    float _1900 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
    uint _1904 = _1877 + 4u;
    float _1913 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
    uint _1917 = _1877 | 1u;
    float _1928 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_627, _628, _629));
    float _1931 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_627, _628, _629));
    float _4131 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _4142 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1936 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 0.3183098733425140380859375;
    float _1938 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * 0.3183098733425140380859375;
    float _1945 = ((cbLight._m0[_1894].x * _1900) * _1938) + (((cbLight._m0[_1904].x * _1869) * _1913) * _1936);
    float _1946 = ((_1900 * cbLight._m0[_1894].y) * _1938) + (((cbLight._m0[_1904].y * _1870) * _1913) * _1936);
    float _1947 = ((_1900 * cbLight._m0[_1894].z) * _1938) + (((cbLight._m0[_1904].z * _1871) * _1913) * _1936);
    uvec4 _1951 = floatBitsToUint(cbLight._m0[_1877 + 12u]);
    bool _1953 = _1951.x == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1953)
    {
        _1964 = _1945;
        _1966 = _1946;
        _1968 = _1947;
    }
    else
    {
        uint _1972 = _1877 + 6u;
        float _1988 = (dot(vec3(cbLight._m0[_1877 + 2u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _4153 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1991 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _1964 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1945;
        _1966 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1946;
        _1968 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1947;
    }
    bool _1971 = _1951.y == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1971)
    {
        _2009 = _1964;
        _2011 = _1966;
        _2013 = _1968;
    }
    else
    {
        uint _2171 = _1877 + 7u;
        float _2187 = (dot(vec3(cbLight._m0[_1877 + 3u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _2188 = _2187 * _2187;
        float _4169 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2190 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
        _2009 = (((cbLight._m0[_2171].x * 0.3183098733425140380859375) * _2189) * _2190) + _1964;
        _2011 = (((cbLight._m0[_2171].y * 0.3183098733425140380859375) * _2189) * _2190) + _1966;
        _2013 = (((cbLight._m0[_2171].z * 0.3183098733425140380859375) * _2189) * _2190) + _1968;
    }
    uint _2016 = _1877 + 8u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1877].w)) * _630) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1877].x + _706;
    float _2032 = cbLight._m0[_1877].y + _707;
    float _2033 = cbLight._m0[_1877].z + _708;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1877].xyz));
    float _4185 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _4196 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _2045 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2046 = dot(vec3(_627, _628, _629), vec3(_2038, _2039, _2040));
    float _4207 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2050 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_2038, _2039, _2040));
    float _4218 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2054 = _2030 * _2030;
    float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
    float _2069 = (exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2070 = 1.0 - _2030;
    float _2081 = (0.5 / (((_2045 * ((_2044 * _2070) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2070) + _2030) * _2044))) * _2044;
    float _4229 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2083 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
    uint _2097 = _1877 + 9u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _630) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1917].x + _706;
    float _2111 = cbLight._m0[_1917].y + _707;
    float _2112 = cbLight._m0[_1917].z + _708;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1917].xyz));
    float _4240 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2124 = dot(vec3(_627, _628, _629), vec3(_2117, _2118, _2119));
    float _4251 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_2117, _2118, _2119));
    float _4262 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2109 * _2109;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2145 = (exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2146 = 1.0 - _2109;
    float _2156 = (0.5 / (((_2045 * ((_2123 * _2146) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2146) + _2109) * _2123))) * _2123;
    float _4273 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2158 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    float _2168 = (((_2145 * cbLight._m0[_2097].x) * _2158) * _1900) + ((((cbLight._m0[_2016].x * _1869) * _2069) * _2083) * _1913);
    float _2169 = (((_2145 * cbLight._m0[_2097].y) * _2158) * _1900) + ((((cbLight._m0[_2016].y * _1870) * _2069) * _2083) * _1913);
    float _2170 = (((_2145 * cbLight._m0[_2097].z) * _2158) * _1900) + ((((cbLight._m0[_2016].z * _1871) * _2069) * _2083) * _1913);
    float _2232;
    float _2234;
    float _2236;
    if (_1953)
    {
        _2232 = _2168;
        _2234 = _2169;
        _2236 = _2170;
    }
    else
    {
        uint _2238 = _1877 + 2u;
        uint _2242 = _1877 + 10u;
        float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _630) * 0.949999988079071044921875);
        float _2257 = _2256 * _2256;
        float _2258 = cbLight._m0[_2238].x + _706;
        float _2259 = cbLight._m0[_2238].y + _707;
        float _2260 = cbLight._m0[_2238].z + _708;
        float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
        float _2265 = _2264 * _2258;
        float _2266 = _2264 * _2259;
        float _2267 = _2264 * _2260;
        float _2268 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2238].xyz));
        float _4284 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2272 = dot(vec3(_627, _628, _629), vec3(_2265, _2266, _2267));
        float _4295 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2276 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2265, _2266, _2267));
        float _4306 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2280 = _2257 * _2257;
        float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
        float _2293 = (exp2(log2(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2294 = 1.0 - _2257;
        float _2304 = (0.5 / (((_2045 * ((_2271 * _2294) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2294) + _2257) * _2271))) * _2271;
        float _4317 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2306 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
        float _2307 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _2232 = (((_2293 * cbLight._m0[_2242].x) * _2306) * _2307) + _2168;
        _2234 = (((_2293 * cbLight._m0[_2242].y) * _2306) * _2307) + _2169;
        _2236 = (((_2293 * cbLight._m0[_2242].z) * _2306) * _2307) + _2170;
    }
    float _2342;
    float _2344;
    float _2346;
    if (_1971)
    {
        _2342 = _2232;
        _2344 = _2234;
        _2346 = _2236;
    }
    else
    {
        uint _2353 = _1877 + 3u;
        uint _2357 = _1877 + 11u;
        float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _630) * 0.949999988079071044921875);
        float _2372 = _2371 * _2371;
        float _2373 = cbLight._m0[_2353].x + _706;
        float _2374 = cbLight._m0[_2353].y + _707;
        float _2375 = cbLight._m0[_2353].z + _708;
        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
        float _2380 = _2379 * _2373;
        float _2381 = _2379 * _2374;
        float _2382 = _2379 * _2375;
        float _2383 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2353].xyz));
        float _4333 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2387 = dot(vec3(_627, _628, _629), vec3(_2380, _2381, _2382));
        float _4344 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2391 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2380, _2381, _2382));
        float _4355 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2395 = _2372 * _2372;
        float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
        float _2408 = (exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2409 = 1.0 - _2372;
        float _2419 = (0.5 / (((_2045 * ((_2386 * _2409) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2409) + _2372) * _2386))) * _2386;
        float _4366 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
        _2342 = (((_2408 * cbLight._m0[_2357].x) * _2421) * _2422) + _2232;
        _2344 = (((_2408 * cbLight._m0[_2357].y) * _2421) * _2422) + _2234;
        _2346 = (((_2408 * cbLight._m0[_2357].z) * _2421) * _2422) + _2236;
    }
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    if (_1875.y == 0u)
    {
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2497;
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2497;
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2497;
        uvec4 _2512 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2513 = _2512.x;
        uint _2524 = uint((float(_2512.y) * floor(float(uint(cbSceneParam._m0[85u].y * _727) / _2513))) + floor(float(uint(cbSceneParam._m0[85u].x * _726) / _2513)));
        float _2534 = (log2(_2500 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2535 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        uint _2538 = uint(isnan(14.0) ? _2535 : (isnan(_2535) ? 14.0 : min(_2535, 14.0)));
        uvec4 _2543 = texelFetch(g_lightClusterGridBuffer, int(((_2538 << 2u) + (_2524 << 6u)) >> 2u));
        uint _2544 = _2543.x;
        uint _2545 = _2512.z;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((((1u << ((_2545 >> 4u) & 15u)) + 4294967295u) & _2544) == 0u) || ((_2545 & 240u) == 0u))
        {
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
        }
        else
        {
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            uint _2804 = 0u;
            uint _2813;
            bool _2814;
            for (;;)
            {
                _2813 = texelFetch(g_lightClassification, int((((_2538 << 5u) + (_2524 << 9u)) + (_2804 << 2u)) >> 2u)).x;
                _2814 = _2813 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2814)
                {
                    frontier_phi_66_pred = _2798;
                    frontier_phi_66_pred_1 = _2803;
                    frontier_phi_66_pred_2 = _2802;
                    frontier_phi_66_pred_3 = _2801;
                    frontier_phi_66_pred_4 = _2800;
                    frontier_phi_66_pred_5 = _2799;
                }
                else
                {
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    uint _2949;
                    _2943 = _2798;
                    _2944 = _2799;
                    _2945 = _2800;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2813;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    for (;;)
                    {
                        uint _2953 = uint(findLSB(_2949)) + (_2804 << 5u);
                        uint _2950 = (_2949 + 4294967295u) & _2949;
                        uint _2955 = _2953 * 48u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2975 = (_2953 * 48u) + 4u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2994 = (_2953 * 48u) + 8u;
                        vec3 _3005 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x));
                        float _3009 = _2969.x - _2498;
                        float _3010 = _2969.y - _2499;
                        float _3011 = _2969.z - _2500;
                        float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                        float _3015 = inversesqrt(_3012);
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3019 = dot(vec3(_745, _748, _751), vec3(_3016, _3017, _3018));
                        float _3024 = 1.0 - (_3012 * _2969.w);
                        float _4392 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3026 = sqrt(_3012) * _2988.w;
                        float _3029 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _3019) + _3030;
                        float _3036 = _3026 * _3026;
                        float _3040 = ((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3025) / ((_3036 * 0.699999988079071044921875) + 1.0);
                        float _3044 = (-0.0) - _2498;
                        float _3045 = (-0.0) - _2499;
                        float _3046 = (-0.0) - _2500;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3061 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                        float _3062 = 1.0 - _805;
                        float _3069 = sqrt(1.0 - ((1.0 - (_3062 * _3062)) * (1.0 - (_3061 * _3061))));
                        float _3070 = _3069 * _3069;
                        float _3071 = _3070 * _3070;
                        float _3072 = _3051 + _3016;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3082 = dot(vec3(_745, _748, _751), vec3(_3051, _3052, _3053));
                        float _4408 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3085 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                        float _3086 = dot(vec3(_745, _748, _751), vec3(_3078 * _3072, _3078 * _3073, _3078 * _3074));
                        float _4419 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3089 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                        float _3093 = ((_3089 * _3089) * (_3071 + (-1.0))) + 1.0;
                        float _3094 = _3029 * _3070;
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3019) + _3095;
                        float _4430 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3099 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3100 = 1.0 - _3070;
                        float _3110 = (0.5 / (((_3099 * ((_3085 * _3100) + _3070)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3070) * _3085))) * _3099;
                        float _4441 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3121 = (((_3071 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3093 * _3093) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125))) * _3025;
                        _2873 = (_3040 * _2988.x) + _2946;
                        _2874 = (_3040 * _2988.y) + _2947;
                        _2875 = (_3040 * _2988.z) + _2948;
                        _2870 = (_3121 * _3005.x) + _2943;
                        _2871 = (_3121 * _3005.y) + _2944;
                        _2872 = (_3121 * _3005.z) + _2945;
                        if (_2950 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2943 = _2870;
                            _2944 = _2871;
                            _2945 = _2872;
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2950;
                        }
                    }
                    frontier_phi_66_pred = _2870;
                    frontier_phi_66_pred_1 = _2875;
                    frontier_phi_66_pred_2 = _2874;
                    frontier_phi_66_pred_3 = _2873;
                    frontier_phi_66_pred_4 = _2872;
                    frontier_phi_66_pred_5 = _2871;
                }
                _2646 = frontier_phi_66_pred;
                _2656 = frontier_phi_66_pred_1;
                _2654 = frontier_phi_66_pred_2;
                _2652 = frontier_phi_66_pred_3;
                _2650 = frontier_phi_66_pred_4;
                _2648 = frontier_phi_66_pred_5;
                uint _2805 = _2804 + 1u;
                if (_2805 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2798 = _2646;
                    _2799 = _2648;
                    _2800 = _2650;
                    _2801 = _2652;
                    _2802 = _2654;
                    _2803 = _2656;
                    _2804 = _2805;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
        }
        uvec4 _2659 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2660 = _2659.z;
        uint _2662 = (_2660 >> 8u) & 15u;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((4294967295u << _2662) & _2544) == 0u)
        {
            _2766 = _2645;
            _2768 = _2647;
            _2770 = _2649;
            _2772 = _2651;
            _2774 = _2653;
            _2776 = _2655;
        }
        else
        {
            float _2791 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
            float _2792 = _2791 * _2498;
            float _2793 = _2791 * _2499;
            float _2794 = _2791 * _2500;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2662 < ((_2660 >> 12u) & 15u))
            {
                float _2767;
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2926 = _2645;
                float _2927 = _2647;
                float _2928 = _2649;
                float _2929 = _2651;
                float _2930 = _2653;
                float _2931 = _2655;
                uint _2932 = _2662;
                uint _2941;
                bool _2942;
                for (;;)
                {
                    _2941 = texelFetch(g_lightClassification, int((((_2538 << 5u) + (_2524 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                    _2942 = _2941 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2942)
                    {
                        frontier_phi_77_pred = _2931;
                        frontier_phi_77_pred_1 = _2930;
                        frontier_phi_77_pred_2 = _2929;
                        frontier_phi_77_pred_3 = _2928;
                        frontier_phi_77_pred_4 = _2927;
                        frontier_phi_77_pred_5 = _2926;
                    }
                    else
                    {
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3148 = _2926;
                        float _3149 = _2927;
                        float _3150 = _2928;
                        float _3151 = _2929;
                        float _3152 = _2930;
                        float _3153 = _2931;
                        uint _3154 = _2941;
                        uint _3155;
                        vec4 _3180;
                        float _3181;
                        vec4 _3196;
                        vec3 _3208;
                        vec4 _3223;
                        vec4 _3238;
                        float _3284;
                        bool _3285;
                        for (;;)
                        {
                            uint _3165 = ((_2932 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3154));
                            _3155 = (_3154 + 4294967295u) & _3154;
                            uint _3167 = _3165 * 40u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            _3181 = _3180.w;
                            uint _3183 = (_3165 * 40u) + 4u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3165 * 40u) + 8u;
                            _3208 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x));
                            uint _3210 = (_3165 * 40u) + 16u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3225 = (_3165 * 40u) + 20u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3240 = (_3165 * 40u) + 24u;
                            vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3259 = (_3165 * 40u) + 28u;
                            vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            _3284 = fma(_2500, _3272.z, fma(_2499, _3272.y, _3272.x * _2498)) + _3272.w;
                            _3285 = !((fma(_2500, _3253.z, fma(_2499, _3253.y, _3253.x * _2498)) + _3253.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3285)
                            {
                                float _3312 = _3180.x - _2498;
                                float _3313 = _3180.y - _2499;
                                float _3314 = _3180.z - _2500;
                                float _3315 = dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314));
                                float _3318 = inversesqrt(_3315);
                                float _3319 = _3318 * _3312;
                                float _3320 = _3318 * _3313;
                                float _3321 = _3318 * _3314;
                                float _3325 = 1.0 - (_3315 / (_3181 * _3181));
                                float _4452 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3330 = sqrt(_3315) * _3196.w;
                                float _3332 = 1.39999997615814208984375 / (_3330 + 1.39999997615814208984375);
                                float _3333 = _3332 * _3332;
                                float _3336 = ((1.0 - _3333) * dot(vec3(_3319, _3320, _3321), vec3(_745, _748, _751))) + _3333;
                                float _3339 = _3330 * _3330;
                                float _3343 = (fma(_2500, _3223.z, fma(_2499, _3223.y, _3223.x * _2498)) + _3223.w) / _3284;
                                float _3344 = (fma(_2500, _3238.z, fma(_2499, _3238.y, _3238.x * _2498)) + _3238.w) / _3284;
                                float _3348 = 1.0 - dot(vec2(_3343, _3344), vec2(_3343, _3344));
                                float _4468 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3350 = _3349 * (((isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0))) * _3326) / ((_3339 * 0.699999988079071044921875) + 1.0));
                                float _3362 = exp2(log2(1.0 / ((_3339 * 3.5) + 5.0)) * 0.25);
                                float _3363 = 1.0 - _805;
                                float _3370 = sqrt(1.0 - ((1.0 - (_3363 * _3363)) * (1.0 - (_3362 * _3362))));
                                float _3371 = _3370 * _3370;
                                float _3372 = _3371 * _3371;
                                float _3373 = _3319 - _2792;
                                float _3374 = _3320 - _2793;
                                float _3375 = _3321 - _2794;
                                float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                                float _3383 = dot(vec3(_745, _748, _751), vec3((-0.0) - _2792, (-0.0) - _2793, (-0.0) - _2794));
                                float _4479 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3386 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3387 = dot(vec3(_745, _748, _751), vec3(_3379 * _3373, _3379 * _3374, _3379 * _3375));
                                float _4490 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3390 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3394 = ((_3390 * _3390) * (_3372 + (-1.0))) + 1.0;
                                float _3395 = _3332 * _3371;
                                float _3396 = _3395 * _3395;
                                float _3402 = ((1.0 - _3396) * dot(vec3(_745, _748, _751), vec3(_3319, _3320, _3321))) + _3396;
                                float _4501 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3404 = 1.0 - _3371;
                                float _3414 = (0.5 / (((_3403 * ((_3386 * _3404) + _3371)) + 9.9999999392252902907785028219223e-09) + (((_3403 * _3404) + _3371) * _3386))) * _3403;
                                float _4512 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3424 = (_3349 * _3326) * (((_3372 * 3.1415927410125732421875) * (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) / ((_3394 * _3394) * ((_3339 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3350 * _3196.y;
                                frontier_phi_83_pred_1 = _3350 * _3196.x;
                                frontier_phi_83_pred_2 = _3424 * _3208.z;
                                frontier_phi_83_pred_3 = _3424 * _3208.y;
                                frontier_phi_83_pred_4 = _3424 * _3208.x;
                                frontier_phi_83_pred_5 = _3350 * _3196.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3432 = frontier_phi_83_pred;
                            _3431 = frontier_phi_83_pred_1;
                            _3430 = frontier_phi_83_pred_2;
                            _3429 = frontier_phi_83_pred_3;
                            _3428 = frontier_phi_83_pred_4;
                            _3433 = frontier_phi_83_pred_5;
                            _3138 = _3431 + _3151;
                            _3139 = _3432 + _3152;
                            _3140 = _3433 + _3153;
                            _3135 = _3428 + _3148;
                            _3136 = _3429 + _3149;
                            _3137 = _3430 + _3150;
                            if (_3155 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3155;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3140;
                        frontier_phi_77_pred_1 = _3139;
                        frontier_phi_77_pred_2 = _3138;
                        frontier_phi_77_pred_3 = _3137;
                        frontier_phi_77_pred_4 = _3136;
                        frontier_phi_77_pred_5 = _3135;
                    }
                    _2777 = frontier_phi_77_pred;
                    _2775 = frontier_phi_77_pred_1;
                    _2773 = frontier_phi_77_pred_2;
                    _2771 = frontier_phi_77_pred_3;
                    _2769 = frontier_phi_77_pred_4;
                    _2767 = frontier_phi_77_pred_5;
                    uint _2933 = _2932 + 1u;
                    if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2926 = _2767;
                        _2927 = _2769;
                        _2928 = _2771;
                        _2929 = _2773;
                        _2930 = _2775;
                        _2931 = _2777;
                        _2932 = _2933;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2771;
                frontier_phi_58_59_ladder_1 = _2777;
                frontier_phi_58_59_ladder_2 = _2775;
                frontier_phi_58_59_ladder_3 = _2773;
                frontier_phi_58_59_ladder_4 = _2769;
                frontier_phi_58_59_ladder_5 = _2767;
            }
            else
            {
                frontier_phi_58_59_ladder = _2649;
                frontier_phi_58_59_ladder_1 = _2655;
                frontier_phi_58_59_ladder_2 = _2653;
                frontier_phi_58_59_ladder_3 = _2651;
                frontier_phi_58_59_ladder_4 = _2647;
                frontier_phi_58_59_ladder_5 = _2645;
            }
            _2766 = frontier_phi_58_59_ladder_5;
            _2768 = frontier_phi_58_59_ladder_4;
            _2770 = frontier_phi_58_59_ladder;
            _2772 = frontier_phi_58_59_ladder_3;
            _2774 = frontier_phi_58_59_ladder_2;
            _2776 = frontier_phi_58_59_ladder_1;
        }
        float _2781 = isnan(1.0) ? _789 : (isnan(_789) ? 1.0 : min(_789, 1.0));
        _2557 = (_2781 * _2772) + _2009;
        _2559 = (_2781 * _2774) + _2011;
        _2561 = (_2781 * _2776) + _2013;
        _2563 = ((_2766 * 0.039999999105930328369140625) * _2781) + _2342;
        _2565 = ((_2768 * 0.039999999105930328369140625) * _2781) + _2344;
        _2567 = ((_2770 * 0.039999999105930328369140625) * _2781) + _2346;
    }
    else
    {
        _2557 = _2009;
        _2559 = _2011;
        _2561 = _2013;
        _2563 = _2342;
        _2565 = _2344;
        _2567 = _2346;
    }
    float _4528 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4539 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4550 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _2584 = ((isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2557 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _789))) + ((_2563 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1626)) * cbPerFrame._m0[3u].x);
    float _2585 = ((isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2559 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _789))) + ((_2565 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1626)) * cbPerFrame._m0[3u].x);
    float _2586 = ((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2561 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _789))) + ((_2567 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1626)) * cbPerFrame._m0[3u].x);
    uint _2587 = _264 + 6u;
    float _2595 = _726 / cbSceneParam._m0[86u].x;
    float _2596 = _727 / cbSceneParam._m0[86u].y;
    vec4 _2610 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2595, _2596, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2612 = _2610.x;
    float _2613 = _2610.y;
    float _2614 = _2610.z;
    float _2615 = _2610.w;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2670 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2671 = _2670 / _648;
        float _2682 = _2671 * _699;
        float _2683 = _700 * _2671;
        float _2684 = (-0.0) - _2683;
        float _2686 = _2671 * _701;
        float _2688 = (cbSceneParam._m0[77u].w * _2684) / _2670;
        float _2689 = _2688 + cbSceneParam._m0[79u].w;
        float _2690 = cbSceneParam._m0[79u].w - _2683;
        float _2696 = sqrt(((_2682 * _2682) + (_2683 * _2683)) + (_2686 * _2686));
        float _2699 = (1.0 - (cbSceneParam._m0[77u].w / _2670)) * _2696;
        float _2704 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2706 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2883;
        if (abs((_2684 - _2688) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2883 = ((((_2689 > 0.0) ? exp2(_2704 * _2689) : (2.0 - exp2(_2706 * _2689))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2699;
        }
        else
        {
            float _2827 = 1.0 / cbSceneParam._m0[80u].x;
            float _2828 = isnan(_2690) ? _2689 : (isnan(_2689) ? _2690 : max(_2689, _2690));
            float _2829 = isnan(_2690) ? _2689 : (isnan(_2689) ? _2690 : min(_2689, _2690));
            float _2838 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : min(_2828, 0.0));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            _2883 = ((abs(_2696 / _2684) * cbSceneParam._m0[80u].y) * ((((_2838 - _2839) * 2.0) - ((exp2(_2704 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0)))) - exp2(_2704 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0))))) * _2827)) - ((exp2(_2706 * _2838) - exp2(_2706 * _2839)) * _2827))) + (_2699 * cbSceneParam._m0[80u].z);
        }
        vec4 _2885 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2595, _2596, 1.0), 0.0);
        float _2894 = exp2((_2883 * (-1.44269502162933349609375)) * (1.0 - _2885.w));
        float _2895 = log2(_2894);
        float _2911 = log2(_2615);
        _2708 = (exp2(_2911 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].x)) * _2885.x) / cbSceneParam._m0[78u].x)) + _2612;
        _2710 = (exp2(_2911 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].y)) * _2885.y) / cbSceneParam._m0[78u].y)) + _2613;
        _2712 = (exp2(_2911 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].z)) * _2885.z) / cbSceneParam._m0[78u].z)) + _2614;
        _2714 = _2894 * _2615;
    }
    else
    {
        _2708 = _2612;
        _2710 = _2613;
        _2712 = _2614;
        _2714 = _2615;
    }
    bool _2921;
    vec4 _2724;
    vec4 _2746;
    float _2748;
    float _2752;
    float _2753;
    float _2754;
    float _2755;
    bool _2765;
    for (;;)
    {
        _2724 = cbMatDynParam._m0[0u];
        float _2726 = roundEven(_2724.y);
        bool _2727 = _2726 == 3.0;
        float _2728 = log2(_2714);
        float _2735 = exp2(_2728 * cbSceneParam._m0[78u].x) * _2584;
        float _2736 = exp2(_2728 * cbSceneParam._m0[78u].y) * _2585;
        float _2737 = exp2(_2728 * cbSceneParam._m0[78u].z) * _2586;
        float _2744 = _715 + (-0.5);
        _2746 = cbMtdParam._m0[1u];
        _2748 = _2746.y * _2744;
        float _2751 = (_2726 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2752 = _2751 * (_2727 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2708)));
        _2753 = _2751 * (_2727 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2710)));
        _2754 = _2751 * (_2727 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2712)));
        _2755 = _2744 * 0.999000012874603271484375;
        _2765 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2765)
        {
            if ((cbInstanceData._m0[_264 + 7u].x + _2755) < 0.5)
            {
                _2921 = true;
                break;
            }
        }
        uint _2862 = _764 + uint(_2724.w);
        if ((cbInstanceData._m0[_2862].w < 1.0) && ((cbInstanceData._m0[_2862].w + _2755) < 0.5))
        {
            _2921 = true;
            break;
        }
        if ((_2748 + 1.0) < _2746.x)
        {
            _2921 = true;
            break;
        }
        _2921 = false;
        break;
    }
    float _3126;
    if (_2921)
    {
        discard_state = true;
        _3126 = 0.0;
    }
    else
    {
        _3126 = cbInstanceData._m0[_2587].w;
    }
    SV_Target.x = _2752;
    SV_Target.y = _2753;
    SV_Target.z = _2754;
    SV_Target.w = _3126;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2587].w;
    discard_exit();
}


