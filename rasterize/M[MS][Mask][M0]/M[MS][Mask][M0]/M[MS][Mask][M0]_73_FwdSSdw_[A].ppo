#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1371;
float _3754;
float _3755;
float _3756;
float _3757;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3766 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3777 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3788 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _374.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3799 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _448 = (_441 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _449 = (_441 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _450 = (_441 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _374.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].z) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3810 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    float _527 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _521;
    float _530 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _522;
    float _533 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _523;
    float _540 = ((_521 - _527) * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) + _527;
    float _541 = ((_522 - _530) * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) + _530;
    float _542 = ((_523 - _533) * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) + _533;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _603 = _601.x;
    float _604 = _601.y;
    float _605 = _601.z;
    float _612 = ((_584.x - _603) * _441) + _603;
    float _613 = ((_584.y - _604) * _441) + _604;
    float _614 = ((_584.z - _605) * _441) + _605;
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _639 = ((_626.z - _614) * _514) + _614;
    float _642 = ((((_626.x - _612) * _514) + _612) * 2.0) + (-1.0);
    float _643 = ((((_626.y - _613) * _514) + _613) * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3821 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))));
    vec4 _667 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _679 = (_642 + ((((_559.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_667.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _680 = (_643 + ((((_559.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_667.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _683 = fma(_649, _239, fma(_680, _246, _679 * _232));
    float _686 = fma(_649, _240, fma(_680, _247, _679 * _233));
    float _689 = fma(_649, _241, fma(_680, _248, _679 * _234));
    float _693 = inversesqrt(dot(vec3(_683, _686, _689), vec3(_683, _686, _689)));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _722 = _720.x;
    float _723 = 1.0 - _722;
    float _729 = (cbMtdParam._m0[19u].x + dot(vec4(_693 * _683, _693 * _686, _693 * _689, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_722 - _723) * cbMtdParam._m0[24u].w) + _723) * cbMtdParam._m0[21u].z);
    float _3832 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _730 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _737 = (_730 * (cbMtdParam._m0[17u].x - _540)) + _540;
    float _738 = (_730 * (cbMtdParam._m0[17u].y - _541)) + _541;
    float _739 = (_730 * (cbMtdParam._m0[17u].z - _542)) + _542;
    float _744 = (((_559.z - _639) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _639;
    float _748 = ((_667.z - _744) * cbMtdParam._m0[19u].w) + _744;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _768 = (_761.x * 2.0) + (-1.0);
    float _769 = (_761.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _3843 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _778 = ((_761.z - _748) * _730) + _748;
    float _788 = ((sqrt(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) - _649) * _730) + _649;
    float _791 = (((_768 - _679) * _730) + _679) + (cbMtdParam._m0[21u].x * _679);
    float _792 = (((_769 - _680) * _730) + _680) + (cbMtdParam._m0[21u].x * _680);
    float _794 = cbMtdParam._m0[22u].x + _667.w;
    float _797 = fma(_788, _239, fma(_792, _246, _791 * _232));
    float _800 = fma(_788, _240, fma(_792, _247, _791 * _233));
    float _803 = fma(_788, _241, fma(_792, _248, _791 * _234));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    float _3854 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _811 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _3876 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3887 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3898 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _829 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _881 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _871);
    float _882 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _871);
    float _883 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _871);
    float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
    float _888 = _881 * _887;
    float _889 = _882 * _887;
    float _890 = _883 * _887;
    vec4 _895 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _897 = _895.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1051 = sqrt(((_881 * _881) + (_882 * _882)) + (_883 * _883));
        float _1057 = (cbMatDynParam._m0[5u].x * _1051) + cbMatDynParam._m0[5u].y;
        float _3909 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1062 = (cbMatDynParam._m0[5u].z * _1051) + cbMatDynParam._m0[5u].w;
        float _3920 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) - _1058)) + _1058) < ((_897 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _908 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _909 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _927 = fma(_810, cbSceneParam._m0[5u].z, fma(_809, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _808));
    float _930 = fma(_810, cbSceneParam._m0[6u].z, fma(_809, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _808));
    float _933 = fma(_810, cbSceneParam._m0[7u].z, fma(_809, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _808));
    uint _946 = _272 + 9u;
    uint _947 = _946 + uint(cbMatDynParam._m0[0u].w);
    float _953 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_947].x;
    float _954 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_947].y;
    float _955 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * cbInstanceData._m0[_947].z;
    float _3931 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    vec4 _967 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _908, cbSceneParam._m0[86u].y * _909));
    float _971 = ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * TEXCOORD_5.w) * _967.x;
    float _972 = dot(vec3(_808, _809, _810), vec3(_888, _889, _890));
    float _975 = _972 * 2.0;
    float _979 = (_975 * _808) - _888;
    float _980 = (_975 * _809) - _889;
    float _981 = (_975 * _810) - _890;
    float _985 = abs(dot(vec3(_888, _889, _890), vec3(_808, _809, _810)));
    float _3964 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _987 = sqrt(_811);
    float _1000 = exp2((_987 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_987 * 3.0));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1370;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1095 = fma(_1040, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032));
        float _1099 = fma(_1040, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032));
        float _1103 = fma(_1040, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032));
        float _1128 = _1032 + _808;
        float _1129 = _1036 + _809;
        float _1130 = _1040 + _810;
        float _1140 = fma(_1130, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128)) - _1095;
        float _1141 = fma(_1130, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128)) - _1099;
        float _1142 = fma(_1130, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128)) - _1103;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1095 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1099 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[34u].z) + ((((((_1103 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1198 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1164.x + (-0.5));
        float _1200 = _1198 * (_1164.y + (-0.5));
        float _1201 = _1198 * (_1164.z + (-0.5));
        float _1208 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1171.x + (-0.5));
        float _1210 = _1208 * (_1171.y + (-0.5));
        float _1211 = _1208 * (_1171.z + (-0.5));
        float _1218 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1178.x + (-0.5));
        float _1220 = _1218 * (_1178.y + (-0.5));
        float _1221 = _1218 * (_1178.z + (-0.5));
        float _1228 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1185.x + (-0.5));
        float _1230 = _1228 * (_1185.y + (-0.5));
        float _1231 = _1228 * (_1185.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1252 = (dot(vec3(_808, _809, _810), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1262 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4012 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1264 + 1.0))) + _1269) * _1232;
        float _1279 = _1200 * 0.5;
        float _1280 = _1210 * 0.5;
        float _1281 = _1220 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_808, _809, _810), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4045 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1306 + 1.0))) + _1311) * _1233;
        float _1321 = _1201 * 0.5;
        float _1322 = _1211 * 0.5;
        float _1323 = _1221 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_808, _809, _810), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4078 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1348 + 1.0))) + _1353) * _1234;
        _1370 = _1201;
        _1372 = _1200;
        _1373 = _1199;
        _1374 = _1211;
        _1375 = _1210;
        _1376 = _1209;
        _1377 = _1221;
        _1378 = _1220;
        _1379 = _1219;
        _1380 = _1234;
        _1381 = _1233;
        _1382 = _1232;
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1371;
        _1372 = _1371;
        _1373 = _1371;
        _1374 = _1371;
        _1375 = _1371;
        _1376 = _1371;
        _1377 = _1371;
        _1378 = _1371;
        _1379 = _1371;
        _1380 = _1371;
        _1381 = _1371;
        _1382 = _1371;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1412 = fma(_1040, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032));
        float _1416 = fma(_1040, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032));
        float _1420 = fma(_1040, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032));
        float _1443 = _1032 + _808;
        float _1444 = _1036 + _809;
        float _1445 = _1040 + _810;
        float _1455 = fma(_1445, cbModelParam._m0[30u].z, fma(_1444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1443)) - _1412;
        float _1456 = fma(_1445, cbModelParam._m0[31u].z, fma(_1444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1443)) - _1416;
        float _1457 = fma(_1445, cbModelParam._m0[32u].z, fma(_1444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1443)) - _1420;
        float _1461 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
        float _1474 = ((_1461 * _1455) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1412 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1461 * _1456) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1416 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1461 * _1457) / cbModelParam._m0[35u].z) + ((((((_1420 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        float _1511 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1478.x + (-0.5));
        float _1513 = _1511 * (_1478.y + (-0.5));
        float _1514 = _1511 * (_1478.z + (-0.5));
        float _1521 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1485.x + (-0.5));
        float _1523 = _1521 * (_1485.y + (-0.5));
        float _1524 = _1521 * (_1485.z + (-0.5));
        float _1531 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1492.x + (-0.5));
        float _1533 = _1531 * (_1492.y + (-0.5));
        float _1534 = _1531 * (_1492.z + (-0.5));
        float _1541 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1499.x + (-0.5));
        float _1543 = _1541 * (_1499.y + (-0.5));
        float _1544 = _1541 * (_1499.z + (-0.5));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = _1512 * 0.5;
        float _1549 = _1522 * 0.5;
        float _1550 = _1532 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_808, _809, _810), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4141 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1575 + 1.0))) + _1580) * _1545;
        float _1590 = _1513 * 0.5;
        float _1591 = _1523 * 0.5;
        float _1592 = _1533 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_808, _809, _810), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4174 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1617 + 1.0))) + _1622) * _1546;
        float _1632 = _1514 * 0.5;
        float _1633 = _1524 * 0.5;
        float _1634 = _1534 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_808, _809, _810), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4207 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1659 + 1.0))) + _1664) * _1547;
        _1681 = _1514;
        _1682 = _1513;
        _1683 = _1512;
        _1684 = _1524;
        _1685 = _1523;
        _1686 = _1522;
        _1687 = _1534;
        _1688 = _1533;
        _1689 = _1532;
        _1690 = _1547;
        _1691 = _1546;
        _1692 = _1545;
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
    }
    else
    {
        _1681 = _1371;
        _1682 = _1371;
        _1683 = _1371;
        _1684 = _1371;
        _1685 = _1371;
        _1686 = _1371;
        _1687 = _1371;
        _1688 = _1371;
        _1689 = _1371;
        _1690 = _1371;
        _1691 = _1371;
        _1692 = _1371;
        _1693 = 0.0;
        _1694 = 0.0;
        _1695 = 0.0;
    }
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1383)) + _1383;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1384)) + _1384;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1385)) + _1385;
    float _1728 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1705));
    float _1749 = _979 * 0.5;
    float _1750 = _980 * 0.5;
    float _1751 = _981 * 0.5;
    float _1752 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1755 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1758 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1792;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1765 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1370, _1374, _1377, _1380));
        float _1769 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1773 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1780 = dot(vec4(cbModelParam._m0[39u]), vec4(_1749, _1750, _1751, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1803;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1794 = dot(vec4(cbModelParam._m0[40u]), vec4(_1749, _1750, _1751, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1807 = (_1803 * cbModelParam._m0[1u].x) + (_1792 * (1.0 - cbModelParam._m0[1u].x));
    float _1817 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1817 : min(cbModelParam._m0[25u].z, _1817));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1866 = fma(_1040, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032)) + cbModelParam._m0[13u].w;
        float _1870 = fma(_1040, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032)) + cbModelParam._m0[14u].w;
        float _1874 = fma(_1040, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032)) + cbModelParam._m0[15u].w;
        float _1877 = fma(_981, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979));
        float _1880 = fma(_981, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979));
        float _1883 = fma(_981, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979));
        float _1911;
        if (_1877 > 0.0)
        {
            _1911 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1911 = frontier_phi_17_15_ladder;
        }
        float _2133;
        if (_1880 > 0.0)
        {
            _2133 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2133 = frontier_phi_26_22_ladder;
        }
        float _2379;
        if (_1883 > 0.0)
        {
            _2379 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2379 = frontier_phi_38_33_ladder;
        }
        float _2381 = isnan(_2133) ? _1911 : (isnan(_1911) ? _2133 : min(_1911, _2133));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1877) + _1866;
        float _2387 = (_2382 * _1880) + _1870;
        float _2388 = (_2382 * _1883) + _1874;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2389;
        float _2393 = _2389 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 > _2393) || ((_2387 < _2391) || ((_2386 < _2391) || (_2386 > _2393))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1818);
            frontier_phi_16_38_ladder = _2512.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2512.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2512.x * cbModelParam._m0[1u].y;
        }
        _1899 = frontier_phi_16_38_ladder_2;
        _1901 = frontier_phi_16_38_ladder_1;
        _1903 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_979, _980, _981), _1818);
        _1899 = _1887.x * cbModelParam._m0[1u].y;
        _1901 = _1887.y * cbModelParam._m0[1u].y;
        _1903 = _1887.z * cbModelParam._m0[1u].y;
    }
    float _1907 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1907 : min(cbModelParam._m0[25u].w, _1907));
    float _1998;
    float _2000;
    float _2002;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1962 = fma(_1040, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032)) + cbModelParam._m0[21u].w;
        float _1966 = fma(_1040, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032)) + cbModelParam._m0[22u].w;
        float _1970 = fma(_1040, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032)) + cbModelParam._m0[23u].w;
        float _1973 = fma(_981, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979));
        float _1976 = fma(_981, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979));
        float _1979 = fma(_981, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979));
        float _2138;
        if (_1973 > 0.0)
        {
            _2138 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2138 = frontier_phi_28_24_ladder;
        }
        float _2406;
        if (_1976 > 0.0)
        {
            _2406 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2406 = frontier_phi_40_35_ladder;
        }
        float _2611;
        if (_1979 > 0.0)
        {
            _2611 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2611 = frontier_phi_49_46_ladder;
        }
        float _2613 = isnan(_2406) ? _2138 : (isnan(_2138) ? _2406 : min(_2138, _2406));
        float _2614 = isnan(_2611) ? _2613 : (isnan(_2613) ? _2611 : min(_2613, _2611));
        float _2618 = (_2614 * _1973) + _1962;
        float _2619 = (_2614 * _1976) + _1966;
        float _2620 = (_2614 * _1979) + _1970;
        float _2621 = _2614 * 9.9999997473787516355514526367188e-05;
        float _2622 = (-1.0) - _2621;
        float _2624 = _2621 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2620 > _2624) || ((_2620 < _2622) || ((_2619 > _2624) || ((_2619 < _2622) || ((_2618 < _2622) || (_2618 > _2624))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2819 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2620, cbModelParam._m0[17u].z, fma(_2619, cbModelParam._m0[17u].y, _2618 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2620, cbModelParam._m0[18u].z, fma(_2619, cbModelParam._m0[18u].y, _2618 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2620, cbModelParam._m0[19u].z, fma(_2619, cbModelParam._m0[19u].y, _2618 * cbModelParam._m0[19u].x))), _1908);
            frontier_phi_25_49_ladder = _2819.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2819.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2819.x * cbModelParam._m0[1u].z;
        }
        _1998 = frontier_phi_25_49_ladder_2;
        _2000 = frontier_phi_25_49_ladder_1;
        _2002 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_979, _980, _981), _1908);
        _1998 = _1982.x * cbModelParam._m0[1u].z;
        _2000 = _1982.y * cbModelParam._m0[1u].z;
        _2002 = _1982.z * cbModelParam._m0[1u].z;
    }
    float _2014 = ((((1.0 - _1000) * ((_987 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1000 * _987)) * _971;
    float _2015 = _2014 * ((cbModelParam._m0[1u].w * (_1998 - _1899)) + _1899);
    float _2016 = _2014 * ((cbModelParam._m0[1u].w * (_2000 - _1901)) + _1901);
    float _2017 = _2014 * ((cbModelParam._m0[1u].w * (_2002 - _1903)) + _1903);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2016, cbSceneParam._m0[89u].y, _2015 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2016, cbSceneParam._m0[90u].y, _2015 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2016, cbSceneParam._m0[91u].y, _2015 * cbSceneParam._m0[91u].x));
    vec4 _2034 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_908, _909));
    float _2036 = _2034.w;
    float _2048 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2036);
    float _2049 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2036);
    float _2050 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2036);
    uvec4 _2054 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2056 = _2054.x * 14u;
    uint _2057 = _2056 + 13u;
    float _2064 = _971 + (-1.0);
    float _2069 = (cbLight._m0[_2057].x * _2064) + 1.0;
    float _2070 = (cbLight._m0[_2057].y * _2064) + 1.0;
    float _2071 = (cbLight._m0[_2057].z * _2064) + 1.0;
    float _2072 = (cbLight._m0[_2057].w * _2064) + 1.0;
    uint _2073 = _2056 + 5u;
    float _2079 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2083 = _2056 + 4u;
    float _2092 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
    uint _2096 = _2056 | 1u;
    float _2107 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_808, _809, _810));
    float _2110 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_808, _809, _810));
    float _4343 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _4354 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2115 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * 0.3183098733425140380859375;
    float _2117 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * 0.3183098733425140380859375;
    float _2124 = ((cbLight._m0[_2073].x * _2079) * _2117) + (((cbLight._m0[_2083].x * _2048) * _2092) * _2115);
    float _2125 = ((_2079 * cbLight._m0[_2073].y) * _2117) + (((cbLight._m0[_2083].y * _2049) * _2092) * _2115);
    float _2126 = ((_2079 * cbLight._m0[_2073].z) * _2117) + (((cbLight._m0[_2083].z * _2050) * _2092) * _2115);
    uvec4 _2130 = floatBitsToUint(cbLight._m0[_2056 + 12u]);
    bool _2132 = _2130.x == 0u;
    float _2143;
    float _2145;
    float _2147;
    if (_2132)
    {
        _2143 = _2124;
        _2145 = _2125;
        _2147 = _2126;
    }
    else
    {
        uint _2151 = _2056 + 6u;
        float _2167 = (dot(vec3(cbLight._m0[_2056 + 2u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2168 = _2167 * _2167;
        float _4365 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2169 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2170 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2143 = (((cbLight._m0[_2151].x * 0.3183098733425140380859375) * _2169) * _2170) + _2124;
        _2145 = (((cbLight._m0[_2151].y * 0.3183098733425140380859375) * _2169) * _2170) + _2125;
        _2147 = (((cbLight._m0[_2151].z * 0.3183098733425140380859375) * _2169) * _2170) + _2126;
    }
    bool _2150 = _2130.y == 0u;
    float _2188;
    float _2190;
    float _2192;
    if (_2150)
    {
        _2188 = _2143;
        _2190 = _2145;
        _2192 = _2147;
    }
    else
    {
        uint _2350 = _2056 + 7u;
        float _2366 = (dot(vec3(cbLight._m0[_2056 + 3u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2367 = _2366 * _2366;
        float _4381 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2368 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2369 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2188 = (((cbLight._m0[_2350].x * 0.3183098733425140380859375) * _2368) * _2369) + _2143;
        _2190 = (((cbLight._m0[_2350].y * 0.3183098733425140380859375) * _2368) * _2369) + _2145;
        _2192 = (((cbLight._m0[_2350].z * 0.3183098733425140380859375) * _2368) * _2369) + _2147;
    }
    uint _2195 = _2056 + 8u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _811) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_2056].x + _888;
    float _2211 = cbLight._m0[_2056].y + _889;
    float _2212 = cbLight._m0[_2056].z + _890;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2056].xyz));
    float _4397 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _4408 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _2224 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2225 = dot(vec3(_808, _809, _810), vec3(_2217, _2218, _2219));
    float _4419 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2229 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2217, _2218, _2219));
    float _4430 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2233 = _2209 * _2209;
    float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
    float _2248 = (exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2249 = 1.0 - _2209;
    float _2260 = (0.5 / (((_2224 * ((_2223 * _2249) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2249) + _2209) * _2223))) * _2223;
    float _4441 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2262 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
    uint _2276 = _2056 + 9u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _811) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2096].x + _888;
    float _2290 = cbLight._m0[_2096].y + _889;
    float _2291 = cbLight._m0[_2096].z + _890;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2096].xyz));
    float _4452 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2303 = dot(vec3(_808, _809, _810), vec3(_2296, _2297, _2298));
    float _4463 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2307 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2296, _2297, _2298));
    float _4474 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2311 = _2288 * _2288;
    float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
    float _2324 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2325 = 1.0 - _2288;
    float _2335 = (0.5 / (((_2224 * ((_2302 * _2325) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2325) + _2288) * _2302))) * _2302;
    float _4485 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2337 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
    float _2347 = (((_2324 * cbLight._m0[_2276].x) * _2337) * _2079) + ((((cbLight._m0[_2195].x * _2048) * _2248) * _2262) * _2092);
    float _2348 = (((_2324 * cbLight._m0[_2276].y) * _2337) * _2079) + ((((cbLight._m0[_2195].y * _2049) * _2248) * _2262) * _2092);
    float _2349 = (((_2324 * cbLight._m0[_2276].z) * _2337) * _2079) + ((((cbLight._m0[_2195].z * _2050) * _2248) * _2262) * _2092);
    float _2411;
    float _2413;
    float _2415;
    if (_2132)
    {
        _2411 = _2347;
        _2413 = _2348;
        _2415 = _2349;
    }
    else
    {
        uint _2417 = _2056 + 2u;
        uint _2421 = _2056 + 10u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _811) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _888;
        float _2438 = cbLight._m0[_2417].y + _889;
        float _2439 = cbLight._m0[_2417].z + _890;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2417].xyz));
        float _4496 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2451 = dot(vec3(_808, _809, _810), vec3(_2444, _2445, _2446));
        float _4507 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4518 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2472 = (exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2473 = 1.0 - _2436;
        float _2483 = (0.5 / (((_2224 * ((_2450 * _2473) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2473) + _2436) * _2450))) * _2450;
        float _4529 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2411 = (((_2472 * cbLight._m0[_2421].x) * _2485) * _2486) + _2347;
        _2413 = (((_2472 * cbLight._m0[_2421].y) * _2485) * _2486) + _2348;
        _2415 = (((_2472 * cbLight._m0[_2421].z) * _2485) * _2486) + _2349;
    }
    float _2521;
    float _2523;
    float _2525;
    if (_2150)
    {
        _2521 = _2411;
        _2523 = _2413;
        _2525 = _2415;
    }
    else
    {
        uint _2532 = _2056 + 3u;
        uint _2536 = _2056 + 11u;
        float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _811) * 0.949999988079071044921875);
        float _2551 = _2550 * _2550;
        float _2552 = cbLight._m0[_2532].x + _888;
        float _2553 = cbLight._m0[_2532].y + _889;
        float _2554 = cbLight._m0[_2532].z + _890;
        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
        float _2559 = _2558 * _2552;
        float _2560 = _2558 * _2553;
        float _2561 = _2558 * _2554;
        float _2562 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2532].xyz));
        float _4545 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2566 = dot(vec3(_808, _809, _810), vec3(_2559, _2560, _2561));
        float _4556 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2570 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2559, _2560, _2561));
        float _4567 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2574 = _2551 * _2551;
        float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
        float _2587 = (exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2588 = 1.0 - _2551;
        float _2598 = (0.5 / (((_2224 * ((_2565 * _2588) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2588) + _2551) * _2565))) * _2565;
        float _4578 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2600 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
        float _2601 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2521 = (((_2587 * cbLight._m0[_2536].x) * _2600) * _2601) + _2411;
        _2523 = (((_2587 * cbLight._m0[_2536].y) * _2600) * _2601) + _2413;
        _2525 = (((_2587 * cbLight._m0[_2536].z) * _2600) * _2601) + _2415;
    }
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    if (_2054.y == 0u)
    {
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2676;
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2676;
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2676;
        uvec4 _2691 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2692 = _2691.x;
        uint _2703 = uint((float(_2691.y) * floor(float(uint(cbSceneParam._m0[85u].y * _909) / _2692))) + floor(float(uint(cbSceneParam._m0[85u].x * _908) / _2692)));
        float _2713 = (log2(_2679 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2714 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        uint _2717 = uint(isnan(14.0) ? _2714 : (isnan(_2714) ? 14.0 : min(_2714, 14.0)));
        uvec4 _2722 = texelFetch(g_lightClusterGridBuffer, int(((_2717 << 2u) + (_2703 << 6u)) >> 2u));
        uint _2723 = _2722.x;
        uint _2724 = _2691.z;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        if (((((1u << ((_2724 >> 4u) & 15u)) + 4294967295u) & _2723) == 0u) || ((_2724 & 240u) == 0u))
        {
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
        }
        else
        {
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2835;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            uint _2983 = 0u;
            uint _2992;
            bool _2993;
            for (;;)
            {
                _2992 = texelFetch(g_lightClassification, int((((_2717 << 5u) + (_2703 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                _2993 = _2992 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2993)
                {
                    frontier_phi_66_pred = _2977;
                    frontier_phi_66_pred_1 = _2982;
                    frontier_phi_66_pred_2 = _2981;
                    frontier_phi_66_pred_3 = _2980;
                    frontier_phi_66_pred_4 = _2979;
                    frontier_phi_66_pred_5 = _2978;
                }
                else
                {
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    uint _3128;
                    _3122 = _2977;
                    _3123 = _2978;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2992;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    for (;;)
                    {
                        uint _3132 = uint(findLSB(_3128)) + (_2983 << 5u);
                        uint _3129 = (_3128 + 4294967295u) & _3128;
                        uint _3134 = _3132 * 48u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 3u)).x));
                        uint _3154 = (_3132 * 48u) + 4u;
                        vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 3u)).x));
                        uint _3173 = (_3132 * 48u) + 8u;
                        vec3 _3184 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x));
                        float _3188 = _3148.x - _2677;
                        float _3189 = _3148.y - _2678;
                        float _3190 = _3148.z - _2679;
                        float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                        float _3194 = inversesqrt(_3191);
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3198 = dot(vec3(_927, _930, _933), vec3(_3195, _3196, _3197));
                        float _3203 = 1.0 - (_3191 * _3148.w);
                        float _4604 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3205 = sqrt(_3191) * _3167.w;
                        float _3208 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3198) + _3209;
                        float _3215 = _3205 * _3205;
                        float _3219 = ((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3204) / ((_3215 * 0.699999988079071044921875) + 1.0);
                        float _3223 = (-0.0) - _2677;
                        float _3224 = (-0.0) - _2678;
                        float _3225 = (-0.0) - _2679;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3240 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                        float _3241 = 1.0 - _987;
                        float _3248 = sqrt(1.0 - ((1.0 - (_3241 * _3241)) * (1.0 - (_3240 * _3240))));
                        float _3249 = _3248 * _3248;
                        float _3250 = _3249 * _3249;
                        float _3251 = _3230 + _3195;
                        float _3252 = _3231 + _3196;
                        float _3253 = _3232 + _3197;
                        float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                        float _3261 = dot(vec3(_927, _930, _933), vec3(_3230, _3231, _3232));
                        float _4620 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3265 = dot(vec3(_927, _930, _933), vec3(_3257 * _3251, _3257 * _3252, _3257 * _3253));
                        float _4631 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3268 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3272 = ((_3268 * _3268) * (_3250 + (-1.0))) + 1.0;
                        float _3273 = _3208 * _3249;
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3198) + _3274;
                        float _4642 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3279 = 1.0 - _3249;
                        float _3289 = (0.5 / (((_3278 * ((_3264 * _3279) + _3249)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3249) * _3264))) * _3278;
                        float _4653 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3300 = (((_3250 * 3.1415927410125732421875) * (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) / ((_3272 * _3272) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125))) * _3204;
                        _3052 = (_3219 * _3167.x) + _3125;
                        _3053 = (_3219 * _3167.y) + _3126;
                        _3054 = (_3219 * _3167.z) + _3127;
                        _3049 = (_3300 * _3184.x) + _3122;
                        _3050 = (_3300 * _3184.y) + _3123;
                        _3051 = (_3300 * _3184.z) + _3124;
                        if (_3129 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3122 = _3049;
                            _3123 = _3050;
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3129;
                        }
                    }
                    frontier_phi_66_pred = _3049;
                    frontier_phi_66_pred_1 = _3054;
                    frontier_phi_66_pred_2 = _3053;
                    frontier_phi_66_pred_3 = _3052;
                    frontier_phi_66_pred_4 = _3051;
                    frontier_phi_66_pred_5 = _3050;
                }
                _2825 = frontier_phi_66_pred;
                _2835 = frontier_phi_66_pred_1;
                _2833 = frontier_phi_66_pred_2;
                _2831 = frontier_phi_66_pred_3;
                _2829 = frontier_phi_66_pred_4;
                _2827 = frontier_phi_66_pred_5;
                uint _2984 = _2983 + 1u;
                if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2977 = _2825;
                    _2978 = _2827;
                    _2979 = _2829;
                    _2980 = _2831;
                    _2981 = _2833;
                    _2982 = _2835;
                    _2983 = _2984;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
        }
        uvec4 _2838 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2839 = _2838.z;
        uint _2841 = (_2839 >> 8u) & 15u;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        if (((4294967295u << _2841) & _2723) == 0u)
        {
            _2945 = _2824;
            _2947 = _2826;
            _2949 = _2828;
            _2951 = _2830;
            _2953 = _2832;
            _2955 = _2834;
        }
        else
        {
            float _2970 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
            float _2971 = _2970 * _2677;
            float _2972 = _2970 * _2678;
            float _2973 = _2970 * _2679;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2841 < ((_2839 >> 12u) & 15u))
            {
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _3105 = _2824;
                float _3106 = _2826;
                float _3107 = _2828;
                float _3108 = _2830;
                float _3109 = _2832;
                float _3110 = _2834;
                uint _3111 = _2841;
                uint _3120;
                bool _3121;
                for (;;)
                {
                    _3120 = texelFetch(g_lightClassification, int((((_2717 << 5u) + (_2703 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                    _3121 = _3120 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3121)
                    {
                        frontier_phi_77_pred = _3110;
                        frontier_phi_77_pred_1 = _3109;
                        frontier_phi_77_pred_2 = _3108;
                        frontier_phi_77_pred_3 = _3107;
                        frontier_phi_77_pred_4 = _3106;
                        frontier_phi_77_pred_5 = _3105;
                    }
                    else
                    {
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3327 = _3105;
                        float _3328 = _3106;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        uint _3333 = _3120;
                        uint _3334;
                        vec4 _3359;
                        float _3360;
                        vec4 _3375;
                        vec3 _3387;
                        vec4 _3402;
                        vec4 _3417;
                        float _3463;
                        bool _3464;
                        for (;;)
                        {
                            uint _3344 = ((_3111 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3333));
                            _3334 = (_3333 + 4294967295u) & _3333;
                            uint _3346 = _3344 * 40u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            _3360 = _3359.w;
                            uint _3362 = (_3344 * 40u) + 4u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3344 * 40u) + 8u;
                            _3387 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x));
                            uint _3389 = (_3344 * 40u) + 16u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3344 * 40u) + 20u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3344 * 40u) + 24u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3438 = (_3344 * 40u) + 28u;
                            vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            _3463 = fma(_2679, _3451.z, fma(_2678, _3451.y, _3451.x * _2677)) + _3451.w;
                            _3464 = !((fma(_2679, _3432.z, fma(_2678, _3432.y, _3432.x * _2677)) + _3432.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3464)
                            {
                                float _3491 = _3359.x - _2677;
                                float _3492 = _3359.y - _2678;
                                float _3493 = _3359.z - _2679;
                                float _3494 = dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493));
                                float _3497 = inversesqrt(_3494);
                                float _3498 = _3497 * _3491;
                                float _3499 = _3497 * _3492;
                                float _3500 = _3497 * _3493;
                                float _3504 = 1.0 - (_3494 / (_3360 * _3360));
                                float _4664 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3509 = sqrt(_3494) * _3375.w;
                                float _3511 = 1.39999997615814208984375 / (_3509 + 1.39999997615814208984375);
                                float _3512 = _3511 * _3511;
                                float _3515 = ((1.0 - _3512) * dot(vec3(_3498, _3499, _3500), vec3(_927, _930, _933))) + _3512;
                                float _3518 = _3509 * _3509;
                                float _3522 = (fma(_2679, _3402.z, fma(_2678, _3402.y, _3402.x * _2677)) + _3402.w) / _3463;
                                float _3523 = (fma(_2679, _3417.z, fma(_2678, _3417.y, _3417.x * _2677)) + _3417.w) / _3463;
                                float _3527 = 1.0 - dot(vec2(_3522, _3523), vec2(_3522, _3523));
                                float _4680 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3529 = _3528 * (((isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))) * _3505) / ((_3518 * 0.699999988079071044921875) + 1.0));
                                float _3541 = exp2(log2(1.0 / ((_3518 * 3.5) + 5.0)) * 0.25);
                                float _3542 = 1.0 - _987;
                                float _3549 = sqrt(1.0 - ((1.0 - (_3542 * _3542)) * (1.0 - (_3541 * _3541))));
                                float _3550 = _3549 * _3549;
                                float _3551 = _3550 * _3550;
                                float _3552 = _3498 - _2971;
                                float _3553 = _3499 - _2972;
                                float _3554 = _3500 - _2973;
                                float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                                float _3562 = dot(vec3(_927, _930, _933), vec3((-0.0) - _2971, (-0.0) - _2972, (-0.0) - _2973));
                                float _4691 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3565 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3566 = dot(vec3(_927, _930, _933), vec3(_3558 * _3552, _3558 * _3553, _3558 * _3554));
                                float _4702 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3573 = ((_3569 * _3569) * (_3551 + (-1.0))) + 1.0;
                                float _3574 = _3511 * _3550;
                                float _3575 = _3574 * _3574;
                                float _3581 = ((1.0 - _3575) * dot(vec3(_927, _930, _933), vec3(_3498, _3499, _3500))) + _3575;
                                float _4713 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3583 = 1.0 - _3550;
                                float _3593 = (0.5 / (((_3582 * ((_3565 * _3583) + _3550)) + 9.9999999392252902907785028219223e-09) + (((_3582 * _3583) + _3550) * _3565))) * _3582;
                                float _4724 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3603 = (_3528 * _3505) * (((_3551 * 3.1415927410125732421875) * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) / ((_3573 * _3573) * ((_3518 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3529 * _3375.y;
                                frontier_phi_83_pred_1 = _3529 * _3375.x;
                                frontier_phi_83_pred_2 = _3603 * _3387.z;
                                frontier_phi_83_pred_3 = _3603 * _3387.y;
                                frontier_phi_83_pred_4 = _3603 * _3387.x;
                                frontier_phi_83_pred_5 = _3529 * _3375.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3611 = frontier_phi_83_pred;
                            _3610 = frontier_phi_83_pred_1;
                            _3609 = frontier_phi_83_pred_2;
                            _3608 = frontier_phi_83_pred_3;
                            _3607 = frontier_phi_83_pred_4;
                            _3612 = frontier_phi_83_pred_5;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            _3319 = _3612 + _3332;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            _3316 = _3609 + _3329;
                            if (_3334 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3334;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3319;
                        frontier_phi_77_pred_1 = _3318;
                        frontier_phi_77_pred_2 = _3317;
                        frontier_phi_77_pred_3 = _3316;
                        frontier_phi_77_pred_4 = _3315;
                        frontier_phi_77_pred_5 = _3314;
                    }
                    _2956 = frontier_phi_77_pred;
                    _2954 = frontier_phi_77_pred_1;
                    _2952 = frontier_phi_77_pred_2;
                    _2950 = frontier_phi_77_pred_3;
                    _2948 = frontier_phi_77_pred_4;
                    _2946 = frontier_phi_77_pred_5;
                    uint _3112 = _3111 + 1u;
                    if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3105 = _2946;
                        _3106 = _2948;
                        _3107 = _2950;
                        _3108 = _2952;
                        _3109 = _2954;
                        _3110 = _2956;
                        _3111 = _3112;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2950;
                frontier_phi_58_59_ladder_1 = _2956;
                frontier_phi_58_59_ladder_2 = _2954;
                frontier_phi_58_59_ladder_3 = _2952;
                frontier_phi_58_59_ladder_4 = _2948;
                frontier_phi_58_59_ladder_5 = _2946;
            }
            else
            {
                frontier_phi_58_59_ladder = _2828;
                frontier_phi_58_59_ladder_1 = _2834;
                frontier_phi_58_59_ladder_2 = _2832;
                frontier_phi_58_59_ladder_3 = _2830;
                frontier_phi_58_59_ladder_4 = _2826;
                frontier_phi_58_59_ladder_5 = _2824;
            }
            _2945 = frontier_phi_58_59_ladder_5;
            _2947 = frontier_phi_58_59_ladder_4;
            _2949 = frontier_phi_58_59_ladder;
            _2951 = frontier_phi_58_59_ladder_3;
            _2953 = frontier_phi_58_59_ladder_2;
            _2955 = frontier_phi_58_59_ladder_1;
        }
        float _2960 = isnan(1.0) ? _971 : (isnan(_971) ? 1.0 : min(_971, 1.0));
        _2736 = (_2960 * _2951) + _2188;
        _2738 = (_2960 * _2953) + _2190;
        _2740 = (_2960 * _2955) + _2192;
        _2742 = ((_2945 * 0.039999999105930328369140625) * _2960) + _2521;
        _2744 = ((_2947 * 0.039999999105930328369140625) * _2960) + _2523;
        _2746 = ((_2949 * 0.039999999105930328369140625) * _2960) + _2525;
    }
    else
    {
        _2736 = _2188;
        _2738 = _2190;
        _2740 = _2192;
        _2742 = _2521;
        _2744 = _2523;
        _2746 = _2525;
    }
    float _4740 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4751 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4762 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2763 = ((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2736 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _971))) + ((_2742 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _2764 = ((isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2738 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _971))) + ((_2744 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _2765 = ((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2740 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _971))) + ((_2746 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    uint _2766 = _272 + 6u;
    float _2774 = _908 / cbSceneParam._m0[86u].x;
    float _2775 = _909 / cbSceneParam._m0[86u].y;
    vec4 _2789 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2774, _2775, (log2((isnan(cbSceneParam._m0[77u].w) ? _829 : (isnan(_829) ? cbSceneParam._m0[77u].w : min(_829, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2791 = _2789.x;
    float _2792 = _2789.y;
    float _2793 = _2789.z;
    float _2794 = _2789.w;
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    if (_829 > cbSceneParam._m0[78u].w)
    {
        float _2849 = isnan(_829) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _829 : min(cbSceneParam._m0[80u].w, _829));
        float _2850 = _2849 / _829;
        float _2861 = _2850 * _881;
        float _2862 = _882 * _2850;
        float _2863 = (-0.0) - _2862;
        float _2865 = _2850 * _883;
        float _2867 = (cbSceneParam._m0[77u].w * _2863) / _2849;
        float _2868 = _2867 + cbSceneParam._m0[79u].w;
        float _2869 = cbSceneParam._m0[79u].w - _2862;
        float _2875 = sqrt(((_2861 * _2861) + (_2862 * _2862)) + (_2865 * _2865));
        float _2878 = (1.0 - (cbSceneParam._m0[77u].w / _2849)) * _2875;
        float _2883 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2885 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3062;
        if (abs((_2863 - _2867) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3062 = ((((_2868 > 0.0) ? exp2(_2883 * _2868) : (2.0 - exp2(_2885 * _2868))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2878;
        }
        else
        {
            float _3006 = 1.0 / cbSceneParam._m0[80u].x;
            float _3007 = isnan(_2869) ? _2868 : (isnan(_2868) ? _2869 : max(_2868, _2869));
            float _3008 = isnan(_2869) ? _2868 : (isnan(_2868) ? _2869 : min(_2868, _2869));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            float _3018 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : min(_3008, 0.0));
            _3062 = ((abs(_2875 / _2863) * cbSceneParam._m0[80u].y) * ((((_3017 - _3018) * 2.0) - ((exp2(_2883 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0)))) - exp2(_2883 * (isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))))) * _3006)) - ((exp2(_2885 * _3017) - exp2(_2885 * _3018)) * _3006))) + (_2878 * cbSceneParam._m0[80u].z);
        }
        vec4 _3064 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2774, _2775, 1.0), 0.0);
        float _3073 = exp2((_3062 * (-1.44269502162933349609375)) * (1.0 - _3064.w));
        float _3074 = log2(_3073);
        float _3090 = log2(_2794);
        _2887 = (exp2(_3090 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].x)) * _3064.x) / cbSceneParam._m0[78u].x)) + _2791;
        _2889 = (exp2(_3090 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].y)) * _3064.y) / cbSceneParam._m0[78u].y)) + _2792;
        _2891 = (exp2(_3090 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].z)) * _3064.z) / cbSceneParam._m0[78u].z)) + _2793;
        _2893 = _3073 * _2794;
    }
    else
    {
        _2887 = _2791;
        _2889 = _2792;
        _2891 = _2793;
        _2893 = _2794;
    }
    bool _3100;
    vec4 _2903;
    vec4 _2925;
    float _2927;
    float _2931;
    float _2932;
    float _2933;
    float _2934;
    bool _2944;
    for (;;)
    {
        _2903 = cbMatDynParam._m0[0u];
        float _2905 = roundEven(_2903.y);
        bool _2906 = _2905 == 3.0;
        float _2907 = log2(_2893);
        float _2914 = exp2(_2907 * cbSceneParam._m0[78u].x) * _2763;
        float _2915 = exp2(_2907 * cbSceneParam._m0[78u].y) * _2764;
        float _2916 = exp2(_2907 * cbSceneParam._m0[78u].z) * _2765;
        float _2923 = _897 + (-0.5);
        _2925 = cbMtdParam._m0[1u];
        _2927 = _2925.y * _2923;
        float _2930 = (_2905 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2931 = _2930 * (_2906 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2887)));
        _2932 = _2930 * (_2906 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2889)));
        _2933 = _2930 * (_2906 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2891)));
        _2934 = _2923 * 0.999000012874603271484375;
        _2944 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2944)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2934) < 0.5)
            {
                _3100 = true;
                break;
            }
        }
        uint _3041 = _946 + uint(_2903.w);
        if ((cbInstanceData._m0[_3041].w < 1.0) && ((cbInstanceData._m0[_3041].w + _2934) < 0.5))
        {
            _3100 = true;
            break;
        }
        if ((_2927 + 1.0) < _2925.x)
        {
            _3100 = true;
            break;
        }
        _3100 = false;
        break;
    }
    float _3305;
    if (_3100)
    {
        discard_state = true;
        _3305 = 0.0;
    }
    else
    {
        _3305 = cbInstanceData._m0[_2766].w;
    }
    SV_Target.x = _2931;
    SV_Target.y = _2932;
    SV_Target.z = _2933;
    SV_Target.w = _3305;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2766].w;
    discard_exit();
}


