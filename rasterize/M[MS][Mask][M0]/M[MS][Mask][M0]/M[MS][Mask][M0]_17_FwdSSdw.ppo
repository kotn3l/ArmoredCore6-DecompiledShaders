#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1263;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3594 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _436 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_423 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317);
    float _439 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_423 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318);
    float _442 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_423 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319);
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _477 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    float _481 = _477.z;
    float _490 = ((_460.z - _481) * _423) + _481;
    float _493 = ((((_460.x - _479) * _423) + _479) * 2.0) + (-1.0);
    float _495 = ((((_460.y - _480) * _423) + _480) * 2.0) + (-1.0);
    float _496 = dot(vec2(_493, _495), vec2(_493, _495));
    float _3605 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _544 = _542.x;
    float _545 = 1.0 - _544;
    float _551 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _554 = ((isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : min(_551, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _563 = (_554 - ((((((_544 - _545) * cbMtdParam._m0[24u].w) + _545) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _554))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3626 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _571 = (_564 * (cbMtdParam._m0[17u].x - _436)) + _436;
    float _572 = (_564 * (cbMtdParam._m0[17u].y - _439)) + _439;
    float _573 = (_564 * (cbMtdParam._m0[17u].z - _442)) + _442;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _587 = _585.x;
    float _588 = 1.0 - _587;
    float _615 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_587 - _588) * cbMtdParam._m0[24u].y) + _588) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3637 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _616 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _624 = ((((cbMtdParam._m0[10u].x - _571) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _616) + _571;
    float _625 = ((((cbMtdParam._m0[10u].y - _572) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _616) + _572;
    float _626 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _573)) * _616) + _573;
    float _630 = (cbMtdParam._m0[19u].w * (_517.z - _490)) + _490;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _651 = (_644.x * 2.0) + (-1.0);
    float _652 = (_644.y * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _3648 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _661 = (_564 * (_644.z - _630)) + _630;
    float _664 = ((cbMtdParam._m0[23u].y - _661) * _616) + _661;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _689 = (_683.x * 2.0) + (-1.0);
    float _690 = (_683.y * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3659 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _699 = (((_517.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _493;
    float _700 = (((_517.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _495;
    float _712 = (((_651 - _699) + (cbMtdParam._m0[21u].x * _699)) * _564) + _699;
    float _713 = (((_652 - _700) + (cbMtdParam._m0[21u].x * _700)) * _564) + _700;
    float _714 = (_564 * (sqrt(1.0 - (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) - _501)) + _501;
    float _725 = (((_689 - _712) + (_712 * cbMtdParam._m0[22u].z)) * _616) + _712;
    float _726 = (((_690 - _713) + (_713 * cbMtdParam._m0[22u].z)) * _616) + _713;
    float _727 = ((sqrt(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) - _714) * _616) + _714;
    float _729 = cbMtdParam._m0[22u].x + _517.w;
    float _732 = fma(_727, _236 * NORMAL.x, fma(_726, _243 * TANGENT.x, (_229 * _221) * _725));
    float _735 = fma(_727, _236 * NORMAL.y, fma(_726, _243 * TANGENT.y, (_229 * _222) * _725));
    float _738 = fma(_727, _236 * NORMAL.z, fma(_726, _243 * TANGENT.z, (_229 * _223) * _725));
    float _742 = inversesqrt(dot(vec3(_732, _735, _738), vec3(_732, _735, _738)));
    float _743 = _742 * _732;
    float _744 = _742 * _735;
    float _745 = _742 * _738;
    float _3670 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _746 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3692 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3703 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3714 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _764 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _814 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _804);
    float _815 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _804);
    float _816 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _804);
    float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
    float _821 = _814 * _820;
    float _822 = _815 * _820;
    float _823 = _816 * _820;
    float _829 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _830 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _848 = fma(_745, cbSceneParam._m0[5u].z, fma(_744, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _743));
    float _851 = fma(_745, cbSceneParam._m0[6u].z, fma(_744, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _743));
    float _854 = fma(_745, cbSceneParam._m0[7u].z, fma(_744, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _743));
    uint _868 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _874 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_868].x;
    float _875 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_868].y;
    float _876 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_868].z;
    float _3725 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    vec4 _888 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _829, cbSceneParam._m0[86u].y * _830));
    float _892 = ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * TEXCOORD_5.w) * _888.x;
    float _893 = dot(vec3(_743, _744, _745), vec3(_821, _822, _823));
    float _896 = _893 * 2.0;
    float _900 = (_896 * _743) - _821;
    float _901 = (_896 * _744) - _822;
    float _902 = (_896 * _745) - _823;
    float _906 = abs(dot(vec3(_821, _822, _823), vec3(_743, _744, _745)));
    float _3758 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = sqrt(_746);
    float _921 = exp2((_908 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1262;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _987 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _991 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _995 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1020 = _953 + _743;
        float _1021 = _957 + _744;
        float _1022 = _961 + _745;
        float _1032 = fma(_1022, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020)) - _987;
        float _1033 = fma(_1022, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020)) - _991;
        float _1034 = fma(_1022, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020)) - _995;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_987 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_991 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[34u].z) + ((((((_995 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1090 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1056.x + (-0.5));
        float _1092 = _1090 * (_1056.y + (-0.5));
        float _1093 = _1090 * (_1056.z + (-0.5));
        float _1100 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1063.x + (-0.5));
        float _1102 = _1100 * (_1063.y + (-0.5));
        float _1103 = _1100 * (_1063.z + (-0.5));
        float _1110 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1070.x + (-0.5));
        float _1112 = _1110 * (_1070.y + (-0.5));
        float _1113 = _1110 * (_1070.z + (-0.5));
        float _1120 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1077.x + (-0.5));
        float _1122 = _1120 * (_1077.y + (-0.5));
        float _1123 = _1120 * (_1077.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1144 = (dot(vec3(_743, _744, _745), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1154 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3806 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1156 + 1.0))) + _1161) * _1124;
        float _1171 = _1092 * 0.5;
        float _1172 = _1102 * 0.5;
        float _1173 = _1112 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_743, _744, _745), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3839 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1198 + 1.0))) + _1203) * _1125;
        float _1213 = _1093 * 0.5;
        float _1214 = _1103 * 0.5;
        float _1215 = _1113 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_743, _744, _745), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3872 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1240 + 1.0))) + _1245) * _1126;
        _1262 = _1093;
        _1264 = _1092;
        _1265 = _1091;
        _1266 = _1103;
        _1267 = _1102;
        _1268 = _1101;
        _1269 = _1113;
        _1270 = _1112;
        _1271 = _1111;
        _1272 = _1126;
        _1273 = _1125;
        _1274 = _1124;
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _1263;
        _1264 = _1263;
        _1265 = _1263;
        _1266 = _1263;
        _1267 = _1263;
        _1268 = _1263;
        _1269 = _1263;
        _1270 = _1263;
        _1271 = _1263;
        _1272 = _1263;
        _1273 = _1263;
        _1274 = _1263;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1302 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1306 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1310 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1333 = _953 + _743;
        float _1334 = _957 + _744;
        float _1335 = _961 + _745;
        float _1345 = fma(_1335, cbModelParam._m0[30u].z, fma(_1334, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1333)) - _1302;
        float _1346 = fma(_1335, cbModelParam._m0[31u].z, fma(_1334, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1333)) - _1306;
        float _1347 = fma(_1335, cbModelParam._m0[32u].z, fma(_1334, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1333)) - _1310;
        float _1351 = inversesqrt(dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347)));
        float _1364 = ((_1351 * _1345) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1302 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1351 * _1346) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1306 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1351 * _1347) / cbModelParam._m0[35u].z) + ((((((_1310 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        float _1401 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1368.x + (-0.5));
        float _1403 = _1401 * (_1368.y + (-0.5));
        float _1404 = _1401 * (_1368.z + (-0.5));
        float _1411 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1375.x + (-0.5));
        float _1413 = _1411 * (_1375.y + (-0.5));
        float _1414 = _1411 * (_1375.z + (-0.5));
        float _1421 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1382.x + (-0.5));
        float _1423 = _1421 * (_1382.y + (-0.5));
        float _1424 = _1421 * (_1382.z + (-0.5));
        float _1431 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1389.x + (-0.5));
        float _1433 = _1431 * (_1389.y + (-0.5));
        float _1434 = _1431 * (_1389.z + (-0.5));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = _1402 * 0.5;
        float _1439 = _1412 * 0.5;
        float _1440 = _1422 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_743, _744, _745), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _3935 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1465 + 1.0))) + _1470) * _1435;
        float _1480 = _1403 * 0.5;
        float _1481 = _1413 * 0.5;
        float _1482 = _1423 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_743, _744, _745), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _3968 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1507 + 1.0))) + _1512) * _1436;
        float _1522 = _1404 * 0.5;
        float _1523 = _1414 * 0.5;
        float _1524 = _1424 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_743, _744, _745), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4001 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1549 + 1.0))) + _1554) * _1437;
        _1571 = _1404;
        _1572 = _1403;
        _1573 = _1402;
        _1574 = _1414;
        _1575 = _1413;
        _1576 = _1412;
        _1577 = _1424;
        _1578 = _1423;
        _1579 = _1422;
        _1580 = _1437;
        _1581 = _1436;
        _1582 = _1435;
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
    }
    else
    {
        _1571 = _1263;
        _1572 = _1263;
        _1573 = _1263;
        _1574 = _1263;
        _1575 = _1263;
        _1576 = _1263;
        _1577 = _1263;
        _1578 = _1263;
        _1579 = _1263;
        _1580 = _1263;
        _1581 = _1263;
        _1582 = _1263;
        _1583 = 0.0;
        _1584 = 0.0;
        _1585 = 0.0;
    }
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1275)) + _1275;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1276)) + _1276;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1277)) + _1277;
    float _1618 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1595));
    float _1639 = _900 * 0.5;
    float _1640 = _901 * 0.5;
    float _1641 = _902 * 0.5;
    float _1642 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1645 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1648 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1682;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1655 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1262, _1266, _1269, _1272));
        float _1659 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1663 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1670 = dot(vec4(cbModelParam._m0[39u]), vec4(_1639, _1640, _1641, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1693;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1684 = dot(vec4(cbModelParam._m0[40u]), vec4(_1639, _1640, _1641, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1697 = (_1693 * cbModelParam._m0[1u].x) + (_1682 * (1.0 - cbModelParam._m0[1u].x));
    float _1707 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _746);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1707 : min(cbModelParam._m0[25u].z, _1707));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1756 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1760 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1764 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1767 = fma(_902, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900));
        float _1770 = fma(_902, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900));
        float _1773 = fma(_902, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900));
        float _1801;
        if (_1767 > 0.0)
        {
            _1801 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1801 = frontier_phi_14_12_ladder;
        }
        float _2023;
        if (_1770 > 0.0)
        {
            _2023 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2023 = frontier_phi_23_19_ladder;
        }
        float _2269;
        if (_1773 > 0.0)
        {
            _2269 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2269 = frontier_phi_35_30_ladder;
        }
        float _2271 = isnan(_2023) ? _1801 : (isnan(_1801) ? _2023 : min(_1801, _2023));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1767) + _1756;
        float _2277 = (_2272 * _1770) + _1760;
        float _2278 = (_2272 * _1773) + _1764;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2279;
        float _2283 = _2279 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 > _2283) || ((_2277 < _2281) || ((_2276 < _2281) || (_2276 > _2283))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2278, cbModelParam._m0[9u].z, fma(_2277, cbModelParam._m0[9u].y, _2276 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2278, cbModelParam._m0[10u].z, fma(_2277, cbModelParam._m0[10u].y, _2276 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2278, cbModelParam._m0[11u].z, fma(_2277, cbModelParam._m0[11u].y, _2276 * cbModelParam._m0[11u].x))), _1708);
            frontier_phi_13_35_ladder = _2402.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2402.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2402.x * cbModelParam._m0[1u].y;
        }
        _1789 = frontier_phi_13_35_ladder_2;
        _1791 = frontier_phi_13_35_ladder_1;
        _1793 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_900, _901, _902), _1708);
        _1789 = _1777.x * cbModelParam._m0[1u].y;
        _1791 = _1777.y * cbModelParam._m0[1u].y;
        _1793 = _1777.z * cbModelParam._m0[1u].y;
    }
    float _1797 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _746);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1797 : min(cbModelParam._m0[25u].w, _1797));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_902, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900));
        float _1866 = fma(_902, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900));
        float _1869 = fma(_902, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900));
        float _2028;
        if (_1863 > 0.0)
        {
            _2028 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2028 = frontier_phi_25_21_ladder;
        }
        float _2296;
        if (_1866 > 0.0)
        {
            _2296 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2296 = frontier_phi_37_32_ladder;
        }
        float _2501;
        if (_1869 > 0.0)
        {
            _2501 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2501 = frontier_phi_46_43_ladder;
        }
        float _2503 = isnan(_2296) ? _2028 : (isnan(_2028) ? _2296 : min(_2028, _2296));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1863) + _1852;
        float _2509 = (_2504 * _1866) + _1856;
        float _2510 = (_2504 * _1869) + _1860;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2510, cbModelParam._m0[17u].z, fma(_2509, cbModelParam._m0[17u].y, _2508 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2510, cbModelParam._m0[18u].z, fma(_2509, cbModelParam._m0[18u].y, _2508 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2510, cbModelParam._m0[19u].z, fma(_2509, cbModelParam._m0[19u].y, _2508 * cbModelParam._m0[19u].x))), _1798);
            frontier_phi_22_46_ladder = _2709.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2709.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2709.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_22_46_ladder_2;
        _1890 = frontier_phi_22_46_ladder_1;
        _1892 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_900, _901, _902), _1798);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1904 = ((((1.0 - _921) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_921 * _908)) * _892;
    float _1905 = _1904 * ((cbModelParam._m0[1u].w * (_1888 - _1789)) + _1789);
    float _1906 = _1904 * ((cbModelParam._m0[1u].w * (_1890 - _1791)) + _1791);
    float _1907 = _1904 * ((cbModelParam._m0[1u].w * (_1892 - _1793)) + _1793);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    vec4 _1924 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_829, _830));
    float _1926 = _1924.w;
    float _1938 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1926);
    float _1939 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1926);
    float _1940 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1926);
    uvec4 _1944 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1946 = _1944.x * 14u;
    uint _1947 = _1946 + 13u;
    float _1954 = _892 + (-1.0);
    float _1959 = (cbLight._m0[_1947].x * _1954) + 1.0;
    float _1960 = (cbLight._m0[_1947].y * _1954) + 1.0;
    float _1961 = (cbLight._m0[_1947].z * _1954) + 1.0;
    float _1962 = (cbLight._m0[_1947].w * _1954) + 1.0;
    uint _1963 = _1946 + 5u;
    float _1969 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1973 = _1946 + 4u;
    float _1982 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
    uint _1986 = _1946 | 1u;
    float _1997 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_743, _744, _745));
    float _2000 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_743, _744, _745));
    float _4137 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _4148 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2005 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * 0.3183098733425140380859375;
    float _2007 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _2014 = ((cbLight._m0[_1963].x * _1969) * _2007) + (((cbLight._m0[_1973].x * _1938) * _1982) * _2005);
    float _2015 = ((_1969 * cbLight._m0[_1963].y) * _2007) + (((cbLight._m0[_1973].y * _1939) * _1982) * _2005);
    float _2016 = ((_1969 * cbLight._m0[_1963].z) * _2007) + (((cbLight._m0[_1973].z * _1940) * _1982) * _2005);
    uvec4 _2020 = floatBitsToUint(cbLight._m0[_1946 + 12u]);
    bool _2022 = _2020.x == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_2022)
    {
        _2033 = _2014;
        _2035 = _2015;
        _2037 = _2016;
    }
    else
    {
        uint _2041 = _1946 + 6u;
        float _2057 = (dot(vec3(cbLight._m0[_1946 + 2u].xyz), vec3(_743, _744, _745)) * 0.5) + 0.5;
        float _2058 = _2057 * _2057;
        float _4159 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2060 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2033 = (((cbLight._m0[_2041].x * 0.3183098733425140380859375) * _2059) * _2060) + _2014;
        _2035 = (((cbLight._m0[_2041].y * 0.3183098733425140380859375) * _2059) * _2060) + _2015;
        _2037 = (((cbLight._m0[_2041].z * 0.3183098733425140380859375) * _2059) * _2060) + _2016;
    }
    bool _2040 = _2020.y == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_2040)
    {
        _2078 = _2033;
        _2080 = _2035;
        _2082 = _2037;
    }
    else
    {
        uint _2240 = _1946 + 7u;
        float _2256 = (dot(vec3(cbLight._m0[_1946 + 3u].xyz), vec3(_743, _744, _745)) * 0.5) + 0.5;
        float _2257 = _2256 * _2256;
        float _4175 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2258 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2259 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2078 = (((cbLight._m0[_2240].x * 0.3183098733425140380859375) * _2258) * _2259) + _2033;
        _2080 = (((cbLight._m0[_2240].y * 0.3183098733425140380859375) * _2258) * _2259) + _2035;
        _2082 = (((cbLight._m0[_2240].z * 0.3183098733425140380859375) * _2258) * _2259) + _2037;
    }
    uint _2085 = _1946 + 8u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _746) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1946].x + _821;
    float _2101 = cbLight._m0[_1946].y + _822;
    float _2102 = cbLight._m0[_1946].z + _823;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_1946].xyz));
    float _4191 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2114 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _2115 = dot(vec3(_743, _744, _745), vec3(_2107, _2108, _2109));
    float _4213 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2119 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_2107, _2108, _2109));
    float _4224 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = _2099 * _2099;
    float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
    float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2139 = 1.0 - _2099;
    float _2150 = (0.5 / (((_2114 * ((_2113 * _2139) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2139) + _2099) * _2113))) * _2113;
    float _4235 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
    uint _2166 = _1946 + 9u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _746) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_1986].x + _821;
    float _2180 = cbLight._m0[_1986].y + _822;
    float _2181 = cbLight._m0[_1986].z + _823;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_1986].xyz));
    float _4246 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2193 = dot(vec3(_743, _744, _745), vec3(_2186, _2187, _2188));
    float _4257 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2186, _2187, _2188));
    float _4268 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2178 * _2178;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2215 = 1.0 - _2178;
    float _2225 = (0.5 / (((_2114 * ((_2192 * _2215) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2215) + _2178) * _2192))) * _2192;
    float _4279 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2227 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    float _2237 = (((_2214 * cbLight._m0[_2166].x) * _2227) * _1969) + ((((cbLight._m0[_2085].x * _1938) * _2138) * _2152) * _1982);
    float _2238 = (((_2214 * cbLight._m0[_2166].y) * _2227) * _1969) + ((((cbLight._m0[_2085].y * _1939) * _2138) * _2152) * _1982);
    float _2239 = (((_2214 * cbLight._m0[_2166].z) * _2227) * _1969) + ((((cbLight._m0[_2085].z * _1940) * _2138) * _2152) * _1982);
    float _2301;
    float _2303;
    float _2305;
    if (_2022)
    {
        _2301 = _2237;
        _2303 = _2238;
        _2305 = _2239;
    }
    else
    {
        uint _2307 = _1946 + 2u;
        uint _2311 = _1946 + 10u;
        float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _746) * 0.949999988079071044921875);
        float _2326 = _2325 * _2325;
        float _2327 = cbLight._m0[_2307].x + _821;
        float _2328 = cbLight._m0[_2307].y + _822;
        float _2329 = cbLight._m0[_2307].z + _823;
        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
        float _2334 = _2333 * _2327;
        float _2335 = _2333 * _2328;
        float _2336 = _2333 * _2329;
        float _2337 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2307].xyz));
        float _4290 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2341 = dot(vec3(_743, _744, _745), vec3(_2334, _2335, _2336));
        float _4301 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2345 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2334, _2335, _2336));
        float _4312 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2349 = _2326 * _2326;
        float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
        float _2362 = (exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2363 = 1.0 - _2326;
        float _2373 = (0.5 / (((_2114 * ((_2340 * _2363) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2363) + _2326) * _2340))) * _2340;
        float _4323 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2375 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
        float _2376 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2301 = (((_2362 * cbLight._m0[_2311].x) * _2375) * _2376) + _2237;
        _2303 = (((_2362 * cbLight._m0[_2311].y) * _2375) * _2376) + _2238;
        _2305 = (((_2362 * cbLight._m0[_2311].z) * _2375) * _2376) + _2239;
    }
    float _2411;
    float _2413;
    float _2415;
    if (_2040)
    {
        _2411 = _2301;
        _2413 = _2303;
        _2415 = _2305;
    }
    else
    {
        uint _2422 = _1946 + 3u;
        uint _2426 = _1946 + 11u;
        float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _746) * 0.949999988079071044921875);
        float _2441 = _2440 * _2440;
        float _2442 = cbLight._m0[_2422].x + _821;
        float _2443 = cbLight._m0[_2422].y + _822;
        float _2444 = cbLight._m0[_2422].z + _823;
        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
        float _2449 = _2448 * _2442;
        float _2450 = _2448 * _2443;
        float _2451 = _2448 * _2444;
        float _2452 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2422].xyz));
        float _4339 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2456 = dot(vec3(_743, _744, _745), vec3(_2449, _2450, _2451));
        float _4350 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2460 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2449, _2450, _2451));
        float _4361 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2464 = _2441 * _2441;
        float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
        float _2477 = (exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2478 = 1.0 - _2441;
        float _2488 = (0.5 / (((_2114 * ((_2455 * _2478) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2478) + _2441) * _2455))) * _2455;
        float _4372 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2490 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
        float _2491 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2411 = (((_2477 * cbLight._m0[_2426].x) * _2490) * _2491) + _2301;
        _2413 = (((_2477 * cbLight._m0[_2426].y) * _2490) * _2491) + _2303;
        _2415 = (((_2477 * cbLight._m0[_2426].z) * _2490) * _2491) + _2305;
    }
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_1944.y == 0u)
    {
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2566;
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2566;
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2566;
        uvec4 _2581 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2582 = _2581.x;
        uint _2593 = uint((float(_2581.y) * floor(float(uint(cbSceneParam._m0[85u].y * _830) / _2582))) + floor(float(uint(cbSceneParam._m0[85u].x * _829) / _2582)));
        float _2603 = (log2(_2569 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2604 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        uint _2607 = uint(isnan(14.0) ? _2604 : (isnan(_2604) ? 14.0 : min(_2604, 14.0)));
        uvec4 _2612 = texelFetch(g_lightClusterGridBuffer, int(((_2607 << 2u) + (_2593 << 6u)) >> 2u));
        uint _2613 = _2612.x;
        uint _2614 = _2581.z;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((((1u << ((_2614 >> 4u) & 15u)) + 4294967295u) & _2613) == 0u) || ((_2614 & 240u) == 0u))
        {
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
        }
        else
        {
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            uint _2865 = 0u;
            uint _2874;
            bool _2875;
            for (;;)
            {
                _2874 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                _2875 = _2874 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2875)
                {
                    frontier_phi_61_pred = _2859;
                    frontier_phi_61_pred_1 = _2864;
                    frontier_phi_61_pred_2 = _2863;
                    frontier_phi_61_pred_3 = _2862;
                    frontier_phi_61_pred_4 = _2861;
                    frontier_phi_61_pred_5 = _2860;
                }
                else
                {
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    uint _2989;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2874;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    for (;;)
                    {
                        uint _2993 = uint(findLSB(_2989)) + (_2865 << 5u);
                        uint _2990 = (_2989 + 4294967295u) & _2989;
                        uint _2995 = _2993 * 48u;
                        vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3015 = (_2993 * 48u) + 4u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 3u)).x));
                        uint _3034 = (_2993 * 48u) + 8u;
                        vec3 _3045 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x));
                        float _3049 = _3009.x - _2567;
                        float _3050 = _3009.y - _2568;
                        float _3051 = _3009.z - _2569;
                        float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                        float _3055 = inversesqrt(_3052);
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3059 = dot(vec3(_848, _851, _854), vec3(_3056, _3057, _3058));
                        float _3064 = 1.0 - (_3052 * _3009.w);
                        float _4398 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3065 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3066 = sqrt(_3052) * _3028.w;
                        float _3069 = 1.39999997615814208984375 / (_3066 + 1.39999997615814208984375);
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * _3059) + _3070;
                        float _3076 = _3066 * _3066;
                        float _3080 = ((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3065) / ((_3076 * 0.699999988079071044921875) + 1.0);
                        float _3084 = (-0.0) - _2567;
                        float _3085 = (-0.0) - _2568;
                        float _3086 = (-0.0) - _2569;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3091 = _3090 * _3084;
                        float _3092 = _3090 * _3085;
                        float _3093 = _3090 * _3086;
                        float _3101 = exp2(log2(1.0 / ((_3076 * 3.5) + 5.0)) * 0.25);
                        float _3102 = 1.0 - _908;
                        float _3109 = sqrt(1.0 - ((1.0 - (_3102 * _3102)) * (1.0 - (_3101 * _3101))));
                        float _3110 = _3109 * _3109;
                        float _3111 = _3110 * _3110;
                        float _3112 = _3091 + _3056;
                        float _3113 = _3092 + _3057;
                        float _3114 = _3093 + _3058;
                        float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                        float _3122 = dot(vec3(_848, _851, _854), vec3(_3091, _3092, _3093));
                        float _4414 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3126 = dot(vec3(_848, _851, _854), vec3(_3118 * _3112, _3118 * _3113, _3118 * _3114));
                        float _4425 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3129 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3133 = ((_3129 * _3129) * (_3111 + (-1.0))) + 1.0;
                        float _3134 = _3069 * _3110;
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3059) + _3135;
                        float _4436 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3139 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3140 = 1.0 - _3110;
                        float _3150 = (0.5 / (((_3139 * ((_3125 * _3140) + _3110)) + 9.9999999392252902907785028219223e-09) + (((_3139 * _3140) + _3110) * _3125))) * _3139;
                        float _4447 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3161 = (((_3111 * 3.1415927410125732421875) * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) / ((_3133 * _3133) * ((_3076 * 2.1991131305694580078125) + 3.141590118408203125))) * _3065;
                        _2918 = (_3080 * _3028.x) + _2986;
                        _2919 = (_3080 * _3028.y) + _2987;
                        _2920 = (_3080 * _3028.z) + _2988;
                        _2915 = (_3161 * _3045.x) + _2983;
                        _2916 = (_3161 * _3045.y) + _2984;
                        _2917 = (_3161 * _3045.z) + _2985;
                        if (_2990 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2990;
                        }
                    }
                    frontier_phi_61_pred = _2915;
                    frontier_phi_61_pred_1 = _2920;
                    frontier_phi_61_pred_2 = _2919;
                    frontier_phi_61_pred_3 = _2918;
                    frontier_phi_61_pred_4 = _2917;
                    frontier_phi_61_pred_5 = _2916;
                }
                _2715 = frontier_phi_61_pred;
                _2725 = frontier_phi_61_pred_1;
                _2723 = frontier_phi_61_pred_2;
                _2721 = frontier_phi_61_pred_3;
                _2719 = frontier_phi_61_pred_4;
                _2717 = frontier_phi_61_pred_5;
                uint _2866 = _2865 + 1u;
                if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2859 = _2715;
                    _2860 = _2717;
                    _2861 = _2719;
                    _2862 = _2721;
                    _2863 = _2723;
                    _2864 = _2725;
                    _2865 = _2866;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
        }
        uvec4 _2728 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2729 = _2728.z;
        uint _2731 = (_2729 >> 8u) & 15u;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((4294967295u << _2731) & _2613) == 0u)
        {
            _2827 = _2714;
            _2829 = _2716;
            _2831 = _2718;
            _2833 = _2720;
            _2835 = _2722;
            _2837 = _2724;
        }
        else
        {
            float _2852 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
            float _2853 = _2852 * _2567;
            float _2854 = _2852 * _2568;
            float _2855 = _2852 * _2569;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2731 < ((_2729 >> 12u) & 15u))
            {
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2966 = _2714;
                float _2967 = _2716;
                float _2968 = _2718;
                float _2969 = _2720;
                float _2970 = _2722;
                float _2971 = _2724;
                uint _2972 = _2731;
                uint _2981;
                bool _2982;
                for (;;)
                {
                    _2981 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                    _2982 = _2981 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2982)
                    {
                        frontier_phi_67_pred = _2969;
                        frontier_phi_67_pred_1 = _2970;
                        frontier_phi_67_pred_2 = _2971;
                        frontier_phi_67_pred_3 = _2968;
                        frontier_phi_67_pred_4 = _2967;
                        frontier_phi_67_pred_5 = _2966;
                    }
                    else
                    {
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3179 = _2966;
                        float _3180 = _2967;
                        float _3181 = _2968;
                        float _3182 = _2969;
                        float _3183 = _2970;
                        float _3184 = _2971;
                        uint _3185 = _2981;
                        uint _3186;
                        vec4 _3211;
                        float _3212;
                        vec4 _3227;
                        vec3 _3239;
                        vec4 _3254;
                        vec4 _3270;
                        float _3316;
                        bool _3317;
                        for (;;)
                        {
                            uint _3196 = ((_2972 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3185));
                            _3186 = (_3185 + 4294967295u) & _3185;
                            uint _3198 = _3196 * 40u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3212 = _3211.w;
                            uint _3214 = (_3196 * 40u) + 4u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3229 = (_3196 * 40u) + 8u;
                            _3239 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x));
                            uint _3241 = (_3196 * 40u) + 16u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3257 = (_3196 * 40u) + 20u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3272 = (_3196 * 40u) + 24u;
                            vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3291 = (_3196 * 40u) + 28u;
                            vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            _3316 = fma(_2569, _3304.z, fma(_2568, _3304.y, _3304.x * _2567)) + _3304.w;
                            _3317 = !((fma(_2569, _3285.z, fma(_2568, _3285.y, _3285.x * _2567)) + _3285.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3317)
                            {
                                float _3344 = _3211.x - _2567;
                                float _3345 = _3211.y - _2568;
                                float _3346 = _3211.z - _2569;
                                float _3347 = dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346));
                                float _3350 = inversesqrt(_3347);
                                float _3351 = _3350 * _3344;
                                float _3352 = _3350 * _3345;
                                float _3353 = _3350 * _3346;
                                float _3357 = 1.0 - (_3347 / (_3212 * _3212));
                                float _4458 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3362 = sqrt(_3347) * _3227.w;
                                float _3364 = 1.39999997615814208984375 / (_3362 + 1.39999997615814208984375);
                                float _3365 = _3364 * _3364;
                                float _3368 = ((1.0 - _3365) * dot(vec3(_3351, _3352, _3353), vec3(_848, _851, _854))) + _3365;
                                float _3371 = _3362 * _3362;
                                float _3375 = (fma(_2569, _3254.z, fma(_2568, _3254.y, _3254.x * _2567)) + _3254.w) / _3316;
                                float _3376 = (fma(_2569, _3270.z, fma(_2568, _3270.y, _3270.x * _2567)) + _3270.w) / _3316;
                                float _3380 = 1.0 - dot(vec2(_3375, _3376), vec2(_3375, _3376));
                                float _4474 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3382 = _3381 * (((isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0))) * _3358) / ((_3371 * 0.699999988079071044921875) + 1.0));
                                float _3394 = exp2(log2(1.0 / ((_3371 * 3.5) + 5.0)) * 0.25);
                                float _3395 = 1.0 - _908;
                                float _3402 = sqrt(1.0 - ((1.0 - (_3395 * _3395)) * (1.0 - (_3394 * _3394))));
                                float _3403 = _3402 * _3402;
                                float _3404 = _3403 * _3403;
                                float _3405 = _3351 - _2853;
                                float _3406 = _3352 - _2854;
                                float _3407 = _3353 - _2855;
                                float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                                float _3415 = dot(vec3(_848, _851, _854), vec3((-0.0) - _2853, (-0.0) - _2854, (-0.0) - _2855));
                                float _4485 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3418 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3419 = dot(vec3(_848, _851, _854), vec3(_3411 * _3405, _3411 * _3406, _3411 * _3407));
                                float _4496 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3426 = ((_3422 * _3422) * (_3404 + (-1.0))) + 1.0;
                                float _3427 = _3364 * _3403;
                                float _3428 = _3427 * _3427;
                                float _3434 = ((1.0 - _3428) * dot(vec3(_848, _851, _854), vec3(_3351, _3352, _3353))) + _3428;
                                float _4507 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3436 = 1.0 - _3403;
                                float _3446 = (0.5 / (((_3435 * ((_3418 * _3436) + _3403)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3403) * _3418))) * _3435;
                                float _4518 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3456 = (_3381 * _3358) * (((_3404 * 3.1415927410125732421875) * (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) / ((_3426 * _3426) * ((_3371 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3456 * _3239.x;
                                frontier_phi_73_pred_1 = _3456 * _3239.y;
                                frontier_phi_73_pred_2 = _3382 * _3227.z;
                                frontier_phi_73_pred_3 = _3382 * _3227.y;
                                frontier_phi_73_pred_4 = _3382 * _3227.x;
                                frontier_phi_73_pred_5 = _3456 * _3239.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3460 = frontier_phi_73_pred;
                            _3461 = frontier_phi_73_pred_1;
                            _3465 = frontier_phi_73_pred_2;
                            _3464 = frontier_phi_73_pred_3;
                            _3463 = frontier_phi_73_pred_4;
                            _3462 = frontier_phi_73_pred_5;
                            _3169 = _3463 + _3182;
                            _3170 = _3464 + _3183;
                            _3171 = _3465 + _3184;
                            _3166 = _3460 + _3179;
                            _3167 = _3461 + _3180;
                            _3168 = _3462 + _3181;
                            if (_3186 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3186;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3169;
                        frontier_phi_67_pred_1 = _3170;
                        frontier_phi_67_pred_2 = _3171;
                        frontier_phi_67_pred_3 = _3168;
                        frontier_phi_67_pred_4 = _3167;
                        frontier_phi_67_pred_5 = _3166;
                    }
                    _2834 = frontier_phi_67_pred;
                    _2836 = frontier_phi_67_pred_1;
                    _2838 = frontier_phi_67_pred_2;
                    _2832 = frontier_phi_67_pred_3;
                    _2830 = frontier_phi_67_pred_4;
                    _2828 = frontier_phi_67_pred_5;
                    uint _2973 = _2972 + 1u;
                    if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2966 = _2828;
                        _2967 = _2830;
                        _2968 = _2832;
                        _2969 = _2834;
                        _2970 = _2836;
                        _2971 = _2838;
                        _2972 = _2973;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2836;
                frontier_phi_55_56_ladder_1 = _2838;
                frontier_phi_55_56_ladder_2 = _2834;
                frontier_phi_55_56_ladder_3 = _2832;
                frontier_phi_55_56_ladder_4 = _2830;
                frontier_phi_55_56_ladder_5 = _2828;
            }
            else
            {
                frontier_phi_55_56_ladder = _2722;
                frontier_phi_55_56_ladder_1 = _2724;
                frontier_phi_55_56_ladder_2 = _2720;
                frontier_phi_55_56_ladder_3 = _2718;
                frontier_phi_55_56_ladder_4 = _2716;
                frontier_phi_55_56_ladder_5 = _2714;
            }
            _2827 = frontier_phi_55_56_ladder_5;
            _2829 = frontier_phi_55_56_ladder_4;
            _2831 = frontier_phi_55_56_ladder_3;
            _2833 = frontier_phi_55_56_ladder_2;
            _2835 = frontier_phi_55_56_ladder;
            _2837 = frontier_phi_55_56_ladder_1;
        }
        float _2842 = isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0));
        _2626 = (_2842 * _2833) + _2078;
        _2628 = (_2842 * _2835) + _2080;
        _2630 = (_2842 * _2837) + _2082;
        _2632 = ((_2827 * 0.039999999105930328369140625) * _2842) + _2411;
        _2634 = ((_2829 * 0.039999999105930328369140625) * _2842) + _2413;
        _2636 = ((_2831 * 0.039999999105930328369140625) * _2842) + _2415;
    }
    else
    {
        _2626 = _2078;
        _2628 = _2080;
        _2630 = _2082;
        _2632 = _2411;
        _2634 = _2413;
        _2636 = _2415;
    }
    float _4534 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4545 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4556 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    uint _2656 = _249 + 6u;
    float _2664 = _829 / cbSceneParam._m0[86u].x;
    float _2665 = _830 / cbSceneParam._m0[86u].y;
    vec4 _2679 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, (log2((isnan(cbSceneParam._m0[77u].w) ? _764 : (isnan(_764) ? cbSceneParam._m0[77u].w : min(_764, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2681 = _2679.x;
    float _2682 = _2679.y;
    float _2683 = _2679.z;
    float _2684 = _2679.w;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    if (_764 > cbSceneParam._m0[78u].w)
    {
        float _2739 = isnan(_764) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _764 : min(cbSceneParam._m0[80u].w, _764));
        float _2740 = _2739 / _764;
        float _2751 = _2740 * _814;
        float _2752 = _815 * _2740;
        float _2753 = (-0.0) - _2752;
        float _2755 = _2740 * _816;
        float _2757 = (cbSceneParam._m0[77u].w * _2753) / _2739;
        float _2758 = _2757 + cbSceneParam._m0[79u].w;
        float _2759 = cbSceneParam._m0[79u].w - _2752;
        float _2765 = sqrt(((_2751 * _2751) + (_2752 * _2752)) + (_2755 * _2755));
        float _2768 = (1.0 - (cbSceneParam._m0[77u].w / _2739)) * _2765;
        float _2773 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2775 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2928;
        if (abs((_2753 - _2757) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2928 = ((((_2758 > 0.0) ? exp2(_2773 * _2758) : (2.0 - exp2(_2775 * _2758))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2768;
        }
        else
        {
            float _2888 = 1.0 / cbSceneParam._m0[80u].x;
            float _2889 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : max(_2758, _2759));
            float _2890 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : min(_2758, _2759));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            _2928 = ((abs(_2765 / _2753) * cbSceneParam._m0[80u].y) * ((((_2899 - _2900) * 2.0) - ((exp2(_2773 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0)))) - exp2(_2773 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))))) * _2888)) - ((exp2(_2775 * _2899) - exp2(_2775 * _2900)) * _2888))) + (_2768 * cbSceneParam._m0[80u].z);
        }
        vec4 _2930 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, 1.0), 0.0);
        float _2939 = exp2((_2928 * (-1.44269502162933349609375)) * (1.0 - _2930.w));
        float _2940 = log2(_2939);
        float _2956 = log2(_2684);
        _2777 = (exp2(_2956 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].x)) * _2930.x) / cbSceneParam._m0[78u].x)) + _2681;
        _2779 = (exp2(_2956 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].y)) * _2930.y) / cbSceneParam._m0[78u].y)) + _2682;
        _2781 = (exp2(_2956 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].z)) * _2930.z) / cbSceneParam._m0[78u].z)) + _2683;
        _2783 = _2939 * _2684;
    }
    else
    {
        _2777 = _2681;
        _2779 = _2682;
        _2781 = _2683;
        _2783 = _2684;
    }
    float _2795 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2796 = _2795 == 3.0;
    float _2797 = log2(_2783);
    float _2804 = exp2(_2797 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2626 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _892))) + ((_2632 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _2805 = exp2(_2797 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2628 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _892))) + ((_2634 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _2806 = exp2(_2797 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2630 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _892))) + ((_2636 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _2815 = (_2795 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2815 * (_2796 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2777)));
    SV_Target.y = _2815 * (_2796 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2779)));
    SV_Target.z = _2815 * (_2796 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2781)));
    SV_Target.w = cbInstanceData._m0[_2656].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2656].w;
}


