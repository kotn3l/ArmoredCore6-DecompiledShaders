#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1255;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _302.x * cbMtdParam._m0[11u].x;
    float _308 = _302.y * cbMtdParam._m0[11u].y;
    float _309 = _302.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _388 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _390 = _388.x;
    float _402 = dot(vec4(_390, _388.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _419 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _348.x) * 2.0) - ((((_390 - _402) * cbMtdParam._m0[24u].z) + _402) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3560 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _427 = (_420 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _428 = (_420 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _429 = (_420 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _446 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _466 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _468 = _466.x;
    float _478 = dot(vec4(_468, _466.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _492 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _348.y) * 2.0) - ((((_468 - _478) * cbMtdParam._m0[24u].z) + _478) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3571 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _500 = (_493 * ((_446.x * cbMtdParam._m0[13u].x) - _427)) + _427;
    float _501 = (_493 * ((_446.y * cbMtdParam._m0[13u].y) - _428)) + _428;
    float _502 = (_493 * ((_446.z * cbMtdParam._m0[13u].z) - _429)) + _429;
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _258) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _259) + cbTextureTilingScale._m0[24u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _539 = _537.x;
    float _549 = dot(vec4(_539, _537.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _561 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _348.z) * 2.0) - ((((_539 - _549) * cbMtdParam._m0[24u].z) + _549) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3582 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _575 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _278.x) * ((_562 * ((_520.x * cbMtdParam._m0[14u].x) - _500)) + _500);
    float _578 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _278.y) * ((_562 * ((_520.y * cbMtdParam._m0[14u].y) - _501)) + _501);
    float _581 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _278.z) * ((_562 * ((_520.z * cbMtdParam._m0[14u].z) - _502)) + _502);
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _615 = _611.z;
    float _622 = ((_594.x - _613) * _420) + _613;
    float _623 = ((_594.y - _614) * _420) + _614;
    float _624 = ((_594.z - _615) * _420) + _615;
    vec4 _636 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _647 = ((_636.x - _622) * _493) + _622;
    float _648 = ((_636.y - _623) * _493) + _623;
    float _649 = ((_636.z - _624) * _493) + _624;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _258) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _259) + cbTextureTilingScale._m0[23u].w));
    float _674 = ((_661.z - _649) * _562) + _649;
    float _677 = ((((_661.x - _647) * _562) + _647) * 2.0) + (-1.0);
    float _679 = ((((_661.y - _648) * _562) + _648) * 2.0) + (-1.0);
    float _680 = dot(vec2(_677, _679), vec2(_677, _679));
    float _3593 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _685 = sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _711 = (((_699.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _677;
    float _712 = (((_699.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _679;
    float _716 = (cbMtdParam._m0[19u].w * (_699.z - _674)) + _674;
    float _720 = cbMtdParam._m0[22u].x + _699.w;
    float _723 = fma(_685, _225 * NORMAL.x, fma(_712, _232 * TANGENT.x, (_218 * _210) * _711));
    float _726 = fma(_685, _225 * NORMAL.y, fma(_712, _232 * TANGENT.y, (_218 * _211) * _711));
    float _729 = fma(_685, _225 * NORMAL.z, fma(_712, _232 * TANGENT.z, (_218 * _212) * _711));
    float _733 = inversesqrt(dot(vec3(_723, _726, _729), vec3(_723, _726, _729)));
    float _734 = _733 * _723;
    float _735 = _733 * _726;
    float _736 = _733 * _729;
    float _3604 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _737 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _3626 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3637 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3648 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _755 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _806 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _796);
    float _807 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _796);
    float _808 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _796);
    float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
    float _813 = _806 * _812;
    float _814 = _807 * _812;
    float _815 = _808 * _812;
    float _821 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _822 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _840 = fma(_736, cbSceneParam._m0[5u].z, fma(_735, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _734));
    float _843 = fma(_736, cbSceneParam._m0[6u].z, fma(_735, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _734));
    float _846 = fma(_736, cbSceneParam._m0[7u].z, fma(_735, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _734));
    uint _860 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _866 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_860].x;
    float _867 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * cbInstanceData._m0[_860].y;
    float _868 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_860].z;
    float _3659 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    vec4 _880 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _821, cbSceneParam._m0[86u].y * _822));
    float _884 = ((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * TEXCOORD_5.w) * _880.x;
    float _885 = dot(vec3(_734, _735, _736), vec3(_813, _814, _815));
    float _888 = _885 * 2.0;
    float _892 = (_888 * _734) - _813;
    float _893 = (_888 * _735) - _814;
    float _894 = (_888 * _736) - _815;
    float _898 = abs(dot(vec3(_813, _814, _815), vec3(_734, _735, _736)));
    float _3692 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _900 = sqrt(_737);
    float _913 = exp2((_900 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_900 * 3.0));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1254;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _979 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _983 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _987 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1012 = _945 + _734;
        float _1013 = _949 + _735;
        float _1014 = _953 + _736;
        float _1024 = fma(_1014, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012)) - _979;
        float _1025 = fma(_1014, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012)) - _983;
        float _1026 = fma(_1014, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012)) - _987;
        float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
        float _1043 = ((_1030 * _1024) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_979 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1030 * _1025) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_983 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1030 * _1026) / cbModelParam._m0[34u].z) + ((((((_987 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        float _1082 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1048.x + (-0.5));
        float _1084 = _1082 * (_1048.y + (-0.5));
        float _1085 = _1082 * (_1048.z + (-0.5));
        float _1092 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1055.x + (-0.5));
        float _1094 = _1092 * (_1055.y + (-0.5));
        float _1095 = _1092 * (_1055.z + (-0.5));
        float _1102 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1062.x + (-0.5));
        float _1104 = _1102 * (_1062.y + (-0.5));
        float _1105 = _1102 * (_1062.z + (-0.5));
        float _1112 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1069.x + (-0.5));
        float _1114 = _1112 * (_1069.y + (-0.5));
        float _1115 = _1112 * (_1069.z + (-0.5));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = _1083 * 0.5;
        float _1120 = _1093 * 0.5;
        float _1121 = _1103 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1136 = (dot(vec3(_734, _735, _736), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1146 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3740 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1148 + 1.0))) + _1153) * _1116;
        float _1163 = _1084 * 0.5;
        float _1164 = _1094 * 0.5;
        float _1165 = _1104 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_734, _735, _736), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3773 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1190 + 1.0))) + _1195) * _1117;
        float _1205 = _1085 * 0.5;
        float _1206 = _1095 * 0.5;
        float _1207 = _1105 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_734, _735, _736), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3806 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1232 + 1.0))) + _1237) * _1118;
        _1254 = _1085;
        _1256 = _1084;
        _1257 = _1083;
        _1258 = _1095;
        _1259 = _1094;
        _1260 = _1093;
        _1261 = _1105;
        _1262 = _1104;
        _1263 = _1103;
        _1264 = _1118;
        _1265 = _1117;
        _1266 = _1116;
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
    }
    else
    {
        _1254 = _1255;
        _1256 = _1255;
        _1257 = _1255;
        _1258 = _1255;
        _1259 = _1255;
        _1260 = _1255;
        _1261 = _1255;
        _1262 = _1255;
        _1263 = _1255;
        _1264 = _1255;
        _1265 = _1255;
        _1266 = _1255;
        _1267 = 0.0;
        _1268 = 0.0;
        _1269 = 0.0;
    }
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1292 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1296 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1300 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1323 = _945 + _734;
        float _1324 = _949 + _735;
        float _1325 = _953 + _736;
        float _1335 = fma(_1325, cbModelParam._m0[30u].z, fma(_1324, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1323)) - _1292;
        float _1336 = fma(_1325, cbModelParam._m0[31u].z, fma(_1324, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1323)) - _1296;
        float _1337 = fma(_1325, cbModelParam._m0[32u].z, fma(_1324, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1323)) - _1300;
        float _1341 = inversesqrt(dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337)));
        float _1354 = ((_1341 * _1335) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1292 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1341 * _1336) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1296 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1341 * _1337) / cbModelParam._m0[35u].z) + ((((((_1300 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        float _1391 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1358.x + (-0.5));
        float _1393 = _1391 * (_1358.y + (-0.5));
        float _1394 = _1391 * (_1358.z + (-0.5));
        float _1401 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1365.x + (-0.5));
        float _1403 = _1401 * (_1365.y + (-0.5));
        float _1404 = _1401 * (_1365.z + (-0.5));
        float _1411 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1372.x + (-0.5));
        float _1413 = _1411 * (_1372.y + (-0.5));
        float _1414 = _1411 * (_1372.z + (-0.5));
        float _1421 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1379.x + (-0.5));
        float _1423 = _1421 * (_1379.y + (-0.5));
        float _1424 = _1421 * (_1379.z + (-0.5));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = _1392 * 0.5;
        float _1429 = _1402 * 0.5;
        float _1430 = _1412 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_734, _735, _736), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3869 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1455 + 1.0))) + _1460) * _1425;
        float _1470 = _1393 * 0.5;
        float _1471 = _1403 * 0.5;
        float _1472 = _1413 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_734, _735, _736), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _3902 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1497 + 1.0))) + _1502) * _1426;
        float _1512 = _1394 * 0.5;
        float _1513 = _1404 * 0.5;
        float _1514 = _1414 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_734, _735, _736), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _3935 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1539 + 1.0))) + _1544) * _1427;
        _1561 = _1394;
        _1562 = _1393;
        _1563 = _1392;
        _1564 = _1404;
        _1565 = _1403;
        _1566 = _1402;
        _1567 = _1414;
        _1568 = _1413;
        _1569 = _1412;
        _1570 = _1427;
        _1571 = _1426;
        _1572 = _1425;
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
    }
    else
    {
        _1561 = _1255;
        _1562 = _1255;
        _1563 = _1255;
        _1564 = _1255;
        _1565 = _1255;
        _1566 = _1255;
        _1567 = _1255;
        _1568 = _1255;
        _1569 = _1255;
        _1570 = _1255;
        _1571 = _1255;
        _1572 = _1255;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1267)) + _1267;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1268)) + _1268;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1269)) + _1269;
    float _1608 = fma(_1587, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1585 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1587, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1585 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1587, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1585));
    float _1629 = _892 * 0.5;
    float _1630 = _893 * 0.5;
    float _1631 = _894 * 0.5;
    float _1632 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1635 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1638 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1672;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1645 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1254, _1258, _1261, _1264));
        float _1649 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1653 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1660 = dot(vec4(cbModelParam._m0[39u]), vec4(_1629, _1630, _1631, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1683;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1674 = dot(vec4(cbModelParam._m0[40u]), vec4(_1629, _1630, _1631, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1687 = (_1683 * cbModelParam._m0[1u].x) + (_1672 * (1.0 - cbModelParam._m0[1u].x));
    float _1697 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _737);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1697 : min(cbModelParam._m0[25u].z, _1697));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1746 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1750 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1754 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1757 = fma(_894, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892));
        float _1760 = fma(_894, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892));
        float _1763 = fma(_894, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892));
        float _1791;
        if (_1757 > 0.0)
        {
            _1791 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1791 = frontier_phi_14_12_ladder;
        }
        float _1993;
        if (_1760 > 0.0)
        {
            _1993 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1993 = frontier_phi_23_19_ladder;
        }
        float _2236;
        if (_1763 > 0.0)
        {
            _2236 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2236 = frontier_phi_35_30_ladder;
        }
        float _2238 = isnan(_1993) ? _1791 : (isnan(_1791) ? _1993 : min(_1791, _1993));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1757) + _1746;
        float _2244 = (_2239 * _1760) + _1750;
        float _2245 = (_2239 * _1763) + _1754;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2246;
        float _2250 = _2246 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 > _2250) || ((_2244 < _2248) || ((_2243 < _2248) || (_2243 > _2250))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2245, cbModelParam._m0[9u].z, fma(_2244, cbModelParam._m0[9u].y, _2243 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2245, cbModelParam._m0[10u].z, fma(_2244, cbModelParam._m0[10u].y, _2243 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2245, cbModelParam._m0[11u].z, fma(_2244, cbModelParam._m0[11u].y, _2243 * cbModelParam._m0[11u].x))), _1698);
            frontier_phi_13_35_ladder = _2369.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2369.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2369.x * cbModelParam._m0[1u].y;
        }
        _1779 = frontier_phi_13_35_ladder_2;
        _1781 = frontier_phi_13_35_ladder_1;
        _1783 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_892, _893, _894), _1698);
        _1779 = _1767.x * cbModelParam._m0[1u].y;
        _1781 = _1767.y * cbModelParam._m0[1u].y;
        _1783 = _1767.z * cbModelParam._m0[1u].y;
    }
    float _1787 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _737);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1787 : min(cbModelParam._m0[25u].w, _1787));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1843 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1847 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1851 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1854 = fma(_894, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892));
        float _1857 = fma(_894, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892));
        float _1860 = fma(_894, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892));
        float _1998;
        if (_1854 > 0.0)
        {
            _1998 = abs((1.0 - _1843) / _1854);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1843 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1998 = frontier_phi_25_21_ladder;
        }
        float _2263;
        if (_1857 > 0.0)
        {
            _2263 = abs((1.0 - _1847) / _1857);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1847 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2263 = frontier_phi_37_32_ladder;
        }
        float _2468;
        if (_1860 > 0.0)
        {
            _2468 = abs((1.0 - _1851) / _1860);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1851 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2468 = frontier_phi_46_43_ladder;
        }
        float _2470 = isnan(_2263) ? _1998 : (isnan(_1998) ? _2263 : min(_1998, _2263));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1854) + _1843;
        float _2476 = (_2471 * _1857) + _1847;
        float _2477 = (_2471 * _1860) + _1851;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2478;
        float _2481 = _2478 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2477 > _2481) || ((_2477 < _2479) || ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 < _2479) || (_2475 > _2481))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2477, cbModelParam._m0[17u].z, fma(_2476, cbModelParam._m0[17u].y, _2475 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2477, cbModelParam._m0[18u].z, fma(_2476, cbModelParam._m0[18u].y, _2475 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2477, cbModelParam._m0[19u].z, fma(_2476, cbModelParam._m0[19u].y, _2475 * cbModelParam._m0[19u].x))), _1788);
            frontier_phi_22_46_ladder = _2676.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2676.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2676.x * cbModelParam._m0[1u].z;
        }
        _1879 = frontier_phi_22_46_ladder_2;
        _1881 = frontier_phi_22_46_ladder_1;
        _1883 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_892, _893, _894), _1788);
        _1879 = _1863.x * cbModelParam._m0[1u].z;
        _1881 = _1863.y * cbModelParam._m0[1u].z;
        _1883 = _1863.z * cbModelParam._m0[1u].z;
    }
    float _1895 = ((((1.0 - _913) * ((_900 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_913 * _900)) * _884;
    float _1896 = _1895 * ((cbModelParam._m0[1u].w * (_1879 - _1779)) + _1779);
    float _1897 = _1895 * ((cbModelParam._m0[1u].w * (_1881 - _1781)) + _1781);
    float _1898 = _1895 * ((cbModelParam._m0[1u].w * (_1883 - _1783)) + _1783);
    float _1901 = fma(_1898, cbSceneParam._m0[89u].z, fma(_1897, cbSceneParam._m0[89u].y, _1896 * cbSceneParam._m0[89u].x));
    float _1904 = fma(_1898, cbSceneParam._m0[90u].z, fma(_1897, cbSceneParam._m0[90u].y, _1896 * cbSceneParam._m0[90u].x));
    float _1907 = fma(_1898, cbSceneParam._m0[91u].z, fma(_1897, cbSceneParam._m0[91u].y, _1896 * cbSceneParam._m0[91u].x));
    uvec4 _1917 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1919 = _1917.x * 14u;
    uint _1920 = _1919 + 13u;
    float _1927 = _884 + (-1.0);
    float _1932 = (cbLight._m0[_1920].x * _1927) + 1.0;
    float _1933 = (cbLight._m0[_1920].y * _1927) + 1.0;
    float _1934 = (cbLight._m0[_1920].z * _1927) + 1.0;
    float _1935 = (cbLight._m0[_1920].w * _1927) + 1.0;
    uint _1936 = _1919 + 5u;
    float _1942 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    uint _1946 = _1919 + 4u;
    float _1952 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1956 = _1919 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_734, _735, _736));
    float _1970 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_734, _735, _736));
    float _4071 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _4082 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1975 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.3183098733425140380859375;
    float _1977 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.3183098733425140380859375;
    float _1984 = ((cbLight._m0[_1936].x * _1942) * _1977) + ((cbLight._m0[_1946].x * _1952) * _1975);
    float _1985 = ((_1942 * cbLight._m0[_1936].y) * _1977) + ((_1952 * cbLight._m0[_1946].y) * _1975);
    float _1986 = ((_1942 * cbLight._m0[_1936].z) * _1977) + ((_1952 * cbLight._m0[_1946].z) * _1975);
    uvec4 _1990 = floatBitsToUint(cbLight._m0[_1919 + 12u]);
    bool _1992 = _1990.x == 0u;
    float _2003;
    float _2005;
    float _2007;
    if (_1992)
    {
        _2003 = _1984;
        _2005 = _1985;
        _2007 = _1986;
    }
    else
    {
        uint _2011 = _1919 + 6u;
        float _2027 = (dot(vec3(cbLight._m0[_1919 + 2u].xyz), vec3(_734, _735, _736)) * 0.5) + 0.5;
        float _2028 = _2027 * _2027;
        float _4093 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2029 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2030 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2003 = (((cbLight._m0[_2011].x * 0.3183098733425140380859375) * _2029) * _2030) + _1984;
        _2005 = (((cbLight._m0[_2011].y * 0.3183098733425140380859375) * _2029) * _2030) + _1985;
        _2007 = (((cbLight._m0[_2011].z * 0.3183098733425140380859375) * _2029) * _2030) + _1986;
    }
    bool _2010 = _1990.y == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_2010)
    {
        _2048 = _2003;
        _2050 = _2005;
        _2052 = _2007;
    }
    else
    {
        uint _2207 = _1919 + 7u;
        float _2223 = (dot(vec3(cbLight._m0[_1919 + 3u].xyz), vec3(_734, _735, _736)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4109 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2226 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2048 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2003;
        _2050 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2005;
        _2052 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2007;
    }
    uint _2055 = _1919 + 8u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _737) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1919].x + _813;
    float _2071 = cbLight._m0[_1919].y + _814;
    float _2072 = cbLight._m0[_1919].z + _815;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_1919].xyz));
    float _4125 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2084 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2085 = dot(vec3(_734, _735, _736), vec3(_2077, _2078, _2079));
    float _4147 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2077, _2078, _2079));
    float _4158 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2069 * _2069;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2108 = (exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2109 = 1.0 - _2069;
    float _2120 = (0.5 / (((_2084 * ((_2083 * _2109) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2109) + _2069) * _2083))) * _2083;
    float _4169 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    uint _2133 = _1919 + 9u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _737) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1956].x + _813;
    float _2147 = cbLight._m0[_1956].y + _814;
    float _2148 = cbLight._m0[_1956].z + _815;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_1956].xyz));
    float _4180 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2160 = dot(vec3(_734, _735, _736), vec3(_2153, _2154, _2155));
    float _4191 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2153, _2154, _2155));
    float _4202 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2145 * _2145;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2181 = (exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2182 = 1.0 - _2145;
    float _2192 = (0.5 / (((_2084 * ((_2159 * _2182) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2182) + _2145) * _2159))) * _2159;
    float _4213 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    float _2204 = (((_2181 * cbLight._m0[_2133].x) * _2194) * _1942) + (((_2108 * cbLight._m0[_2055].x) * _2122) * _1952);
    float _2205 = (((_2181 * cbLight._m0[_2133].y) * _2194) * _1942) + (((_2108 * cbLight._m0[_2055].y) * _2122) * _1952);
    float _2206 = (((_2181 * cbLight._m0[_2133].z) * _2194) * _1942) + (((_2108 * cbLight._m0[_2055].z) * _2122) * _1952);
    float _2268;
    float _2270;
    float _2272;
    if (_1992)
    {
        _2268 = _2204;
        _2270 = _2205;
        _2272 = _2206;
    }
    else
    {
        uint _2274 = _1919 + 2u;
        uint _2278 = _1919 + 10u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _737) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _813;
        float _2295 = cbLight._m0[_2274].y + _814;
        float _2296 = cbLight._m0[_2274].z + _815;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2274].xyz));
        float _4224 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2308 = dot(vec3(_734, _735, _736), vec3(_2301, _2302, _2303));
        float _4235 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4246 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2329 = (exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2330 = 1.0 - _2293;
        float _2340 = (0.5 / (((_2084 * ((_2307 * _2330) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2330) + _2293) * _2307))) * _2307;
        float _4257 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2268 = (((_2329 * cbLight._m0[_2278].x) * _2342) * _2343) + _2204;
        _2270 = (((_2329 * cbLight._m0[_2278].y) * _2342) * _2343) + _2205;
        _2272 = (((_2329 * cbLight._m0[_2278].z) * _2342) * _2343) + _2206;
    }
    float _2378;
    float _2380;
    float _2382;
    if (_2010)
    {
        _2378 = _2268;
        _2380 = _2270;
        _2382 = _2272;
    }
    else
    {
        uint _2389 = _1919 + 3u;
        uint _2393 = _1919 + 11u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _737) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _813;
        float _2410 = cbLight._m0[_2389].y + _814;
        float _2411 = cbLight._m0[_2389].z + _815;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2389].xyz));
        float _4273 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2423 = dot(vec3(_734, _735, _736), vec3(_2416, _2417, _2418));
        float _4284 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4295 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2444 = (exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2445 = 1.0 - _2408;
        float _2455 = (0.5 / (((_2084 * ((_2422 * _2445) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2445) + _2408) * _2422))) * _2422;
        float _4306 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2378 = (((_2444 * cbLight._m0[_2393].x) * _2457) * _2458) + _2268;
        _2380 = (((_2444 * cbLight._m0[_2393].y) * _2457) * _2458) + _2270;
        _2382 = (((_2444 * cbLight._m0[_2393].z) * _2457) * _2458) + _2272;
    }
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_1917.y == 0u)
    {
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2533;
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2533;
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2533;
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.x;
        uint _2560 = uint((float(_2548.y) * floor(float(uint(cbSceneParam._m0[85u].y * _822) / _2549))) + floor(float(uint(cbSceneParam._m0[85u].x * _821) / _2549)));
        float _2570 = (log2(_2536 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2571 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        uint _2574 = uint(isnan(14.0) ? _2571 : (isnan(_2571) ? 14.0 : min(_2571, 14.0)));
        uvec4 _2579 = texelFetch(g_lightClusterGridBuffer, int(((_2574 << 2u) + (_2560 << 6u)) >> 2u));
        uint _2580 = _2579.x;
        uint _2581 = _2548.z;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((((1u << ((_2581 >> 4u) & 15u)) + 4294967295u) & _2580) == 0u) || ((_2581 & 240u) == 0u))
        {
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
        }
        else
        {
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            uint _2832 = 0u;
            uint _2841;
            bool _2842;
            for (;;)
            {
                _2841 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                _2842 = _2841 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2842)
                {
                    frontier_phi_61_pred = _2826;
                    frontier_phi_61_pred_1 = _2831;
                    frontier_phi_61_pred_2 = _2830;
                    frontier_phi_61_pred_3 = _2829;
                    frontier_phi_61_pred_4 = _2828;
                    frontier_phi_61_pred_5 = _2827;
                }
                else
                {
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    uint _2956;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2841;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    for (;;)
                    {
                        uint _2960 = uint(findLSB(_2956)) + (_2832 << 5u);
                        uint _2957 = (_2956 + 4294967295u) & _2956;
                        uint _2962 = _2960 * 48u;
                        vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2982 = (_2960 * 48u) + 4u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3001 = (_2960 * 48u) + 8u;
                        vec3 _3012 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x));
                        float _3016 = _2976.x - _2534;
                        float _3017 = _2976.y - _2535;
                        float _3018 = _2976.z - _2536;
                        float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                        float _3022 = inversesqrt(_3019);
                        float _3023 = _3022 * _3016;
                        float _3024 = _3022 * _3017;
                        float _3025 = _3022 * _3018;
                        float _3026 = dot(vec3(_840, _843, _846), vec3(_3023, _3024, _3025));
                        float _3031 = 1.0 - (_3019 * _2976.w);
                        float _4332 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3033 = sqrt(_3019) * _2995.w;
                        float _3036 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _3026) + _3037;
                        float _3043 = _3033 * _3033;
                        float _3047 = ((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3032) / ((_3043 * 0.699999988079071044921875) + 1.0);
                        float _3051 = (-0.0) - _2534;
                        float _3052 = (-0.0) - _2535;
                        float _3053 = (-0.0) - _2536;
                        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                        float _3058 = _3057 * _3051;
                        float _3059 = _3057 * _3052;
                        float _3060 = _3057 * _3053;
                        float _3068 = exp2(log2(1.0 / ((_3043 * 3.5) + 5.0)) * 0.25);
                        float _3069 = 1.0 - _900;
                        float _3076 = sqrt(1.0 - ((1.0 - (_3069 * _3069)) * (1.0 - (_3068 * _3068))));
                        float _3077 = _3076 * _3076;
                        float _3078 = _3077 * _3077;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3081 = _3060 + _3025;
                        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                        float _3089 = dot(vec3(_840, _843, _846), vec3(_3058, _3059, _3060));
                        float _4348 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3093 = dot(vec3(_840, _843, _846), vec3(_3085 * _3079, _3085 * _3080, _3085 * _3081));
                        float _4359 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3100 = ((_3096 * _3096) * (_3078 + (-1.0))) + 1.0;
                        float _3101 = _3036 * _3077;
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3026) + _3102;
                        float _4370 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3107 = 1.0 - _3077;
                        float _3117 = (0.5 / (((_3106 * ((_3092 * _3107) + _3077)) + 9.9999999392252902907785028219223e-09) + (((_3106 * _3107) + _3077) * _3092))) * _3106;
                        float _4381 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3128 = (((_3078 * 3.1415927410125732421875) * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) / ((_3100 * _3100) * ((_3043 * 2.1991131305694580078125) + 3.141590118408203125))) * _3032;
                        _2885 = (_3047 * _2995.x) + _2953;
                        _2886 = (_3047 * _2995.y) + _2954;
                        _2887 = (_3047 * _2995.z) + _2955;
                        _2882 = (_3128 * _3012.x) + _2950;
                        _2883 = (_3128 * _3012.y) + _2951;
                        _2884 = (_3128 * _3012.z) + _2952;
                        if (_2957 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2957;
                        }
                    }
                    frontier_phi_61_pred = _2882;
                    frontier_phi_61_pred_1 = _2887;
                    frontier_phi_61_pred_2 = _2886;
                    frontier_phi_61_pred_3 = _2885;
                    frontier_phi_61_pred_4 = _2884;
                    frontier_phi_61_pred_5 = _2883;
                }
                _2682 = frontier_phi_61_pred;
                _2692 = frontier_phi_61_pred_1;
                _2690 = frontier_phi_61_pred_2;
                _2688 = frontier_phi_61_pred_3;
                _2686 = frontier_phi_61_pred_4;
                _2684 = frontier_phi_61_pred_5;
                uint _2833 = _2832 + 1u;
                if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2826 = _2682;
                    _2827 = _2684;
                    _2828 = _2686;
                    _2829 = _2688;
                    _2830 = _2690;
                    _2831 = _2692;
                    _2832 = _2833;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
        }
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.z;
        uint _2698 = (_2696 >> 8u) & 15u;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((4294967295u << _2698) & _2580) == 0u)
        {
            _2794 = _2681;
            _2796 = _2683;
            _2798 = _2685;
            _2800 = _2687;
            _2802 = _2689;
            _2804 = _2691;
        }
        else
        {
            float _2819 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
            float _2820 = _2819 * _2534;
            float _2821 = _2819 * _2535;
            float _2822 = _2819 * _2536;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2698 < ((_2696 >> 12u) & 15u))
            {
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2933 = _2681;
                float _2934 = _2683;
                float _2935 = _2685;
                float _2936 = _2687;
                float _2937 = _2689;
                float _2938 = _2691;
                uint _2939 = _2698;
                uint _2948;
                bool _2949;
                for (;;)
                {
                    _2948 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2939 << 2u)) >> 2u)).x;
                    _2949 = _2948 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2949)
                    {
                        frontier_phi_67_pred = _2936;
                        frontier_phi_67_pred_1 = _2937;
                        frontier_phi_67_pred_2 = _2938;
                        frontier_phi_67_pred_3 = _2935;
                        frontier_phi_67_pred_4 = _2934;
                        frontier_phi_67_pred_5 = _2933;
                    }
                    else
                    {
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3146 = _2933;
                        float _3147 = _2934;
                        float _3148 = _2935;
                        float _3149 = _2936;
                        float _3150 = _2937;
                        float _3151 = _2938;
                        uint _3152 = _2948;
                        uint _3153;
                        vec4 _3178;
                        float _3179;
                        vec4 _3194;
                        vec3 _3206;
                        vec4 _3221;
                        vec4 _3236;
                        float _3282;
                        bool _3283;
                        for (;;)
                        {
                            uint _3163 = ((_2939 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3152));
                            _3153 = (_3152 + 4294967295u) & _3152;
                            uint _3165 = _3163 * 40u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3179 = _3178.w;
                            uint _3181 = (_3163 * 40u) + 4u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3163 * 40u) + 8u;
                            _3206 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x));
                            uint _3208 = (_3163 * 40u) + 16u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3223 = (_3163 * 40u) + 20u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3163 * 40u) + 24u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3257 = (_3163 * 40u) + 28u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3282 = fma(_2536, _3270.z, fma(_2535, _3270.y, _3270.x * _2534)) + _3270.w;
                            _3283 = !((fma(_2536, _3251.z, fma(_2535, _3251.y, _3251.x * _2534)) + _3251.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3283)
                            {
                                float _3310 = _3178.x - _2534;
                                float _3311 = _3178.y - _2535;
                                float _3312 = _3178.z - _2536;
                                float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                                float _3316 = inversesqrt(_3313);
                                float _3317 = _3316 * _3310;
                                float _3318 = _3316 * _3311;
                                float _3319 = _3316 * _3312;
                                float _3323 = 1.0 - (_3313 / (_3179 * _3179));
                                float _4392 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3328 = sqrt(_3313) * _3194.w;
                                float _3330 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                                float _3331 = _3330 * _3330;
                                float _3334 = ((1.0 - _3331) * dot(vec3(_3317, _3318, _3319), vec3(_840, _843, _846))) + _3331;
                                float _3337 = _3328 * _3328;
                                float _3341 = (fma(_2536, _3221.z, fma(_2535, _3221.y, _3221.x * _2534)) + _3221.w) / _3282;
                                float _3342 = (fma(_2536, _3236.z, fma(_2535, _3236.y, _3236.x * _2534)) + _3236.w) / _3282;
                                float _3346 = 1.0 - dot(vec2(_3341, _3342), vec2(_3341, _3342));
                                float _4408 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3348 = _3347 * (((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3324) / ((_3337 * 0.699999988079071044921875) + 1.0));
                                float _3360 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                                float _3361 = 1.0 - _900;
                                float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                                float _3369 = _3368 * _3368;
                                float _3370 = _3369 * _3369;
                                float _3371 = _3317 - _2820;
                                float _3372 = _3318 - _2821;
                                float _3373 = _3319 - _2822;
                                float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                                float _3381 = dot(vec3(_840, _843, _846), vec3((-0.0) - _2820, (-0.0) - _2821, (-0.0) - _2822));
                                float _4419 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3385 = dot(vec3(_840, _843, _846), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                                float _4430 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                                float _3393 = _3330 * _3369;
                                float _3394 = _3393 * _3393;
                                float _3400 = ((1.0 - _3394) * dot(vec3(_840, _843, _846), vec3(_3317, _3318, _3319))) + _3394;
                                float _4441 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3402 = 1.0 - _3369;
                                float _3412 = (0.5 / (((_3401 * ((_3384 * _3402) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3369) * _3384))) * _3401;
                                float _4452 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3422 = (_3347 * _3324) * (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) / ((_3392 * _3392) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3422 * _3206.x;
                                frontier_phi_73_pred_1 = _3422 * _3206.y;
                                frontier_phi_73_pred_2 = _3348 * _3194.z;
                                frontier_phi_73_pred_3 = _3348 * _3194.y;
                                frontier_phi_73_pred_4 = _3348 * _3194.x;
                                frontier_phi_73_pred_5 = _3422 * _3206.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3426 = frontier_phi_73_pred;
                            _3427 = frontier_phi_73_pred_1;
                            _3431 = frontier_phi_73_pred_2;
                            _3430 = frontier_phi_73_pred_3;
                            _3429 = frontier_phi_73_pred_4;
                            _3428 = frontier_phi_73_pred_5;
                            _3136 = _3429 + _3149;
                            _3137 = _3430 + _3150;
                            _3138 = _3431 + _3151;
                            _3133 = _3426 + _3146;
                            _3134 = _3427 + _3147;
                            _3135 = _3428 + _3148;
                            if (_3153 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3153;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3136;
                        frontier_phi_67_pred_1 = _3137;
                        frontier_phi_67_pred_2 = _3138;
                        frontier_phi_67_pred_3 = _3135;
                        frontier_phi_67_pred_4 = _3134;
                        frontier_phi_67_pred_5 = _3133;
                    }
                    _2801 = frontier_phi_67_pred;
                    _2803 = frontier_phi_67_pred_1;
                    _2805 = frontier_phi_67_pred_2;
                    _2799 = frontier_phi_67_pred_3;
                    _2797 = frontier_phi_67_pred_4;
                    _2795 = frontier_phi_67_pred_5;
                    uint _2940 = _2939 + 1u;
                    if (_2940 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2933 = _2795;
                        _2934 = _2797;
                        _2935 = _2799;
                        _2936 = _2801;
                        _2937 = _2803;
                        _2938 = _2805;
                        _2939 = _2940;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2803;
                frontier_phi_55_56_ladder_1 = _2805;
                frontier_phi_55_56_ladder_2 = _2801;
                frontier_phi_55_56_ladder_3 = _2799;
                frontier_phi_55_56_ladder_4 = _2797;
                frontier_phi_55_56_ladder_5 = _2795;
            }
            else
            {
                frontier_phi_55_56_ladder = _2689;
                frontier_phi_55_56_ladder_1 = _2691;
                frontier_phi_55_56_ladder_2 = _2687;
                frontier_phi_55_56_ladder_3 = _2685;
                frontier_phi_55_56_ladder_4 = _2683;
                frontier_phi_55_56_ladder_5 = _2681;
            }
            _2794 = frontier_phi_55_56_ladder_5;
            _2796 = frontier_phi_55_56_ladder_4;
            _2798 = frontier_phi_55_56_ladder_3;
            _2800 = frontier_phi_55_56_ladder_2;
            _2802 = frontier_phi_55_56_ladder;
            _2804 = frontier_phi_55_56_ladder_1;
        }
        float _2809 = isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0));
        _2593 = (_2809 * _2800) + _2048;
        _2595 = (_2809 * _2802) + _2050;
        _2597 = (_2809 * _2804) + _2052;
        _2599 = ((_2794 * 0.039999999105930328369140625) * _2809) + _2378;
        _2601 = ((_2796 * 0.039999999105930328369140625) * _2809) + _2380;
        _2603 = ((_2798 * 0.039999999105930328369140625) * _2809) + _2382;
    }
    else
    {
        _2593 = _2048;
        _2595 = _2050;
        _2597 = _2052;
        _2599 = _2378;
        _2601 = _2380;
        _2603 = _2382;
    }
    float _4468 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4479 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4490 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    uint _2623 = _238 + 6u;
    float _2631 = _821 / cbSceneParam._m0[86u].x;
    float _2632 = _822 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _755 : (isnan(_755) ? cbSceneParam._m0[77u].w : min(_755, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_755 > cbSceneParam._m0[78u].w)
    {
        float _2706 = isnan(_755) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _755 : min(cbSceneParam._m0[80u].w, _755));
        float _2707 = _2706 / _755;
        float _2718 = _2707 * _806;
        float _2719 = _807 * _2707;
        float _2720 = (-0.0) - _2719;
        float _2722 = _2707 * _808;
        float _2724 = (cbSceneParam._m0[77u].w * _2720) / _2706;
        float _2725 = _2724 + cbSceneParam._m0[79u].w;
        float _2726 = cbSceneParam._m0[79u].w - _2719;
        float _2732 = sqrt(((_2718 * _2718) + (_2719 * _2719)) + (_2722 * _2722));
        float _2735 = (1.0 - (cbSceneParam._m0[77u].w / _2706)) * _2732;
        float _2740 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2742 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2895;
        if (abs((_2720 - _2724) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2895 = ((((_2725 > 0.0) ? exp2(_2740 * _2725) : (2.0 - exp2(_2742 * _2725))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2735;
        }
        else
        {
            float _2855 = 1.0 / cbSceneParam._m0[80u].x;
            float _2856 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : max(_2725, _2726));
            float _2857 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : min(_2725, _2726));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            _2895 = ((abs(_2732 / _2720) * cbSceneParam._m0[80u].y) * ((((_2866 - _2867) * 2.0) - ((exp2(_2740 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0)))) - exp2(_2740 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))))) * _2855)) - ((exp2(_2742 * _2866) - exp2(_2742 * _2867)) * _2855))) + (_2735 * cbSceneParam._m0[80u].z);
        }
        vec4 _2897 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2906 = exp2((_2895 * (-1.44269502162933349609375)) * (1.0 - _2897.w));
        float _2907 = log2(_2906);
        float _2923 = log2(_2651);
        _2744 = (exp2(_2923 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].x)) * _2897.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2746 = (exp2(_2923 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].y)) * _2897.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2748 = (exp2(_2923 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].z)) * _2897.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2750 = _2906 * _2651;
    }
    else
    {
        _2744 = _2648;
        _2746 = _2649;
        _2748 = _2650;
        _2750 = _2651;
    }
    float _2762 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2763 = _2762 == 3.0;
    float _2764 = log2(_2750);
    float _2771 = exp2(_2764 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2593 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _884))) + ((_2599 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _2772 = exp2(_2764 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2595 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _884))) + ((_2601 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _2773 = exp2(_2764 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2597 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _884))) + ((_2603 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _2782 = (_2762 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2782 * (_2763 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2744)));
    SV_Target.y = _2782 * (_2763 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.z = _2782 * (_2763 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.w = cbInstanceData._m0[_2623].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2623].w;
}


