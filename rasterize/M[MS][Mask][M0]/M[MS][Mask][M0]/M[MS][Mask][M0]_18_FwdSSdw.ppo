#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1326;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3656 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3667 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3678 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3689 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _450 = (_443 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _451 = (_443 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _452 = (_443 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _456 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _450;
    float _459 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _451;
    float _462 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _452;
    float _469 = ((_450 - _456) * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) + _456;
    float _470 = ((_451 - _459) * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) + _459;
    float _471 = ((_452 - _462) * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) + _462;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _535 = _531.z;
    float _544 = ((_514.z - _535) * _443) + _535;
    float _547 = ((((_514.x - _533) * _443) + _533) * 2.0) + (-1.0);
    float _548 = ((((_514.y - _534) * _443) + _534) * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3700 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _554 = sqrt(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _597 = _595.x;
    float _598 = 1.0 - _597;
    float _604 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _607 = ((isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : min(_604, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _616 = (_607 - ((((((_597 - _598) * cbMtdParam._m0[24u].w) + _598) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _607))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3721 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _624 = (_617 * (cbMtdParam._m0[17u].x - _469)) + _469;
    float _625 = (_617 * (cbMtdParam._m0[17u].y - _470)) + _470;
    float _626 = (_617 * (cbMtdParam._m0[17u].z - _471)) + _471;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _640 = _638.x;
    float _641 = 1.0 - _640;
    float _666 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_640 - _641) * cbMtdParam._m0[24u].y) + _641) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3732 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _675 = ((((cbMtdParam._m0[10u].x - _624) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _667) + _624;
    float _676 = ((((cbMtdParam._m0[10u].y - _625) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _667) + _625;
    float _677 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _626)) * _667) + _626;
    float _682 = (((_489.z - _544) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _544;
    float _686 = ((_570.z - _682) * cbMtdParam._m0[19u].w) + _682;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _707 = (_700.x * 2.0) + (-1.0);
    float _708 = (_700.y * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _3743 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _717 = (_617 * (_700.z - _686)) + _686;
    float _720 = ((cbMtdParam._m0[23u].y - _717) * _667) + _717;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _745 = (_739.x * 2.0) + (-1.0);
    float _746 = (_739.y * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _3754 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _761 = (_547 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_489.x * 2.0) + (-1.0)))) + (((_570.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _762 = (_548 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_489.y * 2.0) + (-1.0)))) + (((_570.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _774 = (((_707 - _761) + (cbMtdParam._m0[21u].x * _761)) * _617) + _761;
    float _775 = (((_708 - _762) + (cbMtdParam._m0[21u].x * _762)) * _617) + _762;
    float _776 = (_617 * (sqrt(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) - _554)) + _554;
    float _787 = (((_745 - _774) + (_774 * cbMtdParam._m0[22u].z)) * _667) + _774;
    float _788 = (((_746 - _775) + (_775 * cbMtdParam._m0[22u].z)) * _667) + _775;
    float _789 = ((sqrt(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) - _776) * _667) + _776;
    float _791 = cbMtdParam._m0[22u].x + _570.w;
    float _794 = fma(_789, _245 * NORMAL.x, fma(_788, _252 * TANGENT.x, (_238 * _230) * _787));
    float _797 = fma(_789, _245 * NORMAL.y, fma(_788, _252 * TANGENT.y, (_238 * _231) * _787));
    float _800 = fma(_789, _245 * NORMAL.z, fma(_788, _252 * TANGENT.z, (_238 * _232) * _787));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _3765 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _808 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _3787 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3798 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3809 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _826 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _877 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _867);
    float _878 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _867);
    float _879 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _867);
    float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
    float _884 = _877 * _883;
    float _885 = _878 * _883;
    float _886 = _879 * _883;
    float _892 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _893 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _911 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _914 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _917 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    uint _931 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _937 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_931].x;
    float _938 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_931].y;
    float _939 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_931].z;
    float _3820 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    vec4 _951 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _892, cbSceneParam._m0[86u].y * _893));
    float _955 = ((isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * TEXCOORD_5.w) * _951.x;
    float _956 = dot(vec3(_805, _806, _807), vec3(_884, _885, _886));
    float _959 = _956 * 2.0;
    float _963 = (_959 * _805) - _884;
    float _964 = (_959 * _806) - _885;
    float _965 = (_959 * _807) - _886;
    float _969 = abs(dot(vec3(_884, _885, _886), vec3(_805, _806, _807)));
    float _3853 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _971 = sqrt(_808);
    float _984 = exp2((_971 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_971 * 3.0));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1050 = fma(_1024, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016));
        float _1054 = fma(_1024, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016));
        float _1058 = fma(_1024, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016));
        float _1083 = _1016 + _805;
        float _1084 = _1020 + _806;
        float _1085 = _1024 + _807;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1050;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1054;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1058;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1050 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1054 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1058 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_805, _806, _807), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3901 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_805, _806, _807), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3934 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_805, _806, _807), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3967 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1365 = fma(_1024, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016));
        float _1369 = fma(_1024, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016));
        float _1373 = fma(_1024, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016));
        float _1396 = _1016 + _805;
        float _1397 = _1020 + _806;
        float _1398 = _1024 + _807;
        float _1408 = fma(_1398, cbModelParam._m0[30u].z, fma(_1397, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1396)) - _1365;
        float _1409 = fma(_1398, cbModelParam._m0[31u].z, fma(_1397, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1396)) - _1369;
        float _1410 = fma(_1398, cbModelParam._m0[32u].z, fma(_1397, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1396)) - _1373;
        float _1414 = inversesqrt(dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410)));
        float _1427 = ((_1414 * _1408) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1365 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1414 * _1409) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1369 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1414 * _1410) / cbModelParam._m0[35u].z) + ((((((_1373 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        float _1464 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1431.x + (-0.5));
        float _1466 = _1464 * (_1431.y + (-0.5));
        float _1467 = _1464 * (_1431.z + (-0.5));
        float _1474 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1438.x + (-0.5));
        float _1476 = _1474 * (_1438.y + (-0.5));
        float _1477 = _1474 * (_1438.z + (-0.5));
        float _1484 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1445.x + (-0.5));
        float _1486 = _1484 * (_1445.y + (-0.5));
        float _1487 = _1484 * (_1445.z + (-0.5));
        float _1494 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1452.x + (-0.5));
        float _1496 = _1494 * (_1452.y + (-0.5));
        float _1497 = _1494 * (_1452.z + (-0.5));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = _1465 * 0.5;
        float _1502 = _1475 * 0.5;
        float _1503 = _1485 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_805, _806, _807), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4030 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1528 + 1.0))) + _1533) * _1498;
        float _1543 = _1466 * 0.5;
        float _1544 = _1476 * 0.5;
        float _1545 = _1486 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_805, _806, _807), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4063 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1570 + 1.0))) + _1575) * _1499;
        float _1585 = _1467 * 0.5;
        float _1586 = _1477 * 0.5;
        float _1587 = _1487 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_805, _806, _807), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4096 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1612 + 1.0))) + _1617) * _1500;
        _1634 = _1467;
        _1635 = _1466;
        _1636 = _1465;
        _1637 = _1477;
        _1638 = _1476;
        _1639 = _1475;
        _1640 = _1487;
        _1641 = _1486;
        _1642 = _1485;
        _1643 = _1500;
        _1644 = _1499;
        _1645 = _1498;
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
    }
    else
    {
        _1634 = _1326;
        _1635 = _1326;
        _1636 = _1326;
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = _1326;
        _1646 = 0.0;
        _1647 = 0.0;
        _1648 = 0.0;
    }
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1338)) + _1338;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1339)) + _1339;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1340)) + _1340;
    float _1681 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1658));
    float _1702 = _963 * 0.5;
    float _1703 = _964 * 0.5;
    float _1704 = _965 * 0.5;
    float _1705 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1708 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1711 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1745;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1718 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1722 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1726 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1733 = dot(vec4(cbModelParam._m0[39u]), vec4(_1702, _1703, _1704, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1756;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1747 = dot(vec4(cbModelParam._m0[40u]), vec4(_1702, _1703, _1704, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1760 = (_1756 * cbModelParam._m0[1u].x) + (_1745 * (1.0 - cbModelParam._m0[1u].x));
    float _1770 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1770 : min(cbModelParam._m0[25u].z, _1770));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1819 = fma(_1024, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016)) + cbModelParam._m0[13u].w;
        float _1823 = fma(_1024, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016)) + cbModelParam._m0[14u].w;
        float _1827 = fma(_1024, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016)) + cbModelParam._m0[15u].w;
        float _1830 = fma(_965, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963));
        float _1833 = fma(_965, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963));
        float _1836 = fma(_965, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963));
        float _1864;
        if (_1830 > 0.0)
        {
            _1864 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1864 = frontier_phi_14_12_ladder;
        }
        float _2086;
        if (_1833 > 0.0)
        {
            _2086 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2086 = frontier_phi_23_19_ladder;
        }
        float _2332;
        if (_1836 > 0.0)
        {
            _2332 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2332 = frontier_phi_35_30_ladder;
        }
        float _2334 = isnan(_2086) ? _1864 : (isnan(_1864) ? _2086 : min(_1864, _2086));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1830) + _1819;
        float _2340 = (_2335 * _1833) + _1823;
        float _2341 = (_2335 * _1836) + _1827;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2344 = (-1.0) - _2342;
        float _2346 = _2342 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2341 > _2346) || ((_2341 < _2344) || ((_2340 > _2346) || ((_2340 < _2344) || ((_2339 < _2344) || (_2339 > _2346))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2465 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2341, cbModelParam._m0[9u].z, fma(_2340, cbModelParam._m0[9u].y, _2339 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2341, cbModelParam._m0[10u].z, fma(_2340, cbModelParam._m0[10u].y, _2339 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2341, cbModelParam._m0[11u].z, fma(_2340, cbModelParam._m0[11u].y, _2339 * cbModelParam._m0[11u].x))), _1771);
            frontier_phi_13_35_ladder = _2465.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2465.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2465.x * cbModelParam._m0[1u].y;
        }
        _1852 = frontier_phi_13_35_ladder_2;
        _1854 = frontier_phi_13_35_ladder_1;
        _1856 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1840 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_963, _964, _965), _1771);
        _1852 = _1840.x * cbModelParam._m0[1u].y;
        _1854 = _1840.y * cbModelParam._m0[1u].y;
        _1856 = _1840.z * cbModelParam._m0[1u].y;
    }
    float _1860 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1860 : min(cbModelParam._m0[25u].w, _1860));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1915 = fma(_1024, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016)) + cbModelParam._m0[21u].w;
        float _1919 = fma(_1024, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016)) + cbModelParam._m0[22u].w;
        float _1923 = fma(_1024, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016)) + cbModelParam._m0[23u].w;
        float _1926 = fma(_965, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963));
        float _1929 = fma(_965, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963));
        float _1932 = fma(_965, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963));
        float _2091;
        if (_1926 > 0.0)
        {
            _2091 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2091 = frontier_phi_25_21_ladder;
        }
        float _2359;
        if (_1929 > 0.0)
        {
            _2359 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2359 = frontier_phi_37_32_ladder;
        }
        float _2564;
        if (_1932 > 0.0)
        {
            _2564 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2564 = frontier_phi_46_43_ladder;
        }
        float _2566 = isnan(_2359) ? _2091 : (isnan(_2091) ? _2359 : min(_2091, _2359));
        float _2567 = isnan(_2564) ? _2566 : (isnan(_2566) ? _2564 : min(_2566, _2564));
        float _2571 = (_2567 * _1926) + _1915;
        float _2572 = (_2567 * _1929) + _1919;
        float _2573 = (_2567 * _1932) + _1923;
        float _2574 = _2567 * 9.9999997473787516355514526367188e-05;
        float _2575 = (-1.0) - _2574;
        float _2577 = _2574 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2573 > _2577) || ((_2573 < _2575) || ((_2572 > _2577) || ((_2572 < _2575) || ((_2571 < _2575) || (_2571 > _2577))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2772 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2573, cbModelParam._m0[17u].z, fma(_2572, cbModelParam._m0[17u].y, _2571 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2573, cbModelParam._m0[18u].z, fma(_2572, cbModelParam._m0[18u].y, _2571 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2573, cbModelParam._m0[19u].z, fma(_2572, cbModelParam._m0[19u].y, _2571 * cbModelParam._m0[19u].x))), _1861);
            frontier_phi_22_46_ladder = _2772.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2772.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2772.x * cbModelParam._m0[1u].z;
        }
        _1951 = frontier_phi_22_46_ladder_2;
        _1953 = frontier_phi_22_46_ladder_1;
        _1955 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_963, _964, _965), _1861);
        _1951 = _1935.x * cbModelParam._m0[1u].z;
        _1953 = _1935.y * cbModelParam._m0[1u].z;
        _1955 = _1935.z * cbModelParam._m0[1u].z;
    }
    float _1967 = ((((1.0 - _984) * ((_971 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_984 * _971)) * _955;
    float _1968 = _1967 * ((cbModelParam._m0[1u].w * (_1951 - _1852)) + _1852);
    float _1969 = _1967 * ((cbModelParam._m0[1u].w * (_1953 - _1854)) + _1854);
    float _1970 = _1967 * ((cbModelParam._m0[1u].w * (_1955 - _1856)) + _1856);
    float _1973 = fma(_1970, cbSceneParam._m0[89u].z, fma(_1969, cbSceneParam._m0[89u].y, _1968 * cbSceneParam._m0[89u].x));
    float _1976 = fma(_1970, cbSceneParam._m0[90u].z, fma(_1969, cbSceneParam._m0[90u].y, _1968 * cbSceneParam._m0[90u].x));
    float _1979 = fma(_1970, cbSceneParam._m0[91u].z, fma(_1969, cbSceneParam._m0[91u].y, _1968 * cbSceneParam._m0[91u].x));
    vec4 _1987 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_892, _893));
    float _1989 = _1987.w;
    float _2001 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1989);
    float _2002 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1989);
    float _2003 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1989);
    uvec4 _2007 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2009 = _2007.x * 14u;
    uint _2010 = _2009 + 13u;
    float _2017 = _955 + (-1.0);
    float _2022 = (cbLight._m0[_2010].x * _2017) + 1.0;
    float _2023 = (cbLight._m0[_2010].y * _2017) + 1.0;
    float _2024 = (cbLight._m0[_2010].z * _2017) + 1.0;
    float _2025 = (cbLight._m0[_2010].w * _2017) + 1.0;
    uint _2026 = _2009 + 5u;
    float _2032 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2036 = _2009 + 4u;
    float _2045 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2049 = _2009 | 1u;
    float _2060 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_805, _806, _807));
    float _2063 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_805, _806, _807));
    float _4232 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _4243 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2068 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _2070 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _2077 = ((cbLight._m0[_2026].x * _2032) * _2070) + (((cbLight._m0[_2036].x * _2001) * _2045) * _2068);
    float _2078 = ((_2032 * cbLight._m0[_2026].y) * _2070) + (((cbLight._m0[_2036].y * _2002) * _2045) * _2068);
    float _2079 = ((_2032 * cbLight._m0[_2026].z) * _2070) + (((cbLight._m0[_2036].z * _2003) * _2045) * _2068);
    uvec4 _2083 = floatBitsToUint(cbLight._m0[_2009 + 12u]);
    bool _2085 = _2083.x == 0u;
    float _2096;
    float _2098;
    float _2100;
    if (_2085)
    {
        _2096 = _2077;
        _2098 = _2078;
        _2100 = _2079;
    }
    else
    {
        uint _2104 = _2009 + 6u;
        float _2120 = (dot(vec3(cbLight._m0[_2009 + 2u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2121 = _2120 * _2120;
        float _4254 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2122 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2123 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2096 = (((cbLight._m0[_2104].x * 0.3183098733425140380859375) * _2122) * _2123) + _2077;
        _2098 = (((cbLight._m0[_2104].y * 0.3183098733425140380859375) * _2122) * _2123) + _2078;
        _2100 = (((cbLight._m0[_2104].z * 0.3183098733425140380859375) * _2122) * _2123) + _2079;
    }
    bool _2103 = _2083.y == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2103)
    {
        _2141 = _2096;
        _2143 = _2098;
        _2145 = _2100;
    }
    else
    {
        uint _2303 = _2009 + 7u;
        float _2319 = (dot(vec3(cbLight._m0[_2009 + 3u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2320 = _2319 * _2319;
        float _4270 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2321 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2322 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2141 = (((cbLight._m0[_2303].x * 0.3183098733425140380859375) * _2321) * _2322) + _2096;
        _2143 = (((cbLight._m0[_2303].y * 0.3183098733425140380859375) * _2321) * _2322) + _2098;
        _2145 = (((cbLight._m0[_2303].z * 0.3183098733425140380859375) * _2321) * _2322) + _2100;
    }
    uint _2148 = _2009 + 8u;
    float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _808) * 0.949999988079071044921875);
    float _2162 = _2161 * _2161;
    float _2163 = cbLight._m0[_2009].x + _884;
    float _2164 = cbLight._m0[_2009].y + _885;
    float _2165 = cbLight._m0[_2009].z + _886;
    float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
    float _2170 = _2169 * _2163;
    float _2171 = _2169 * _2164;
    float _2172 = _2169 * _2165;
    float _2173 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2009].xyz));
    float _4286 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _2177 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2178 = dot(vec3(_805, _806, _807), vec3(_2170, _2171, _2172));
    float _4308 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2170, _2171, _2172));
    float _4319 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2162 * _2162;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2201 = (exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2202 = 1.0 - _2162;
    float _2213 = (0.5 / (((_2177 * ((_2176 * _2202) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2202) + _2162) * _2176))) * _2176;
    float _4330 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2215 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    uint _2229 = _2009 + 9u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _808) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_2049].x + _884;
    float _2243 = cbLight._m0[_2049].y + _885;
    float _2244 = cbLight._m0[_2049].z + _886;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2049].xyz));
    float _4341 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2256 = dot(vec3(_805, _806, _807), vec3(_2249, _2250, _2251));
    float _4352 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2249, _2250, _2251));
    float _4363 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2241 * _2241;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2277 = (exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2278 = 1.0 - _2241;
    float _2288 = (0.5 / (((_2177 * ((_2255 * _2278) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2278) + _2241) * _2255))) * _2255;
    float _4374 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2290 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    float _2300 = (((_2277 * cbLight._m0[_2229].x) * _2290) * _2032) + ((((cbLight._m0[_2148].x * _2001) * _2201) * _2215) * _2045);
    float _2301 = (((_2277 * cbLight._m0[_2229].y) * _2290) * _2032) + ((((cbLight._m0[_2148].y * _2002) * _2201) * _2215) * _2045);
    float _2302 = (((_2277 * cbLight._m0[_2229].z) * _2290) * _2032) + ((((cbLight._m0[_2148].z * _2003) * _2201) * _2215) * _2045);
    float _2364;
    float _2366;
    float _2368;
    if (_2085)
    {
        _2364 = _2300;
        _2366 = _2301;
        _2368 = _2302;
    }
    else
    {
        uint _2370 = _2009 + 2u;
        uint _2374 = _2009 + 10u;
        float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _808) * 0.949999988079071044921875);
        float _2389 = _2388 * _2388;
        float _2390 = cbLight._m0[_2370].x + _884;
        float _2391 = cbLight._m0[_2370].y + _885;
        float _2392 = cbLight._m0[_2370].z + _886;
        float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
        float _2397 = _2396 * _2390;
        float _2398 = _2396 * _2391;
        float _2399 = _2396 * _2392;
        float _2400 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2370].xyz));
        float _4385 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2404 = dot(vec3(_805, _806, _807), vec3(_2397, _2398, _2399));
        float _4396 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2408 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2397, _2398, _2399));
        float _4407 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2412 = _2389 * _2389;
        float _2416 = ((_2407 * _2407) * (_2412 + (-1.0))) + 1.0;
        float _2425 = (exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2426 = 1.0 - _2389;
        float _2436 = (0.5 / (((_2177 * ((_2403 * _2426) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2426) + _2389) * _2403))) * _2403;
        float _4418 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2438 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2412 / ((_2416 * _2416) * 3.141590118408203125));
        float _2439 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2364 = (((_2425 * cbLight._m0[_2374].x) * _2438) * _2439) + _2300;
        _2366 = (((_2425 * cbLight._m0[_2374].y) * _2438) * _2439) + _2301;
        _2368 = (((_2425 * cbLight._m0[_2374].z) * _2438) * _2439) + _2302;
    }
    float _2474;
    float _2476;
    float _2478;
    if (_2103)
    {
        _2474 = _2364;
        _2476 = _2366;
        _2478 = _2368;
    }
    else
    {
        uint _2485 = _2009 + 3u;
        uint _2489 = _2009 + 11u;
        float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _808) * 0.949999988079071044921875);
        float _2504 = _2503 * _2503;
        float _2505 = cbLight._m0[_2485].x + _884;
        float _2506 = cbLight._m0[_2485].y + _885;
        float _2507 = cbLight._m0[_2485].z + _886;
        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
        float _2512 = _2511 * _2505;
        float _2513 = _2511 * _2506;
        float _2514 = _2511 * _2507;
        float _2515 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2485].xyz));
        float _4434 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2519 = dot(vec3(_805, _806, _807), vec3(_2512, _2513, _2514));
        float _4445 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2523 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2512, _2513, _2514));
        float _4456 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2527 = _2504 * _2504;
        float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
        float _2540 = (exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2541 = 1.0 - _2504;
        float _2551 = (0.5 / (((_2177 * ((_2518 * _2541) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2541) + _2504) * _2518))) * _2518;
        float _4467 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2553 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
        float _2554 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2474 = (((_2540 * cbLight._m0[_2489].x) * _2553) * _2554) + _2364;
        _2476 = (((_2540 * cbLight._m0[_2489].y) * _2553) * _2554) + _2366;
        _2478 = (((_2540 * cbLight._m0[_2489].z) * _2553) * _2554) + _2368;
    }
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    if (_2007.y == 0u)
    {
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2629;
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2629;
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2629;
        uvec4 _2644 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2645 = _2644.x;
        uint _2656 = uint((float(_2644.y) * floor(float(uint(cbSceneParam._m0[85u].y * _893) / _2645))) + floor(float(uint(cbSceneParam._m0[85u].x * _892) / _2645)));
        float _2666 = (log2(_2632 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2667 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        uint _2670 = uint(isnan(14.0) ? _2667 : (isnan(_2667) ? 14.0 : min(_2667, 14.0)));
        uvec4 _2675 = texelFetch(g_lightClusterGridBuffer, int(((_2670 << 2u) + (_2656 << 6u)) >> 2u));
        uint _2676 = _2675.x;
        uint _2677 = _2644.z;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        if (((((1u << ((_2677 >> 4u) & 15u)) + 4294967295u) & _2676) == 0u) || ((_2677 & 240u) == 0u))
        {
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
        }
        else
        {
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            uint _2928 = 0u;
            uint _2937;
            bool _2938;
            for (;;)
            {
                _2937 = texelFetch(g_lightClassification, int((((_2670 << 5u) + (_2656 << 9u)) + (_2928 << 2u)) >> 2u)).x;
                _2938 = _2937 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2938)
                {
                    frontier_phi_61_pred = _2922;
                    frontier_phi_61_pred_1 = _2927;
                    frontier_phi_61_pred_2 = _2926;
                    frontier_phi_61_pred_3 = _2925;
                    frontier_phi_61_pred_4 = _2924;
                    frontier_phi_61_pred_5 = _2923;
                }
                else
                {
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    uint _3052;
                    _3046 = _2922;
                    _3047 = _2923;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2937;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    for (;;)
                    {
                        uint _3056 = uint(findLSB(_3052)) + (_2928 << 5u);
                        uint _3053 = (_3052 + 4294967295u) & _3052;
                        uint _3058 = _3056 * 48u;
                        vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3078 = (_3056 * 48u) + 4u;
                        vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3097 = (_3056 * 48u) + 8u;
                        vec3 _3108 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x));
                        float _3112 = _3072.x - _2630;
                        float _3113 = _3072.y - _2631;
                        float _3114 = _3072.z - _2632;
                        float _3115 = dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114));
                        float _3118 = inversesqrt(_3115);
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3122 = dot(vec3(_911, _914, _917), vec3(_3119, _3120, _3121));
                        float _3127 = 1.0 - (_3115 * _3072.w);
                        float _4493 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3129 = sqrt(_3115) * _3091.w;
                        float _3132 = 1.39999997615814208984375 / (_3129 + 1.39999997615814208984375);
                        float _3133 = _3132 * _3132;
                        float _3136 = ((1.0 - _3133) * _3122) + _3133;
                        float _3139 = _3129 * _3129;
                        float _3143 = ((isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))) * _3128) / ((_3139 * 0.699999988079071044921875) + 1.0);
                        float _3147 = (-0.0) - _2630;
                        float _3148 = (-0.0) - _2631;
                        float _3149 = (-0.0) - _2632;
                        float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                        float _3154 = _3153 * _3147;
                        float _3155 = _3153 * _3148;
                        float _3156 = _3153 * _3149;
                        float _3164 = exp2(log2(1.0 / ((_3139 * 3.5) + 5.0)) * 0.25);
                        float _3165 = 1.0 - _971;
                        float _3172 = sqrt(1.0 - ((1.0 - (_3165 * _3165)) * (1.0 - (_3164 * _3164))));
                        float _3173 = _3172 * _3172;
                        float _3174 = _3173 * _3173;
                        float _3175 = _3154 + _3119;
                        float _3176 = _3155 + _3120;
                        float _3177 = _3156 + _3121;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3185 = dot(vec3(_911, _914, _917), vec3(_3154, _3155, _3156));
                        float _4509 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3188 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3189 = dot(vec3(_911, _914, _917), vec3(_3181 * _3175, _3181 * _3176, _3181 * _3177));
                        float _4520 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3196 = ((_3192 * _3192) * (_3174 + (-1.0))) + 1.0;
                        float _3197 = _3132 * _3173;
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3122) + _3198;
                        float _4531 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3202 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3203 = 1.0 - _3173;
                        float _3213 = (0.5 / (((_3202 * ((_3188 * _3203) + _3173)) + 9.9999999392252902907785028219223e-09) + (((_3202 * _3203) + _3173) * _3188))) * _3202;
                        float _4542 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3224 = (((_3174 * 3.1415927410125732421875) * (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) / ((_3196 * _3196) * ((_3139 * 2.1991131305694580078125) + 3.141590118408203125))) * _3128;
                        _2981 = (_3143 * _3091.x) + _3049;
                        _2982 = (_3143 * _3091.y) + _3050;
                        _2983 = (_3143 * _3091.z) + _3051;
                        _2978 = (_3224 * _3108.x) + _3046;
                        _2979 = (_3224 * _3108.y) + _3047;
                        _2980 = (_3224 * _3108.z) + _3048;
                        if (_3053 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3046 = _2978;
                            _3047 = _2979;
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _3053;
                        }
                    }
                    frontier_phi_61_pred = _2978;
                    frontier_phi_61_pred_1 = _2983;
                    frontier_phi_61_pred_2 = _2982;
                    frontier_phi_61_pred_3 = _2981;
                    frontier_phi_61_pred_4 = _2980;
                    frontier_phi_61_pred_5 = _2979;
                }
                _2778 = frontier_phi_61_pred;
                _2788 = frontier_phi_61_pred_1;
                _2786 = frontier_phi_61_pred_2;
                _2784 = frontier_phi_61_pred_3;
                _2782 = frontier_phi_61_pred_4;
                _2780 = frontier_phi_61_pred_5;
                uint _2929 = _2928 + 1u;
                if (_2929 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2922 = _2778;
                    _2923 = _2780;
                    _2924 = _2782;
                    _2925 = _2784;
                    _2926 = _2786;
                    _2927 = _2788;
                    _2928 = _2929;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
        }
        uvec4 _2791 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2792 = _2791.z;
        uint _2794 = (_2792 >> 8u) & 15u;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        if (((4294967295u << _2794) & _2676) == 0u)
        {
            _2890 = _2777;
            _2892 = _2779;
            _2894 = _2781;
            _2896 = _2783;
            _2898 = _2785;
            _2900 = _2787;
        }
        else
        {
            float _2915 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
            float _2916 = _2915 * _2630;
            float _2917 = _2915 * _2631;
            float _2918 = _2915 * _2632;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2794 < ((_2792 >> 12u) & 15u))
            {
                float _2891;
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _3029 = _2777;
                float _3030 = _2779;
                float _3031 = _2781;
                float _3032 = _2783;
                float _3033 = _2785;
                float _3034 = _2787;
                uint _3035 = _2794;
                uint _3044;
                bool _3045;
                for (;;)
                {
                    _3044 = texelFetch(g_lightClassification, int((((_2670 << 5u) + (_2656 << 9u)) + (_3035 << 2u)) >> 2u)).x;
                    _3045 = _3044 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3045)
                    {
                        frontier_phi_67_pred = _3032;
                        frontier_phi_67_pred_1 = _3033;
                        frontier_phi_67_pred_2 = _3034;
                        frontier_phi_67_pred_3 = _3031;
                        frontier_phi_67_pred_4 = _3030;
                        frontier_phi_67_pred_5 = _3029;
                    }
                    else
                    {
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3242 = _3029;
                        float _3243 = _3030;
                        float _3244 = _3031;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        float _3247 = _3034;
                        uint _3248 = _3044;
                        uint _3249;
                        vec4 _3274;
                        float _3275;
                        vec4 _3290;
                        vec3 _3302;
                        vec4 _3317;
                        vec4 _3332;
                        float _3378;
                        bool _3379;
                        for (;;)
                        {
                            uint _3259 = ((_3035 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3248));
                            _3249 = (_3248 + 4294967295u) & _3248;
                            uint _3261 = _3259 * 40u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3275 = _3274.w;
                            uint _3277 = (_3259 * 40u) + 4u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3292 = (_3259 * 40u) + 8u;
                            _3302 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x));
                            uint _3304 = (_3259 * 40u) + 16u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3319 = (_3259 * 40u) + 20u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3334 = (_3259 * 40u) + 24u;
                            vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3353 = (_3259 * 40u) + 28u;
                            vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            _3378 = fma(_2632, _3366.z, fma(_2631, _3366.y, _3366.x * _2630)) + _3366.w;
                            _3379 = !((fma(_2632, _3347.z, fma(_2631, _3347.y, _3347.x * _2630)) + _3347.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3379)
                            {
                                float _3406 = _3274.x - _2630;
                                float _3407 = _3274.y - _2631;
                                float _3408 = _3274.z - _2632;
                                float _3409 = dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408));
                                float _3412 = inversesqrt(_3409);
                                float _3413 = _3412 * _3406;
                                float _3414 = _3412 * _3407;
                                float _3415 = _3412 * _3408;
                                float _3419 = 1.0 - (_3409 / (_3275 * _3275));
                                float _4553 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3424 = sqrt(_3409) * _3290.w;
                                float _3426 = 1.39999997615814208984375 / (_3424 + 1.39999997615814208984375);
                                float _3427 = _3426 * _3426;
                                float _3430 = ((1.0 - _3427) * dot(vec3(_3413, _3414, _3415), vec3(_911, _914, _917))) + _3427;
                                float _3433 = _3424 * _3424;
                                float _3437 = (fma(_2632, _3317.z, fma(_2631, _3317.y, _3317.x * _2630)) + _3317.w) / _3378;
                                float _3438 = (fma(_2632, _3332.z, fma(_2631, _3332.y, _3332.x * _2630)) + _3332.w) / _3378;
                                float _3442 = 1.0 - dot(vec2(_3437, _3438), vec2(_3437, _3438));
                                float _4569 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3444 = _3443 * (((isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0))) * _3420) / ((_3433 * 0.699999988079071044921875) + 1.0));
                                float _3456 = exp2(log2(1.0 / ((_3433 * 3.5) + 5.0)) * 0.25);
                                float _3457 = 1.0 - _971;
                                float _3464 = sqrt(1.0 - ((1.0 - (_3457 * _3457)) * (1.0 - (_3456 * _3456))));
                                float _3465 = _3464 * _3464;
                                float _3466 = _3465 * _3465;
                                float _3467 = _3413 - _2916;
                                float _3468 = _3414 - _2917;
                                float _3469 = _3415 - _2918;
                                float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                                float _3477 = dot(vec3(_911, _914, _917), vec3((-0.0) - _2916, (-0.0) - _2917, (-0.0) - _2918));
                                float _4580 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3480 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3481 = dot(vec3(_911, _914, _917), vec3(_3473 * _3467, _3473 * _3468, _3473 * _3469));
                                float _4591 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3488 = ((_3484 * _3484) * (_3466 + (-1.0))) + 1.0;
                                float _3489 = _3426 * _3465;
                                float _3490 = _3489 * _3489;
                                float _3496 = ((1.0 - _3490) * dot(vec3(_911, _914, _917), vec3(_3413, _3414, _3415))) + _3490;
                                float _4602 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3497 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3498 = 1.0 - _3465;
                                float _3508 = (0.5 / (((_3497 * ((_3480 * _3498) + _3465)) + 9.9999999392252902907785028219223e-09) + (((_3497 * _3498) + _3465) * _3480))) * _3497;
                                float _4613 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3518 = (_3443 * _3420) * (((_3466 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3488 * _3488) * ((_3433 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3518 * _3302.x;
                                frontier_phi_73_pred_1 = _3518 * _3302.y;
                                frontier_phi_73_pred_2 = _3444 * _3290.z;
                                frontier_phi_73_pred_3 = _3444 * _3290.y;
                                frontier_phi_73_pred_4 = _3444 * _3290.x;
                                frontier_phi_73_pred_5 = _3518 * _3302.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3522 = frontier_phi_73_pred;
                            _3523 = frontier_phi_73_pred_1;
                            _3527 = frontier_phi_73_pred_2;
                            _3526 = frontier_phi_73_pred_3;
                            _3525 = frontier_phi_73_pred_4;
                            _3524 = frontier_phi_73_pred_5;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            _3234 = _3527 + _3247;
                            _3229 = _3522 + _3242;
                            _3230 = _3523 + _3243;
                            _3231 = _3524 + _3244;
                            if (_3249 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3249;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3232;
                        frontier_phi_67_pred_1 = _3233;
                        frontier_phi_67_pred_2 = _3234;
                        frontier_phi_67_pred_3 = _3231;
                        frontier_phi_67_pred_4 = _3230;
                        frontier_phi_67_pred_5 = _3229;
                    }
                    _2897 = frontier_phi_67_pred;
                    _2899 = frontier_phi_67_pred_1;
                    _2901 = frontier_phi_67_pred_2;
                    _2895 = frontier_phi_67_pred_3;
                    _2893 = frontier_phi_67_pred_4;
                    _2891 = frontier_phi_67_pred_5;
                    uint _3036 = _3035 + 1u;
                    if (_3036 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3029 = _2891;
                        _3030 = _2893;
                        _3031 = _2895;
                        _3032 = _2897;
                        _3033 = _2899;
                        _3034 = _2901;
                        _3035 = _3036;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2899;
                frontier_phi_55_56_ladder_1 = _2901;
                frontier_phi_55_56_ladder_2 = _2897;
                frontier_phi_55_56_ladder_3 = _2895;
                frontier_phi_55_56_ladder_4 = _2893;
                frontier_phi_55_56_ladder_5 = _2891;
            }
            else
            {
                frontier_phi_55_56_ladder = _2785;
                frontier_phi_55_56_ladder_1 = _2787;
                frontier_phi_55_56_ladder_2 = _2783;
                frontier_phi_55_56_ladder_3 = _2781;
                frontier_phi_55_56_ladder_4 = _2779;
                frontier_phi_55_56_ladder_5 = _2777;
            }
            _2890 = frontier_phi_55_56_ladder_5;
            _2892 = frontier_phi_55_56_ladder_4;
            _2894 = frontier_phi_55_56_ladder_3;
            _2896 = frontier_phi_55_56_ladder_2;
            _2898 = frontier_phi_55_56_ladder;
            _2900 = frontier_phi_55_56_ladder_1;
        }
        float _2905 = isnan(1.0) ? _955 : (isnan(_955) ? 1.0 : min(_955, 1.0));
        _2689 = (_2905 * _2896) + _2141;
        _2691 = (_2905 * _2898) + _2143;
        _2693 = (_2905 * _2900) + _2145;
        _2695 = ((_2890 * 0.039999999105930328369140625) * _2905) + _2474;
        _2697 = ((_2892 * 0.039999999105930328369140625) * _2905) + _2476;
        _2699 = ((_2894 * 0.039999999105930328369140625) * _2905) + _2478;
    }
    else
    {
        _2689 = _2141;
        _2691 = _2143;
        _2693 = _2145;
        _2695 = _2474;
        _2697 = _2476;
        _2699 = _2478;
    }
    float _4629 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4640 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4651 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    uint _2719 = _277 + 6u;
    float _2727 = _892 / cbSceneParam._m0[86u].x;
    float _2728 = _893 / cbSceneParam._m0[86u].y;
    vec4 _2742 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2727, _2728, (log2((isnan(cbSceneParam._m0[77u].w) ? _826 : (isnan(_826) ? cbSceneParam._m0[77u].w : min(_826, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2744 = _2742.x;
    float _2745 = _2742.y;
    float _2746 = _2742.z;
    float _2747 = _2742.w;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_826 > cbSceneParam._m0[78u].w)
    {
        float _2802 = isnan(_826) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _826 : min(cbSceneParam._m0[80u].w, _826));
        float _2803 = _2802 / _826;
        float _2814 = _2803 * _877;
        float _2815 = _878 * _2803;
        float _2816 = (-0.0) - _2815;
        float _2818 = _2803 * _879;
        float _2820 = (cbSceneParam._m0[77u].w * _2816) / _2802;
        float _2821 = _2820 + cbSceneParam._m0[79u].w;
        float _2822 = cbSceneParam._m0[79u].w - _2815;
        float _2828 = sqrt(((_2814 * _2814) + (_2815 * _2815)) + (_2818 * _2818));
        float _2831 = (1.0 - (cbSceneParam._m0[77u].w / _2802)) * _2828;
        float _2836 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2838 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2991;
        if (abs((_2816 - _2820) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2991 = ((((_2821 > 0.0) ? exp2(_2836 * _2821) : (2.0 - exp2(_2838 * _2821))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2831;
        }
        else
        {
            float _2951 = 1.0 / cbSceneParam._m0[80u].x;
            float _2952 = isnan(_2822) ? _2821 : (isnan(_2821) ? _2822 : max(_2821, _2822));
            float _2953 = isnan(_2822) ? _2821 : (isnan(_2821) ? _2822 : min(_2821, _2822));
            float _2962 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : min(_2952, 0.0));
            float _2963 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : min(_2953, 0.0));
            _2991 = ((abs(_2828 / _2816) * cbSceneParam._m0[80u].y) * ((((_2962 - _2963) * 2.0) - ((exp2(_2836 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0)))) - exp2(_2836 * (isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0))))) * _2951)) - ((exp2(_2838 * _2962) - exp2(_2838 * _2963)) * _2951))) + (_2831 * cbSceneParam._m0[80u].z);
        }
        vec4 _2993 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2727, _2728, 1.0), 0.0);
        float _3002 = exp2((_2991 * (-1.44269502162933349609375)) * (1.0 - _2993.w));
        float _3003 = log2(_3002);
        float _3019 = log2(_2747);
        _2840 = (exp2(_3019 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].x)) * _2993.x) / cbSceneParam._m0[78u].x)) + _2744;
        _2842 = (exp2(_3019 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].y)) * _2993.y) / cbSceneParam._m0[78u].y)) + _2745;
        _2844 = (exp2(_3019 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].z)) * _2993.z) / cbSceneParam._m0[78u].z)) + _2746;
        _2846 = _3002 * _2747;
    }
    else
    {
        _2840 = _2744;
        _2842 = _2745;
        _2844 = _2746;
        _2846 = _2747;
    }
    float _2858 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2859 = _2858 == 3.0;
    float _2860 = log2(_2846);
    float _2867 = exp2(_2860 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2689 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _955))) + ((_2695 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _2868 = exp2(_2860 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2691 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _955))) + ((_2697 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _2869 = exp2(_2860 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2693 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _955))) + ((_2699 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _2878 = (_2858 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2878 * (_2859 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2840)));
    SV_Target.y = _2878 * (_2859 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2842)));
    SV_Target.z = _2878 * (_2859 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2844)));
    SV_Target.w = cbInstanceData._m0[_2719].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2719].w;
}


