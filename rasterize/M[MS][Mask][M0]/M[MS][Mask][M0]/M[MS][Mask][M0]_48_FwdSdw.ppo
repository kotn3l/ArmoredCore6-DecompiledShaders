#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1378;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3964 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3975 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3986 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].z) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3997 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _452 = (_445 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _453 = (_445 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _454 = (_445 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _458 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _452;
    float _461 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _453;
    float _464 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _454;
    float _471 = ((_452 - _458) * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) + _458;
    float _472 = ((_453 - _461) * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) + _461;
    float _473 = ((_454 - _464) * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) + _464;
    vec4 _492 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _298) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _299) + cbTextureTilingScale._m0[14u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _556 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _558 = _556.x;
    float _559 = _556.y;
    float _560 = _556.z;
    float _569 = ((_539.z - _560) * _445) + _560;
    float _572 = ((((_539.x - _558) * _445) + _558) * 2.0) + (-1.0);
    float _573 = ((((_539.y - _559) * _445) + _559) * 2.0) + (-1.0);
    float _574 = dot(vec2(_572, _573), vec2(_572, _573));
    float _4008 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _579 = sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _611 = (_572 + ((((_512.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_599.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _612 = (_573 + ((((_512.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_599.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _615 = fma(_579, _248, fma(_612, _255, _611 * _241));
    float _618 = fma(_579, _249, fma(_612, _256, _611 * _242));
    float _621 = fma(_579, _250, fma(_612, _257, _611 * _243));
    float _625 = inversesqrt(dot(vec3(_615, _618, _621), vec3(_615, _618, _621)));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _654 = _652.x;
    float _655 = 1.0 - _654;
    float _661 = (cbMtdParam._m0[19u].x + dot(vec4(_625 * _615, _625 * _618, _625 * _621, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_654 - _655) * cbMtdParam._m0[24u].w) + _655) * cbMtdParam._m0[21u].z);
    float _4019 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _662 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _664 = (-0.0) - cbMtdParam._m0[24u].x;
    float _666 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _666 : (isnan(_666) ? 1.0 : min(_666, 1.0));
    float _674 = _662 - ((_662 * TEXCOORD_8.x) * _667);
    float _675 = _662 - ((_662 * TEXCOORD_8.y) * _667);
    float _676 = _662 - ((_662 * TEXCOORD_8.z) * _667);
    float _683 = (_674 * ((_492.x * cbMtdParam._m0[18u].x) - _471)) + _471;
    float _684 = (_675 * ((_492.y * cbMtdParam._m0[18u].y) - _472)) + _472;
    float _685 = (_676 * ((_492.z * cbMtdParam._m0[18u].z) - _473)) + _473;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _699 = _697.x;
    float _700 = 1.0 - _699;
    float _726 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_699 - _700) * cbMtdParam._m0[24u].y) + _700) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4040 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _727 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _735 = ((((cbMtdParam._m0[10u].x - _683) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _727) + _683;
    float _736 = ((((cbMtdParam._m0[10u].y - _684) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _727) + _684;
    float _737 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _685)) * _727) + _685;
    float _742 = (((_512.z - _569) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _569;
    float _746 = ((_599.z - _742) * cbMtdParam._m0[19u].w) + _742;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _767 = (_760.x * 2.0) + (-1.0);
    float _768 = (_760.y * 2.0) + (-1.0);
    float _769 = dot(vec2(_767, _768), vec2(_767, _768));
    float _4051 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _777 = ((_760.z - _746) * _674) + _746;
    float _780 = ((cbMtdParam._m0[23u].y - _777) * _727) + _777;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _805 = (_799.x * 2.0) + (-1.0);
    float _806 = (_799.y * 2.0) + (-1.0);
    float _807 = dot(vec2(_805, _806), vec2(_805, _806));
    float _4062 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _822 = ((sqrt(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) - _579) * _676) + _579;
    float _825 = (((_767 - _611) * _674) + _611) + (cbMtdParam._m0[21u].x * _611);
    float _826 = (((_768 - _612) * _675) + _612) + (cbMtdParam._m0[21u].x * _612);
    float _837 = (((_805 - _825) + (_825 * cbMtdParam._m0[22u].z)) * _727) + _825;
    float _838 = (((_806 - _826) + (_826 * cbMtdParam._m0[22u].z)) * _727) + _826;
    float _839 = (_727 * (sqrt(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) - _822)) + _822;
    float _843 = cbMtdParam._m0[22u].x + _599.w;
    float _846 = fma(_839, _248, fma(_838, _255, _837 * _241));
    float _849 = fma(_839, _249, fma(_838, _256, _837 * _242));
    float _852 = fma(_839, _250, fma(_838, _257, _837 * _243));
    float _856 = inversesqrt(dot(vec3(_846, _849, _852), vec3(_846, _849, _852)));
    float _857 = _856 * _846;
    float _858 = _856 * _849;
    float _859 = _856 * _852;
    float _4073 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _860 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4095 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4106 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4117 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _878 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _929 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _919);
    float _930 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _919);
    float _931 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _919);
    float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
    float _936 = _929 * _935;
    float _937 = _930 * _935;
    float _938 = _931 * _935;
    float _944 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _945 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _963 = fma(_859, cbSceneParam._m0[5u].z, fma(_858, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _857));
    float _966 = fma(_859, cbSceneParam._m0[6u].z, fma(_858, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _857));
    float _969 = fma(_859, cbSceneParam._m0[7u].z, fma(_858, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _857));
    uint _983 = (_279 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _989 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * cbInstanceData._m0[_983].x;
    float _990 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * cbInstanceData._m0[_983].y;
    float _991 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * cbInstanceData._m0[_983].z;
    float _4128 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    vec4 _1003 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _944, cbSceneParam._m0[86u].y * _945));
    float _1007 = ((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * TEXCOORD_5.w) * _1003.x;
    float _1008 = dot(vec3(_857, _858, _859), vec3(_936, _937, _938));
    float _1011 = _1008 * 2.0;
    float _1015 = (_1011 * _857) - _936;
    float _1016 = (_1011 * _858) - _937;
    float _1017 = (_1011 * _859) - _938;
    float _1021 = abs(dot(vec3(_936, _937, _938), vec3(_857, _858, _859)));
    float _4161 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1023 = sqrt(_860);
    float _1036 = exp2((_1023 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1023 * 3.0));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1377;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1076, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068));
        float _1106 = fma(_1076, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068));
        float _1110 = fma(_1076, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068));
        float _1135 = _1068 + _857;
        float _1136 = _1072 + _858;
        float _1137 = _1076 + _859;
        float _1147 = fma(_1137, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135)) - _1102;
        float _1148 = fma(_1137, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135)) - _1106;
        float _1149 = fma(_1137, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135)) - _1110;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1205 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1171.x + (-0.5));
        float _1207 = _1205 * (_1171.y + (-0.5));
        float _1208 = _1205 * (_1171.z + (-0.5));
        float _1215 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1178.x + (-0.5));
        float _1217 = _1215 * (_1178.y + (-0.5));
        float _1218 = _1215 * (_1178.z + (-0.5));
        float _1225 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1185.x + (-0.5));
        float _1227 = _1225 * (_1185.y + (-0.5));
        float _1228 = _1225 * (_1185.z + (-0.5));
        float _1235 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1192.x + (-0.5));
        float _1237 = _1235 * (_1192.y + (-0.5));
        float _1238 = _1235 * (_1192.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1259 = (dot(vec3(_857, _858, _859), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1269 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4209 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1271 + 1.0))) + _1276) * _1239;
        float _1286 = _1207 * 0.5;
        float _1287 = _1217 * 0.5;
        float _1288 = _1227 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_857, _858, _859), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4242 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1313 + 1.0))) + _1318) * _1240;
        float _1328 = _1208 * 0.5;
        float _1329 = _1218 * 0.5;
        float _1330 = _1228 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_857, _858, _859), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4275 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1355 + 1.0))) + _1360) * _1241;
        _1377 = _1208;
        _1379 = _1207;
        _1380 = _1206;
        _1381 = _1218;
        _1382 = _1217;
        _1383 = _1216;
        _1384 = _1228;
        _1385 = _1227;
        _1386 = _1226;
        _1387 = _1241;
        _1388 = _1240;
        _1389 = _1239;
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1378;
        _1379 = _1378;
        _1380 = _1378;
        _1381 = _1378;
        _1382 = _1378;
        _1383 = _1378;
        _1384 = _1378;
        _1385 = _1378;
        _1386 = _1378;
        _1387 = _1378;
        _1388 = _1378;
        _1389 = _1378;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1417 = fma(_1076, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068));
        float _1421 = fma(_1076, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068));
        float _1425 = fma(_1076, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068));
        float _1448 = _1068 + _857;
        float _1449 = _1072 + _858;
        float _1450 = _1076 + _859;
        float _1460 = fma(_1450, cbModelParam._m0[30u].z, fma(_1449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1448)) - _1417;
        float _1461 = fma(_1450, cbModelParam._m0[31u].z, fma(_1449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1448)) - _1421;
        float _1462 = fma(_1450, cbModelParam._m0[32u].z, fma(_1449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1448)) - _1425;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1479 = ((_1466 * _1460) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1417 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1461) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1421 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1466 * _1462) / cbModelParam._m0[35u].z) + ((((((_1425 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1516 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1483.x + (-0.5));
        float _1518 = _1516 * (_1483.y + (-0.5));
        float _1519 = _1516 * (_1483.z + (-0.5));
        float _1526 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1490.x + (-0.5));
        float _1528 = _1526 * (_1490.y + (-0.5));
        float _1529 = _1526 * (_1490.z + (-0.5));
        float _1536 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1497.x + (-0.5));
        float _1538 = _1536 * (_1497.y + (-0.5));
        float _1539 = _1536 * (_1497.z + (-0.5));
        float _1546 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1504.x + (-0.5));
        float _1548 = _1546 * (_1504.y + (-0.5));
        float _1549 = _1546 * (_1504.z + (-0.5));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = _1517 * 0.5;
        float _1554 = _1527 * 0.5;
        float _1555 = _1537 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_857, _858, _859), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4338 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1580 + 1.0))) + _1585) * _1550;
        float _1595 = _1518 * 0.5;
        float _1596 = _1528 * 0.5;
        float _1597 = _1538 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_857, _858, _859), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4371 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1622 + 1.0))) + _1627) * _1551;
        float _1637 = _1519 * 0.5;
        float _1638 = _1529 * 0.5;
        float _1639 = _1539 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_857, _858, _859), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4382 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4393 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4404 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_1664 + 1.0))) + _1669) * _1552;
        _1686 = _1519;
        _1687 = _1518;
        _1688 = _1517;
        _1689 = _1529;
        _1690 = _1528;
        _1691 = _1527;
        _1692 = _1539;
        _1693 = _1538;
        _1694 = _1537;
        _1695 = _1552;
        _1696 = _1551;
        _1697 = _1550;
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
    }
    else
    {
        _1686 = _1378;
        _1687 = _1378;
        _1688 = _1378;
        _1689 = _1378;
        _1690 = _1378;
        _1691 = _1378;
        _1692 = _1378;
        _1693 = _1378;
        _1694 = _1378;
        _1695 = _1378;
        _1696 = _1378;
        _1697 = _1378;
        _1698 = 0.0;
        _1699 = 0.0;
        _1700 = 0.0;
    }
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1390)) + _1390;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1391)) + _1391;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1392)) + _1392;
    float _1733 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1710));
    float _1754 = _1015 * 0.5;
    float _1755 = _1016 * 0.5;
    float _1756 = _1017 * 0.5;
    float _1757 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1760 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1763 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1797;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1770 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1377, _1381, _1384, _1387));
        float _1774 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1778 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1785 = dot(vec4(cbModelParam._m0[39u]), vec4(_1754, _1755, _1756, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1808;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1799 = dot(vec4(cbModelParam._m0[40u]), vec4(_1754, _1755, _1756, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1812 = (_1808 * cbModelParam._m0[1u].x) + (_1797 * (1.0 - cbModelParam._m0[1u].x));
    float _1822 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _860);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1822 : min(cbModelParam._m0[25u].z, _1822));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1870 = fma(_1076, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068)) + cbModelParam._m0[13u].w;
        float _1874 = fma(_1076, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068)) + cbModelParam._m0[14u].w;
        float _1878 = fma(_1076, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068)) + cbModelParam._m0[15u].w;
        float _1881 = fma(_1017, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015));
        float _1884 = fma(_1017, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015));
        float _1887 = fma(_1017, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015));
        float _1915;
        if (_1881 > 0.0)
        {
            _1915 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1915 = frontier_phi_14_12_ladder;
        }
        float _2084;
        if (_1884 > 0.0)
        {
            _2084 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2084 = frontier_phi_23_19_ladder;
        }
        float _2379;
        if (_1887 > 0.0)
        {
            _2379 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2379 = frontier_phi_35_30_ladder;
        }
        float _2381 = isnan(_2084) ? _1915 : (isnan(_1915) ? _2084 : min(_1915, _2084));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1881) + _1870;
        float _2387 = (_2382 * _1884) + _1874;
        float _2388 = (_2382 * _1887) + _1878;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2389;
        float _2393 = _2389 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 > _2393) || ((_2387 < _2391) || ((_2386 < _2391) || (_2386 > _2393))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1823);
            frontier_phi_13_35_ladder = _2533.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2533.x * cbModelParam._m0[1u].y;
        }
        _1903 = frontier_phi_13_35_ladder_2;
        _1905 = frontier_phi_13_35_ladder_1;
        _1907 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1015, _1016, _1017), _1823);
        _1903 = _1891.x * cbModelParam._m0[1u].y;
        _1905 = _1891.y * cbModelParam._m0[1u].y;
        _1907 = _1891.z * cbModelParam._m0[1u].y;
    }
    float _1911 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _860);
    float _1912 = isnan(_1911) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1911 : min(cbModelParam._m0[25u].w, _1911));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1965 = fma(_1076, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068)) + cbModelParam._m0[21u].w;
        float _1969 = fma(_1076, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068)) + cbModelParam._m0[22u].w;
        float _1973 = fma(_1076, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068)) + cbModelParam._m0[23u].w;
        float _1976 = fma(_1017, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015));
        float _1979 = fma(_1017, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015));
        float _1982 = fma(_1017, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015));
        float _2089;
        if (_1976 > 0.0)
        {
            _2089 = abs((1.0 - _1965) / _1976);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1965 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2089 = frontier_phi_25_21_ladder;
        }
        float _2406;
        if (_1979 > 0.0)
        {
            _2406 = abs((1.0 - _1969) / _1979);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1969 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2406 = frontier_phi_37_32_ladder;
        }
        float _2733;
        if (_1982 > 0.0)
        {
            _2733 = abs((1.0 - _1973) / _1982);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1973 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2733 = frontier_phi_47_44_ladder;
        }
        float _2735 = isnan(_2406) ? _2089 : (isnan(_2089) ? _2406 : min(_2089, _2406));
        float _2736 = isnan(_2733) ? _2735 : (isnan(_2735) ? _2733 : min(_2735, _2733));
        float _2740 = (_2736 * _1976) + _1965;
        float _2741 = (_2736 * _1979) + _1969;
        float _2742 = (_2736 * _1982) + _1973;
        float _2743 = _2736 * 9.9999997473787516355514526367188e-05;
        float _2744 = (-1.0) - _2743;
        float _2746 = _2743 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2742 > _2746) || ((_2742 < _2744) || ((_2741 > _2746) || ((_2741 < _2744) || ((_2740 < _2744) || (_2740 > _2746))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2742, cbModelParam._m0[17u].z, fma(_2741, cbModelParam._m0[17u].y, _2740 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2742, cbModelParam._m0[18u].z, fma(_2741, cbModelParam._m0[18u].y, _2740 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2742, cbModelParam._m0[19u].z, fma(_2741, cbModelParam._m0[19u].y, _2740 * cbModelParam._m0[19u].x))), _1912);
            frontier_phi_22_47_ladder = _2860.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2860.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2860.x * cbModelParam._m0[1u].z;
        }
        _2001 = frontier_phi_22_47_ladder_2;
        _2003 = frontier_phi_22_47_ladder_1;
        _2005 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1015, _1016, _1017), _1912);
        _2001 = _1985.x * cbModelParam._m0[1u].z;
        _2003 = _1985.y * cbModelParam._m0[1u].z;
        _2005 = _1985.z * cbModelParam._m0[1u].z;
    }
    float _2017 = ((((1.0 - _1036) * ((_1023 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1036 * _1023)) * _1007;
    float _2018 = _2017 * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2019 = _2017 * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2020 = _2017 * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2023 = fma(_2020, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2018 * cbSceneParam._m0[89u].x));
    float _2026 = fma(_2020, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2018 * cbSceneParam._m0[90u].x));
    float _2029 = fma(_2020, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, _2018 * cbSceneParam._m0[91u].x));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2067 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2076 = _2063 / _2075;
    float _2077 = _2067 / _2075;
    float _2078 = _2071 / _2075;
    float _2225;
    float _2226;
    float _2227;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2105 = ((uint(_2078 > cbSceneParam._m0[59u].y) + uint(_2078 > cbSceneParam._m0[59u].x)) + uint(_2078 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2106 = _2105 + 43u;
        uint _2114 = _2105 + 44u;
        uint _2122 = _2105 + 45u;
        uint _2130 = _2105 + 46u;
        float _2141 = fma(_2075, cbSceneParam._m0[_2106].w, fma(_2071, cbSceneParam._m0[_2106].z, fma(_2067, cbSceneParam._m0[_2106].y, _2063 * cbSceneParam._m0[_2106].x)));
        float _2145 = fma(_2075, cbSceneParam._m0[_2114].w, fma(_2071, cbSceneParam._m0[_2114].z, fma(_2067, cbSceneParam._m0[_2114].y, _2063 * cbSceneParam._m0[_2114].x)));
        float _2153 = fma(_2075, cbSceneParam._m0[_2130].w, fma(_2071, cbSceneParam._m0[_2130].z, fma(_2067, cbSceneParam._m0[_2130].y, _2063 * cbSceneParam._m0[_2130].x)));
        float _2158 = cbSceneParam._m0[33u].z * _2153;
        float _2160 = cbSceneParam._m0[33u].w * _2153;
        float _2163 = fma(_2075, cbSceneParam._m0[_2122].w, fma(_2071, cbSceneParam._m0[_2122].z, fma(_2067, cbSceneParam._m0[_2122].y, _2063 * cbSceneParam._m0[_2122].x))) / _2153;
        float _2211 = (cbSceneParam._m0[33u].x - sqrt(((_2077 * _2077) + (_2076 * _2076)) + (_2078 * _2078))) * cbSceneParam._m0[33u].y;
        float _4530 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2218 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2158 + _2141) / _2153, (_2160 + _2145) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2160 + _2141) / _2153, (_2145 - _2158) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 - _2158) / _2153, (_2145 - _2160) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 - _2160) / _2153, (_2158 + _2145) / _2153), _2163), 0.0)).x), vec4(0.25)));
        _2225 = 1.0 - (_2218 * cbSceneParam._m0[34u].x);
        _2226 = 1.0 - (_2218 * cbSceneParam._m0[34u].y);
        _2227 = 1.0 - (_2218 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2225 = 1.0;
        _2226 = 1.0;
        _2227 = 1.0;
    }
    float _2291;
    float _2293;
    float _2295;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2279 = fma(_2075, cbSceneParam._m0[63u].w, fma(_2071, cbSceneParam._m0[63u].z, fma(_2067, cbSceneParam._m0[63u].y, _2063 * cbSceneParam._m0[63u].x)));
        float _2280 = fma(_2075, cbSceneParam._m0[60u].w, fma(_2071, cbSceneParam._m0[60u].z, fma(_2067, cbSceneParam._m0[60u].y, _2063 * cbSceneParam._m0[60u].x))) / _2279;
        float _2281 = fma(_2075, cbSceneParam._m0[61u].w, fma(_2071, cbSceneParam._m0[61u].z, fma(_2067, cbSceneParam._m0[61u].y, _2063 * cbSceneParam._m0[61u].x))) / _2279;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2280 >= cbSceneParam._m0[64u].x) && (_2281 >= cbSceneParam._m0[64u].y)) && (_2280 <= cbSceneParam._m0[64u].z)) && (_2281 <= cbSceneParam._m0[64u].w))
        {
            float _2419 = fma(_2075, cbSceneParam._m0[62u].w, fma(_2071, cbSceneParam._m0[62u].z, fma(_2067, cbSceneParam._m0[62u].y, _2063 * cbSceneParam._m0[62u].x))) / _2279;
            float _2423 = isnan(cbSceneParam._m0[41u].w) ? _2419 : (isnan(_2419) ? cbSceneParam._m0[41u].w : max(_2419, cbSceneParam._m0[41u].w));
            float _2466 = (cbSceneParam._m0[33u].x - sqrt(((_2077 * _2077) + (_2076 * _2076)) + (_2078 * _2078))) * cbSceneParam._m0[33u].y;
            float _4546 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
            float _2473 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2280, cbSceneParam._m0[33u].w + _2281), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2280, _2281 - cbSceneParam._m0[33u].z), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2280 - cbSceneParam._m0[33u].z, _2281 - cbSceneParam._m0[33u].w), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2280 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2281), _2423), 0.0)).x), vec4(0.25)));
            float _2477 = 1.0 - (_2473 * cbSceneParam._m0[34u].x);
            float _2478 = 1.0 - (_2473 * cbSceneParam._m0[34u].y);
            float _2479 = 1.0 - (_2473 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
            frontier_phi_34_33_ladder_1 = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
            frontier_phi_34_33_ladder_2 = isnan(_2477) ? _2225 : (isnan(_2225) ? _2477 : min(_2225, _2477));
        }
        else
        {
            frontier_phi_34_33_ladder = _2227;
            frontier_phi_34_33_ladder_1 = _2226;
            frontier_phi_34_33_ladder_2 = _2225;
        }
        _2291 = frontier_phi_34_33_ladder_2;
        _2293 = frontier_phi_34_33_ladder_1;
        _2295 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2291 = _2225;
        _2293 = _2226;
        _2295 = _2227;
    }
    uvec4 _2300 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2302 = _2300.x * 14u;
    uint _2303 = _2302 + 13u;
    float _2310 = _1007 + (-1.0);
    float _2315 = (cbLight._m0[_2303].x * _2310) + 1.0;
    float _2316 = (cbLight._m0[_2303].y * _2310) + 1.0;
    float _2317 = (cbLight._m0[_2303].z * _2310) + 1.0;
    float _2318 = (cbLight._m0[_2303].w * _2310) + 1.0;
    uint _2319 = _2302 + 5u;
    float _2325 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    uint _2329 = _2302 + 4u;
    float _2338 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
    uint _2342 = _2302 | 1u;
    float _2353 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_857, _858, _859));
    float _2356 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_857, _858, _859));
    float _4582 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _4593 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2361 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * 0.3183098733425140380859375;
    float _2363 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * 0.3183098733425140380859375;
    float _2370 = ((cbLight._m0[_2319].x * _2325) * _2363) + (((cbLight._m0[_2329].x * _2291) * _2338) * _2361);
    float _2371 = ((_2325 * cbLight._m0[_2319].y) * _2363) + (((cbLight._m0[_2329].y * _2293) * _2338) * _2361);
    float _2372 = ((_2325 * cbLight._m0[_2319].z) * _2363) + (((cbLight._m0[_2329].z * _2295) * _2338) * _2361);
    uvec4 _2376 = floatBitsToUint(cbLight._m0[_2302 + 12u]);
    bool _2378 = _2376.x == 0u;
    float _2480;
    float _2482;
    float _2484;
    if (_2378)
    {
        _2480 = _2370;
        _2482 = _2371;
        _2484 = _2372;
    }
    else
    {
        uint _2488 = _2302 + 6u;
        float _2504 = (dot(vec3(cbLight._m0[_2302 + 2u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2505 = _2504 * _2504;
        float _4604 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2506 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2507 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2480 = (((cbLight._m0[_2488].x * 0.3183098733425140380859375) * _2506) * _2507) + _2370;
        _2482 = (((cbLight._m0[_2488].y * 0.3183098733425140380859375) * _2506) * _2507) + _2371;
        _2484 = (((cbLight._m0[_2488].z * 0.3183098733425140380859375) * _2506) * _2507) + _2372;
    }
    bool _2487 = _2376.y == 0u;
    float _2542;
    float _2544;
    float _2546;
    if (_2487)
    {
        _2542 = _2480;
        _2544 = _2482;
        _2546 = _2484;
    }
    else
    {
        uint _2704 = _2302 + 7u;
        float _2720 = (dot(vec3(cbLight._m0[_2302 + 3u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2721 = _2720 * _2720;
        float _4620 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2722 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2723 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2542 = (((cbLight._m0[_2704].x * 0.3183098733425140380859375) * _2722) * _2723) + _2480;
        _2544 = (((cbLight._m0[_2704].y * 0.3183098733425140380859375) * _2722) * _2723) + _2482;
        _2546 = (((cbLight._m0[_2704].z * 0.3183098733425140380859375) * _2722) * _2723) + _2484;
    }
    uint _2549 = _2302 + 8u;
    float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _860) * 0.949999988079071044921875);
    float _2563 = _2562 * _2562;
    float _2564 = cbLight._m0[_2302].x + _936;
    float _2565 = cbLight._m0[_2302].y + _937;
    float _2566 = cbLight._m0[_2302].z + _938;
    float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
    float _2571 = _2570 * _2564;
    float _2572 = _2570 * _2565;
    float _2573 = _2570 * _2566;
    float _2574 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2302].xyz));
    float _4636 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _4647 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2578 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2579 = dot(vec3(_857, _858, _859), vec3(_2571, _2572, _2573));
    float _4658 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2571, _2572, _2573));
    float _4669 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2563 * _2563;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2602 = (exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2603 = 1.0 - _2563;
    float _2614 = (0.5 / (((_2578 * ((_2577 * _2603) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2603) + _2563) * _2577))) * _2577;
    float _4680 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2616 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    uint _2630 = _2302 + 9u;
    float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _860) * 0.949999988079071044921875);
    float _2642 = _2641 * _2641;
    float _2643 = cbLight._m0[_2342].x + _936;
    float _2644 = cbLight._m0[_2342].y + _937;
    float _2645 = cbLight._m0[_2342].z + _938;
    float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
    float _2650 = _2649 * _2643;
    float _2651 = _2649 * _2644;
    float _2652 = _2649 * _2645;
    float _2653 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2342].xyz));
    float _4691 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2656 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2657 = dot(vec3(_857, _858, _859), vec3(_2650, _2651, _2652));
    float _4702 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2661 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2650, _2651, _2652));
    float _4713 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2665 = _2642 * _2642;
    float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
    float _2678 = (exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2679 = 1.0 - _2642;
    float _2689 = (0.5 / (((_2578 * ((_2656 * _2679) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2679) + _2642) * _2656))) * _2656;
    float _4724 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2691 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
    float _2701 = (((_2678 * cbLight._m0[_2630].x) * _2691) * _2325) + ((((cbLight._m0[_2549].x * _2291) * _2602) * _2616) * _2338);
    float _2702 = (((_2678 * cbLight._m0[_2630].y) * _2691) * _2325) + ((((cbLight._m0[_2549].y * _2293) * _2602) * _2616) * _2338);
    float _2703 = (((_2678 * cbLight._m0[_2630].z) * _2691) * _2325) + ((((cbLight._m0[_2549].z * _2295) * _2602) * _2616) * _2338);
    float _2759;
    float _2761;
    float _2763;
    if (_2378)
    {
        _2759 = _2701;
        _2761 = _2702;
        _2763 = _2703;
    }
    else
    {
        uint _2765 = _2302 + 2u;
        uint _2769 = _2302 + 10u;
        float _2783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2765].w)) * _860) * 0.949999988079071044921875);
        float _2784 = _2783 * _2783;
        float _2785 = cbLight._m0[_2765].x + _936;
        float _2786 = cbLight._m0[_2765].y + _937;
        float _2787 = cbLight._m0[_2765].z + _938;
        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
        float _2792 = _2791 * _2785;
        float _2793 = _2791 * _2786;
        float _2794 = _2791 * _2787;
        float _2795 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2765].xyz));
        float _4735 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2799 = dot(vec3(_857, _858, _859), vec3(_2792, _2793, _2794));
        float _4746 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2803 = dot(vec3(cbLight._m0[_2765].xyz), vec3(_2792, _2793, _2794));
        float _4757 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2807 = _2784 * _2784;
        float _2811 = ((_2802 * _2802) * (_2807 + (-1.0))) + 1.0;
        float _2820 = (exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2821 = 1.0 - _2784;
        float _2831 = (0.5 / (((_2578 * ((_2798 * _2821) + _2784)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2821) + _2784) * _2798))) * _2798;
        float _4768 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2833 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2807 / ((_2811 * _2811) * 3.141590118408203125));
        float _2834 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2759 = (((_2820 * cbLight._m0[_2769].x) * _2833) * _2834) + _2701;
        _2761 = (((_2820 * cbLight._m0[_2769].y) * _2833) * _2834) + _2702;
        _2763 = (((_2820 * cbLight._m0[_2769].z) * _2833) * _2834) + _2703;
    }
    float _2865;
    float _2867;
    float _2869;
    if (_2487)
    {
        _2865 = _2759;
        _2867 = _2761;
        _2869 = _2763;
    }
    else
    {
        uint _2876 = _2302 + 3u;
        uint _2880 = _2302 + 11u;
        float _2894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2876].w)) * _860) * 0.949999988079071044921875);
        float _2895 = _2894 * _2894;
        float _2896 = cbLight._m0[_2876].x + _936;
        float _2897 = cbLight._m0[_2876].y + _937;
        float _2898 = cbLight._m0[_2876].z + _938;
        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
        float _2903 = _2902 * _2896;
        float _2904 = _2902 * _2897;
        float _2905 = _2902 * _2898;
        float _2906 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2876].xyz));
        float _4784 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2910 = dot(vec3(_857, _858, _859), vec3(_2903, _2904, _2905));
        float _4795 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2914 = dot(vec3(cbLight._m0[_2876].xyz), vec3(_2903, _2904, _2905));
        float _4806 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2918 = _2895 * _2895;
        float _2922 = ((_2913 * _2913) * (_2918 + (-1.0))) + 1.0;
        float _2931 = (exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2932 = 1.0 - _2895;
        float _2942 = (0.5 / (((_2578 * ((_2909 * _2932) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2932) + _2895) * _2909))) * _2909;
        float _4817 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2944 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2918 / ((_2922 * _2922) * 3.141590118408203125));
        float _2945 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2865 = (((_2931 * cbLight._m0[_2880].x) * _2944) * _2945) + _2759;
        _2867 = (((_2931 * cbLight._m0[_2880].y) * _2944) * _2945) + _2761;
        _2869 = (((_2931 * cbLight._m0[_2880].z) * _2944) * _2945) + _2763;
    }
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    if (_2300.y == 0u)
    {
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.x;
        uint _2978 = uint((float(_2966.y) * floor(float(uint(cbSceneParam._m0[85u].y * _945) / _2967))) + floor(float(uint(cbSceneParam._m0[85u].x * _944) / _2967)));
        float _2988 = (log2(_2078 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2989 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        uint _2992 = uint(isnan(14.0) ? _2989 : (isnan(_2989) ? 14.0 : min(_2989, 14.0)));
        uvec4 _2997 = texelFetch(g_lightClusterGridBuffer, int(((_2992 << 2u) + (_2978 << 6u)) >> 2u));
        uint _2998 = _2997.x;
        uint _2999 = _2966.z;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((((1u << ((_2999 >> 4u) & 15u)) + 4294967295u) & _2998) == 0u) || ((_2999 & 240u) == 0u))
        {
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
        }
        else
        {
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            uint _3228 = 0u;
            uint _3237;
            bool _3238;
            for (;;)
            {
                _3237 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                _3238 = _3237 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3238)
                {
                    frontier_phi_66_pred = _3227;
                    frontier_phi_66_pred_1 = _3226;
                    frontier_phi_66_pred_2 = _3225;
                    frontier_phi_66_pred_3 = _3224;
                    frontier_phi_66_pred_4 = _3223;
                    frontier_phi_66_pred_5 = _3222;
                }
                else
                {
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    uint _3352;
                    _3346 = _3222;
                    _3347 = _3223;
                    _3348 = _3224;
                    _3349 = _3225;
                    _3350 = _3226;
                    _3351 = _3227;
                    _3352 = _3237;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    for (;;)
                    {
                        uint _3356 = uint(findLSB(_3352)) + (_3228 << 5u);
                        uint _3353 = (_3352 + 4294967295u) & _3352;
                        uint _3358 = _3356 * 48u;
                        vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3378 = (_3356 * 48u) + 4u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 3u)).x));
                        uint _3397 = (_3356 * 48u) + 8u;
                        vec3 _3408 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x));
                        float _3412 = _3372.x - _2076;
                        float _3413 = _3372.y - _2077;
                        float _3414 = _3372.z - _2078;
                        float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                        float _3418 = inversesqrt(_3415);
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3422 = dot(vec3(_963, _966, _969), vec3(_3419, _3420, _3421));
                        float _3427 = 1.0 - (_3415 * _3372.w);
                        float _4843 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                        float _3429 = sqrt(_3415) * _3391.w;
                        float _3432 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                        float _3433 = _3432 * _3432;
                        float _3436 = ((1.0 - _3433) * _3422) + _3433;
                        float _3439 = _3429 * _3429;
                        float _3443 = ((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3428) / ((_3439 * 0.699999988079071044921875) + 1.0);
                        float _3447 = (-0.0) - _2076;
                        float _3448 = (-0.0) - _2077;
                        float _3449 = (-0.0) - _2078;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3454 = _3453 * _3447;
                        float _3455 = _3453 * _3448;
                        float _3456 = _3453 * _3449;
                        float _3463 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                        float _3464 = 1.0 - _1023;
                        float _3471 = sqrt(1.0 - ((1.0 - (_3464 * _3464)) * (1.0 - (_3463 * _3463))));
                        float _3472 = _3471 * _3471;
                        float _3473 = _3472 * _3472;
                        float _3474 = _3454 + _3419;
                        float _3475 = _3455 + _3420;
                        float _3476 = _3456 + _3421;
                        float _3480 = inversesqrt(dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476)));
                        float _3484 = dot(vec3(_963, _966, _969), vec3(_3454, _3455, _3456));
                        float _4859 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3487 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3488 = dot(vec3(_963, _966, _969), vec3(_3480 * _3474, _3480 * _3475, _3480 * _3476));
                        float _4870 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3491 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3495 = ((_3491 * _3491) * (_3473 + (-1.0))) + 1.0;
                        float _3496 = _3432 * _3472;
                        float _3497 = _3496 * _3496;
                        float _3500 = ((1.0 - _3497) * _3422) + _3497;
                        float _4881 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3501 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3502 = 1.0 - _3472;
                        float _3512 = (0.5 / (((_3501 * ((_3487 * _3502) + _3472)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3472) * _3487))) * _3501;
                        float _4892 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3523 = (((_3473 * 3.1415927410125732421875) * (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) / ((_3495 * _3495) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125))) * _3428;
                        _3281 = (_3443 * _3391.x) + _3349;
                        _3282 = (_3443 * _3391.y) + _3350;
                        _3283 = (_3443 * _3391.z) + _3351;
                        _3278 = (_3523 * _3408.x) + _3346;
                        _3279 = (_3523 * _3408.y) + _3347;
                        _3280 = (_3523 * _3408.z) + _3348;
                        if (_3353 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3346 = _3278;
                            _3347 = _3279;
                            _3348 = _3280;
                            _3349 = _3281;
                            _3350 = _3282;
                            _3351 = _3283;
                            _3352 = _3353;
                        }
                    }
                    frontier_phi_66_pred = _3283;
                    frontier_phi_66_pred_1 = _3282;
                    frontier_phi_66_pred_2 = _3281;
                    frontier_phi_66_pred_3 = _3280;
                    frontier_phi_66_pred_4 = _3279;
                    frontier_phi_66_pred_5 = _3278;
                }
                _3089 = frontier_phi_66_pred;
                _3087 = frontier_phi_66_pred_1;
                _3085 = frontier_phi_66_pred_2;
                _3083 = frontier_phi_66_pred_3;
                _3081 = frontier_phi_66_pred_4;
                _3079 = frontier_phi_66_pred_5;
                uint _3229 = _3228 + 1u;
                if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3222 = _3079;
                    _3223 = _3081;
                    _3224 = _3083;
                    _3225 = _3085;
                    _3226 = _3087;
                    _3227 = _3089;
                    _3228 = _3229;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
        }
        uvec4 _3092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3093 = _3092.z;
        uint _3095 = (_3093 >> 8u) & 15u;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        if (((4294967295u << _3095) & _2998) == 0u)
        {
            _3190 = _3078;
            _3192 = _3080;
            _3194 = _3082;
            _3196 = _3084;
            _3198 = _3086;
            _3200 = _3088;
        }
        else
        {
            float _3215 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
            float _3216 = _3215 * _2076;
            float _3217 = _3215 * _2077;
            float _3218 = _3215 * _2078;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3095 < ((_3093 >> 12u) & 15u))
            {
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3329 = _3078;
                float _3330 = _3080;
                float _3331 = _3082;
                float _3332 = _3084;
                float _3333 = _3086;
                float _3334 = _3088;
                uint _3335 = _3095;
                uint _3344;
                bool _3345;
                for (;;)
                {
                    _3344 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3335 << 2u)) >> 2u)).x;
                    _3345 = _3344 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3345)
                    {
                        frontier_phi_72_pred = _3334;
                        frontier_phi_72_pred_1 = _3333;
                        frontier_phi_72_pred_2 = _3332;
                        frontier_phi_72_pred_3 = _3331;
                        frontier_phi_72_pred_4 = _3330;
                        frontier_phi_72_pred_5 = _3329;
                    }
                    else
                    {
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3541 = _3329;
                        float _3542 = _3330;
                        float _3543 = _3331;
                        float _3544 = _3332;
                        float _3545 = _3333;
                        float _3546 = _3334;
                        uint _3547 = _3344;
                        uint _3548;
                        vec4 _3573;
                        float _3574;
                        vec4 _3589;
                        vec3 _3601;
                        vec4 _3616;
                        vec4 _3631;
                        float _3677;
                        bool _3678;
                        for (;;)
                        {
                            uint _3558 = ((_3335 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3547));
                            _3548 = (_3547 + 4294967295u) & _3547;
                            uint _3560 = _3558 * 40u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            _3574 = _3573.w;
                            uint _3576 = (_3558 * 40u) + 4u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3558 * 40u) + 8u;
                            _3601 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x));
                            uint _3603 = (_3558 * 40u) + 16u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3558 * 40u) + 20u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            uint _3633 = (_3558 * 40u) + 24u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3652 = (_3558 * 40u) + 28u;
                            vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            _3677 = fma(_2078, _3665.z, fma(_2077, _3665.y, _3665.x * _2076)) + _3665.w;
                            _3678 = !((fma(_2078, _3646.z, fma(_2077, _3646.y, _3646.x * _2076)) + _3646.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3678)
                            {
                                float _3705 = _3573.x - _2076;
                                float _3706 = _3573.y - _2077;
                                float _3707 = _3573.z - _2078;
                                float _3708 = dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707));
                                float _3711 = inversesqrt(_3708);
                                float _3712 = _3711 * _3705;
                                float _3713 = _3711 * _3706;
                                float _3714 = _3711 * _3707;
                                float _3718 = 1.0 - (_3708 / (_3574 * _3574));
                                float _4903 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3723 = sqrt(_3708) * _3589.w;
                                float _3725 = 1.39999997615814208984375 / (_3723 + 1.39999997615814208984375);
                                float _3726 = _3725 * _3725;
                                float _3729 = ((1.0 - _3726) * dot(vec3(_3712, _3713, _3714), vec3(_963, _966, _969))) + _3726;
                                float _3732 = _3723 * _3723;
                                float _3736 = (fma(_2078, _3616.z, fma(_2077, _3616.y, _3616.x * _2076)) + _3616.w) / _3677;
                                float _3737 = (fma(_2078, _3631.z, fma(_2077, _3631.y, _3631.x * _2076)) + _3631.w) / _3677;
                                float _3741 = 1.0 - dot(vec2(_3736, _3737), vec2(_3736, _3737));
                                float _4919 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3743 = _3742 * (((isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0))) * _3719) / ((_3732 * 0.699999988079071044921875) + 1.0));
                                float _3755 = exp2(log2(1.0 / ((_3732 * 3.5) + 5.0)) * 0.25);
                                float _3756 = 1.0 - _1023;
                                float _3763 = sqrt(1.0 - ((1.0 - (_3756 * _3756)) * (1.0 - (_3755 * _3755))));
                                float _3764 = _3763 * _3763;
                                float _3765 = _3764 * _3764;
                                float _3766 = _3712 - _3216;
                                float _3767 = _3713 - _3217;
                                float _3768 = _3714 - _3218;
                                float _3772 = inversesqrt(dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768)));
                                float _3776 = dot(vec3(_963, _966, _969), vec3((-0.0) - _3216, (-0.0) - _3217, (-0.0) - _3218));
                                float _4930 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3779 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3780 = dot(vec3(_963, _966, _969), vec3(_3772 * _3766, _3772 * _3767, _3772 * _3768));
                                float _4941 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3787 = ((_3783 * _3783) * (_3765 + (-1.0))) + 1.0;
                                float _3788 = _3725 * _3764;
                                float _3789 = _3788 * _3788;
                                float _3795 = ((1.0 - _3789) * dot(vec3(_963, _966, _969), vec3(_3712, _3713, _3714))) + _3789;
                                float _4952 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3797 = 1.0 - _3764;
                                float _3807 = (0.5 / (((_3796 * ((_3779 * _3797) + _3764)) + 9.9999999392252902907785028219223e-09) + (((_3796 * _3797) + _3764) * _3779))) * _3796;
                                float _4963 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3817 = (_3742 * _3719) * (((_3765 * 3.1415927410125732421875) * (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) / ((_3787 * _3787) * ((_3732 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3743 * _3589.y;
                                frontier_phi_78_pred_1 = _3743 * _3589.x;
                                frontier_phi_78_pred_2 = _3817 * _3601.z;
                                frontier_phi_78_pred_3 = _3817 * _3601.y;
                                frontier_phi_78_pred_4 = _3817 * _3601.x;
                                frontier_phi_78_pred_5 = _3743 * _3589.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3825 = frontier_phi_78_pred;
                            _3824 = frontier_phi_78_pred_1;
                            _3823 = frontier_phi_78_pred_2;
                            _3822 = frontier_phi_78_pred_3;
                            _3821 = frontier_phi_78_pred_4;
                            _3826 = frontier_phi_78_pred_5;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            _3528 = _3821 + _3541;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            if (_3548 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3548;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3533;
                        frontier_phi_72_pred_1 = _3532;
                        frontier_phi_72_pred_2 = _3531;
                        frontier_phi_72_pred_3 = _3530;
                        frontier_phi_72_pred_4 = _3529;
                        frontier_phi_72_pred_5 = _3528;
                    }
                    _3201 = frontier_phi_72_pred;
                    _3199 = frontier_phi_72_pred_1;
                    _3197 = frontier_phi_72_pred_2;
                    _3195 = frontier_phi_72_pred_3;
                    _3193 = frontier_phi_72_pred_4;
                    _3191 = frontier_phi_72_pred_5;
                    uint _3336 = _3335 + 1u;
                    if (_3336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3329 = _3191;
                        _3330 = _3193;
                        _3331 = _3195;
                        _3332 = _3197;
                        _3333 = _3199;
                        _3334 = _3201;
                        _3335 = _3336;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3201;
                frontier_phi_60_61_ladder_1 = _3199;
                frontier_phi_60_61_ladder_2 = _3195;
                frontier_phi_60_61_ladder_3 = _3193;
                frontier_phi_60_61_ladder_4 = _3191;
                frontier_phi_60_61_ladder_5 = _3197;
            }
            else
            {
                frontier_phi_60_61_ladder = _3088;
                frontier_phi_60_61_ladder_1 = _3086;
                frontier_phi_60_61_ladder_2 = _3082;
                frontier_phi_60_61_ladder_3 = _3080;
                frontier_phi_60_61_ladder_4 = _3078;
                frontier_phi_60_61_ladder_5 = _3084;
            }
            _3190 = frontier_phi_60_61_ladder_4;
            _3192 = frontier_phi_60_61_ladder_3;
            _3194 = frontier_phi_60_61_ladder_2;
            _3196 = frontier_phi_60_61_ladder_5;
            _3198 = frontier_phi_60_61_ladder_1;
            _3200 = frontier_phi_60_61_ladder;
        }
        float _3205 = isnan(1.0) ? _1007 : (isnan(_1007) ? 1.0 : min(_1007, 1.0));
        _3011 = (_3205 * _3196) + _2542;
        _3013 = (_3205 * _3198) + _2544;
        _3015 = (_3205 * _3200) + _2546;
        _3017 = ((_3190 * 0.039999999105930328369140625) * _3205) + _2865;
        _3019 = ((_3192 * 0.039999999105930328369140625) * _3205) + _2867;
        _3021 = ((_3194 * 0.039999999105930328369140625) * _3205) + _2869;
    }
    else
    {
        _3011 = _2542;
        _3013 = _2544;
        _3015 = _2546;
        _3017 = _2865;
        _3019 = _2867;
        _3021 = _2869;
    }
    float _4979 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _4990 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _5001 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    uint _3041 = _279 + 6u;
    float _3049 = _944 / cbSceneParam._m0[86u].x;
    float _3050 = _945 / cbSceneParam._m0[86u].y;
    vec4 _3064 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3049, _3050, (log2((isnan(cbSceneParam._m0[77u].w) ? _878 : (isnan(_878) ? cbSceneParam._m0[77u].w : min(_878, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3066 = _3064.x;
    float _3067 = _3064.y;
    float _3068 = _3064.z;
    float _3069 = _3064.w;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    if (_878 > cbSceneParam._m0[78u].w)
    {
        float _3103 = isnan(_878) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _878 : min(cbSceneParam._m0[80u].w, _878));
        float _3104 = _3103 / _878;
        float _3115 = _3104 * _929;
        float _3116 = _930 * _3104;
        float _3117 = (-0.0) - _3116;
        float _3118 = _3104 * _931;
        float _3120 = (cbSceneParam._m0[77u].w * _3117) / _3103;
        float _3121 = _3120 + cbSceneParam._m0[79u].w;
        float _3122 = cbSceneParam._m0[79u].w - _3116;
        float _3128 = sqrt(((_3115 * _3115) + (_3116 * _3116)) + (_3118 * _3118));
        float _3131 = (1.0 - (cbSceneParam._m0[77u].w / _3103)) * _3128;
        float _3136 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3138 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3291;
        if (abs((_3117 - _3120) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3291 = ((((_3121 > 0.0) ? exp2(_3136 * _3121) : (2.0 - exp2(_3138 * _3121))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3131;
        }
        else
        {
            float _3251 = 1.0 / cbSceneParam._m0[80u].x;
            float _3252 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : max(_3121, _3122));
            float _3253 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : min(_3121, _3122));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            _3291 = ((abs(_3128 / _3117) * cbSceneParam._m0[80u].y) * ((((_3262 - _3263) * 2.0) - ((exp2(_3136 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0)))) - exp2(_3136 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))))) * _3251)) - ((exp2(_3138 * _3262) - exp2(_3138 * _3263)) * _3251))) + (_3131 * cbSceneParam._m0[80u].z);
        }
        vec4 _3293 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3049, _3050, 1.0), 0.0);
        float _3302 = exp2((_3291 * (-1.44269502162933349609375)) * (1.0 - _3293.w));
        float _3303 = log2(_3302);
        float _3319 = log2(_3069);
        _3140 = (exp2(_3319 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3303 * cbSceneParam._m0[78u].x)) * _3293.x) / cbSceneParam._m0[78u].x)) + _3066;
        _3142 = (exp2(_3319 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3303 * cbSceneParam._m0[78u].y)) * _3293.y) / cbSceneParam._m0[78u].y)) + _3067;
        _3144 = (exp2(_3319 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3303 * cbSceneParam._m0[78u].z)) * _3293.z) / cbSceneParam._m0[78u].z)) + _3068;
        _3146 = _3302 * _3069;
    }
    else
    {
        _3140 = _3066;
        _3142 = _3067;
        _3144 = _3068;
        _3146 = _3069;
    }
    float _3158 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3159 = _3158 == 3.0;
    float _3160 = log2(_3146);
    float _3167 = exp2(_3160 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_3011 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1007))) + ((_3017 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1812)) * cbPerFrame._m0[3u].x));
    float _3168 = exp2(_3160 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_3013 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1007))) + ((_3019 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1812)) * cbPerFrame._m0[3u].x));
    float _3169 = exp2(_3160 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_3015 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1007))) + ((_3021 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1812)) * cbPerFrame._m0[3u].x));
    float _3178 = (_3158 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3178 * (_3159 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3140)));
    SV_Target.y = _3178 * (_3159 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3142)));
    SV_Target.z = _3178 * (_3159 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3144)));
    SV_Target.w = cbInstanceData._m0[_3041].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3041].w;
}


