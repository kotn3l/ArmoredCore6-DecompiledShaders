#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1157;
float _3543;
float _3544;
float _3545;
float _3546;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3555 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3566 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3577 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].z) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3588 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _435 = (_428 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _436 = (_428 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _437 = (_428 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) + _447;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    float _524 = ((_494.z - _515) * _428) + _515;
    float _527 = ((((_494.x - _513) * _428) + _513) * 2.0) + (-1.0);
    float _528 = ((((_494.y - _514) * _428) + _514) * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3599 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))));
    vec4 _556 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _568 = (_527 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_469.x * 2.0) + (-1.0)))) + (((_556.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _569 = (_528 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_469.y * 2.0) + (-1.0)))) + (((_556.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _574 = (((_469.z - _524) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _524;
    float _578 = ((_556.z - _574) * cbMtdParam._m0[19u].w) + _574;
    float _580 = cbMtdParam._m0[22u].x + _556.w;
    float _583 = fma(_534, _228 * NORMAL.x, fma(_569, _235 * TANGENT.x, (_221 * _213) * _568));
    float _586 = fma(_534, _228 * NORMAL.y, fma(_569, _235 * TANGENT.y, (_221 * _214) * _568));
    float _589 = fma(_534, _228 * NORMAL.z, fma(_569, _235 * TANGENT.z, (_221 * _215) * _568));
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    float _594 = _593 * _583;
    float _595 = _593 * _586;
    float _596 = _593 * _589;
    float _3610 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _597 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3632 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3643 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3654 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _615 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _667 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _657);
    float _668 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _657);
    float _669 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _657);
    float _673 = inversesqrt(dot(vec3(_667, _668, _669), vec3(_667, _668, _669)));
    float _674 = _667 * _673;
    float _675 = _668 * _673;
    float _676 = _669 * _673;
    vec4 _681 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _683 = _681.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _837 = sqrt(((_667 * _667) + (_668 * _668)) + (_669 * _669));
        float _843 = (cbMatDynParam._m0[5u].x * _837) + cbMatDynParam._m0[5u].y;
        float _3665 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _848 = (cbMatDynParam._m0[5u].z * _837) + cbMatDynParam._m0[5u].w;
        float _3676 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) - _844)) + _844) < ((_683 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _694 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _695 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _713 = fma(_596, cbSceneParam._m0[5u].z, fma(_595, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _594));
    float _716 = fma(_596, cbSceneParam._m0[6u].z, fma(_595, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _594));
    float _719 = fma(_596, cbSceneParam._m0[7u].z, fma(_595, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _594));
    uint _732 = _262 + 9u;
    uint _733 = _732 + uint(cbMatDynParam._m0[0u].w);
    float _739 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_733].x;
    float _740 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_733].y;
    float _741 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_733].z;
    float _3687 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _694, cbSceneParam._m0[86u].y * _695));
    float _757 = ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * TEXCOORD_5.w) * _753.x;
    float _758 = dot(vec3(_594, _595, _596), vec3(_674, _675, _676));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _594) - _674;
    float _766 = (_761 * _595) - _675;
    float _767 = (_761 * _596) - _676;
    float _771 = abs(dot(vec3(_674, _675, _676), vec3(_594, _595, _596)));
    float _3720 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_597);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1156;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _881 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _885 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _889 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _914 = _818 + _594;
        float _915 = _822 + _595;
        float _916 = _826 + _596;
        float _926 = fma(_916, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914)) - _881;
        float _927 = fma(_916, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914)) - _885;
        float _928 = fma(_916, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914)) - _889;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_881 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_885 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[34u].z) + ((((((_889 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _984 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_950.x + (-0.5));
        float _986 = _984 * (_950.y + (-0.5));
        float _987 = _984 * (_950.z + (-0.5));
        float _994 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_957.x + (-0.5));
        float _996 = _994 * (_957.y + (-0.5));
        float _997 = _994 * (_957.z + (-0.5));
        float _1004 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_964.x + (-0.5));
        float _1006 = _1004 * (_964.y + (-0.5));
        float _1007 = _1004 * (_964.z + (-0.5));
        float _1014 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_971.x + (-0.5));
        float _1016 = _1014 * (_971.y + (-0.5));
        float _1017 = _1014 * (_971.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1038 = (dot(vec3(_594, _595, _596), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1048 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3768 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1050 + 1.0))) + _1055) * _1018;
        float _1065 = _986 * 0.5;
        float _1066 = _996 * 0.5;
        float _1067 = _1006 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_594, _595, _596), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3801 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1092 + 1.0))) + _1097) * _1019;
        float _1107 = _987 * 0.5;
        float _1108 = _997 * 0.5;
        float _1109 = _1007 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_594, _595, _596), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3834 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1134 + 1.0))) + _1139) * _1020;
        _1156 = _987;
        _1158 = _986;
        _1159 = _985;
        _1160 = _997;
        _1161 = _996;
        _1162 = _995;
        _1163 = _1007;
        _1164 = _1006;
        _1165 = _1005;
        _1166 = _1020;
        _1167 = _1019;
        _1168 = _1018;
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _1157;
        _1158 = _1157;
        _1159 = _1157;
        _1160 = _1157;
        _1161 = _1157;
        _1162 = _1157;
        _1163 = _1157;
        _1164 = _1157;
        _1165 = _1157;
        _1166 = _1157;
        _1167 = _1157;
        _1168 = _1157;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1199 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1203 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1207 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1230 = _818 + _594;
        float _1231 = _822 + _595;
        float _1232 = _826 + _596;
        float _1242 = fma(_1232, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1230)) - _1199;
        float _1243 = fma(_1232, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1230)) - _1203;
        float _1244 = fma(_1232, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1230)) - _1207;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1199 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1203 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[35u].z) + ((((((_1207 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1298 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1265.x + (-0.5));
        float _1300 = _1298 * (_1265.y + (-0.5));
        float _1301 = _1298 * (_1265.z + (-0.5));
        float _1308 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1272.x + (-0.5));
        float _1310 = _1308 * (_1272.y + (-0.5));
        float _1311 = _1308 * (_1272.z + (-0.5));
        float _1318 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1279.x + (-0.5));
        float _1320 = _1318 * (_1279.y + (-0.5));
        float _1321 = _1318 * (_1279.z + (-0.5));
        float _1328 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1286.x + (-0.5));
        float _1330 = _1328 * (_1286.y + (-0.5));
        float _1331 = _1328 * (_1286.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_594, _595, _596), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3897 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1362 + 1.0))) + _1367) * _1332;
        float _1377 = _1300 * 0.5;
        float _1378 = _1310 * 0.5;
        float _1379 = _1320 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_594, _595, _596), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3930 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1404 + 1.0))) + _1409) * _1333;
        float _1419 = _1301 * 0.5;
        float _1420 = _1311 * 0.5;
        float _1421 = _1321 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_594, _595, _596), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3963 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1446 + 1.0))) + _1451) * _1334;
        _1468 = _1301;
        _1469 = _1300;
        _1470 = _1299;
        _1471 = _1311;
        _1472 = _1310;
        _1473 = _1309;
        _1474 = _1321;
        _1475 = _1320;
        _1476 = _1319;
        _1477 = _1334;
        _1478 = _1333;
        _1479 = _1332;
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1157;
        _1469 = _1157;
        _1470 = _1157;
        _1471 = _1157;
        _1472 = _1157;
        _1473 = _1157;
        _1474 = _1157;
        _1475 = _1157;
        _1476 = _1157;
        _1477 = _1157;
        _1478 = _1157;
        _1479 = _1157;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1169)) + _1169;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1170)) + _1170;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1171)) + _1171;
    float _1515 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1492));
    float _1536 = _765 * 0.5;
    float _1537 = _766 * 0.5;
    float _1538 = _767 * 0.5;
    float _1539 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1542 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1545 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1579;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1552 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1156, _1160, _1163, _1166));
        float _1556 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1560 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1567 = dot(vec4(cbModelParam._m0[39u]), vec4(_1536, _1537, _1538, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1590;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1581 = dot(vec4(cbModelParam._m0[40u]), vec4(_1536, _1537, _1538, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1594 = (_1590 * cbModelParam._m0[1u].x) + (_1579 * (1.0 - cbModelParam._m0[1u].x));
    float _1604 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _597);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1604 : min(cbModelParam._m0[25u].z, _1604));
    float _1687;
    float _1689;
    float _1691;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1654 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1658 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1662 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1665 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1668 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1671 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1699;
        if (_1665 > 0.0)
        {
            _1699 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1699 = frontier_phi_17_15_ladder;
        }
        float _1922;
        if (_1668 > 0.0)
        {
            _1922 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1922 = frontier_phi_26_22_ladder;
        }
        float _2168;
        if (_1671 > 0.0)
        {
            _2168 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2168 = frontier_phi_38_33_ladder;
        }
        float _2170 = isnan(_1922) ? _1699 : (isnan(_1699) ? _1922 : min(_1699, _1922));
        float _2171 = isnan(_2168) ? _2170 : (isnan(_2170) ? _2168 : min(_2170, _2168));
        float _2175 = (_2171 * _1665) + _1654;
        float _2176 = (_2171 * _1668) + _1658;
        float _2177 = (_2171 * _1671) + _1662;
        float _2178 = _2171 * 9.9999997473787516355514526367188e-05;
        float _2180 = (-1.0) - _2178;
        float _2182 = _2178 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2177 > _2182) || ((_2177 < _2180) || ((_2176 > _2182) || ((_2176 < _2180) || ((_2175 < _2180) || (_2175 > _2182))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2301 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2177, cbModelParam._m0[9u].z, fma(_2176, cbModelParam._m0[9u].y, _2175 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2177, cbModelParam._m0[10u].z, fma(_2176, cbModelParam._m0[10u].y, _2175 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2177, cbModelParam._m0[11u].z, fma(_2176, cbModelParam._m0[11u].y, _2175 * cbModelParam._m0[11u].x))), _1605);
            frontier_phi_16_38_ladder = _2301.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2301.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2301.x * cbModelParam._m0[1u].y;
        }
        _1687 = frontier_phi_16_38_ladder_2;
        _1689 = frontier_phi_16_38_ladder_1;
        _1691 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1675 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1605);
        _1687 = _1675.x * cbModelParam._m0[1u].y;
        _1689 = _1675.y * cbModelParam._m0[1u].y;
        _1691 = _1675.z * cbModelParam._m0[1u].y;
    }
    float _1695 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _597);
    float _1696 = isnan(_1695) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1695 : min(cbModelParam._m0[25u].w, _1695));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1751 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1755 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1759 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1762 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1765 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1768 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1927;
        if (_1762 > 0.0)
        {
            _1927 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1927 = frontier_phi_28_24_ladder;
        }
        float _2195;
        if (_1765 > 0.0)
        {
            _2195 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2195 = frontier_phi_40_35_ladder;
        }
        float _2400;
        if (_1768 > 0.0)
        {
            _2400 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2400 = frontier_phi_49_46_ladder;
        }
        float _2402 = isnan(_2195) ? _1927 : (isnan(_1927) ? _2195 : min(_1927, _2195));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1762) + _1751;
        float _2408 = (_2403 * _1765) + _1755;
        float _2409 = (_2403 * _1768) + _1759;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2410;
        float _2413 = _2410 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2409 > _2413) || ((_2409 < _2411) || ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 < _2411) || (_2407 > _2413))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2409, cbModelParam._m0[17u].z, fma(_2408, cbModelParam._m0[17u].y, _2407 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2409, cbModelParam._m0[18u].z, fma(_2408, cbModelParam._m0[18u].y, _2407 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2409, cbModelParam._m0[19u].z, fma(_2408, cbModelParam._m0[19u].y, _2407 * cbModelParam._m0[19u].x))), _1696);
            frontier_phi_25_49_ladder = _2608.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2608.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2608.x * cbModelParam._m0[1u].z;
        }
        _1787 = frontier_phi_25_49_ladder_2;
        _1789 = frontier_phi_25_49_ladder_1;
        _1791 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1696);
        _1787 = _1771.x * cbModelParam._m0[1u].z;
        _1789 = _1771.y * cbModelParam._m0[1u].z;
        _1791 = _1771.z * cbModelParam._m0[1u].z;
    }
    float _1803 = ((((1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_786 * _773)) * _757;
    float _1804 = _1803 * ((cbModelParam._m0[1u].w * (_1787 - _1687)) + _1687);
    float _1805 = _1803 * ((cbModelParam._m0[1u].w * (_1789 - _1689)) + _1689);
    float _1806 = _1803 * ((cbModelParam._m0[1u].w * (_1791 - _1691)) + _1691);
    float _1809 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1805, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1805, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1805, cbSceneParam._m0[91u].y, _1804 * cbSceneParam._m0[91u].x));
    vec4 _1823 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_694, _695));
    float _1825 = _1823.w;
    float _1837 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1825);
    float _1838 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1825);
    float _1839 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1825);
    uvec4 _1843 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _1845 = _1843.x * 14u;
    uint _1846 = _1845 + 13u;
    float _1853 = _757 + (-1.0);
    float _1858 = (cbLight._m0[_1846].x * _1853) + 1.0;
    float _1859 = (cbLight._m0[_1846].y * _1853) + 1.0;
    float _1860 = (cbLight._m0[_1846].z * _1853) + 1.0;
    float _1861 = (cbLight._m0[_1846].w * _1853) + 1.0;
    uint _1862 = _1845 + 5u;
    float _1868 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1872 = _1845 + 4u;
    float _1881 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1885 = _1845 | 1u;
    float _1896 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_594, _595, _596));
    float _1899 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_594, _595, _596));
    float _4099 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _4110 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1904 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.3183098733425140380859375;
    float _1906 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.3183098733425140380859375;
    float _1913 = ((cbLight._m0[_1862].x * _1868) * _1906) + (((cbLight._m0[_1872].x * _1837) * _1881) * _1904);
    float _1914 = ((_1868 * cbLight._m0[_1862].y) * _1906) + (((cbLight._m0[_1872].y * _1838) * _1881) * _1904);
    float _1915 = ((_1868 * cbLight._m0[_1862].z) * _1906) + (((cbLight._m0[_1872].z * _1839) * _1881) * _1904);
    uvec4 _1919 = floatBitsToUint(cbLight._m0[_1845 + 12u]);
    bool _1921 = _1919.x == 0u;
    float _1932;
    float _1934;
    float _1936;
    if (_1921)
    {
        _1932 = _1913;
        _1934 = _1914;
        _1936 = _1915;
    }
    else
    {
        uint _1940 = _1845 + 6u;
        float _1956 = (dot(vec3(cbLight._m0[_1845 + 2u].xyz), vec3(_594, _595, _596)) * 0.5) + 0.5;
        float _1957 = _1956 * _1956;
        float _4121 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1958 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1959 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _1932 = (((cbLight._m0[_1940].x * 0.3183098733425140380859375) * _1958) * _1959) + _1913;
        _1934 = (((cbLight._m0[_1940].y * 0.3183098733425140380859375) * _1958) * _1959) + _1914;
        _1936 = (((cbLight._m0[_1940].z * 0.3183098733425140380859375) * _1958) * _1959) + _1915;
    }
    bool _1939 = _1919.y == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1939)
    {
        _1977 = _1932;
        _1979 = _1934;
        _1981 = _1936;
    }
    else
    {
        uint _2139 = _1845 + 7u;
        float _2155 = (dot(vec3(cbLight._m0[_1845 + 3u].xyz), vec3(_594, _595, _596)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4137 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _2158 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _1977 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _1932;
        _1979 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _1934;
        _1981 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _1936;
    }
    uint _1984 = _1845 + 8u;
    float _1997 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _597) * 0.949999988079071044921875);
    float _1998 = _1997 * _1997;
    float _1999 = cbLight._m0[_1845].x + _674;
    float _2000 = cbLight._m0[_1845].y + _675;
    float _2001 = cbLight._m0[_1845].z + _676;
    float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
    float _2006 = _2005 * _1999;
    float _2007 = _2005 * _2000;
    float _2008 = _2005 * _2001;
    float _2009 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_1845].xyz));
    float _4153 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2013 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2014 = dot(vec3(_594, _595, _596), vec3(_2006, _2007, _2008));
    float _4175 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2018 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2006, _2007, _2008));
    float _4186 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2022 = _1998 * _1998;
    float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
    float _2037 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2038 = 1.0 - _1998;
    float _2049 = (0.5 / (((_2013 * ((_2012 * _2038) + _1998)) + 9.9999999392252902907785028219223e-09) + (((_2013 * _2038) + _1998) * _2012))) * _2012;
    float _4197 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2051 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
    uint _2065 = _1845 + 9u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _597) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1885].x + _674;
    float _2079 = cbLight._m0[_1885].y + _675;
    float _2080 = cbLight._m0[_1885].z + _676;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_1885].xyz));
    float _4208 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2092 = dot(vec3(_594, _595, _596), vec3(_2085, _2086, _2087));
    float _4219 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2085, _2086, _2087));
    float _4230 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2077 * _2077;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2114 = 1.0 - _2077;
    float _2124 = (0.5 / (((_2013 * ((_2091 * _2114) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2013 * _2114) + _2077) * _2091))) * _2091;
    float _4241 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2126 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    float _2136 = (((_2113 * cbLight._m0[_2065].x) * _2126) * _1868) + ((((cbLight._m0[_1984].x * _1837) * _2037) * _2051) * _1881);
    float _2137 = (((_2113 * cbLight._m0[_2065].y) * _2126) * _1868) + ((((cbLight._m0[_1984].y * _1838) * _2037) * _2051) * _1881);
    float _2138 = (((_2113 * cbLight._m0[_2065].z) * _2126) * _1868) + ((((cbLight._m0[_1984].z * _1839) * _2037) * _2051) * _1881);
    float _2200;
    float _2202;
    float _2204;
    if (_1921)
    {
        _2200 = _2136;
        _2202 = _2137;
        _2204 = _2138;
    }
    else
    {
        uint _2206 = _1845 + 2u;
        uint _2210 = _1845 + 10u;
        float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _597) * 0.949999988079071044921875);
        float _2225 = _2224 * _2224;
        float _2226 = cbLight._m0[_2206].x + _674;
        float _2227 = cbLight._m0[_2206].y + _675;
        float _2228 = cbLight._m0[_2206].z + _676;
        float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
        float _2233 = _2232 * _2226;
        float _2234 = _2232 * _2227;
        float _2235 = _2232 * _2228;
        float _2236 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2206].xyz));
        float _4252 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2240 = dot(vec3(_594, _595, _596), vec3(_2233, _2234, _2235));
        float _4263 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2244 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2233, _2234, _2235));
        float _4274 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2248 = _2225 * _2225;
        float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
        float _2261 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2262 = 1.0 - _2225;
        float _2272 = (0.5 / (((_2013 * ((_2239 * _2262) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2013 * _2262) + _2225) * _2239))) * _2239;
        float _4285 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2274 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
        float _2275 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2200 = (((_2261 * cbLight._m0[_2210].x) * _2274) * _2275) + _2136;
        _2202 = (((_2261 * cbLight._m0[_2210].y) * _2274) * _2275) + _2137;
        _2204 = (((_2261 * cbLight._m0[_2210].z) * _2274) * _2275) + _2138;
    }
    float _2310;
    float _2312;
    float _2314;
    if (_1939)
    {
        _2310 = _2200;
        _2312 = _2202;
        _2314 = _2204;
    }
    else
    {
        uint _2321 = _1845 + 3u;
        uint _2325 = _1845 + 11u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _597) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _674;
        float _2342 = cbLight._m0[_2321].y + _675;
        float _2343 = cbLight._m0[_2321].z + _676;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2321].xyz));
        float _4301 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2355 = dot(vec3(_594, _595, _596), vec3(_2348, _2349, _2350));
        float _4312 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4323 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2376 = (exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2377 = 1.0 - _2340;
        float _2387 = (0.5 / (((_2013 * ((_2354 * _2377) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2013 * _2377) + _2340) * _2354))) * _2354;
        float _4334 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2389 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2390 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2310 = (((_2376 * cbLight._m0[_2325].x) * _2389) * _2390) + _2200;
        _2312 = (((_2376 * cbLight._m0[_2325].y) * _2389) * _2390) + _2202;
        _2314 = (((_2376 * cbLight._m0[_2325].z) * _2389) * _2390) + _2204;
    }
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    if (_1843.y == 0u)
    {
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2465;
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2465;
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2465;
        uvec4 _2480 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2481 = _2480.x;
        uint _2492 = uint((float(_2480.y) * floor(float(uint(cbSceneParam._m0[85u].y * _695) / _2481))) + floor(float(uint(cbSceneParam._m0[85u].x * _694) / _2481)));
        float _2502 = (log2(_2468 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2503 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        uint _2506 = uint(isnan(14.0) ? _2503 : (isnan(_2503) ? 14.0 : min(_2503, 14.0)));
        uvec4 _2511 = texelFetch(g_lightClusterGridBuffer, int(((_2506 << 2u) + (_2492 << 6u)) >> 2u));
        uint _2512 = _2511.x;
        uint _2513 = _2480.z;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        if (((((1u << ((_2513 >> 4u) & 15u)) + 4294967295u) & _2512) == 0u) || ((_2513 & 240u) == 0u))
        {
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
        }
        else
        {
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            uint _2772 = 0u;
            uint _2781;
            bool _2782;
            for (;;)
            {
                _2781 = texelFetch(g_lightClassification, int((((_2506 << 5u) + (_2492 << 9u)) + (_2772 << 2u)) >> 2u)).x;
                _2782 = _2781 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2782)
                {
                    frontier_phi_66_pred = _2766;
                    frontier_phi_66_pred_1 = _2771;
                    frontier_phi_66_pred_2 = _2770;
                    frontier_phi_66_pred_3 = _2769;
                    frontier_phi_66_pred_4 = _2768;
                    frontier_phi_66_pred_5 = _2767;
                }
                else
                {
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    uint _2917;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2768;
                    _2914 = _2769;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2781;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    for (;;)
                    {
                        uint _2921 = uint(findLSB(_2917)) + (_2772 << 5u);
                        uint _2918 = (_2917 + 4294967295u) & _2917;
                        uint _2923 = _2921 * 48u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2943 = (_2921 * 48u) + 4u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2962 = (_2921 * 48u) + 8u;
                        vec3 _2973 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x));
                        float _2977 = _2937.x - _2466;
                        float _2978 = _2937.y - _2467;
                        float _2979 = _2937.z - _2468;
                        float _2980 = dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979));
                        float _2983 = inversesqrt(_2980);
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2987 = dot(vec3(_713, _716, _719), vec3(_2984, _2985, _2986));
                        float _2992 = 1.0 - (_2980 * _2937.w);
                        float _4360 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _2994 = sqrt(_2980) * _2956.w;
                        float _2997 = 1.39999997615814208984375 / (_2994 + 1.39999997615814208984375);
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2987) + _2998;
                        float _3004 = _2994 * _2994;
                        float _3008 = ((isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))) * _2993) / ((_3004 * 0.699999988079071044921875) + 1.0);
                        float _3012 = (-0.0) - _2466;
                        float _3013 = (-0.0) - _2467;
                        float _3014 = (-0.0) - _2468;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3029 = exp2(log2(1.0 / ((_3004 * 3.5) + 5.0)) * 0.25);
                        float _3030 = 1.0 - _773;
                        float _3037 = sqrt(1.0 - ((1.0 - (_3030 * _3030)) * (1.0 - (_3029 * _3029))));
                        float _3038 = _3037 * _3037;
                        float _3039 = _3038 * _3038;
                        float _3040 = _3019 + _2984;
                        float _3041 = _3020 + _2985;
                        float _3042 = _3021 + _2986;
                        float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
                        float _3050 = dot(vec3(_713, _716, _719), vec3(_3019, _3020, _3021));
                        float _4376 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3053 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3054 = dot(vec3(_713, _716, _719), vec3(_3046 * _3040, _3046 * _3041, _3046 * _3042));
                        float _4387 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3057 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3061 = ((_3057 * _3057) * (_3039 + (-1.0))) + 1.0;
                        float _3062 = _2997 * _3038;
                        float _3063 = _3062 * _3062;
                        float _3066 = ((1.0 - _3063) * _2987) + _3063;
                        float _4398 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3067 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3068 = 1.0 - _3038;
                        float _3078 = (0.5 / (((_3067 * ((_3053 * _3068) + _3038)) + 9.9999999392252902907785028219223e-09) + (((_3067 * _3068) + _3038) * _3053))) * _3067;
                        float _4409 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3089 = (((_3039 * 3.1415927410125732421875) * (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) / ((_3061 * _3061) * ((_3004 * 2.1991131305694580078125) + 3.141590118408203125))) * _2993;
                        _2841 = (_3008 * _2956.x) + _2914;
                        _2842 = (_3008 * _2956.y) + _2915;
                        _2843 = (_3008 * _2956.z) + _2916;
                        _2838 = (_3089 * _2973.x) + _2911;
                        _2839 = (_3089 * _2973.y) + _2912;
                        _2840 = (_3089 * _2973.z) + _2913;
                        if (_2918 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2840;
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2918;
                        }
                    }
                    frontier_phi_66_pred = _2838;
                    frontier_phi_66_pred_1 = _2843;
                    frontier_phi_66_pred_2 = _2842;
                    frontier_phi_66_pred_3 = _2841;
                    frontier_phi_66_pred_4 = _2840;
                    frontier_phi_66_pred_5 = _2839;
                }
                _2614 = frontier_phi_66_pred;
                _2624 = frontier_phi_66_pred_1;
                _2622 = frontier_phi_66_pred_2;
                _2620 = frontier_phi_66_pred_3;
                _2618 = frontier_phi_66_pred_4;
                _2616 = frontier_phi_66_pred_5;
                uint _2773 = _2772 + 1u;
                if (_2773 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2766 = _2614;
                    _2767 = _2616;
                    _2768 = _2618;
                    _2769 = _2620;
                    _2770 = _2622;
                    _2771 = _2624;
                    _2772 = _2773;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
        }
        uvec4 _2627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2628 = _2627.z;
        uint _2630 = (_2628 >> 8u) & 15u;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((4294967295u << _2630) & _2512) == 0u)
        {
            _2734 = _2613;
            _2736 = _2615;
            _2738 = _2617;
            _2740 = _2619;
            _2742 = _2621;
            _2744 = _2623;
        }
        else
        {
            float _2759 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
            float _2760 = _2759 * _2466;
            float _2761 = _2759 * _2467;
            float _2762 = _2759 * _2468;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2630 < ((_2628 >> 12u) & 15u))
            {
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2894 = _2613;
                float _2895 = _2615;
                float _2896 = _2617;
                float _2897 = _2619;
                float _2898 = _2621;
                float _2899 = _2623;
                uint _2900 = _2630;
                uint _2909;
                bool _2910;
                for (;;)
                {
                    _2909 = texelFetch(g_lightClassification, int((((_2506 << 5u) + (_2492 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                    _2910 = _2909 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2910)
                    {
                        frontier_phi_77_pred = _2899;
                        frontier_phi_77_pred_1 = _2898;
                        frontier_phi_77_pred_2 = _2897;
                        frontier_phi_77_pred_3 = _2896;
                        frontier_phi_77_pred_4 = _2895;
                        frontier_phi_77_pred_5 = _2894;
                    }
                    else
                    {
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3116 = _2894;
                        float _3117 = _2895;
                        float _3118 = _2896;
                        float _3119 = _2897;
                        float _3120 = _2898;
                        float _3121 = _2899;
                        uint _3122 = _2909;
                        uint _3123;
                        vec4 _3148;
                        float _3149;
                        vec4 _3164;
                        vec3 _3176;
                        vec4 _3191;
                        vec4 _3206;
                        float _3252;
                        bool _3253;
                        for (;;)
                        {
                            uint _3133 = ((_2900 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3122));
                            _3123 = (_3122 + 4294967295u) & _3122;
                            uint _3135 = _3133 * 40u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3149 = _3148.w;
                            uint _3151 = (_3133 * 40u) + 4u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3166 = (_3133 * 40u) + 8u;
                            _3176 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x));
                            uint _3178 = (_3133 * 40u) + 16u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3193 = (_3133 * 40u) + 20u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3208 = (_3133 * 40u) + 24u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3227 = (_3133 * 40u) + 28u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3252 = fma(_2468, _3240.z, fma(_2467, _3240.y, _3240.x * _2466)) + _3240.w;
                            _3253 = !((fma(_2468, _3221.z, fma(_2467, _3221.y, _3221.x * _2466)) + _3221.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3253)
                            {
                                float _3280 = _3148.x - _2466;
                                float _3281 = _3148.y - _2467;
                                float _3282 = _3148.z - _2468;
                                float _3283 = dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282));
                                float _3286 = inversesqrt(_3283);
                                float _3287 = _3286 * _3280;
                                float _3288 = _3286 * _3281;
                                float _3289 = _3286 * _3282;
                                float _3293 = 1.0 - (_3283 / (_3149 * _3149));
                                float _4420 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3298 = sqrt(_3283) * _3164.w;
                                float _3300 = 1.39999997615814208984375 / (_3298 + 1.39999997615814208984375);
                                float _3301 = _3300 * _3300;
                                float _3304 = ((1.0 - _3301) * dot(vec3(_3287, _3288, _3289), vec3(_713, _716, _719))) + _3301;
                                float _3307 = _3298 * _3298;
                                float _3311 = (fma(_2468, _3191.z, fma(_2467, _3191.y, _3191.x * _2466)) + _3191.w) / _3252;
                                float _3312 = (fma(_2468, _3206.z, fma(_2467, _3206.y, _3206.x * _2466)) + _3206.w) / _3252;
                                float _3316 = 1.0 - dot(vec2(_3311, _3312), vec2(_3311, _3312));
                                float _4436 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3318 = _3317 * (((isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))) * _3294) / ((_3307 * 0.699999988079071044921875) + 1.0));
                                float _3330 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                                float _3331 = 1.0 - _773;
                                float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                                float _3339 = _3338 * _3338;
                                float _3340 = _3339 * _3339;
                                float _3341 = _3287 - _2760;
                                float _3342 = _3288 - _2761;
                                float _3343 = _3289 - _2762;
                                float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                                float _3351 = dot(vec3(_713, _716, _719), vec3((-0.0) - _2760, (-0.0) - _2761, (-0.0) - _2762));
                                float _4447 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3354 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3355 = dot(vec3(_713, _716, _719), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                                float _4458 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                                float _3363 = _3300 * _3339;
                                float _3364 = _3363 * _3363;
                                float _3370 = ((1.0 - _3364) * dot(vec3(_713, _716, _719), vec3(_3287, _3288, _3289))) + _3364;
                                float _4469 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3372 = 1.0 - _3339;
                                float _3382 = (0.5 / (((_3371 * ((_3354 * _3372) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3339) * _3354))) * _3371;
                                float _4480 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3392 = (_3317 * _3294) * (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) / ((_3362 * _3362) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3318 * _3164.y;
                                frontier_phi_83_pred_1 = _3318 * _3164.x;
                                frontier_phi_83_pred_2 = _3392 * _3176.z;
                                frontier_phi_83_pred_3 = _3392 * _3176.y;
                                frontier_phi_83_pred_4 = _3392 * _3176.x;
                                frontier_phi_83_pred_5 = _3318 * _3164.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3400 = frontier_phi_83_pred;
                            _3399 = frontier_phi_83_pred_1;
                            _3398 = frontier_phi_83_pred_2;
                            _3397 = frontier_phi_83_pred_3;
                            _3396 = frontier_phi_83_pred_4;
                            _3401 = frontier_phi_83_pred_5;
                            _3106 = _3399 + _3119;
                            _3107 = _3400 + _3120;
                            _3108 = _3401 + _3121;
                            _3103 = _3396 + _3116;
                            _3104 = _3397 + _3117;
                            _3105 = _3398 + _3118;
                            if (_3123 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3123;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3108;
                        frontier_phi_77_pred_1 = _3107;
                        frontier_phi_77_pred_2 = _3106;
                        frontier_phi_77_pred_3 = _3105;
                        frontier_phi_77_pred_4 = _3104;
                        frontier_phi_77_pred_5 = _3103;
                    }
                    _2745 = frontier_phi_77_pred;
                    _2743 = frontier_phi_77_pred_1;
                    _2741 = frontier_phi_77_pred_2;
                    _2739 = frontier_phi_77_pred_3;
                    _2737 = frontier_phi_77_pred_4;
                    _2735 = frontier_phi_77_pred_5;
                    uint _2901 = _2900 + 1u;
                    if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2894 = _2735;
                        _2895 = _2737;
                        _2896 = _2739;
                        _2897 = _2741;
                        _2898 = _2743;
                        _2899 = _2745;
                        _2900 = _2901;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2739;
                frontier_phi_58_59_ladder_1 = _2745;
                frontier_phi_58_59_ladder_2 = _2743;
                frontier_phi_58_59_ladder_3 = _2741;
                frontier_phi_58_59_ladder_4 = _2737;
                frontier_phi_58_59_ladder_5 = _2735;
            }
            else
            {
                frontier_phi_58_59_ladder = _2617;
                frontier_phi_58_59_ladder_1 = _2623;
                frontier_phi_58_59_ladder_2 = _2621;
                frontier_phi_58_59_ladder_3 = _2619;
                frontier_phi_58_59_ladder_4 = _2615;
                frontier_phi_58_59_ladder_5 = _2613;
            }
            _2734 = frontier_phi_58_59_ladder_5;
            _2736 = frontier_phi_58_59_ladder_4;
            _2738 = frontier_phi_58_59_ladder;
            _2740 = frontier_phi_58_59_ladder_3;
            _2742 = frontier_phi_58_59_ladder_2;
            _2744 = frontier_phi_58_59_ladder_1;
        }
        float _2749 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2525 = (_2749 * _2740) + _1977;
        _2527 = (_2749 * _2742) + _1979;
        _2529 = (_2749 * _2744) + _1981;
        _2531 = ((_2734 * 0.039999999105930328369140625) * _2749) + _2310;
        _2533 = ((_2736 * 0.039999999105930328369140625) * _2749) + _2312;
        _2535 = ((_2738 * 0.039999999105930328369140625) * _2749) + _2314;
    }
    else
    {
        _2525 = _1977;
        _2527 = _1979;
        _2529 = _1981;
        _2531 = _2310;
        _2533 = _2312;
        _2535 = _2314;
    }
    float _4496 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4507 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4518 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _2552 = ((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2525 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _757))) + ((_2531 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2553 = ((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2527 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _757))) + ((_2533 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2554 = ((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2529 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _757))) + ((_2535 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    uint _2555 = _262 + 6u;
    float _2563 = _694 / cbSceneParam._m0[86u].x;
    float _2564 = _695 / cbSceneParam._m0[86u].y;
    vec4 _2578 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2563, _2564, (log2((isnan(cbSceneParam._m0[77u].w) ? _615 : (isnan(_615) ? cbSceneParam._m0[77u].w : min(_615, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2580 = _2578.x;
    float _2581 = _2578.y;
    float _2582 = _2578.z;
    float _2583 = _2578.w;
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    if (_615 > cbSceneParam._m0[78u].w)
    {
        float _2638 = isnan(_615) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _615 : min(cbSceneParam._m0[80u].w, _615));
        float _2639 = _2638 / _615;
        float _2650 = _2639 * _667;
        float _2651 = _668 * _2639;
        float _2652 = (-0.0) - _2651;
        float _2654 = _2639 * _669;
        float _2656 = (cbSceneParam._m0[77u].w * _2652) / _2638;
        float _2657 = _2656 + cbSceneParam._m0[79u].w;
        float _2658 = cbSceneParam._m0[79u].w - _2651;
        float _2664 = sqrt(((_2650 * _2650) + (_2651 * _2651)) + (_2654 * _2654));
        float _2667 = (1.0 - (cbSceneParam._m0[77u].w / _2638)) * _2664;
        float _2672 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2674 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2851;
        if (abs((_2652 - _2656) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2851 = ((((_2657 > 0.0) ? exp2(_2672 * _2657) : (2.0 - exp2(_2674 * _2657))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2667;
        }
        else
        {
            float _2795 = 1.0 / cbSceneParam._m0[80u].x;
            float _2796 = isnan(_2658) ? _2657 : (isnan(_2657) ? _2658 : max(_2657, _2658));
            float _2797 = isnan(_2658) ? _2657 : (isnan(_2657) ? _2658 : min(_2657, _2658));
            float _2806 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : min(_2796, 0.0));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            _2851 = ((abs(_2664 / _2652) * cbSceneParam._m0[80u].y) * ((((_2806 - _2807) * 2.0) - ((exp2(_2672 * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0)))) - exp2(_2672 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))))) * _2795)) - ((exp2(_2674 * _2806) - exp2(_2674 * _2807)) * _2795))) + (_2667 * cbSceneParam._m0[80u].z);
        }
        vec4 _2853 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2563, _2564, 1.0), 0.0);
        float _2862 = exp2((_2851 * (-1.44269502162933349609375)) * (1.0 - _2853.w));
        float _2863 = log2(_2862);
        float _2879 = log2(_2583);
        _2676 = (exp2(_2879 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].x)) * _2853.x) / cbSceneParam._m0[78u].x)) + _2580;
        _2678 = (exp2(_2879 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].y)) * _2853.y) / cbSceneParam._m0[78u].y)) + _2581;
        _2680 = (exp2(_2879 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].z)) * _2853.z) / cbSceneParam._m0[78u].z)) + _2582;
        _2682 = _2862 * _2583;
    }
    else
    {
        _2676 = _2580;
        _2678 = _2581;
        _2680 = _2582;
        _2682 = _2583;
    }
    bool _2889;
    vec4 _2692;
    vec4 _2714;
    float _2716;
    float _2720;
    float _2721;
    float _2722;
    float _2723;
    bool _2733;
    for (;;)
    {
        _2692 = cbMatDynParam._m0[0u];
        float _2694 = roundEven(_2692.y);
        bool _2695 = _2694 == 3.0;
        float _2696 = log2(_2682);
        float _2703 = exp2(_2696 * cbSceneParam._m0[78u].x) * _2552;
        float _2704 = exp2(_2696 * cbSceneParam._m0[78u].y) * _2553;
        float _2705 = exp2(_2696 * cbSceneParam._m0[78u].z) * _2554;
        float _2712 = _683 + (-0.5);
        _2714 = cbMtdParam._m0[1u];
        _2716 = _2714.y * _2712;
        float _2719 = (_2694 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2720 = _2719 * (_2695 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2676)));
        _2721 = _2719 * (_2695 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2678)));
        _2722 = _2719 * (_2695 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2680)));
        _2723 = _2712 * 0.999000012874603271484375;
        _2733 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2733)
        {
            if ((cbInstanceData._m0[_262 + 7u].x + _2723) < 0.5)
            {
                _2889 = true;
                break;
            }
        }
        uint _2830 = _732 + uint(_2692.w);
        if ((cbInstanceData._m0[_2830].w < 1.0) && ((cbInstanceData._m0[_2830].w + _2723) < 0.5))
        {
            _2889 = true;
            break;
        }
        if ((_2716 + 1.0) < _2714.x)
        {
            _2889 = true;
            break;
        }
        _2889 = false;
        break;
    }
    float _3094;
    if (_2889)
    {
        discard_state = true;
        _3094 = 0.0;
    }
    else
    {
        _3094 = cbInstanceData._m0[_2555].w;
    }
    SV_Target.x = _2720;
    SV_Target.y = _2721;
    SV_Target.z = _2722;
    SV_Target.w = _3094;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2555].w;
    discard_exit();
}


