#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1623;
float _4262;
float _4263;
float _4264;
float _4265;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4274 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4285 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4296 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _433 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _447 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _464 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_435 - _447) * cbMtdParam._m0[24u].z) + _447) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4307 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _472 = (_465 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _473 = (_465 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _474 = (_465 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _513 = _511.x;
    float _523 = dot(vec4(_513, _511.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _537 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_513 - _523) * cbMtdParam._m0[24u].z) + _523) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4318 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _545 = (_538 * ((_491.x * cbMtdParam._m0[13u].x) - _472)) + _472;
    float _546 = (_538 * ((_491.y * cbMtdParam._m0[13u].y) - _473)) + _473;
    float _547 = (_538 * ((_491.z * cbMtdParam._m0[13u].z) - _474)) + _474;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _584 = _582.x;
    float _594 = dot(vec4(_584, _582.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _606 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _395.z) * 2.0) - ((((_584 - _594) * cbMtdParam._m0[24u].z) + _594) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4329 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _614 = (_607 * ((_565.x * cbMtdParam._m0[14u].x) - _545)) + _545;
    float _615 = (_607 * ((_565.y * cbMtdParam._m0[14u].y) - _546)) + _546;
    float _616 = (_607 * ((_565.z * cbMtdParam._m0[14u].z) - _547)) + _547;
    float _620 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _614;
    float _623 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _615;
    float _626 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _616;
    float _633 = ((_614 - _620) * (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) + _620;
    float _634 = ((_615 - _623) * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) + _623;
    float _635 = ((_616 - _626) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) + _626;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _694 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _696 = _694.x;
    float _697 = _694.y;
    float _698 = _694.z;
    float _705 = ((_677.x - _696) * _465) + _696;
    float _706 = ((_677.y - _697) * _465) + _697;
    float _707 = ((_677.z - _698) * _465) + _698;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _730 = ((_719.x - _705) * _538) + _705;
    float _731 = ((_719.y - _706) * _538) + _706;
    float _732 = ((_719.z - _707) * _538) + _707;
    vec4 _744 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _757 = ((_744.z - _732) * _607) + _732;
    float _760 = ((((_744.x - _730) * _607) + _730) * 2.0) + (-1.0);
    float _761 = ((((_744.y - _731) * _607) + _731) * 2.0) + (-1.0);
    float _762 = dot(vec2(_760, _761), vec2(_760, _761));
    float _4340 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _767 = sqrt(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))));
    vec4 _785 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _797 = (_760 + ((((_652.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_785.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _798 = (_761 + ((((_652.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_785.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _801 = fma(_767, _262, fma(_798, _269, _797 * _255));
    float _804 = fma(_767, _263, fma(_798, _270, _797 * _256));
    float _807 = fma(_767, _264, fma(_798, _271, _797 * _257));
    float _811 = inversesqrt(dot(vec3(_801, _804, _807), vec3(_801, _804, _807)));
    vec4 _838 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _840 = _838.x;
    float _841 = 1.0 - _840;
    float _847 = (cbMtdParam._m0[19u].x + dot(vec4(_811 * _801, _811 * _804, _811 * _807, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_840 - _841) * cbMtdParam._m0[24u].w) + _841) * cbMtdParam._m0[21u].z);
    float _4351 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _848 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _850 = (-0.0) - cbMtdParam._m0[24u].x;
    float _852 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _852 : (isnan(_852) ? 1.0 : min(_852, 1.0));
    float _860 = _848 - ((_848 * TEXCOORD_8.x) * _853);
    float _861 = _848 - ((_848 * TEXCOORD_8.y) * _853);
    float _862 = _848 - ((_848 * TEXCOORD_8.z) * _853);
    float _869 = (_860 * (cbMtdParam._m0[17u].x - _633)) + _633;
    float _870 = (_861 * (cbMtdParam._m0[17u].y - _634)) + _634;
    float _871 = (_862 * (cbMtdParam._m0[17u].z - _635)) + _635;
    float _886 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _887 = _886 * TEXCOORD.z;
    float _888 = _886 * TEXCOORD.w;
    vec4 _900 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _887) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _888) + cbTextureTilingScale._m0[19u].w));
    float _902 = _900.x;
    float _903 = 1.0 - _902;
    float _931 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_902 - _903) * cbMtdParam._m0[24u].y) + _903) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4372 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _932 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _940 = ((((cbMtdParam._m0[10u].x - _869) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _932) + _869;
    float _941 = ((((cbMtdParam._m0[10u].y - _870) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _932) + _870;
    float _942 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _871)) * _932) + _871;
    float _947 = (((_652.z - _757) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _757;
    float _951 = ((_785.z - _947) * cbMtdParam._m0[19u].w) + _947;
    vec4 _965 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _972 = (_965.x * 2.0) + (-1.0);
    float _973 = (_965.y * 2.0) + (-1.0);
    float _974 = dot(vec2(_972, _973), vec2(_972, _973));
    float _4383 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _982 = ((_965.z - _951) * _860) + _951;
    float _985 = ((cbMtdParam._m0[23u].y - _982) * _932) + _982;
    vec4 _1006 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _887) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _888) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1012 = (_1006.x * 2.0) + (-1.0);
    float _1013 = (_1006.y * 2.0) + (-1.0);
    float _1014 = dot(vec2(_1012, _1013), vec2(_1012, _1013));
    float _4394 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1029 = ((sqrt(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) - _767) * _862) + _767;
    float _1032 = (((_972 - _797) * _860) + _797) + (cbMtdParam._m0[21u].x * _797);
    float _1033 = (((_973 - _798) * _861) + _798) + (cbMtdParam._m0[21u].x * _798);
    float _1044 = (((_1012 - _1032) + (_1032 * cbMtdParam._m0[22u].z)) * _932) + _1032;
    float _1045 = (((_1013 - _1033) + (_1033 * cbMtdParam._m0[22u].z)) * _932) + _1033;
    float _1046 = (_932 * (sqrt(1.0 - (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) - _1029)) + _1029;
    float _1048 = cbMtdParam._m0[22u].x + _785.w;
    float _1051 = fma(_1046, _262, fma(_1045, _269, _1044 * _255));
    float _1054 = fma(_1046, _263, fma(_1045, _270, _1044 * _256));
    float _1057 = fma(_1046, _264, fma(_1045, _271, _1044 * _257));
    float _1061 = inversesqrt(dot(vec3(_1051, _1054, _1057), vec3(_1051, _1054, _1057)));
    float _1062 = _1061 * _1051;
    float _1063 = _1061 * _1054;
    float _1064 = _1061 * _1057;
    float _4405 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _1065 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _4416 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _4427 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4438 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4449 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _1083 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1134 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1124);
    float _1135 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1124);
    float _1136 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1124);
    float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
    float _1141 = _1134 * _1140;
    float _1142 = _1135 * _1140;
    float _1143 = _1136 * _1140;
    vec4 _1148 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1150 = _1148.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1304 = sqrt(((_1134 * _1134) + (_1135 * _1135)) + (_1136 * _1136));
        float _1310 = (cbMatDynParam._m0[5u].x * _1304) + cbMatDynParam._m0[5u].y;
        float _4460 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1315 = (cbMatDynParam._m0[5u].z * _1304) + cbMatDynParam._m0[5u].w;
        float _4471 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) - _1311)) + _1311) < ((_1150 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1161 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1162 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1180 = fma(_1064, cbSceneParam._m0[5u].z, fma(_1063, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1062));
    float _1183 = fma(_1064, cbSceneParam._m0[6u].z, fma(_1063, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1062));
    float _1186 = fma(_1064, cbSceneParam._m0[7u].z, fma(_1063, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1062));
    uint _1199 = _293 + 9u;
    uint _1200 = _1199 + uint(cbMatDynParam._m0[0u].w);
    float _1206 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * cbInstanceData._m0[_1200].x;
    float _1207 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * cbInstanceData._m0[_1200].y;
    float _1208 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * cbInstanceData._m0[_1200].z;
    float _4482 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1209 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _4493 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1210 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _4504 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1211 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    vec4 _1220 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1161, cbSceneParam._m0[86u].y * _1162));
    float _1224 = ((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * TEXCOORD_5.w) * _1220.x;
    float _1225 = dot(vec3(_1062, _1063, _1064), vec3(_1141, _1142, _1143));
    float _1228 = _1225 * 2.0;
    float _1232 = (_1228 * _1062) - _1141;
    float _1233 = (_1228 * _1063) - _1142;
    float _1234 = (_1228 * _1064) - _1143;
    float _1238 = abs(dot(vec3(_1141, _1142, _1143), vec3(_1062, _1063, _1064)));
    float _4515 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _1240 = sqrt(_1065);
    float _1253 = exp2((_1240 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1240 * 3.0));
    float _1285 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1293 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1622;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1347 = fma(_1293, cbModelParam._m0[26u].z, fma(_1289, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1285));
        float _1351 = fma(_1293, cbModelParam._m0[27u].z, fma(_1289, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1285));
        float _1355 = fma(_1293, cbModelParam._m0[28u].z, fma(_1289, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1285));
        float _1380 = _1285 + _1062;
        float _1381 = _1289 + _1063;
        float _1382 = _1293 + _1064;
        float _1392 = fma(_1382, cbModelParam._m0[26u].z, fma(_1381, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1380)) - _1347;
        float _1393 = fma(_1382, cbModelParam._m0[27u].z, fma(_1381, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1380)) - _1351;
        float _1394 = fma(_1382, cbModelParam._m0[28u].z, fma(_1381, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1380)) - _1355;
        float _1398 = inversesqrt(dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394)));
        float _1411 = ((_1398 * _1392) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1347 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1398 * _1393) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1351 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1398 * _1394) / cbModelParam._m0[34u].z) + ((((((_1355 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        float _1450 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1416.x + (-0.5));
        float _1452 = _1450 * (_1416.y + (-0.5));
        float _1453 = _1450 * (_1416.z + (-0.5));
        float _1460 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1423.x + (-0.5));
        float _1462 = _1460 * (_1423.y + (-0.5));
        float _1463 = _1460 * (_1423.z + (-0.5));
        float _1470 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1430.x + (-0.5));
        float _1472 = _1470 * (_1430.y + (-0.5));
        float _1473 = _1470 * (_1430.z + (-0.5));
        float _1480 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1437.x + (-0.5));
        float _1482 = _1480 * (_1437.y + (-0.5));
        float _1483 = _1480 * (_1437.z + (-0.5));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = _1451 * 0.5;
        float _1488 = _1461 * 0.5;
        float _1489 = _1471 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1504 = (dot(vec3(_1062, _1063, _1064), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4541 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1514 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4552 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4563 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_1516 + 1.0))) + _1521) * _1484;
        float _1531 = _1452 * 0.5;
        float _1532 = _1462 * 0.5;
        float _1533 = _1472 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_1062, _1063, _1064), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4574 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4585 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4596 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_1558 + 1.0))) + _1563) * _1485;
        float _1573 = _1453 * 0.5;
        float _1574 = _1463 * 0.5;
        float _1575 = _1473 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_1062, _1063, _1064), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4607 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4618 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4629 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_1600 + 1.0))) + _1605) * _1486;
        _1622 = _1453;
        _1624 = _1452;
        _1625 = _1451;
        _1626 = _1463;
        _1627 = _1462;
        _1628 = _1461;
        _1629 = _1473;
        _1630 = _1472;
        _1631 = _1471;
        _1632 = _1486;
        _1633 = _1485;
        _1634 = _1484;
        _1635 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1636 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1637 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
    }
    else
    {
        _1622 = _1623;
        _1624 = _1623;
        _1625 = _1623;
        _1626 = _1623;
        _1627 = _1623;
        _1628 = _1623;
        _1629 = _1623;
        _1630 = _1623;
        _1631 = _1623;
        _1632 = _1623;
        _1633 = _1623;
        _1634 = _1623;
        _1635 = 0.0;
        _1636 = 0.0;
        _1637 = 0.0;
    }
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1663 = fma(_1293, cbModelParam._m0[30u].z, fma(_1289, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1285));
        float _1667 = fma(_1293, cbModelParam._m0[31u].z, fma(_1289, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1285));
        float _1671 = fma(_1293, cbModelParam._m0[32u].z, fma(_1289, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1285));
        float _1694 = _1285 + _1062;
        float _1695 = _1289 + _1063;
        float _1696 = _1293 + _1064;
        float _1706 = fma(_1696, cbModelParam._m0[30u].z, fma(_1695, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1694)) - _1663;
        float _1707 = fma(_1696, cbModelParam._m0[31u].z, fma(_1695, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1694)) - _1667;
        float _1708 = fma(_1696, cbModelParam._m0[32u].z, fma(_1695, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1694)) - _1671;
        float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
        float _1725 = ((_1712 * _1706) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1663 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1726 = ((_1712 * _1707) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1667 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1727 = ((_1712 * _1708) / cbModelParam._m0[35u].z) + ((((((_1671 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1729 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1725, _1726, _1727), 0.0);
        vec4 _1736 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1725, _1726, _1727), 0.0);
        vec4 _1743 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1725, _1726, _1727), 0.0);
        vec4 _1750 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1725, _1726, _1727), 0.0);
        float _1762 = exp2((_1729.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1729.x + (-0.5));
        float _1764 = _1762 * (_1729.y + (-0.5));
        float _1765 = _1762 * (_1729.z + (-0.5));
        float _1772 = exp2((_1736.w + (-0.5)) * 20.0) * 2.0;
        float _1773 = _1772 * (_1736.x + (-0.5));
        float _1774 = _1772 * (_1736.y + (-0.5));
        float _1775 = _1772 * (_1736.z + (-0.5));
        float _1782 = exp2((_1743.w + (-0.5)) * 20.0) * 2.0;
        float _1783 = _1782 * (_1743.x + (-0.5));
        float _1784 = _1782 * (_1743.y + (-0.5));
        float _1785 = _1782 * (_1743.z + (-0.5));
        float _1792 = exp2((_1750.w + (-0.5)) * 20.0) * 2.0;
        float _1793 = _1792 * (_1750.x + (-0.5));
        float _1794 = _1792 * (_1750.y + (-0.5));
        float _1795 = _1792 * (_1750.z + (-0.5));
        float _1796 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1797 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1798 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1799 = _1763 * 0.5;
        float _1800 = _1773 * 0.5;
        float _1801 = _1783 * 0.5;
        float _1802 = dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801));
        float _1807 = (_1802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1802);
        float _1815 = (dot(vec3(_1062, _1063, _1064), vec3(_1807 * _1799, _1807 * _1800, _1807 * _1801)) + 1.0) * 0.5;
        float _4670 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1824 = sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801)) / (_1796 + 9.9999997473787516355514526367188e-06);
        float _4681 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _1826 = _1825 * 2.0;
        float _1830 = (1.0 - _1825) / (_1825 + 1.0);
        float _4692 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _1840 = ((((1.0 - _1831) * (_1826 + 2.0)) * exp2(log2(isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_1826 + 1.0))) + _1831) * _1796;
        float _1841 = _1764 * 0.5;
        float _1842 = _1774 * 0.5;
        float _1843 = _1784 * 0.5;
        float _1844 = dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843));
        float _1849 = (_1844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1844);
        float _1857 = (dot(vec3(_1062, _1063, _1064), vec3(_1849 * _1841, _1849 * _1842, _1849 * _1843)) + 1.0) * 0.5;
        float _4703 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1866 = sqrt(((_1842 * _1842) + (_1841 * _1841)) + (_1843 * _1843)) / (_1797 + 9.9999997473787516355514526367188e-06);
        float _4714 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _1868 = _1867 * 2.0;
        float _1872 = (1.0 - _1867) / (_1867 + 1.0);
        float _4725 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _1882 = ((((1.0 - _1873) * (_1868 + 2.0)) * exp2(log2(isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_1868 + 1.0))) + _1873) * _1797;
        float _1883 = _1765 * 0.5;
        float _1884 = _1775 * 0.5;
        float _1885 = _1785 * 0.5;
        float _1886 = dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885));
        float _1891 = (_1886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1886);
        float _1899 = (dot(vec3(_1062, _1063, _1064), vec3(_1891 * _1883, _1891 * _1884, _1891 * _1885)) + 1.0) * 0.5;
        float _4736 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1908 = sqrt(((_1884 * _1884) + (_1883 * _1883)) + (_1885 * _1885)) / (_1798 + 9.9999997473787516355514526367188e-06);
        float _4747 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _1910 = _1909 * 2.0;
        float _1914 = (1.0 - _1909) / (_1909 + 1.0);
        float _4758 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1915 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _1924 = ((((1.0 - _1915) * (_1910 + 2.0)) * exp2(log2(isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_1910 + 1.0))) + _1915) * _1798;
        _1932 = _1765;
        _1933 = _1764;
        _1934 = _1763;
        _1935 = _1775;
        _1936 = _1774;
        _1937 = _1773;
        _1938 = _1785;
        _1939 = _1784;
        _1940 = _1783;
        _1941 = _1798;
        _1942 = _1797;
        _1943 = _1796;
        _1944 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)));
        _1945 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)));
        _1946 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)));
    }
    else
    {
        _1932 = _1623;
        _1933 = _1623;
        _1934 = _1623;
        _1935 = _1623;
        _1936 = _1623;
        _1937 = _1623;
        _1938 = _1623;
        _1939 = _1623;
        _1940 = _1623;
        _1941 = _1623;
        _1942 = _1623;
        _1943 = _1623;
        _1944 = 0.0;
        _1945 = 0.0;
        _1946 = 0.0;
    }
    float _1956 = (cbModelParam._m0[1u].x * (_1944 - _1635)) + _1635;
    float _1957 = (cbModelParam._m0[1u].x * (_1945 - _1636)) + _1636;
    float _1958 = (cbModelParam._m0[1u].x * (_1946 - _1637)) + _1637;
    float _1979 = fma(_1958, cbSceneParam._m0[89u].z, fma(_1957, cbSceneParam._m0[89u].y, _1956 * cbSceneParam._m0[89u].x));
    float _1982 = fma(_1958, cbSceneParam._m0[90u].z, fma(_1957, cbSceneParam._m0[90u].y, _1956 * cbSceneParam._m0[90u].x));
    float _1985 = fma(_1958, cbSceneParam._m0[91u].z, fma(_1957, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1956));
    float _2000 = _1232 * 0.5;
    float _2001 = _1233 * 0.5;
    float _2002 = _1234 * 0.5;
    float _2003 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1934, _1937, _1940, _1943));
    float _2006 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1933, _1936, _1939, _1942));
    float _2009 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1932, _1935, _1938, _1941));
    float _2043;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2016 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1622, _1626, _1629, _1632));
        float _2020 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1624, _1627, _1630, _1633));
        float _2024 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1625, _1628, _1631, _1634));
        float _2031 = dot(vec4(cbModelParam._m0[39u]), vec4(_2000, _2001, _2002, 1.0));
        _2043 = dot(vec3(isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)), isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0)), isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2031) ? 0.0 : (isnan(0.0) ? _2031 : max(0.0, _2031))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2043 = 1.0;
    }
    float _2054;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2045 = dot(vec4(cbModelParam._m0[40u]), vec4(_2000, _2001, _2002, 1.0));
        _2054 = dot(vec3(isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)), isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2045) ? 0.0 : (isnan(0.0) ? _2045 : max(0.0, _2045))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2054 = 1.0;
    }
    float _2058 = (_2054 * cbModelParam._m0[1u].x) + (_2043 * (1.0 - cbModelParam._m0[1u].x));
    float _2068 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1065);
    float _2069 = isnan(_2068) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2068 : min(cbModelParam._m0[25u].z, _2068));
    float _2149;
    float _2151;
    float _2153;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2116 = fma(_1293, cbModelParam._m0[13u].z, fma(_1289, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1285)) + cbModelParam._m0[13u].w;
        float _2120 = fma(_1293, cbModelParam._m0[14u].z, fma(_1289, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1285)) + cbModelParam._m0[14u].w;
        float _2124 = fma(_1293, cbModelParam._m0[15u].z, fma(_1289, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1285)) + cbModelParam._m0[15u].w;
        float _2127 = fma(_1234, cbModelParam._m0[13u].z, fma(_1233, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1232));
        float _2130 = fma(_1234, cbModelParam._m0[14u].z, fma(_1233, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1232));
        float _2133 = fma(_1234, cbModelParam._m0[15u].z, fma(_1233, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1232));
        float _2161;
        if (_2127 > 0.0)
        {
            _2161 = abs((1.0 - _2116) / _2127);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2116 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2161 = frontier_phi_17_15_ladder;
        }
        float _2331;
        if (_2130 > 0.0)
        {
            _2331 = abs((1.0 - _2120) / _2130);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2120 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2331 = frontier_phi_26_22_ladder;
        }
        float _2626;
        if (_2133 > 0.0)
        {
            _2626 = abs((1.0 - _2124) / _2133);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2124 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2626 = frontier_phi_38_33_ladder;
        }
        float _2628 = isnan(_2331) ? _2161 : (isnan(_2161) ? _2331 : min(_2161, _2331));
        float _2629 = isnan(_2626) ? _2628 : (isnan(_2628) ? _2626 : min(_2628, _2626));
        float _2633 = (_2629 * _2127) + _2116;
        float _2634 = (_2629 * _2130) + _2120;
        float _2635 = (_2629 * _2133) + _2124;
        float _2636 = _2629 * 9.9999997473787516355514526367188e-05;
        float _2638 = (-1.0) - _2636;
        float _2640 = _2636 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2635 > _2640) || ((_2635 < _2638) || ((_2634 > _2640) || ((_2634 < _2638) || ((_2633 < _2638) || (_2633 > _2640))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2635, cbModelParam._m0[9u].z, fma(_2634, cbModelParam._m0[9u].y, _2633 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2635, cbModelParam._m0[10u].z, fma(_2634, cbModelParam._m0[10u].y, _2633 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2635, cbModelParam._m0[11u].z, fma(_2634, cbModelParam._m0[11u].y, _2633 * cbModelParam._m0[11u].x))), _2069);
            frontier_phi_16_38_ladder = _2780.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2780.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2780.x * cbModelParam._m0[1u].y;
        }
        _2149 = frontier_phi_16_38_ladder_2;
        _2151 = frontier_phi_16_38_ladder_1;
        _2153 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2137 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1232, _1233, _1234), _2069);
        _2149 = _2137.x * cbModelParam._m0[1u].y;
        _2151 = _2137.y * cbModelParam._m0[1u].y;
        _2153 = _2137.z * cbModelParam._m0[1u].y;
    }
    float _2157 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1065);
    float _2158 = isnan(_2157) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2157 : min(cbModelParam._m0[25u].w, _2157));
    float _2248;
    float _2250;
    float _2252;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2212 = fma(_1293, cbModelParam._m0[21u].z, fma(_1289, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1285)) + cbModelParam._m0[21u].w;
        float _2216 = fma(_1293, cbModelParam._m0[22u].z, fma(_1289, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1285)) + cbModelParam._m0[22u].w;
        float _2220 = fma(_1293, cbModelParam._m0[23u].z, fma(_1289, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1285)) + cbModelParam._m0[23u].w;
        float _2223 = fma(_1234, cbModelParam._m0[21u].z, fma(_1233, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1232));
        float _2226 = fma(_1234, cbModelParam._m0[22u].z, fma(_1233, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1232));
        float _2229 = fma(_1234, cbModelParam._m0[23u].z, fma(_1233, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1232));
        float _2336;
        if (_2223 > 0.0)
        {
            _2336 = abs((1.0 - _2212) / _2223);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2223 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2212 + 1.0) / _2223);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2336 = frontier_phi_28_24_ladder;
        }
        float _2653;
        if (_2226 > 0.0)
        {
            _2653 = abs((1.0 - _2216) / _2226);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2226 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2216 + 1.0) / _2226);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2653 = frontier_phi_40_35_ladder;
        }
        float _2980;
        if (_2229 > 0.0)
        {
            _2980 = abs((1.0 - _2220) / _2229);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2229 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2220 + 1.0) / _2229);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2980 = frontier_phi_50_47_ladder;
        }
        float _2982 = isnan(_2653) ? _2336 : (isnan(_2336) ? _2653 : min(_2336, _2653));
        float _2983 = isnan(_2980) ? _2982 : (isnan(_2982) ? _2980 : min(_2982, _2980));
        float _2987 = (_2983 * _2223) + _2212;
        float _2988 = (_2983 * _2226) + _2216;
        float _2989 = (_2983 * _2229) + _2220;
        float _2990 = _2983 * 9.9999997473787516355514526367188e-05;
        float _2991 = (-1.0) - _2990;
        float _2993 = _2990 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2989 > _2993) || ((_2989 < _2991) || ((_2988 > _2993) || ((_2988 < _2991) || ((_2987 < _2991) || (_2987 > _2993))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3107 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2989, cbModelParam._m0[17u].z, fma(_2988, cbModelParam._m0[17u].y, _2987 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2989, cbModelParam._m0[18u].z, fma(_2988, cbModelParam._m0[18u].y, _2987 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2989, cbModelParam._m0[19u].z, fma(_2988, cbModelParam._m0[19u].y, _2987 * cbModelParam._m0[19u].x))), _2158);
            frontier_phi_25_50_ladder = _3107.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3107.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3107.x * cbModelParam._m0[1u].z;
        }
        _2248 = frontier_phi_25_50_ladder_2;
        _2250 = frontier_phi_25_50_ladder_1;
        _2252 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2232 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1232, _1233, _1234), _2158);
        _2248 = _2232.x * cbModelParam._m0[1u].z;
        _2250 = _2232.y * cbModelParam._m0[1u].z;
        _2252 = _2232.z * cbModelParam._m0[1u].z;
    }
    float _2264 = ((((1.0 - _1253) * ((_1240 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1253 * _1240)) * _1224;
    float _2265 = _2264 * ((cbModelParam._m0[1u].w * (_2248 - _2149)) + _2149);
    float _2266 = _2264 * ((cbModelParam._m0[1u].w * (_2250 - _2151)) + _2151);
    float _2267 = _2264 * ((cbModelParam._m0[1u].w * (_2252 - _2153)) + _2153);
    float _2270 = fma(_2267, cbSceneParam._m0[89u].z, fma(_2266, cbSceneParam._m0[89u].y, _2265 * cbSceneParam._m0[89u].x));
    float _2273 = fma(_2267, cbSceneParam._m0[90u].z, fma(_2266, cbSceneParam._m0[90u].y, _2265 * cbSceneParam._m0[90u].x));
    float _2276 = fma(_2267, cbSceneParam._m0[91u].z, fma(_2266, cbSceneParam._m0[91u].y, _2265 * cbSceneParam._m0[91u].x));
    float _2310 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2314 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2318 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2322 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2323 = _2310 / _2322;
    float _2324 = _2314 / _2322;
    float _2325 = _2318 / _2322;
    float _2472;
    float _2473;
    float _2474;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2352 = ((uint(_2325 > cbSceneParam._m0[59u].y) + uint(_2325 > cbSceneParam._m0[59u].x)) + uint(_2325 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2353 = _2352 + 43u;
        uint _2361 = _2352 + 44u;
        uint _2369 = _2352 + 45u;
        uint _2377 = _2352 + 46u;
        float _2388 = fma(_2322, cbSceneParam._m0[_2353].w, fma(_2318, cbSceneParam._m0[_2353].z, fma(_2314, cbSceneParam._m0[_2353].y, _2310 * cbSceneParam._m0[_2353].x)));
        float _2392 = fma(_2322, cbSceneParam._m0[_2361].w, fma(_2318, cbSceneParam._m0[_2361].z, fma(_2314, cbSceneParam._m0[_2361].y, _2310 * cbSceneParam._m0[_2361].x)));
        float _2400 = fma(_2322, cbSceneParam._m0[_2377].w, fma(_2318, cbSceneParam._m0[_2377].z, fma(_2314, cbSceneParam._m0[_2377].y, _2310 * cbSceneParam._m0[_2377].x)));
        float _2405 = cbSceneParam._m0[33u].z * _2400;
        float _2407 = cbSceneParam._m0[33u].w * _2400;
        float _2410 = fma(_2322, cbSceneParam._m0[_2369].w, fma(_2318, cbSceneParam._m0[_2369].z, fma(_2314, cbSceneParam._m0[_2369].y, _2310 * cbSceneParam._m0[_2369].x))) / _2400;
        float _2458 = (cbSceneParam._m0[33u].x - sqrt(((_2324 * _2324) + (_2323 * _2323)) + (_2325 * _2325))) * cbSceneParam._m0[33u].y;
        float _4884 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2465 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2405 + _2388) / _2400, (_2407 + _2392) / _2400), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2407 + _2388) / _2400, (_2392 - _2405) / _2400), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2388 - _2405) / _2400, (_2392 - _2407) / _2400), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2388 - _2407) / _2400, (_2405 + _2392) / _2400), _2410), 0.0)).x), vec4(0.25)));
        _2472 = 1.0 - (_2465 * cbSceneParam._m0[34u].x);
        _2473 = 1.0 - (_2465 * cbSceneParam._m0[34u].y);
        _2474 = 1.0 - (_2465 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2472 = 1.0;
        _2473 = 1.0;
        _2474 = 1.0;
    }
    float _2538;
    float _2540;
    float _2542;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2526 = fma(_2322, cbSceneParam._m0[63u].w, fma(_2318, cbSceneParam._m0[63u].z, fma(_2314, cbSceneParam._m0[63u].y, _2310 * cbSceneParam._m0[63u].x)));
        float _2527 = fma(_2322, cbSceneParam._m0[60u].w, fma(_2318, cbSceneParam._m0[60u].z, fma(_2314, cbSceneParam._m0[60u].y, _2310 * cbSceneParam._m0[60u].x))) / _2526;
        float _2528 = fma(_2322, cbSceneParam._m0[61u].w, fma(_2318, cbSceneParam._m0[61u].z, fma(_2314, cbSceneParam._m0[61u].y, _2310 * cbSceneParam._m0[61u].x))) / _2526;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2527 >= cbSceneParam._m0[64u].x) && (_2528 >= cbSceneParam._m0[64u].y)) && (_2527 <= cbSceneParam._m0[64u].z)) && (_2528 <= cbSceneParam._m0[64u].w))
        {
            float _2666 = fma(_2322, cbSceneParam._m0[62u].w, fma(_2318, cbSceneParam._m0[62u].z, fma(_2314, cbSceneParam._m0[62u].y, _2310 * cbSceneParam._m0[62u].x))) / _2526;
            float _2670 = isnan(cbSceneParam._m0[41u].w) ? _2666 : (isnan(_2666) ? cbSceneParam._m0[41u].w : max(_2666, cbSceneParam._m0[41u].w));
            float _2713 = (cbSceneParam._m0[33u].x - sqrt(((_2324 * _2324) + (_2323 * _2323)) + (_2325 * _2325))) * cbSceneParam._m0[33u].y;
            float _4900 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
            float _2720 = (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2527, cbSceneParam._m0[33u].w + _2528), _2670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2527, _2528 - cbSceneParam._m0[33u].z), _2670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2527 - cbSceneParam._m0[33u].z, _2528 - cbSceneParam._m0[33u].w), _2670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2527 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2528), _2670), 0.0)).x), vec4(0.25)));
            float _2724 = 1.0 - (_2720 * cbSceneParam._m0[34u].x);
            float _2725 = 1.0 - (_2720 * cbSceneParam._m0[34u].y);
            float _2726 = 1.0 - (_2720 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2726) ? _2474 : (isnan(_2474) ? _2726 : min(_2474, _2726));
            frontier_phi_37_36_ladder_1 = isnan(_2725) ? _2473 : (isnan(_2473) ? _2725 : min(_2473, _2725));
            frontier_phi_37_36_ladder_2 = isnan(_2724) ? _2472 : (isnan(_2472) ? _2724 : min(_2472, _2724));
        }
        else
        {
            frontier_phi_37_36_ladder = _2474;
            frontier_phi_37_36_ladder_1 = _2473;
            frontier_phi_37_36_ladder_2 = _2472;
        }
        _2538 = frontier_phi_37_36_ladder_2;
        _2540 = frontier_phi_37_36_ladder_1;
        _2542 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2538 = _2472;
        _2540 = _2473;
        _2542 = _2474;
    }
    uvec4 _2547 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2549 = _2547.x * 14u;
    uint _2550 = _2549 + 13u;
    float _2557 = _1224 + (-1.0);
    float _2562 = (cbLight._m0[_2550].x * _2557) + 1.0;
    float _2563 = (cbLight._m0[_2550].y * _2557) + 1.0;
    float _2564 = (cbLight._m0[_2550].z * _2557) + 1.0;
    float _2565 = (cbLight._m0[_2550].w * _2557) + 1.0;
    uint _2566 = _2549 + 5u;
    float _2572 = isnan(1.0) ? _2563 : (isnan(_2563) ? 1.0 : min(_2563, 1.0));
    uint _2576 = _2549 + 4u;
    float _2585 = isnan(1.0) ? _2562 : (isnan(_2562) ? 1.0 : min(_2562, 1.0));
    uint _2589 = _2549 | 1u;
    float _2600 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_1062, _1063, _1064));
    float _2603 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_1062, _1063, _1064));
    float _4936 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _4947 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2608 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * 0.3183098733425140380859375;
    float _2610 = (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * 0.3183098733425140380859375;
    float _2617 = ((cbLight._m0[_2566].x * _2572) * _2610) + (((cbLight._m0[_2576].x * _2538) * _2585) * _2608);
    float _2618 = ((_2572 * cbLight._m0[_2566].y) * _2610) + (((cbLight._m0[_2576].y * _2540) * _2585) * _2608);
    float _2619 = ((_2572 * cbLight._m0[_2566].z) * _2610) + (((cbLight._m0[_2576].z * _2542) * _2585) * _2608);
    uvec4 _2623 = floatBitsToUint(cbLight._m0[_2549 + 12u]);
    bool _2625 = _2623.x == 0u;
    float _2727;
    float _2729;
    float _2731;
    if (_2625)
    {
        _2727 = _2617;
        _2729 = _2618;
        _2731 = _2619;
    }
    else
    {
        uint _2735 = _2549 + 6u;
        float _2751 = (dot(vec3(cbLight._m0[_2549 + 2u].xyz), vec3(_1062, _1063, _1064)) * 0.5) + 0.5;
        float _2752 = _2751 * _2751;
        float _4958 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2753 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
        float _2754 = isnan(1.0) ? _2564 : (isnan(_2564) ? 1.0 : min(_2564, 1.0));
        _2727 = (((cbLight._m0[_2735].x * 0.3183098733425140380859375) * _2753) * _2754) + _2617;
        _2729 = (((cbLight._m0[_2735].y * 0.3183098733425140380859375) * _2753) * _2754) + _2618;
        _2731 = (((cbLight._m0[_2735].z * 0.3183098733425140380859375) * _2753) * _2754) + _2619;
    }
    bool _2734 = _2623.y == 0u;
    float _2789;
    float _2791;
    float _2793;
    if (_2734)
    {
        _2789 = _2727;
        _2791 = _2729;
        _2793 = _2731;
    }
    else
    {
        uint _2951 = _2549 + 7u;
        float _2967 = (dot(vec3(cbLight._m0[_2549 + 3u].xyz), vec3(_1062, _1063, _1064)) * 0.5) + 0.5;
        float _2968 = _2967 * _2967;
        float _4974 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2969 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
        float _2970 = isnan(1.0) ? _2565 : (isnan(_2565) ? 1.0 : min(_2565, 1.0));
        _2789 = (((cbLight._m0[_2951].x * 0.3183098733425140380859375) * _2969) * _2970) + _2727;
        _2791 = (((cbLight._m0[_2951].y * 0.3183098733425140380859375) * _2969) * _2970) + _2729;
        _2793 = (((cbLight._m0[_2951].z * 0.3183098733425140380859375) * _2969) * _2970) + _2731;
    }
    uint _2796 = _2549 + 8u;
    float _2809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _1065) * 0.949999988079071044921875);
    float _2810 = _2809 * _2809;
    float _2811 = cbLight._m0[_2549].x + _1141;
    float _2812 = cbLight._m0[_2549].y + _1142;
    float _2813 = cbLight._m0[_2549].z + _1143;
    float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
    float _2818 = _2817 * _2811;
    float _2819 = _2817 * _2812;
    float _2820 = _2817 * _2813;
    float _2821 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_2549].xyz));
    float _4990 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
    float _2824 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
    float _5001 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _2825 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
    float _2826 = dot(vec3(_1062, _1063, _1064), vec3(_2818, _2819, _2820));
    float _5012 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
    float _2829 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
    float _2830 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2818, _2819, _2820));
    float _5023 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2834 = _2810 * _2810;
    float _2838 = ((_2829 * _2829) * (_2834 + (-1.0))) + 1.0;
    float _2849 = (exp2(log2(1.0 - (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2850 = 1.0 - _2810;
    float _2861 = (0.5 / (((_2825 * ((_2824 * _2850) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _2850) + _2810) * _2824))) * _2824;
    float _5034 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
    float _2863 = (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_2834 / ((_2838 * _2838) * 3.141590118408203125));
    uint _2877 = _2549 + 9u;
    float _2888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _1065) * 0.949999988079071044921875);
    float _2889 = _2888 * _2888;
    float _2890 = cbLight._m0[_2589].x + _1141;
    float _2891 = cbLight._m0[_2589].y + _1142;
    float _2892 = cbLight._m0[_2589].z + _1143;
    float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
    float _2897 = _2896 * _2890;
    float _2898 = _2896 * _2891;
    float _2899 = _2896 * _2892;
    float _2900 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_2589].xyz));
    float _5045 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
    float _2903 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
    float _2904 = dot(vec3(_1062, _1063, _1064), vec3(_2897, _2898, _2899));
    float _5056 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
    float _2907 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
    float _2908 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2897, _2898, _2899));
    float _5067 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
    float _2912 = _2889 * _2889;
    float _2916 = ((_2907 * _2907) * (_2912 + (-1.0))) + 1.0;
    float _2925 = (exp2(log2(1.0 - (isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2926 = 1.0 - _2889;
    float _2936 = (0.5 / (((_2825 * ((_2903 * _2926) + _2889)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _2926) + _2889) * _2903))) * _2903;
    float _5078 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
    float _2938 = (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_2912 / ((_2916 * _2916) * 3.141590118408203125));
    float _2948 = (((_2925 * cbLight._m0[_2877].x) * _2938) * _2572) + ((((cbLight._m0[_2796].x * _2538) * _2849) * _2863) * _2585);
    float _2949 = (((_2925 * cbLight._m0[_2877].y) * _2938) * _2572) + ((((cbLight._m0[_2796].y * _2540) * _2849) * _2863) * _2585);
    float _2950 = (((_2925 * cbLight._m0[_2877].z) * _2938) * _2572) + ((((cbLight._m0[_2796].z * _2542) * _2849) * _2863) * _2585);
    float _3006;
    float _3008;
    float _3010;
    if (_2625)
    {
        _3006 = _2948;
        _3008 = _2949;
        _3010 = _2950;
    }
    else
    {
        uint _3012 = _2549 + 2u;
        uint _3016 = _2549 + 10u;
        float _3030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3012].w)) * _1065) * 0.949999988079071044921875);
        float _3031 = _3030 * _3030;
        float _3032 = cbLight._m0[_3012].x + _1141;
        float _3033 = cbLight._m0[_3012].y + _1142;
        float _3034 = cbLight._m0[_3012].z + _1143;
        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
        float _3039 = _3038 * _3032;
        float _3040 = _3038 * _3033;
        float _3041 = _3038 * _3034;
        float _3042 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_3012].xyz));
        float _5089 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        float _3045 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
        float _3046 = dot(vec3(_1062, _1063, _1064), vec3(_3039, _3040, _3041));
        float _5100 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3049 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
        float _3050 = dot(vec3(cbLight._m0[_3012].xyz), vec3(_3039, _3040, _3041));
        float _5111 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3054 = _3031 * _3031;
        float _3058 = ((_3049 * _3049) * (_3054 + (-1.0))) + 1.0;
        float _3067 = (exp2(log2(1.0 - (isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3068 = 1.0 - _3031;
        float _3078 = (0.5 / (((_2825 * ((_3045 * _3068) + _3031)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _3068) + _3031) * _3045))) * _3045;
        float _5122 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
        float _3080 = (isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0))) * (_3054 / ((_3058 * _3058) * 3.141590118408203125));
        float _3081 = isnan(1.0) ? _2564 : (isnan(_2564) ? 1.0 : min(_2564, 1.0));
        _3006 = (((_3067 * cbLight._m0[_3016].x) * _3080) * _3081) + _2948;
        _3008 = (((_3067 * cbLight._m0[_3016].y) * _3080) * _3081) + _2949;
        _3010 = (((_3067 * cbLight._m0[_3016].z) * _3080) * _3081) + _2950;
    }
    float _3112;
    float _3114;
    float _3116;
    if (_2734)
    {
        _3112 = _3006;
        _3114 = _3008;
        _3116 = _3010;
    }
    else
    {
        uint _3123 = _2549 + 3u;
        uint _3127 = _2549 + 11u;
        float _3141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3123].w)) * _1065) * 0.949999988079071044921875);
        float _3142 = _3141 * _3141;
        float _3143 = cbLight._m0[_3123].x + _1141;
        float _3144 = cbLight._m0[_3123].y + _1142;
        float _3145 = cbLight._m0[_3123].z + _1143;
        float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
        float _3150 = _3149 * _3143;
        float _3151 = _3149 * _3144;
        float _3152 = _3149 * _3145;
        float _3153 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_3123].xyz));
        float _5138 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
        float _3156 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
        float _3157 = dot(vec3(_1062, _1063, _1064), vec3(_3150, _3151, _3152));
        float _5149 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
        float _3160 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
        float _3161 = dot(vec3(cbLight._m0[_3123].xyz), vec3(_3150, _3151, _3152));
        float _5160 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
        float _3165 = _3142 * _3142;
        float _3169 = ((_3160 * _3160) * (_3165 + (-1.0))) + 1.0;
        float _3178 = (exp2(log2(1.0 - (isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3179 = 1.0 - _3142;
        float _3189 = (0.5 / (((_2825 * ((_3156 * _3179) + _3142)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _3179) + _3142) * _3156))) * _3156;
        float _5171 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
        float _3191 = (isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0))) * (_3165 / ((_3169 * _3169) * 3.141590118408203125));
        float _3192 = isnan(1.0) ? _2565 : (isnan(_2565) ? 1.0 : min(_2565, 1.0));
        _3112 = (((_3178 * cbLight._m0[_3127].x) * _3191) * _3192) + _3006;
        _3114 = (((_3178 * cbLight._m0[_3127].y) * _3191) * _3192) + _3008;
        _3116 = (((_3178 * cbLight._m0[_3127].z) * _3191) * _3192) + _3010;
    }
    float _3258;
    float _3260;
    float _3262;
    float _3264;
    float _3266;
    float _3268;
    if (_2547.y == 0u)
    {
        uvec4 _3213 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3214 = _3213.x;
        uint _3225 = uint((float(_3213.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1162) / _3214))) + floor(float(uint(cbSceneParam._m0[85u].x * _1161) / _3214)));
        float _3235 = (log2(_2325 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3236 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
        uint _3239 = uint(isnan(14.0) ? _3236 : (isnan(_3236) ? 14.0 : min(_3236, 14.0)));
        uvec4 _3244 = texelFetch(g_lightClusterGridBuffer, int(((_3239 << 2u) + (_3225 << 6u)) >> 2u));
        uint _3245 = _3244.x;
        uint _3246 = _3213.z;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        if (((((1u << ((_3246 >> 4u) & 15u)) + 4294967295u) & _3245) == 0u) || ((_3246 & 240u) == 0u))
        {
            _3325 = 0.0;
            _3327 = 0.0;
            _3329 = 0.0;
            _3331 = 0.0;
            _3333 = 0.0;
            _3335 = 0.0;
        }
        else
        {
            float _3326;
            float _3328;
            float _3330;
            float _3332;
            float _3334;
            float _3336;
            float _3477 = 0.0;
            float _3478 = 0.0;
            float _3479 = 0.0;
            float _3480 = 0.0;
            float _3481 = 0.0;
            float _3482 = 0.0;
            uint _3483 = 0u;
            uint _3492;
            bool _3493;
            for (;;)
            {
                _3492 = texelFetch(g_lightClassification, int((((_3239 << 5u) + (_3225 << 9u)) + (_3483 << 2u)) >> 2u)).x;
                _3493 = _3492 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3493)
                {
                    frontier_phi_71_pred = _3482;
                    frontier_phi_71_pred_1 = _3481;
                    frontier_phi_71_pred_2 = _3480;
                    frontier_phi_71_pred_3 = _3479;
                    frontier_phi_71_pred_4 = _3478;
                    frontier_phi_71_pred_5 = _3477;
                }
                else
                {
                    float _3622;
                    float _3623;
                    float _3624;
                    float _3625;
                    float _3626;
                    float _3627;
                    uint _3628;
                    _3622 = _3477;
                    _3623 = _3478;
                    _3624 = _3479;
                    _3625 = _3480;
                    _3626 = _3481;
                    _3627 = _3482;
                    _3628 = _3492;
                    float _3549;
                    float _3550;
                    float _3551;
                    float _3552;
                    float _3553;
                    float _3554;
                    for (;;)
                    {
                        uint _3632 = uint(findLSB(_3628)) + (_3483 << 5u);
                        uint _3629 = (_3628 + 4294967295u) & _3628;
                        uint _3634 = _3632 * 48u;
                        vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3634)).x, texelFetch(g_PointLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3634 + 3u)).x));
                        uint _3654 = (_3632 * 48u) + 4u;
                        vec4 _3667 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3654)).x, texelFetch(g_PointLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3654 + 3u)).x));
                        uint _3673 = (_3632 * 48u) + 8u;
                        vec3 _3684 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3673)).x, texelFetch(g_PointLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3673 + 2u)).x));
                        float _3688 = _3648.x - _2323;
                        float _3689 = _3648.y - _2324;
                        float _3690 = _3648.z - _2325;
                        float _3691 = dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690));
                        float _3694 = inversesqrt(_3691);
                        float _3695 = _3694 * _3688;
                        float _3696 = _3694 * _3689;
                        float _3697 = _3694 * _3690;
                        float _3698 = dot(vec3(_1180, _1183, _1186), vec3(_3695, _3696, _3697));
                        float _3703 = 1.0 - (_3691 * _3648.w);
                        float _5197 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                        float _3704 = isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0));
                        float _3705 = sqrt(_3691) * _3667.w;
                        float _3708 = 1.39999997615814208984375 / (_3705 + 1.39999997615814208984375);
                        float _3709 = _3708 * _3708;
                        float _3712 = ((1.0 - _3709) * _3698) + _3709;
                        float _3715 = _3705 * _3705;
                        float _3719 = ((isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0))) * _3704) / ((_3715 * 0.699999988079071044921875) + 1.0);
                        float _3723 = (-0.0) - _2323;
                        float _3724 = (-0.0) - _2324;
                        float _3725 = (-0.0) - _2325;
                        float _3729 = inversesqrt(dot(vec3(_3723, _3724, _3725), vec3(_3723, _3724, _3725)));
                        float _3730 = _3729 * _3723;
                        float _3731 = _3729 * _3724;
                        float _3732 = _3729 * _3725;
                        float _3739 = exp2(log2(1.0 / ((_3715 * 3.5) + 5.0)) * 0.25);
                        float _3740 = 1.0 - _1240;
                        float _3747 = sqrt(1.0 - ((1.0 - (_3740 * _3740)) * (1.0 - (_3739 * _3739))));
                        float _3748 = _3747 * _3747;
                        float _3749 = _3748 * _3748;
                        float _3750 = _3730 + _3695;
                        float _3751 = _3731 + _3696;
                        float _3752 = _3732 + _3697;
                        float _3756 = inversesqrt(dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752)));
                        float _3760 = dot(vec3(_1180, _1183, _1186), vec3(_3730, _3731, _3732));
                        float _5213 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                        float _3763 = isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0));
                        float _3764 = dot(vec3(_1180, _1183, _1186), vec3(_3756 * _3750, _3756 * _3751, _3756 * _3752));
                        float _5224 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                        float _3767 = isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0));
                        float _3771 = ((_3767 * _3767) * (_3749 + (-1.0))) + 1.0;
                        float _3772 = _3708 * _3748;
                        float _3773 = _3772 * _3772;
                        float _3776 = ((1.0 - _3773) * _3698) + _3773;
                        float _5235 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                        float _3777 = isnan(1.0) ? _5235 : (isnan(_5235) ? 1.0 : min(_5235, 1.0));
                        float _3778 = 1.0 - _3748;
                        float _3788 = (0.5 / (((_3777 * ((_3763 * _3778) + _3748)) + 9.9999999392252902907785028219223e-09) + (((_3777 * _3778) + _3748) * _3763))) * _3777;
                        float _5246 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                        float _3799 = (((_3749 * 3.1415927410125732421875) * (isnan(1.0) ? _5246 : (isnan(_5246) ? 1.0 : min(_5246, 1.0)))) / ((_3771 * _3771) * ((_3715 * 2.1991131305694580078125) + 3.141590118408203125))) * _3704;
                        _3552 = (_3719 * _3667.x) + _3625;
                        _3553 = (_3719 * _3667.y) + _3626;
                        _3554 = (_3719 * _3667.z) + _3627;
                        _3549 = (_3799 * _3684.x) + _3622;
                        _3550 = (_3799 * _3684.y) + _3623;
                        _3551 = (_3799 * _3684.z) + _3624;
                        if (_3629 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3622 = _3549;
                            _3623 = _3550;
                            _3624 = _3551;
                            _3625 = _3552;
                            _3626 = _3553;
                            _3627 = _3554;
                            _3628 = _3629;
                        }
                    }
                    frontier_phi_71_pred = _3554;
                    frontier_phi_71_pred_1 = _3553;
                    frontier_phi_71_pred_2 = _3552;
                    frontier_phi_71_pred_3 = _3551;
                    frontier_phi_71_pred_4 = _3550;
                    frontier_phi_71_pred_5 = _3549;
                }
                _3336 = frontier_phi_71_pred;
                _3334 = frontier_phi_71_pred_1;
                _3332 = frontier_phi_71_pred_2;
                _3330 = frontier_phi_71_pred_3;
                _3328 = frontier_phi_71_pred_4;
                _3326 = frontier_phi_71_pred_5;
                uint _3484 = _3483 + 1u;
                if (_3484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3477 = _3326;
                    _3478 = _3328;
                    _3479 = _3330;
                    _3480 = _3332;
                    _3481 = _3334;
                    _3482 = _3336;
                    _3483 = _3484;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3325 = _3326;
            _3327 = _3328;
            _3329 = _3330;
            _3331 = _3332;
            _3333 = _3334;
            _3335 = _3336;
        }
        uvec4 _3339 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3340 = _3339.z;
        uint _3342 = (_3340 >> 8u) & 15u;
        float _3445;
        float _3447;
        float _3449;
        float _3451;
        float _3453;
        float _3455;
        if (((4294967295u << _3342) & _3245) == 0u)
        {
            _3445 = _3325;
            _3447 = _3327;
            _3449 = _3329;
            _3451 = _3331;
            _3453 = _3333;
            _3455 = _3335;
        }
        else
        {
            float _3470 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
            float _3471 = _3470 * _2323;
            float _3472 = _3470 * _2324;
            float _3473 = _3470 * _2325;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3342 < ((_3340 >> 12u) & 15u))
            {
                float _3446;
                float _3448;
                float _3450;
                float _3452;
                float _3454;
                float _3456;
                float _3605 = _3325;
                float _3606 = _3327;
                float _3607 = _3329;
                float _3608 = _3331;
                float _3609 = _3333;
                float _3610 = _3335;
                uint _3611 = _3342;
                uint _3620;
                bool _3621;
                for (;;)
                {
                    _3620 = texelFetch(g_lightClassification, int((((_3239 << 5u) + (_3225 << 9u)) + (_3611 << 2u)) >> 2u)).x;
                    _3621 = _3620 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3621)
                    {
                        frontier_phi_82_pred = _3610;
                        frontier_phi_82_pred_1 = _3609;
                        frontier_phi_82_pred_2 = _3608;
                        frontier_phi_82_pred_3 = _3607;
                        frontier_phi_82_pred_4 = _3606;
                        frontier_phi_82_pred_5 = _3605;
                    }
                    else
                    {
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _4106;
                        float _4107;
                        float _4108;
                        float _4109;
                        float _4110;
                        float _4111;
                        float _3826 = _3605;
                        float _3827 = _3606;
                        float _3828 = _3607;
                        float _3829 = _3608;
                        float _3830 = _3609;
                        float _3831 = _3610;
                        uint _3832 = _3620;
                        uint _3833;
                        vec4 _3858;
                        float _3859;
                        vec4 _3874;
                        vec3 _3886;
                        vec4 _3901;
                        vec4 _3916;
                        float _3962;
                        bool _3963;
                        for (;;)
                        {
                            uint _3843 = ((_3611 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3832));
                            _3833 = (_3832 + 4294967295u) & _3832;
                            uint _3845 = _3843 * 40u;
                            _3858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 3u)).x));
                            _3859 = _3858.w;
                            uint _3861 = (_3843 * 40u) + 4u;
                            _3874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 3u)).x));
                            uint _3876 = (_3843 * 40u) + 8u;
                            _3886 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 2u)).x));
                            uint _3888 = (_3843 * 40u) + 16u;
                            _3901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 3u)).x));
                            uint _3903 = (_3843 * 40u) + 20u;
                            _3916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3903 + 3u)).x));
                            uint _3918 = (_3843 * 40u) + 24u;
                            vec4 _3931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3918 + 3u)).x));
                            uint _3937 = (_3843 * 40u) + 28u;
                            vec4 _3950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 3u)).x));
                            _3962 = fma(_2325, _3950.z, fma(_2324, _3950.y, _3950.x * _2323)) + _3950.w;
                            _3963 = !((fma(_2325, _3931.z, fma(_2324, _3931.y, _3931.x * _2323)) + _3931.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3963)
                            {
                                float _3990 = _3858.x - _2323;
                                float _3991 = _3858.y - _2324;
                                float _3992 = _3858.z - _2325;
                                float _3993 = dot(vec3(_3990, _3991, _3992), vec3(_3990, _3991, _3992));
                                float _3996 = inversesqrt(_3993);
                                float _3997 = _3996 * _3990;
                                float _3998 = _3996 * _3991;
                                float _3999 = _3996 * _3992;
                                float _4003 = 1.0 - (_3993 / (_3859 * _3859));
                                float _5257 = isnan(0.0) ? _4003 : (isnan(_4003) ? 0.0 : max(_4003, 0.0));
                                float _4004 = isnan(1.0) ? _5257 : (isnan(_5257) ? 1.0 : min(_5257, 1.0));
                                float _4008 = sqrt(_3993) * _3874.w;
                                float _4010 = 1.39999997615814208984375 / (_4008 + 1.39999997615814208984375);
                                float _4011 = _4010 * _4010;
                                float _4014 = ((1.0 - _4011) * dot(vec3(_3997, _3998, _3999), vec3(_1180, _1183, _1186))) + _4011;
                                float _4017 = _4008 * _4008;
                                float _4021 = (fma(_2325, _3901.z, fma(_2324, _3901.y, _3901.x * _2323)) + _3901.w) / _3962;
                                float _4022 = (fma(_2325, _3916.z, fma(_2324, _3916.y, _3916.x * _2323)) + _3916.w) / _3962;
                                float _4026 = 1.0 - dot(vec2(_4021, _4022), vec2(_4021, _4022));
                                float _5273 = isnan(0.0) ? _4026 : (isnan(_4026) ? 0.0 : max(_4026, 0.0));
                                float _4027 = isnan(1.0) ? _5273 : (isnan(_5273) ? 1.0 : min(_5273, 1.0));
                                float _4028 = _4027 * (((isnan(0.0) ? _4014 : (isnan(_4014) ? 0.0 : max(_4014, 0.0))) * _4004) / ((_4017 * 0.699999988079071044921875) + 1.0));
                                float _4040 = exp2(log2(1.0 / ((_4017 * 3.5) + 5.0)) * 0.25);
                                float _4041 = 1.0 - _1240;
                                float _4048 = sqrt(1.0 - ((1.0 - (_4041 * _4041)) * (1.0 - (_4040 * _4040))));
                                float _4049 = _4048 * _4048;
                                float _4050 = _4049 * _4049;
                                float _4051 = _3997 - _3471;
                                float _4052 = _3998 - _3472;
                                float _4053 = _3999 - _3473;
                                float _4057 = inversesqrt(dot(vec3(_4051, _4052, _4053), vec3(_4051, _4052, _4053)));
                                float _4061 = dot(vec3(_1180, _1183, _1186), vec3((-0.0) - _3471, (-0.0) - _3472, (-0.0) - _3473));
                                float _5284 = isnan(0.0) ? _4061 : (isnan(_4061) ? 0.0 : max(_4061, 0.0));
                                float _4064 = isnan(1.0) ? _5284 : (isnan(_5284) ? 1.0 : min(_5284, 1.0));
                                float _4065 = dot(vec3(_1180, _1183, _1186), vec3(_4057 * _4051, _4057 * _4052, _4057 * _4053));
                                float _5295 = isnan(0.0) ? _4065 : (isnan(_4065) ? 0.0 : max(_4065, 0.0));
                                float _4068 = isnan(1.0) ? _5295 : (isnan(_5295) ? 1.0 : min(_5295, 1.0));
                                float _4072 = ((_4068 * _4068) * (_4050 + (-1.0))) + 1.0;
                                float _4073 = _4010 * _4049;
                                float _4074 = _4073 * _4073;
                                float _4080 = ((1.0 - _4074) * dot(vec3(_1180, _1183, _1186), vec3(_3997, _3998, _3999))) + _4074;
                                float _5306 = isnan(0.0) ? _4080 : (isnan(_4080) ? 0.0 : max(_4080, 0.0));
                                float _4081 = isnan(1.0) ? _5306 : (isnan(_5306) ? 1.0 : min(_5306, 1.0));
                                float _4082 = 1.0 - _4049;
                                float _4092 = (0.5 / (((_4081 * ((_4064 * _4082) + _4049)) + 9.9999999392252902907785028219223e-09) + (((_4081 * _4082) + _4049) * _4064))) * _4081;
                                float _5317 = isnan(0.0) ? _4092 : (isnan(_4092) ? 0.0 : max(_4092, 0.0));
                                float _4102 = (_4027 * _4004) * (((_4050 * 3.1415927410125732421875) * (isnan(1.0) ? _5317 : (isnan(_5317) ? 1.0 : min(_5317, 1.0)))) / ((_4072 * _4072) * ((_4017 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4028 * _3874.z;
                                frontier_phi_88_pred_1 = _4028 * _3874.y;
                                frontier_phi_88_pred_2 = _4028 * _3874.x;
                                frontier_phi_88_pred_3 = _4102 * _3886.z;
                                frontier_phi_88_pred_4 = _4102 * _3886.y;
                                frontier_phi_88_pred_5 = _4102 * _3886.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4111 = frontier_phi_88_pred;
                            _4110 = frontier_phi_88_pred_1;
                            _4109 = frontier_phi_88_pred_2;
                            _4108 = frontier_phi_88_pred_3;
                            _4107 = frontier_phi_88_pred_4;
                            _4106 = frontier_phi_88_pred_5;
                            _3816 = _4109 + _3829;
                            _3817 = _4110 + _3830;
                            _3818 = _4111 + _3831;
                            _3813 = _4106 + _3826;
                            _3814 = _4107 + _3827;
                            _3815 = _4108 + _3828;
                            if (_3833 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3826 = _3813;
                                _3827 = _3814;
                                _3828 = _3815;
                                _3829 = _3816;
                                _3830 = _3817;
                                _3831 = _3818;
                                _3832 = _3833;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3818;
                        frontier_phi_82_pred_1 = _3817;
                        frontier_phi_82_pred_2 = _3816;
                        frontier_phi_82_pred_3 = _3815;
                        frontier_phi_82_pred_4 = _3814;
                        frontier_phi_82_pred_5 = _3813;
                    }
                    _3456 = frontier_phi_82_pred;
                    _3454 = frontier_phi_82_pred_1;
                    _3452 = frontier_phi_82_pred_2;
                    _3450 = frontier_phi_82_pred_3;
                    _3448 = frontier_phi_82_pred_4;
                    _3446 = frontier_phi_82_pred_5;
                    uint _3612 = _3611 + 1u;
                    if (_3612 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3605 = _3446;
                        _3606 = _3448;
                        _3607 = _3450;
                        _3608 = _3452;
                        _3609 = _3454;
                        _3610 = _3456;
                        _3611 = _3612;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3452;
                frontier_phi_63_64_ladder_1 = _3456;
                frontier_phi_63_64_ladder_2 = _3454;
                frontier_phi_63_64_ladder_3 = _3450;
                frontier_phi_63_64_ladder_4 = _3448;
                frontier_phi_63_64_ladder_5 = _3446;
            }
            else
            {
                frontier_phi_63_64_ladder = _3331;
                frontier_phi_63_64_ladder_1 = _3335;
                frontier_phi_63_64_ladder_2 = _3333;
                frontier_phi_63_64_ladder_3 = _3329;
                frontier_phi_63_64_ladder_4 = _3327;
                frontier_phi_63_64_ladder_5 = _3325;
            }
            _3445 = frontier_phi_63_64_ladder_5;
            _3447 = frontier_phi_63_64_ladder_4;
            _3449 = frontier_phi_63_64_ladder_3;
            _3451 = frontier_phi_63_64_ladder;
            _3453 = frontier_phi_63_64_ladder_2;
            _3455 = frontier_phi_63_64_ladder_1;
        }
        float _3460 = isnan(1.0) ? _1224 : (isnan(_1224) ? 1.0 : min(_1224, 1.0));
        _3258 = (_3460 * _3451) + _2789;
        _3260 = (_3460 * _3453) + _2791;
        _3262 = (_3460 * _3455) + _2793;
        _3264 = ((_3445 * 0.039999999105930328369140625) * _3460) + _3112;
        _3266 = ((_3447 * 0.039999999105930328369140625) * _3460) + _3114;
        _3268 = ((_3449 * 0.039999999105930328369140625) * _3460) + _3116;
    }
    else
    {
        _3258 = _2789;
        _3260 = _2791;
        _3262 = _2793;
        _3264 = _3112;
        _3266 = _3114;
        _3268 = _3116;
    }
    float _5333 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _5344 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _5355 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _3285 = ((isnan(1.0) ? _5333 : (isnan(_5333) ? 1.0 : min(_5333, 1.0))) * (_3258 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1224))) + ((_3264 + ((isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0))) * _2058)) * cbPerFrame._m0[3u].x);
    float _3286 = ((isnan(1.0) ? _5344 : (isnan(_5344) ? 1.0 : min(_5344, 1.0))) * (_3260 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1224))) + ((_3266 + ((isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0))) * _2058)) * cbPerFrame._m0[3u].x);
    float _3287 = ((isnan(1.0) ? _5355 : (isnan(_5355) ? 1.0 : min(_5355, 1.0))) * (_3262 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1224))) + ((_3268 + ((isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))) * _2058)) * cbPerFrame._m0[3u].x);
    uint _3288 = _293 + 6u;
    float _3296 = _1161 / cbSceneParam._m0[86u].x;
    float _3297 = _1162 / cbSceneParam._m0[86u].y;
    vec4 _3311 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3296, _3297, (log2((isnan(cbSceneParam._m0[77u].w) ? _1083 : (isnan(_1083) ? cbSceneParam._m0[77u].w : min(_1083, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3313 = _3311.x;
    float _3314 = _3311.y;
    float _3315 = _3311.z;
    float _3316 = _3311.w;
    float _3387;
    float _3389;
    float _3391;
    float _3393;
    if (_1083 > cbSceneParam._m0[78u].w)
    {
        float _3350 = isnan(_1083) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1083 : min(cbSceneParam._m0[80u].w, _1083));
        float _3351 = _3350 / _1083;
        float _3362 = _3351 * _1134;
        float _3363 = _1135 * _3351;
        float _3364 = (-0.0) - _3363;
        float _3365 = _3351 * _1136;
        float _3367 = (cbSceneParam._m0[77u].w * _3364) / _3350;
        float _3368 = _3367 + cbSceneParam._m0[79u].w;
        float _3369 = cbSceneParam._m0[79u].w - _3363;
        float _3375 = sqrt(((_3362 * _3362) + (_3363 * _3363)) + (_3365 * _3365));
        float _3378 = (1.0 - (cbSceneParam._m0[77u].w / _3350)) * _3375;
        float _3383 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3385 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3562;
        if (abs((_3364 - _3367) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3562 = ((((_3368 > 0.0) ? exp2(_3383 * _3368) : (2.0 - exp2(_3385 * _3368))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3378;
        }
        else
        {
            float _3506 = 1.0 / cbSceneParam._m0[80u].x;
            float _3507 = isnan(_3369) ? _3368 : (isnan(_3368) ? _3369 : max(_3368, _3369));
            float _3508 = isnan(_3369) ? _3368 : (isnan(_3368) ? _3369 : min(_3368, _3369));
            float _3517 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : min(_3507, 0.0));
            float _3518 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : min(_3508, 0.0));
            _3562 = ((abs(_3375 / _3364) * cbSceneParam._m0[80u].y) * ((((_3517 - _3518) * 2.0) - ((exp2(_3383 * (isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0)))) - exp2(_3383 * (isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))))) * _3506)) - ((exp2(_3385 * _3517) - exp2(_3385 * _3518)) * _3506))) + (_3378 * cbSceneParam._m0[80u].z);
        }
        vec4 _3564 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3296, _3297, 1.0), 0.0);
        float _3573 = exp2((_3562 * (-1.44269502162933349609375)) * (1.0 - _3564.w));
        float _3574 = log2(_3573);
        float _3590 = log2(_3316);
        _3387 = (exp2(_3590 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3574 * cbSceneParam._m0[78u].x)) * _3564.x) / cbSceneParam._m0[78u].x)) + _3313;
        _3389 = (exp2(_3590 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3574 * cbSceneParam._m0[78u].y)) * _3564.y) / cbSceneParam._m0[78u].y)) + _3314;
        _3391 = (exp2(_3590 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3574 * cbSceneParam._m0[78u].z)) * _3564.z) / cbSceneParam._m0[78u].z)) + _3315;
        _3393 = _3573 * _3316;
    }
    else
    {
        _3387 = _3313;
        _3389 = _3314;
        _3391 = _3315;
        _3393 = _3316;
    }
    bool _3600;
    vec4 _3403;
    vec4 _3425;
    float _3427;
    float _3431;
    float _3432;
    float _3433;
    float _3434;
    bool _3444;
    for (;;)
    {
        _3403 = cbMatDynParam._m0[0u];
        float _3405 = roundEven(_3403.y);
        bool _3406 = _3405 == 3.0;
        float _3407 = log2(_3393);
        float _3414 = exp2(_3407 * cbSceneParam._m0[78u].x) * _3285;
        float _3415 = exp2(_3407 * cbSceneParam._m0[78u].y) * _3286;
        float _3416 = exp2(_3407 * cbSceneParam._m0[78u].z) * _3287;
        float _3423 = _1150 + (-0.5);
        _3425 = cbMtdParam._m0[1u];
        _3427 = _3425.y * _3423;
        float _3430 = (_3405 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3431 = _3430 * (_3406 ? _3414 : (_3414 + (cbSceneParam._m0[72u].w * _3387)));
        _3432 = _3430 * (_3406 ? _3415 : (_3415 + (cbSceneParam._m0[72u].w * _3389)));
        _3433 = _3430 * (_3406 ? _3416 : (_3416 + (cbSceneParam._m0[72u].w * _3391)));
        _3434 = _3423 * 0.999000012874603271484375;
        _3444 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3444)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3434) < 0.5)
            {
                _3600 = true;
                break;
            }
        }
        uint _3541 = _1199 + uint(_3403.w);
        if ((cbInstanceData._m0[_3541].w < 1.0) && ((cbInstanceData._m0[_3541].w + _3434) < 0.5))
        {
            _3600 = true;
            break;
        }
        if ((_3427 + 1.0) < _3425.x)
        {
            _3600 = true;
            break;
        }
        _3600 = false;
        break;
    }
    float _3804;
    if (_3600)
    {
        discard_state = true;
        _3804 = 0.0;
    }
    else
    {
        _3804 = cbInstanceData._m0[_3288].w;
    }
    SV_Target.x = _3431;
    SV_Target.y = _3432;
    SV_Target.z = _3433;
    SV_Target.w = _3804;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3288].w;
    discard_exit();
}


