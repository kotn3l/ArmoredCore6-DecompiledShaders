#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1338;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _332.x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[24u].z) + _386) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3924 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _411 = (_404 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _412 = (_404 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _413 = (_404 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _462 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _476 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _332.y) * 2.0) - ((((_452 - _462) * cbMtdParam._m0[24u].z) + _462) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3935 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _484 = (_477 * ((_430.x * cbMtdParam._m0[13u].x) - _411)) + _411;
    float _485 = (_477 * ((_430.y * cbMtdParam._m0[13u].y) - _412)) + _412;
    float _486 = (_477 * ((_430.z * cbMtdParam._m0[13u].z) - _413)) + _413;
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _264) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _265) + cbTextureTilingScale._m0[24u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _523 = _521.x;
    float _533 = dot(vec4(_523, _521.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _545 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _332.z) * 2.0) - ((((_523 - _533) * cbMtdParam._m0[24u].z) + _533) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3946 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _553 = (_546 * ((_504.x * cbMtdParam._m0[14u].x) - _484)) + _484;
    float _554 = (_546 * ((_504.y * cbMtdParam._m0[14u].y) - _485)) + _485;
    float _555 = (_546 * ((_504.z * cbMtdParam._m0[14u].z) - _486)) + _486;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _592 = _590.x;
    float _593 = _590.y;
    float _594 = _590.z;
    float _601 = ((_573.x - _592) * _404) + _592;
    float _602 = ((_573.y - _593) * _404) + _593;
    float _603 = ((_573.z - _594) * _404) + _594;
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _626 = ((_615.x - _601) * _477) + _601;
    float _627 = ((_615.y - _602) * _477) + _602;
    float _628 = ((_615.z - _603) * _477) + _603;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _264) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _265) + cbTextureTilingScale._m0[23u].w));
    float _653 = ((_640.z - _628) * _546) + _628;
    float _656 = ((((_640.x - _626) * _546) + _626) * 2.0) + (-1.0);
    float _658 = ((((_640.y - _627) * _546) + _627) * 2.0) + (-1.0);
    float _659 = dot(vec2(_656, _658), vec2(_656, _658));
    float _3957 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _664 = sqrt(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _690 = (((_678.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _656;
    float _691 = (((_678.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _658;
    float _694 = fma(_664, _232, fma(_691, _239, _690 * _225));
    float _697 = fma(_664, _233, fma(_691, _240, _690 * _226));
    float _700 = fma(_664, _234, fma(_691, _241, _690 * _227));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _733 = _731.x;
    float _734 = 1.0 - _733;
    float _740 = (cbMtdParam._m0[19u].x + dot(vec4(_704 * _694, _704 * _697, _704 * _700, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_733 - _734) * cbMtdParam._m0[24u].w) + _734) * cbMtdParam._m0[21u].z);
    float _3968 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _741 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _748 = (_741 * (cbMtdParam._m0[17u].x - _553)) + _553;
    float _749 = (_741 * (cbMtdParam._m0[17u].y - _554)) + _554;
    float _750 = (_741 * (cbMtdParam._m0[17u].z - _555)) + _555;
    float _754 = (cbMtdParam._m0[19u].w * (_678.z - _653)) + _653;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _774 = (_767.x * 2.0) + (-1.0);
    float _775 = (_767.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _3979 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _784 = ((_767.z - _754) * _741) + _754;
    float _794 = ((sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) - _664) * _741) + _664;
    float _797 = (((_774 - _690) * _741) + _690) + (cbMtdParam._m0[21u].x * _690);
    float _798 = (((_775 - _691) * _741) + _691) + (cbMtdParam._m0[21u].x * _691);
    float _802 = cbMtdParam._m0[22u].x + _678.w;
    float _805 = fma(_794, _232, fma(_798, _239, _797 * _225));
    float _808 = fma(_794, _233, fma(_798, _240, _797 * _226));
    float _811 = fma(_794, _234, fma(_798, _241, _797 * _227));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    float _816 = _815 * _805;
    float _817 = _815 * _808;
    float _818 = _815 * _811;
    float _3990 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _819 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4012 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4023 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4034 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _837 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _889 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _879);
    float _890 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _879);
    float _891 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _879);
    float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
    float _896 = _889 * _895;
    float _897 = _890 * _895;
    float _898 = _891 * _895;
    float _904 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _905 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _923 = fma(_818, cbSceneParam._m0[5u].z, fma(_817, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _816));
    float _926 = fma(_818, cbSceneParam._m0[6u].z, fma(_817, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _816));
    float _929 = fma(_818, cbSceneParam._m0[7u].z, fma(_817, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _816));
    uint _943 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _949 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_943].x;
    float _950 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_943].y;
    float _951 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_943].z;
    float _4045 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    vec4 _963 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _904, cbSceneParam._m0[86u].y * _905));
    float _967 = ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * TEXCOORD_5.w) * _963.x;
    float _968 = dot(vec3(_816, _817, _818), vec3(_896, _897, _898));
    float _971 = _968 * 2.0;
    float _975 = (_971 * _816) - _896;
    float _976 = (_971 * _817) - _897;
    float _977 = (_971 * _818) - _898;
    float _981 = abs(dot(vec3(_896, _897, _898), vec3(_816, _817, _818)));
    float _4078 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_819);
    float _996 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1337;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1062 = fma(_1036, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028));
        float _1066 = fma(_1036, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028));
        float _1070 = fma(_1036, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028));
        float _1095 = _1028 + _816;
        float _1096 = _1032 + _817;
        float _1097 = _1036 + _818;
        float _1107 = fma(_1097, cbModelParam._m0[26u].z, fma(_1096, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1095)) - _1062;
        float _1108 = fma(_1097, cbModelParam._m0[27u].z, fma(_1096, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1095)) - _1066;
        float _1109 = fma(_1097, cbModelParam._m0[28u].z, fma(_1096, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1095)) - _1070;
        float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
        float _1126 = ((_1113 * _1107) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1062 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1113 * _1108) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1066 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1113 * _1109) / cbModelParam._m0[34u].z) + ((((((_1070 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        float _1165 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1131.x + (-0.5));
        float _1167 = _1165 * (_1131.y + (-0.5));
        float _1168 = _1165 * (_1131.z + (-0.5));
        float _1175 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1138.x + (-0.5));
        float _1177 = _1175 * (_1138.y + (-0.5));
        float _1178 = _1175 * (_1138.z + (-0.5));
        float _1185 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1145.x + (-0.5));
        float _1187 = _1185 * (_1145.y + (-0.5));
        float _1188 = _1185 * (_1145.z + (-0.5));
        float _1195 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1152.x + (-0.5));
        float _1197 = _1195 * (_1152.y + (-0.5));
        float _1198 = _1195 * (_1152.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1219 = (dot(vec3(_816, _817, _818), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1229 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _4126 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1231 + 1.0))) + _1236) * _1199;
        float _1246 = _1167 * 0.5;
        float _1247 = _1177 * 0.5;
        float _1248 = _1187 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_816, _817, _818), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4159 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1273 + 1.0))) + _1278) * _1200;
        float _1288 = _1168 * 0.5;
        float _1289 = _1178 * 0.5;
        float _1290 = _1188 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_816, _817, _818), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4192 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1315 + 1.0))) + _1320) * _1201;
        _1337 = _1168;
        _1339 = _1167;
        _1340 = _1166;
        _1341 = _1178;
        _1342 = _1177;
        _1343 = _1176;
        _1344 = _1188;
        _1345 = _1187;
        _1346 = _1186;
        _1347 = _1201;
        _1348 = _1200;
        _1349 = _1199;
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _1338;
        _1339 = _1338;
        _1340 = _1338;
        _1341 = _1338;
        _1342 = _1338;
        _1343 = _1338;
        _1344 = _1338;
        _1345 = _1338;
        _1346 = _1338;
        _1347 = _1338;
        _1348 = _1338;
        _1349 = _1338;
        _1350 = 0.0;
        _1351 = 0.0;
        _1352 = 0.0;
    }
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1375 = fma(_1036, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028));
        float _1379 = fma(_1036, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028));
        float _1383 = fma(_1036, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028));
        float _1406 = _1028 + _816;
        float _1407 = _1032 + _817;
        float _1408 = _1036 + _818;
        float _1418 = fma(_1408, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1406)) - _1375;
        float _1419 = fma(_1408, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1406)) - _1379;
        float _1420 = fma(_1408, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1406)) - _1383;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1375 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1379 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[35u].z) + ((((((_1383 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1474 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1441.x + (-0.5));
        float _1476 = _1474 * (_1441.y + (-0.5));
        float _1477 = _1474 * (_1441.z + (-0.5));
        float _1484 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1448.x + (-0.5));
        float _1486 = _1484 * (_1448.y + (-0.5));
        float _1487 = _1484 * (_1448.z + (-0.5));
        float _1494 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1455.x + (-0.5));
        float _1496 = _1494 * (_1455.y + (-0.5));
        float _1497 = _1494 * (_1455.z + (-0.5));
        float _1504 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1462.x + (-0.5));
        float _1506 = _1504 * (_1462.y + (-0.5));
        float _1507 = _1504 * (_1462.z + (-0.5));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = _1475 * 0.5;
        float _1512 = _1485 * 0.5;
        float _1513 = _1495 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_816, _817, _818), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4255 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1538 + 1.0))) + _1543) * _1508;
        float _1553 = _1476 * 0.5;
        float _1554 = _1486 * 0.5;
        float _1555 = _1496 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_816, _817, _818), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4288 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1580 + 1.0))) + _1585) * _1509;
        float _1595 = _1477 * 0.5;
        float _1596 = _1487 * 0.5;
        float _1597 = _1497 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_816, _817, _818), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4321 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1622 + 1.0))) + _1627) * _1510;
        _1644 = _1477;
        _1645 = _1476;
        _1646 = _1475;
        _1647 = _1487;
        _1648 = _1486;
        _1649 = _1485;
        _1650 = _1497;
        _1651 = _1496;
        _1652 = _1495;
        _1653 = _1510;
        _1654 = _1509;
        _1655 = _1508;
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
    }
    else
    {
        _1644 = _1338;
        _1645 = _1338;
        _1646 = _1338;
        _1647 = _1338;
        _1648 = _1338;
        _1649 = _1338;
        _1650 = _1338;
        _1651 = _1338;
        _1652 = _1338;
        _1653 = _1338;
        _1654 = _1338;
        _1655 = _1338;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1350)) + _1350;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1351)) + _1351;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1352)) + _1352;
    float _1691 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1668));
    float _1712 = _975 * 0.5;
    float _1713 = _976 * 0.5;
    float _1714 = _977 * 0.5;
    float _1715 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1718 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1721 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1755;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1728 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1337, _1341, _1344, _1347));
        float _1732 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1736 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1340, _1343, _1346, _1349));
        float _1743 = dot(vec4(cbModelParam._m0[39u]), vec4(_1712, _1713, _1714, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1766;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1757 = dot(vec4(cbModelParam._m0[40u]), vec4(_1712, _1713, _1714, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1770 = (_1766 * cbModelParam._m0[1u].x) + (_1755 * (1.0 - cbModelParam._m0[1u].x));
    float _1780 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _819);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1780 : min(cbModelParam._m0[25u].z, _1780));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1828 = fma(_1036, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028)) + cbModelParam._m0[13u].w;
        float _1832 = fma(_1036, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028)) + cbModelParam._m0[14u].w;
        float _1836 = fma(_1036, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028)) + cbModelParam._m0[15u].w;
        float _1839 = fma(_977, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975));
        float _1842 = fma(_977, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975));
        float _1845 = fma(_977, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975));
        float _1873;
        if (_1839 > 0.0)
        {
            _1873 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1873 = frontier_phi_14_12_ladder;
        }
        float _2043;
        if (_1842 > 0.0)
        {
            _2043 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2043 = frontier_phi_23_19_ladder;
        }
        float _2338;
        if (_1845 > 0.0)
        {
            _2338 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2338 = frontier_phi_35_30_ladder;
        }
        float _2340 = isnan(_2043) ? _1873 : (isnan(_1873) ? _2043 : min(_1873, _2043));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1839) + _1828;
        float _2346 = (_2341 * _1842) + _1832;
        float _2347 = (_2341 * _1845) + _1836;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2348;
        float _2352 = _2348 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 > _2352) || ((_2346 < _2350) || ((_2345 < _2350) || (_2345 > _2352))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2347, cbModelParam._m0[9u].z, fma(_2346, cbModelParam._m0[9u].y, _2345 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2347, cbModelParam._m0[10u].z, fma(_2346, cbModelParam._m0[10u].y, _2345 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2347, cbModelParam._m0[11u].z, fma(_2346, cbModelParam._m0[11u].y, _2345 * cbModelParam._m0[11u].x))), _1781);
            frontier_phi_13_35_ladder = _2492.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2492.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2492.x * cbModelParam._m0[1u].y;
        }
        _1861 = frontier_phi_13_35_ladder_2;
        _1863 = frontier_phi_13_35_ladder_1;
        _1865 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_975, _976, _977), _1781);
        _1861 = _1849.x * cbModelParam._m0[1u].y;
        _1863 = _1849.y * cbModelParam._m0[1u].y;
        _1865 = _1849.z * cbModelParam._m0[1u].y;
    }
    float _1869 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _819);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1869 : min(cbModelParam._m0[25u].w, _1869));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1924 = fma(_1036, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028)) + cbModelParam._m0[21u].w;
        float _1928 = fma(_1036, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028)) + cbModelParam._m0[22u].w;
        float _1932 = fma(_1036, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028)) + cbModelParam._m0[23u].w;
        float _1935 = fma(_977, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975));
        float _1938 = fma(_977, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975));
        float _1941 = fma(_977, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975));
        float _2048;
        if (_1935 > 0.0)
        {
            _2048 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2048 = frontier_phi_25_21_ladder;
        }
        float _2365;
        if (_1938 > 0.0)
        {
            _2365 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2365 = frontier_phi_37_32_ladder;
        }
        float _2692;
        if (_1941 > 0.0)
        {
            _2692 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2692 = frontier_phi_47_44_ladder;
        }
        float _2694 = isnan(_2365) ? _2048 : (isnan(_2048) ? _2365 : min(_2048, _2365));
        float _2695 = isnan(_2692) ? _2694 : (isnan(_2694) ? _2692 : min(_2694, _2692));
        float _2699 = (_2695 * _1935) + _1924;
        float _2700 = (_2695 * _1938) + _1928;
        float _2701 = (_2695 * _1941) + _1932;
        float _2702 = _2695 * 9.9999997473787516355514526367188e-05;
        float _2703 = (-1.0) - _2702;
        float _2705 = _2702 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2701 > _2705) || ((_2701 < _2703) || ((_2700 > _2705) || ((_2700 < _2703) || ((_2699 < _2703) || (_2699 > _2705))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2819 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2701, cbModelParam._m0[17u].z, fma(_2700, cbModelParam._m0[17u].y, _2699 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2701, cbModelParam._m0[18u].z, fma(_2700, cbModelParam._m0[18u].y, _2699 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2701, cbModelParam._m0[19u].z, fma(_2700, cbModelParam._m0[19u].y, _2699 * cbModelParam._m0[19u].x))), _1870);
            frontier_phi_22_47_ladder = _2819.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2819.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2819.x * cbModelParam._m0[1u].z;
        }
        _1960 = frontier_phi_22_47_ladder_2;
        _1962 = frontier_phi_22_47_ladder_1;
        _1964 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_975, _976, _977), _1870);
        _1960 = _1944.x * cbModelParam._m0[1u].z;
        _1962 = _1944.y * cbModelParam._m0[1u].z;
        _1964 = _1944.z * cbModelParam._m0[1u].z;
    }
    float _1976 = ((((1.0 - _996) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_996 * _983)) * _967;
    float _1977 = _1976 * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1978 = _1976 * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1979 = _1976 * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1982 = fma(_1979, cbSceneParam._m0[89u].z, fma(_1978, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _1985 = fma(_1979, cbSceneParam._m0[90u].z, fma(_1978, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _1988 = fma(_1979, cbSceneParam._m0[91u].z, fma(_1978, cbSceneParam._m0[91u].y, _1977 * cbSceneParam._m0[91u].x));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2035 = _2022 / _2034;
    float _2036 = _2026 / _2034;
    float _2037 = _2030 / _2034;
    float _2184;
    float _2185;
    float _2186;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2064 = ((uint(_2037 > cbSceneParam._m0[59u].y) + uint(_2037 > cbSceneParam._m0[59u].x)) + uint(_2037 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2065 = _2064 + 43u;
        uint _2073 = _2064 + 44u;
        uint _2081 = _2064 + 45u;
        uint _2089 = _2064 + 46u;
        float _2100 = fma(_2034, cbSceneParam._m0[_2065].w, fma(_2030, cbSceneParam._m0[_2065].z, fma(_2026, cbSceneParam._m0[_2065].y, _2022 * cbSceneParam._m0[_2065].x)));
        float _2104 = fma(_2034, cbSceneParam._m0[_2073].w, fma(_2030, cbSceneParam._m0[_2073].z, fma(_2026, cbSceneParam._m0[_2073].y, _2022 * cbSceneParam._m0[_2073].x)));
        float _2112 = fma(_2034, cbSceneParam._m0[_2089].w, fma(_2030, cbSceneParam._m0[_2089].z, fma(_2026, cbSceneParam._m0[_2089].y, _2022 * cbSceneParam._m0[_2089].x)));
        float _2117 = cbSceneParam._m0[33u].z * _2112;
        float _2119 = cbSceneParam._m0[33u].w * _2112;
        float _2122 = fma(_2034, cbSceneParam._m0[_2081].w, fma(_2030, cbSceneParam._m0[_2081].z, fma(_2026, cbSceneParam._m0[_2081].y, _2022 * cbSceneParam._m0[_2081].x))) / _2112;
        float _2170 = (cbSceneParam._m0[33u].x - sqrt(((_2036 * _2036) + (_2035 * _2035)) + (_2037 * _2037))) * cbSceneParam._m0[33u].y;
        float _4447 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2177 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 + _2100) / _2112, (_2119 + _2104) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 + _2100) / _2112, (_2104 - _2117) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 - _2117) / _2112, (_2104 - _2119) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 - _2119) / _2112, (_2117 + _2104) / _2112), _2122), 0.0)).x), vec4(0.25)));
        _2184 = 1.0 - (_2177 * cbSceneParam._m0[34u].x);
        _2185 = 1.0 - (_2177 * cbSceneParam._m0[34u].y);
        _2186 = 1.0 - (_2177 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2184 = 1.0;
        _2185 = 1.0;
        _2186 = 1.0;
    }
    float _2250;
    float _2252;
    float _2254;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2238 = fma(_2034, cbSceneParam._m0[63u].w, fma(_2030, cbSceneParam._m0[63u].z, fma(_2026, cbSceneParam._m0[63u].y, _2022 * cbSceneParam._m0[63u].x)));
        float _2239 = fma(_2034, cbSceneParam._m0[60u].w, fma(_2030, cbSceneParam._m0[60u].z, fma(_2026, cbSceneParam._m0[60u].y, _2022 * cbSceneParam._m0[60u].x))) / _2238;
        float _2240 = fma(_2034, cbSceneParam._m0[61u].w, fma(_2030, cbSceneParam._m0[61u].z, fma(_2026, cbSceneParam._m0[61u].y, _2022 * cbSceneParam._m0[61u].x))) / _2238;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2239 >= cbSceneParam._m0[64u].x) && (_2240 >= cbSceneParam._m0[64u].y)) && (_2239 <= cbSceneParam._m0[64u].z)) && (_2240 <= cbSceneParam._m0[64u].w))
        {
            float _2378 = fma(_2034, cbSceneParam._m0[62u].w, fma(_2030, cbSceneParam._m0[62u].z, fma(_2026, cbSceneParam._m0[62u].y, _2022 * cbSceneParam._m0[62u].x))) / _2238;
            float _2382 = isnan(cbSceneParam._m0[41u].w) ? _2378 : (isnan(_2378) ? cbSceneParam._m0[41u].w : max(_2378, cbSceneParam._m0[41u].w));
            float _2425 = (cbSceneParam._m0[33u].x - sqrt(((_2036 * _2036) + (_2035 * _2035)) + (_2037 * _2037))) * cbSceneParam._m0[33u].y;
            float _4463 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
            float _2432 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2239, cbSceneParam._m0[33u].w + _2240), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2239, _2240 - cbSceneParam._m0[33u].z), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2239 - cbSceneParam._m0[33u].z, _2240 - cbSceneParam._m0[33u].w), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2239 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2240), _2382), 0.0)).x), vec4(0.25)));
            float _2436 = 1.0 - (_2432 * cbSceneParam._m0[34u].x);
            float _2437 = 1.0 - (_2432 * cbSceneParam._m0[34u].y);
            float _2438 = 1.0 - (_2432 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
            frontier_phi_34_33_ladder_1 = isnan(_2437) ? _2185 : (isnan(_2185) ? _2437 : min(_2185, _2437));
            frontier_phi_34_33_ladder_2 = isnan(_2436) ? _2184 : (isnan(_2184) ? _2436 : min(_2184, _2436));
        }
        else
        {
            frontier_phi_34_33_ladder = _2186;
            frontier_phi_34_33_ladder_1 = _2185;
            frontier_phi_34_33_ladder_2 = _2184;
        }
        _2250 = frontier_phi_34_33_ladder_2;
        _2252 = frontier_phi_34_33_ladder_1;
        _2254 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2250 = _2184;
        _2252 = _2185;
        _2254 = _2186;
    }
    uvec4 _2259 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2261 = _2259.x * 14u;
    uint _2262 = _2261 + 13u;
    float _2269 = _967 + (-1.0);
    float _2274 = (cbLight._m0[_2262].x * _2269) + 1.0;
    float _2275 = (cbLight._m0[_2262].y * _2269) + 1.0;
    float _2276 = (cbLight._m0[_2262].z * _2269) + 1.0;
    float _2277 = (cbLight._m0[_2262].w * _2269) + 1.0;
    uint _2278 = _2261 + 5u;
    float _2284 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
    uint _2288 = _2261 + 4u;
    float _2297 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
    uint _2301 = _2261 | 1u;
    float _2312 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_816, _817, _818));
    float _2315 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_816, _817, _818));
    float _4499 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _4510 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2320 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * 0.3183098733425140380859375;
    float _2322 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2329 = ((cbLight._m0[_2278].x * _2284) * _2322) + (((cbLight._m0[_2288].x * _2250) * _2297) * _2320);
    float _2330 = ((_2284 * cbLight._m0[_2278].y) * _2322) + (((cbLight._m0[_2288].y * _2252) * _2297) * _2320);
    float _2331 = ((_2284 * cbLight._m0[_2278].z) * _2322) + (((cbLight._m0[_2288].z * _2254) * _2297) * _2320);
    uvec4 _2335 = floatBitsToUint(cbLight._m0[_2261 + 12u]);
    bool _2337 = _2335.x == 0u;
    float _2439;
    float _2441;
    float _2443;
    if (_2337)
    {
        _2439 = _2329;
        _2441 = _2330;
        _2443 = _2331;
    }
    else
    {
        uint _2447 = _2261 + 6u;
        float _2463 = (dot(vec3(cbLight._m0[_2261 + 2u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2464 = _2463 * _2463;
        float _4521 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2465 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2466 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2439 = (((cbLight._m0[_2447].x * 0.3183098733425140380859375) * _2465) * _2466) + _2329;
        _2441 = (((cbLight._m0[_2447].y * 0.3183098733425140380859375) * _2465) * _2466) + _2330;
        _2443 = (((cbLight._m0[_2447].z * 0.3183098733425140380859375) * _2465) * _2466) + _2331;
    }
    bool _2446 = _2335.y == 0u;
    float _2501;
    float _2503;
    float _2505;
    if (_2446)
    {
        _2501 = _2439;
        _2503 = _2441;
        _2505 = _2443;
    }
    else
    {
        uint _2663 = _2261 + 7u;
        float _2679 = (dot(vec3(cbLight._m0[_2261 + 3u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2680 = _2679 * _2679;
        float _4537 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2681 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2682 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2501 = (((cbLight._m0[_2663].x * 0.3183098733425140380859375) * _2681) * _2682) + _2439;
        _2503 = (((cbLight._m0[_2663].y * 0.3183098733425140380859375) * _2681) * _2682) + _2441;
        _2505 = (((cbLight._m0[_2663].z * 0.3183098733425140380859375) * _2681) * _2682) + _2443;
    }
    uint _2508 = _2261 + 8u;
    float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _819) * 0.949999988079071044921875);
    float _2522 = _2521 * _2521;
    float _2523 = cbLight._m0[_2261].x + _896;
    float _2524 = cbLight._m0[_2261].y + _897;
    float _2525 = cbLight._m0[_2261].z + _898;
    float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
    float _2530 = _2529 * _2523;
    float _2531 = _2529 * _2524;
    float _2532 = _2529 * _2525;
    float _2533 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2261].xyz));
    float _4553 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _4564 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2537 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2538 = dot(vec3(_816, _817, _818), vec3(_2530, _2531, _2532));
    float _4575 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2542 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2530, _2531, _2532));
    float _4586 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2546 = _2522 * _2522;
    float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
    float _2561 = (exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2562 = 1.0 - _2522;
    float _2573 = (0.5 / (((_2537 * ((_2536 * _2562) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2562) + _2522) * _2536))) * _2536;
    float _4597 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2575 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
    uint _2589 = _2261 + 9u;
    float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _819) * 0.949999988079071044921875);
    float _2601 = _2600 * _2600;
    float _2602 = cbLight._m0[_2301].x + _896;
    float _2603 = cbLight._m0[_2301].y + _897;
    float _2604 = cbLight._m0[_2301].z + _898;
    float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
    float _2609 = _2608 * _2602;
    float _2610 = _2608 * _2603;
    float _2611 = _2608 * _2604;
    float _2612 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2301].xyz));
    float _4608 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2616 = dot(vec3(_816, _817, _818), vec3(_2609, _2610, _2611));
    float _4619 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2620 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2609, _2610, _2611));
    float _4630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2624 = _2601 * _2601;
    float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
    float _2637 = (exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2638 = 1.0 - _2601;
    float _2648 = (0.5 / (((_2537 * ((_2615 * _2638) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2638) + _2601) * _2615))) * _2615;
    float _4641 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2650 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
    float _2660 = (((_2637 * cbLight._m0[_2589].x) * _2650) * _2284) + ((((cbLight._m0[_2508].x * _2250) * _2561) * _2575) * _2297);
    float _2661 = (((_2637 * cbLight._m0[_2589].y) * _2650) * _2284) + ((((cbLight._m0[_2508].y * _2252) * _2561) * _2575) * _2297);
    float _2662 = (((_2637 * cbLight._m0[_2589].z) * _2650) * _2284) + ((((cbLight._m0[_2508].z * _2254) * _2561) * _2575) * _2297);
    float _2718;
    float _2720;
    float _2722;
    if (_2337)
    {
        _2718 = _2660;
        _2720 = _2661;
        _2722 = _2662;
    }
    else
    {
        uint _2724 = _2261 + 2u;
        uint _2728 = _2261 + 10u;
        float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2724].w)) * _819) * 0.949999988079071044921875);
        float _2743 = _2742 * _2742;
        float _2744 = cbLight._m0[_2724].x + _896;
        float _2745 = cbLight._m0[_2724].y + _897;
        float _2746 = cbLight._m0[_2724].z + _898;
        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
        float _2751 = _2750 * _2744;
        float _2752 = _2750 * _2745;
        float _2753 = _2750 * _2746;
        float _2754 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2724].xyz));
        float _4652 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2758 = dot(vec3(_816, _817, _818), vec3(_2751, _2752, _2753));
        float _4663 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2762 = dot(vec3(cbLight._m0[_2724].xyz), vec3(_2751, _2752, _2753));
        float _4674 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2766 = _2743 * _2743;
        float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
        float _2779 = (exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2780 = 1.0 - _2743;
        float _2790 = (0.5 / (((_2537 * ((_2757 * _2780) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2780) + _2743) * _2757))) * _2757;
        float _4685 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2792 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
        float _2793 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2718 = (((_2779 * cbLight._m0[_2728].x) * _2792) * _2793) + _2660;
        _2720 = (((_2779 * cbLight._m0[_2728].y) * _2792) * _2793) + _2661;
        _2722 = (((_2779 * cbLight._m0[_2728].z) * _2792) * _2793) + _2662;
    }
    float _2824;
    float _2826;
    float _2828;
    if (_2446)
    {
        _2824 = _2718;
        _2826 = _2720;
        _2828 = _2722;
    }
    else
    {
        uint _2835 = _2261 + 3u;
        uint _2839 = _2261 + 11u;
        float _2853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2835].w)) * _819) * 0.949999988079071044921875);
        float _2854 = _2853 * _2853;
        float _2855 = cbLight._m0[_2835].x + _896;
        float _2856 = cbLight._m0[_2835].y + _897;
        float _2857 = cbLight._m0[_2835].z + _898;
        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
        float _2862 = _2861 * _2855;
        float _2863 = _2861 * _2856;
        float _2864 = _2861 * _2857;
        float _2865 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2835].xyz));
        float _4701 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2868 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2869 = dot(vec3(_816, _817, _818), vec3(_2862, _2863, _2864));
        float _4712 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2872 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2873 = dot(vec3(cbLight._m0[_2835].xyz), vec3(_2862, _2863, _2864));
        float _4723 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2877 = _2854 * _2854;
        float _2881 = ((_2872 * _2872) * (_2877 + (-1.0))) + 1.0;
        float _2890 = (exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2891 = 1.0 - _2854;
        float _2901 = (0.5 / (((_2537 * ((_2868 * _2891) + _2854)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2891) + _2854) * _2868))) * _2868;
        float _4734 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2903 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2877 / ((_2881 * _2881) * 3.141590118408203125));
        float _2904 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2824 = (((_2890 * cbLight._m0[_2839].x) * _2903) * _2904) + _2718;
        _2826 = (((_2890 * cbLight._m0[_2839].y) * _2903) * _2904) + _2720;
        _2828 = (((_2890 * cbLight._m0[_2839].z) * _2903) * _2904) + _2722;
    }
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_2259.y == 0u)
    {
        uvec4 _2925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2926 = _2925.x;
        uint _2937 = uint((float(_2925.y) * floor(float(uint(cbSceneParam._m0[85u].y * _905) / _2926))) + floor(float(uint(cbSceneParam._m0[85u].x * _904) / _2926)));
        float _2947 = (log2(_2037 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2948 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        uint _2951 = uint(isnan(14.0) ? _2948 : (isnan(_2948) ? 14.0 : min(_2948, 14.0)));
        uvec4 _2956 = texelFetch(g_lightClusterGridBuffer, int(((_2951 << 2u) + (_2937 << 6u)) >> 2u));
        uint _2957 = _2956.x;
        uint _2958 = _2925.z;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        if (((((1u << ((_2958 >> 4u) & 15u)) + 4294967295u) & _2957) == 0u) || ((_2958 & 240u) == 0u))
        {
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
        }
        else
        {
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            uint _3188 = 0u;
            uint _3197;
            bool _3198;
            for (;;)
            {
                _3197 = texelFetch(g_lightClassification, int((((_2951 << 5u) + (_2937 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                _3198 = _3197 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3198)
                {
                    frontier_phi_66_pred = _3187;
                    frontier_phi_66_pred_1 = _3186;
                    frontier_phi_66_pred_2 = _3185;
                    frontier_phi_66_pred_3 = _3184;
                    frontier_phi_66_pred_4 = _3183;
                    frontier_phi_66_pred_5 = _3182;
                }
                else
                {
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    uint _3312;
                    _3306 = _3182;
                    _3307 = _3183;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3197;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    for (;;)
                    {
                        uint _3316 = uint(findLSB(_3312)) + (_3188 << 5u);
                        uint _3313 = (_3312 + 4294967295u) & _3312;
                        uint _3318 = _3316 * 48u;
                        vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3338 = (_3316 * 48u) + 4u;
                        vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3357 = (_3316 * 48u) + 8u;
                        vec3 _3368 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3357)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 2u)).x));
                        float _3372 = _3332.x - _2035;
                        float _3373 = _3332.y - _2036;
                        float _3374 = _3332.z - _2037;
                        float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                        float _3378 = inversesqrt(_3375);
                        float _3379 = _3378 * _3372;
                        float _3380 = _3378 * _3373;
                        float _3381 = _3378 * _3374;
                        float _3382 = dot(vec3(_923, _926, _929), vec3(_3379, _3380, _3381));
                        float _3387 = 1.0 - (_3375 * _3332.w);
                        float _4760 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3388 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3389 = sqrt(_3375) * _3351.w;
                        float _3392 = 1.39999997615814208984375 / (_3389 + 1.39999997615814208984375);
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3382) + _3393;
                        float _3399 = _3389 * _3389;
                        float _3403 = ((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3388) / ((_3399 * 0.699999988079071044921875) + 1.0);
                        float _3407 = (-0.0) - _2035;
                        float _3408 = (-0.0) - _2036;
                        float _3409 = (-0.0) - _2037;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3414 = _3413 * _3407;
                        float _3415 = _3413 * _3408;
                        float _3416 = _3413 * _3409;
                        float _3423 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                        float _3424 = 1.0 - _983;
                        float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                        float _3432 = _3431 * _3431;
                        float _3433 = _3432 * _3432;
                        float _3434 = _3414 + _3379;
                        float _3435 = _3415 + _3380;
                        float _3436 = _3416 + _3381;
                        float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                        float _3444 = dot(vec3(_923, _926, _929), vec3(_3414, _3415, _3416));
                        float _4776 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3447 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3448 = dot(vec3(_923, _926, _929), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                        float _4787 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3451 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                        float _3456 = _3392 * _3432;
                        float _3457 = _3456 * _3456;
                        float _3460 = ((1.0 - _3457) * _3382) + _3457;
                        float _4798 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3461 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3462 = 1.0 - _3432;
                        float _3472 = (0.5 / (((_3461 * ((_3447 * _3462) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3432) * _3447))) * _3461;
                        float _4809 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3483 = (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) / ((_3455 * _3455) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125))) * _3388;
                        _3241 = (_3403 * _3351.x) + _3309;
                        _3242 = (_3403 * _3351.y) + _3310;
                        _3243 = (_3403 * _3351.z) + _3311;
                        _3238 = (_3483 * _3368.x) + _3306;
                        _3239 = (_3483 * _3368.y) + _3307;
                        _3240 = (_3483 * _3368.z) + _3308;
                        if (_3313 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3306 = _3238;
                            _3307 = _3239;
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3313;
                        }
                    }
                    frontier_phi_66_pred = _3243;
                    frontier_phi_66_pred_1 = _3242;
                    frontier_phi_66_pred_2 = _3241;
                    frontier_phi_66_pred_3 = _3240;
                    frontier_phi_66_pred_4 = _3239;
                    frontier_phi_66_pred_5 = _3238;
                }
                _3048 = frontier_phi_66_pred;
                _3046 = frontier_phi_66_pred_1;
                _3044 = frontier_phi_66_pred_2;
                _3042 = frontier_phi_66_pred_3;
                _3040 = frontier_phi_66_pred_4;
                _3038 = frontier_phi_66_pred_5;
                uint _3189 = _3188 + 1u;
                if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3182 = _3038;
                    _3183 = _3040;
                    _3184 = _3042;
                    _3185 = _3044;
                    _3186 = _3046;
                    _3187 = _3048;
                    _3188 = _3189;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
        }
        uvec4 _3051 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3052 = _3051.z;
        uint _3054 = (_3052 >> 8u) & 15u;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        if (((4294967295u << _3054) & _2957) == 0u)
        {
            _3150 = _3037;
            _3152 = _3039;
            _3154 = _3041;
            _3156 = _3043;
            _3158 = _3045;
            _3160 = _3047;
        }
        else
        {
            float _3175 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
            float _3176 = _3175 * _2035;
            float _3177 = _3175 * _2036;
            float _3178 = _3175 * _2037;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3054 < ((_3052 >> 12u) & 15u))
            {
                float _3151;
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3289 = _3037;
                float _3290 = _3039;
                float _3291 = _3041;
                float _3292 = _3043;
                float _3293 = _3045;
                float _3294 = _3047;
                uint _3295 = _3054;
                uint _3304;
                bool _3305;
                for (;;)
                {
                    _3304 = texelFetch(g_lightClassification, int((((_2951 << 5u) + (_2937 << 9u)) + (_3295 << 2u)) >> 2u)).x;
                    _3305 = _3304 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3305)
                    {
                        frontier_phi_72_pred = _3294;
                        frontier_phi_72_pred_1 = _3293;
                        frontier_phi_72_pred_2 = _3292;
                        frontier_phi_72_pred_3 = _3291;
                        frontier_phi_72_pred_4 = _3290;
                        frontier_phi_72_pred_5 = _3289;
                    }
                    else
                    {
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3501 = _3289;
                        float _3502 = _3290;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        uint _3507 = _3304;
                        uint _3508;
                        vec4 _3533;
                        float _3534;
                        vec4 _3549;
                        vec3 _3561;
                        vec4 _3576;
                        vec4 _3591;
                        float _3637;
                        bool _3638;
                        for (;;)
                        {
                            uint _3518 = ((_3295 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3507));
                            _3508 = (_3507 + 4294967295u) & _3507;
                            uint _3520 = _3518 * 40u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            _3534 = _3533.w;
                            uint _3536 = (_3518 * 40u) + 4u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3551 = (_3518 * 40u) + 8u;
                            _3561 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x));
                            uint _3563 = (_3518 * 40u) + 16u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3518 * 40u) + 20u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3518 * 40u) + 24u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3612 = (_3518 * 40u) + 28u;
                            vec4 _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            _3637 = fma(_2037, _3625.z, fma(_2036, _3625.y, _3625.x * _2035)) + _3625.w;
                            _3638 = !((fma(_2037, _3606.z, fma(_2036, _3606.y, _3606.x * _2035)) + _3606.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3638)
                            {
                                float _3665 = _3533.x - _2035;
                                float _3666 = _3533.y - _2036;
                                float _3667 = _3533.z - _2037;
                                float _3668 = dot(vec3(_3665, _3666, _3667), vec3(_3665, _3666, _3667));
                                float _3671 = inversesqrt(_3668);
                                float _3672 = _3671 * _3665;
                                float _3673 = _3671 * _3666;
                                float _3674 = _3671 * _3667;
                                float _3678 = 1.0 - (_3668 / (_3534 * _3534));
                                float _4820 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3683 = sqrt(_3668) * _3549.w;
                                float _3685 = 1.39999997615814208984375 / (_3683 + 1.39999997615814208984375);
                                float _3686 = _3685 * _3685;
                                float _3689 = ((1.0 - _3686) * dot(vec3(_3672, _3673, _3674), vec3(_923, _926, _929))) + _3686;
                                float _3692 = _3683 * _3683;
                                float _3696 = (fma(_2037, _3576.z, fma(_2036, _3576.y, _3576.x * _2035)) + _3576.w) / _3637;
                                float _3697 = (fma(_2037, _3591.z, fma(_2036, _3591.y, _3591.x * _2035)) + _3591.w) / _3637;
                                float _3701 = 1.0 - dot(vec2(_3696, _3697), vec2(_3696, _3697));
                                float _4836 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3703 = _3702 * (((isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0))) * _3679) / ((_3692 * 0.699999988079071044921875) + 1.0));
                                float _3715 = exp2(log2(1.0 / ((_3692 * 3.5) + 5.0)) * 0.25);
                                float _3716 = 1.0 - _983;
                                float _3723 = sqrt(1.0 - ((1.0 - (_3716 * _3716)) * (1.0 - (_3715 * _3715))));
                                float _3724 = _3723 * _3723;
                                float _3725 = _3724 * _3724;
                                float _3726 = _3672 - _3176;
                                float _3727 = _3673 - _3177;
                                float _3728 = _3674 - _3178;
                                float _3732 = inversesqrt(dot(vec3(_3726, _3727, _3728), vec3(_3726, _3727, _3728)));
                                float _3736 = dot(vec3(_923, _926, _929), vec3((-0.0) - _3176, (-0.0) - _3177, (-0.0) - _3178));
                                float _4847 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3739 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3740 = dot(vec3(_923, _926, _929), vec3(_3732 * _3726, _3732 * _3727, _3732 * _3728));
                                float _4858 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3743 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3747 = ((_3743 * _3743) * (_3725 + (-1.0))) + 1.0;
                                float _3748 = _3685 * _3724;
                                float _3749 = _3748 * _3748;
                                float _3755 = ((1.0 - _3749) * dot(vec3(_923, _926, _929), vec3(_3672, _3673, _3674))) + _3749;
                                float _4869 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3757 = 1.0 - _3724;
                                float _3767 = (0.5 / (((_3756 * ((_3739 * _3757) + _3724)) + 9.9999999392252902907785028219223e-09) + (((_3756 * _3757) + _3724) * _3739))) * _3756;
                                float _4880 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3777 = (_3702 * _3679) * (((_3725 * 3.1415927410125732421875) * (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) / ((_3747 * _3747) * ((_3692 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3703 * _3549.y;
                                frontier_phi_78_pred_1 = _3703 * _3549.x;
                                frontier_phi_78_pred_2 = _3777 * _3561.z;
                                frontier_phi_78_pred_3 = _3777 * _3561.y;
                                frontier_phi_78_pred_4 = _3777 * _3561.x;
                                frontier_phi_78_pred_5 = _3703 * _3549.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3785 = frontier_phi_78_pred;
                            _3784 = frontier_phi_78_pred_1;
                            _3783 = frontier_phi_78_pred_2;
                            _3782 = frontier_phi_78_pred_3;
                            _3781 = frontier_phi_78_pred_4;
                            _3786 = frontier_phi_78_pred_5;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            _3488 = _3781 + _3501;
                            _3489 = _3782 + _3502;
                            _3490 = _3783 + _3503;
                            if (_3508 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3508;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3493;
                        frontier_phi_72_pred_1 = _3492;
                        frontier_phi_72_pred_2 = _3491;
                        frontier_phi_72_pred_3 = _3490;
                        frontier_phi_72_pred_4 = _3489;
                        frontier_phi_72_pred_5 = _3488;
                    }
                    _3161 = frontier_phi_72_pred;
                    _3159 = frontier_phi_72_pred_1;
                    _3157 = frontier_phi_72_pred_2;
                    _3155 = frontier_phi_72_pred_3;
                    _3153 = frontier_phi_72_pred_4;
                    _3151 = frontier_phi_72_pred_5;
                    uint _3296 = _3295 + 1u;
                    if (_3296 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3289 = _3151;
                        _3290 = _3153;
                        _3291 = _3155;
                        _3292 = _3157;
                        _3293 = _3159;
                        _3294 = _3161;
                        _3295 = _3296;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3161;
                frontier_phi_60_61_ladder_1 = _3159;
                frontier_phi_60_61_ladder_2 = _3155;
                frontier_phi_60_61_ladder_3 = _3153;
                frontier_phi_60_61_ladder_4 = _3151;
                frontier_phi_60_61_ladder_5 = _3157;
            }
            else
            {
                frontier_phi_60_61_ladder = _3047;
                frontier_phi_60_61_ladder_1 = _3045;
                frontier_phi_60_61_ladder_2 = _3041;
                frontier_phi_60_61_ladder_3 = _3039;
                frontier_phi_60_61_ladder_4 = _3037;
                frontier_phi_60_61_ladder_5 = _3043;
            }
            _3150 = frontier_phi_60_61_ladder_4;
            _3152 = frontier_phi_60_61_ladder_3;
            _3154 = frontier_phi_60_61_ladder_2;
            _3156 = frontier_phi_60_61_ladder_5;
            _3158 = frontier_phi_60_61_ladder_1;
            _3160 = frontier_phi_60_61_ladder;
        }
        float _3165 = isnan(1.0) ? _967 : (isnan(_967) ? 1.0 : min(_967, 1.0));
        _2970 = (_3165 * _3156) + _2501;
        _2972 = (_3165 * _3158) + _2503;
        _2974 = (_3165 * _3160) + _2505;
        _2976 = ((_3150 * 0.039999999105930328369140625) * _3165) + _2824;
        _2978 = ((_3152 * 0.039999999105930328369140625) * _3165) + _2826;
        _2980 = ((_3154 * 0.039999999105930328369140625) * _3165) + _2828;
    }
    else
    {
        _2970 = _2501;
        _2972 = _2503;
        _2974 = _2505;
        _2976 = _2824;
        _2978 = _2826;
        _2980 = _2828;
    }
    float _4896 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4907 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _4918 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    uint _3000 = _244 + 6u;
    float _3008 = _904 / cbSceneParam._m0[86u].x;
    float _3009 = _905 / cbSceneParam._m0[86u].y;
    vec4 _3023 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3008, _3009, (log2((isnan(cbSceneParam._m0[77u].w) ? _837 : (isnan(_837) ? cbSceneParam._m0[77u].w : min(_837, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3025 = _3023.x;
    float _3026 = _3023.y;
    float _3027 = _3023.z;
    float _3028 = _3023.w;
    float _3100;
    float _3102;
    float _3104;
    float _3106;
    if (_837 > cbSceneParam._m0[78u].w)
    {
        float _3062 = isnan(_837) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _837 : min(cbSceneParam._m0[80u].w, _837));
        float _3063 = _3062 / _837;
        float _3074 = _3063 * _889;
        float _3075 = _890 * _3063;
        float _3076 = (-0.0) - _3075;
        float _3078 = _3063 * _891;
        float _3080 = (cbSceneParam._m0[77u].w * _3076) / _3062;
        float _3081 = _3080 + cbSceneParam._m0[79u].w;
        float _3082 = cbSceneParam._m0[79u].w - _3075;
        float _3088 = sqrt(((_3074 * _3074) + (_3075 * _3075)) + (_3078 * _3078));
        float _3091 = (1.0 - (cbSceneParam._m0[77u].w / _3062)) * _3088;
        float _3096 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3098 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3251;
        if (abs((_3076 - _3080) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3251 = ((((_3081 > 0.0) ? exp2(_3096 * _3081) : (2.0 - exp2(_3098 * _3081))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3091;
        }
        else
        {
            float _3211 = 1.0 / cbSceneParam._m0[80u].x;
            float _3212 = isnan(_3082) ? _3081 : (isnan(_3081) ? _3082 : max(_3081, _3082));
            float _3213 = isnan(_3082) ? _3081 : (isnan(_3081) ? _3082 : min(_3081, _3082));
            float _3222 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : min(_3212, 0.0));
            float _3223 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : min(_3213, 0.0));
            _3251 = ((abs(_3088 / _3076) * cbSceneParam._m0[80u].y) * ((((_3222 - _3223) * 2.0) - ((exp2(_3096 * (isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0)))) - exp2(_3096 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))))) * _3211)) - ((exp2(_3098 * _3222) - exp2(_3098 * _3223)) * _3211))) + (_3091 * cbSceneParam._m0[80u].z);
        }
        vec4 _3253 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3008, _3009, 1.0), 0.0);
        float _3262 = exp2((_3251 * (-1.44269502162933349609375)) * (1.0 - _3253.w));
        float _3263 = log2(_3262);
        float _3279 = log2(_3028);
        _3100 = (exp2(_3279 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].x)) * _3253.x) / cbSceneParam._m0[78u].x)) + _3025;
        _3102 = (exp2(_3279 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].y)) * _3253.y) / cbSceneParam._m0[78u].y)) + _3026;
        _3104 = (exp2(_3279 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].z)) * _3253.z) / cbSceneParam._m0[78u].z)) + _3027;
        _3106 = _3262 * _3028;
    }
    else
    {
        _3100 = _3025;
        _3102 = _3026;
        _3104 = _3027;
        _3106 = _3028;
    }
    float _3118 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3119 = _3118 == 3.0;
    float _3120 = log2(_3106);
    float _3127 = exp2(_3120 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2970 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _967))) + ((_2976 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1770)) * cbPerFrame._m0[3u].x));
    float _3128 = exp2(_3120 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2972 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _967))) + ((_2978 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1770)) * cbPerFrame._m0[3u].x));
    float _3129 = exp2(_3120 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2974 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _967))) + ((_2980 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1770)) * cbPerFrame._m0[3u].x));
    float _3138 = (_3118 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3138 * (_3119 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3100)));
    SV_Target.y = _3138 * (_3119 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3102)));
    SV_Target.z = _3138 * (_3119 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3104)));
    SV_Target.w = cbInstanceData._m0[_3000].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3000].w;
}


