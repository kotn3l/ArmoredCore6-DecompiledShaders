#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1410;
float _3769;
float _3770;
float _3771;
float _3772;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _365.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].z) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3781 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _441 = (_434 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _442 = (_434 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _443 = (_434 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _482 = _480.x;
    float _492 = dot(vec4(_482, _480.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _506 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _365.y) * 2.0) - ((((_482 - _492) * cbMtdParam._m0[24u].z) + _492) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3792 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _520 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_507 * ((_460.x * cbMtdParam._m0[13u].x) - _441)) + _441);
    float _523 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_507 * ((_460.y * cbMtdParam._m0[13u].y) - _442)) + _442);
    float _526 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_507 * ((_460.z * cbMtdParam._m0[13u].z) - _443)) + _443);
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _563 = _561.x;
    float _564 = _561.y;
    float _565 = _561.z;
    float _572 = ((_544.x - _563) * _434) + _563;
    float _573 = ((_544.y - _564) * _434) + _564;
    float _574 = ((_544.z - _565) * _434) + _565;
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _599 = ((_586.z - _574) * _507) + _574;
    float _602 = ((((_586.x - _572) * _507) + _572) * 2.0) + (-1.0);
    float _604 = ((((_586.y - _573) * _507) + _573) * 2.0) + (-1.0);
    float _605 = dot(vec2(_602, _604), vec2(_602, _604));
    float _3803 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _610 = sqrt(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _651 = _649.x;
    float _652 = 1.0 - _651;
    float _658 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _661 = ((isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : min(_658, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _670 = (_661 - ((((((_651 - _652) * cbMtdParam._m0[24u].w) + _652) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _661))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3824 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _671 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _678 = (_671 * (cbMtdParam._m0[17u].x - _520)) + _520;
    float _679 = (_671 * (cbMtdParam._m0[17u].y - _523)) + _523;
    float _680 = (_671 * (cbMtdParam._m0[17u].z - _526)) + _526;
    vec4 _692 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _694 = _692.x;
    float _695 = 1.0 - _694;
    float _722 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_694 - _695) * cbMtdParam._m0[24u].y) + _695) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3835 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _723 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _731 = ((((cbMtdParam._m0[10u].x - _678) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _723) + _678;
    float _732 = ((((cbMtdParam._m0[10u].y - _679) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _723) + _679;
    float _733 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _680)) * _723) + _680;
    float _737 = (cbMtdParam._m0[19u].w * (_624.z - _599)) + _599;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _758 = (_751.x * 2.0) + (-1.0);
    float _759 = (_751.y * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _3846 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _768 = (_671 * (_751.z - _737)) + _737;
    float _771 = ((cbMtdParam._m0[23u].y - _768) * _723) + _768;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _796 = (_790.x * 2.0) + (-1.0);
    float _797 = (_790.y * 2.0) + (-1.0);
    float _798 = dot(vec2(_796, _797), vec2(_796, _797));
    float _3857 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _806 = (((_624.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _602;
    float _807 = (((_624.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _604;
    float _819 = (((_758 - _806) + (cbMtdParam._m0[21u].x * _806)) * _671) + _806;
    float _820 = (((_759 - _807) + (cbMtdParam._m0[21u].x * _807)) * _671) + _807;
    float _821 = (_671 * (sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) - _610)) + _610;
    float _832 = (((_796 - _819) + (_819 * cbMtdParam._m0[22u].z)) * _723) + _819;
    float _833 = (((_797 - _820) + (_820 * cbMtdParam._m0[22u].z)) * _723) + _820;
    float _834 = ((sqrt(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) - _821) * _723) + _821;
    float _836 = cbMtdParam._m0[22u].x + _624.w;
    float _839 = fma(_834, _244 * NORMAL.x, fma(_833, _251 * TANGENT.x, (_237 * _229) * _832));
    float _842 = fma(_834, _244 * NORMAL.y, fma(_833, _251 * TANGENT.y, (_237 * _230) * _832));
    float _845 = fma(_834, _244 * NORMAL.z, fma(_833, _251 * TANGENT.z, (_237 * _231) * _832));
    float _849 = inversesqrt(dot(vec3(_839, _842, _845), vec3(_839, _842, _845)));
    float _850 = _849 * _839;
    float _851 = _849 * _842;
    float _852 = _849 * _845;
    float _3868 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _853 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _3890 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3901 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _3912 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _871 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _921 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _911);
    float _922 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _911);
    float _923 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _911);
    float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
    float _928 = _921 * _927;
    float _929 = _922 * _927;
    float _930 = _923 * _927;
    vec4 _935 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _937 = _935.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1091 = sqrt(((_921 * _921) + (_922 * _922)) + (_923 * _923));
        float _1097 = (cbMatDynParam._m0[5u].x * _1091) + cbMatDynParam._m0[5u].y;
        float _3923 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1102 = (cbMatDynParam._m0[5u].z * _1091) + cbMatDynParam._m0[5u].w;
        float _3934 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) - _1098)) + _1098) < ((_937 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _948 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _949 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _967 = fma(_852, cbSceneParam._m0[5u].z, fma(_851, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _850));
    float _970 = fma(_852, cbSceneParam._m0[6u].z, fma(_851, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _850));
    float _973 = fma(_852, cbSceneParam._m0[7u].z, fma(_851, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _850));
    uint _986 = _257 + 9u;
    uint _987 = _986 + uint(cbMatDynParam._m0[0u].w);
    float _993 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_987].x;
    float _994 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_987].y;
    float _995 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_987].z;
    float _3945 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    vec4 _1007 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _948, cbSceneParam._m0[86u].y * _949));
    float _1011 = ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * TEXCOORD_5.w) * _1007.x;
    float _1012 = dot(vec3(_850, _851, _852), vec3(_928, _929, _930));
    float _1015 = _1012 * 2.0;
    float _1019 = (_1015 * _850) - _928;
    float _1020 = (_1015 * _851) - _929;
    float _1021 = (_1015 * _852) - _930;
    float _1025 = abs(dot(vec3(_928, _929, _930), vec3(_850, _851, _852)));
    float _3978 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1027 = sqrt(_853);
    float _1040 = exp2((_1027 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1027 * 3.0));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1409;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1134 = fma(_1080, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072));
        float _1138 = fma(_1080, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072));
        float _1142 = fma(_1080, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072));
        float _1167 = _1072 + _850;
        float _1168 = _1076 + _851;
        float _1169 = _1080 + _852;
        float _1179 = fma(_1169, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167)) - _1134;
        float _1180 = fma(_1169, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167)) - _1138;
        float _1181 = fma(_1169, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167)) - _1142;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1134 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1138 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[34u].z) + ((((((_1142 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1237 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1203.x + (-0.5));
        float _1239 = _1237 * (_1203.y + (-0.5));
        float _1240 = _1237 * (_1203.z + (-0.5));
        float _1247 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1210.x + (-0.5));
        float _1249 = _1247 * (_1210.y + (-0.5));
        float _1250 = _1247 * (_1210.z + (-0.5));
        float _1257 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1217.x + (-0.5));
        float _1259 = _1257 * (_1217.y + (-0.5));
        float _1260 = _1257 * (_1217.z + (-0.5));
        float _1267 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1224.x + (-0.5));
        float _1269 = _1267 * (_1224.y + (-0.5));
        float _1270 = _1267 * (_1224.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1291 = (dot(vec3(_850, _851, _852), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1301 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4026 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1303 + 1.0))) + _1308) * _1271;
        float _1318 = _1239 * 0.5;
        float _1319 = _1249 * 0.5;
        float _1320 = _1259 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_850, _851, _852), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4059 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1345 + 1.0))) + _1350) * _1272;
        float _1360 = _1240 * 0.5;
        float _1361 = _1250 * 0.5;
        float _1362 = _1260 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_850, _851, _852), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4092 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1387 + 1.0))) + _1392) * _1273;
        _1409 = _1240;
        _1411 = _1239;
        _1412 = _1238;
        _1413 = _1250;
        _1414 = _1249;
        _1415 = _1248;
        _1416 = _1260;
        _1417 = _1259;
        _1418 = _1258;
        _1419 = _1273;
        _1420 = _1272;
        _1421 = _1271;
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1410;
        _1411 = _1410;
        _1412 = _1410;
        _1413 = _1410;
        _1414 = _1410;
        _1415 = _1410;
        _1416 = _1410;
        _1417 = _1410;
        _1418 = _1410;
        _1419 = _1410;
        _1420 = _1410;
        _1421 = _1410;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1451 = fma(_1080, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072));
        float _1455 = fma(_1080, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072));
        float _1459 = fma(_1080, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072));
        float _1482 = _1072 + _850;
        float _1483 = _1076 + _851;
        float _1484 = _1080 + _852;
        float _1494 = fma(_1484, cbModelParam._m0[30u].z, fma(_1483, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1482)) - _1451;
        float _1495 = fma(_1484, cbModelParam._m0[31u].z, fma(_1483, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1482)) - _1455;
        float _1496 = fma(_1484, cbModelParam._m0[32u].z, fma(_1483, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1482)) - _1459;
        float _1500 = inversesqrt(dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496)));
        float _1513 = ((_1500 * _1494) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1451 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1500 * _1495) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1455 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1500 * _1496) / cbModelParam._m0[35u].z) + ((((((_1459 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        float _1550 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1517.x + (-0.5));
        float _1552 = _1550 * (_1517.y + (-0.5));
        float _1553 = _1550 * (_1517.z + (-0.5));
        float _1560 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1524.x + (-0.5));
        float _1562 = _1560 * (_1524.y + (-0.5));
        float _1563 = _1560 * (_1524.z + (-0.5));
        float _1570 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1531.x + (-0.5));
        float _1572 = _1570 * (_1531.y + (-0.5));
        float _1573 = _1570 * (_1531.z + (-0.5));
        float _1580 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1538.x + (-0.5));
        float _1582 = _1580 * (_1538.y + (-0.5));
        float _1583 = _1580 * (_1538.z + (-0.5));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = _1551 * 0.5;
        float _1588 = _1561 * 0.5;
        float _1589 = _1571 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_850, _851, _852), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4155 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1614 + 1.0))) + _1619) * _1584;
        float _1629 = _1552 * 0.5;
        float _1630 = _1562 * 0.5;
        float _1631 = _1572 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_850, _851, _852), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4188 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1656 + 1.0))) + _1661) * _1585;
        float _1671 = _1553 * 0.5;
        float _1672 = _1563 * 0.5;
        float _1673 = _1573 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_850, _851, _852), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4221 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1698 + 1.0))) + _1703) * _1586;
        _1720 = _1553;
        _1721 = _1552;
        _1722 = _1551;
        _1723 = _1563;
        _1724 = _1562;
        _1725 = _1561;
        _1726 = _1573;
        _1727 = _1572;
        _1728 = _1571;
        _1729 = _1586;
        _1730 = _1585;
        _1731 = _1584;
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
    }
    else
    {
        _1720 = _1410;
        _1721 = _1410;
        _1722 = _1410;
        _1723 = _1410;
        _1724 = _1410;
        _1725 = _1410;
        _1726 = _1410;
        _1727 = _1410;
        _1728 = _1410;
        _1729 = _1410;
        _1730 = _1410;
        _1731 = _1410;
        _1732 = 0.0;
        _1733 = 0.0;
        _1734 = 0.0;
    }
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1422)) + _1422;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1423)) + _1423;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1424)) + _1424;
    float _1767 = fma(_1746, cbSceneParam._m0[89u].z, fma(_1745, cbSceneParam._m0[89u].y, _1744 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1746, cbSceneParam._m0[90u].z, fma(_1745, cbSceneParam._m0[90u].y, _1744 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1746, cbSceneParam._m0[91u].z, fma(_1745, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1744));
    float _1788 = _1019 * 0.5;
    float _1789 = _1020 * 0.5;
    float _1790 = _1021 * 0.5;
    float _1791 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1794 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1797 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1831;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1804 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1409, _1413, _1416, _1419));
        float _1808 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1812 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1819 = dot(vec4(cbModelParam._m0[39u]), vec4(_1788, _1789, _1790, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1842;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1833 = dot(vec4(cbModelParam._m0[40u]), vec4(_1788, _1789, _1790, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1833) ? 0.0 : (isnan(0.0) ? _1833 : max(0.0, _1833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1846 = (_1842 * cbModelParam._m0[1u].x) + (_1831 * (1.0 - cbModelParam._m0[1u].x));
    float _1856 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _853);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1856 : min(cbModelParam._m0[25u].z, _1856));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1905 = fma(_1080, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072)) + cbModelParam._m0[13u].w;
        float _1909 = fma(_1080, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072)) + cbModelParam._m0[14u].w;
        float _1913 = fma(_1080, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072)) + cbModelParam._m0[15u].w;
        float _1916 = fma(_1021, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1019));
        float _1919 = fma(_1021, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1019));
        float _1922 = fma(_1021, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1019));
        float _1950;
        if (_1916 > 0.0)
        {
            _1950 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1950 = frontier_phi_17_15_ladder;
        }
        float _2151;
        if (_1919 > 0.0)
        {
            _2151 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2151 = frontier_phi_26_22_ladder;
        }
        float _2394;
        if (_1922 > 0.0)
        {
            _2394 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2394 = frontier_phi_38_33_ladder;
        }
        float _2396 = isnan(_2151) ? _1950 : (isnan(_1950) ? _2151 : min(_1950, _2151));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1916) + _1905;
        float _2402 = (_2397 * _1919) + _1909;
        float _2403 = (_2397 * _1922) + _1913;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2406 = (-1.0) - _2404;
        float _2408 = _2404 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2403 > _2408) || ((_2403 < _2406) || ((_2402 > _2408) || ((_2402 < _2406) || ((_2401 < _2406) || (_2401 > _2408))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2403, cbModelParam._m0[9u].z, fma(_2402, cbModelParam._m0[9u].y, _2401 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2403, cbModelParam._m0[10u].z, fma(_2402, cbModelParam._m0[10u].y, _2401 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2403, cbModelParam._m0[11u].z, fma(_2402, cbModelParam._m0[11u].y, _2401 * cbModelParam._m0[11u].x))), _1857);
            frontier_phi_16_38_ladder = _2527.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2527.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2527.x * cbModelParam._m0[1u].y;
        }
        _1938 = frontier_phi_16_38_ladder_2;
        _1940 = frontier_phi_16_38_ladder_1;
        _1942 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1019, _1020, _1021), _1857);
        _1938 = _1926.x * cbModelParam._m0[1u].y;
        _1940 = _1926.y * cbModelParam._m0[1u].y;
        _1942 = _1926.z * cbModelParam._m0[1u].y;
    }
    float _1946 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _853);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1946 : min(cbModelParam._m0[25u].w, _1946));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2001 = fma(_1080, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072)) + cbModelParam._m0[21u].w;
        float _2005 = fma(_1080, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072)) + cbModelParam._m0[22u].w;
        float _2009 = fma(_1080, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072)) + cbModelParam._m0[23u].w;
        float _2012 = fma(_1021, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1019));
        float _2015 = fma(_1021, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1019));
        float _2018 = fma(_1021, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1019));
        float _2156;
        if (_2012 > 0.0)
        {
            _2156 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2156 = frontier_phi_28_24_ladder;
        }
        float _2421;
        if (_2015 > 0.0)
        {
            _2421 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2421 = frontier_phi_40_35_ladder;
        }
        float _2626;
        if (_2018 > 0.0)
        {
            _2626 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2626 = frontier_phi_49_46_ladder;
        }
        float _2628 = isnan(_2421) ? _2156 : (isnan(_2156) ? _2421 : min(_2156, _2421));
        float _2629 = isnan(_2626) ? _2628 : (isnan(_2628) ? _2626 : min(_2628, _2626));
        float _2633 = (_2629 * _2012) + _2001;
        float _2634 = (_2629 * _2015) + _2005;
        float _2635 = (_2629 * _2018) + _2009;
        float _2636 = _2629 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2636;
        float _2639 = _2636 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2635 > _2639) || ((_2635 < _2637) || ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 < _2637) || (_2633 > _2639))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2635, cbModelParam._m0[17u].z, fma(_2634, cbModelParam._m0[17u].y, _2633 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2635, cbModelParam._m0[18u].z, fma(_2634, cbModelParam._m0[18u].y, _2633 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2635, cbModelParam._m0[19u].z, fma(_2634, cbModelParam._m0[19u].y, _2633 * cbModelParam._m0[19u].x))), _1947);
            frontier_phi_25_49_ladder = _2834.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2834.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2834.x * cbModelParam._m0[1u].z;
        }
        _2037 = frontier_phi_25_49_ladder_2;
        _2039 = frontier_phi_25_49_ladder_1;
        _2041 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1019, _1020, _1021), _1947);
        _2037 = _2021.x * cbModelParam._m0[1u].z;
        _2039 = _2021.y * cbModelParam._m0[1u].z;
        _2041 = _2021.z * cbModelParam._m0[1u].z;
    }
    float _2053 = ((((1.0 - _1040) * ((_1027 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1040 * _1027)) * _1011;
    float _2054 = _2053 * ((cbModelParam._m0[1u].w * (_2037 - _1938)) + _1938);
    float _2055 = _2053 * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2056 = _2053 * ((cbModelParam._m0[1u].w * (_2041 - _1942)) + _1942);
    float _2059 = fma(_2056, cbSceneParam._m0[89u].z, fma(_2055, cbSceneParam._m0[89u].y, _2054 * cbSceneParam._m0[89u].x));
    float _2062 = fma(_2056, cbSceneParam._m0[90u].z, fma(_2055, cbSceneParam._m0[90u].y, _2054 * cbSceneParam._m0[90u].x));
    float _2065 = fma(_2056, cbSceneParam._m0[91u].z, fma(_2055, cbSceneParam._m0[91u].y, _2054 * cbSceneParam._m0[91u].x));
    uvec4 _2075 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2077 = _2075.x * 14u;
    uint _2078 = _2077 + 13u;
    float _2085 = _1011 + (-1.0);
    float _2090 = (cbLight._m0[_2078].x * _2085) + 1.0;
    float _2091 = (cbLight._m0[_2078].y * _2085) + 1.0;
    float _2092 = (cbLight._m0[_2078].z * _2085) + 1.0;
    float _2093 = (cbLight._m0[_2078].w * _2085) + 1.0;
    uint _2094 = _2077 + 5u;
    float _2100 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2104 = _2077 + 4u;
    float _2110 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
    uint _2114 = _2077 | 1u;
    float _2125 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_850, _851, _852));
    float _2128 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_850, _851, _852));
    float _4357 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _4368 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2133 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2135 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2142 = ((cbLight._m0[_2094].x * _2100) * _2135) + ((cbLight._m0[_2104].x * _2110) * _2133);
    float _2143 = ((_2100 * cbLight._m0[_2094].y) * _2135) + ((_2110 * cbLight._m0[_2104].y) * _2133);
    float _2144 = ((_2100 * cbLight._m0[_2094].z) * _2135) + ((_2110 * cbLight._m0[_2104].z) * _2133);
    uvec4 _2148 = floatBitsToUint(cbLight._m0[_2077 + 12u]);
    bool _2150 = _2148.x == 0u;
    float _2161;
    float _2163;
    float _2165;
    if (_2150)
    {
        _2161 = _2142;
        _2163 = _2143;
        _2165 = _2144;
    }
    else
    {
        uint _2169 = _2077 + 6u;
        float _2185 = (dot(vec3(cbLight._m0[_2077 + 2u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4379 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2188 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2161 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _2142;
        _2163 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _2143;
        _2165 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _2144;
    }
    bool _2168 = _2148.y == 0u;
    float _2206;
    float _2208;
    float _2210;
    if (_2168)
    {
        _2206 = _2161;
        _2208 = _2163;
        _2210 = _2165;
    }
    else
    {
        uint _2365 = _2077 + 7u;
        float _2381 = (dot(vec3(cbLight._m0[_2077 + 3u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2382 = _2381 * _2381;
        float _4395 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2383 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2384 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2206 = (((cbLight._m0[_2365].x * 0.3183098733425140380859375) * _2383) * _2384) + _2161;
        _2208 = (((cbLight._m0[_2365].y * 0.3183098733425140380859375) * _2383) * _2384) + _2163;
        _2210 = (((cbLight._m0[_2365].z * 0.3183098733425140380859375) * _2383) * _2384) + _2165;
    }
    uint _2213 = _2077 + 8u;
    float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _853) * 0.949999988079071044921875);
    float _2227 = _2226 * _2226;
    float _2228 = cbLight._m0[_2077].x + _928;
    float _2229 = cbLight._m0[_2077].y + _929;
    float _2230 = cbLight._m0[_2077].z + _930;
    float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
    float _2235 = _2234 * _2228;
    float _2236 = _2234 * _2229;
    float _2237 = _2234 * _2230;
    float _2238 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2077].xyz));
    float _4411 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _4422 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _2242 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2243 = dot(vec3(_850, _851, _852), vec3(_2235, _2236, _2237));
    float _4433 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2235, _2236, _2237));
    float _4444 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2227 * _2227;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2267 = 1.0 - _2227;
    float _2278 = (0.5 / (((_2242 * ((_2241 * _2267) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2267) + _2227) * _2241))) * _2241;
    float _4455 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2280 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    uint _2291 = _2077 + 9u;
    float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _853) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_2114].x + _928;
    float _2305 = cbLight._m0[_2114].y + _929;
    float _2306 = cbLight._m0[_2114].z + _930;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2114].xyz));
    float _4466 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2318 = dot(vec3(_850, _851, _852), vec3(_2311, _2312, _2313));
    float _4477 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2311, _2312, _2313));
    float _4488 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2303 * _2303;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2339 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2340 = 1.0 - _2303;
    float _2350 = (0.5 / (((_2242 * ((_2317 * _2340) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2340) + _2303) * _2317))) * _2317;
    float _4499 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    float _2362 = (((_2339 * cbLight._m0[_2291].x) * _2352) * _2100) + (((_2266 * cbLight._m0[_2213].x) * _2280) * _2110);
    float _2363 = (((_2339 * cbLight._m0[_2291].y) * _2352) * _2100) + (((_2266 * cbLight._m0[_2213].y) * _2280) * _2110);
    float _2364 = (((_2339 * cbLight._m0[_2291].z) * _2352) * _2100) + (((_2266 * cbLight._m0[_2213].z) * _2280) * _2110);
    float _2426;
    float _2428;
    float _2430;
    if (_2150)
    {
        _2426 = _2362;
        _2428 = _2363;
        _2430 = _2364;
    }
    else
    {
        uint _2432 = _2077 + 2u;
        uint _2436 = _2077 + 10u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _853) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _928;
        float _2453 = cbLight._m0[_2432].y + _929;
        float _2454 = cbLight._m0[_2432].z + _930;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2432].xyz));
        float _4510 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2466 = dot(vec3(_850, _851, _852), vec3(_2459, _2460, _2461));
        float _4521 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4532 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2487 = (exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2488 = 1.0 - _2451;
        float _2498 = (0.5 / (((_2242 * ((_2465 * _2488) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2488) + _2451) * _2465))) * _2465;
        float _4543 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2500 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2501 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2426 = (((_2487 * cbLight._m0[_2436].x) * _2500) * _2501) + _2362;
        _2428 = (((_2487 * cbLight._m0[_2436].y) * _2500) * _2501) + _2363;
        _2430 = (((_2487 * cbLight._m0[_2436].z) * _2500) * _2501) + _2364;
    }
    float _2536;
    float _2538;
    float _2540;
    if (_2168)
    {
        _2536 = _2426;
        _2538 = _2428;
        _2540 = _2430;
    }
    else
    {
        uint _2547 = _2077 + 3u;
        uint _2551 = _2077 + 11u;
        float _2565 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2547].w)) * _853) * 0.949999988079071044921875);
        float _2566 = _2565 * _2565;
        float _2567 = cbLight._m0[_2547].x + _928;
        float _2568 = cbLight._m0[_2547].y + _929;
        float _2569 = cbLight._m0[_2547].z + _930;
        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
        float _2574 = _2573 * _2567;
        float _2575 = _2573 * _2568;
        float _2576 = _2573 * _2569;
        float _2577 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2547].xyz));
        float _4559 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2581 = dot(vec3(_850, _851, _852), vec3(_2574, _2575, _2576));
        float _4570 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2585 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_2574, _2575, _2576));
        float _4581 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2589 = _2566 * _2566;
        float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
        float _2602 = (exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2603 = 1.0 - _2566;
        float _2613 = (0.5 / (((_2242 * ((_2580 * _2603) + _2566)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2603) + _2566) * _2580))) * _2580;
        float _4592 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2536 = (((_2602 * cbLight._m0[_2551].x) * _2615) * _2616) + _2426;
        _2538 = (((_2602 * cbLight._m0[_2551].y) * _2615) * _2616) + _2428;
        _2540 = (((_2602 * cbLight._m0[_2551].z) * _2615) * _2616) + _2430;
    }
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_2075.y == 0u)
    {
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2691;
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2691;
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2691;
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.x;
        uint _2718 = uint((float(_2706.y) * floor(float(uint(cbSceneParam._m0[85u].y * _949) / _2707))) + floor(float(uint(cbSceneParam._m0[85u].x * _948) / _2707)));
        float _2728 = (log2(_2694 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2729 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        uint _2732 = uint(isnan(14.0) ? _2729 : (isnan(_2729) ? 14.0 : min(_2729, 14.0)));
        uvec4 _2737 = texelFetch(g_lightClusterGridBuffer, int(((_2732 << 2u) + (_2718 << 6u)) >> 2u));
        uint _2738 = _2737.x;
        uint _2739 = _2706.z;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((((1u << ((_2739 >> 4u) & 15u)) + 4294967295u) & _2738) == 0u) || ((_2739 & 240u) == 0u))
        {
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
        }
        else
        {
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            uint _2998 = 0u;
            uint _3007;
            bool _3008;
            for (;;)
            {
                _3007 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                _3008 = _3007 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3008)
                {
                    frontier_phi_66_pred = _2992;
                    frontier_phi_66_pred_1 = _2997;
                    frontier_phi_66_pred_2 = _2996;
                    frontier_phi_66_pred_3 = _2995;
                    frontier_phi_66_pred_4 = _2994;
                    frontier_phi_66_pred_5 = _2993;
                }
                else
                {
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    uint _3143;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _3007;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    for (;;)
                    {
                        uint _3147 = uint(findLSB(_3143)) + (_2998 << 5u);
                        uint _3144 = (_3143 + 4294967295u) & _3143;
                        uint _3149 = _3147 * 48u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 3u)).x));
                        uint _3169 = (_3147 * 48u) + 4u;
                        vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3188 = (_3147 * 48u) + 8u;
                        vec3 _3199 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x));
                        float _3203 = _3163.x - _2692;
                        float _3204 = _3163.y - _2693;
                        float _3205 = _3163.z - _2694;
                        float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                        float _3209 = inversesqrt(_3206);
                        float _3210 = _3209 * _3203;
                        float _3211 = _3209 * _3204;
                        float _3212 = _3209 * _3205;
                        float _3213 = dot(vec3(_967, _970, _973), vec3(_3210, _3211, _3212));
                        float _3218 = 1.0 - (_3206 * _3163.w);
                        float _4618 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3220 = sqrt(_3206) * _3182.w;
                        float _3223 = 1.39999997615814208984375 / (_3220 + 1.39999997615814208984375);
                        float _3224 = _3223 * _3223;
                        float _3227 = ((1.0 - _3224) * _3213) + _3224;
                        float _3230 = _3220 * _3220;
                        float _3234 = ((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3219) / ((_3230 * 0.699999988079071044921875) + 1.0);
                        float _3238 = (-0.0) - _2692;
                        float _3239 = (-0.0) - _2693;
                        float _3240 = (-0.0) - _2694;
                        float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3255 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                        float _3256 = 1.0 - _1027;
                        float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                        float _3264 = _3263 * _3263;
                        float _3265 = _3264 * _3264;
                        float _3266 = _3245 + _3210;
                        float _3267 = _3246 + _3211;
                        float _3268 = _3247 + _3212;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3276 = dot(vec3(_967, _970, _973), vec3(_3245, _3246, _3247));
                        float _4634 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3280 = dot(vec3(_967, _970, _973), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                        float _4645 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                        float _3288 = _3223 * _3264;
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3213) + _3289;
                        float _4656 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3294 = 1.0 - _3264;
                        float _3304 = (0.5 / (((_3293 * ((_3279 * _3294) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3264) * _3279))) * _3293;
                        float _4667 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3315 = (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) / ((_3287 * _3287) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125))) * _3219;
                        _3067 = (_3234 * _3182.x) + _3140;
                        _3068 = (_3234 * _3182.y) + _3141;
                        _3069 = (_3234 * _3182.z) + _3142;
                        _3064 = (_3315 * _3199.x) + _3137;
                        _3065 = (_3315 * _3199.y) + _3138;
                        _3066 = (_3315 * _3199.z) + _3139;
                        if (_3144 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3144;
                        }
                    }
                    frontier_phi_66_pred = _3064;
                    frontier_phi_66_pred_1 = _3069;
                    frontier_phi_66_pred_2 = _3068;
                    frontier_phi_66_pred_3 = _3067;
                    frontier_phi_66_pred_4 = _3066;
                    frontier_phi_66_pred_5 = _3065;
                }
                _2840 = frontier_phi_66_pred;
                _2850 = frontier_phi_66_pred_1;
                _2848 = frontier_phi_66_pred_2;
                _2846 = frontier_phi_66_pred_3;
                _2844 = frontier_phi_66_pred_4;
                _2842 = frontier_phi_66_pred_5;
                uint _2999 = _2998 + 1u;
                if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2992 = _2840;
                    _2993 = _2842;
                    _2994 = _2844;
                    _2995 = _2846;
                    _2996 = _2848;
                    _2997 = _2850;
                    _2998 = _2999;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
        }
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.z;
        uint _2856 = (_2854 >> 8u) & 15u;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((4294967295u << _2856) & _2738) == 0u)
        {
            _2960 = _2839;
            _2962 = _2841;
            _2964 = _2843;
            _2966 = _2845;
            _2968 = _2847;
            _2970 = _2849;
        }
        else
        {
            float _2985 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
            float _2986 = _2985 * _2692;
            float _2987 = _2985 * _2693;
            float _2988 = _2985 * _2694;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2856 < ((_2854 >> 12u) & 15u))
            {
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _3120 = _2839;
                float _3121 = _2841;
                float _3122 = _2843;
                float _3123 = _2845;
                float _3124 = _2847;
                float _3125 = _2849;
                uint _3126 = _2856;
                uint _3135;
                bool _3136;
                for (;;)
                {
                    _3135 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_3126 << 2u)) >> 2u)).x;
                    _3136 = _3135 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3136)
                    {
                        frontier_phi_77_pred = _3125;
                        frontier_phi_77_pred_1 = _3124;
                        frontier_phi_77_pred_2 = _3123;
                        frontier_phi_77_pred_3 = _3122;
                        frontier_phi_77_pred_4 = _3121;
                        frontier_phi_77_pred_5 = _3120;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3342 = _3120;
                        float _3343 = _3121;
                        float _3344 = _3122;
                        float _3345 = _3123;
                        float _3346 = _3124;
                        float _3347 = _3125;
                        uint _3348 = _3135;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3417;
                        vec4 _3432;
                        float _3478;
                        bool _3479;
                        for (;;)
                        {
                            uint _3359 = ((_3126 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3404 = (_3359 * 40u) + 16u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3359 * 40u) + 20u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3359 * 40u) + 24u;
                            vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3453 = (_3359 * 40u) + 28u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            _3478 = fma(_2694, _3466.z, fma(_2693, _3466.y, _3466.x * _2692)) + _3466.w;
                            _3479 = !((fma(_2694, _3447.z, fma(_2693, _3447.y, _3447.x * _2692)) + _3447.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3479)
                            {
                                float _3506 = _3374.x - _2692;
                                float _3507 = _3374.y - _2693;
                                float _3508 = _3374.z - _2694;
                                float _3509 = dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508));
                                float _3512 = inversesqrt(_3509);
                                float _3513 = _3512 * _3506;
                                float _3514 = _3512 * _3507;
                                float _3515 = _3512 * _3508;
                                float _3519 = 1.0 - (_3509 / (_3375 * _3375));
                                float _4678 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3524 = sqrt(_3509) * _3390.w;
                                float _3526 = 1.39999997615814208984375 / (_3524 + 1.39999997615814208984375);
                                float _3527 = _3526 * _3526;
                                float _3530 = ((1.0 - _3527) * dot(vec3(_3513, _3514, _3515), vec3(_967, _970, _973))) + _3527;
                                float _3533 = _3524 * _3524;
                                float _3537 = (fma(_2694, _3417.z, fma(_2693, _3417.y, _3417.x * _2692)) + _3417.w) / _3478;
                                float _3538 = (fma(_2694, _3432.z, fma(_2693, _3432.y, _3432.x * _2692)) + _3432.w) / _3478;
                                float _3542 = 1.0 - dot(vec2(_3537, _3538), vec2(_3537, _3538));
                                float _4694 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3544 = _3543 * (((isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0))) * _3520) / ((_3533 * 0.699999988079071044921875) + 1.0));
                                float _3556 = exp2(log2(1.0 / ((_3533 * 3.5) + 5.0)) * 0.25);
                                float _3557 = 1.0 - _1027;
                                float _3564 = sqrt(1.0 - ((1.0 - (_3557 * _3557)) * (1.0 - (_3556 * _3556))));
                                float _3565 = _3564 * _3564;
                                float _3566 = _3565 * _3565;
                                float _3567 = _3513 - _2986;
                                float _3568 = _3514 - _2987;
                                float _3569 = _3515 - _2988;
                                float _3573 = inversesqrt(dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569)));
                                float _3577 = dot(vec3(_967, _970, _973), vec3((-0.0) - _2986, (-0.0) - _2987, (-0.0) - _2988));
                                float _4705 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3581 = dot(vec3(_967, _970, _973), vec3(_3573 * _3567, _3573 * _3568, _3573 * _3569));
                                float _4716 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3584 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3588 = ((_3584 * _3584) * (_3566 + (-1.0))) + 1.0;
                                float _3589 = _3526 * _3565;
                                float _3590 = _3589 * _3589;
                                float _3596 = ((1.0 - _3590) * dot(vec3(_967, _970, _973), vec3(_3513, _3514, _3515))) + _3590;
                                float _4727 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3598 = 1.0 - _3565;
                                float _3608 = (0.5 / (((_3597 * ((_3580 * _3598) + _3565)) + 9.9999999392252902907785028219223e-09) + (((_3597 * _3598) + _3565) * _3580))) * _3597;
                                float _4738 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3618 = (_3543 * _3520) * (((_3566 * 3.1415927410125732421875) * (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) / ((_3588 * _3588) * ((_3533 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3544 * _3390.y;
                                frontier_phi_83_pred_1 = _3544 * _3390.x;
                                frontier_phi_83_pred_2 = _3618 * _3402.z;
                                frontier_phi_83_pred_3 = _3618 * _3402.y;
                                frontier_phi_83_pred_4 = _3618 * _3402.x;
                                frontier_phi_83_pred_5 = _3544 * _3390.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3626 = frontier_phi_83_pred;
                            _3625 = frontier_phi_83_pred_1;
                            _3624 = frontier_phi_83_pred_2;
                            _3623 = frontier_phi_83_pred_3;
                            _3622 = frontier_phi_83_pred_4;
                            _3627 = frontier_phi_83_pred_5;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3334;
                        frontier_phi_77_pred_1 = _3333;
                        frontier_phi_77_pred_2 = _3332;
                        frontier_phi_77_pred_3 = _3331;
                        frontier_phi_77_pred_4 = _3330;
                        frontier_phi_77_pred_5 = _3329;
                    }
                    _2971 = frontier_phi_77_pred;
                    _2969 = frontier_phi_77_pred_1;
                    _2967 = frontier_phi_77_pred_2;
                    _2965 = frontier_phi_77_pred_3;
                    _2963 = frontier_phi_77_pred_4;
                    _2961 = frontier_phi_77_pred_5;
                    uint _3127 = _3126 + 1u;
                    if (_3127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3120 = _2961;
                        _3121 = _2963;
                        _3122 = _2965;
                        _3123 = _2967;
                        _3124 = _2969;
                        _3125 = _2971;
                        _3126 = _3127;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2965;
                frontier_phi_58_59_ladder_1 = _2971;
                frontier_phi_58_59_ladder_2 = _2969;
                frontier_phi_58_59_ladder_3 = _2967;
                frontier_phi_58_59_ladder_4 = _2963;
                frontier_phi_58_59_ladder_5 = _2961;
            }
            else
            {
                frontier_phi_58_59_ladder = _2843;
                frontier_phi_58_59_ladder_1 = _2849;
                frontier_phi_58_59_ladder_2 = _2847;
                frontier_phi_58_59_ladder_3 = _2845;
                frontier_phi_58_59_ladder_4 = _2841;
                frontier_phi_58_59_ladder_5 = _2839;
            }
            _2960 = frontier_phi_58_59_ladder_5;
            _2962 = frontier_phi_58_59_ladder_4;
            _2964 = frontier_phi_58_59_ladder;
            _2966 = frontier_phi_58_59_ladder_3;
            _2968 = frontier_phi_58_59_ladder_2;
            _2970 = frontier_phi_58_59_ladder_1;
        }
        float _2975 = isnan(1.0) ? _1011 : (isnan(_1011) ? 1.0 : min(_1011, 1.0));
        _2751 = (_2975 * _2966) + _2206;
        _2753 = (_2975 * _2968) + _2208;
        _2755 = (_2975 * _2970) + _2210;
        _2757 = ((_2960 * 0.039999999105930328369140625) * _2975) + _2536;
        _2759 = ((_2962 * 0.039999999105930328369140625) * _2975) + _2538;
        _2761 = ((_2964 * 0.039999999105930328369140625) * _2975) + _2540;
    }
    else
    {
        _2751 = _2206;
        _2753 = _2208;
        _2755 = _2210;
        _2757 = _2536;
        _2759 = _2538;
        _2761 = _2540;
    }
    float _4754 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4765 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4776 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2778 = ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2751 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1011))) + ((_2757 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    float _2779 = ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2753 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1011))) + ((_2759 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    float _2780 = ((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2755 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1011))) + ((_2761 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    uint _2781 = _257 + 6u;
    float _2789 = _948 / cbSceneParam._m0[86u].x;
    float _2790 = _949 / cbSceneParam._m0[86u].y;
    vec4 _2804 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, (log2((isnan(cbSceneParam._m0[77u].w) ? _871 : (isnan(_871) ? cbSceneParam._m0[77u].w : min(_871, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2806 = _2804.x;
    float _2807 = _2804.y;
    float _2808 = _2804.z;
    float _2809 = _2804.w;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_871 > cbSceneParam._m0[78u].w)
    {
        float _2864 = isnan(_871) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _871 : min(cbSceneParam._m0[80u].w, _871));
        float _2865 = _2864 / _871;
        float _2876 = _2865 * _921;
        float _2877 = _922 * _2865;
        float _2878 = (-0.0) - _2877;
        float _2880 = _2865 * _923;
        float _2882 = (cbSceneParam._m0[77u].w * _2878) / _2864;
        float _2883 = _2882 + cbSceneParam._m0[79u].w;
        float _2884 = cbSceneParam._m0[79u].w - _2877;
        float _2890 = sqrt(((_2876 * _2876) + (_2877 * _2877)) + (_2880 * _2880));
        float _2893 = (1.0 - (cbSceneParam._m0[77u].w / _2864)) * _2890;
        float _2898 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2900 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3077;
        if (abs((_2878 - _2882) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3077 = ((((_2883 > 0.0) ? exp2(_2898 * _2883) : (2.0 - exp2(_2900 * _2883))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2893;
        }
        else
        {
            float _3021 = 1.0 / cbSceneParam._m0[80u].x;
            float _3022 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : max(_2883, _2884));
            float _3023 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : min(_2883, _2884));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            _3077 = ((abs(_2890 / _2878) * cbSceneParam._m0[80u].y) * ((((_3032 - _3033) * 2.0) - ((exp2(_2898 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0)))) - exp2(_2898 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))))) * _3021)) - ((exp2(_2900 * _3032) - exp2(_2900 * _3033)) * _3021))) + (_2893 * cbSceneParam._m0[80u].z);
        }
        vec4 _3079 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, 1.0), 0.0);
        float _3088 = exp2((_3077 * (-1.44269502162933349609375)) * (1.0 - _3079.w));
        float _3089 = log2(_3088);
        float _3105 = log2(_2809);
        _2902 = (exp2(_3105 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].x)) * _3079.x) / cbSceneParam._m0[78u].x)) + _2806;
        _2904 = (exp2(_3105 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].y)) * _3079.y) / cbSceneParam._m0[78u].y)) + _2807;
        _2906 = (exp2(_3105 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].z)) * _3079.z) / cbSceneParam._m0[78u].z)) + _2808;
        _2908 = _3088 * _2809;
    }
    else
    {
        _2902 = _2806;
        _2904 = _2807;
        _2906 = _2808;
        _2908 = _2809;
    }
    bool _3115;
    vec4 _2918;
    vec4 _2940;
    float _2942;
    float _2946;
    float _2947;
    float _2948;
    float _2949;
    bool _2959;
    for (;;)
    {
        _2918 = cbMatDynParam._m0[0u];
        float _2920 = roundEven(_2918.y);
        bool _2921 = _2920 == 3.0;
        float _2922 = log2(_2908);
        float _2929 = exp2(_2922 * cbSceneParam._m0[78u].x) * _2778;
        float _2930 = exp2(_2922 * cbSceneParam._m0[78u].y) * _2779;
        float _2931 = exp2(_2922 * cbSceneParam._m0[78u].z) * _2780;
        float _2938 = _937 + (-0.5);
        _2940 = cbMtdParam._m0[1u];
        _2942 = _2940.y * _2938;
        float _2945 = (_2920 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2946 = _2945 * (_2921 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2902)));
        _2947 = _2945 * (_2921 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2904)));
        _2948 = _2945 * (_2921 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2906)));
        _2949 = _2938 * 0.999000012874603271484375;
        _2959 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2959)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2949) < 0.5)
            {
                _3115 = true;
                break;
            }
        }
        uint _3056 = _986 + uint(_2918.w);
        if ((cbInstanceData._m0[_3056].w < 1.0) && ((cbInstanceData._m0[_3056].w + _2949) < 0.5))
        {
            _3115 = true;
            break;
        }
        if ((_2942 + 1.0) < _2940.x)
        {
            _3115 = true;
            break;
        }
        _3115 = false;
        break;
    }
    float _3320;
    if (_3115)
    {
        discard_state = true;
        _3320 = 0.0;
    }
    else
    {
        _3320 = cbInstanceData._m0[_2781].w;
    }
    SV_Target.x = _2946;
    SV_Target.y = _2947;
    SV_Target.z = _2948;
    SV_Target.w = _3320;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2781].w;
    discard_exit();
}


