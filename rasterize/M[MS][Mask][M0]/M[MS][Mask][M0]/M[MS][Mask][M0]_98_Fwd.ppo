#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1476;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3778 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3789 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3800 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _383.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[24u].z) + _432) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3811 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _457 = (_450 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _458 = (_450 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _459 = (_450 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _300) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _301) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _383.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3822 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    float _536 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _530;
    float _539 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _531;
    float _542 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _532;
    float _549 = ((_530 - _536) * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) + _536;
    float _550 = ((_531 - _539) * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) + _539;
    float _551 = ((_532 - _542) * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) + _542;
    vec4 _570 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _633 = _631.x;
    float _634 = _631.y;
    float _635 = _631.z;
    float _642 = ((_614.x - _633) * _450) + _633;
    float _643 = ((_614.y - _634) * _450) + _634;
    float _644 = ((_614.z - _635) * _450) + _635;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _300) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _301) + cbTextureTilingScale._m0[2u].w));
    float _669 = ((_656.z - _644) * _523) + _644;
    float _672 = ((((_656.x - _642) * _523) + _642) * 2.0) + (-1.0);
    float _673 = ((((_656.y - _643) * _523) + _643) * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3833 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _679 = sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _709 = (_672 + ((((_589.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_697.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _710 = (_673 + ((((_589.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_697.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _713 = fma(_679, _250, fma(_710, _257, _709 * _243));
    float _716 = fma(_679, _251, fma(_710, _258, _709 * _244));
    float _719 = fma(_679, _252, fma(_710, _259, _709 * _245));
    float _723 = inversesqrt(dot(vec3(_713, _716, _719), vec3(_713, _716, _719)));
    vec4 _750 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _752 = _750.x;
    float _753 = 1.0 - _752;
    float _759 = (cbMtdParam._m0[19u].x + dot(vec4(_723 * _713, _723 * _716, _723 * _719, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_752 - _753) * cbMtdParam._m0[24u].w) + _753) * cbMtdParam._m0[21u].z);
    float _3844 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _762 = (-0.0) - cbMtdParam._m0[24u].x;
    float _764 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _764 : (isnan(_764) ? 1.0 : min(_764, 1.0));
    float _772 = _760 - ((_760 * TEXCOORD_8.x) * _765);
    float _773 = _760 - ((_760 * TEXCOORD_8.y) * _765);
    float _774 = _760 - ((_760 * TEXCOORD_8.z) * _765);
    float _781 = (_772 * ((_570.x * cbMtdParam._m0[18u].x) - _549)) + _549;
    float _782 = (_773 * ((_570.y * cbMtdParam._m0[18u].y) - _550)) + _550;
    float _783 = (_774 * ((_570.z * cbMtdParam._m0[18u].z) - _551)) + _551;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _797 = _795.x;
    float _798 = 1.0 - _797;
    float _824 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_797 - _798) * cbMtdParam._m0[24u].y) + _798) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3865 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _825 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _833 = ((((cbMtdParam._m0[10u].x - _781) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _825) + _781;
    float _834 = ((((cbMtdParam._m0[10u].y - _782) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _825) + _782;
    float _835 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _783)) * _825) + _783;
    float _840 = (((_589.z - _669) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _669;
    float _844 = ((_697.z - _840) * cbMtdParam._m0[19u].w) + _840;
    vec4 _858 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _865 = (_858.x * 2.0) + (-1.0);
    float _866 = (_858.y * 2.0) + (-1.0);
    float _867 = dot(vec2(_865, _866), vec2(_865, _866));
    float _3876 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _875 = ((_858.z - _844) * _772) + _844;
    float _878 = ((cbMtdParam._m0[23u].y - _875) * _825) + _875;
    vec4 _899 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _905 = (_899.x * 2.0) + (-1.0);
    float _906 = (_899.y * 2.0) + (-1.0);
    float _907 = dot(vec2(_905, _906), vec2(_905, _906));
    float _3887 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _922 = ((sqrt(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) - _679) * _774) + _679;
    float _925 = (((_865 - _709) * _772) + _709) + (cbMtdParam._m0[21u].x * _709);
    float _926 = (((_866 - _710) * _773) + _710) + (cbMtdParam._m0[21u].x * _710);
    float _937 = (((_905 - _925) + (_925 * cbMtdParam._m0[22u].z)) * _825) + _925;
    float _938 = (((_906 - _926) + (_926 * cbMtdParam._m0[22u].z)) * _825) + _926;
    float _939 = (_825 * (sqrt(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) - _922)) + _922;
    float _941 = cbMtdParam._m0[22u].x + _697.w;
    float _944 = fma(_939, _250, fma(_938, _257, _937 * _243));
    float _947 = fma(_939, _251, fma(_938, _258, _937 * _244));
    float _950 = fma(_939, _252, fma(_938, _259, _937 * _245));
    float _954 = inversesqrt(dot(vec3(_944, _947, _950), vec3(_944, _947, _950)));
    float _955 = _954 * _944;
    float _956 = _954 * _947;
    float _957 = _954 * _950;
    float _3898 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _958 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _3920 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _3931 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _3942 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _976 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1027 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1017);
    float _1028 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1017);
    float _1029 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1017);
    float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
    float _1034 = _1027 * _1033;
    float _1035 = _1028 * _1033;
    float _1036 = _1029 * _1033;
    float _1042 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1043 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1061 = fma(_957, cbSceneParam._m0[5u].z, fma(_956, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _955));
    float _1064 = fma(_957, cbSceneParam._m0[6u].z, fma(_956, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _955));
    float _1067 = fma(_957, cbSceneParam._m0[7u].z, fma(_956, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _955));
    uint _1081 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1087 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_1081].x;
    float _1088 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_1081].y;
    float _1089 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_1081].z;
    float _3953 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1091 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    vec4 _1101 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1042, cbSceneParam._m0[86u].y * _1043));
    float _1105 = ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * TEXCOORD_5.w) * _1101.x;
    float _1106 = dot(vec3(_955, _956, _957), vec3(_1034, _1035, _1036));
    float _1109 = _1106 * 2.0;
    float _1113 = (_1109 * _955) - _1034;
    float _1114 = (_1109 * _956) - _1035;
    float _1115 = (_1109 * _957) - _1036;
    float _1119 = abs(dot(vec3(_1034, _1035, _1036), vec3(_955, _956, _957)));
    float _3986 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1121 = sqrt(_958);
    float _1134 = exp2((_1121 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1121 * 3.0));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1475;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1200 = fma(_1174, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166));
        float _1204 = fma(_1174, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166));
        float _1208 = fma(_1174, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166));
        float _1233 = _1166 + _955;
        float _1234 = _1170 + _956;
        float _1235 = _1174 + _957;
        float _1245 = fma(_1235, cbModelParam._m0[26u].z, fma(_1234, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233)) - _1200;
        float _1246 = fma(_1235, cbModelParam._m0[27u].z, fma(_1234, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233)) - _1204;
        float _1247 = fma(_1235, cbModelParam._m0[28u].z, fma(_1234, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233)) - _1208;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1200 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1204 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[34u].z) + ((((((_1208 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1303 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1269.x + (-0.5));
        float _1305 = _1303 * (_1269.y + (-0.5));
        float _1306 = _1303 * (_1269.z + (-0.5));
        float _1313 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1276.x + (-0.5));
        float _1315 = _1313 * (_1276.y + (-0.5));
        float _1316 = _1313 * (_1276.z + (-0.5));
        float _1323 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1283.x + (-0.5));
        float _1325 = _1323 * (_1283.y + (-0.5));
        float _1326 = _1323 * (_1283.z + (-0.5));
        float _1333 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1290.x + (-0.5));
        float _1335 = _1333 * (_1290.y + (-0.5));
        float _1336 = _1333 * (_1290.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1357 = (dot(vec3(_955, _956, _957), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1367 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4034 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1369 + 1.0))) + _1374) * _1337;
        float _1384 = _1305 * 0.5;
        float _1385 = _1315 * 0.5;
        float _1386 = _1325 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_955, _956, _957), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4067 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1411 + 1.0))) + _1416) * _1338;
        float _1426 = _1306 * 0.5;
        float _1427 = _1316 * 0.5;
        float _1428 = _1326 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_955, _956, _957), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4100 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1453 + 1.0))) + _1458) * _1339;
        _1475 = _1306;
        _1477 = _1305;
        _1478 = _1304;
        _1479 = _1316;
        _1480 = _1315;
        _1481 = _1314;
        _1482 = _1326;
        _1483 = _1325;
        _1484 = _1324;
        _1485 = _1339;
        _1486 = _1338;
        _1487 = _1337;
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1476;
        _1477 = _1476;
        _1478 = _1476;
        _1479 = _1476;
        _1480 = _1476;
        _1481 = _1476;
        _1482 = _1476;
        _1483 = _1476;
        _1484 = _1476;
        _1485 = _1476;
        _1486 = _1476;
        _1487 = _1476;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1514 = fma(_1174, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166));
        float _1518 = fma(_1174, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166));
        float _1522 = fma(_1174, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166));
        float _1545 = _1166 + _955;
        float _1546 = _1170 + _956;
        float _1547 = _1174 + _957;
        float _1557 = fma(_1547, cbModelParam._m0[30u].z, fma(_1546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1545)) - _1514;
        float _1558 = fma(_1547, cbModelParam._m0[31u].z, fma(_1546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1545)) - _1518;
        float _1559 = fma(_1547, cbModelParam._m0[32u].z, fma(_1546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1545)) - _1522;
        float _1563 = inversesqrt(dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559)));
        float _1576 = ((_1563 * _1557) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1514 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1563 * _1558) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1518 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1578 = ((_1563 * _1559) / cbModelParam._m0[35u].z) + ((((((_1522 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        float _1613 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1580.x + (-0.5));
        float _1615 = _1613 * (_1580.y + (-0.5));
        float _1616 = _1613 * (_1580.z + (-0.5));
        float _1623 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1587.x + (-0.5));
        float _1625 = _1623 * (_1587.y + (-0.5));
        float _1626 = _1623 * (_1587.z + (-0.5));
        float _1633 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1594.x + (-0.5));
        float _1635 = _1633 * (_1594.y + (-0.5));
        float _1636 = _1633 * (_1594.z + (-0.5));
        float _1643 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1601.x + (-0.5));
        float _1645 = _1643 * (_1601.y + (-0.5));
        float _1646 = _1643 * (_1601.z + (-0.5));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = _1614 * 0.5;
        float _1651 = _1624 * 0.5;
        float _1652 = _1634 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_955, _956, _957), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4163 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1677 + 1.0))) + _1682) * _1647;
        float _1692 = _1615 * 0.5;
        float _1693 = _1625 * 0.5;
        float _1694 = _1635 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_955, _956, _957), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4196 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1719 + 1.0))) + _1724) * _1648;
        float _1734 = _1616 * 0.5;
        float _1735 = _1626 * 0.5;
        float _1736 = _1636 * 0.5;
        float _1737 = dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736));
        float _1742 = (_1737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1737);
        float _1750 = (dot(vec3(_955, _956, _957), vec3(_1742 * _1734, _1742 * _1735, _1742 * _1736)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1759 = sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1761 = _1760 * 2.0;
        float _1765 = (1.0 - _1760) / (_1760 + 1.0);
        float _4229 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1775 = ((((1.0 - _1766) * (_1761 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1761 + 1.0))) + _1766) * _1649;
        _1783 = _1616;
        _1784 = _1615;
        _1785 = _1614;
        _1786 = _1626;
        _1787 = _1625;
        _1788 = _1624;
        _1789 = _1636;
        _1790 = _1635;
        _1791 = _1634;
        _1792 = _1649;
        _1793 = _1648;
        _1794 = _1647;
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)));
    }
    else
    {
        _1783 = _1476;
        _1784 = _1476;
        _1785 = _1476;
        _1786 = _1476;
        _1787 = _1476;
        _1788 = _1476;
        _1789 = _1476;
        _1790 = _1476;
        _1791 = _1476;
        _1792 = _1476;
        _1793 = _1476;
        _1794 = _1476;
        _1795 = 0.0;
        _1796 = 0.0;
        _1797 = 0.0;
    }
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1488)) + _1488;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1489)) + _1489;
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1490)) + _1490;
    float _1830 = fma(_1809, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1807 * cbSceneParam._m0[89u].x));
    float _1833 = fma(_1809, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1807 * cbSceneParam._m0[90u].x));
    float _1836 = fma(_1809, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1807));
    float _1851 = _1113 * 0.5;
    float _1852 = _1114 * 0.5;
    float _1853 = _1115 * 0.5;
    float _1854 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1857 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1860 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1894;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1867 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1475, _1479, _1482, _1485));
        float _1871 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1875 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1882 = dot(vec4(cbModelParam._m0[39u]), vec4(_1851, _1852, _1853, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1905;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1896 = dot(vec4(cbModelParam._m0[40u]), vec4(_1851, _1852, _1853, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1896) ? 0.0 : (isnan(0.0) ? _1896 : max(0.0, _1896))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1909 = (_1905 * cbModelParam._m0[1u].x) + (_1894 * (1.0 - cbModelParam._m0[1u].x));
    float _1919 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1920 = isnan(_1919) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1919 : min(cbModelParam._m0[25u].z, _1919));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1967 = fma(_1174, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166)) + cbModelParam._m0[13u].w;
        float _1971 = fma(_1174, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166)) + cbModelParam._m0[14u].w;
        float _1975 = fma(_1174, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166)) + cbModelParam._m0[15u].w;
        float _1978 = fma(_1115, cbModelParam._m0[13u].z, fma(_1114, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1113));
        float _1981 = fma(_1115, cbModelParam._m0[14u].z, fma(_1114, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1113));
        float _1984 = fma(_1115, cbModelParam._m0[15u].z, fma(_1114, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1113));
        float _2012;
        if (_1978 > 0.0)
        {
            _2012 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2012 = frontier_phi_14_12_ladder;
        }
        float _2212;
        if (_1981 > 0.0)
        {
            _2212 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2212 = frontier_phi_23_19_ladder;
        }
        float _2455;
        if (_1984 > 0.0)
        {
            _2455 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2455 = frontier_phi_35_30_ladder;
        }
        float _2457 = isnan(_2212) ? _2012 : (isnan(_2012) ? _2212 : min(_2012, _2212));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1978) + _1967;
        float _2463 = (_2458 * _1981) + _1971;
        float _2464 = (_2458 * _1984) + _1975;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2465;
        float _2469 = _2465 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 > _2469) || ((_2463 < _2467) || ((_2462 < _2467) || (_2462 > _2469))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2464, cbModelParam._m0[9u].z, fma(_2463, cbModelParam._m0[9u].y, _2462 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2464, cbModelParam._m0[10u].z, fma(_2463, cbModelParam._m0[10u].y, _2462 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2464, cbModelParam._m0[11u].z, fma(_2463, cbModelParam._m0[11u].y, _2462 * cbModelParam._m0[11u].x))), _1920);
            frontier_phi_13_35_ladder = _2588.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2588.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2588.x * cbModelParam._m0[1u].y;
        }
        _2000 = frontier_phi_13_35_ladder_2;
        _2002 = frontier_phi_13_35_ladder_1;
        _2004 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1113, _1114, _1115), _1920);
        _2000 = _1988.x * cbModelParam._m0[1u].y;
        _2002 = _1988.y * cbModelParam._m0[1u].y;
        _2004 = _1988.z * cbModelParam._m0[1u].y;
    }
    float _2008 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2009 = isnan(_2008) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2008 : min(cbModelParam._m0[25u].w, _2008));
    float _2098;
    float _2100;
    float _2102;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2062 = fma(_1174, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166)) + cbModelParam._m0[21u].w;
        float _2066 = fma(_1174, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166)) + cbModelParam._m0[22u].w;
        float _2070 = fma(_1174, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166)) + cbModelParam._m0[23u].w;
        float _2073 = fma(_1115, cbModelParam._m0[21u].z, fma(_1114, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1113));
        float _2076 = fma(_1115, cbModelParam._m0[22u].z, fma(_1114, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1113));
        float _2079 = fma(_1115, cbModelParam._m0[23u].z, fma(_1114, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1113));
        float _2217;
        if (_2073 > 0.0)
        {
            _2217 = abs((1.0 - _2062) / _2073);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2062 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2217 = frontier_phi_25_21_ladder;
        }
        float _2482;
        if (_2076 > 0.0)
        {
            _2482 = abs((1.0 - _2066) / _2076);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2066 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2482 = frontier_phi_37_32_ladder;
        }
        float _2687;
        if (_2079 > 0.0)
        {
            _2687 = abs((1.0 - _2070) / _2079);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2070 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2687 = frontier_phi_46_43_ladder;
        }
        float _2689 = isnan(_2482) ? _2217 : (isnan(_2217) ? _2482 : min(_2217, _2482));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _2073) + _2062;
        float _2695 = (_2690 * _2076) + _2066;
        float _2696 = (_2690 * _2079) + _2070;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _2009);
            frontier_phi_22_46_ladder = _2895.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2895.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2895.x * cbModelParam._m0[1u].z;
        }
        _2098 = frontier_phi_22_46_ladder_2;
        _2100 = frontier_phi_22_46_ladder_1;
        _2102 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2082 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1113, _1114, _1115), _2009);
        _2098 = _2082.x * cbModelParam._m0[1u].z;
        _2100 = _2082.y * cbModelParam._m0[1u].z;
        _2102 = _2082.z * cbModelParam._m0[1u].z;
    }
    float _2114 = ((((1.0 - _1134) * ((_1121 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1134 * _1121)) * _1105;
    float _2115 = _2114 * ((cbModelParam._m0[1u].w * (_2098 - _2000)) + _2000);
    float _2116 = _2114 * ((cbModelParam._m0[1u].w * (_2100 - _2002)) + _2002);
    float _2117 = _2114 * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2120 = fma(_2117, cbSceneParam._m0[89u].z, fma(_2116, cbSceneParam._m0[89u].y, _2115 * cbSceneParam._m0[89u].x));
    float _2123 = fma(_2117, cbSceneParam._m0[90u].z, fma(_2116, cbSceneParam._m0[90u].y, _2115 * cbSceneParam._m0[90u].x));
    float _2126 = fma(_2117, cbSceneParam._m0[91u].z, fma(_2116, cbSceneParam._m0[91u].y, _2115 * cbSceneParam._m0[91u].x));
    uvec4 _2136 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2138 = _2136.x * 14u;
    uint _2139 = _2138 + 13u;
    float _2146 = _1105 + (-1.0);
    float _2151 = (cbLight._m0[_2139].x * _2146) + 1.0;
    float _2152 = (cbLight._m0[_2139].y * _2146) + 1.0;
    float _2153 = (cbLight._m0[_2139].z * _2146) + 1.0;
    float _2154 = (cbLight._m0[_2139].w * _2146) + 1.0;
    uint _2155 = _2138 + 5u;
    float _2161 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2165 = _2138 + 4u;
    float _2171 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2175 = _2138 | 1u;
    float _2186 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_955, _956, _957));
    float _2189 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_955, _956, _957));
    float _4365 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _4376 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2194 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.3183098733425140380859375;
    float _2196 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * 0.3183098733425140380859375;
    float _2203 = ((cbLight._m0[_2155].x * _2161) * _2196) + ((cbLight._m0[_2165].x * _2171) * _2194);
    float _2204 = ((_2161 * cbLight._m0[_2155].y) * _2196) + ((_2171 * cbLight._m0[_2165].y) * _2194);
    float _2205 = ((_2161 * cbLight._m0[_2155].z) * _2196) + ((_2171 * cbLight._m0[_2165].z) * _2194);
    uvec4 _2209 = floatBitsToUint(cbLight._m0[_2138 + 12u]);
    bool _2211 = _2209.x == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2211)
    {
        _2222 = _2203;
        _2224 = _2204;
        _2226 = _2205;
    }
    else
    {
        uint _2230 = _2138 + 6u;
        float _2246 = (dot(vec3(cbLight._m0[_2138 + 2u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4387 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2249 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2222 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2203;
        _2224 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2204;
        _2226 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2205;
    }
    bool _2229 = _2209.y == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2229)
    {
        _2267 = _2222;
        _2269 = _2224;
        _2271 = _2226;
    }
    else
    {
        uint _2426 = _2138 + 7u;
        float _2442 = (dot(vec3(cbLight._m0[_2138 + 3u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2443 = _2442 * _2442;
        float _4403 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2444 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2445 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2267 = (((cbLight._m0[_2426].x * 0.3183098733425140380859375) * _2444) * _2445) + _2222;
        _2269 = (((cbLight._m0[_2426].y * 0.3183098733425140380859375) * _2444) * _2445) + _2224;
        _2271 = (((cbLight._m0[_2426].z * 0.3183098733425140380859375) * _2444) * _2445) + _2226;
    }
    uint _2274 = _2138 + 8u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _958) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2138].x + _1034;
    float _2290 = cbLight._m0[_2138].y + _1035;
    float _2291 = cbLight._m0[_2138].z + _1036;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2138].xyz));
    float _4419 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _4430 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _2303 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2304 = dot(vec3(_955, _956, _957), vec3(_2296, _2297, _2298));
    float _4441 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2296, _2297, _2298));
    float _4452 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2288 * _2288;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2327 = (exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2328 = 1.0 - _2288;
    float _2339 = (0.5 / (((_2303 * ((_2302 * _2328) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2328) + _2288) * _2302))) * _2302;
    float _4463 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    uint _2352 = _2138 + 9u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _958) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2175].x + _1034;
    float _2366 = cbLight._m0[_2175].y + _1035;
    float _2367 = cbLight._m0[_2175].z + _1036;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2175].xyz));
    float _4474 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2379 = dot(vec3(_955, _956, _957), vec3(_2372, _2373, _2374));
    float _4485 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2372, _2373, _2374));
    float _4496 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2364 * _2364;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2400 = (exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2401 = 1.0 - _2364;
    float _2411 = (0.5 / (((_2303 * ((_2378 * _2401) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2401) + _2364) * _2378))) * _2378;
    float _4507 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2413 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    float _2423 = (((_2400 * cbLight._m0[_2352].x) * _2413) * _2161) + (((_2327 * cbLight._m0[_2274].x) * _2341) * _2171);
    float _2424 = (((_2400 * cbLight._m0[_2352].y) * _2413) * _2161) + (((_2327 * cbLight._m0[_2274].y) * _2341) * _2171);
    float _2425 = (((_2400 * cbLight._m0[_2352].z) * _2413) * _2161) + (((_2327 * cbLight._m0[_2274].z) * _2341) * _2171);
    float _2487;
    float _2489;
    float _2491;
    if (_2211)
    {
        _2487 = _2423;
        _2489 = _2424;
        _2491 = _2425;
    }
    else
    {
        uint _2493 = _2138 + 2u;
        uint _2497 = _2138 + 10u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _958) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _1034;
        float _2514 = cbLight._m0[_2493].y + _1035;
        float _2515 = cbLight._m0[_2493].z + _1036;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2493].xyz));
        float _4518 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2527 = dot(vec3(_955, _956, _957), vec3(_2520, _2521, _2522));
        float _4529 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4540 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2548 = (exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2549 = 1.0 - _2512;
        float _2559 = (0.5 / (((_2303 * ((_2526 * _2549) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2549) + _2512) * _2526))) * _2526;
        float _4551 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2561 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2562 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2487 = (((_2548 * cbLight._m0[_2497].x) * _2561) * _2562) + _2423;
        _2489 = (((_2548 * cbLight._m0[_2497].y) * _2561) * _2562) + _2424;
        _2491 = (((_2548 * cbLight._m0[_2497].z) * _2561) * _2562) + _2425;
    }
    float _2597;
    float _2599;
    float _2601;
    if (_2229)
    {
        _2597 = _2487;
        _2599 = _2489;
        _2601 = _2491;
    }
    else
    {
        uint _2608 = _2138 + 3u;
        uint _2612 = _2138 + 11u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _958) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _1034;
        float _2629 = cbLight._m0[_2608].y + _1035;
        float _2630 = cbLight._m0[_2608].z + _1036;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2608].xyz));
        float _4567 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2642 = dot(vec3(_955, _956, _957), vec3(_2635, _2636, _2637));
        float _4578 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4589 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2663 = (exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2664 = 1.0 - _2627;
        float _2674 = (0.5 / (((_2303 * ((_2641 * _2664) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2664) + _2627) * _2641))) * _2641;
        float _4600 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2676 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2677 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2597 = (((_2663 * cbLight._m0[_2612].x) * _2676) * _2677) + _2487;
        _2599 = (((_2663 * cbLight._m0[_2612].y) * _2676) * _2677) + _2489;
        _2601 = (((_2663 * cbLight._m0[_2612].z) * _2676) * _2677) + _2491;
    }
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_2136.y == 0u)
    {
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2752;
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2752;
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2752;
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.x;
        uint _2779 = uint((float(_2767.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1043) / _2768))) + floor(float(uint(cbSceneParam._m0[85u].x * _1042) / _2768)));
        float _2789 = (log2(_2755 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2790 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        uint _2793 = uint(isnan(14.0) ? _2790 : (isnan(_2790) ? 14.0 : min(_2790, 14.0)));
        uvec4 _2798 = texelFetch(g_lightClusterGridBuffer, int(((_2793 << 2u) + (_2779 << 6u)) >> 2u));
        uint _2799 = _2798.x;
        uint _2800 = _2767.z;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((((1u << ((_2800 >> 4u) & 15u)) + 4294967295u) & _2799) == 0u) || ((_2800 & 240u) == 0u))
        {
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
        }
        else
        {
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            uint _3050 = 0u;
            uint _3059;
            bool _3060;
            for (;;)
            {
                _3059 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3050 << 2u)) >> 2u)).x;
                _3060 = _3059 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3060)
                {
                    frontier_phi_61_pred = _3044;
                    frontier_phi_61_pred_1 = _3049;
                    frontier_phi_61_pred_2 = _3048;
                    frontier_phi_61_pred_3 = _3047;
                    frontier_phi_61_pred_4 = _3046;
                    frontier_phi_61_pred_5 = _3045;
                }
                else
                {
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    uint _3174;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3059;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    for (;;)
                    {
                        uint _3178 = uint(findLSB(_3174)) + (_3050 << 5u);
                        uint _3175 = (_3174 + 4294967295u) & _3174;
                        uint _3180 = _3178 * 48u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 3u)).x));
                        uint _3200 = (_3178 * 48u) + 4u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3219 = (_3178 * 48u) + 8u;
                        vec3 _3230 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x));
                        float _3234 = _3194.x - _2753;
                        float _3235 = _3194.y - _2754;
                        float _3236 = _3194.z - _2755;
                        float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                        float _3240 = inversesqrt(_3237);
                        float _3241 = _3240 * _3234;
                        float _3242 = _3240 * _3235;
                        float _3243 = _3240 * _3236;
                        float _3244 = dot(vec3(_1061, _1064, _1067), vec3(_3241, _3242, _3243));
                        float _3249 = 1.0 - (_3237 * _3194.w);
                        float _4626 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3251 = sqrt(_3237) * _3213.w;
                        float _3254 = 1.39999997615814208984375 / (_3251 + 1.39999997615814208984375);
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3244) + _3255;
                        float _3261 = _3251 * _3251;
                        float _3265 = ((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3250) / ((_3261 * 0.699999988079071044921875) + 1.0);
                        float _3269 = (-0.0) - _2753;
                        float _3270 = (-0.0) - _2754;
                        float _3271 = (-0.0) - _2755;
                        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3286 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                        float _3287 = 1.0 - _1121;
                        float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                        float _3295 = _3294 * _3294;
                        float _3296 = _3295 * _3295;
                        float _3297 = _3276 + _3241;
                        float _3298 = _3277 + _3242;
                        float _3299 = _3278 + _3243;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3307 = dot(vec3(_1061, _1064, _1067), vec3(_3276, _3277, _3278));
                        float _4642 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3311 = dot(vec3(_1061, _1064, _1067), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                        float _4653 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                        float _3319 = _3254 * _3295;
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3244) + _3320;
                        float _4664 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3325 = 1.0 - _3295;
                        float _3335 = (0.5 / (((_3324 * ((_3310 * _3325) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3295) * _3310))) * _3324;
                        float _4675 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3346 = (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) / ((_3318 * _3318) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125))) * _3250;
                        _3103 = (_3265 * _3213.x) + _3171;
                        _3104 = (_3265 * _3213.y) + _3172;
                        _3105 = (_3265 * _3213.z) + _3173;
                        _3100 = (_3346 * _3230.x) + _3168;
                        _3101 = (_3346 * _3230.y) + _3169;
                        _3102 = (_3346 * _3230.z) + _3170;
                        if (_3175 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3175;
                        }
                    }
                    frontier_phi_61_pred = _3100;
                    frontier_phi_61_pred_1 = _3105;
                    frontier_phi_61_pred_2 = _3104;
                    frontier_phi_61_pred_3 = _3103;
                    frontier_phi_61_pred_4 = _3102;
                    frontier_phi_61_pred_5 = _3101;
                }
                _2901 = frontier_phi_61_pred;
                _2911 = frontier_phi_61_pred_1;
                _2909 = frontier_phi_61_pred_2;
                _2907 = frontier_phi_61_pred_3;
                _2905 = frontier_phi_61_pred_4;
                _2903 = frontier_phi_61_pred_5;
                uint _3051 = _3050 + 1u;
                if (_3051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3044 = _2901;
                    _3045 = _2903;
                    _3046 = _2905;
                    _3047 = _2907;
                    _3048 = _2909;
                    _3049 = _2911;
                    _3050 = _3051;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
        }
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.z;
        uint _2917 = (_2915 >> 8u) & 15u;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        if (((4294967295u << _2917) & _2799) == 0u)
        {
            _3012 = _2900;
            _3014 = _2902;
            _3016 = _2904;
            _3018 = _2906;
            _3020 = _2908;
            _3022 = _2910;
        }
        else
        {
            float _3037 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
            float _3038 = _3037 * _2753;
            float _3039 = _3037 * _2754;
            float _3040 = _3037 * _2755;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2917 < ((_2915 >> 12u) & 15u))
            {
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3151 = _2900;
                float _3152 = _2902;
                float _3153 = _2904;
                float _3154 = _2906;
                float _3155 = _2908;
                float _3156 = _2910;
                uint _3157 = _2917;
                uint _3166;
                bool _3167;
                for (;;)
                {
                    _3166 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3157 << 2u)) >> 2u)).x;
                    _3167 = _3166 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3167)
                    {
                        frontier_phi_67_pred = _3154;
                        frontier_phi_67_pred_1 = _3155;
                        frontier_phi_67_pred_2 = _3156;
                        frontier_phi_67_pred_3 = _3153;
                        frontier_phi_67_pred_4 = _3152;
                        frontier_phi_67_pred_5 = _3151;
                    }
                    else
                    {
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3364 = _3151;
                        float _3365 = _3152;
                        float _3366 = _3153;
                        float _3367 = _3154;
                        float _3368 = _3155;
                        float _3369 = _3156;
                        uint _3370 = _3166;
                        uint _3371;
                        vec4 _3396;
                        float _3397;
                        vec4 _3412;
                        vec3 _3424;
                        vec4 _3439;
                        vec4 _3454;
                        float _3500;
                        bool _3501;
                        for (;;)
                        {
                            uint _3381 = ((_3157 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3370));
                            _3371 = (_3370 + 4294967295u) & _3370;
                            uint _3383 = _3381 * 40u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3397 = _3396.w;
                            uint _3399 = (_3381 * 40u) + 4u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3381 * 40u) + 8u;
                            _3424 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x));
                            uint _3426 = (_3381 * 40u) + 16u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3381 * 40u) + 20u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3381 * 40u) + 24u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3475 = (_3381 * 40u) + 28u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            _3500 = fma(_2755, _3488.z, fma(_2754, _3488.y, _3488.x * _2753)) + _3488.w;
                            _3501 = !((fma(_2755, _3469.z, fma(_2754, _3469.y, _3469.x * _2753)) + _3469.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3501)
                            {
                                float _3528 = _3396.x - _2753;
                                float _3529 = _3396.y - _2754;
                                float _3530 = _3396.z - _2755;
                                float _3531 = dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530));
                                float _3534 = inversesqrt(_3531);
                                float _3535 = _3534 * _3528;
                                float _3536 = _3534 * _3529;
                                float _3537 = _3534 * _3530;
                                float _3541 = 1.0 - (_3531 / (_3397 * _3397));
                                float _4686 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3546 = sqrt(_3531) * _3412.w;
                                float _3548 = 1.39999997615814208984375 / (_3546 + 1.39999997615814208984375);
                                float _3549 = _3548 * _3548;
                                float _3552 = ((1.0 - _3549) * dot(vec3(_3535, _3536, _3537), vec3(_1061, _1064, _1067))) + _3549;
                                float _3555 = _3546 * _3546;
                                float _3559 = (fma(_2755, _3439.z, fma(_2754, _3439.y, _3439.x * _2753)) + _3439.w) / _3500;
                                float _3560 = (fma(_2755, _3454.z, fma(_2754, _3454.y, _3454.x * _2753)) + _3454.w) / _3500;
                                float _3564 = 1.0 - dot(vec2(_3559, _3560), vec2(_3559, _3560));
                                float _4702 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3566 = _3565 * (((isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))) * _3542) / ((_3555 * 0.699999988079071044921875) + 1.0));
                                float _3578 = exp2(log2(1.0 / ((_3555 * 3.5) + 5.0)) * 0.25);
                                float _3579 = 1.0 - _1121;
                                float _3586 = sqrt(1.0 - ((1.0 - (_3579 * _3579)) * (1.0 - (_3578 * _3578))));
                                float _3587 = _3586 * _3586;
                                float _3588 = _3587 * _3587;
                                float _3589 = _3535 - _3038;
                                float _3590 = _3536 - _3039;
                                float _3591 = _3537 - _3040;
                                float _3595 = inversesqrt(dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591)));
                                float _3599 = dot(vec3(_1061, _1064, _1067), vec3((-0.0) - _3038, (-0.0) - _3039, (-0.0) - _3040));
                                float _4713 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3603 = dot(vec3(_1061, _1064, _1067), vec3(_3595 * _3589, _3595 * _3590, _3595 * _3591));
                                float _4724 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3610 = ((_3606 * _3606) * (_3588 + (-1.0))) + 1.0;
                                float _3611 = _3548 * _3587;
                                float _3612 = _3611 * _3611;
                                float _3618 = ((1.0 - _3612) * dot(vec3(_1061, _1064, _1067), vec3(_3535, _3536, _3537))) + _3612;
                                float _4735 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3620 = 1.0 - _3587;
                                float _3630 = (0.5 / (((_3619 * ((_3602 * _3620) + _3587)) + 9.9999999392252902907785028219223e-09) + (((_3619 * _3620) + _3587) * _3602))) * _3619;
                                float _4746 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3640 = (_3565 * _3542) * (((_3588 * 3.1415927410125732421875) * (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) / ((_3610 * _3610) * ((_3555 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3640 * _3424.x;
                                frontier_phi_73_pred_1 = _3640 * _3424.y;
                                frontier_phi_73_pred_2 = _3566 * _3412.z;
                                frontier_phi_73_pred_3 = _3566 * _3412.y;
                                frontier_phi_73_pred_4 = _3566 * _3412.x;
                                frontier_phi_73_pred_5 = _3640 * _3424.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3644 = frontier_phi_73_pred;
                            _3645 = frontier_phi_73_pred_1;
                            _3649 = frontier_phi_73_pred_2;
                            _3648 = frontier_phi_73_pred_3;
                            _3647 = frontier_phi_73_pred_4;
                            _3646 = frontier_phi_73_pred_5;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            if (_3371 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3371;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3354;
                        frontier_phi_67_pred_1 = _3355;
                        frontier_phi_67_pred_2 = _3356;
                        frontier_phi_67_pred_3 = _3353;
                        frontier_phi_67_pred_4 = _3352;
                        frontier_phi_67_pred_5 = _3351;
                    }
                    _3019 = frontier_phi_67_pred;
                    _3021 = frontier_phi_67_pred_1;
                    _3023 = frontier_phi_67_pred_2;
                    _3017 = frontier_phi_67_pred_3;
                    _3015 = frontier_phi_67_pred_4;
                    _3013 = frontier_phi_67_pred_5;
                    uint _3158 = _3157 + 1u;
                    if (_3158 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3151 = _3013;
                        _3152 = _3015;
                        _3153 = _3017;
                        _3154 = _3019;
                        _3155 = _3021;
                        _3156 = _3023;
                        _3157 = _3158;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3021;
                frontier_phi_55_56_ladder_1 = _3023;
                frontier_phi_55_56_ladder_2 = _3019;
                frontier_phi_55_56_ladder_3 = _3017;
                frontier_phi_55_56_ladder_4 = _3015;
                frontier_phi_55_56_ladder_5 = _3013;
            }
            else
            {
                frontier_phi_55_56_ladder = _2908;
                frontier_phi_55_56_ladder_1 = _2910;
                frontier_phi_55_56_ladder_2 = _2906;
                frontier_phi_55_56_ladder_3 = _2904;
                frontier_phi_55_56_ladder_4 = _2902;
                frontier_phi_55_56_ladder_5 = _2900;
            }
            _3012 = frontier_phi_55_56_ladder_5;
            _3014 = frontier_phi_55_56_ladder_4;
            _3016 = frontier_phi_55_56_ladder_3;
            _3018 = frontier_phi_55_56_ladder_2;
            _3020 = frontier_phi_55_56_ladder;
            _3022 = frontier_phi_55_56_ladder_1;
        }
        float _3027 = isnan(1.0) ? _1105 : (isnan(_1105) ? 1.0 : min(_1105, 1.0));
        _2812 = (_3027 * _3018) + _2267;
        _2814 = (_3027 * _3020) + _2269;
        _2816 = (_3027 * _3022) + _2271;
        _2818 = ((_3012 * 0.039999999105930328369140625) * _3027) + _2597;
        _2820 = ((_3014 * 0.039999999105930328369140625) * _3027) + _2599;
        _2822 = ((_3016 * 0.039999999105930328369140625) * _3027) + _2601;
    }
    else
    {
        _2812 = _2267;
        _2814 = _2269;
        _2816 = _2271;
        _2818 = _2597;
        _2820 = _2599;
        _2822 = _2601;
    }
    float _4762 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _4773 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _4784 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    uint _2842 = _281 + 6u;
    float _2850 = _1042 / cbSceneParam._m0[86u].x;
    float _2851 = _1043 / cbSceneParam._m0[86u].y;
    vec4 _2865 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, (log2((isnan(cbSceneParam._m0[77u].w) ? _976 : (isnan(_976) ? cbSceneParam._m0[77u].w : min(_976, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2867 = _2865.x;
    float _2868 = _2865.y;
    float _2869 = _2865.z;
    float _2870 = _2865.w;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_976 > cbSceneParam._m0[78u].w)
    {
        float _2925 = isnan(_976) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _976 : min(cbSceneParam._m0[80u].w, _976));
        float _2926 = _2925 / _976;
        float _2937 = _2926 * _1027;
        float _2938 = _1028 * _2926;
        float _2939 = (-0.0) - _2938;
        float _2940 = _2926 * _1029;
        float _2942 = (cbSceneParam._m0[77u].w * _2939) / _2925;
        float _2943 = _2942 + cbSceneParam._m0[79u].w;
        float _2944 = cbSceneParam._m0[79u].w - _2938;
        float _2950 = sqrt(((_2937 * _2937) + (_2938 * _2938)) + (_2940 * _2940));
        float _2953 = (1.0 - (cbSceneParam._m0[77u].w / _2925)) * _2950;
        float _2958 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2960 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3113;
        if (abs((_2939 - _2942) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3113 = ((((_2943 > 0.0) ? exp2(_2958 * _2943) : (2.0 - exp2(_2960 * _2943))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2953;
        }
        else
        {
            float _3073 = 1.0 / cbSceneParam._m0[80u].x;
            float _3074 = isnan(_2944) ? _2943 : (isnan(_2943) ? _2944 : max(_2943, _2944));
            float _3075 = isnan(_2944) ? _2943 : (isnan(_2943) ? _2944 : min(_2943, _2944));
            float _3084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : min(_3074, 0.0));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            _3113 = ((abs(_2950 / _2939) * cbSceneParam._m0[80u].y) * ((((_3084 - _3085) * 2.0) - ((exp2(_2958 * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0)))) - exp2(_2958 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))))) * _3073)) - ((exp2(_2960 * _3084) - exp2(_2960 * _3085)) * _3073))) + (_2953 * cbSceneParam._m0[80u].z);
        }
        vec4 _3115 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, 1.0), 0.0);
        float _3124 = exp2((_3113 * (-1.44269502162933349609375)) * (1.0 - _3115.w));
        float _3125 = log2(_3124);
        float _3141 = log2(_2870);
        _2962 = (exp2(_3141 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].x)) * _3115.x) / cbSceneParam._m0[78u].x)) + _2867;
        _2964 = (exp2(_3141 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].y)) * _3115.y) / cbSceneParam._m0[78u].y)) + _2868;
        _2966 = (exp2(_3141 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].z)) * _3115.z) / cbSceneParam._m0[78u].z)) + _2869;
        _2968 = _3124 * _2870;
    }
    else
    {
        _2962 = _2867;
        _2964 = _2868;
        _2966 = _2869;
        _2968 = _2870;
    }
    float _2980 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2981 = _2980 == 3.0;
    float _2982 = log2(_2968);
    float _2989 = exp2(_2982 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2812 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1105))) + ((_2818 + ((isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))) * _1909)) * cbPerFrame._m0[3u].x));
    float _2990 = exp2(_2982 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2814 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1105))) + ((_2820 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1909)) * cbPerFrame._m0[3u].x));
    float _2991 = exp2(_2982 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2816 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1105))) + ((_2822 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1909)) * cbPerFrame._m0[3u].x));
    float _3000 = (_2980 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3000 * (_2981 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.y = _3000 * (_2981 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.z = _3000 * (_2981 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2966)));
    SV_Target.w = cbInstanceData._m0[_2842].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2842].w;
}


