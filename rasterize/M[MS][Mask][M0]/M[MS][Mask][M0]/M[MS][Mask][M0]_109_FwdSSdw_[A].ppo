#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1508;
float _3891;
float _3892;
float _3893;
float _3894;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3903 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3914 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3925 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _416.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3936 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _493 = (_486 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376;
    float _494 = (_486 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377;
    float _495 = (_486 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _416.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[24u].z) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3947 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _566 = (_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493;
    float _567 = (_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494;
    float _568 = (_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495;
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _308) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _309) + cbTextureTilingScale._m0[24u].w));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _605 = _603.x;
    float _615 = dot(vec4(_605, _603.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _627 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _416.z) * 2.0) - ((((_605 - _615) * cbMtdParam._m0[24u].z) + _615) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3958 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _638 = (_345.x * cbMtdParam._m0[9u].x) * ((_628 * ((_586.x * cbMtdParam._m0[14u].x) - _566)) + _566);
    float _639 = (_345.y * cbMtdParam._m0[9u].y) * ((_628 * ((_586.y * cbMtdParam._m0[14u].y) - _567)) + _567);
    float _640 = (_345.z * cbMtdParam._m0[9u].z) * ((_628 * ((_586.z * cbMtdParam._m0[14u].z) - _568)) + _568);
    float _644 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _638;
    float _647 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _639;
    float _650 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _640;
    float _658 = (((_638 - _644) * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) + _644) * 4.55000019073486328125;
    float _660 = (((_639 - _647) * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) + _647) * 4.55000019073486328125;
    float _662 = (((_640 - _650) * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) + _650) * 4.55000019073486328125;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _716 = _714.x;
    float _717 = _714.y;
    float _718 = _714.z;
    float _725 = ((_697.x - _716) * _486) + _716;
    float _726 = ((_697.y - _717) * _486) + _717;
    float _727 = ((_697.z - _718) * _486) + _718;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _750 = ((_739.x - _725) * _559) + _725;
    float _751 = ((_739.y - _726) * _559) + _726;
    float _752 = ((_739.z - _727) * _559) + _727;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _308) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _309) + cbTextureTilingScale._m0[23u].w));
    float _777 = ((_764.z - _752) * _628) + _752;
    float _780 = ((((_764.x - _750) * _628) + _750) * 2.0) + (-1.0);
    float _781 = ((((_764.y - _751) * _628) + _751) * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3969 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))));
    vec4 _807 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _819 = (_780 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_674.x * 2.0) + (-1.0)))) + (((_807.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _820 = (_781 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_674.y * 2.0) + (-1.0)))) + (((_807.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _832 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _834 = _832.x;
    float _835 = 1.0 - _834;
    float _863 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_834 - _835) * cbMtdParam._m0[24u].y) + _835) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3980 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _864 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _872 = ((((cbMtdParam._m0[10u].x - _658) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _864) + _658;
    float _873 = ((((cbMtdParam._m0[10u].y - _660) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _864) + _660;
    float _874 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _662)) * _864) + _662;
    float _879 = (((_674.z - _777) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _777;
    float _883 = ((_807.z - _879) * cbMtdParam._m0[19u].w) + _879;
    float _887 = ((cbMtdParam._m0[23u].y - _883) * _864) + _883;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _912 = (_906.x * 2.0) + (-1.0);
    float _913 = (_906.y * 2.0) + (-1.0);
    float _914 = dot(vec2(_912, _913), vec2(_912, _913));
    float _3991 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _930 = (_864 * (((cbMtdParam._m0[22u].z * _819) - _819) + _912)) + _819;
    float _931 = (_864 * (((cbMtdParam._m0[22u].z * _820) - _820) + _913)) + _820;
    float _932 = (_864 * (sqrt(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) - _787)) + _787;
    float _934 = cbMtdParam._m0[22u].x + _807.w;
    float _937 = fma(_932, _257 * NORMAL.x, fma(_931, _264 * TANGENT.x, (_250 * _242) * _930));
    float _940 = fma(_932, _257 * NORMAL.y, fma(_931, _264 * TANGENT.y, (_250 * _243) * _930));
    float _943 = fma(_932, _257 * NORMAL.z, fma(_931, _264 * TANGENT.z, (_250 * _244) * _930));
    float _947 = inversesqrt(dot(vec3(_937, _940, _943), vec3(_937, _940, _943)));
    float _948 = _947 * _937;
    float _949 = _947 * _940;
    float _950 = _947 * _943;
    float _4002 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _951 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4024 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4035 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4046 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _969 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1019 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1009);
    float _1020 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1009);
    float _1021 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1009);
    float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
    float _1026 = _1019 * _1025;
    float _1027 = _1020 * _1025;
    float _1028 = _1021 * _1025;
    vec4 _1033 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1035 = _1033.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1189 = sqrt(((_1019 * _1019) + (_1020 * _1020)) + (_1021 * _1021));
        float _1195 = (cbMatDynParam._m0[5u].x * _1189) + cbMatDynParam._m0[5u].y;
        float _4057 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1200 = (cbMatDynParam._m0[5u].z * _1189) + cbMatDynParam._m0[5u].w;
        float _4068 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) - _1196)) + _1196) < ((_1035 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1046 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1047 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1065 = fma(_950, cbSceneParam._m0[5u].z, fma(_949, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _948));
    float _1068 = fma(_950, cbSceneParam._m0[6u].z, fma(_949, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _948));
    float _1071 = fma(_950, cbSceneParam._m0[7u].z, fma(_949, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _948));
    uint _1084 = _289 + 9u;
    uint _1085 = _1084 + uint(cbMatDynParam._m0[0u].w);
    float _1091 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_1085].x;
    float _1092 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_1085].y;
    float _1093 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_1085].z;
    float _4079 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1095 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    vec4 _1105 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1046, cbSceneParam._m0[86u].y * _1047));
    float _1109 = ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * TEXCOORD_5.w) * _1105.x;
    float _1110 = dot(vec3(_948, _949, _950), vec3(_1026, _1027, _1028));
    float _1113 = _1110 * 2.0;
    float _1117 = (_1113 * _948) - _1026;
    float _1118 = (_1113 * _949) - _1027;
    float _1119 = (_1113 * _950) - _1028;
    float _1123 = abs(dot(vec3(_1026, _1027, _1028), vec3(_948, _949, _950)));
    float _4112 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1125 = sqrt(_951);
    float _1138 = exp2((_1125 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1125 * 3.0));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1507;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1232 = fma(_1178, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170));
        float _1236 = fma(_1178, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170));
        float _1240 = fma(_1178, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170));
        float _1265 = _1170 + _948;
        float _1266 = _1174 + _949;
        float _1267 = _1178 + _950;
        float _1277 = fma(_1267, cbModelParam._m0[26u].z, fma(_1266, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265)) - _1232;
        float _1278 = fma(_1267, cbModelParam._m0[27u].z, fma(_1266, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265)) - _1236;
        float _1279 = fma(_1267, cbModelParam._m0[28u].z, fma(_1266, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265)) - _1240;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1232 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1236 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[34u].z) + ((((((_1240 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1335 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1301.x + (-0.5));
        float _1337 = _1335 * (_1301.y + (-0.5));
        float _1338 = _1335 * (_1301.z + (-0.5));
        float _1345 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1308.x + (-0.5));
        float _1347 = _1345 * (_1308.y + (-0.5));
        float _1348 = _1345 * (_1308.z + (-0.5));
        float _1355 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1315.x + (-0.5));
        float _1357 = _1355 * (_1315.y + (-0.5));
        float _1358 = _1355 * (_1315.z + (-0.5));
        float _1365 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1322.x + (-0.5));
        float _1367 = _1365 * (_1322.y + (-0.5));
        float _1368 = _1365 * (_1322.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1389 = (dot(vec3(_948, _949, _950), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1399 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4160 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1401 + 1.0))) + _1406) * _1369;
        float _1416 = _1337 * 0.5;
        float _1417 = _1347 * 0.5;
        float _1418 = _1357 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_948, _949, _950), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4193 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1443 + 1.0))) + _1448) * _1370;
        float _1458 = _1338 * 0.5;
        float _1459 = _1348 * 0.5;
        float _1460 = _1358 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_948, _949, _950), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4226 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1485 + 1.0))) + _1490) * _1371;
        _1507 = _1338;
        _1509 = _1337;
        _1510 = _1336;
        _1511 = _1348;
        _1512 = _1347;
        _1513 = _1346;
        _1514 = _1358;
        _1515 = _1357;
        _1516 = _1356;
        _1517 = _1371;
        _1518 = _1370;
        _1519 = _1369;
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1508;
        _1509 = _1508;
        _1510 = _1508;
        _1511 = _1508;
        _1512 = _1508;
        _1513 = _1508;
        _1514 = _1508;
        _1515 = _1508;
        _1516 = _1508;
        _1517 = _1508;
        _1518 = _1508;
        _1519 = _1508;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1548 = fma(_1178, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170));
        float _1552 = fma(_1178, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170));
        float _1556 = fma(_1178, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170));
        float _1579 = _1170 + _948;
        float _1580 = _1174 + _949;
        float _1581 = _1178 + _950;
        float _1591 = fma(_1581, cbModelParam._m0[30u].z, fma(_1580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1579)) - _1548;
        float _1592 = fma(_1581, cbModelParam._m0[31u].z, fma(_1580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1579)) - _1552;
        float _1593 = fma(_1581, cbModelParam._m0[32u].z, fma(_1580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1579)) - _1556;
        float _1597 = inversesqrt(dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593)));
        float _1610 = ((_1597 * _1591) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1548 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1597 * _1592) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1552 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1597 * _1593) / cbModelParam._m0[35u].z) + ((((((_1556 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        float _1647 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1614.x + (-0.5));
        float _1649 = _1647 * (_1614.y + (-0.5));
        float _1650 = _1647 * (_1614.z + (-0.5));
        float _1657 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1621.x + (-0.5));
        float _1659 = _1657 * (_1621.y + (-0.5));
        float _1660 = _1657 * (_1621.z + (-0.5));
        float _1667 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1628.x + (-0.5));
        float _1669 = _1667 * (_1628.y + (-0.5));
        float _1670 = _1667 * (_1628.z + (-0.5));
        float _1677 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1635.x + (-0.5));
        float _1679 = _1677 * (_1635.y + (-0.5));
        float _1680 = _1677 * (_1635.z + (-0.5));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = _1648 * 0.5;
        float _1685 = _1658 * 0.5;
        float _1686 = _1668 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_948, _949, _950), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4289 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1711 + 1.0))) + _1716) * _1681;
        float _1726 = _1649 * 0.5;
        float _1727 = _1659 * 0.5;
        float _1728 = _1669 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_948, _949, _950), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4322 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1753 + 1.0))) + _1758) * _1682;
        float _1768 = _1650 * 0.5;
        float _1769 = _1660 * 0.5;
        float _1770 = _1670 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_948, _949, _950), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4355 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1795 + 1.0))) + _1800) * _1683;
        _1817 = _1650;
        _1818 = _1649;
        _1819 = _1648;
        _1820 = _1660;
        _1821 = _1659;
        _1822 = _1658;
        _1823 = _1670;
        _1824 = _1669;
        _1825 = _1668;
        _1826 = _1683;
        _1827 = _1682;
        _1828 = _1681;
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
    }
    else
    {
        _1817 = _1508;
        _1818 = _1508;
        _1819 = _1508;
        _1820 = _1508;
        _1821 = _1508;
        _1822 = _1508;
        _1823 = _1508;
        _1824 = _1508;
        _1825 = _1508;
        _1826 = _1508;
        _1827 = _1508;
        _1828 = _1508;
        _1829 = 0.0;
        _1830 = 0.0;
        _1831 = 0.0;
    }
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1520)) + _1520;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1521)) + _1521;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1522)) + _1522;
    float _1864 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1841));
    float _1885 = _1117 * 0.5;
    float _1886 = _1118 * 0.5;
    float _1887 = _1119 * 0.5;
    float _1888 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1891 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1894 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1928;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1901 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1507, _1511, _1514, _1517));
        float _1905 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1909 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1916 = dot(vec4(cbModelParam._m0[39u]), vec4(_1885, _1886, _1887, 1.0));
        _1928 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1928 = 1.0;
    }
    float _1939;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1930 = dot(vec4(cbModelParam._m0[40u]), vec4(_1885, _1886, _1887, 1.0));
        _1939 = dot(vec3(isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1930) ? 0.0 : (isnan(0.0) ? _1930 : max(0.0, _1930))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1939 = 1.0;
    }
    float _1943 = (_1939 * cbModelParam._m0[1u].x) + (_1928 * (1.0 - cbModelParam._m0[1u].x));
    float _1953 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _951);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1953 : min(cbModelParam._m0[25u].z, _1953));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2002 = fma(_1178, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1170)) + cbModelParam._m0[13u].w;
        float _2006 = fma(_1178, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1170)) + cbModelParam._m0[14u].w;
        float _2010 = fma(_1178, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1170)) + cbModelParam._m0[15u].w;
        float _2013 = fma(_1119, cbModelParam._m0[13u].z, fma(_1118, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117));
        float _2016 = fma(_1119, cbModelParam._m0[14u].z, fma(_1118, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117));
        float _2019 = fma(_1119, cbModelParam._m0[15u].z, fma(_1118, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117));
        float _2047;
        if (_2013 > 0.0)
        {
            _2047 = abs((1.0 - _2002) / _2013);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2002 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2047 = frontier_phi_17_15_ladder;
        }
        float _2270;
        if (_2016 > 0.0)
        {
            _2270 = abs((1.0 - _2006) / _2016);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2006 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2270 = frontier_phi_26_22_ladder;
        }
        float _2516;
        if (_2019 > 0.0)
        {
            _2516 = abs((1.0 - _2010) / _2019);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2010 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2516 = frontier_phi_38_33_ladder;
        }
        float _2518 = isnan(_2270) ? _2047 : (isnan(_2047) ? _2270 : min(_2047, _2270));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _2013) + _2002;
        float _2524 = (_2519 * _2016) + _2006;
        float _2525 = (_2519 * _2019) + _2010;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2526;
        float _2530 = _2526 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 > _2530) || ((_2524 < _2528) || ((_2523 < _2528) || (_2523 > _2530))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2649 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2525, cbModelParam._m0[9u].z, fma(_2524, cbModelParam._m0[9u].y, _2523 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2525, cbModelParam._m0[10u].z, fma(_2524, cbModelParam._m0[10u].y, _2523 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2525, cbModelParam._m0[11u].z, fma(_2524, cbModelParam._m0[11u].y, _2523 * cbModelParam._m0[11u].x))), _1954);
            frontier_phi_16_38_ladder = _2649.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2649.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2649.x * cbModelParam._m0[1u].y;
        }
        _2035 = frontier_phi_16_38_ladder_2;
        _2037 = frontier_phi_16_38_ladder_1;
        _2039 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1117, _1118, _1119), _1954);
        _2035 = _2023.x * cbModelParam._m0[1u].y;
        _2037 = _2023.y * cbModelParam._m0[1u].y;
        _2039 = _2023.z * cbModelParam._m0[1u].y;
    }
    float _2043 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _951);
    float _2044 = isnan(_2043) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2043 : min(cbModelParam._m0[25u].w, _2043));
    float _2135;
    float _2137;
    float _2139;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2099 = fma(_1178, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1170)) + cbModelParam._m0[21u].w;
        float _2103 = fma(_1178, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1170)) + cbModelParam._m0[22u].w;
        float _2107 = fma(_1178, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1170)) + cbModelParam._m0[23u].w;
        float _2110 = fma(_1119, cbModelParam._m0[21u].z, fma(_1118, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117));
        float _2113 = fma(_1119, cbModelParam._m0[22u].z, fma(_1118, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117));
        float _2116 = fma(_1119, cbModelParam._m0[23u].z, fma(_1118, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117));
        float _2275;
        if (_2110 > 0.0)
        {
            _2275 = abs((1.0 - _2099) / _2110);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2099 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2275 = frontier_phi_28_24_ladder;
        }
        float _2543;
        if (_2113 > 0.0)
        {
            _2543 = abs((1.0 - _2103) / _2113);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2103 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2543 = frontier_phi_40_35_ladder;
        }
        float _2748;
        if (_2116 > 0.0)
        {
            _2748 = abs((1.0 - _2107) / _2116);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2107 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2748 = frontier_phi_49_46_ladder;
        }
        float _2750 = isnan(_2543) ? _2275 : (isnan(_2275) ? _2543 : min(_2275, _2543));
        float _2751 = isnan(_2748) ? _2750 : (isnan(_2750) ? _2748 : min(_2750, _2748));
        float _2755 = (_2751 * _2110) + _2099;
        float _2756 = (_2751 * _2113) + _2103;
        float _2757 = (_2751 * _2116) + _2107;
        float _2758 = _2751 * 9.9999997473787516355514526367188e-05;
        float _2759 = (-1.0) - _2758;
        float _2761 = _2758 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2757 > _2761) || ((_2757 < _2759) || ((_2756 > _2761) || ((_2756 < _2759) || ((_2755 < _2759) || (_2755 > _2761))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2757, cbModelParam._m0[17u].z, fma(_2756, cbModelParam._m0[17u].y, _2755 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2757, cbModelParam._m0[18u].z, fma(_2756, cbModelParam._m0[18u].y, _2755 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2757, cbModelParam._m0[19u].z, fma(_2756, cbModelParam._m0[19u].y, _2755 * cbModelParam._m0[19u].x))), _2044);
            frontier_phi_25_49_ladder = _2956.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2956.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2956.x * cbModelParam._m0[1u].z;
        }
        _2135 = frontier_phi_25_49_ladder_2;
        _2137 = frontier_phi_25_49_ladder_1;
        _2139 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2119 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1117, _1118, _1119), _2044);
        _2135 = _2119.x * cbModelParam._m0[1u].z;
        _2137 = _2119.y * cbModelParam._m0[1u].z;
        _2139 = _2119.z * cbModelParam._m0[1u].z;
    }
    float _2151 = ((((1.0 - _1138) * ((_1125 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1138 * _1125)) * _1109;
    float _2152 = _2151 * ((cbModelParam._m0[1u].w * (_2135 - _2035)) + _2035);
    float _2153 = _2151 * ((cbModelParam._m0[1u].w * (_2137 - _2037)) + _2037);
    float _2154 = _2151 * ((cbModelParam._m0[1u].w * (_2139 - _2039)) + _2039);
    float _2157 = fma(_2154, cbSceneParam._m0[89u].z, fma(_2153, cbSceneParam._m0[89u].y, _2152 * cbSceneParam._m0[89u].x));
    float _2160 = fma(_2154, cbSceneParam._m0[90u].z, fma(_2153, cbSceneParam._m0[90u].y, _2152 * cbSceneParam._m0[90u].x));
    float _2163 = fma(_2154, cbSceneParam._m0[91u].z, fma(_2153, cbSceneParam._m0[91u].y, _2152 * cbSceneParam._m0[91u].x));
    vec4 _2171 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1046, _1047));
    float _2173 = _2171.w;
    float _2185 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2173);
    float _2186 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2173);
    float _2187 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2173);
    uvec4 _2191 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2193 = _2191.x * 14u;
    uint _2194 = _2193 + 13u;
    float _2201 = _1109 + (-1.0);
    float _2206 = (cbLight._m0[_2194].x * _2201) + 1.0;
    float _2207 = (cbLight._m0[_2194].y * _2201) + 1.0;
    float _2208 = (cbLight._m0[_2194].z * _2201) + 1.0;
    float _2209 = (cbLight._m0[_2194].w * _2201) + 1.0;
    uint _2210 = _2193 + 5u;
    float _2216 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
    uint _2220 = _2193 + 4u;
    float _2229 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2233 = _2193 | 1u;
    float _2244 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_948, _949, _950));
    float _2247 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_948, _949, _950));
    float _4491 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _4502 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2252 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 0.3183098733425140380859375;
    float _2254 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2261 = ((cbLight._m0[_2210].x * _2216) * _2254) + (((cbLight._m0[_2220].x * _2185) * _2229) * _2252);
    float _2262 = ((_2216 * cbLight._m0[_2210].y) * _2254) + (((cbLight._m0[_2220].y * _2186) * _2229) * _2252);
    float _2263 = ((_2216 * cbLight._m0[_2210].z) * _2254) + (((cbLight._m0[_2220].z * _2187) * _2229) * _2252);
    uvec4 _2267 = floatBitsToUint(cbLight._m0[_2193 + 12u]);
    bool _2269 = _2267.x == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2269)
    {
        _2280 = _2261;
        _2282 = _2262;
        _2284 = _2263;
    }
    else
    {
        uint _2288 = _2193 + 6u;
        float _2304 = (dot(vec3(cbLight._m0[_2193 + 2u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4513 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2307 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2280 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2261;
        _2282 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2262;
        _2284 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2263;
    }
    bool _2287 = _2267.y == 0u;
    float _2325;
    float _2327;
    float _2329;
    if (_2287)
    {
        _2325 = _2280;
        _2327 = _2282;
        _2329 = _2284;
    }
    else
    {
        uint _2487 = _2193 + 7u;
        float _2503 = (dot(vec3(cbLight._m0[_2193 + 3u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2504 = _2503 * _2503;
        float _4529 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2505 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2506 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2325 = (((cbLight._m0[_2487].x * 0.3183098733425140380859375) * _2505) * _2506) + _2280;
        _2327 = (((cbLight._m0[_2487].y * 0.3183098733425140380859375) * _2505) * _2506) + _2282;
        _2329 = (((cbLight._m0[_2487].z * 0.3183098733425140380859375) * _2505) * _2506) + _2284;
    }
    uint _2332 = _2193 + 8u;
    float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _951) * 0.949999988079071044921875);
    float _2346 = _2345 * _2345;
    float _2347 = cbLight._m0[_2193].x + _1026;
    float _2348 = cbLight._m0[_2193].y + _1027;
    float _2349 = cbLight._m0[_2193].z + _1028;
    float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
    float _2354 = _2353 * _2347;
    float _2355 = _2353 * _2348;
    float _2356 = _2353 * _2349;
    float _2357 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2193].xyz));
    float _4545 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _4556 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _2361 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2362 = dot(vec3(_948, _949, _950), vec3(_2354, _2355, _2356));
    float _4567 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2366 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2354, _2355, _2356));
    float _4578 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2370 = _2346 * _2346;
    float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
    float _2385 = (exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2386 = 1.0 - _2346;
    float _2397 = (0.5 / (((_2361 * ((_2360 * _2386) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2386) + _2346) * _2360))) * _2360;
    float _4589 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
    uint _2413 = _2193 + 9u;
    float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _951) * 0.949999988079071044921875);
    float _2425 = _2424 * _2424;
    float _2426 = cbLight._m0[_2233].x + _1026;
    float _2427 = cbLight._m0[_2233].y + _1027;
    float _2428 = cbLight._m0[_2233].z + _1028;
    float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
    float _2433 = _2432 * _2426;
    float _2434 = _2432 * _2427;
    float _2435 = _2432 * _2428;
    float _2436 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2233].xyz));
    float _4600 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2440 = dot(vec3(_948, _949, _950), vec3(_2433, _2434, _2435));
    float _4611 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2444 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2433, _2434, _2435));
    float _4622 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2448 = _2425 * _2425;
    float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
    float _2461 = (exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2462 = 1.0 - _2425;
    float _2472 = (0.5 / (((_2361 * ((_2439 * _2462) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2462) + _2425) * _2439))) * _2439;
    float _4633 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2474 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
    float _2484 = (((_2461 * cbLight._m0[_2413].x) * _2474) * _2216) + ((((cbLight._m0[_2332].x * _2185) * _2385) * _2399) * _2229);
    float _2485 = (((_2461 * cbLight._m0[_2413].y) * _2474) * _2216) + ((((cbLight._m0[_2332].y * _2186) * _2385) * _2399) * _2229);
    float _2486 = (((_2461 * cbLight._m0[_2413].z) * _2474) * _2216) + ((((cbLight._m0[_2332].z * _2187) * _2385) * _2399) * _2229);
    float _2548;
    float _2550;
    float _2552;
    if (_2269)
    {
        _2548 = _2484;
        _2550 = _2485;
        _2552 = _2486;
    }
    else
    {
        uint _2554 = _2193 + 2u;
        uint _2558 = _2193 + 10u;
        float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2554].w)) * _951) * 0.949999988079071044921875);
        float _2573 = _2572 * _2572;
        float _2574 = cbLight._m0[_2554].x + _1026;
        float _2575 = cbLight._m0[_2554].y + _1027;
        float _2576 = cbLight._m0[_2554].z + _1028;
        float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
        float _2581 = _2580 * _2574;
        float _2582 = _2580 * _2575;
        float _2583 = _2580 * _2576;
        float _2584 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2554].xyz));
        float _4644 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2588 = dot(vec3(_948, _949, _950), vec3(_2581, _2582, _2583));
        float _4655 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2592 = dot(vec3(cbLight._m0[_2554].xyz), vec3(_2581, _2582, _2583));
        float _4666 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2596 = _2573 * _2573;
        float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
        float _2609 = (exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2610 = 1.0 - _2573;
        float _2620 = (0.5 / (((_2361 * ((_2587 * _2610) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2610) + _2573) * _2587))) * _2587;
        float _4677 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2622 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
        float _2623 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2548 = (((_2609 * cbLight._m0[_2558].x) * _2622) * _2623) + _2484;
        _2550 = (((_2609 * cbLight._m0[_2558].y) * _2622) * _2623) + _2485;
        _2552 = (((_2609 * cbLight._m0[_2558].z) * _2622) * _2623) + _2486;
    }
    float _2658;
    float _2660;
    float _2662;
    if (_2287)
    {
        _2658 = _2548;
        _2660 = _2550;
        _2662 = _2552;
    }
    else
    {
        uint _2669 = _2193 + 3u;
        uint _2673 = _2193 + 11u;
        float _2687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2669].w)) * _951) * 0.949999988079071044921875);
        float _2688 = _2687 * _2687;
        float _2689 = cbLight._m0[_2669].x + _1026;
        float _2690 = cbLight._m0[_2669].y + _1027;
        float _2691 = cbLight._m0[_2669].z + _1028;
        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
        float _2696 = _2695 * _2689;
        float _2697 = _2695 * _2690;
        float _2698 = _2695 * _2691;
        float _2699 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2669].xyz));
        float _4693 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2703 = dot(vec3(_948, _949, _950), vec3(_2696, _2697, _2698));
        float _4704 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2707 = dot(vec3(cbLight._m0[_2669].xyz), vec3(_2696, _2697, _2698));
        float _4715 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2711 = _2688 * _2688;
        float _2715 = ((_2706 * _2706) * (_2711 + (-1.0))) + 1.0;
        float _2724 = (exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2725 = 1.0 - _2688;
        float _2735 = (0.5 / (((_2361 * ((_2702 * _2725) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2725) + _2688) * _2702))) * _2702;
        float _4726 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2737 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2711 / ((_2715 * _2715) * 3.141590118408203125));
        float _2738 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2658 = (((_2724 * cbLight._m0[_2673].x) * _2737) * _2738) + _2548;
        _2660 = (((_2724 * cbLight._m0[_2673].y) * _2737) * _2738) + _2550;
        _2662 = (((_2724 * cbLight._m0[_2673].z) * _2737) * _2738) + _2552;
    }
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    if (_2191.y == 0u)
    {
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2814 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2813;
        float _2815 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2813;
        float _2816 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2813;
        uvec4 _2828 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2829 = _2828.x;
        uint _2840 = uint((float(_2828.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1047) / _2829))) + floor(float(uint(cbSceneParam._m0[85u].x * _1046) / _2829)));
        float _2850 = (log2(_2816 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2851 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        uint _2854 = uint(isnan(14.0) ? _2851 : (isnan(_2851) ? 14.0 : min(_2851, 14.0)));
        uvec4 _2859 = texelFetch(g_lightClusterGridBuffer, int(((_2854 << 2u) + (_2840 << 6u)) >> 2u));
        uint _2860 = _2859.x;
        uint _2861 = _2828.z;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        if (((((1u << ((_2861 >> 4u) & 15u)) + 4294967295u) & _2860) == 0u) || ((_2861 & 240u) == 0u))
        {
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
        }
        else
        {
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            uint _3120 = 0u;
            uint _3129;
            bool _3130;
            for (;;)
            {
                _3129 = texelFetch(g_lightClassification, int((((_2854 << 5u) + (_2840 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                _3130 = _3129 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3130)
                {
                    frontier_phi_66_pred = _3114;
                    frontier_phi_66_pred_1 = _3119;
                    frontier_phi_66_pred_2 = _3118;
                    frontier_phi_66_pred_3 = _3117;
                    frontier_phi_66_pred_4 = _3116;
                    frontier_phi_66_pred_5 = _3115;
                }
                else
                {
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    uint _3265;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3129;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    for (;;)
                    {
                        uint _3269 = uint(findLSB(_3265)) + (_3120 << 5u);
                        uint _3266 = (_3265 + 4294967295u) & _3265;
                        uint _3271 = _3269 * 48u;
                        vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 3u)).x));
                        uint _3291 = (_3269 * 48u) + 4u;
                        vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3310 = (_3269 * 48u) + 8u;
                        vec3 _3321 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x));
                        float _3325 = _3285.x - _2814;
                        float _3326 = _3285.y - _2815;
                        float _3327 = _3285.z - _2816;
                        float _3328 = dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327));
                        float _3331 = inversesqrt(_3328);
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3335 = dot(vec3(_1065, _1068, _1071), vec3(_3332, _3333, _3334));
                        float _3340 = 1.0 - (_3328 * _3285.w);
                        float _4752 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3341 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3342 = sqrt(_3328) * _3304.w;
                        float _3345 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                        float _3346 = _3345 * _3345;
                        float _3349 = ((1.0 - _3346) * _3335) + _3346;
                        float _3352 = _3342 * _3342;
                        float _3356 = ((isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))) * _3341) / ((_3352 * 0.699999988079071044921875) + 1.0);
                        float _3360 = (-0.0) - _2814;
                        float _3361 = (-0.0) - _2815;
                        float _3362 = (-0.0) - _2816;
                        float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                        float _3367 = _3366 * _3360;
                        float _3368 = _3366 * _3361;
                        float _3369 = _3366 * _3362;
                        float _3377 = exp2(log2(1.0 / ((_3352 * 3.5) + 5.0)) * 0.25);
                        float _3378 = 1.0 - _1125;
                        float _3385 = sqrt(1.0 - ((1.0 - (_3378 * _3378)) * (1.0 - (_3377 * _3377))));
                        float _3386 = _3385 * _3385;
                        float _3387 = _3386 * _3386;
                        float _3388 = _3367 + _3332;
                        float _3389 = _3368 + _3333;
                        float _3390 = _3369 + _3334;
                        float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                        float _3398 = dot(vec3(_1065, _1068, _1071), vec3(_3367, _3368, _3369));
                        float _4768 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3401 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3402 = dot(vec3(_1065, _1068, _1071), vec3(_3394 * _3388, _3394 * _3389, _3394 * _3390));
                        float _4779 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3405 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3409 = ((_3405 * _3405) * (_3387 + (-1.0))) + 1.0;
                        float _3410 = _3345 * _3386;
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3335) + _3411;
                        float _4790 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3415 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3416 = 1.0 - _3386;
                        float _3426 = (0.5 / (((_3415 * ((_3401 * _3416) + _3386)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3386) * _3401))) * _3415;
                        float _4801 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3437 = (((_3387 * 3.1415927410125732421875) * (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) / ((_3409 * _3409) * ((_3352 * 2.1991131305694580078125) + 3.141590118408203125))) * _3341;
                        _3189 = (_3356 * _3304.x) + _3262;
                        _3190 = (_3356 * _3304.y) + _3263;
                        _3191 = (_3356 * _3304.z) + _3264;
                        _3186 = (_3437 * _3321.x) + _3259;
                        _3187 = (_3437 * _3321.y) + _3260;
                        _3188 = (_3437 * _3321.z) + _3261;
                        if (_3266 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3266;
                        }
                    }
                    frontier_phi_66_pred = _3186;
                    frontier_phi_66_pred_1 = _3191;
                    frontier_phi_66_pred_2 = _3190;
                    frontier_phi_66_pred_3 = _3189;
                    frontier_phi_66_pred_4 = _3188;
                    frontier_phi_66_pred_5 = _3187;
                }
                _2962 = frontier_phi_66_pred;
                _2972 = frontier_phi_66_pred_1;
                _2970 = frontier_phi_66_pred_2;
                _2968 = frontier_phi_66_pred_3;
                _2966 = frontier_phi_66_pred_4;
                _2964 = frontier_phi_66_pred_5;
                uint _3121 = _3120 + 1u;
                if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3114 = _2962;
                    _3115 = _2964;
                    _3116 = _2966;
                    _3117 = _2968;
                    _3118 = _2970;
                    _3119 = _2972;
                    _3120 = _3121;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
        }
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.z;
        uint _2978 = (_2976 >> 8u) & 15u;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        if (((4294967295u << _2978) & _2860) == 0u)
        {
            _3082 = _2961;
            _3084 = _2963;
            _3086 = _2965;
            _3088 = _2967;
            _3090 = _2969;
            _3092 = _2971;
        }
        else
        {
            float _3107 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
            float _3108 = _3107 * _2814;
            float _3109 = _3107 * _2815;
            float _3110 = _3107 * _2816;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2978 < ((_2976 >> 12u) & 15u))
            {
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3242 = _2961;
                float _3243 = _2963;
                float _3244 = _2965;
                float _3245 = _2967;
                float _3246 = _2969;
                float _3247 = _2971;
                uint _3248 = _2978;
                uint _3257;
                bool _3258;
                for (;;)
                {
                    _3257 = texelFetch(g_lightClassification, int((((_2854 << 5u) + (_2840 << 9u)) + (_3248 << 2u)) >> 2u)).x;
                    _3258 = _3257 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3258)
                    {
                        frontier_phi_77_pred = _3247;
                        frontier_phi_77_pred_1 = _3246;
                        frontier_phi_77_pred_2 = _3245;
                        frontier_phi_77_pred_3 = _3244;
                        frontier_phi_77_pred_4 = _3243;
                        frontier_phi_77_pred_5 = _3242;
                    }
                    else
                    {
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3464 = _3242;
                        float _3465 = _3243;
                        float _3466 = _3244;
                        float _3467 = _3245;
                        float _3468 = _3246;
                        float _3469 = _3247;
                        uint _3470 = _3257;
                        uint _3471;
                        vec4 _3496;
                        float _3497;
                        vec4 _3512;
                        vec3 _3524;
                        vec4 _3539;
                        vec4 _3554;
                        float _3600;
                        bool _3601;
                        for (;;)
                        {
                            uint _3481 = ((_3248 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3470));
                            _3471 = (_3470 + 4294967295u) & _3470;
                            uint _3483 = _3481 * 40u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            _3497 = _3496.w;
                            uint _3499 = (_3481 * 40u) + 4u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3481 * 40u) + 8u;
                            _3524 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x));
                            uint _3526 = (_3481 * 40u) + 16u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3481 * 40u) + 20u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3481 * 40u) + 24u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3575 = (_3481 * 40u) + 28u;
                            vec4 _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            _3600 = fma(_2816, _3588.z, fma(_2815, _3588.y, _3588.x * _2814)) + _3588.w;
                            _3601 = !((fma(_2816, _3569.z, fma(_2815, _3569.y, _3569.x * _2814)) + _3569.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3601)
                            {
                                float _3628 = _3496.x - _2814;
                                float _3629 = _3496.y - _2815;
                                float _3630 = _3496.z - _2816;
                                float _3631 = dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630));
                                float _3634 = inversesqrt(_3631);
                                float _3635 = _3634 * _3628;
                                float _3636 = _3634 * _3629;
                                float _3637 = _3634 * _3630;
                                float _3641 = 1.0 - (_3631 / (_3497 * _3497));
                                float _4812 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3646 = sqrt(_3631) * _3512.w;
                                float _3648 = 1.39999997615814208984375 / (_3646 + 1.39999997615814208984375);
                                float _3649 = _3648 * _3648;
                                float _3652 = ((1.0 - _3649) * dot(vec3(_3635, _3636, _3637), vec3(_1065, _1068, _1071))) + _3649;
                                float _3655 = _3646 * _3646;
                                float _3659 = (fma(_2816, _3539.z, fma(_2815, _3539.y, _3539.x * _2814)) + _3539.w) / _3600;
                                float _3660 = (fma(_2816, _3554.z, fma(_2815, _3554.y, _3554.x * _2814)) + _3554.w) / _3600;
                                float _3664 = 1.0 - dot(vec2(_3659, _3660), vec2(_3659, _3660));
                                float _4828 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3666 = _3665 * (((isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0))) * _3642) / ((_3655 * 0.699999988079071044921875) + 1.0));
                                float _3678 = exp2(log2(1.0 / ((_3655 * 3.5) + 5.0)) * 0.25);
                                float _3679 = 1.0 - _1125;
                                float _3686 = sqrt(1.0 - ((1.0 - (_3679 * _3679)) * (1.0 - (_3678 * _3678))));
                                float _3687 = _3686 * _3686;
                                float _3688 = _3687 * _3687;
                                float _3689 = _3635 - _3108;
                                float _3690 = _3636 - _3109;
                                float _3691 = _3637 - _3110;
                                float _3695 = inversesqrt(dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691)));
                                float _3699 = dot(vec3(_1065, _1068, _1071), vec3((-0.0) - _3108, (-0.0) - _3109, (-0.0) - _3110));
                                float _4839 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3703 = dot(vec3(_1065, _1068, _1071), vec3(_3695 * _3689, _3695 * _3690, _3695 * _3691));
                                float _4850 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3706 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3710 = ((_3706 * _3706) * (_3688 + (-1.0))) + 1.0;
                                float _3711 = _3648 * _3687;
                                float _3712 = _3711 * _3711;
                                float _3718 = ((1.0 - _3712) * dot(vec3(_1065, _1068, _1071), vec3(_3635, _3636, _3637))) + _3712;
                                float _4861 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3720 = 1.0 - _3687;
                                float _3730 = (0.5 / (((_3719 * ((_3702 * _3720) + _3687)) + 9.9999999392252902907785028219223e-09) + (((_3719 * _3720) + _3687) * _3702))) * _3719;
                                float _4872 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3740 = (_3665 * _3642) * (((_3688 * 3.1415927410125732421875) * (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) / ((_3710 * _3710) * ((_3655 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3666 * _3512.y;
                                frontier_phi_83_pred_1 = _3666 * _3512.x;
                                frontier_phi_83_pred_2 = _3740 * _3524.z;
                                frontier_phi_83_pred_3 = _3740 * _3524.y;
                                frontier_phi_83_pred_4 = _3740 * _3524.x;
                                frontier_phi_83_pred_5 = _3666 * _3512.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3748 = frontier_phi_83_pred;
                            _3747 = frontier_phi_83_pred_1;
                            _3746 = frontier_phi_83_pred_2;
                            _3745 = frontier_phi_83_pred_3;
                            _3744 = frontier_phi_83_pred_4;
                            _3749 = frontier_phi_83_pred_5;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            if (_3471 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3471;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3456;
                        frontier_phi_77_pred_1 = _3455;
                        frontier_phi_77_pred_2 = _3454;
                        frontier_phi_77_pred_3 = _3453;
                        frontier_phi_77_pred_4 = _3452;
                        frontier_phi_77_pred_5 = _3451;
                    }
                    _3093 = frontier_phi_77_pred;
                    _3091 = frontier_phi_77_pred_1;
                    _3089 = frontier_phi_77_pred_2;
                    _3087 = frontier_phi_77_pred_3;
                    _3085 = frontier_phi_77_pred_4;
                    _3083 = frontier_phi_77_pred_5;
                    uint _3249 = _3248 + 1u;
                    if (_3249 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3242 = _3083;
                        _3243 = _3085;
                        _3244 = _3087;
                        _3245 = _3089;
                        _3246 = _3091;
                        _3247 = _3093;
                        _3248 = _3249;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3087;
                frontier_phi_58_59_ladder_1 = _3093;
                frontier_phi_58_59_ladder_2 = _3091;
                frontier_phi_58_59_ladder_3 = _3089;
                frontier_phi_58_59_ladder_4 = _3085;
                frontier_phi_58_59_ladder_5 = _3083;
            }
            else
            {
                frontier_phi_58_59_ladder = _2965;
                frontier_phi_58_59_ladder_1 = _2971;
                frontier_phi_58_59_ladder_2 = _2969;
                frontier_phi_58_59_ladder_3 = _2967;
                frontier_phi_58_59_ladder_4 = _2963;
                frontier_phi_58_59_ladder_5 = _2961;
            }
            _3082 = frontier_phi_58_59_ladder_5;
            _3084 = frontier_phi_58_59_ladder_4;
            _3086 = frontier_phi_58_59_ladder;
            _3088 = frontier_phi_58_59_ladder_3;
            _3090 = frontier_phi_58_59_ladder_2;
            _3092 = frontier_phi_58_59_ladder_1;
        }
        float _3097 = isnan(1.0) ? _1109 : (isnan(_1109) ? 1.0 : min(_1109, 1.0));
        _2873 = (_3097 * _3088) + _2325;
        _2875 = (_3097 * _3090) + _2327;
        _2877 = (_3097 * _3092) + _2329;
        _2879 = ((_3082 * 0.039999999105930328369140625) * _3097) + _2658;
        _2881 = ((_3084 * 0.039999999105930328369140625) * _3097) + _2660;
        _2883 = ((_3086 * 0.039999999105930328369140625) * _3097) + _2662;
    }
    else
    {
        _2873 = _2325;
        _2875 = _2327;
        _2877 = _2329;
        _2879 = _2658;
        _2881 = _2660;
        _2883 = _2662;
    }
    float _4888 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _4899 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _4910 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _2900 = ((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2873 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1109))) + ((_2879 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    float _2901 = ((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2875 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1109))) + ((_2881 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    float _2902 = ((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2877 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1109))) + ((_2883 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    uint _2903 = _289 + 6u;
    float _2911 = _1046 / cbSceneParam._m0[86u].x;
    float _2912 = _1047 / cbSceneParam._m0[86u].y;
    vec4 _2926 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2911, _2912, (log2((isnan(cbSceneParam._m0[77u].w) ? _969 : (isnan(_969) ? cbSceneParam._m0[77u].w : min(_969, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2928 = _2926.x;
    float _2929 = _2926.y;
    float _2930 = _2926.z;
    float _2931 = _2926.w;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    if (_969 > cbSceneParam._m0[78u].w)
    {
        float _2986 = isnan(_969) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _969 : min(cbSceneParam._m0[80u].w, _969));
        float _2987 = _2986 / _969;
        float _2998 = _2987 * _1019;
        float _2999 = _1020 * _2987;
        float _3000 = (-0.0) - _2999;
        float _3002 = _2987 * _1021;
        float _3004 = (cbSceneParam._m0[77u].w * _3000) / _2986;
        float _3005 = _3004 + cbSceneParam._m0[79u].w;
        float _3006 = cbSceneParam._m0[79u].w - _2999;
        float _3012 = sqrt(((_2998 * _2998) + (_2999 * _2999)) + (_3002 * _3002));
        float _3015 = (1.0 - (cbSceneParam._m0[77u].w / _2986)) * _3012;
        float _3020 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3022 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3199;
        if (abs((_3000 - _3004) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3199 = ((((_3005 > 0.0) ? exp2(_3020 * _3005) : (2.0 - exp2(_3022 * _3005))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3015;
        }
        else
        {
            float _3143 = 1.0 / cbSceneParam._m0[80u].x;
            float _3144 = isnan(_3006) ? _3005 : (isnan(_3005) ? _3006 : max(_3005, _3006));
            float _3145 = isnan(_3006) ? _3005 : (isnan(_3005) ? _3006 : min(_3005, _3006));
            float _3154 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : min(_3144, 0.0));
            float _3155 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : min(_3145, 0.0));
            _3199 = ((abs(_3012 / _3000) * cbSceneParam._m0[80u].y) * ((((_3154 - _3155) * 2.0) - ((exp2(_3020 * (isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0)))) - exp2(_3020 * (isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))))) * _3143)) - ((exp2(_3022 * _3154) - exp2(_3022 * _3155)) * _3143))) + (_3015 * cbSceneParam._m0[80u].z);
        }
        vec4 _3201 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2911, _2912, 1.0), 0.0);
        float _3210 = exp2((_3199 * (-1.44269502162933349609375)) * (1.0 - _3201.w));
        float _3211 = log2(_3210);
        float _3227 = log2(_2931);
        _3024 = (exp2(_3227 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].x)) * _3201.x) / cbSceneParam._m0[78u].x)) + _2928;
        _3026 = (exp2(_3227 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].y)) * _3201.y) / cbSceneParam._m0[78u].y)) + _2929;
        _3028 = (exp2(_3227 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].z)) * _3201.z) / cbSceneParam._m0[78u].z)) + _2930;
        _3030 = _3210 * _2931;
    }
    else
    {
        _3024 = _2928;
        _3026 = _2929;
        _3028 = _2930;
        _3030 = _2931;
    }
    bool _3237;
    vec4 _3040;
    vec4 _3062;
    float _3064;
    float _3068;
    float _3069;
    float _3070;
    float _3071;
    bool _3081;
    for (;;)
    {
        _3040 = cbMatDynParam._m0[0u];
        float _3042 = roundEven(_3040.y);
        bool _3043 = _3042 == 3.0;
        float _3044 = log2(_3030);
        float _3051 = exp2(_3044 * cbSceneParam._m0[78u].x) * _2900;
        float _3052 = exp2(_3044 * cbSceneParam._m0[78u].y) * _2901;
        float _3053 = exp2(_3044 * cbSceneParam._m0[78u].z) * _2902;
        float _3060 = _1035 + (-0.5);
        _3062 = cbMtdParam._m0[1u];
        _3064 = _3062.y * _3060;
        float _3067 = (_3042 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3068 = _3067 * (_3043 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3024)));
        _3069 = _3067 * (_3043 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3026)));
        _3070 = _3067 * (_3043 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3028)));
        _3071 = _3060 * 0.999000012874603271484375;
        _3081 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3081)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3071) < 0.5)
            {
                _3237 = true;
                break;
            }
        }
        uint _3178 = _1084 + uint(_3040.w);
        if ((cbInstanceData._m0[_3178].w < 1.0) && ((cbInstanceData._m0[_3178].w + _3071) < 0.5))
        {
            _3237 = true;
            break;
        }
        if ((_3064 + 1.0) < _3062.x)
        {
            _3237 = true;
            break;
        }
        _3237 = false;
        break;
    }
    float _3442;
    if (_3237)
    {
        discard_state = true;
        _3442 = 0.0;
    }
    else
    {
        _3442 = cbInstanceData._m0[_2903].w;
    }
    SV_Target.x = _3068;
    SV_Target.y = _3069;
    SV_Target.z = _3070;
    SV_Target.w = _3442;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2903].w;
    discard_exit();
}


