#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1405;
float _4044;
float _4045;
float _4046;
float _4047;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _338.x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4056 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _417 = (_410 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _418 = (_410 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _419 = (_410 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _468 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _482 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _338.y) * 2.0) - ((((_458 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4067 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _490 = (_483 * ((_436.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _491 = (_483 * ((_436.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _492 = (_483 * ((_436.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _270) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _271) + cbTextureTilingScale._m0[24u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _551 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _338.z) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[24u].z) + _539) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4078 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _559 = (_552 * ((_510.x * cbMtdParam._m0[14u].x) - _490)) + _490;
    float _560 = (_552 * ((_510.y * cbMtdParam._m0[14u].y) - _491)) + _491;
    float _561 = (_552 * ((_510.z * cbMtdParam._m0[14u].z) - _492)) + _492;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _618 = _616.x;
    float _619 = _616.y;
    float _620 = _616.z;
    float _627 = ((_599.x - _618) * _410) + _618;
    float _628 = ((_599.y - _619) * _410) + _619;
    float _629 = ((_599.z - _620) * _410) + _620;
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _652 = ((_641.x - _627) * _483) + _627;
    float _653 = ((_641.y - _628) * _483) + _628;
    float _654 = ((_641.z - _629) * _483) + _629;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _270) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _271) + cbTextureTilingScale._m0[23u].w));
    float _679 = ((_666.z - _654) * _552) + _654;
    float _682 = ((((_666.x - _652) * _552) + _652) * 2.0) + (-1.0);
    float _684 = ((((_666.y - _653) * _552) + _653) * 2.0) + (-1.0);
    float _685 = dot(vec2(_682, _684), vec2(_682, _684));
    float _4089 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _690 = sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))));
    vec4 _704 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _716 = (((_704.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _682;
    float _717 = (((_704.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _684;
    float _720 = fma(_690, _238, fma(_717, _245, _716 * _231));
    float _723 = fma(_690, _239, fma(_717, _246, _716 * _232));
    float _726 = fma(_690, _240, fma(_717, _247, _716 * _233));
    float _730 = inversesqrt(dot(vec3(_720, _723, _726), vec3(_720, _723, _726)));
    vec4 _757 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _759 = _757.x;
    float _760 = 1.0 - _759;
    float _766 = (cbMtdParam._m0[19u].x + dot(vec4(_730 * _720, _730 * _723, _730 * _726, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_759 - _760) * cbMtdParam._m0[24u].w) + _760) * cbMtdParam._m0[21u].z);
    float _4100 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _767 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _774 = (_767 * ((_579.x * cbMtdParam._m0[18u].x) - _559)) + _559;
    float _775 = (_767 * ((_579.y * cbMtdParam._m0[18u].y) - _560)) + _560;
    float _776 = (_767 * ((_579.z * cbMtdParam._m0[18u].z) - _561)) + _561;
    float _780 = (cbMtdParam._m0[19u].w * (_704.z - _679)) + _679;
    vec4 _793 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _800 = (_793.x * 2.0) + (-1.0);
    float _801 = (_793.y * 2.0) + (-1.0);
    float _802 = dot(vec2(_800, _801), vec2(_800, _801));
    float _4111 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _810 = ((_793.z - _780) * _767) + _780;
    float _820 = ((sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) - _690) * _767) + _690;
    float _823 = (((_800 - _716) * _767) + _716) + (cbMtdParam._m0[21u].x * _716);
    float _824 = (((_801 - _717) * _767) + _717) + (cbMtdParam._m0[21u].x * _717);
    float _828 = cbMtdParam._m0[22u].x + _704.w;
    float _831 = fma(_820, _238, fma(_824, _245, _823 * _231));
    float _834 = fma(_820, _239, fma(_824, _246, _823 * _232));
    float _837 = fma(_820, _240, fma(_824, _247, _823 * _233));
    float _841 = inversesqrt(dot(vec3(_831, _834, _837), vec3(_831, _834, _837)));
    float _842 = _841 * _831;
    float _843 = _841 * _834;
    float _844 = _841 * _837;
    float _4122 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _845 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4144 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4155 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4166 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _863 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _915 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _905);
    float _916 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _905);
    float _917 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _905);
    float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
    float _922 = _915 * _921;
    float _923 = _916 * _921;
    float _924 = _917 * _921;
    vec4 _929 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _931 = _929.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1085 = sqrt(((_915 * _915) + (_916 * _916)) + (_917 * _917));
        float _1091 = (cbMatDynParam._m0[5u].x * _1085) + cbMatDynParam._m0[5u].y;
        float _4177 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1096 = (cbMatDynParam._m0[5u].z * _1085) + cbMatDynParam._m0[5u].w;
        float _4188 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) - _1092)) + _1092) < ((_931 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _942 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _943 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _961 = fma(_844, cbSceneParam._m0[5u].z, fma(_843, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _842));
    float _964 = fma(_844, cbSceneParam._m0[6u].z, fma(_843, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _842));
    float _967 = fma(_844, cbSceneParam._m0[7u].z, fma(_843, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _842));
    uint _980 = _250 + 9u;
    uint _981 = _980 + uint(cbMatDynParam._m0[0u].w);
    float _987 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_981].x;
    float _988 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_981].y;
    float _989 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_981].z;
    float _4199 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    vec4 _1001 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _942, cbSceneParam._m0[86u].y * _943));
    float _1005 = ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * TEXCOORD_5.w) * _1001.x;
    float _1006 = dot(vec3(_842, _843, _844), vec3(_922, _923, _924));
    float _1009 = _1006 * 2.0;
    float _1013 = (_1009 * _842) - _922;
    float _1014 = (_1009 * _843) - _923;
    float _1015 = (_1009 * _844) - _924;
    float _1019 = abs(dot(vec3(_922, _923, _924), vec3(_842, _843, _844)));
    float _4232 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1021 = sqrt(_845);
    float _1034 = exp2((_1021 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1021 * 3.0));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1404;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1129 = fma(_1074, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066));
        float _1133 = fma(_1074, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066));
        float _1137 = fma(_1074, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066));
        float _1162 = _1066 + _842;
        float _1163 = _1070 + _843;
        float _1164 = _1074 + _844;
        float _1174 = fma(_1164, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1162)) - _1129;
        float _1175 = fma(_1164, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1162)) - _1133;
        float _1176 = fma(_1164, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1162)) - _1137;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1129 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1133 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[34u].z) + ((((((_1137 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1232 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1198.x + (-0.5));
        float _1234 = _1232 * (_1198.y + (-0.5));
        float _1235 = _1232 * (_1198.z + (-0.5));
        float _1242 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1205.x + (-0.5));
        float _1244 = _1242 * (_1205.y + (-0.5));
        float _1245 = _1242 * (_1205.z + (-0.5));
        float _1252 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1212.x + (-0.5));
        float _1254 = _1252 * (_1212.y + (-0.5));
        float _1255 = _1252 * (_1212.z + (-0.5));
        float _1262 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1219.x + (-0.5));
        float _1264 = _1262 * (_1219.y + (-0.5));
        float _1265 = _1262 * (_1219.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1286 = (dot(vec3(_842, _843, _844), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1296 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4280 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1298 + 1.0))) + _1303) * _1266;
        float _1313 = _1234 * 0.5;
        float _1314 = _1244 * 0.5;
        float _1315 = _1254 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_842, _843, _844), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4313 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1340 + 1.0))) + _1345) * _1267;
        float _1355 = _1235 * 0.5;
        float _1356 = _1245 * 0.5;
        float _1357 = _1255 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_842, _843, _844), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4346 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1382 + 1.0))) + _1387) * _1268;
        _1404 = _1235;
        _1406 = _1234;
        _1407 = _1233;
        _1408 = _1245;
        _1409 = _1244;
        _1410 = _1243;
        _1411 = _1255;
        _1412 = _1254;
        _1413 = _1253;
        _1414 = _1268;
        _1415 = _1267;
        _1416 = _1266;
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1405;
        _1406 = _1405;
        _1407 = _1405;
        _1408 = _1405;
        _1409 = _1405;
        _1410 = _1405;
        _1411 = _1405;
        _1412 = _1405;
        _1413 = _1405;
        _1414 = _1405;
        _1415 = _1405;
        _1416 = _1405;
        _1417 = 0.0;
        _1418 = 0.0;
        _1419 = 0.0;
    }
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1445 = fma(_1074, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066));
        float _1449 = fma(_1074, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066));
        float _1453 = fma(_1074, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066));
        float _1476 = _1066 + _842;
        float _1477 = _1070 + _843;
        float _1478 = _1074 + _844;
        float _1488 = fma(_1478, cbModelParam._m0[30u].z, fma(_1477, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1476)) - _1445;
        float _1489 = fma(_1478, cbModelParam._m0[31u].z, fma(_1477, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1476)) - _1449;
        float _1490 = fma(_1478, cbModelParam._m0[32u].z, fma(_1477, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1476)) - _1453;
        float _1494 = inversesqrt(dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490)));
        float _1507 = ((_1494 * _1488) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1445 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1494 * _1489) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1449 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1509 = ((_1494 * _1490) / cbModelParam._m0[35u].z) + ((((((_1453 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        float _1544 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1511.x + (-0.5));
        float _1546 = _1544 * (_1511.y + (-0.5));
        float _1547 = _1544 * (_1511.z + (-0.5));
        float _1554 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1518.x + (-0.5));
        float _1556 = _1554 * (_1518.y + (-0.5));
        float _1557 = _1554 * (_1518.z + (-0.5));
        float _1564 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1525.x + (-0.5));
        float _1566 = _1564 * (_1525.y + (-0.5));
        float _1567 = _1564 * (_1525.z + (-0.5));
        float _1574 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1532.x + (-0.5));
        float _1576 = _1574 * (_1532.y + (-0.5));
        float _1577 = _1574 * (_1532.z + (-0.5));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = _1545 * 0.5;
        float _1582 = _1555 * 0.5;
        float _1583 = _1565 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_842, _843, _844), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4409 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1608 + 1.0))) + _1613) * _1578;
        float _1623 = _1546 * 0.5;
        float _1624 = _1556 * 0.5;
        float _1625 = _1566 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_842, _843, _844), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4442 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1650 + 1.0))) + _1655) * _1579;
        float _1665 = _1547 * 0.5;
        float _1666 = _1557 * 0.5;
        float _1667 = _1567 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_842, _843, _844), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4475 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1692 + 1.0))) + _1697) * _1580;
        _1714 = _1547;
        _1715 = _1546;
        _1716 = _1545;
        _1717 = _1557;
        _1718 = _1556;
        _1719 = _1555;
        _1720 = _1567;
        _1721 = _1566;
        _1722 = _1565;
        _1723 = _1580;
        _1724 = _1579;
        _1725 = _1578;
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
    }
    else
    {
        _1714 = _1405;
        _1715 = _1405;
        _1716 = _1405;
        _1717 = _1405;
        _1718 = _1405;
        _1719 = _1405;
        _1720 = _1405;
        _1721 = _1405;
        _1722 = _1405;
        _1723 = _1405;
        _1724 = _1405;
        _1725 = _1405;
        _1726 = 0.0;
        _1727 = 0.0;
        _1728 = 0.0;
    }
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1417)) + _1417;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1418)) + _1418;
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1419)) + _1419;
    float _1761 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1738));
    float _1782 = _1013 * 0.5;
    float _1783 = _1014 * 0.5;
    float _1784 = _1015 * 0.5;
    float _1785 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1788 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1791 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1825;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1798 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1404, _1408, _1411, _1414));
        float _1802 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1406, _1409, _1412, _1415));
        float _1806 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1813 = dot(vec4(cbModelParam._m0[39u]), vec4(_1782, _1783, _1784, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1836;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1827 = dot(vec4(cbModelParam._m0[40u]), vec4(_1782, _1783, _1784, 1.0));
        _1836 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1836 = 1.0;
    }
    float _1840 = (_1836 * cbModelParam._m0[1u].x) + (_1825 * (1.0 - cbModelParam._m0[1u].x));
    float _1850 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _845);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1850 : min(cbModelParam._m0[25u].z, _1850));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1898 = fma(_1074, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066)) + cbModelParam._m0[13u].w;
        float _1902 = fma(_1074, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066)) + cbModelParam._m0[14u].w;
        float _1906 = fma(_1074, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066)) + cbModelParam._m0[15u].w;
        float _1909 = fma(_1015, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013));
        float _1912 = fma(_1015, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013));
        float _1915 = fma(_1015, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013));
        float _1943;
        if (_1909 > 0.0)
        {
            _1943 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1943 = frontier_phi_17_15_ladder;
        }
        float _2112;
        if (_1912 > 0.0)
        {
            _2112 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2112 = frontier_phi_26_22_ladder;
        }
        float _2407;
        if (_1915 > 0.0)
        {
            _2407 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2407 = frontier_phi_38_33_ladder;
        }
        float _2409 = isnan(_2112) ? _1943 : (isnan(_1943) ? _2112 : min(_1943, _2112));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1909) + _1898;
        float _2415 = (_2410 * _1912) + _1902;
        float _2416 = (_2410 * _1915) + _1906;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2417;
        float _2421 = _2417 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 > _2421) || ((_2415 < _2419) || ((_2414 < _2419) || (_2414 > _2421))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2416, cbModelParam._m0[9u].z, fma(_2415, cbModelParam._m0[9u].y, _2414 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2416, cbModelParam._m0[10u].z, fma(_2415, cbModelParam._m0[10u].y, _2414 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2416, cbModelParam._m0[11u].z, fma(_2415, cbModelParam._m0[11u].y, _2414 * cbModelParam._m0[11u].x))), _1851);
            frontier_phi_16_38_ladder = _2561.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2561.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2561.x * cbModelParam._m0[1u].y;
        }
        _1931 = frontier_phi_16_38_ladder_2;
        _1933 = frontier_phi_16_38_ladder_1;
        _1935 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1013, _1014, _1015), _1851);
        _1931 = _1919.x * cbModelParam._m0[1u].y;
        _1933 = _1919.y * cbModelParam._m0[1u].y;
        _1935 = _1919.z * cbModelParam._m0[1u].y;
    }
    float _1939 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _845);
    float _1940 = isnan(_1939) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1939 : min(cbModelParam._m0[25u].w, _1939));
    float _2029;
    float _2031;
    float _2033;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1993 = fma(_1074, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066)) + cbModelParam._m0[21u].w;
        float _1997 = fma(_1074, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066)) + cbModelParam._m0[22u].w;
        float _2001 = fma(_1074, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066)) + cbModelParam._m0[23u].w;
        float _2004 = fma(_1015, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013));
        float _2007 = fma(_1015, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013));
        float _2010 = fma(_1015, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013));
        float _2117;
        if (_2004 > 0.0)
        {
            _2117 = abs((1.0 - _1993) / _2004);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1993 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2117 = frontier_phi_28_24_ladder;
        }
        float _2434;
        if (_2007 > 0.0)
        {
            _2434 = abs((1.0 - _1997) / _2007);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1997 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2434 = frontier_phi_40_35_ladder;
        }
        float _2761;
        if (_2010 > 0.0)
        {
            _2761 = abs((1.0 - _2001) / _2010);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2001 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2761 = frontier_phi_50_47_ladder;
        }
        float _2763 = isnan(_2434) ? _2117 : (isnan(_2117) ? _2434 : min(_2117, _2434));
        float _2764 = isnan(_2761) ? _2763 : (isnan(_2763) ? _2761 : min(_2763, _2761));
        float _2768 = (_2764 * _2004) + _1993;
        float _2769 = (_2764 * _2007) + _1997;
        float _2770 = (_2764 * _2010) + _2001;
        float _2771 = _2764 * 9.9999997473787516355514526367188e-05;
        float _2772 = (-1.0) - _2771;
        float _2774 = _2771 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2770 > _2774) || ((_2770 < _2772) || ((_2769 > _2774) || ((_2769 < _2772) || ((_2768 < _2772) || (_2768 > _2774))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2770, cbModelParam._m0[17u].z, fma(_2769, cbModelParam._m0[17u].y, _2768 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2770, cbModelParam._m0[18u].z, fma(_2769, cbModelParam._m0[18u].y, _2768 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2770, cbModelParam._m0[19u].z, fma(_2769, cbModelParam._m0[19u].y, _2768 * cbModelParam._m0[19u].x))), _1940);
            frontier_phi_25_50_ladder = _2888.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2888.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2888.x * cbModelParam._m0[1u].z;
        }
        _2029 = frontier_phi_25_50_ladder_2;
        _2031 = frontier_phi_25_50_ladder_1;
        _2033 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1013, _1014, _1015), _1940);
        _2029 = _2013.x * cbModelParam._m0[1u].z;
        _2031 = _2013.y * cbModelParam._m0[1u].z;
        _2033 = _2013.z * cbModelParam._m0[1u].z;
    }
    float _2045 = ((((1.0 - _1034) * ((_1021 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1034 * _1021)) * _1005;
    float _2046 = _2045 * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2047 = _2045 * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2048 = _2045 * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2051 = fma(_2048, cbSceneParam._m0[89u].z, fma(_2047, cbSceneParam._m0[89u].y, _2046 * cbSceneParam._m0[89u].x));
    float _2054 = fma(_2048, cbSceneParam._m0[90u].z, fma(_2047, cbSceneParam._m0[90u].y, _2046 * cbSceneParam._m0[90u].x));
    float _2057 = fma(_2048, cbSceneParam._m0[91u].z, fma(_2047, cbSceneParam._m0[91u].y, _2046 * cbSceneParam._m0[91u].x));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2104 = _2091 / _2103;
    float _2105 = _2095 / _2103;
    float _2106 = _2099 / _2103;
    float _2253;
    float _2254;
    float _2255;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2133 = ((uint(_2106 > cbSceneParam._m0[59u].y) + uint(_2106 > cbSceneParam._m0[59u].x)) + uint(_2106 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2134 = _2133 + 43u;
        uint _2142 = _2133 + 44u;
        uint _2150 = _2133 + 45u;
        uint _2158 = _2133 + 46u;
        float _2169 = fma(_2103, cbSceneParam._m0[_2134].w, fma(_2099, cbSceneParam._m0[_2134].z, fma(_2095, cbSceneParam._m0[_2134].y, _2091 * cbSceneParam._m0[_2134].x)));
        float _2173 = fma(_2103, cbSceneParam._m0[_2142].w, fma(_2099, cbSceneParam._m0[_2142].z, fma(_2095, cbSceneParam._m0[_2142].y, _2091 * cbSceneParam._m0[_2142].x)));
        float _2181 = fma(_2103, cbSceneParam._m0[_2158].w, fma(_2099, cbSceneParam._m0[_2158].z, fma(_2095, cbSceneParam._m0[_2158].y, _2091 * cbSceneParam._m0[_2158].x)));
        float _2186 = cbSceneParam._m0[33u].z * _2181;
        float _2188 = cbSceneParam._m0[33u].w * _2181;
        float _2191 = fma(_2103, cbSceneParam._m0[_2150].w, fma(_2099, cbSceneParam._m0[_2150].z, fma(_2095, cbSceneParam._m0[_2150].y, _2091 * cbSceneParam._m0[_2150].x))) / _2181;
        float _2239 = (cbSceneParam._m0[33u].x - sqrt(((_2105 * _2105) + (_2104 * _2104)) + (_2106 * _2106))) * cbSceneParam._m0[33u].y;
        float _4601 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2246 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 + _2169) / _2181, (_2188 + _2173) / _2181), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 + _2169) / _2181, (_2173 - _2186) / _2181), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 - _2186) / _2181, (_2173 - _2188) / _2181), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 - _2188) / _2181, (_2186 + _2173) / _2181), _2191), 0.0)).x), vec4(0.25)));
        _2253 = 1.0 - (_2246 * cbSceneParam._m0[34u].x);
        _2254 = 1.0 - (_2246 * cbSceneParam._m0[34u].y);
        _2255 = 1.0 - (_2246 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2253 = 1.0;
        _2254 = 1.0;
        _2255 = 1.0;
    }
    float _2319;
    float _2321;
    float _2323;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2307 = fma(_2103, cbSceneParam._m0[63u].w, fma(_2099, cbSceneParam._m0[63u].z, fma(_2095, cbSceneParam._m0[63u].y, _2091 * cbSceneParam._m0[63u].x)));
        float _2308 = fma(_2103, cbSceneParam._m0[60u].w, fma(_2099, cbSceneParam._m0[60u].z, fma(_2095, cbSceneParam._m0[60u].y, _2091 * cbSceneParam._m0[60u].x))) / _2307;
        float _2309 = fma(_2103, cbSceneParam._m0[61u].w, fma(_2099, cbSceneParam._m0[61u].z, fma(_2095, cbSceneParam._m0[61u].y, _2091 * cbSceneParam._m0[61u].x))) / _2307;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2308 >= cbSceneParam._m0[64u].x) && (_2309 >= cbSceneParam._m0[64u].y)) && (_2308 <= cbSceneParam._m0[64u].z)) && (_2309 <= cbSceneParam._m0[64u].w))
        {
            float _2447 = fma(_2103, cbSceneParam._m0[62u].w, fma(_2099, cbSceneParam._m0[62u].z, fma(_2095, cbSceneParam._m0[62u].y, _2091 * cbSceneParam._m0[62u].x))) / _2307;
            float _2451 = isnan(cbSceneParam._m0[41u].w) ? _2447 : (isnan(_2447) ? cbSceneParam._m0[41u].w : max(_2447, cbSceneParam._m0[41u].w));
            float _2494 = (cbSceneParam._m0[33u].x - sqrt(((_2105 * _2105) + (_2104 * _2104)) + (_2106 * _2106))) * cbSceneParam._m0[33u].y;
            float _4617 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
            float _2501 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2308, cbSceneParam._m0[33u].w + _2309), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2308, _2309 - cbSceneParam._m0[33u].z), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2308 - cbSceneParam._m0[33u].z, _2309 - cbSceneParam._m0[33u].w), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2308 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2309), _2451), 0.0)).x), vec4(0.25)));
            float _2505 = 1.0 - (_2501 * cbSceneParam._m0[34u].x);
            float _2506 = 1.0 - (_2501 * cbSceneParam._m0[34u].y);
            float _2507 = 1.0 - (_2501 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2507) ? _2255 : (isnan(_2255) ? _2507 : min(_2255, _2507));
            frontier_phi_37_36_ladder_1 = isnan(_2506) ? _2254 : (isnan(_2254) ? _2506 : min(_2254, _2506));
            frontier_phi_37_36_ladder_2 = isnan(_2505) ? _2253 : (isnan(_2253) ? _2505 : min(_2253, _2505));
        }
        else
        {
            frontier_phi_37_36_ladder = _2255;
            frontier_phi_37_36_ladder_1 = _2254;
            frontier_phi_37_36_ladder_2 = _2253;
        }
        _2319 = frontier_phi_37_36_ladder_2;
        _2321 = frontier_phi_37_36_ladder_1;
        _2323 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2319 = _2253;
        _2321 = _2254;
        _2323 = _2255;
    }
    uvec4 _2328 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2330 = _2328.x * 14u;
    uint _2331 = _2330 + 13u;
    float _2338 = _1005 + (-1.0);
    float _2343 = (cbLight._m0[_2331].x * _2338) + 1.0;
    float _2344 = (cbLight._m0[_2331].y * _2338) + 1.0;
    float _2345 = (cbLight._m0[_2331].z * _2338) + 1.0;
    float _2346 = (cbLight._m0[_2331].w * _2338) + 1.0;
    uint _2347 = _2330 + 5u;
    float _2353 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
    uint _2357 = _2330 + 4u;
    float _2366 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
    uint _2370 = _2330 | 1u;
    float _2381 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_842, _843, _844));
    float _2384 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_842, _843, _844));
    float _4653 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _4664 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2389 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2391 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * 0.3183098733425140380859375;
    float _2398 = ((cbLight._m0[_2347].x * _2353) * _2391) + (((cbLight._m0[_2357].x * _2319) * _2366) * _2389);
    float _2399 = ((_2353 * cbLight._m0[_2347].y) * _2391) + (((cbLight._m0[_2357].y * _2321) * _2366) * _2389);
    float _2400 = ((_2353 * cbLight._m0[_2347].z) * _2391) + (((cbLight._m0[_2357].z * _2323) * _2366) * _2389);
    uvec4 _2404 = floatBitsToUint(cbLight._m0[_2330 + 12u]);
    bool _2406 = _2404.x == 0u;
    float _2508;
    float _2510;
    float _2512;
    if (_2406)
    {
        _2508 = _2398;
        _2510 = _2399;
        _2512 = _2400;
    }
    else
    {
        uint _2516 = _2330 + 6u;
        float _2532 = (dot(vec3(cbLight._m0[_2330 + 2u].xyz), vec3(_842, _843, _844)) * 0.5) + 0.5;
        float _2533 = _2532 * _2532;
        float _4675 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2534 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2535 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2508 = (((cbLight._m0[_2516].x * 0.3183098733425140380859375) * _2534) * _2535) + _2398;
        _2510 = (((cbLight._m0[_2516].y * 0.3183098733425140380859375) * _2534) * _2535) + _2399;
        _2512 = (((cbLight._m0[_2516].z * 0.3183098733425140380859375) * _2534) * _2535) + _2400;
    }
    bool _2515 = _2404.y == 0u;
    float _2570;
    float _2572;
    float _2574;
    if (_2515)
    {
        _2570 = _2508;
        _2572 = _2510;
        _2574 = _2512;
    }
    else
    {
        uint _2732 = _2330 + 7u;
        float _2748 = (dot(vec3(cbLight._m0[_2330 + 3u].xyz), vec3(_842, _843, _844)) * 0.5) + 0.5;
        float _2749 = _2748 * _2748;
        float _4691 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2750 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2751 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2570 = (((cbLight._m0[_2732].x * 0.3183098733425140380859375) * _2750) * _2751) + _2508;
        _2572 = (((cbLight._m0[_2732].y * 0.3183098733425140380859375) * _2750) * _2751) + _2510;
        _2574 = (((cbLight._m0[_2732].z * 0.3183098733425140380859375) * _2750) * _2751) + _2512;
    }
    uint _2577 = _2330 + 8u;
    float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _845) * 0.949999988079071044921875);
    float _2591 = _2590 * _2590;
    float _2592 = cbLight._m0[_2330].x + _922;
    float _2593 = cbLight._m0[_2330].y + _923;
    float _2594 = cbLight._m0[_2330].z + _924;
    float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
    float _2599 = _2598 * _2592;
    float _2600 = _2598 * _2593;
    float _2601 = _2598 * _2594;
    float _2602 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2330].xyz));
    float _4707 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2605 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _4718 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _2606 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2607 = dot(vec3(_842, _843, _844), vec3(_2599, _2600, _2601));
    float _4729 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2611 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2599, _2600, _2601));
    float _4740 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2615 = _2591 * _2591;
    float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
    float _2630 = (exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2631 = 1.0 - _2591;
    float _2642 = (0.5 / (((_2606 * ((_2605 * _2631) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2631) + _2591) * _2605))) * _2605;
    float _4751 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2644 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
    uint _2658 = _2330 + 9u;
    float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _845) * 0.949999988079071044921875);
    float _2670 = _2669 * _2669;
    float _2671 = cbLight._m0[_2370].x + _922;
    float _2672 = cbLight._m0[_2370].y + _923;
    float _2673 = cbLight._m0[_2370].z + _924;
    float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
    float _2678 = _2677 * _2671;
    float _2679 = _2677 * _2672;
    float _2680 = _2677 * _2673;
    float _2681 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2370].xyz));
    float _4762 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2685 = dot(vec3(_842, _843, _844), vec3(_2678, _2679, _2680));
    float _4773 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2689 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2678, _2679, _2680));
    float _4784 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2693 = _2670 * _2670;
    float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
    float _2706 = (exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2707 = 1.0 - _2670;
    float _2717 = (0.5 / (((_2606 * ((_2684 * _2707) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2707) + _2670) * _2684))) * _2684;
    float _4795 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2719 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
    float _2729 = (((_2706 * cbLight._m0[_2658].x) * _2719) * _2353) + ((((cbLight._m0[_2577].x * _2319) * _2630) * _2644) * _2366);
    float _2730 = (((_2706 * cbLight._m0[_2658].y) * _2719) * _2353) + ((((cbLight._m0[_2577].y * _2321) * _2630) * _2644) * _2366);
    float _2731 = (((_2706 * cbLight._m0[_2658].z) * _2719) * _2353) + ((((cbLight._m0[_2577].z * _2323) * _2630) * _2644) * _2366);
    float _2787;
    float _2789;
    float _2791;
    if (_2406)
    {
        _2787 = _2729;
        _2789 = _2730;
        _2791 = _2731;
    }
    else
    {
        uint _2793 = _2330 + 2u;
        uint _2797 = _2330 + 10u;
        float _2811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2793].w)) * _845) * 0.949999988079071044921875);
        float _2812 = _2811 * _2811;
        float _2813 = cbLight._m0[_2793].x + _922;
        float _2814 = cbLight._m0[_2793].y + _923;
        float _2815 = cbLight._m0[_2793].z + _924;
        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
        float _2820 = _2819 * _2813;
        float _2821 = _2819 * _2814;
        float _2822 = _2819 * _2815;
        float _2823 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2793].xyz));
        float _4806 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2826 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2827 = dot(vec3(_842, _843, _844), vec3(_2820, _2821, _2822));
        float _4817 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2831 = dot(vec3(cbLight._m0[_2793].xyz), vec3(_2820, _2821, _2822));
        float _4828 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2835 = _2812 * _2812;
        float _2839 = ((_2830 * _2830) * (_2835 + (-1.0))) + 1.0;
        float _2848 = (exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2849 = 1.0 - _2812;
        float _2859 = (0.5 / (((_2606 * ((_2826 * _2849) + _2812)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2849) + _2812) * _2826))) * _2826;
        float _4839 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2861 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2835 / ((_2839 * _2839) * 3.141590118408203125));
        float _2862 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2787 = (((_2848 * cbLight._m0[_2797].x) * _2861) * _2862) + _2729;
        _2789 = (((_2848 * cbLight._m0[_2797].y) * _2861) * _2862) + _2730;
        _2791 = (((_2848 * cbLight._m0[_2797].z) * _2861) * _2862) + _2731;
    }
    float _2893;
    float _2895;
    float _2897;
    if (_2515)
    {
        _2893 = _2787;
        _2895 = _2789;
        _2897 = _2791;
    }
    else
    {
        uint _2904 = _2330 + 3u;
        uint _2908 = _2330 + 11u;
        float _2922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2904].w)) * _845) * 0.949999988079071044921875);
        float _2923 = _2922 * _2922;
        float _2924 = cbLight._m0[_2904].x + _922;
        float _2925 = cbLight._m0[_2904].y + _923;
        float _2926 = cbLight._m0[_2904].z + _924;
        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
        float _2931 = _2930 * _2924;
        float _2932 = _2930 * _2925;
        float _2933 = _2930 * _2926;
        float _2934 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2904].xyz));
        float _4855 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2938 = dot(vec3(_842, _843, _844), vec3(_2931, _2932, _2933));
        float _4866 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2942 = dot(vec3(cbLight._m0[_2904].xyz), vec3(_2931, _2932, _2933));
        float _4877 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2946 = _2923 * _2923;
        float _2950 = ((_2941 * _2941) * (_2946 + (-1.0))) + 1.0;
        float _2959 = (exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2960 = 1.0 - _2923;
        float _2970 = (0.5 / (((_2606 * ((_2937 * _2960) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2960) + _2923) * _2937))) * _2937;
        float _4888 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2972 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2946 / ((_2950 * _2950) * 3.141590118408203125));
        float _2973 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2893 = (((_2959 * cbLight._m0[_2908].x) * _2972) * _2973) + _2787;
        _2895 = (((_2959 * cbLight._m0[_2908].y) * _2972) * _2973) + _2789;
        _2897 = (((_2959 * cbLight._m0[_2908].z) * _2972) * _2973) + _2791;
    }
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    if (_2328.y == 0u)
    {
        uvec4 _2994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2995 = _2994.x;
        uint _3006 = uint((float(_2994.y) * floor(float(uint(cbSceneParam._m0[85u].y * _943) / _2995))) + floor(float(uint(cbSceneParam._m0[85u].x * _942) / _2995)));
        float _3016 = (log2(_2106 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3017 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        uint _3020 = uint(isnan(14.0) ? _3017 : (isnan(_3017) ? 14.0 : min(_3017, 14.0)));
        uvec4 _3025 = texelFetch(g_lightClusterGridBuffer, int(((_3020 << 2u) + (_3006 << 6u)) >> 2u));
        uint _3026 = _3025.x;
        uint _3027 = _2994.z;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((((1u << ((_3027 >> 4u) & 15u)) + 4294967295u) & _3026) == 0u) || ((_3027 & 240u) == 0u))
        {
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
        }
        else
        {
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            uint _3265 = 0u;
            uint _3274;
            bool _3275;
            for (;;)
            {
                _3274 = texelFetch(g_lightClassification, int((((_3020 << 5u) + (_3006 << 9u)) + (_3265 << 2u)) >> 2u)).x;
                _3275 = _3274 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3275)
                {
                    frontier_phi_71_pred = _3264;
                    frontier_phi_71_pred_1 = _3263;
                    frontier_phi_71_pred_2 = _3262;
                    frontier_phi_71_pred_3 = _3261;
                    frontier_phi_71_pred_4 = _3260;
                    frontier_phi_71_pred_5 = _3259;
                }
                else
                {
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    uint _3410;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3274;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    for (;;)
                    {
                        uint _3414 = uint(findLSB(_3410)) + (_3265 << 5u);
                        uint _3411 = (_3410 + 4294967295u) & _3410;
                        uint _3416 = _3414 * 48u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 3u)).x));
                        uint _3436 = (_3414 * 48u) + 4u;
                        vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 3u)).x));
                        uint _3455 = (_3414 * 48u) + 8u;
                        vec3 _3466 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3455)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 2u)).x));
                        float _3470 = _3430.x - _2104;
                        float _3471 = _3430.y - _2105;
                        float _3472 = _3430.z - _2106;
                        float _3473 = dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472));
                        float _3476 = inversesqrt(_3473);
                        float _3477 = _3476 * _3470;
                        float _3478 = _3476 * _3471;
                        float _3479 = _3476 * _3472;
                        float _3480 = dot(vec3(_961, _964, _967), vec3(_3477, _3478, _3479));
                        float _3485 = 1.0 - (_3473 * _3430.w);
                        float _4914 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3487 = sqrt(_3473) * _3449.w;
                        float _3490 = 1.39999997615814208984375 / (_3487 + 1.39999997615814208984375);
                        float _3491 = _3490 * _3490;
                        float _3494 = ((1.0 - _3491) * _3480) + _3491;
                        float _3497 = _3487 * _3487;
                        float _3501 = ((isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0))) * _3486) / ((_3497 * 0.699999988079071044921875) + 1.0);
                        float _3505 = (-0.0) - _2104;
                        float _3506 = (-0.0) - _2105;
                        float _3507 = (-0.0) - _2106;
                        float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                        float _3512 = _3511 * _3505;
                        float _3513 = _3511 * _3506;
                        float _3514 = _3511 * _3507;
                        float _3521 = exp2(log2(1.0 / ((_3497 * 3.5) + 5.0)) * 0.25);
                        float _3522 = 1.0 - _1021;
                        float _3529 = sqrt(1.0 - ((1.0 - (_3522 * _3522)) * (1.0 - (_3521 * _3521))));
                        float _3530 = _3529 * _3529;
                        float _3531 = _3530 * _3530;
                        float _3532 = _3512 + _3477;
                        float _3533 = _3513 + _3478;
                        float _3534 = _3514 + _3479;
                        float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                        float _3542 = dot(vec3(_961, _964, _967), vec3(_3512, _3513, _3514));
                        float _4930 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3545 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3546 = dot(vec3(_961, _964, _967), vec3(_3538 * _3532, _3538 * _3533, _3538 * _3534));
                        float _4941 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3549 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3553 = ((_3549 * _3549) * (_3531 + (-1.0))) + 1.0;
                        float _3554 = _3490 * _3530;
                        float _3555 = _3554 * _3554;
                        float _3558 = ((1.0 - _3555) * _3480) + _3555;
                        float _4952 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3559 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3560 = 1.0 - _3530;
                        float _3570 = (0.5 / (((_3559 * ((_3545 * _3560) + _3530)) + 9.9999999392252902907785028219223e-09) + (((_3559 * _3560) + _3530) * _3545))) * _3559;
                        float _4963 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3581 = (((_3531 * 3.1415927410125732421875) * (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) / ((_3553 * _3553) * ((_3497 * 2.1991131305694580078125) + 3.141590118408203125))) * _3486;
                        _3334 = (_3501 * _3449.x) + _3407;
                        _3335 = (_3501 * _3449.y) + _3408;
                        _3336 = (_3501 * _3449.z) + _3409;
                        _3331 = (_3581 * _3466.x) + _3404;
                        _3332 = (_3581 * _3466.y) + _3405;
                        _3333 = (_3581 * _3466.z) + _3406;
                        if (_3411 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3411;
                        }
                    }
                    frontier_phi_71_pred = _3336;
                    frontier_phi_71_pred_1 = _3335;
                    frontier_phi_71_pred_2 = _3334;
                    frontier_phi_71_pred_3 = _3333;
                    frontier_phi_71_pred_4 = _3332;
                    frontier_phi_71_pred_5 = _3331;
                }
                _3117 = frontier_phi_71_pred;
                _3115 = frontier_phi_71_pred_1;
                _3113 = frontier_phi_71_pred_2;
                _3111 = frontier_phi_71_pred_3;
                _3109 = frontier_phi_71_pred_4;
                _3107 = frontier_phi_71_pred_5;
                uint _3266 = _3265 + 1u;
                if (_3266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3259 = _3107;
                    _3260 = _3109;
                    _3261 = _3111;
                    _3262 = _3113;
                    _3263 = _3115;
                    _3264 = _3117;
                    _3265 = _3266;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
        }
        uvec4 _3120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3121 = _3120.z;
        uint _3123 = (_3121 >> 8u) & 15u;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        if (((4294967295u << _3123) & _3026) == 0u)
        {
            _3227 = _3106;
            _3229 = _3108;
            _3231 = _3110;
            _3233 = _3112;
            _3235 = _3114;
            _3237 = _3116;
        }
        else
        {
            float _3252 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
            float _3253 = _3252 * _2104;
            float _3254 = _3252 * _2105;
            float _3255 = _3252 * _2106;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3123 < ((_3121 >> 12u) & 15u))
            {
                float _3228;
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3387 = _3106;
                float _3388 = _3108;
                float _3389 = _3110;
                float _3390 = _3112;
                float _3391 = _3114;
                float _3392 = _3116;
                uint _3393 = _3123;
                uint _3402;
                bool _3403;
                for (;;)
                {
                    _3402 = texelFetch(g_lightClassification, int((((_3020 << 5u) + (_3006 << 9u)) + (_3393 << 2u)) >> 2u)).x;
                    _3403 = _3402 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3403)
                    {
                        frontier_phi_82_pred = _3392;
                        frontier_phi_82_pred_1 = _3391;
                        frontier_phi_82_pred_2 = _3390;
                        frontier_phi_82_pred_3 = _3389;
                        frontier_phi_82_pred_4 = _3388;
                        frontier_phi_82_pred_5 = _3387;
                    }
                    else
                    {
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        float _3613 = _3392;
                        uint _3614 = _3402;
                        uint _3615;
                        vec4 _3640;
                        float _3641;
                        vec4 _3656;
                        vec3 _3668;
                        vec4 _3683;
                        vec4 _3698;
                        float _3744;
                        bool _3745;
                        for (;;)
                        {
                            uint _3625 = ((_3393 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3614));
                            _3615 = (_3614 + 4294967295u) & _3614;
                            uint _3627 = _3625 * 40u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            _3641 = _3640.w;
                            uint _3643 = (_3625 * 40u) + 4u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3625 * 40u) + 8u;
                            _3668 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x));
                            uint _3670 = (_3625 * 40u) + 16u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3685 = (_3625 * 40u) + 20u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3700 = (_3625 * 40u) + 24u;
                            vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3719 = (_3625 * 40u) + 28u;
                            vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            _3744 = fma(_2106, _3732.z, fma(_2105, _3732.y, _3732.x * _2104)) + _3732.w;
                            _3745 = !((fma(_2106, _3713.z, fma(_2105, _3713.y, _3713.x * _2104)) + _3713.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3745)
                            {
                                float _3772 = _3640.x - _2104;
                                float _3773 = _3640.y - _2105;
                                float _3774 = _3640.z - _2106;
                                float _3775 = dot(vec3(_3772, _3773, _3774), vec3(_3772, _3773, _3774));
                                float _3778 = inversesqrt(_3775);
                                float _3779 = _3778 * _3772;
                                float _3780 = _3778 * _3773;
                                float _3781 = _3778 * _3774;
                                float _3785 = 1.0 - (_3775 / (_3641 * _3641));
                                float _4974 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3790 = sqrt(_3775) * _3656.w;
                                float _3792 = 1.39999997615814208984375 / (_3790 + 1.39999997615814208984375);
                                float _3793 = _3792 * _3792;
                                float _3796 = ((1.0 - _3793) * dot(vec3(_3779, _3780, _3781), vec3(_961, _964, _967))) + _3793;
                                float _3799 = _3790 * _3790;
                                float _3803 = (fma(_2106, _3683.z, fma(_2105, _3683.y, _3683.x * _2104)) + _3683.w) / _3744;
                                float _3804 = (fma(_2106, _3698.z, fma(_2105, _3698.y, _3698.x * _2104)) + _3698.w) / _3744;
                                float _3808 = 1.0 - dot(vec2(_3803, _3804), vec2(_3803, _3804));
                                float _4990 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3810 = _3809 * (((isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0))) * _3786) / ((_3799 * 0.699999988079071044921875) + 1.0));
                                float _3822 = exp2(log2(1.0 / ((_3799 * 3.5) + 5.0)) * 0.25);
                                float _3823 = 1.0 - _1021;
                                float _3830 = sqrt(1.0 - ((1.0 - (_3823 * _3823)) * (1.0 - (_3822 * _3822))));
                                float _3831 = _3830 * _3830;
                                float _3832 = _3831 * _3831;
                                float _3833 = _3779 - _3253;
                                float _3834 = _3780 - _3254;
                                float _3835 = _3781 - _3255;
                                float _3839 = inversesqrt(dot(vec3(_3833, _3834, _3835), vec3(_3833, _3834, _3835)));
                                float _3843 = dot(vec3(_961, _964, _967), vec3((-0.0) - _3253, (-0.0) - _3254, (-0.0) - _3255));
                                float _5001 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3847 = dot(vec3(_961, _964, _967), vec3(_3839 * _3833, _3839 * _3834, _3839 * _3835));
                                float _5012 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3850 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3854 = ((_3850 * _3850) * (_3832 + (-1.0))) + 1.0;
                                float _3855 = _3792 * _3831;
                                float _3856 = _3855 * _3855;
                                float _3862 = ((1.0 - _3856) * dot(vec3(_961, _964, _967), vec3(_3779, _3780, _3781))) + _3856;
                                float _5023 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3863 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3864 = 1.0 - _3831;
                                float _3874 = (0.5 / (((_3863 * ((_3846 * _3864) + _3831)) + 9.9999999392252902907785028219223e-09) + (((_3863 * _3864) + _3831) * _3846))) * _3863;
                                float _5034 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3884 = (_3809 * _3786) * (((_3832 * 3.1415927410125732421875) * (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) / ((_3854 * _3854) * ((_3799 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3810 * _3656.z;
                                frontier_phi_88_pred_1 = _3810 * _3656.y;
                                frontier_phi_88_pred_2 = _3810 * _3656.x;
                                frontier_phi_88_pred_3 = _3884 * _3668.z;
                                frontier_phi_88_pred_4 = _3884 * _3668.y;
                                frontier_phi_88_pred_5 = _3884 * _3668.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3893 = frontier_phi_88_pred;
                            _3892 = frontier_phi_88_pred_1;
                            _3891 = frontier_phi_88_pred_2;
                            _3890 = frontier_phi_88_pred_3;
                            _3889 = frontier_phi_88_pred_4;
                            _3888 = frontier_phi_88_pred_5;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3600 = _3893 + _3613;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            _3597 = _3890 + _3610;
                            if (_3615 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3615;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3600;
                        frontier_phi_82_pred_1 = _3599;
                        frontier_phi_82_pred_2 = _3598;
                        frontier_phi_82_pred_3 = _3597;
                        frontier_phi_82_pred_4 = _3596;
                        frontier_phi_82_pred_5 = _3595;
                    }
                    _3238 = frontier_phi_82_pred;
                    _3236 = frontier_phi_82_pred_1;
                    _3234 = frontier_phi_82_pred_2;
                    _3232 = frontier_phi_82_pred_3;
                    _3230 = frontier_phi_82_pred_4;
                    _3228 = frontier_phi_82_pred_5;
                    uint _3394 = _3393 + 1u;
                    if (_3394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3387 = _3228;
                        _3388 = _3230;
                        _3389 = _3232;
                        _3390 = _3234;
                        _3391 = _3236;
                        _3392 = _3238;
                        _3393 = _3394;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3234;
                frontier_phi_63_64_ladder_1 = _3238;
                frontier_phi_63_64_ladder_2 = _3236;
                frontier_phi_63_64_ladder_3 = _3232;
                frontier_phi_63_64_ladder_4 = _3230;
                frontier_phi_63_64_ladder_5 = _3228;
            }
            else
            {
                frontier_phi_63_64_ladder = _3112;
                frontier_phi_63_64_ladder_1 = _3116;
                frontier_phi_63_64_ladder_2 = _3114;
                frontier_phi_63_64_ladder_3 = _3110;
                frontier_phi_63_64_ladder_4 = _3108;
                frontier_phi_63_64_ladder_5 = _3106;
            }
            _3227 = frontier_phi_63_64_ladder_5;
            _3229 = frontier_phi_63_64_ladder_4;
            _3231 = frontier_phi_63_64_ladder_3;
            _3233 = frontier_phi_63_64_ladder;
            _3235 = frontier_phi_63_64_ladder_2;
            _3237 = frontier_phi_63_64_ladder_1;
        }
        float _3242 = isnan(1.0) ? _1005 : (isnan(_1005) ? 1.0 : min(_1005, 1.0));
        _3039 = (_3242 * _3233) + _2570;
        _3041 = (_3242 * _3235) + _2572;
        _3043 = (_3242 * _3237) + _2574;
        _3045 = ((_3227 * 0.039999999105930328369140625) * _3242) + _2893;
        _3047 = ((_3229 * 0.039999999105930328369140625) * _3242) + _2895;
        _3049 = ((_3231 * 0.039999999105930328369140625) * _3242) + _2897;
    }
    else
    {
        _3039 = _2570;
        _3041 = _2572;
        _3043 = _2574;
        _3045 = _2893;
        _3047 = _2895;
        _3049 = _2897;
    }
    float _5050 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _5061 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _5072 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _3066 = ((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3039 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1005))) + ((_3045 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    float _3067 = ((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3041 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1005))) + ((_3047 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    float _3068 = ((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3043 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1005))) + ((_3049 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    uint _3069 = _250 + 6u;
    float _3077 = _942 / cbSceneParam._m0[86u].x;
    float _3078 = _943 / cbSceneParam._m0[86u].y;
    vec4 _3092 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, (log2((isnan(cbSceneParam._m0[77u].w) ? _863 : (isnan(_863) ? cbSceneParam._m0[77u].w : min(_863, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3094 = _3092.x;
    float _3095 = _3092.y;
    float _3096 = _3092.z;
    float _3097 = _3092.w;
    float _3169;
    float _3171;
    float _3173;
    float _3175;
    if (_863 > cbSceneParam._m0[78u].w)
    {
        float _3131 = isnan(_863) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _863 : min(cbSceneParam._m0[80u].w, _863));
        float _3132 = _3131 / _863;
        float _3143 = _3132 * _915;
        float _3144 = _916 * _3132;
        float _3145 = (-0.0) - _3144;
        float _3147 = _3132 * _917;
        float _3149 = (cbSceneParam._m0[77u].w * _3145) / _3131;
        float _3150 = _3149 + cbSceneParam._m0[79u].w;
        float _3151 = cbSceneParam._m0[79u].w - _3144;
        float _3157 = sqrt(((_3143 * _3143) + (_3144 * _3144)) + (_3147 * _3147));
        float _3160 = (1.0 - (cbSceneParam._m0[77u].w / _3131)) * _3157;
        float _3165 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3167 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3344;
        if (abs((_3145 - _3149) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3344 = ((((_3150 > 0.0) ? exp2(_3165 * _3150) : (2.0 - exp2(_3167 * _3150))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3160;
        }
        else
        {
            float _3288 = 1.0 / cbSceneParam._m0[80u].x;
            float _3289 = isnan(_3151) ? _3150 : (isnan(_3150) ? _3151 : max(_3150, _3151));
            float _3290 = isnan(_3151) ? _3150 : (isnan(_3150) ? _3151 : min(_3150, _3151));
            float _3299 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : min(_3289, 0.0));
            float _3300 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : min(_3290, 0.0));
            _3344 = ((abs(_3157 / _3145) * cbSceneParam._m0[80u].y) * ((((_3299 - _3300) * 2.0) - ((exp2(_3165 * (isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0)))) - exp2(_3165 * (isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))))) * _3288)) - ((exp2(_3167 * _3299) - exp2(_3167 * _3300)) * _3288))) + (_3160 * cbSceneParam._m0[80u].z);
        }
        vec4 _3346 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, 1.0), 0.0);
        float _3355 = exp2((_3344 * (-1.44269502162933349609375)) * (1.0 - _3346.w));
        float _3356 = log2(_3355);
        float _3372 = log2(_3097);
        _3169 = (exp2(_3372 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].x)) * _3346.x) / cbSceneParam._m0[78u].x)) + _3094;
        _3171 = (exp2(_3372 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].y)) * _3346.y) / cbSceneParam._m0[78u].y)) + _3095;
        _3173 = (exp2(_3372 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].z)) * _3346.z) / cbSceneParam._m0[78u].z)) + _3096;
        _3175 = _3355 * _3097;
    }
    else
    {
        _3169 = _3094;
        _3171 = _3095;
        _3173 = _3096;
        _3175 = _3097;
    }
    bool _3382;
    vec4 _3185;
    vec4 _3207;
    float _3209;
    float _3213;
    float _3214;
    float _3215;
    float _3216;
    bool _3226;
    for (;;)
    {
        _3185 = cbMatDynParam._m0[0u];
        float _3187 = roundEven(_3185.y);
        bool _3188 = _3187 == 3.0;
        float _3189 = log2(_3175);
        float _3196 = exp2(_3189 * cbSceneParam._m0[78u].x) * _3066;
        float _3197 = exp2(_3189 * cbSceneParam._m0[78u].y) * _3067;
        float _3198 = exp2(_3189 * cbSceneParam._m0[78u].z) * _3068;
        float _3205 = _931 + (-0.5);
        _3207 = cbMtdParam._m0[1u];
        _3209 = _3207.y * _3205;
        float _3212 = (_3187 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3213 = _3212 * (_3188 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3169)));
        _3214 = _3212 * (_3188 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3171)));
        _3215 = _3212 * (_3188 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3173)));
        _3216 = _3205 * 0.999000012874603271484375;
        _3226 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3226)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _3216) < 0.5)
            {
                _3382 = true;
                break;
            }
        }
        uint _3323 = _980 + uint(_3185.w);
        if ((cbInstanceData._m0[_3323].w < 1.0) && ((cbInstanceData._m0[_3323].w + _3216) < 0.5))
        {
            _3382 = true;
            break;
        }
        if ((_3209 + 1.0) < _3207.x)
        {
            _3382 = true;
            break;
        }
        _3382 = false;
        break;
    }
    float _3586;
    if (_3382)
    {
        discard_state = true;
        _3586 = 0.0;
    }
    else
    {
        _3586 = cbInstanceData._m0[_3069].w;
    }
    SV_Target.x = _3213;
    SV_Target.y = _3214;
    SV_Target.z = _3215;
    SV_Target.w = _3586;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3069].w;
    discard_exit();
}


